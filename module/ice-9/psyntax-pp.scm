(eval-when (compile) (set-current-module (resolve-module (quote (guile)))))
(if #f #f)

(letrec*
  ((#{top-level-eval-hook 4262}#
     (lambda (#{x 27369}# #{mod 27370}#)
       (primitive-eval #{x 27369}#)))
   (#{maybe-name-value! 4267}#
     (lambda (#{name 16133}# #{val 16134}#)
       (if (if (struct? #{val 16134}#)
             (eq? (struct-vtable #{val 16134}#)
                  (vector-ref %expanded-vtables 13))
             #f)
         (let ((#{meta 16141}# (struct-ref #{val 16134}# 1)))
           (if (not (assq 'name #{meta 16141}#))
             (let ((#{v 16146}#
                     (cons (cons 'name #{name 16133}#) #{meta 16141}#)))
               (struct-set! #{val 16134}# 1 #{v 16146}#)))))))
   (#{build-application 4269}#
     (lambda (#{source 15858}#
              #{fun-exp 15859}#
              #{arg-exps 15860}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 11)
         #{source 15858}#
         #{fun-exp 15859}#
         #{arg-exps 15860}#)))
   (#{build-conditional 4270}#
     (lambda (#{source 15866}#
              #{test-exp 15867}#
              #{then-exp 15868}#
              #{else-exp 15869}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 10)
         #{source 15866}#
         #{test-exp 15867}#
         #{then-exp 15868}#
         #{else-exp 15869}#)))
   (#{build-dynlet 4271}#
     (lambda (#{source 15876}#
              #{fluids 15877}#
              #{vals 15878}#
              #{body 15879}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 17)
         #{source 15876}#
         #{fluids 15877}#
         #{vals 15878}#
         #{body 15879}#)))
   (#{build-lexical-reference 4272}#
     (lambda (#{type 27371}#
              #{source 27372}#
              #{name 27373}#
              #{var 27374}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 3)
         #{source 27372}#
         #{name 27373}#
         #{var 27374}#)))
   (#{build-lexical-assignment 4273}#
     (lambda (#{source 15886}#
              #{name 15887}#
              #{var 15888}#
              #{exp 15889}#)
       (begin
         (if (if (struct? #{exp 15889}#)
               (eq? (struct-vtable #{exp 15889}#)
                    (vector-ref %expanded-vtables 13))
               #f)
           (let ((#{meta 15905}# (struct-ref #{exp 15889}# 1)))
             (if (not (assq 'name #{meta 15905}#))
               (let ((#{v 15912}#
                       (cons (cons 'name #{name 15887}#) #{meta 15905}#)))
                 (struct-set! #{exp 15889}# 1 #{v 15912}#)))))
         (make-struct/no-tail
           (vector-ref %expanded-vtables 4)
           #{source 15886}#
           #{name 15887}#
           #{var 15888}#
           #{exp 15889}#))))
   (#{analyze-variable 4274}#
     (lambda (#{mod 27380}#
              #{var 27381}#
              #{modref-cont 27382}#
              #{bare-cont 27383}#)
       (if (not #{mod 27380}#)
         (#{bare-cont 27383}# #{var 27381}#)
         (let ((#{kind 27384}# (car #{mod 27380}#))
               (#{mod 27385}# (cdr #{mod 27380}#)))
           (if (eqv? #{kind 27384}# 'public)
             (#{modref-cont 27382}#
               #{mod 27385}#
               #{var 27381}#
               #t)
             (if (eqv? #{kind 27384}# 'private)
               (if (not (equal?
                          #{mod 27385}#
                          (module-name (current-module))))
                 (#{modref-cont 27382}#
                   #{mod 27385}#
                   #{var 27381}#
                   #f)
                 (#{bare-cont 27383}# #{var 27381}#))
               (if (eqv? #{kind 27384}# 'bare)
                 (#{bare-cont 27383}# #{var 27381}#)
                 (if (eqv? #{kind 27384}# 'hygiene)
                   (if (if (not (equal?
                                  #{mod 27385}#
                                  (module-name (current-module))))
                         (module-variable
                           (resolve-module #{mod 27385}#)
                           #{var 27381}#)
                         #f)
                     (#{modref-cont 27382}#
                       #{mod 27385}#
                       #{var 27381}#
                       #f)
                     (#{bare-cont 27383}# #{var 27381}#))
                   (syntax-violation
                     #f
                     "bad module kind"
                     #{var 27381}#
                     #{mod 27385}#)))))))))
   (#{build-global-reference 4275}#
     (lambda (#{source 27400}# #{var 27401}# #{mod 27402}#)
       (#{analyze-variable 4274}#
         #{mod 27402}#
         #{var 27401}#
         (lambda (#{mod 27405}# #{var 27406}# #{public? 27407}#)
           (make-struct/no-tail
             (vector-ref %expanded-vtables 5)
             #{source 27400}#
             #{mod 27405}#
             #{var 27406}#
             #{public? 27407}#))
         (lambda (#{var 27415}#)
           (make-struct/no-tail
             (vector-ref %expanded-vtables 7)
             #{source 27400}#
             #{var 27415}#)))))
   (#{build-global-assignment 4276}#
     (lambda (#{source 15921}#
              #{var 15922}#
              #{exp 15923}#
              #{mod 15924}#)
       (begin
         (if (if (struct? #{exp 15923}#)
               (eq? (struct-vtable #{exp 15923}#)
                    (vector-ref %expanded-vtables 13))
               #f)
           (let ((#{meta 15940}# (struct-ref #{exp 15923}# 1)))
             (if (not (assq 'name #{meta 15940}#))
               (let ((#{v 15947}#
                       (cons (cons 'name #{var 15922}#) #{meta 15940}#)))
                 (struct-set! #{exp 15923}# 1 #{v 15947}#)))))
         (#{analyze-variable 4274}#
           #{mod 15924}#
           #{var 15922}#
           (lambda (#{mod 15952}# #{var 15953}# #{public? 15954}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 6)
               #{source 15921}#
               #{mod 15952}#
               #{var 15953}#
               #{public? 15954}#
               #{exp 15923}#))
           (lambda (#{var 15962}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 8)
               #{source 15921}#
               #{var 15962}#
               #{exp 15923}#))))))
   (#{build-global-definition 4277}#
     (lambda (#{source 27421}# #{var 27422}# #{exp 27423}#)
       (begin
         (if (if (struct? #{exp 27423}#)
               (eq? (struct-vtable #{exp 27423}#)
                    (vector-ref %expanded-vtables 13))
               #f)
           (let ((#{meta 27439}# (struct-ref #{exp 27423}# 1)))
             (if (not (assq 'name #{meta 27439}#))
               (let ((#{v 27446}#
                       (cons (cons 'name #{var 27422}#) #{meta 27439}#)))
                 (struct-set! #{exp 27423}# 1 #{v 27446}#)))))
         (make-struct/no-tail
           (vector-ref %expanded-vtables 9)
           #{source 27421}#
           #{var 27422}#
           #{exp 27423}#))))
   (#{build-simple-lambda 4278}#
     (lambda (#{src 15968}#
              #{req 15969}#
              #{rest 15970}#
              #{vars 15971}#
              #{meta 15972}#
              #{exp 15973}#)
       (let ((#{body 15979}#
               (make-struct/no-tail
                 (vector-ref %expanded-vtables 14)
                 #{src 15968}#
                 #{req 15969}#
                 #f
                 #{rest 15970}#
                 #f
                 '()
                 #{vars 15971}#
                 #{exp 15973}#
                 #f)))
         (make-struct/no-tail
           (vector-ref %expanded-vtables 13)
           #{src 15968}#
           #{meta 15972}#
           #{body 15979}#))))
   (#{build-sequence 4283}#
     (lambda (#{src 27454}# #{exps 27455}#)
       (if (null? (cdr #{exps 27455}#))
         (car #{exps 27455}#)
         (make-struct/no-tail
           (vector-ref %expanded-vtables 12)
           #{src 27454}#
           #{exps 27455}#))))
   (#{build-let 4284}#
     (lambda (#{src 15991}#
              #{ids 15992}#
              #{vars 15993}#
              #{val-exps 15994}#
              #{body-exp 15995}#)
       (begin
         (for-each
           #{maybe-name-value! 4267}#
           #{ids 15992}#
           #{val-exps 15994}#)
         (if (null? #{vars 15993}#)
           #{body-exp 15995}#
           (make-struct/no-tail
             (vector-ref %expanded-vtables 15)
             #{src 15991}#
             #{ids 15992}#
             #{vars 15993}#
             #{val-exps 15994}#
             #{body-exp 15995}#)))))
   (#{build-named-let 4285}#
     (lambda (#{src 16019}#
              #{ids 16020}#
              #{vars 16021}#
              #{val-exps 16022}#
              #{body-exp 16023}#)
       (let ((#{f 16024}# (car #{vars 16021}#))
             (#{f-name 16025}# (car #{ids 16020}#))
             (#{vars 16026}# (cdr #{vars 16021}#))
             (#{ids 16027}# (cdr #{ids 16020}#)))
         (let ((#{proc 16028}#
                 (let ((#{body 16048}#
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 14)
                           #{src 16019}#
                           #{ids 16027}#
                           #f
                           #f
                           #f
                           '()
                           #{vars 16026}#
                           #{body-exp 16023}#
                           #f)))
                   (make-struct/no-tail
                     (vector-ref %expanded-vtables 13)
                     #{src 16019}#
                     '()
                     #{body 16048}#))))
           (begin
             (if (if (struct? #{proc 16028}#)
                   (eq? (struct-vtable #{proc 16028}#)
                        (vector-ref %expanded-vtables 13))
                   #f)
               (let ((#{meta 16072}# (struct-ref #{proc 16028}# 1)))
                 (if (not (assq 'name #{meta 16072}#))
                   (let ((#{v 16079}#
                           (cons (cons 'name #{f-name 16025}#)
                                 #{meta 16072}#)))
                     (struct-set! #{proc 16028}# 1 #{v 16079}#)))))
             (for-each
               #{maybe-name-value! 4267}#
               #{ids 16027}#
               #{val-exps 16022}#)
             (let ((#{names 16103}# (list #{f-name 16025}#))
                   (#{gensyms 16104}# (list #{f 16024}#))
                   (#{vals 16105}# (list #{proc 16028}#))
                   (#{body 16106}#
                     (let ((#{fun-exp 16110}#
                             (make-struct/no-tail
                               (vector-ref %expanded-vtables 3)
                               #{src 16019}#
                               #{f-name 16025}#
                               #{f 16024}#)))
                       (make-struct/no-tail
                         (vector-ref %expanded-vtables 11)
                         #{src 16019}#
                         #{fun-exp 16110}#
                         #{val-exps 16022}#))))
               (make-struct/no-tail
                 (vector-ref %expanded-vtables 16)
                 #{src 16019}#
                 #f
                 #{names 16103}#
                 #{gensyms 16104}#
                 #{vals 16105}#
                 #{body 16106}#)))))))
   (#{build-letrec 4286}#
     (lambda (#{src 16126}#
              #{in-order? 16127}#
              #{ids 16128}#
              #{vars 16129}#
              #{val-exps 16130}#
              #{body-exp 16131}#)
       (if (null? #{vars 16129}#)
         #{body-exp 16131}#
         (begin
           (for-each
             #{maybe-name-value! 4267}#
             #{ids 16128}#
             #{val-exps 16130}#)
           (make-struct/no-tail
             (vector-ref %expanded-vtables 16)
             #{src 16126}#
             #{in-order? 16127}#
             #{ids 16128}#
             #{vars 16129}#
             #{val-exps 16130}#
             #{body-exp 16131}#)))))
   (#{source-annotation 4295}#
     (lambda (#{x 16157}#)
       (if (if (vector? #{x 16157}#)
             (if (= (vector-length #{x 16157}#) 4)
               (eq? (vector-ref #{x 16157}# 0) 'syntax-object)
               #f)
             #f)
         (#{source-annotation 4295}#
           (vector-ref #{x 16157}# 1))
         (if (pair? #{x 16157}#)
           (let ((#{props 16172}# (source-properties #{x 16157}#)))
             (if (pair? #{props 16172}#) #{props 16172}# #f))
           #f))))
   (#{extend-env 4296}#
     (lambda (#{labels 16174}# #{bindings 16175}# #{r 16176}#)
       (if (null? #{labels 16174}#)
         #{r 16176}#
         (#{extend-env 4296}#
           (cdr #{labels 16174}#)
           (cdr #{bindings 16175}#)
           (cons (cons (car #{labels 16174}#)
                       (car #{bindings 16175}#))
                 #{r 16176}#)))))
   (#{extend-var-env 4297}#
     (lambda (#{labels 16177}# #{vars 16178}# #{r 16179}#)
       (if (null? #{labels 16177}#)
         #{r 16179}#
         (#{extend-var-env 4297}#
           (cdr #{labels 16177}#)
           (cdr #{vars 16178}#)
           (cons (cons (car #{labels 16177}#)
                       (cons 'lexical (car #{vars 16178}#)))
                 #{r 16179}#)))))
   (#{macros-only-env 4298}#
     (lambda (#{r 16180}#)
       (if (null? #{r 16180}#)
         '()
         (let ((#{a 16181}# (car #{r 16180}#)))
           (if (eq? (car (cdr #{a 16181}#)) 'macro)
             (cons #{a 16181}#
                   (#{macros-only-env 4298}# (cdr #{r 16180}#)))
             (#{macros-only-env 4298}# (cdr #{r 16180}#)))))))
   (#{global-extend 4300}#
     (lambda (#{type 16183}# #{sym 16184}# #{val 16185}#)
       (module-define!
         (current-module)
         #{sym 16184}#
         (make-syntax-transformer
           #{sym 16184}#
           #{type 16183}#
           #{val 16185}#))))
   (#{id? 4302}#
     (lambda (#{x 10359}#)
       (if (symbol? #{x 10359}#)
         #t
         (if (if (vector? #{x 10359}#)
               (if (= (vector-length #{x 10359}#) 4)
                 (eq? (vector-ref #{x 10359}# 0) 'syntax-object)
                 #f)
               #f)
           (symbol? (vector-ref #{x 10359}# 1))
           #f))))
   (#{gen-labels 4305}#
     (lambda (#{ls 16195}#)
       (if (null? #{ls 16195}#)
         '()
         (cons (symbol->string (gensym "i"))
               (#{gen-labels 4305}# (cdr #{ls 16195}#))))))
   (#{make-binding-wrap 4316}#
     (lambda (#{ids 16199}# #{labels 16200}# #{w 16201}#)
       (if (null? #{ids 16199}#)
         #{w 16201}#
         (cons (car #{w 16201}#)
               (cons (let ((#{labelvec 16202}#
                             (list->vector #{labels 16200}#)))
                       (let ((#{n 16203}# (vector-length #{labelvec 16202}#)))
                         (let ((#{symnamevec 16204}# (make-vector #{n 16203}#))
                               (#{marksvec 16205}# (make-vector #{n 16203}#)))
                           (begin
                             (letrec*
                               ((#{f 16206}#
                                  (lambda (#{ids 16209}# #{i 16210}#)
                                    (if (not (null? #{ids 16209}#))
                                      (call-with-values
                                        (lambda ()
                                          (let ((#{x 16213}#
                                                  (car #{ids 16209}#)))
                                            (if (if (vector? #{x 16213}#)
                                                  (if (= (vector-length
                                                           #{x 16213}#)
                                                         4)
                                                    (eq? (vector-ref
                                                           #{x 16213}#
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (values
                                                (vector-ref #{x 16213}# 1)
                                                (let ((#{m1 16229}#
                                                        (car #{w 16201}#))
                                                      (#{m2 16230}#
                                                        (car (vector-ref
                                                               #{x 16213}#
                                                               2))))
                                                  (if (null? #{m2 16230}#)
                                                    #{m1 16229}#
                                                    (append
                                                      #{m1 16229}#
                                                      #{m2 16230}#))))
                                              (values
                                                #{x 16213}#
                                                (car #{w 16201}#)))))
                                        (lambda (#{symname 16250}#
                                                 #{marks 16251}#)
                                          (begin
                                            (vector-set!
                                              #{symnamevec 16204}#
                                              #{i 16210}#
                                              #{symname 16250}#)
                                            (vector-set!
                                              #{marksvec 16205}#
                                              #{i 16210}#
                                              #{marks 16251}#)
                                            (#{f 16206}#
                                              (cdr #{ids 16209}#)
                                              (#{1+}# #{i 16210}#)))))))))
                               (#{f 16206}# #{ids 16199}# 0))
                             (vector
                               'ribcage
                               #{symnamevec 16204}#
                               #{marksvec 16205}#
                               #{labelvec 16202}#)))))
                     (cdr #{w 16201}#))))))
   (#{join-wraps 4318}#
     (lambda (#{w1 16260}# #{w2 16261}#)
       (let ((#{m1 16262}# (car #{w1 16260}#))
             (#{s1 16263}# (cdr #{w1 16260}#)))
         (if (null? #{m1 16262}#)
           (if (null? #{s1 16263}#)
             #{w2 16261}#
             (cons (car #{w2 16261}#)
                   (let ((#{m2 16270}# (cdr #{w2 16261}#)))
                     (if (null? #{m2 16270}#)
                       #{s1 16263}#
                       (append #{s1 16263}# #{m2 16270}#)))))
           (cons (let ((#{m2 16279}# (car #{w2 16261}#)))
                   (if (null? #{m2 16279}#)
                     #{m1 16262}#
                     (append #{m1 16262}# #{m2 16279}#)))
                 (let ((#{m2 16288}# (cdr #{w2 16261}#)))
                   (if (null? #{m2 16288}#)
                     #{s1 16263}#
                     (append #{s1 16263}# #{m2 16288}#))))))))
   (#{same-marks? 4320}#
     (lambda (#{x 16293}# #{y 16294}#)
       (if (eq? #{x 16293}# #{y 16294}#)
         (eq? #{x 16293}# #{y 16294}#)
         (if (not (null? #{x 16293}#))
           (if (not (null? #{y 16294}#))
             (if (eq? (car #{x 16293}#) (car #{y 16294}#))
               (#{same-marks? 4320}#
                 (cdr #{x 16293}#)
                 (cdr #{y 16294}#))
               #f)
             #f)
           #f))))
   (#{id-var-name 4321}#
     (lambda (#{id 16302}# #{w 16303}#)
       (letrec*
         ((#{search 16304}#
            (lambda (#{sym 16365}# #{subst 16366}# #{marks 16367}#)
              (if (null? #{subst 16366}#)
                (values #f #{marks 16367}#)
                (let ((#{fst 16368}# (car #{subst 16366}#)))
                  (if (eq? #{fst 16368}# 'shift)
                    (#{search 16304}#
                      #{sym 16365}#
                      (cdr #{subst 16366}#)
                      (cdr #{marks 16367}#))
                    (let ((#{symnames 16370}# (vector-ref #{fst 16368}# 1)))
                      (if (vector? #{symnames 16370}#)
                        (let ((#{n 16382}# (vector-length #{symnames 16370}#)))
                          (letrec*
                            ((#{f 16383}#
                               (lambda (#{i 16385}#)
                                 (if (= #{i 16385}# #{n 16382}#)
                                   (#{search 16304}#
                                     #{sym 16365}#
                                     (cdr #{subst 16366}#)
                                     #{marks 16367}#)
                                   (if (if (eq? (vector-ref
                                                  #{symnames 16370}#
                                                  #{i 16385}#)
                                                #{sym 16365}#)
                                         (#{same-marks? 4320}#
                                           #{marks 16367}#
                                           (vector-ref
                                             (vector-ref #{fst 16368}# 2)
                                             #{i 16385}#))
                                         #f)
                                     (values
                                       (vector-ref
                                         (vector-ref #{fst 16368}# 3)
                                         #{i 16385}#)
                                       #{marks 16367}#)
                                     (#{f 16383}# (#{1+}# #{i 16385}#)))))))
                            (#{f 16383}# 0)))
                        (letrec*
                          ((#{f 16418}#
                             (lambda (#{symnames 16420}# #{i 16421}#)
                               (if (null? #{symnames 16420}#)
                                 (#{search 16304}#
                                   #{sym 16365}#
                                   (cdr #{subst 16366}#)
                                   #{marks 16367}#)
                                 (if (if (eq? (car #{symnames 16420}#)
                                              #{sym 16365}#)
                                       (#{same-marks? 4320}#
                                         #{marks 16367}#
                                         (list-ref
                                           (vector-ref #{fst 16368}# 2)
                                           #{i 16421}#))
                                       #f)
                                   (values
                                     (list-ref
                                       (vector-ref #{fst 16368}# 3)
                                       #{i 16421}#)
                                     #{marks 16367}#)
                                   (#{f 16418}#
                                     (cdr #{symnames 16420}#)
                                     (#{1+}# #{i 16421}#)))))))
                          (#{f 16418}# #{symnames 16370}# 0))))))))))
         (if (symbol? #{id 16302}#)
           (let ((#{t 16307}#
                   (#{search 16304}#
                     #{id 16302}#
                     (cdr #{w 16303}#)
                     (car #{w 16303}#))))
             (if #{t 16307}# #{t 16307}# #{id 16302}#))
           (if (if (vector? #{id 16302}#)
                 (if (= (vector-length #{id 16302}#) 4)
                   (eq? (vector-ref #{id 16302}# 0) 'syntax-object)
                   #f)
                 #f)
             (let ((#{id 16322}# (vector-ref #{id 16302}# 1))
                   (#{w1 16323}# (vector-ref #{id 16302}# 2)))
               (let ((#{marks 16324}#
                       (let ((#{m1 16334}# (car #{w 16303}#))
                             (#{m2 16335}# (car #{w1 16323}#)))
                         (if (null? #{m2 16335}#)
                           #{m1 16334}#
                           (append #{m1 16334}# #{m2 16335}#)))))
                 (call-with-values
                   (lambda ()
                     (#{search 16304}#
                       #{id 16322}#
                       (cdr #{w 16303}#)
                       #{marks 16324}#))
                   (lambda (#{new-id 16351}# #{marks 16352}#)
                     (if #{new-id 16351}#
                       #{new-id 16351}#
                       (let ((#{t 16360}#
                               (#{search 16304}#
                                 #{id 16322}#
                                 (cdr #{w1 16323}#)
                                 #{marks 16352}#)))
                         (if #{t 16360}# #{t 16360}# #{id 16322}#)))))))
             (syntax-violation
               'id-var-name
               "invalid id"
               #{id 16302}#))))))
   (#{valid-bound-ids? 4324}#
     (lambda (#{ids 16443}#)
       (if (letrec*
             ((#{all-ids? 16444}#
                (lambda (#{ids 16606}#)
                  (if (null? #{ids 16606}#)
                    (null? #{ids 16606}#)
                    (if (let ((#{x 16617}# (car #{ids 16606}#)))
                          (if (symbol? #{x 16617}#)
                            #t
                            (if (if (vector? #{x 16617}#)
                                  (if (= (vector-length #{x 16617}#) 4)
                                    (eq? (vector-ref #{x 16617}# 0)
                                         'syntax-object)
                                    #f)
                                  #f)
                              (symbol? (vector-ref #{x 16617}# 1))
                              #f)))
                      (#{all-ids? 16444}# (cdr #{ids 16606}#))
                      #f)))))
             (#{all-ids? 16444}# #{ids 16443}#))
         (#{distinct-bound-ids? 4325}# #{ids 16443}#)
         #f)))
   (#{distinct-bound-ids? 4325}#
     (lambda (#{ids 16745}#)
       (letrec*
         ((#{distinct? 16746}#
            (lambda (#{ids 16858}#)
              (if (null? #{ids 16858}#)
                (null? #{ids 16858}#)
                (if (not (#{bound-id-member? 4326}#
                           (car #{ids 16858}#)
                           (cdr #{ids 16858}#)))
                  (#{distinct? 16746}# (cdr #{ids 16858}#))
                  #f)))))
         (#{distinct? 16746}# #{ids 16745}#))))
   (#{bound-id-member? 4326}#
     (lambda (#{x 17068}# #{list 17069}#)
       (if (not (null? #{list 17069}#))
         (let ((#{t 17070}#
                 (let ((#{j 17151}# (car #{list 17069}#)))
                   (if (if (if (vector? #{x 17068}#)
                             (if (= (vector-length #{x 17068}#) 4)
                               (eq? (vector-ref #{x 17068}# 0) 'syntax-object)
                               #f)
                             #f)
                         (if (vector? #{j 17151}#)
                           (if (= (vector-length #{j 17151}#) 4)
                             (eq? (vector-ref #{j 17151}# 0) 'syntax-object)
                             #f)
                           #f)
                         #f)
                     (if (eq? (vector-ref #{x 17068}# 1)
                              (vector-ref #{j 17151}# 1))
                       (#{same-marks? 4320}#
                         (car (vector-ref #{x 17068}# 2))
                         (car (vector-ref #{j 17151}# 2)))
                       #f)
                     (eq? #{x 17068}# #{j 17151}#)))))
           (if #{t 17070}#
             #{t 17070}#
             (#{bound-id-member? 4326}#
               #{x 17068}#
               (cdr #{list 17069}#))))
         #f)))
   (#{wrap 4327}#
     (lambda (#{x 17195}# #{w 17196}# #{defmod 17197}#)
       (if (if (null? (car #{w 17196}#))
             (null? (cdr #{w 17196}#))
             #f)
         #{x 17195}#
         (if (if (vector? #{x 17195}#)
               (if (= (vector-length #{x 17195}#) 4)
                 (eq? (vector-ref #{x 17195}# 0) 'syntax-object)
                 #f)
               #f)
           (let ((#{expression 17211}# (vector-ref #{x 17195}# 1))
                 (#{wrap 17212}#
                   (#{join-wraps 4318}#
                     #{w 17196}#
                     (vector-ref #{x 17195}# 2)))
                 (#{module 17213}# (vector-ref #{x 17195}# 3)))
             (vector
               'syntax-object
               #{expression 17211}#
               #{wrap 17212}#
               #{module 17213}#))
           (if (null? #{x 17195}#)
             #{x 17195}#
             (vector
               'syntax-object
               #{x 17195}#
               #{w 17196}#
               #{defmod 17197}#))))))
   (#{source-wrap 4328}#
     (lambda (#{x 17230}#
              #{w 17231}#
              #{s 17232}#
              #{defmod 17233}#)
       (#{wrap 4327}#
         (begin
           (if (if (pair? #{x 17230}#) #{s 17232}# #f)
             (set-source-properties! #{x 17230}# #{s 17232}#))
           #{x 17230}#)
         #{w 17231}#
         #{defmod 17233}#)))
   (#{expand-sequence 4329}#
     (lambda (#{body 27460}#
              #{r 27461}#
              #{w 27462}#
              #{s 27463}#
              #{mod 27464}#)
       (#{build-sequence 4283}#
         #{s 27463}#
         (letrec*
           ((#{dobody 27544}#
              (lambda (#{body 27894}#
                       #{r 27895}#
                       #{w 27896}#
                       #{mod 27897}#)
                (if (null? #{body 27894}#)
                  '()
                  (let ((#{first 27898}#
                          (let ((#{e 27902}# (car #{body 27894}#)))
                            (call-with-values
                              (lambda ()
                                (#{syntax-type 4333}#
                                  #{e 27902}#
                                  #{r 27895}#
                                  #{w 27896}#
                                  (#{source-annotation 4295}# #{e 27902}#)
                                  #f
                                  #{mod 27897}#
                                  #f))
                              (lambda (#{type 27909}#
                                       #{value 27910}#
                                       #{e 27911}#
                                       #{w 27912}#
                                       #{s 27913}#
                                       #{mod 27914}#)
                                (#{expand-expr 4335}#
                                  #{type 27909}#
                                  #{value 27910}#
                                  #{e 27911}#
                                  #{r 27895}#
                                  #{w 27912}#
                                  #{s 27913}#
                                  #{mod 27914}#))))))
                    (cons #{first 27898}#
                          (#{dobody 27544}#
                            (cdr #{body 27894}#)
                            #{r 27895}#
                            #{w 27896}#
                            #{mod 27897}#)))))))
           (#{dobody 27544}#
             #{body 27460}#
             #{r 27461}#
             #{w 27462}#
             #{mod 27464}#)))))
   (#{expand-top-sequence 4330}#
     (lambda (#{body 17251}#
              #{r 17252}#
              #{w 17253}#
              #{s 17254}#
              #{m 17255}#
              #{esew 17256}#
              #{mod 17257}#)
       (letrec*
         ((#{scan 17258}#
            (lambda (#{body 17389}#
                     #{r 17390}#
                     #{w 17391}#
                     #{s 17392}#
                     #{m 17393}#
                     #{esew 17394}#
                     #{mod 17395}#
                     #{exps 17396}#)
              (if (null? #{body 17389}#)
                #{exps 17396}#
                (call-with-values
                  (lambda ()
                    (call-with-values
                      (lambda ()
                        (let ((#{e 17397}# (car #{body 17389}#)))
                          (#{syntax-type 4333}#
                            #{e 17397}#
                            #{r 17390}#
                            #{w 17391}#
                            (let ((#{t 17401}#
                                    (#{source-annotation 4295}# #{e 17397}#)))
                              (if #{t 17401}# #{t 17401}# #{s 17392}#))
                            #f
                            #{mod 17395}#
                            #f)))
                      (lambda (#{type 17636}#
                               #{value 17637}#
                               #{e 17638}#
                               #{w 17639}#
                               #{s 17640}#
                               #{mod 17641}#)
                        (if (eqv? #{type 17636}# 'begin-form)
                          (let ((#{tmp 17646}#
                                  ($sc-dispatch #{e 17638}# '(_))))
                            (if #{tmp 17646}#
                              (@apply (lambda () #{exps 17396}#) #{tmp 17646}#)
                              (let ((#{tmp 17650}#
                                      ($sc-dispatch
                                        #{e 17638}#
                                        '(_ any . each-any))))
                                (if #{tmp 17650}#
                                  (@apply
                                    (lambda (#{e1 17654}# #{e2 17655}#)
                                      (#{scan 17258}#
                                        (cons #{e1 17654}# #{e2 17655}#)
                                        #{r 17390}#
                                        #{w 17639}#
                                        #{s 17640}#
                                        #{m 17393}#
                                        #{esew 17394}#
                                        #{mod 17641}#
                                        #{exps 17396}#))
                                    #{tmp 17650}#)
                                  (syntax-violation
                                    #f
                                    "source expression failed to match any pattern"
                                    #{e 17638}#)))))
                          (if (eqv? #{type 17636}# 'local-syntax-form)
                            (#{expand-local-syntax 4339}#
                              #{value 17637}#
                              #{e 17638}#
                              #{r 17390}#
                              #{w 17639}#
                              #{s 17640}#
                              #{mod 17641}#
                              (lambda (#{body 17670}#
                                       #{r 17671}#
                                       #{w 17672}#
                                       #{s 17673}#
                                       #{mod 17674}#)
                                (#{scan 17258}#
                                  #{body 17670}#
                                  #{r 17671}#
                                  #{w 17672}#
                                  #{s 17673}#
                                  #{m 17393}#
                                  #{esew 17394}#
                                  #{mod 17674}#
                                  #{exps 17396}#)))
                            (if (eqv? #{type 17636}# 'eval-when-form)
                              (let ((#{tmp 17679}#
                                      ($sc-dispatch
                                        #{e 17638}#
                                        '(_ each-any any . each-any))))
                                (if #{tmp 17679}#
                                  (@apply
                                    (lambda (#{x 17683}#
                                             #{e1 17684}#
                                             #{e2 17685}#)
                                      (let ((#{when-list 17686}#
                                              (#{parse-when-list 4332}#
                                                #{e 17638}#
                                                #{x 17683}#))
                                            (#{body 17687}#
                                              (cons #{e1 17684}#
                                                    #{e2 17685}#)))
                                        (if (eq? #{m 17393}# 'e)
                                          (if (memq 'eval #{when-list 17686}#)
                                            (#{scan 17258}#
                                              #{body 17687}#
                                              #{r 17390}#
                                              #{w 17639}#
                                              #{s 17640}#
                                              (if (memq 'expand
                                                        #{when-list 17686}#)
                                                'c&e
                                                'e)
                                              '(eval)
                                              #{mod 17641}#
                                              #{exps 17396}#)
                                            (begin
                                              (if (memq 'expand
                                                        #{when-list 17686}#)
                                                (let ((#{x 17764}#
                                                        (#{expand-top-sequence 4330}#
                                                          #{body 17687}#
                                                          #{r 17390}#
                                                          #{w 17639}#
                                                          #{s 17640}#
                                                          'e
                                                          '(eval)
                                                          #{mod 17641}#)))
                                                  (primitive-eval
                                                    #{x 17764}#)))
                                              (values #{exps 17396}#)))
                                          (if (memq 'load #{when-list 17686}#)
                                            (if (let ((#{t 17790}#
                                                        (memq 'compile
                                                              #{when-list 17686}#)))
                                                  (if #{t 17790}#
                                                    #{t 17790}#
                                                    (let ((#{t 17839}#
                                                            (memq 'expand
                                                                  #{when-list 17686}#)))
                                                      (if #{t 17839}#
                                                        #{t 17839}#
                                                        (if (eq? #{m 17393}#
                                                                 'c&e)
                                                          (memq 'eval
                                                                #{when-list 17686}#)
                                                          #f)))))
                                              (#{scan 17258}#
                                                #{body 17687}#
                                                #{r 17390}#
                                                #{w 17639}#
                                                #{s 17640}#
                                                'c&e
                                                '(compile load)
                                                #{mod 17641}#
                                                #{exps 17396}#)
                                              (if (if (eq? #{m 17393}# 'c)
                                                    #t
                                                    (eq? #{m 17393}# 'c&e))
                                                (#{scan 17258}#
                                                  #{body 17687}#
                                                  #{r 17390}#
                                                  #{w 17639}#
                                                  #{s 17640}#
                                                  'c
                                                  '(load)
                                                  #{mod 17641}#
                                                  #{exps 17396}#)
                                                (values #{exps 17396}#)))
                                            (if (let ((#{t 17968}#
                                                        (memq 'compile
                                                              #{when-list 17686}#)))
                                                  (if #{t 17968}#
                                                    #{t 17968}#
                                                    (let ((#{t 18017}#
                                                            (memq 'expand
                                                                  #{when-list 17686}#)))
                                                      (if #{t 18017}#
                                                        #{t 18017}#
                                                        (if (eq? #{m 17393}#
                                                                 'c&e)
                                                          (memq 'eval
                                                                #{when-list 17686}#)
                                                          #f)))))
                                              (begin
                                                (let ((#{x 18141}#
                                                        (#{expand-top-sequence 4330}#
                                                          #{body 17687}#
                                                          #{r 17390}#
                                                          #{w 17639}#
                                                          #{s 17640}#
                                                          'e
                                                          '(eval)
                                                          #{mod 17641}#)))
                                                  (primitive-eval #{x 18141}#))
                                                (values #{exps 17396}#))
                                              (values #{exps 17396}#))))))
                                    #{tmp 17679}#)
                                  (syntax-violation
                                    #f
                                    "source expression failed to match any pattern"
                                    #{e 17638}#)))
                              (if (eqv? #{type 17636}# 'define-syntax-form)
                                (let ((#{n 18182}#
                                        (#{id-var-name 4321}#
                                          #{value 17637}#
                                          #{w 17639}#))
                                      (#{r 18183}#
                                        (#{macros-only-env 4298}#
                                          #{r 17390}#)))
                                  (if (eqv? #{m 17393}# 'c)
                                    (if (memq 'compile #{esew 17394}#)
                                      (let ((#{e 18187}#
                                              (#{expand-install-global 4331}#
                                                #{n 18182}#
                                                (#{expand 4334}#
                                                  #{e 17638}#
                                                  #{r 18183}#
                                                  #{w 17639}#
                                                  #{mod 17641}#))))
                                        (begin
                                          (#{top-level-eval-hook 4262}#
                                            #{e 18187}#
                                            #{mod 17641}#)
                                          (if (memq 'load #{esew 17394}#)
                                            (values
                                              (cons #{e 18187}#
                                                    #{exps 17396}#))
                                            (values #{exps 17396}#))))
                                      (if (memq 'load #{esew 17394}#)
                                        (values
                                          (cons (#{expand-install-global 4331}#
                                                  #{n 18182}#
                                                  (#{expand 4334}#
                                                    #{e 17638}#
                                                    #{r 18183}#
                                                    #{w 17639}#
                                                    #{mod 17641}#))
                                                #{exps 17396}#))
                                        (values #{exps 17396}#)))
                                    (if (eqv? #{m 17393}# 'c&e)
                                      (let ((#{e 18634}#
                                              (#{expand-install-global 4331}#
                                                #{n 18182}#
                                                (#{expand 4334}#
                                                  #{e 17638}#
                                                  #{r 18183}#
                                                  #{w 17639}#
                                                  #{mod 17641}#))))
                                        (begin
                                          (#{top-level-eval-hook 4262}#
                                            #{e 18634}#
                                            #{mod 17641}#)
                                          (values
                                            (cons #{e 18634}#
                                                  #{exps 17396}#))))
                                      (begin
                                        (if (memq 'eval #{esew 17394}#)
                                          (#{top-level-eval-hook 4262}#
                                            (#{expand-install-global 4331}#
                                              #{n 18182}#
                                              (#{expand 4334}#
                                                #{e 17638}#
                                                #{r 18183}#
                                                #{w 17639}#
                                                #{mod 17641}#))
                                            #{mod 17641}#))
                                        (values #{exps 17396}#)))))
                                (if (eqv? #{type 17636}# 'define-form)
                                  (let ((#{n 19269}#
                                          (#{id-var-name 4321}#
                                            #{value 17637}#
                                            #{w 17639}#)))
                                    (let ((#{type 19270}#
                                            (car (let ((#{t 20014}#
                                                         (assq #{n 19269}#
                                                               #{r 17390}#)))
                                                   (if #{t 20014}#
                                                     (cdr #{t 20014}#)
                                                     (if (symbol? #{n 19269}#)
                                                       (let ((#{t 20019}#
                                                               (begin
                                                                 (if (if (not #{mod 17641}#)
                                                                       (current-module)
                                                                       #f)
                                                                   (warn "module system is booted, we should have a module"
                                                                         #{n 19269}#))
                                                                 (let ((#{v 20056}#
                                                                         (module-variable
                                                                           (if #{mod 17641}#
                                                                             (resolve-module
                                                                               (cdr #{mod 17641}#))
                                                                             (current-module))
                                                                           #{n 19269}#)))
                                                                   (if #{v 20056}#
                                                                     (if (variable-bound?
                                                                           #{v 20056}#)
                                                                       (let ((#{val 20065}#
                                                                               (variable-ref
                                                                                 #{v 20056}#)))
                                                                         (if (macro?
                                                                               #{val 20065}#)
                                                                           (if (macro-type
                                                                                 #{val 20065}#)
                                                                             (cons (macro-type
                                                                                     #{val 20065}#)
                                                                                   (macro-binding
                                                                                     #{val 20065}#))
                                                                             #f)
                                                                           #f))
                                                                       #f)
                                                                     #f)))))
                                                         (if #{t 20019}#
                                                           #{t 20019}#
                                                           '(global)))
                                                       '(displaced-lexical)))))))
                                      (if (let ((#{t 19304}# #{type 19270}#))
                                            (if (eqv? #{t 19304}# 'global)
                                              #t
                                              (if (eqv? #{t 19304}# 'core)
                                                #t
                                                (if (eqv? #{t 19304}# 'macro)
                                                  #t
                                                  (eqv? #{t 19304}#
                                                        'module-ref)))))
                                        (begin
                                          (if (if (if (eq? #{m 17393}# 'c)
                                                    #t
                                                    (eq? #{m 17393}# 'c&e))
                                                (if (not (module-local-variable
                                                           (current-module)
                                                           #{n 19269}#))
                                                  (current-module)
                                                  #f)
                                                #f)
                                            (let ((#{old 19468}#
                                                    (module-variable
                                                      (current-module)
                                                      #{n 19269}#)))
                                              (if (if (variable? #{old 19468}#)
                                                    (variable-bound?
                                                      #{old 19468}#)
                                                    #f)
                                                (module-define!
                                                  (current-module)
                                                  #{n 19269}#
                                                  (variable-ref #{old 19468}#))
                                                (module-add!
                                                  (current-module)
                                                  #{n 19269}#
                                                  (make-undefined-variable)))))
                                          (values
                                            (cons (if (eq? #{m 17393}# 'c&e)
                                                    (let ((#{x 19470}#
                                                            (#{build-global-definition 4277}#
                                                              #{s 17640}#
                                                              #{n 19269}#
                                                              (#{expand 4334}#
                                                                #{e 17638}#
                                                                #{r 17390}#
                                                                #{w 17639}#
                                                                #{mod 17641}#))))
                                                      (begin
                                                        (#{top-level-eval-hook 4262}#
                                                          #{x 19470}#
                                                          #{mod 17641}#)
                                                        #{x 19470}#))
                                                    (lambda ()
                                                      (#{build-global-definition 4277}#
                                                        #{s 17640}#
                                                        #{n 19269}#
                                                        (#{expand 4334}#
                                                          #{e 17638}#
                                                          #{r 17390}#
                                                          #{w 17639}#
                                                          #{mod 17641}#))))
                                                  #{exps 17396}#)))
                                        (if (let ((#{t 19941}# #{type 19270}#))
                                              (eqv? #{t 19941}#
                                                    'displaced-lexical))
                                          (syntax-violation
                                            #f
                                            "identifier out of context"
                                            #{e 17638}#
                                            (#{wrap 4327}#
                                              #{value 17637}#
                                              #{w 17639}#
                                              #{mod 17641}#))
                                          (syntax-violation
                                            #f
                                            "cannot define keyword at top level"
                                            #{e 17638}#
                                            (#{wrap 4327}#
                                              #{value 17637}#
                                              #{w 17639}#
                                              #{mod 17641}#))))))
                                  (values
                                    (cons (if (eq? #{m 17393}# 'c&e)
                                            (let ((#{x 20076}#
                                                    (#{expand-expr 4335}#
                                                      #{type 17636}#
                                                      #{value 17637}#
                                                      #{e 17638}#
                                                      #{r 17390}#
                                                      #{w 17639}#
                                                      #{s 17640}#
                                                      #{mod 17641}#)))
                                              (begin
                                                (primitive-eval #{x 20076}#)
                                                #{x 20076}#))
                                            (lambda ()
                                              (#{expand-expr 4335}#
                                                #{type 17636}#
                                                #{value 17637}#
                                                #{e 17638}#
                                                #{r 17390}#
                                                #{w 17639}#
                                                #{s 17640}#
                                                #{mod 17641}#)))
                                          #{exps 17396}#))))))))))
                  (lambda (#{exps 20085}#)
                    (#{scan 17258}#
                      (cdr #{body 17389}#)
                      #{r 17390}#
                      #{w 17391}#
                      #{s 17392}#
                      #{m 17393}#
                      #{esew 17394}#
                      #{mod 17395}#
                      #{exps 20085}#)))))))
         (call-with-values
           (lambda ()
             (#{scan 17258}#
               #{body 17251}#
               #{r 17252}#
               #{w 17253}#
               #{s 17254}#
               #{m 17255}#
               #{esew 17256}#
               #{mod 17257}#
               '()))
           (lambda (#{exps 17261}#)
             (if (null? #{exps 17261}#)
               (make-struct/no-tail
                 (vector-ref %expanded-vtables 0)
                 #{s 17254}#)
               (#{build-sequence 4283}#
                 #{s 17254}#
                 (letrec*
                   ((#{lp 17301}#
                      (lambda (#{in 17385}# #{out 17386}#)
                        (if (null? #{in 17385}#)
                          #{out 17386}#
                          (let ((#{e 17387}# (car #{in 17385}#)))
                            (#{lp 17301}#
                              (cdr #{in 17385}#)
                              (cons (if (procedure? #{e 17387}#)
                                      (#{e 17387}#)
                                      #{e 17387}#)
                                    #{out 17386}#)))))))
                   (#{lp 17301}# #{exps 17261}# '())))))))))
   (#{expand-install-global 4331}#
     (lambda (#{name 20086}# #{e 20087}#)
       (let ((#{exp 20093}#
               (let ((#{fun-exp 20103}#
                       (if (equal? (module-name (current-module)) '(guile))
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 7)
                           #f
                           'make-syntax-transformer)
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 5)
                           #f
                           '(guile)
                           'make-syntax-transformer
                           #f)))
                     (#{arg-exps 20104}#
                       (list (make-struct/no-tail
                               (vector-ref %expanded-vtables 1)
                               #f
                               #{name 20086}#)
                             (make-struct/no-tail
                               (vector-ref %expanded-vtables 1)
                               #f
                               'macro)
                             #{e 20087}#)))
                 (make-struct/no-tail
                   (vector-ref %expanded-vtables 11)
                   #f
                   #{fun-exp 20103}#
                   #{arg-exps 20104}#))))
         (begin
           (if (if (struct? #{exp 20093}#)
                 (eq? (struct-vtable #{exp 20093}#)
                      (vector-ref %expanded-vtables 13))
                 #f)
             (let ((#{meta 20145}# (struct-ref #{exp 20093}# 1)))
               (if (not (assq 'name #{meta 20145}#))
                 (let ((#{v 20152}#
                         (cons (cons 'name #{name 20086}#) #{meta 20145}#)))
                   (struct-set! #{exp 20093}# 1 #{v 20152}#)))))
           (make-struct/no-tail
             (vector-ref %expanded-vtables 9)
             #f
             #{name 20086}#
             #{exp 20093}#)))))
   (#{parse-when-list 4332}#
     (lambda (#{e 20163}# #{when-list 20164}#)
       (let ((#{result 20165}#
               (#{strip 4347}# #{when-list 20164}# '(()))))
         (letrec*
           ((#{lp 20166}#
              (lambda (#{l 20220}#)
                (if (null? #{l 20220}#)
                  #{result 20165}#
                  (if (let ((#{t 20222}# (car #{l 20220}#)))
                        (if (eq? #{t 20222}# 'compile)
                          #t
                          (if (eq? #{t 20222}# 'load)
                            #t
                            (if (eq? #{t 20222}# 'eval)
                              #t
                              (eq? #{t 20222}# 'expand)))))
                    (#{lp 20166}# (cdr #{l 20220}#))
                    (syntax-violation
                      'eval-when
                      "invalid situation"
                      #{e 20163}#
                      (car #{l 20220}#)))))))
           (#{lp 20166}# #{result 20165}#)))))
   (#{syntax-type 4333}#
     (lambda (#{e 20224}#
              #{r 20225}#
              #{w 20226}#
              #{s 20227}#
              #{rib 20228}#
              #{mod 20229}#
              #{for-car? 20230}#)
       (if (symbol? #{e 20224}#)
         (let ((#{n 20231}#
                 (#{id-var-name 4321}# #{e 20224}# #{w 20226}#)))
           (let ((#{b 20232}#
                   (let ((#{t 20807}# (assq #{n 20231}# #{r 20225}#)))
                     (if #{t 20807}#
                       (cdr #{t 20807}#)
                       (if (symbol? #{n 20231}#)
                         (let ((#{t 20812}#
                                 (begin
                                   (if (if (not #{mod 20229}#)
                                         (current-module)
                                         #f)
                                     (warn "module system is booted, we should have a module"
                                           #{n 20231}#))
                                   (let ((#{v 20849}#
                                           (module-variable
                                             (if #{mod 20229}#
                                               (resolve-module
                                                 (cdr #{mod 20229}#))
                                               (current-module))
                                             #{n 20231}#)))
                                     (if #{v 20849}#
                                       (if (variable-bound? #{v 20849}#)
                                         (let ((#{val 20858}#
                                                 (variable-ref #{v 20849}#)))
                                           (if (macro? #{val 20858}#)
                                             (if (macro-type #{val 20858}#)
                                               (cons (macro-type #{val 20858}#)
                                                     (macro-binding
                                                       #{val 20858}#))
                                               #f)
                                             #f))
                                         #f)
                                       #f)))))
                           (if #{t 20812}# #{t 20812}# '(global)))
                         '(displaced-lexical))))))
             (let ((#{type 20233}# (car #{b 20232}#)))
               (if (let ((#{t 20267}# #{type 20233}#))
                     (eqv? #{t 20267}# 'lexical))
                 (values
                   #{type 20233}#
                   (cdr #{b 20232}#)
                   #{e 20224}#
                   #{w 20226}#
                   #{s 20227}#
                   #{mod 20229}#)
                 (if (let ((#{t 20424}# #{type 20233}#))
                       (eqv? #{t 20424}# 'global))
                   (values
                     #{type 20233}#
                     #{n 20231}#
                     #{e 20224}#
                     #{w 20226}#
                     #{s 20227}#
                     #{mod 20229}#)
                   (if (let ((#{t 20550}# #{type 20233}#))
                         (eqv? #{t 20550}# 'macro))
                     (if #{for-car? 20230}#
                       (values
                         #{type 20233}#
                         (cdr #{b 20232}#)
                         #{e 20224}#
                         #{w 20226}#
                         #{s 20227}#
                         #{mod 20229}#)
                       (#{syntax-type 4333}#
                         (#{expand-macro 4337}#
                           (cdr #{b 20232}#)
                           #{e 20224}#
                           #{r 20225}#
                           #{w 20226}#
                           #{s 20227}#
                           #{rib 20228}#
                           #{mod 20229}#)
                         #{r 20225}#
                         '(())
                         #{s 20227}#
                         #{rib 20228}#
                         #{mod 20229}#
                         #f))
                     (values
                       #{type 20233}#
                       (cdr #{b 20232}#)
                       #{e 20224}#
                       #{w 20226}#
                       #{s 20227}#
                       #{mod 20229}#)))))))
         (if (pair? #{e 20224}#)
           (let ((#{first 20869}# (car #{e 20224}#)))
             (call-with-values
               (lambda ()
                 (#{syntax-type 4333}#
                   #{first 20869}#
                   #{r 20225}#
                   #{w 20226}#
                   #{s 20227}#
                   #{rib 20228}#
                   #{mod 20229}#
                   #t))
               (lambda (#{ftype 20871}#
                        #{fval 20872}#
                        #{fe 20873}#
                        #{fw 20874}#
                        #{fs 20875}#
                        #{fmod 20876}#)
                 (if (eqv? #{ftype 20871}# 'lexical)
                   (values
                     'lexical-call
                     #{fval 20872}#
                     #{e 20224}#
                     #{w 20226}#
                     #{s 20227}#
                     #{mod 20229}#)
                   (if (eqv? #{ftype 20871}# 'global)
                     (values
                       'global-call
                       (vector
                         'syntax-object
                         #{fval 20872}#
                         #{w 20226}#
                         #{fmod 20876}#)
                       #{e 20224}#
                       #{w 20226}#
                       #{s 20227}#
                       #{mod 20229}#)
                     (if (eqv? #{ftype 20871}# 'macro)
                       (#{syntax-type 4333}#
                         (#{expand-macro 4337}#
                           #{fval 20872}#
                           #{e 20224}#
                           #{r 20225}#
                           #{w 20226}#
                           #{s 20227}#
                           #{rib 20228}#
                           #{mod 20229}#)
                         #{r 20225}#
                         '(())
                         #{s 20227}#
                         #{rib 20228}#
                         #{mod 20229}#
                         #{for-car? 20230}#)
                       (if (eqv? #{ftype 20871}# 'module-ref)
                         (call-with-values
                           (lambda ()
                             (#{fval 20872}#
                               #{e 20224}#
                               #{r 20225}#
                               #{w 20226}#))
                           (lambda (#{e 20897}#
                                    #{r 20898}#
                                    #{w 20899}#
                                    #{s 20900}#
                                    #{mod 20901}#)
                             (#{syntax-type 4333}#
                               #{e 20897}#
                               #{r 20898}#
                               #{w 20899}#
                               #{s 20900}#
                               #{rib 20228}#
                               #{mod 20901}#
                               #{for-car? 20230}#)))
                         (if (eqv? #{ftype 20871}# 'core)
                           (values
                             'core-form
                             #{fval 20872}#
                             #{e 20224}#
                             #{w 20226}#
                             #{s 20227}#
                             #{mod 20229}#)
                           (if (eqv? #{ftype 20871}# 'local-syntax)
                             (values
                               'local-syntax-form
                               #{fval 20872}#
                               #{e 20224}#
                               #{w 20226}#
                               #{s 20227}#
                               #{mod 20229}#)
                             (if (eqv? #{ftype 20871}# 'begin)
                               (values
                                 'begin-form
                                 #f
                                 #{e 20224}#
                                 #{w 20226}#
                                 #{s 20227}#
                                 #{mod 20229}#)
                               (if (eqv? #{ftype 20871}# 'eval-when)
                                 (values
                                   'eval-when-form
                                   #f
                                   #{e 20224}#
                                   #{w 20226}#
                                   #{s 20227}#
                                   #{mod 20229}#)
                                 (if (eqv? #{ftype 20871}# 'define)
                                   (let ((#{tmp 20918}#
                                           ($sc-dispatch
                                             #{e 20224}#
                                             '(_ any any))))
                                     (if (if #{tmp 20918}#
                                           (@apply
                                             (lambda (#{name 20922}#
                                                      #{val 20923}#)
                                               (if (symbol? #{name 20922}#)
                                                 #t
                                                 (if (if (vector?
                                                           #{name 20922}#)
                                                       (if (= (vector-length
                                                                #{name 20922}#)
                                                              4)
                                                         (eq? (vector-ref
                                                                #{name 20922}#
                                                                0)
                                                              'syntax-object)
                                                         #f)
                                                       #f)
                                                   (symbol?
                                                     (vector-ref
                                                       #{name 20922}#
                                                       1))
                                                   #f)))
                                             #{tmp 20918}#)
                                           #f)
                                       (@apply
                                         (lambda (#{name 20950}# #{val 20951}#)
                                           (values
                                             'define-form
                                             #{name 20950}#
                                             #{val 20951}#
                                             #{w 20226}#
                                             #{s 20227}#
                                             #{mod 20229}#))
                                         #{tmp 20918}#)
                                       (let ((#{tmp 20952}#
                                               ($sc-dispatch
                                                 #{e 20224}#
                                                 '(_ (any . any)
                                                     any
                                                     .
                                                     each-any))))
                                         (if (if #{tmp 20952}#
                                               (@apply
                                                 (lambda (#{name 20956}#
                                                          #{args 20957}#
                                                          #{e1 20958}#
                                                          #{e2 20959}#)
                                                   (if (if (symbol?
                                                             #{name 20956}#)
                                                         #t
                                                         (if (if (vector?
                                                                   #{name 20956}#)
                                                               (if (= (vector-length
                                                                        #{name 20956}#)
                                                                      4)
                                                                 (eq? (vector-ref
                                                                        #{name 20956}#
                                                                        0)
                                                                      'syntax-object)
                                                                 #f)
                                                               #f)
                                                           (symbol?
                                                             (vector-ref
                                                               #{name 20956}#
                                                               1))
                                                           #f))
                                                     (#{valid-bound-ids? 4324}#
                                                       (letrec*
                                                         ((#{lvl 21108}#
                                                            (lambda (#{vars 21110}#
                                                                     #{ls 21111}#
                                                                     #{w 21112}#)
                                                              (if (pair? #{vars 21110}#)
                                                                (#{lvl 21108}#
                                                                  (cdr #{vars 21110}#)
                                                                  (cons (#{wrap 4327}#
                                                                          (car #{vars 21110}#)
                                                                          #{w 21112}#
                                                                          #f)
                                                                        #{ls 21111}#)
                                                                  #{w 21112}#)
                                                                (if (if (symbol?
                                                                          #{vars 21110}#)
                                                                      #t
                                                                      (if (if (vector?
                                                                                #{vars 21110}#)
                                                                            (if (= (vector-length
                                                                                     #{vars 21110}#)
                                                                                   4)
                                                                              (eq? (vector-ref
                                                                                     #{vars 21110}#
                                                                                     0)
                                                                                   'syntax-object)
                                                                              #f)
                                                                            #f)
                                                                        (symbol?
                                                                          (vector-ref
                                                                            #{vars 21110}#
                                                                            1))
                                                                        #f))
                                                                  (cons (#{wrap 4327}#
                                                                          #{vars 21110}#
                                                                          #{w 21112}#
                                                                          #f)
                                                                        #{ls 21111}#)
                                                                  (if (null? #{vars 21110}#)
                                                                    #{ls 21111}#
                                                                    (if (if (vector?
                                                                              #{vars 21110}#)
                                                                          (if (= (vector-length
                                                                                   #{vars 21110}#)
                                                                                 4)
                                                                            (eq? (vector-ref
                                                                                   #{vars 21110}#
                                                                                   0)
                                                                                 'syntax-object)
                                                                            #f)
                                                                          #f)
                                                                      (#{lvl 21108}#
                                                                        (vector-ref
                                                                          #{vars 21110}#
                                                                          1)
                                                                        #{ls 21111}#
                                                                        (#{join-wraps 4318}#
                                                                          #{w 21112}#
                                                                          (vector-ref
                                                                            #{vars 21110}#
                                                                            2)))
                                                                      (cons #{vars 21110}#
                                                                            #{ls 21111}#))))))))
                                                         (#{lvl 21108}#
                                                           #{args 20957}#
                                                           '()
                                                           '(()))))
                                                     #f))
                                                 #{tmp 20952}#)
                                               #f)
                                           (@apply
                                             (lambda (#{name 21156}#
                                                      #{args 21157}#
                                                      #{e1 21158}#
                                                      #{e2 21159}#)
                                               (values
                                                 'define-form
                                                 (#{wrap 4327}#
                                                   #{name 21156}#
                                                   #{w 20226}#
                                                   #{mod 20229}#)
                                                 (let ((#{e 21165}#
                                                         (cons '#(syntax-object
                                                                  lambda
                                                                  ((top)
                                                                   #(ribcage
                                                                     #(name
                                                                       args
                                                                       e1
                                                                       e2)
                                                                     #((top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                     #("i1843"
                                                                       "i1844"
                                                                       "i1845"
                                                                       "i1846"))
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     #(ftype
                                                                       fval
                                                                       fe
                                                                       fw
                                                                       fs
                                                                       fmod)
                                                                     #((top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                     #("i1796"
                                                                       "i1797"
                                                                       "i1798"
                                                                       "i1799"
                                                                       "i1800"
                                                                       "i1801"))
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     #(first)
                                                                     #((top))
                                                                     #("i1788"))
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     #(e
                                                                       r
                                                                       w
                                                                       s
                                                                       rib
                                                                       mod
                                                                       for-car?)
                                                                     #((top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                     #("i1760"
                                                                       "i1761"
                                                                       "i1762"
                                                                       "i1763"
                                                                       "i1764"
                                                                       "i1765"
                                                                       "i1766"))
                                                                   #(ribcage
                                                                     (lambda-var-list
                                                                       gen-var
                                                                       strip
                                                                       expand-lambda-case
                                                                       lambda*-formals
                                                                       expand-simple-lambda
                                                                       lambda-formals
                                                                       ellipsis?
                                                                       expand-void
                                                                       eval-local-transformer
                                                                       expand-local-syntax
                                                                       expand-body
                                                                       expand-macro
                                                                       expand-application
                                                                       expand-expr
                                                                       expand
                                                                       syntax-type
                                                                       parse-when-list
                                                                       expand-install-global
                                                                       expand-top-sequence
                                                                       expand-sequence
                                                                       source-wrap
                                                                       wrap
                                                                       bound-id-member?
                                                                       distinct-bound-ids?
                                                                       valid-bound-ids?
                                                                       bound-id=?
                                                                       free-id=?
                                                                       id-var-name
                                                                       same-marks?
                                                                       join-marks
                                                                       join-wraps
                                                                       smart-append
                                                                       make-binding-wrap
                                                                       extend-ribcage!
                                                                       make-empty-ribcage
                                                                       new-mark
                                                                       anti-mark
                                                                       the-anti-mark
                                                                       top-marked?
                                                                       top-wrap
                                                                       empty-wrap
                                                                       set-ribcage-labels!
                                                                       set-ribcage-marks!
                                                                       set-ribcage-symnames!
                                                                       ribcage-labels
                                                                       ribcage-marks
                                                                       ribcage-symnames
                                                                       ribcage?
                                                                       make-ribcage
                                                                       gen-labels
                                                                       gen-label
                                                                       make-rename
                                                                       rename-marks
                                                                       rename-new
                                                                       rename-old
                                                                       subst-rename?
                                                                       wrap-subst
                                                                       wrap-marks
                                                                       make-wrap
                                                                       id-sym-name&marks
                                                                       id-sym-name
                                                                       id?
                                                                       nonsymbol-id?
                                                                       global-extend
                                                                       lookup
                                                                       macros-only-env
                                                                       extend-var-env
                                                                       extend-env
                                                                       null-env
                                                                       binding-value
                                                                       binding-type
                                                                       make-binding
                                                                       arg-check
                                                                       source-annotation
                                                                       no-source
                                                                       set-syntax-object-module!
                                                                       set-syntax-object-wrap!
                                                                       set-syntax-object-expression!
                                                                       syntax-object-module
                                                                       syntax-object-wrap
                                                                       syntax-object-expression
                                                                       syntax-object?
                                                                       make-syntax-object
                                                                       build-lexical-var
                                                                       build-letrec
                                                                       build-named-let
                                                                       build-let
                                                                       build-sequence
                                                                       build-data
                                                                       build-primref
                                                                       build-lambda-case
                                                                       build-case-lambda
                                                                       build-simple-lambda
                                                                       build-global-definition
                                                                       build-global-assignment
                                                                       build-global-reference
                                                                       analyze-variable
                                                                       build-lexical-assignment
                                                                       build-lexical-reference
                                                                       build-dynlet
                                                                       build-conditional
                                                                       build-application
                                                                       build-void
                                                                       maybe-name-value!
                                                                       decorate-source
                                                                       get-global-definition-hook
                                                                       put-global-definition-hook
                                                                       gensym-hook
                                                                       local-eval-hook
                                                                       top-level-eval-hook
                                                                       fx<
                                                                       fx=
                                                                       fx-
                                                                       fx+
                                                                       set-lambda-meta!
                                                                       lambda-meta
                                                                       lambda?
                                                                       make-dynlet
                                                                       make-letrec
                                                                       make-let
                                                                       make-lambda-case
                                                                       make-lambda
                                                                       make-sequence
                                                                       make-application
                                                                       make-conditional
                                                                       make-toplevel-define
                                                                       make-toplevel-set
                                                                       make-toplevel-ref
                                                                       make-module-set
                                                                       make-module-ref
                                                                       make-lexical-set
                                                                       make-lexical-ref
                                                                       make-primitive-ref
                                                                       make-const
                                                                       make-void)
                                                                     ((top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top))
                                                                     ("i467"
                                                                      "i465"
                                                                      "i463"
                                                                      "i461"
                                                                      "i459"
                                                                      "i457"
                                                                      "i455"
                                                                      "i453"
                                                                      "i451"
                                                                      "i449"
                                                                      "i447"
                                                                      "i445"
                                                                      "i443"
                                                                      "i441"
                                                                      "i439"
                                                                      "i437"
                                                                      "i435"
                                                                      "i433"
                                                                      "i431"
                                                                      "i429"
                                                                      "i427"
                                                                      "i425"
                                                                      "i423"
                                                                      "i421"
                                                                      "i419"
                                                                      "i417"
                                                                      "i415"
                                                                      "i413"
                                                                      "i411"
                                                                      "i409"
                                                                      "i407"
                                                                      "i405"
                                                                      "i403"
                                                                      "i401"
                                                                      "i399"
                                                                      "i398"
                                                                      "i396"
                                                                      "i393"
                                                                      "i392"
                                                                      "i391"
                                                                      "i389"
                                                                      "i388"
                                                                      "i386"
                                                                      "i384"
                                                                      "i382"
                                                                      "i380"
                                                                      "i378"
                                                                      "i376"
                                                                      "i374"
                                                                      "i372"
                                                                      "i369"
                                                                      "i367"
                                                                      "i366"
                                                                      "i364"
                                                                      "i362"
                                                                      "i360"
                                                                      "i358"
                                                                      "i357"
                                                                      "i356"
                                                                      "i355"
                                                                      "i353"
                                                                      "i352"
                                                                      "i349"
                                                                      "i347"
                                                                      "i345"
                                                                      "i343"
                                                                      "i341"
                                                                      "i339"
                                                                      "i337"
                                                                      "i336"
                                                                      "i335"
                                                                      "i333"
                                                                      "i331"
                                                                      "i330"
                                                                      "i327"
                                                                      "i326"
                                                                      "i324"
                                                                      "i322"
                                                                      "i320"
                                                                      "i318"
                                                                      "i316"
                                                                      "i314"
                                                                      "i312"
                                                                      "i310"
                                                                      "i308"
                                                                      "i305"
                                                                      "i303"
                                                                      "i301"
                                                                      "i299"
                                                                      "i297"
                                                                      "i295"
                                                                      "i293"
                                                                      "i291"
                                                                      "i289"
                                                                      "i287"
                                                                      "i285"
                                                                      "i283"
                                                                      "i281"
                                                                      "i279"
                                                                      "i277"
                                                                      "i275"
                                                                      "i273"
                                                                      "i271"
                                                                      "i269"
                                                                      "i267"
                                                                      "i265"
                                                                      "i263"
                                                                      "i261"
                                                                      "i260"
                                                                      "i257"
                                                                      "i255"
                                                                      "i254"
                                                                      "i253"
                                                                      "i252"
                                                                      "i251"
                                                                      "i249"
                                                                      "i247"
                                                                      "i245"
                                                                      "i242"
                                                                      "i240"
                                                                      "i238"
                                                                      "i236"
                                                                      "i234"
                                                                      "i232"
                                                                      "i230"
                                                                      "i228"
                                                                      "i226"
                                                                      "i224"
                                                                      "i222"
                                                                      "i220"
                                                                      "i218"
                                                                      "i216"
                                                                      "i214"
                                                                      "i212"
                                                                      "i210"
                                                                      "i208"))
                                                                   #(ribcage
                                                                     (define-structure
                                                                       define-expansion-accessors
                                                                       define-expansion-constructors)
                                                                     ((top)
                                                                      (top)
                                                                      (top))
                                                                     ("i46"
                                                                      "i45"
                                                                      "i44")))
                                                                  (hygiene
                                                                    guile))
                                                               (#{wrap 4327}#
                                                                 (cons #{args 21157}#
                                                                       (cons #{e1 21158}#
                                                                             #{e2 21159}#))
                                                                 #{w 20226}#
                                                                 #{mod 20229}#))))
                                                   (begin
                                                     (if (if (pair? #{e 21165}#)
                                                           #{s 20227}#
                                                           #f)
                                                       (set-source-properties!
                                                         #{e 21165}#
                                                         #{s 20227}#))
                                                     #{e 21165}#))
                                                 '(())
                                                 #{s 20227}#
                                                 #{mod 20229}#))
                                             #{tmp 20952}#)
                                           (let ((#{tmp 21172}#
                                                   ($sc-dispatch
                                                     #{e 20224}#
                                                     '(_ any))))
                                             (if (if #{tmp 21172}#
                                                   (@apply
                                                     (lambda (#{name 21176}#)
                                                       (if (symbol?
                                                             #{name 21176}#)
                                                         #t
                                                         (if (if (vector?
                                                                   #{name 21176}#)
                                                               (if (= (vector-length
                                                                        #{name 21176}#)
                                                                      4)
                                                                 (eq? (vector-ref
                                                                        #{name 21176}#
                                                                        0)
                                                                      'syntax-object)
                                                                 #f)
                                                               #f)
                                                           (symbol?
                                                             (vector-ref
                                                               #{name 21176}#
                                                               1))
                                                           #f)))
                                                     #{tmp 21172}#)
                                                   #f)
                                               (@apply
                                                 (lambda (#{name 21203}#)
                                                   (values
                                                     'define-form
                                                     (#{wrap 4327}#
                                                       #{name 21203}#
                                                       #{w 20226}#
                                                       #{mod 20229}#)
                                                     '(#(syntax-object
                                                         if
                                                         ((top)
                                                          #(ribcage
                                                            #(name)
                                                            #((top))
                                                            #("i1856"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(ftype
                                                              fval
                                                              fe
                                                              fw
                                                              fs
                                                              fmod)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i1796"
                                                              "i1797"
                                                              "i1798"
                                                              "i1799"
                                                              "i1800"
                                                              "i1801"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(first)
                                                            #((top))
                                                            #("i1788"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(e
                                                              r
                                                              w
                                                              s
                                                              rib
                                                              mod
                                                              for-car?)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i1760"
                                                              "i1761"
                                                              "i1762"
                                                              "i1763"
                                                              "i1764"
                                                              "i1765"
                                                              "i1766"))
                                                          #(ribcage
                                                            (lambda-var-list
                                                              gen-var
                                                              strip
                                                              expand-lambda-case
                                                              lambda*-formals
                                                              expand-simple-lambda
                                                              lambda-formals
                                                              ellipsis?
                                                              expand-void
                                                              eval-local-transformer
                                                              expand-local-syntax
                                                              expand-body
                                                              expand-macro
                                                              expand-application
                                                              expand-expr
                                                              expand
                                                              syntax-type
                                                              parse-when-list
                                                              expand-install-global
                                                              expand-top-sequence
                                                              expand-sequence
                                                              source-wrap
                                                              wrap
                                                              bound-id-member?
                                                              distinct-bound-ids?
                                                              valid-bound-ids?
                                                              bound-id=?
                                                              free-id=?
                                                              id-var-name
                                                              same-marks?
                                                              join-marks
                                                              join-wraps
                                                              smart-append
                                                              make-binding-wrap
                                                              extend-ribcage!
                                                              make-empty-ribcage
                                                              new-mark
                                                              anti-mark
                                                              the-anti-mark
                                                              top-marked?
                                                              top-wrap
                                                              empty-wrap
                                                              set-ribcage-labels!
                                                              set-ribcage-marks!
                                                              set-ribcage-symnames!
                                                              ribcage-labels
                                                              ribcage-marks
                                                              ribcage-symnames
                                                              ribcage?
                                                              make-ribcage
                                                              gen-labels
                                                              gen-label
                                                              make-rename
                                                              rename-marks
                                                              rename-new
                                                              rename-old
                                                              subst-rename?
                                                              wrap-subst
                                                              wrap-marks
                                                              make-wrap
                                                              id-sym-name&marks
                                                              id-sym-name
                                                              id?
                                                              nonsymbol-id?
                                                              global-extend
                                                              lookup
                                                              macros-only-env
                                                              extend-var-env
                                                              extend-env
                                                              null-env
                                                              binding-value
                                                              binding-type
                                                              make-binding
                                                              arg-check
                                                              source-annotation
                                                              no-source
                                                              set-syntax-object-module!
                                                              set-syntax-object-wrap!
                                                              set-syntax-object-expression!
                                                              syntax-object-module
                                                              syntax-object-wrap
                                                              syntax-object-expression
                                                              syntax-object?
                                                              make-syntax-object
                                                              build-lexical-var
                                                              build-letrec
                                                              build-named-let
                                                              build-let
                                                              build-sequence
                                                              build-data
                                                              build-primref
                                                              build-lambda-case
                                                              build-case-lambda
                                                              build-simple-lambda
                                                              build-global-definition
                                                              build-global-assignment
                                                              build-global-reference
                                                              analyze-variable
                                                              build-lexical-assignment
                                                              build-lexical-reference
                                                              build-dynlet
                                                              build-conditional
                                                              build-application
                                                              build-void
                                                              maybe-name-value!
                                                              decorate-source
                                                              get-global-definition-hook
                                                              put-global-definition-hook
                                                              gensym-hook
                                                              local-eval-hook
                                                              top-level-eval-hook
                                                              fx<
                                                              fx=
                                                              fx-
                                                              fx+
                                                              set-lambda-meta!
                                                              lambda-meta
                                                              lambda?
                                                              make-dynlet
                                                              make-letrec
                                                              make-let
                                                              make-lambda-case
                                                              make-lambda
                                                              make-sequence
                                                              make-application
                                                              make-conditional
                                                              make-toplevel-define
                                                              make-toplevel-set
                                                              make-toplevel-ref
                                                              make-module-set
                                                              make-module-ref
                                                              make-lexical-set
                                                              make-lexical-ref
                                                              make-primitive-ref
                                                              make-const
                                                              make-void)
                                                            ((top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                            ("i467"
                                                             "i465"
                                                             "i463"
                                                             "i461"
                                                             "i459"
                                                             "i457"
                                                             "i455"
                                                             "i453"
                                                             "i451"
                                                             "i449"
                                                             "i447"
                                                             "i445"
                                                             "i443"
                                                             "i441"
                                                             "i439"
                                                             "i437"
                                                             "i435"
                                                             "i433"
                                                             "i431"
                                                             "i429"
                                                             "i427"
                                                             "i425"
                                                             "i423"
                                                             "i421"
                                                             "i419"
                                                             "i417"
                                                             "i415"
                                                             "i413"
                                                             "i411"
                                                             "i409"
                                                             "i407"
                                                             "i405"
                                                             "i403"
                                                             "i401"
                                                             "i399"
                                                             "i398"
                                                             "i396"
                                                             "i393"
                                                             "i392"
                                                             "i391"
                                                             "i389"
                                                             "i388"
                                                             "i386"
                                                             "i384"
                                                             "i382"
                                                             "i380"
                                                             "i378"
                                                             "i376"
                                                             "i374"
                                                             "i372"
                                                             "i369"
                                                             "i367"
                                                             "i366"
                                                             "i364"
                                                             "i362"
                                                             "i360"
                                                             "i358"
                                                             "i357"
                                                             "i356"
                                                             "i355"
                                                             "i353"
                                                             "i352"
                                                             "i349"
                                                             "i347"
                                                             "i345"
                                                             "i343"
                                                             "i341"
                                                             "i339"
                                                             "i337"
                                                             "i336"
                                                             "i335"
                                                             "i333"
                                                             "i331"
                                                             "i330"
                                                             "i327"
                                                             "i326"
                                                             "i324"
                                                             "i322"
                                                             "i320"
                                                             "i318"
                                                             "i316"
                                                             "i314"
                                                             "i312"
                                                             "i310"
                                                             "i308"
                                                             "i305"
                                                             "i303"
                                                             "i301"
                                                             "i299"
                                                             "i297"
                                                             "i295"
                                                             "i293"
                                                             "i291"
                                                             "i289"
                                                             "i287"
                                                             "i285"
                                                             "i283"
                                                             "i281"
                                                             "i279"
                                                             "i277"
                                                             "i275"
                                                             "i273"
                                                             "i271"
                                                             "i269"
                                                             "i267"
                                                             "i265"
                                                             "i263"
                                                             "i261"
                                                             "i260"
                                                             "i257"
                                                             "i255"
                                                             "i254"
                                                             "i253"
                                                             "i252"
                                                             "i251"
                                                             "i249"
                                                             "i247"
                                                             "i245"
                                                             "i242"
                                                             "i240"
                                                             "i238"
                                                             "i236"
                                                             "i234"
                                                             "i232"
                                                             "i230"
                                                             "i228"
                                                             "i226"
                                                             "i224"
                                                             "i222"
                                                             "i220"
                                                             "i218"
                                                             "i216"
                                                             "i214"
                                                             "i212"
                                                             "i210"
                                                             "i208"))
                                                          #(ribcage
                                                            (define-structure
                                                              define-expansion-accessors
                                                              define-expansion-constructors)
                                                            ((top) (top) (top))
                                                            ("i46"
                                                             "i45"
                                                             "i44")))
                                                         (hygiene guile))
                                                       #(syntax-object
                                                         #f
                                                         ((top)
                                                          #(ribcage
                                                            #(name)
                                                            #((top))
                                                            #("i1856"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(ftype
                                                              fval
                                                              fe
                                                              fw
                                                              fs
                                                              fmod)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i1796"
                                                              "i1797"
                                                              "i1798"
                                                              "i1799"
                                                              "i1800"
                                                              "i1801"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(first)
                                                            #((top))
                                                            #("i1788"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(e
                                                              r
                                                              w
                                                              s
                                                              rib
                                                              mod
                                                              for-car?)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i1760"
                                                              "i1761"
                                                              "i1762"
                                                              "i1763"
                                                              "i1764"
                                                              "i1765"
                                                              "i1766"))
                                                          #(ribcage
                                                            (lambda-var-list
                                                              gen-var
                                                              strip
                                                              expand-lambda-case
                                                              lambda*-formals
                                                              expand-simple-lambda
                                                              lambda-formals
                                                              ellipsis?
                                                              expand-void
                                                              eval-local-transformer
                                                              expand-local-syntax
                                                              expand-body
                                                              expand-macro
                                                              expand-application
                                                              expand-expr
                                                              expand
                                                              syntax-type
                                                              parse-when-list
                                                              expand-install-global
                                                              expand-top-sequence
                                                              expand-sequence
                                                              source-wrap
                                                              wrap
                                                              bound-id-member?
                                                              distinct-bound-ids?
                                                              valid-bound-ids?
                                                              bound-id=?
                                                              free-id=?
                                                              id-var-name
                                                              same-marks?
                                                              join-marks
                                                              join-wraps
                                                              smart-append
                                                              make-binding-wrap
                                                              extend-ribcage!
                                                              make-empty-ribcage
                                                              new-mark
                                                              anti-mark
                                                              the-anti-mark
                                                              top-marked?
                                                              top-wrap
                                                              empty-wrap
                                                              set-ribcage-labels!
                                                              set-ribcage-marks!
                                                              set-ribcage-symnames!
                                                              ribcage-labels
                                                              ribcage-marks
                                                              ribcage-symnames
                                                              ribcage?
                                                              make-ribcage
                                                              gen-labels
                                                              gen-label
                                                              make-rename
                                                              rename-marks
                                                              rename-new
                                                              rename-old
                                                              subst-rename?
                                                              wrap-subst
                                                              wrap-marks
                                                              make-wrap
                                                              id-sym-name&marks
                                                              id-sym-name
                                                              id?
                                                              nonsymbol-id?
                                                              global-extend
                                                              lookup
                                                              macros-only-env
                                                              extend-var-env
                                                              extend-env
                                                              null-env
                                                              binding-value
                                                              binding-type
                                                              make-binding
                                                              arg-check
                                                              source-annotation
                                                              no-source
                                                              set-syntax-object-module!
                                                              set-syntax-object-wrap!
                                                              set-syntax-object-expression!
                                                              syntax-object-module
                                                              syntax-object-wrap
                                                              syntax-object-expression
                                                              syntax-object?
                                                              make-syntax-object
                                                              build-lexical-var
                                                              build-letrec
                                                              build-named-let
                                                              build-let
                                                              build-sequence
                                                              build-data
                                                              build-primref
                                                              build-lambda-case
                                                              build-case-lambda
                                                              build-simple-lambda
                                                              build-global-definition
                                                              build-global-assignment
                                                              build-global-reference
                                                              analyze-variable
                                                              build-lexical-assignment
                                                              build-lexical-reference
                                                              build-dynlet
                                                              build-conditional
                                                              build-application
                                                              build-void
                                                              maybe-name-value!
                                                              decorate-source
                                                              get-global-definition-hook
                                                              put-global-definition-hook
                                                              gensym-hook
                                                              local-eval-hook
                                                              top-level-eval-hook
                                                              fx<
                                                              fx=
                                                              fx-
                                                              fx+
                                                              set-lambda-meta!
                                                              lambda-meta
                                                              lambda?
                                                              make-dynlet
                                                              make-letrec
                                                              make-let
                                                              make-lambda-case
                                                              make-lambda
                                                              make-sequence
                                                              make-application
                                                              make-conditional
                                                              make-toplevel-define
                                                              make-toplevel-set
                                                              make-toplevel-ref
                                                              make-module-set
                                                              make-module-ref
                                                              make-lexical-set
                                                              make-lexical-ref
                                                              make-primitive-ref
                                                              make-const
                                                              make-void)
                                                            ((top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                            ("i467"
                                                             "i465"
                                                             "i463"
                                                             "i461"
                                                             "i459"
                                                             "i457"
                                                             "i455"
                                                             "i453"
                                                             "i451"
                                                             "i449"
                                                             "i447"
                                                             "i445"
                                                             "i443"
                                                             "i441"
                                                             "i439"
                                                             "i437"
                                                             "i435"
                                                             "i433"
                                                             "i431"
                                                             "i429"
                                                             "i427"
                                                             "i425"
                                                             "i423"
                                                             "i421"
                                                             "i419"
                                                             "i417"
                                                             "i415"
                                                             "i413"
                                                             "i411"
                                                             "i409"
                                                             "i407"
                                                             "i405"
                                                             "i403"
                                                             "i401"
                                                             "i399"
                                                             "i398"
                                                             "i396"
                                                             "i393"
                                                             "i392"
                                                             "i391"
                                                             "i389"
                                                             "i388"
                                                             "i386"
                                                             "i384"
                                                             "i382"
                                                             "i380"
                                                             "i378"
                                                             "i376"
                                                             "i374"
                                                             "i372"
                                                             "i369"
                                                             "i367"
                                                             "i366"
                                                             "i364"
                                                             "i362"
                                                             "i360"
                                                             "i358"
                                                             "i357"
                                                             "i356"
                                                             "i355"
                                                             "i353"
                                                             "i352"
                                                             "i349"
                                                             "i347"
                                                             "i345"
                                                             "i343"
                                                             "i341"
                                                             "i339"
                                                             "i337"
                                                             "i336"
                                                             "i335"
                                                             "i333"
                                                             "i331"
                                                             "i330"
                                                             "i327"
                                                             "i326"
                                                             "i324"
                                                             "i322"
                                                             "i320"
                                                             "i318"
                                                             "i316"
                                                             "i314"
                                                             "i312"
                                                             "i310"
                                                             "i308"
                                                             "i305"
                                                             "i303"
                                                             "i301"
                                                             "i299"
                                                             "i297"
                                                             "i295"
                                                             "i293"
                                                             "i291"
                                                             "i289"
                                                             "i287"
                                                             "i285"
                                                             "i283"
                                                             "i281"
                                                             "i279"
                                                             "i277"
                                                             "i275"
                                                             "i273"
                                                             "i271"
                                                             "i269"
                                                             "i267"
                                                             "i265"
                                                             "i263"
                                                             "i261"
                                                             "i260"
                                                             "i257"
                                                             "i255"
                                                             "i254"
                                                             "i253"
                                                             "i252"
                                                             "i251"
                                                             "i249"
                                                             "i247"
                                                             "i245"
                                                             "i242"
                                                             "i240"
                                                             "i238"
                                                             "i236"
                                                             "i234"
                                                             "i232"
                                                             "i230"
                                                             "i228"
                                                             "i226"
                                                             "i224"
                                                             "i222"
                                                             "i220"
                                                             "i218"
                                                             "i216"
                                                             "i214"
                                                             "i212"
                                                             "i210"
                                                             "i208"))
                                                          #(ribcage
                                                            (define-structure
                                                              define-expansion-accessors
                                                              define-expansion-constructors)
                                                            ((top) (top) (top))
                                                            ("i46"
                                                             "i45"
                                                             "i44")))
                                                         (hygiene guile))
                                                       #(syntax-object
                                                         #f
                                                         ((top)
                                                          #(ribcage
                                                            #(name)
                                                            #((top))
                                                            #("i1856"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(ftype
                                                              fval
                                                              fe
                                                              fw
                                                              fs
                                                              fmod)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i1796"
                                                              "i1797"
                                                              "i1798"
                                                              "i1799"
                                                              "i1800"
                                                              "i1801"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(first)
                                                            #((top))
                                                            #("i1788"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(e
                                                              r
                                                              w
                                                              s
                                                              rib
                                                              mod
                                                              for-car?)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i1760"
                                                              "i1761"
                                                              "i1762"
                                                              "i1763"
                                                              "i1764"
                                                              "i1765"
                                                              "i1766"))
                                                          #(ribcage
                                                            (lambda-var-list
                                                              gen-var
                                                              strip
                                                              expand-lambda-case
                                                              lambda*-formals
                                                              expand-simple-lambda
                                                              lambda-formals
                                                              ellipsis?
                                                              expand-void
                                                              eval-local-transformer
                                                              expand-local-syntax
                                                              expand-body
                                                              expand-macro
                                                              expand-application
                                                              expand-expr
                                                              expand
                                                              syntax-type
                                                              parse-when-list
                                                              expand-install-global
                                                              expand-top-sequence
                                                              expand-sequence
                                                              source-wrap
                                                              wrap
                                                              bound-id-member?
                                                              distinct-bound-ids?
                                                              valid-bound-ids?
                                                              bound-id=?
                                                              free-id=?
                                                              id-var-name
                                                              same-marks?
                                                              join-marks
                                                              join-wraps
                                                              smart-append
                                                              make-binding-wrap
                                                              extend-ribcage!
                                                              make-empty-ribcage
                                                              new-mark
                                                              anti-mark
                                                              the-anti-mark
                                                              top-marked?
                                                              top-wrap
                                                              empty-wrap
                                                              set-ribcage-labels!
                                                              set-ribcage-marks!
                                                              set-ribcage-symnames!
                                                              ribcage-labels
                                                              ribcage-marks
                                                              ribcage-symnames
                                                              ribcage?
                                                              make-ribcage
                                                              gen-labels
                                                              gen-label
                                                              make-rename
                                                              rename-marks
                                                              rename-new
                                                              rename-old
                                                              subst-rename?
                                                              wrap-subst
                                                              wrap-marks
                                                              make-wrap
                                                              id-sym-name&marks
                                                              id-sym-name
                                                              id?
                                                              nonsymbol-id?
                                                              global-extend
                                                              lookup
                                                              macros-only-env
                                                              extend-var-env
                                                              extend-env
                                                              null-env
                                                              binding-value
                                                              binding-type
                                                              make-binding
                                                              arg-check
                                                              source-annotation
                                                              no-source
                                                              set-syntax-object-module!
                                                              set-syntax-object-wrap!
                                                              set-syntax-object-expression!
                                                              syntax-object-module
                                                              syntax-object-wrap
                                                              syntax-object-expression
                                                              syntax-object?
                                                              make-syntax-object
                                                              build-lexical-var
                                                              build-letrec
                                                              build-named-let
                                                              build-let
                                                              build-sequence
                                                              build-data
                                                              build-primref
                                                              build-lambda-case
                                                              build-case-lambda
                                                              build-simple-lambda
                                                              build-global-definition
                                                              build-global-assignment
                                                              build-global-reference
                                                              analyze-variable
                                                              build-lexical-assignment
                                                              build-lexical-reference
                                                              build-dynlet
                                                              build-conditional
                                                              build-application
                                                              build-void
                                                              maybe-name-value!
                                                              decorate-source
                                                              get-global-definition-hook
                                                              put-global-definition-hook
                                                              gensym-hook
                                                              local-eval-hook
                                                              top-level-eval-hook
                                                              fx<
                                                              fx=
                                                              fx-
                                                              fx+
                                                              set-lambda-meta!
                                                              lambda-meta
                                                              lambda?
                                                              make-dynlet
                                                              make-letrec
                                                              make-let
                                                              make-lambda-case
                                                              make-lambda
                                                              make-sequence
                                                              make-application
                                                              make-conditional
                                                              make-toplevel-define
                                                              make-toplevel-set
                                                              make-toplevel-ref
                                                              make-module-set
                                                              make-module-ref
                                                              make-lexical-set
                                                              make-lexical-ref
                                                              make-primitive-ref
                                                              make-const
                                                              make-void)
                                                            ((top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                            ("i467"
                                                             "i465"
                                                             "i463"
                                                             "i461"
                                                             "i459"
                                                             "i457"
                                                             "i455"
                                                             "i453"
                                                             "i451"
                                                             "i449"
                                                             "i447"
                                                             "i445"
                                                             "i443"
                                                             "i441"
                                                             "i439"
                                                             "i437"
                                                             "i435"
                                                             "i433"
                                                             "i431"
                                                             "i429"
                                                             "i427"
                                                             "i425"
                                                             "i423"
                                                             "i421"
                                                             "i419"
                                                             "i417"
                                                             "i415"
                                                             "i413"
                                                             "i411"
                                                             "i409"
                                                             "i407"
                                                             "i405"
                                                             "i403"
                                                             "i401"
                                                             "i399"
                                                             "i398"
                                                             "i396"
                                                             "i393"
                                                             "i392"
                                                             "i391"
                                                             "i389"
                                                             "i388"
                                                             "i386"
                                                             "i384"
                                                             "i382"
                                                             "i380"
                                                             "i378"
                                                             "i376"
                                                             "i374"
                                                             "i372"
                                                             "i369"
                                                             "i367"
                                                             "i366"
                                                             "i364"
                                                             "i362"
                                                             "i360"
                                                             "i358"
                                                             "i357"
                                                             "i356"
                                                             "i355"
                                                             "i353"
                                                             "i352"
                                                             "i349"
                                                             "i347"
                                                             "i345"
                                                             "i343"
                                                             "i341"
                                                             "i339"
                                                             "i337"
                                                             "i336"
                                                             "i335"
                                                             "i333"
                                                             "i331"
                                                             "i330"
                                                             "i327"
                                                             "i326"
                                                             "i324"
                                                             "i322"
                                                             "i320"
                                                             "i318"
                                                             "i316"
                                                             "i314"
                                                             "i312"
                                                             "i310"
                                                             "i308"
                                                             "i305"
                                                             "i303"
                                                             "i301"
                                                             "i299"
                                                             "i297"
                                                             "i295"
                                                             "i293"
                                                             "i291"
                                                             "i289"
                                                             "i287"
                                                             "i285"
                                                             "i283"
                                                             "i281"
                                                             "i279"
                                                             "i277"
                                                             "i275"
                                                             "i273"
                                                             "i271"
                                                             "i269"
                                                             "i267"
                                                             "i265"
                                                             "i263"
                                                             "i261"
                                                             "i260"
                                                             "i257"
                                                             "i255"
                                                             "i254"
                                                             "i253"
                                                             "i252"
                                                             "i251"
                                                             "i249"
                                                             "i247"
                                                             "i245"
                                                             "i242"
                                                             "i240"
                                                             "i238"
                                                             "i236"
                                                             "i234"
                                                             "i232"
                                                             "i230"
                                                             "i228"
                                                             "i226"
                                                             "i224"
                                                             "i222"
                                                             "i220"
                                                             "i218"
                                                             "i216"
                                                             "i214"
                                                             "i212"
                                                             "i210"
                                                             "i208"))
                                                          #(ribcage
                                                            (define-structure
                                                              define-expansion-accessors
                                                              define-expansion-constructors)
                                                            ((top) (top) (top))
                                                            ("i46"
                                                             "i45"
                                                             "i44")))
                                                         (hygiene guile)))
                                                     '(())
                                                     #{s 20227}#
                                                     #{mod 20229}#))
                                                 #{tmp 21172}#)
                                               (syntax-violation
                                                 #f
                                                 "source expression failed to match any pattern"
                                                 #{e 20224}#)))))))
                                   (if (eqv? #{ftype 20871}# 'define-syntax)
                                     (let ((#{tmp 21222}#
                                             ($sc-dispatch
                                               #{e 20224}#
                                               '(_ any any))))
                                       (if (if #{tmp 21222}#
                                             (@apply
                                               (lambda (#{name 21226}#
                                                        #{val 21227}#)
                                                 (if (symbol? #{name 21226}#)
                                                   #t
                                                   (if (if (vector?
                                                             #{name 21226}#)
                                                         (if (= (vector-length
                                                                  #{name 21226}#)
                                                                4)
                                                           (eq? (vector-ref
                                                                  #{name 21226}#
                                                                  0)
                                                                'syntax-object)
                                                           #f)
                                                         #f)
                                                     (symbol?
                                                       (vector-ref
                                                         #{name 21226}#
                                                         1))
                                                     #f)))
                                               #{tmp 21222}#)
                                             #f)
                                         (@apply
                                           (lambda (#{name 21254}#
                                                    #{val 21255}#)
                                             (values
                                               'define-syntax-form
                                               #{name 21254}#
                                               #{val 21255}#
                                               #{w 20226}#
                                               #{s 20227}#
                                               #{mod 20229}#))
                                           #{tmp 21222}#)
                                         (syntax-violation
                                           #f
                                           "source expression failed to match any pattern"
                                           #{e 20224}#)))
                                     (values
                                       'call
                                       #f
                                       #{e 20224}#
                                       #{w 20226}#
                                       #{s 20227}#
                                       #{mod 20229}#))))))))))))))
           (if (if (vector? #{e 20224}#)
                 (if (= (vector-length #{e 20224}#) 4)
                   (eq? (vector-ref #{e 20224}# 0) 'syntax-object)
                   #f)
                 #f)
             (#{syntax-type 4333}#
               (vector-ref #{e 20224}# 1)
               #{r 20225}#
               (#{join-wraps 4318}#
                 #{w 20226}#
                 (vector-ref #{e 20224}# 2))
               (let ((#{t 21282}#
                       (#{source-annotation 4295}# #{e 20224}#)))
                 (if #{t 21282}# #{t 21282}# #{s 20227}#))
               #{rib 20228}#
               (let ((#{t 21517}# (vector-ref #{e 20224}# 3)))
                 (if #{t 21517}# #{t 21517}# #{mod 20229}#))
               #{for-car? 20230}#)
             (if (self-evaluating? #{e 20224}#)
               (values
                 'constant
                 #f
                 #{e 20224}#
                 #{w 20226}#
                 #{s 20227}#
                 #{mod 20229}#)
               (values
                 'other
                 #f
                 #{e 20224}#
                 #{w 20226}#
                 #{s 20227}#
                 #{mod 20229}#)))))))
   (#{expand 4334}#
     (lambda (#{e 21526}#
              #{r 21527}#
              #{w 21528}#
              #{mod 21529}#)
       (call-with-values
         (lambda ()
           (#{syntax-type 4333}#
             #{e 21526}#
             #{r 21527}#
             #{w 21528}#
             (#{source-annotation 4295}# #{e 21526}#)
             #f
             #{mod 21529}#
             #f))
         (lambda (#{type 21684}#
                  #{value 21685}#
                  #{e 21686}#
                  #{w 21687}#
                  #{s 21688}#
                  #{mod 21689}#)
           (#{expand-expr 4335}#
             #{type 21684}#
             #{value 21685}#
             #{e 21686}#
             #{r 21527}#
             #{w 21687}#
             #{s 21688}#
             #{mod 21689}#)))))
   (#{expand-expr 4335}#
     (lambda (#{type 21692}#
              #{value 21693}#
              #{e 21694}#
              #{r 21695}#
              #{w 21696}#
              #{s 21697}#
              #{mod 21698}#)
       (if (eqv? #{type 21692}# 'lexical)
         (make-struct/no-tail
           (vector-ref %expanded-vtables 3)
           #{s 21697}#
           #{e 21694}#
           #{value 21693}#)
         (if (if (eqv? #{type 21692}# 'core)
               #t
               (eqv? #{type 21692}# 'core-form))
           (#{value 21693}#
             #{e 21694}#
             #{r 21695}#
             #{w 21696}#
             #{s 21697}#
             #{mod 21698}#)
           (if (eqv? #{type 21692}# 'module-ref)
             (call-with-values
               (lambda ()
                 (#{value 21693}#
                   #{e 21694}#
                   #{r 21695}#
                   #{w 21696}#))
               (lambda (#{e 21724}#
                        #{r 21725}#
                        #{w 21726}#
                        #{s 21727}#
                        #{mod 21728}#)
                 (#{expand 4334}#
                   #{e 21724}#
                   #{r 21725}#
                   #{w 21726}#
                   #{mod 21728}#)))
             (if (eqv? #{type 21692}# 'lexical-call)
               (#{expand-application 4336}#
                 (let ((#{id 21803}# (car #{e 21694}#)))
                   (#{build-lexical-reference 4272}#
                     'fun
                     (#{source-annotation 4295}# #{id 21803}#)
                     (if (if (vector? #{id 21803}#)
                           (if (= (vector-length #{id 21803}#) 4)
                             (eq? (vector-ref #{id 21803}# 0) 'syntax-object)
                             #f)
                           #f)
                       (syntax->datum #{id 21803}#)
                       #{id 21803}#)
                     #{value 21693}#))
                 #{e 21694}#
                 #{r 21695}#
                 #{w 21696}#
                 #{s 21697}#
                 #{mod 21698}#)
               (if (eqv? #{type 21692}# 'global-call)
                 (#{expand-application 4336}#
                   (#{build-global-reference 4275}#
                     (#{source-annotation 4295}# (car #{e 21694}#))
                     (if (if (vector? #{value 21693}#)
                           (if (= (vector-length #{value 21693}#) 4)
                             (eq? (vector-ref #{value 21693}# 0)
                                  'syntax-object)
                             #f)
                           #f)
                       (vector-ref #{value 21693}# 1)
                       #{value 21693}#)
                     (if (if (vector? #{value 21693}#)
                           (if (= (vector-length #{value 21693}#) 4)
                             (eq? (vector-ref #{value 21693}# 0)
                                  'syntax-object)
                             #f)
                           #f)
                       (vector-ref #{value 21693}# 3)
                       #{mod 21698}#))
                   #{e 21694}#
                   #{r 21695}#
                   #{w 21696}#
                   #{s 21697}#
                   #{mod 21698}#)
                 (if (eqv? #{type 21692}# 'constant)
                   (let ((#{exp 22140}#
                           (#{strip 4347}#
                             (#{wrap 4327}#
                               (begin
                                 (if (if (pair? #{e 21694}#) #{s 21697}# #f)
                                   (set-source-properties!
                                     #{e 21694}#
                                     #{s 21697}#))
                                 #{e 21694}#)
                               #{w 21696}#
                               #{mod 21698}#)
                             '(()))))
                     (make-struct/no-tail
                       (vector-ref %expanded-vtables 1)
                       #{s 21697}#
                       #{exp 22140}#))
                   (if (eqv? #{type 21692}# 'global)
                     (#{analyze-variable 4274}#
                       #{mod 21698}#
                       #{value 21693}#
                       (lambda (#{mod 22176}# #{var 22177}# #{public? 22178}#)
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 5)
                           #{s 21697}#
                           #{mod 22176}#
                           #{var 22177}#
                           #{public? 22178}#))
                       (lambda (#{var 22187}#)
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 7)
                           #{s 21697}#
                           #{var 22187}#)))
                     (if (eqv? #{type 21692}# 'call)
                       (#{expand-application 4336}#
                         (#{expand 4334}#
                           (car #{e 21694}#)
                           #{r 21695}#
                           #{w 21696}#
                           #{mod 21698}#)
                         #{e 21694}#
                         #{r 21695}#
                         #{w 21696}#
                         #{s 21697}#
                         #{mod 21698}#)
                       (if (eqv? #{type 21692}# 'begin-form)
                         (let ((#{tmp 22262}#
                                 ($sc-dispatch
                                   #{e 21694}#
                                   '(_ any . each-any))))
                           (if #{tmp 22262}#
                             (@apply
                               (lambda (#{e1 22266}# #{e2 22267}#)
                                 (#{expand-sequence 4329}#
                                   (cons #{e1 22266}# #{e2 22267}#)
                                   #{r 21695}#
                                   #{w 21696}#
                                   #{s 21697}#
                                   #{mod 21698}#))
                               #{tmp 22262}#)
                             (let ((#{tmp 22354}#
                                     ($sc-dispatch #{e 21694}# '(_))))
                               (if #{tmp 22354}#
                                 (@apply
                                   (lambda ()
                                     (begin
                                       (issue-deprecation-warning
                                         "Sequences of zero expressions are deprecated.  Use *unspecified*.")
                                       (make-struct/no-tail
                                         (vector-ref %expanded-vtables 0)
                                         #f)))
                                   #{tmp 22354}#)
                                 (syntax-violation
                                   #f
                                   "source expression failed to match any pattern"
                                   #{e 21694}#)))))
                         (if (eqv? #{type 21692}# 'local-syntax-form)
                           (#{expand-local-syntax 4339}#
                             #{value 21693}#
                             #{e 21694}#
                             #{r 21695}#
                             #{w 21696}#
                             #{s 21697}#
                             #{mod 21698}#
                             #{expand-sequence 4329}#)
                           (if (eqv? #{type 21692}# 'eval-when-form)
                             (let ((#{tmp 22443}#
                                     ($sc-dispatch
                                       #{e 21694}#
                                       '(_ each-any any . each-any))))
                               (if #{tmp 22443}#
                                 (@apply
                                   (lambda (#{x 22447}#
                                            #{e1 22448}#
                                            #{e2 22449}#)
                                     (let ((#{when-list 22450}#
                                             (#{parse-when-list 4332}#
                                               #{e 21694}#
                                               #{x 22447}#)))
                                       (if (memq 'eval #{when-list 22450}#)
                                         (#{expand-sequence 4329}#
                                           (cons #{e1 22448}# #{e2 22449}#)
                                           #{r 21695}#
                                           #{w 21696}#
                                           #{s 21697}#
                                           #{mod 21698}#)
                                         (make-struct/no-tail
                                           (vector-ref %expanded-vtables 0)
                                           #f))))
                                   #{tmp 22443}#)
                                 (syntax-violation
                                   #f
                                   "source expression failed to match any pattern"
                                   #{e 21694}#)))
                             (if (if (eqv? #{type 21692}# 'define-form)
                                   #t
                                   (eqv? #{type 21692}# 'define-syntax-form))
                               (syntax-violation
                                 #f
                                 "definition in expression context"
                                 #{e 21694}#
                                 (#{wrap 4327}#
                                   #{value 21693}#
                                   #{w 21696}#
                                   #{mod 21698}#))
                               (if (eqv? #{type 21692}# 'syntax)
                                 (syntax-violation
                                   #f
                                   "reference to pattern variable outside syntax form"
                                   (#{wrap 4327}#
                                     (begin
                                       (if (if (pair? #{e 21694}#)
                                             #{s 21697}#
                                             #f)
                                         (set-source-properties!
                                           #{e 21694}#
                                           #{s 21697}#))
                                       #{e 21694}#)
                                     #{w 21696}#
                                     #{mod 21698}#))
                                 (if (eqv? #{type 21692}# 'displaced-lexical)
                                   (syntax-violation
                                     #f
                                     "reference to identifier outside its scope"
                                     (#{wrap 4327}#
                                       (begin
                                         (if (if (pair? #{e 21694}#)
                                               #{s 21697}#
                                               #f)
                                           (set-source-properties!
                                             #{e 21694}#
                                             #{s 21697}#))
                                         #{e 21694}#)
                                       #{w 21696}#
                                       #{mod 21698}#))
                                   (syntax-violation
                                     #f
                                     "unexpected syntax"
                                     (#{wrap 4327}#
                                       (begin
                                         (if (if (pair? #{e 21694}#)
                                               #{s 21697}#
                                               #f)
                                           (set-source-properties!
                                             #{e 21694}#
                                             #{s 21697}#))
                                         #{e 21694}#)
                                       #{w 21696}#
                                       #{mod 21698}#))))))))))))))))))
   (#{expand-application 4336}#
     (lambda (#{x 22687}#
              #{e 22688}#
              #{r 22689}#
              #{w 22690}#
              #{s 22691}#
              #{mod 22692}#)
       (let ((#{tmp 22694}#
               ($sc-dispatch #{e 22688}# '(any . each-any))))
         (if #{tmp 22694}#
           (@apply
             (lambda (#{e0 22698}# #{e1 22699}#)
               (#{build-application 4269}#
                 #{s 22691}#
                 #{x 22687}#
                 (map (lambda (#{e 22779}#)
                        (#{expand 4334}#
                          #{e 22779}#
                          #{r 22689}#
                          #{w 22690}#
                          #{mod 22692}#))
                      #{e1 22699}#)))
             #{tmp 22694}#)
           (syntax-violation
             #f
             "source expression failed to match any pattern"
             #{e 22688}#)))))
   (#{expand-macro 4337}#
     (lambda (#{p 22855}#
              #{e 22856}#
              #{r 22857}#
              #{w 22858}#
              #{s 22859}#
              #{rib 22860}#
              #{mod 22861}#)
       (letrec*
         ((#{rebuild-macro-output 22862}#
            (lambda (#{x 22893}# #{m 22894}#)
              (if (pair? #{x 22893}#)
                (let ((#{e 22898}#
                        (cons (#{rebuild-macro-output 22862}#
                                (car #{x 22893}#)
                                #{m 22894}#)
                              (#{rebuild-macro-output 22862}#
                                (cdr #{x 22893}#)
                                #{m 22894}#))))
                  (begin
                    (if (if (pair? #{e 22898}#) #{s 22859}# #f)
                      (set-source-properties! #{e 22898}# #{s 22859}#))
                    #{e 22898}#))
                (if (if (vector? #{x 22893}#)
                      (if (= (vector-length #{x 22893}#) 4)
                        (eq? (vector-ref #{x 22893}# 0) 'syntax-object)
                        #f)
                      #f)
                  (let ((#{w 22914}# (vector-ref #{x 22893}# 2)))
                    (let ((#{ms 22915}# (car #{w 22914}#))
                          (#{s 22916}# (cdr #{w 22914}#)))
                      (if (if (pair? #{ms 22915}#)
                            (eq? (car #{ms 22915}#) #f)
                            #f)
                        (let ((#{expression 22924}# (vector-ref #{x 22893}# 1))
                              (#{wrap 22925}#
                                (cons (cdr #{ms 22915}#)
                                      (if #{rib 22860}#
                                        (cons #{rib 22860}# (cdr #{s 22916}#))
                                        (cdr #{s 22916}#))))
                              (#{module 22926}# (vector-ref #{x 22893}# 3)))
                          (vector
                            'syntax-object
                            #{expression 22924}#
                            #{wrap 22925}#
                            #{module 22926}#))
                        (let ((#{expression 22936}#
                                (let ((#{e 22941}# (vector-ref #{x 22893}# 1)))
                                  (begin
                                    (if (if (pair? #{e 22941}#) #{s 22916}# #f)
                                      (set-source-properties!
                                        #{e 22941}#
                                        #{s 22916}#))
                                    #{e 22941}#)))
                              (#{wrap 22937}#
                                (cons (cons #{m 22894}# #{ms 22915}#)
                                      (if #{rib 22860}#
                                        (cons #{rib 22860}#
                                              (cons 'shift #{s 22916}#))
                                        (cons 'shift #{s 22916}#))))
                              (#{module 22938}# (vector-ref #{x 22893}# 3)))
                          (vector
                            'syntax-object
                            #{expression 22936}#
                            #{wrap 22937}#
                            #{module 22938}#)))))
                  (if (vector? #{x 22893}#)
                    (let ((#{n 22953}# (vector-length #{x 22893}#)))
                      (let ((#{v 22954}#
                              (let ((#{e 22962}# (make-vector #{n 22953}#)))
                                (begin
                                  (if (if (pair? #{e 22962}#) #{x 22893}# #f)
                                    (set-source-properties!
                                      #{e 22962}#
                                      #{x 22893}#))
                                  #{e 22962}#))))
                        (letrec*
                          ((#{loop 22955}#
                             (lambda (#{i 23007}#)
                               (if (= #{i 23007}# #{n 22953}#)
                                 #{v 22954}#
                                 (begin
                                   (vector-set!
                                     #{v 22954}#
                                     #{i 23007}#
                                     (#{rebuild-macro-output 22862}#
                                       (vector-ref #{x 22893}# #{i 23007}#)
                                       #{m 22894}#))
                                   (#{loop 22955}# (#{1+}# #{i 23007}#)))))))
                          (#{loop 22955}# 0))))
                    (if (symbol? #{x 22893}#)
                      (syntax-violation
                        #f
                        "encountered raw symbol in macro output"
                        (let ((#{s 23013}# (cdr #{w 22858}#)))
                          (#{wrap 4327}#
                            (begin
                              (if (if (pair? #{e 22856}#) #{s 23013}# #f)
                                (set-source-properties!
                                  #{e 22856}#
                                  #{s 23013}#))
                              #{e 22856}#)
                            #{w 22858}#
                            #{mod 22861}#))
                        #{x 22893}#)
                      (begin
                        (if (if (pair? #{x 22893}#) #{s 22859}# #f)
                          (set-source-properties! #{x 22893}# #{s 22859}#))
                        #{x 22893}#))))))))
         (#{rebuild-macro-output 22862}#
           (#{p 22855}#
             (let ((#{w 22869}#
                     (cons (cons #f (car #{w 22858}#))
                           (cons 'shift (cdr #{w 22858}#)))))
               (#{wrap 4327}#
                 (begin
                   (if (if (pair? #{e 22856}#) #{s 22859}# #f)
                     (set-source-properties! #{e 22856}# #{s 22859}#))
                   #{e 22856}#)
                 #{w 22869}#
                 #{mod 22861}#)))
           (gensym "m")))))
   (#{expand-body 4338}#
     (lambda (#{body 23045}#
              #{outer-form 23046}#
              #{r 23047}#
              #{w 23048}#
              #{mod 23049}#)
       (let ((#{r 23050}#
               (cons '("placeholder" placeholder) #{r 23047}#)))
         (let ((#{ribcage 23051}# (vector 'ribcage '() '() '())))
           (let ((#{w 23052}#
                   (cons (car #{w 23048}#)
                         (cons #{ribcage 23051}# (cdr #{w 23048}#)))))
             (letrec*
               ((#{parse 23053}#
                  (lambda (#{body 23066}#
                           #{ids 23067}#
                           #{labels 23068}#
                           #{var-ids 23069}#
                           #{vars 23070}#
                           #{vals 23071}#
                           #{bindings 23072}#)
                    (if (null? #{body 23066}#)
                      (syntax-violation
                        #f
                        "no expressions in body"
                        #{outer-form 23046}#)
                      (let ((#{e 23073}# (cdr (car #{body 23066}#)))
                            (#{er 23074}# (car (car #{body 23066}#))))
                        (call-with-values
                          (lambda ()
                            (#{syntax-type 4333}#
                              #{e 23073}#
                              #{er 23074}#
                              '(())
                              (#{source-annotation 4295}# #{er 23074}#)
                              #{ribcage 23051}#
                              #{mod 23049}#
                              #f))
                          (lambda (#{type 23231}#
                                   #{value 23232}#
                                   #{e 23233}#
                                   #{w 23234}#
                                   #{s 23235}#
                                   #{mod 23236}#)
                            (if (eqv? #{type 23231}# 'define-form)
                              (let ((#{id 23240}#
                                      (#{wrap 4327}#
                                        #{value 23232}#
                                        #{w 23234}#
                                        #{mod 23236}#))
                                    (#{label 23241}#
                                      (symbol->string (gensym "i"))))
                                (let ((#{var 23242}#
                                        (let ((#{id 23302}#
                                                (if (if (vector? #{id 23240}#)
                                                      (if (= (vector-length
                                                               #{id 23240}#)
                                                             4)
                                                        (eq? (vector-ref
                                                               #{id 23240}#
                                                               0)
                                                             'syntax-object)
                                                        #f)
                                                      #f)
                                                  (vector-ref #{id 23240}# 1)
                                                  #{id 23240}#)))
                                          (gensym
                                            (string-append
                                              (symbol->string #{id 23302}#)
                                              " ")))))
                                  (begin
                                    (let ((#{update 23292}#
                                            (cons (vector-ref #{id 23240}# 1)
                                                  (vector-ref
                                                    #{ribcage 23051}#
                                                    1))))
                                      (vector-set!
                                        #{ribcage 23051}#
                                        1
                                        #{update 23292}#))
                                    (let ((#{update 23294}#
                                            (cons (car (vector-ref
                                                         #{id 23240}#
                                                         2))
                                                  (vector-ref
                                                    #{ribcage 23051}#
                                                    2))))
                                      (vector-set!
                                        #{ribcage 23051}#
                                        2
                                        #{update 23294}#))
                                    (let ((#{update 23296}#
                                            (cons #{label 23241}#
                                                  (vector-ref
                                                    #{ribcage 23051}#
                                                    3))))
                                      (vector-set!
                                        #{ribcage 23051}#
                                        3
                                        #{update 23296}#))
                                    (#{parse 23053}#
                                      (cdr #{body 23066}#)
                                      (cons #{id 23240}# #{ids 23067}#)
                                      (cons #{label 23241}# #{labels 23068}#)
                                      (cons #{id 23240}# #{var-ids 23069}#)
                                      (cons #{var 23242}# #{vars 23070}#)
                                      (cons (cons #{er 23074}#
                                                  (#{wrap 4327}#
                                                    #{e 23233}#
                                                    #{w 23234}#
                                                    #{mod 23236}#))
                                            #{vals 23071}#)
                                      (cons (cons 'lexical #{var 23242}#)
                                            #{bindings 23072}#)))))
                              (if (eqv? #{type 23231}# 'define-syntax-form)
                                (let ((#{id 23330}#
                                        (#{wrap 4327}#
                                          #{value 23232}#
                                          #{w 23234}#
                                          #{mod 23236}#))
                                      (#{label 23331}#
                                        (symbol->string (gensym "i"))))
                                  (begin
                                    (let ((#{update 23381}#
                                            (cons (vector-ref #{id 23330}# 1)
                                                  (vector-ref
                                                    #{ribcage 23051}#
                                                    1))))
                                      (vector-set!
                                        #{ribcage 23051}#
                                        1
                                        #{update 23381}#))
                                    (let ((#{update 23383}#
                                            (cons (car (vector-ref
                                                         #{id 23330}#
                                                         2))
                                                  (vector-ref
                                                    #{ribcage 23051}#
                                                    2))))
                                      (vector-set!
                                        #{ribcage 23051}#
                                        2
                                        #{update 23383}#))
                                    (let ((#{update 23385}#
                                            (cons #{label 23331}#
                                                  (vector-ref
                                                    #{ribcage 23051}#
                                                    3))))
                                      (vector-set!
                                        #{ribcage 23051}#
                                        3
                                        #{update 23385}#))
                                    (#{parse 23053}#
                                      (cdr #{body 23066}#)
                                      (cons #{id 23330}# #{ids 23067}#)
                                      (cons #{label 23331}# #{labels 23068}#)
                                      #{var-ids 23069}#
                                      #{vars 23070}#
                                      #{vals 23071}#
                                      (cons (cons 'macro
                                                  (cons #{er 23074}#
                                                        (#{wrap 4327}#
                                                          #{e 23233}#
                                                          #{w 23234}#
                                                          #{mod 23236}#)))
                                            #{bindings 23072}#))))
                                (if (eqv? #{type 23231}# 'begin-form)
                                  (let ((#{tmp 23393}#
                                          ($sc-dispatch
                                            #{e 23233}#
                                            '(_ . each-any))))
                                    (if #{tmp 23393}#
                                      (@apply
                                        (lambda (#{e1 23397}#)
                                          (#{parse 23053}#
                                            (letrec*
                                              ((#{f 23398}#
                                                 (lambda (#{forms 23461}#)
                                                   (if (null? #{forms 23461}#)
                                                     (cdr #{body 23066}#)
                                                     (cons (cons #{er 23074}#
                                                                 (#{wrap 4327}#
                                                                   (car #{forms 23461}#)
                                                                   #{w 23234}#
                                                                   #{mod 23236}#))
                                                           (#{f 23398}#
                                                             (cdr #{forms 23461}#)))))))
                                              (#{f 23398}# #{e1 23397}#))
                                            #{ids 23067}#
                                            #{labels 23068}#
                                            #{var-ids 23069}#
                                            #{vars 23070}#
                                            #{vals 23071}#
                                            #{bindings 23072}#))
                                        #{tmp 23393}#)
                                      (syntax-violation
                                        #f
                                        "source expression failed to match any pattern"
                                        #{e 23233}#)))
                                  (if (eqv? #{type 23231}# 'local-syntax-form)
                                    (#{expand-local-syntax 4339}#
                                      #{value 23232}#
                                      #{e 23233}#
                                      #{er 23074}#
                                      #{w 23234}#
                                      #{s 23235}#
                                      #{mod 23236}#
                                      (lambda (#{forms 23475}#
                                               #{er 23476}#
                                               #{w 23477}#
                                               #{s 23478}#
                                               #{mod 23479}#)
                                        (#{parse 23053}#
                                          (letrec*
                                            ((#{f 23480}#
                                               (lambda (#{forms 23543}#)
                                                 (if (null? #{forms 23543}#)
                                                   (cdr #{body 23066}#)
                                                   (cons (cons #{er 23476}#
                                                               (#{wrap 4327}#
                                                                 (car #{forms 23543}#)
                                                                 #{w 23477}#
                                                                 #{mod 23479}#))
                                                         (#{f 23480}#
                                                           (cdr #{forms 23543}#)))))))
                                            (#{f 23480}# #{forms 23475}#))
                                          #{ids 23067}#
                                          #{labels 23068}#
                                          #{var-ids 23069}#
                                          #{vars 23070}#
                                          #{vals 23071}#
                                          #{bindings 23072}#)))
                                    (if (null? #{ids 23067}#)
                                      (#{build-sequence 4283}#
                                        #f
                                        (map (lambda (#{x 23608}#)
                                               (let ((#{e 23612}#
                                                       (cdr #{x 23608}#))
                                                     (#{r 23613}#
                                                       (car #{x 23608}#)))
                                                 (call-with-values
                                                   (lambda ()
                                                     (#{syntax-type 4333}#
                                                       #{e 23612}#
                                                       #{r 23613}#
                                                       '(())
                                                       (#{source-annotation 4295}#
                                                         #{e 23612}#)
                                                       #f
                                                       #{mod 23236}#
                                                       #f))
                                                   (lambda (#{type 23617}#
                                                            #{value 23618}#
                                                            #{e 23619}#
                                                            #{w 23620}#
                                                            #{s 23621}#
                                                            #{mod 23622}#)
                                                     (#{expand-expr 4335}#
                                                       #{type 23617}#
                                                       #{value 23618}#
                                                       #{e 23619}#
                                                       #{r 23613}#
                                                       #{w 23620}#
                                                       #{s 23621}#
                                                       #{mod 23622}#)))))
                                             (cons (cons #{er 23074}#
                                                         (#{wrap 4327}#
                                                           (begin
                                                             (if (if (pair? #{e 23233}#)
                                                                   #{s 23235}#
                                                                   #f)
                                                               (set-source-properties!
                                                                 #{e 23233}#
                                                                 #{s 23235}#))
                                                             #{e 23233}#)
                                                           #{w 23234}#
                                                           #{mod 23236}#))
                                                   (cdr #{body 23066}#))))
                                      (begin
                                        (if (not (#{valid-bound-ids? 4324}#
                                                   #{ids 23067}#))
                                          (syntax-violation
                                            #f
                                            "invalid or duplicate identifier in definition"
                                            #{outer-form 23046}#))
                                        (letrec*
                                          ((#{loop 23723}#
                                             (lambda (#{bs 23726}#
                                                      #{er-cache 23727}#
                                                      #{r-cache 23728}#)
                                               (if (not (null? #{bs 23726}#))
                                                 (let ((#{b 23729}#
                                                         (car #{bs 23726}#)))
                                                   (if (eq? (car #{b 23729}#)
                                                            'macro)
                                                     (let ((#{er 23731}#
                                                             (car (cdr #{b 23729}#))))
                                                       (let ((#{r-cache 23732}#
                                                               (if (eq? #{er 23731}#
                                                                        #{er-cache 23727}#)
                                                                 #{r-cache 23728}#
                                                                 (#{macros-only-env 4298}#
                                                                   #{er 23731}#))))
                                                         (begin
                                                           (set-cdr!
                                                             #{b 23729}#
                                                             (#{eval-local-transformer 4340}#
                                                               (#{expand 4334}#
                                                                 (cdr (cdr #{b 23729}#))
                                                                 #{r-cache 23732}#
                                                                 '(())
                                                                 #{mod 23236}#)
                                                               #{mod 23236}#))
                                                           (#{loop 23723}#
                                                             (cdr #{bs 23726}#)
                                                             #{er 23731}#
                                                             #{r-cache 23732}#))))
                                                     (#{loop 23723}#
                                                       (cdr #{bs 23726}#)
                                                       #{er-cache 23727}#
                                                       #{r-cache 23728}#)))))))
                                          (#{loop 23723}#
                                            #{bindings 23072}#
                                            #f
                                            #f))
                                        (set-cdr!
                                          #{r 23050}#
                                          (#{extend-env 4296}#
                                            #{labels 23068}#
                                            #{bindings 23072}#
                                            (cdr #{r 23050}#)))
                                        (#{build-letrec 4286}#
                                          #f
                                          #t
                                          (reverse
                                            (map syntax->datum
                                                 #{var-ids 23069}#))
                                          (reverse #{vars 23070}#)
                                          (map (lambda (#{x 24075}#)
                                                 (let ((#{e 24079}#
                                                         (cdr #{x 24075}#))
                                                       (#{r 24080}#
                                                         (car #{x 24075}#)))
                                                   (call-with-values
                                                     (lambda ()
                                                       (#{syntax-type 4333}#
                                                         #{e 24079}#
                                                         #{r 24080}#
                                                         '(())
                                                         (#{source-annotation 4295}#
                                                           #{e 24079}#)
                                                         #f
                                                         #{mod 23236}#
                                                         #f))
                                                     (lambda (#{type 24084}#
                                                              #{value 24085}#
                                                              #{e 24086}#
                                                              #{w 24087}#
                                                              #{s 24088}#
                                                              #{mod 24089}#)
                                                       (#{expand-expr 4335}#
                                                         #{type 24084}#
                                                         #{value 24085}#
                                                         #{e 24086}#
                                                         #{r 24080}#
                                                         #{w 24087}#
                                                         #{s 24088}#
                                                         #{mod 24089}#)))))
                                               (reverse #{vals 23071}#))
                                          (let ((#{exps 24095}#
                                                  (map (lambda (#{x 24096}#)
                                                         (let ((#{e 24099}#
                                                                 (cdr #{x 24096}#))
                                                               (#{r 24100}#
                                                                 (car #{x 24096}#)))
                                                           (call-with-values
                                                             (lambda ()
                                                               (#{syntax-type 4333}#
                                                                 #{e 24099}#
                                                                 #{r 24100}#
                                                                 '(())
                                                                 (#{source-annotation 4295}#
                                                                   #{e 24099}#)
                                                                 #f
                                                                 #{mod 23236}#
                                                                 #f))
                                                             (lambda (#{type 24104}#
                                                                      #{value 24105}#
                                                                      #{e 24106}#
                                                                      #{w 24107}#
                                                                      #{s 24108}#
                                                                      #{mod 24109}#)
                                                               (#{expand-expr 4335}#
                                                                 #{type 24104}#
                                                                 #{value 24105}#
                                                                 #{e 24106}#
                                                                 #{r 24100}#
                                                                 #{w 24107}#
                                                                 #{s 24108}#
                                                                 #{mod 24109}#)))))
                                                       (cons (cons #{er 23074}#
                                                                   (#{wrap 4327}#
                                                                     (begin
                                                                       (if (if (pair? #{e 23233}#)
                                                                             #{s 23235}#
                                                                             #f)
                                                                         (set-source-properties!
                                                                           #{e 23233}#
                                                                           #{s 23235}#))
                                                                       #{e 23233}#)
                                                                     #{w 23234}#
                                                                     #{mod 23236}#))
                                                             (cdr #{body 23066}#)))))
                                            (if (null? (cdr #{exps 24095}#))
                                              (car #{exps 24095}#)
                                              (make-struct/no-tail
                                                (vector-ref
                                                  %expanded-vtables
                                                  12)
                                                #f
                                                #{exps 24095}#)))))))))))))))))
               (#{parse 23053}#
                 (map (lambda (#{x 23056}#)
                        (cons #{r 23050}#
                              (#{wrap 4327}#
                                #{x 23056}#
                                #{w 23052}#
                                #{mod 23049}#)))
                      #{body 23045}#)
                 '()
                 '()
                 '()
                 '()
                 '()
                 '())))))))
   (#{expand-local-syntax 4339}#
     (lambda (#{rec? 24135}#
              #{e 24136}#
              #{r 24137}#
              #{w 24138}#
              #{s 24139}#
              #{mod 24140}#
              #{k 24141}#)
       (let ((#{tmp 24143}#
               ($sc-dispatch
                 #{e 24136}#
                 '(_ #(each (any any)) any . each-any))))
         (if #{tmp 24143}#
           (@apply
             (lambda (#{id 24147}#
                      #{val 24148}#
                      #{e1 24149}#
                      #{e2 24150}#)
               (if (not (#{valid-bound-ids? 4324}# #{id 24147}#))
                 (syntax-violation
                   #f
                   "duplicate bound keyword"
                   #{e 24136}#)
                 (let ((#{labels 24240}#
                         (#{gen-labels 4305}# #{id 24147}#)))
                   (let ((#{new-w 24241}#
                           (#{make-binding-wrap 4316}#
                             #{id 24147}#
                             #{labels 24240}#
                             #{w 24138}#)))
                     (#{k 24141}#
                       (cons #{e1 24149}# #{e2 24150}#)
                       (#{extend-env 4296}#
                         #{labels 24240}#
                         (let ((#{trans-r 24279}#
                                 (#{macros-only-env 4298}# #{r 24137}#)))
                           (begin
                             (if #{rec? 24135}# #{new-w 24241}# #{w 24138}#)
                             (map (lambda (#{x 24280}#)
                                    (cons 'macro
                                          (#{eval-local-transformer 4340}#
                                            (#{expand 4334}#
                                              #{x 24280}#
                                              #{trans-r 24279}#
                                              (values
                                                (if #{rec? 24135}#
                                                  #{new-w 24241}#
                                                  #{w 24138}#))
                                              #{mod 24140}#)
                                            #{mod 24140}#)))
                                  #{val 24148}#)))
                         #{r 24137}#)
                       #{new-w 24241}#
                       #{s 24139}#
                       #{mod 24140}#)))))
             #{tmp 24143}#)
           (syntax-violation
             #f
             "bad local syntax definition"
             (#{wrap 4327}#
               (begin
                 (if (if (pair? #{e 24136}#) #{s 24139}# #f)
                   (set-source-properties! #{e 24136}# #{s 24139}#))
                 #{e 24136}#)
               #{w 24138}#
               #{mod 24140}#))))))
   (#{eval-local-transformer 4340}#
     (lambda (#{expanded 24576}# #{mod 24577}#)
       (let ((#{p 24578}# (primitive-eval #{expanded 24576}#)))
         (if (procedure? #{p 24578}#)
           #{p 24578}#
           (syntax-violation
             #f
             "nonprocedure transformer"
             #{p 24578}#)))))
   (#{ellipsis? 4342}#
     (lambda (#{x 5143}#)
       (if (if (if (vector? #{x 5143}#)
                 (if (= (vector-length #{x 5143}#) 4)
                   (eq? (vector-ref #{x 5143}# 0) 'syntax-object)
                   #f)
                 #f)
             (symbol? (vector-ref #{x 5143}# 1))
             #f)
         (if (eq? (if (if (vector? #{x 5143}#)
                        (if (= (vector-length #{x 5143}#) 4)
                          (eq? (vector-ref #{x 5143}# 0) 'syntax-object)
                          #f)
                        #f)
                    (vector-ref #{x 5143}# 1)
                    #{x 5143}#)
                  (if (if (= (vector-length
                               '#(syntax-object
                                  ...
                                  ((top)
                                   #(ribcage () () ())
                                   #(ribcage () () ())
                                   #(ribcage #(x) #((top)) #("i2219"))
                                   #(ribcage
                                     (lambda-var-list
                                       gen-var
                                       strip
                                       expand-lambda-case
                                       lambda*-formals
                                       expand-simple-lambda
                                       lambda-formals
                                       ellipsis?
                                       expand-void
                                       eval-local-transformer
                                       expand-local-syntax
                                       expand-body
                                       expand-macro
                                       expand-application
                                       expand-expr
                                       expand
                                       syntax-type
                                       parse-when-list
                                       expand-install-global
                                       expand-top-sequence
                                       expand-sequence
                                       source-wrap
                                       wrap
                                       bound-id-member?
                                       distinct-bound-ids?
                                       valid-bound-ids?
                                       bound-id=?
                                       free-id=?
                                       id-var-name
                                       same-marks?
                                       join-marks
                                       join-wraps
                                       smart-append
                                       make-binding-wrap
                                       extend-ribcage!
                                       make-empty-ribcage
                                       new-mark
                                       anti-mark
                                       the-anti-mark
                                       top-marked?
                                       top-wrap
                                       empty-wrap
                                       set-ribcage-labels!
                                       set-ribcage-marks!
                                       set-ribcage-symnames!
                                       ribcage-labels
                                       ribcage-marks
                                       ribcage-symnames
                                       ribcage?
                                       make-ribcage
                                       gen-labels
                                       gen-label
                                       make-rename
                                       rename-marks
                                       rename-new
                                       rename-old
                                       subst-rename?
                                       wrap-subst
                                       wrap-marks
                                       make-wrap
                                       id-sym-name&marks
                                       id-sym-name
                                       id?
                                       nonsymbol-id?
                                       global-extend
                                       lookup
                                       macros-only-env
                                       extend-var-env
                                       extend-env
                                       null-env
                                       binding-value
                                       binding-type
                                       make-binding
                                       arg-check
                                       source-annotation
                                       no-source
                                       set-syntax-object-module!
                                       set-syntax-object-wrap!
                                       set-syntax-object-expression!
                                       syntax-object-module
                                       syntax-object-wrap
                                       syntax-object-expression
                                       syntax-object?
                                       make-syntax-object
                                       build-lexical-var
                                       build-letrec
                                       build-named-let
                                       build-let
                                       build-sequence
                                       build-data
                                       build-primref
                                       build-lambda-case
                                       build-case-lambda
                                       build-simple-lambda
                                       build-global-definition
                                       build-global-assignment
                                       build-global-reference
                                       analyze-variable
                                       build-lexical-assignment
                                       build-lexical-reference
                                       build-dynlet
                                       build-conditional
                                       build-application
                                       build-void
                                       maybe-name-value!
                                       decorate-source
                                       get-global-definition-hook
                                       put-global-definition-hook
                                       gensym-hook
                                       local-eval-hook
                                       top-level-eval-hook
                                       fx<
                                       fx=
                                       fx-
                                       fx+
                                       set-lambda-meta!
                                       lambda-meta
                                       lambda?
                                       make-dynlet
                                       make-letrec
                                       make-let
                                       make-lambda-case
                                       make-lambda
                                       make-sequence
                                       make-application
                                       make-conditional
                                       make-toplevel-define
                                       make-toplevel-set
                                       make-toplevel-ref
                                       make-module-set
                                       make-module-ref
                                       make-lexical-set
                                       make-lexical-ref
                                       make-primitive-ref
                                       make-const
                                       make-void)
                                     ((top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top))
                                     ("i467"
                                      "i465"
                                      "i463"
                                      "i461"
                                      "i459"
                                      "i457"
                                      "i455"
                                      "i453"
                                      "i451"
                                      "i449"
                                      "i447"
                                      "i445"
                                      "i443"
                                      "i441"
                                      "i439"
                                      "i437"
                                      "i435"
                                      "i433"
                                      "i431"
                                      "i429"
                                      "i427"
                                      "i425"
                                      "i423"
                                      "i421"
                                      "i419"
                                      "i417"
                                      "i415"
                                      "i413"
                                      "i411"
                                      "i409"
                                      "i407"
                                      "i405"
                                      "i403"
                                      "i401"
                                      "i399"
                                      "i398"
                                      "i396"
                                      "i393"
                                      "i392"
                                      "i391"
                                      "i389"
                                      "i388"
                                      "i386"
                                      "i384"
                                      "i382"
                                      "i380"
                                      "i378"
                                      "i376"
                                      "i374"
                                      "i372"
                                      "i369"
                                      "i367"
                                      "i366"
                                      "i364"
                                      "i362"
                                      "i360"
                                      "i358"
                                      "i357"
                                      "i356"
                                      "i355"
                                      "i353"
                                      "i352"
                                      "i349"
                                      "i347"
                                      "i345"
                                      "i343"
                                      "i341"
                                      "i339"
                                      "i337"
                                      "i336"
                                      "i335"
                                      "i333"
                                      "i331"
                                      "i330"
                                      "i327"
                                      "i326"
                                      "i324"
                                      "i322"
                                      "i320"
                                      "i318"
                                      "i316"
                                      "i314"
                                      "i312"
                                      "i310"
                                      "i308"
                                      "i305"
                                      "i303"
                                      "i301"
                                      "i299"
                                      "i297"
                                      "i295"
                                      "i293"
                                      "i291"
                                      "i289"
                                      "i287"
                                      "i285"
                                      "i283"
                                      "i281"
                                      "i279"
                                      "i277"
                                      "i275"
                                      "i273"
                                      "i271"
                                      "i269"
                                      "i267"
                                      "i265"
                                      "i263"
                                      "i261"
                                      "i260"
                                      "i257"
                                      "i255"
                                      "i254"
                                      "i253"
                                      "i252"
                                      "i251"
                                      "i249"
                                      "i247"
                                      "i245"
                                      "i242"
                                      "i240"
                                      "i238"
                                      "i236"
                                      "i234"
                                      "i232"
                                      "i230"
                                      "i228"
                                      "i226"
                                      "i224"
                                      "i222"
                                      "i220"
                                      "i218"
                                      "i216"
                                      "i214"
                                      "i212"
                                      "i210"
                                      "i208"))
                                   #(ribcage
                                     (define-structure
                                       define-expansion-accessors
                                       define-expansion-constructors)
                                     ((top) (top) (top))
                                     ("i46" "i45" "i44")))
                                  (hygiene guile)))
                             4)
                        #t
                        #f)
                    '...
                    '#(syntax-object
                       ...
                       ((top)
                        #(ribcage () () ())
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i2219"))
                        #(ribcage
                          (lambda-var-list
                            gen-var
                            strip
                            expand-lambda-case
                            lambda*-formals
                            expand-simple-lambda
                            lambda-formals
                            ellipsis?
                            expand-void
                            eval-local-transformer
                            expand-local-syntax
                            expand-body
                            expand-macro
                            expand-application
                            expand-expr
                            expand
                            syntax-type
                            parse-when-list
                            expand-install-global
                            expand-top-sequence
                            expand-sequence
                            source-wrap
                            wrap
                            bound-id-member?
                            distinct-bound-ids?
                            valid-bound-ids?
                            bound-id=?
                            free-id=?
                            id-var-name
                            same-marks?
                            join-marks
                            join-wraps
                            smart-append
                            make-binding-wrap
                            extend-ribcage!
                            make-empty-ribcage
                            new-mark
                            anti-mark
                            the-anti-mark
                            top-marked?
                            top-wrap
                            empty-wrap
                            set-ribcage-labels!
                            set-ribcage-marks!
                            set-ribcage-symnames!
                            ribcage-labels
                            ribcage-marks
                            ribcage-symnames
                            ribcage?
                            make-ribcage
                            gen-labels
                            gen-label
                            make-rename
                            rename-marks
                            rename-new
                            rename-old
                            subst-rename?
                            wrap-subst
                            wrap-marks
                            make-wrap
                            id-sym-name&marks
                            id-sym-name
                            id?
                            nonsymbol-id?
                            global-extend
                            lookup
                            macros-only-env
                            extend-var-env
                            extend-env
                            null-env
                            binding-value
                            binding-type
                            make-binding
                            arg-check
                            source-annotation
                            no-source
                            set-syntax-object-module!
                            set-syntax-object-wrap!
                            set-syntax-object-expression!
                            syntax-object-module
                            syntax-object-wrap
                            syntax-object-expression
                            syntax-object?
                            make-syntax-object
                            build-lexical-var
                            build-letrec
                            build-named-let
                            build-let
                            build-sequence
                            build-data
                            build-primref
                            build-lambda-case
                            build-case-lambda
                            build-simple-lambda
                            build-global-definition
                            build-global-assignment
                            build-global-reference
                            analyze-variable
                            build-lexical-assignment
                            build-lexical-reference
                            build-dynlet
                            build-conditional
                            build-application
                            build-void
                            maybe-name-value!
                            decorate-source
                            get-global-definition-hook
                            put-global-definition-hook
                            gensym-hook
                            local-eval-hook
                            top-level-eval-hook
                            fx<
                            fx=
                            fx-
                            fx+
                            set-lambda-meta!
                            lambda-meta
                            lambda?
                            make-dynlet
                            make-letrec
                            make-let
                            make-lambda-case
                            make-lambda
                            make-sequence
                            make-application
                            make-conditional
                            make-toplevel-define
                            make-toplevel-set
                            make-toplevel-ref
                            make-module-set
                            make-module-ref
                            make-lexical-set
                            make-lexical-ref
                            make-primitive-ref
                            make-const
                            make-void)
                          ((top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top))
                          ("i467"
                           "i465"
                           "i463"
                           "i461"
                           "i459"
                           "i457"
                           "i455"
                           "i453"
                           "i451"
                           "i449"
                           "i447"
                           "i445"
                           "i443"
                           "i441"
                           "i439"
                           "i437"
                           "i435"
                           "i433"
                           "i431"
                           "i429"
                           "i427"
                           "i425"
                           "i423"
                           "i421"
                           "i419"
                           "i417"
                           "i415"
                           "i413"
                           "i411"
                           "i409"
                           "i407"
                           "i405"
                           "i403"
                           "i401"
                           "i399"
                           "i398"
                           "i396"
                           "i393"
                           "i392"
                           "i391"
                           "i389"
                           "i388"
                           "i386"
                           "i384"
                           "i382"
                           "i380"
                           "i378"
                           "i376"
                           "i374"
                           "i372"
                           "i369"
                           "i367"
                           "i366"
                           "i364"
                           "i362"
                           "i360"
                           "i358"
                           "i357"
                           "i356"
                           "i355"
                           "i353"
                           "i352"
                           "i349"
                           "i347"
                           "i345"
                           "i343"
                           "i341"
                           "i339"
                           "i337"
                           "i336"
                           "i335"
                           "i333"
                           "i331"
                           "i330"
                           "i327"
                           "i326"
                           "i324"
                           "i322"
                           "i320"
                           "i318"
                           "i316"
                           "i314"
                           "i312"
                           "i310"
                           "i308"
                           "i305"
                           "i303"
                           "i301"
                           "i299"
                           "i297"
                           "i295"
                           "i293"
                           "i291"
                           "i289"
                           "i287"
                           "i285"
                           "i283"
                           "i281"
                           "i279"
                           "i277"
                           "i275"
                           "i273"
                           "i271"
                           "i269"
                           "i267"
                           "i265"
                           "i263"
                           "i261"
                           "i260"
                           "i257"
                           "i255"
                           "i254"
                           "i253"
                           "i252"
                           "i251"
                           "i249"
                           "i247"
                           "i245"
                           "i242"
                           "i240"
                           "i238"
                           "i236"
                           "i234"
                           "i232"
                           "i230"
                           "i228"
                           "i226"
                           "i224"
                           "i222"
                           "i220"
                           "i218"
                           "i216"
                           "i214"
                           "i212"
                           "i210"
                           "i208"))
                        #(ribcage
                          (define-structure
                            define-expansion-accessors
                            define-expansion-constructors)
                          ((top) (top) (top))
                          ("i46" "i45" "i44")))
                       (hygiene guile))))
           (eq? (#{id-var-name 4321}# #{x 5143}# '(()))
                (#{id-var-name 4321}#
                  '#(syntax-object
                     ...
                     ((top)
                      #(ribcage () () ())
                      #(ribcage () () ())
                      #(ribcage #(x) #((top)) #("i2219"))
                      #(ribcage
                        (lambda-var-list
                          gen-var
                          strip
                          expand-lambda-case
                          lambda*-formals
                          expand-simple-lambda
                          lambda-formals
                          ellipsis?
                          expand-void
                          eval-local-transformer
                          expand-local-syntax
                          expand-body
                          expand-macro
                          expand-application
                          expand-expr
                          expand
                          syntax-type
                          parse-when-list
                          expand-install-global
                          expand-top-sequence
                          expand-sequence
                          source-wrap
                          wrap
                          bound-id-member?
                          distinct-bound-ids?
                          valid-bound-ids?
                          bound-id=?
                          free-id=?
                          id-var-name
                          same-marks?
                          join-marks
                          join-wraps
                          smart-append
                          make-binding-wrap
                          extend-ribcage!
                          make-empty-ribcage
                          new-mark
                          anti-mark
                          the-anti-mark
                          top-marked?
                          top-wrap
                          empty-wrap
                          set-ribcage-labels!
                          set-ribcage-marks!
                          set-ribcage-symnames!
                          ribcage-labels
                          ribcage-marks
                          ribcage-symnames
                          ribcage?
                          make-ribcage
                          gen-labels
                          gen-label
                          make-rename
                          rename-marks
                          rename-new
                          rename-old
                          subst-rename?
                          wrap-subst
                          wrap-marks
                          make-wrap
                          id-sym-name&marks
                          id-sym-name
                          id?
                          nonsymbol-id?
                          global-extend
                          lookup
                          macros-only-env
                          extend-var-env
                          extend-env
                          null-env
                          binding-value
                          binding-type
                          make-binding
                          arg-check
                          source-annotation
                          no-source
                          set-syntax-object-module!
                          set-syntax-object-wrap!
                          set-syntax-object-expression!
                          syntax-object-module
                          syntax-object-wrap
                          syntax-object-expression
                          syntax-object?
                          make-syntax-object
                          build-lexical-var
                          build-letrec
                          build-named-let
                          build-let
                          build-sequence
                          build-data
                          build-primref
                          build-lambda-case
                          build-case-lambda
                          build-simple-lambda
                          build-global-definition
                          build-global-assignment
                          build-global-reference
                          analyze-variable
                          build-lexical-assignment
                          build-lexical-reference
                          build-dynlet
                          build-conditional
                          build-application
                          build-void
                          maybe-name-value!
                          decorate-source
                          get-global-definition-hook
                          put-global-definition-hook
                          gensym-hook
                          local-eval-hook
                          top-level-eval-hook
                          fx<
                          fx=
                          fx-
                          fx+
                          set-lambda-meta!
                          lambda-meta
                          lambda?
                          make-dynlet
                          make-letrec
                          make-let
                          make-lambda-case
                          make-lambda
                          make-sequence
                          make-application
                          make-conditional
                          make-toplevel-define
                          make-toplevel-set
                          make-toplevel-ref
                          make-module-set
                          make-module-ref
                          make-lexical-set
                          make-lexical-ref
                          make-primitive-ref
                          make-const
                          make-void)
                        ((top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top))
                        ("i467"
                         "i465"
                         "i463"
                         "i461"
                         "i459"
                         "i457"
                         "i455"
                         "i453"
                         "i451"
                         "i449"
                         "i447"
                         "i445"
                         "i443"
                         "i441"
                         "i439"
                         "i437"
                         "i435"
                         "i433"
                         "i431"
                         "i429"
                         "i427"
                         "i425"
                         "i423"
                         "i421"
                         "i419"
                         "i417"
                         "i415"
                         "i413"
                         "i411"
                         "i409"
                         "i407"
                         "i405"
                         "i403"
                         "i401"
                         "i399"
                         "i398"
                         "i396"
                         "i393"
                         "i392"
                         "i391"
                         "i389"
                         "i388"
                         "i386"
                         "i384"
                         "i382"
                         "i380"
                         "i378"
                         "i376"
                         "i374"
                         "i372"
                         "i369"
                         "i367"
                         "i366"
                         "i364"
                         "i362"
                         "i360"
                         "i358"
                         "i357"
                         "i356"
                         "i355"
                         "i353"
                         "i352"
                         "i349"
                         "i347"
                         "i345"
                         "i343"
                         "i341"
                         "i339"
                         "i337"
                         "i336"
                         "i335"
                         "i333"
                         "i331"
                         "i330"
                         "i327"
                         "i326"
                         "i324"
                         "i322"
                         "i320"
                         "i318"
                         "i316"
                         "i314"
                         "i312"
                         "i310"
                         "i308"
                         "i305"
                         "i303"
                         "i301"
                         "i299"
                         "i297"
                         "i295"
                         "i293"
                         "i291"
                         "i289"
                         "i287"
                         "i285"
                         "i283"
                         "i281"
                         "i279"
                         "i277"
                         "i275"
                         "i273"
                         "i271"
                         "i269"
                         "i267"
                         "i265"
                         "i263"
                         "i261"
                         "i260"
                         "i257"
                         "i255"
                         "i254"
                         "i253"
                         "i252"
                         "i251"
                         "i249"
                         "i247"
                         "i245"
                         "i242"
                         "i240"
                         "i238"
                         "i236"
                         "i234"
                         "i232"
                         "i230"
                         "i228"
                         "i226"
                         "i224"
                         "i222"
                         "i220"
                         "i218"
                         "i216"
                         "i214"
                         "i212"
                         "i210"
                         "i208"))
                      #(ribcage
                        (define-structure
                          define-expansion-accessors
                          define-expansion-constructors)
                        ((top) (top) (top))
                        ("i46" "i45" "i44")))
                     (hygiene guile))
                  '(())))
           #f)
         #f)))
   (#{lambda-formals 4343}#
     (lambda (#{orig-args 24583}#)
       (letrec*
         ((#{req 24584}#
            (lambda (#{args 24588}# #{rreq 24589}#)
              (let ((#{tmp 24591}# ($sc-dispatch #{args 24588}# '())))
                (if #{tmp 24591}#
                  (@apply
                    (lambda ()
                      (#{check 24585}# (reverse #{rreq 24589}#) #f))
                    #{tmp 24591}#)
                  (let ((#{tmp 24714}#
                          ($sc-dispatch #{args 24588}# '(any . any))))
                    (if (if #{tmp 24714}#
                          (@apply
                            (lambda (#{a 24718}# #{b 24719}#)
                              (if (symbol? #{a 24718}#)
                                #t
                                (if (if (vector? #{a 24718}#)
                                      (if (= (vector-length #{a 24718}#) 4)
                                        (eq? (vector-ref #{a 24718}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (symbol? (vector-ref #{a 24718}# 1))
                                  #f)))
                            #{tmp 24714}#)
                          #f)
                      (@apply
                        (lambda (#{a 24746}# #{b 24747}#)
                          (#{req 24584}#
                            #{b 24747}#
                            (cons #{a 24746}# #{rreq 24589}#)))
                        #{tmp 24714}#)
                      (let ((#{tmp 24748}# (list #{args 24588}#)))
                        (if (@apply
                              (lambda (#{r 24750}#)
                                (if (symbol? #{r 24750}#)
                                  #t
                                  (if (if (vector? #{r 24750}#)
                                        (if (= (vector-length #{r 24750}#) 4)
                                          (eq? (vector-ref #{r 24750}# 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (symbol? (vector-ref #{r 24750}# 1))
                                    #f)))
                              #{tmp 24748}#)
                          (@apply
                            (lambda (#{r 24780}#)
                              (#{check 24585}#
                                (reverse #{rreq 24589}#)
                                #{r 24780}#))
                            #{tmp 24748}#)
                          (syntax-violation
                            'lambda
                            "invalid argument list"
                            #{orig-args 24583}#
                            #{args 24588}#)))))))))
          (#{check 24585}#
            (lambda (#{req 24911}# #{rest 24912}#)
              (if (#{distinct-bound-ids? 4325}#
                    (if #{rest 24912}#
                      (cons #{rest 24912}# #{req 24911}#)
                      #{req 24911}#))
                (values #{req 24911}# #f #{rest 24912}# #f)
                (syntax-violation
                  'lambda
                  "duplicate identifier in argument list"
                  #{orig-args 24583}#)))))
         (#{req 24584}# #{orig-args 24583}# '()))))
   (#{expand-simple-lambda 4344}#
     (lambda (#{e 25028}#
              #{r 25029}#
              #{w 25030}#
              #{s 25031}#
              #{mod 25032}#
              #{req 25033}#
              #{rest 25034}#
              #{meta 25035}#
              #{body 25036}#)
       (let ((#{ids 25037}#
               (if #{rest 25034}#
                 (append #{req 25033}# (list #{rest 25034}#))
                 #{req 25033}#)))
         (let ((#{vars 25038}#
                 (map #{gen-var 4348}# #{ids 25037}#)))
           (let ((#{labels 25039}#
                   (#{gen-labels 4305}# #{ids 25037}#)))
             (#{build-simple-lambda 4278}#
               #{s 25031}#
               (map syntax->datum #{req 25033}#)
               (if #{rest 25034}#
                 (syntax->datum #{rest 25034}#)
                 #f)
               #{vars 25038}#
               #{meta 25035}#
               (#{expand-body 4338}#
                 #{body 25036}#
                 (#{wrap 4327}#
                   (begin
                     (if (if (pair? #{e 25028}#) #{s 25031}# #f)
                       (set-source-properties! #{e 25028}# #{s 25031}#))
                     #{e 25028}#)
                   #{w 25030}#
                   #{mod 25032}#)
                 (#{extend-var-env 4297}#
                   #{labels 25039}#
                   #{vars 25038}#
                   #{r 25029}#)
                 (#{make-binding-wrap 4316}#
                   #{ids 25037}#
                   #{labels 25039}#
                   #{w 25030}#)
                 #{mod 25032}#)))))))
   (#{lambda*-formals 4345}#
     (lambda (#{orig-args 25339}#)
       (letrec*
         ((#{req 25340}#
            (lambda (#{args 25347}# #{rreq 25348}#)
              (let ((#{tmp 25350}# ($sc-dispatch #{args 25347}# '())))
                (if #{tmp 25350}#
                  (@apply
                    (lambda ()
                      (#{check 25344}#
                        (reverse #{rreq 25348}#)
                        '()
                        #f
                        '()))
                    #{tmp 25350}#)
                  (let ((#{tmp 25356}#
                          ($sc-dispatch #{args 25347}# '(any . any))))
                    (if (if #{tmp 25356}#
                          (@apply
                            (lambda (#{a 25360}# #{b 25361}#)
                              (if (symbol? #{a 25360}#)
                                #t
                                (if (if (vector? #{a 25360}#)
                                      (if (= (vector-length #{a 25360}#) 4)
                                        (eq? (vector-ref #{a 25360}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (symbol? (vector-ref #{a 25360}# 1))
                                  #f)))
                            #{tmp 25356}#)
                          #f)
                      (@apply
                        (lambda (#{a 25388}# #{b 25389}#)
                          (#{req 25340}#
                            #{b 25389}#
                            (cons #{a 25388}# #{rreq 25348}#)))
                        #{tmp 25356}#)
                      (let ((#{tmp 25390}#
                              ($sc-dispatch #{args 25347}# '(any . any))))
                        (if (if #{tmp 25390}#
                              (@apply
                                (lambda (#{a 25394}# #{b 25395}#)
                                  (eq? (syntax->datum #{a 25394}#) #:optional))
                                #{tmp 25390}#)
                              #f)
                          (@apply
                            (lambda (#{a 25396}# #{b 25397}#)
                              (#{opt 25341}#
                                #{b 25397}#
                                (reverse #{rreq 25348}#)
                                '()))
                            #{tmp 25390}#)
                          (let ((#{tmp 25400}#
                                  ($sc-dispatch #{args 25347}# '(any . any))))
                            (if (if #{tmp 25400}#
                                  (@apply
                                    (lambda (#{a 25404}# #{b 25405}#)
                                      (eq? (syntax->datum #{a 25404}#) #:key))
                                    #{tmp 25400}#)
                                  #f)
                              (@apply
                                (lambda (#{a 25406}# #{b 25407}#)
                                  (#{key 25342}#
                                    #{b 25407}#
                                    (reverse #{rreq 25348}#)
                                    '()
                                    '()))
                                #{tmp 25400}#)
                              (let ((#{tmp 25410}#
                                      ($sc-dispatch
                                        #{args 25347}#
                                        '(any any))))
                                (if (if #{tmp 25410}#
                                      (@apply
                                        (lambda (#{a 25414}# #{b 25415}#)
                                          (eq? (syntax->datum #{a 25414}#)
                                               #:rest))
                                        #{tmp 25410}#)
                                      #f)
                                  (@apply
                                    (lambda (#{a 25416}# #{b 25417}#)
                                      (#{rest 25343}#
                                        #{b 25417}#
                                        (reverse #{rreq 25348}#)
                                        '()
                                        '()))
                                    #{tmp 25410}#)
                                  (let ((#{tmp 25420}# (list #{args 25347}#)))
                                    (if (@apply
                                          (lambda (#{r 25422}#)
                                            (if (symbol? #{r 25422}#)
                                              #t
                                              (if (if (vector? #{r 25422}#)
                                                    (if (= (vector-length
                                                             #{r 25422}#)
                                                           4)
                                                      (eq? (vector-ref
                                                             #{r 25422}#
                                                             0)
                                                           'syntax-object)
                                                      #f)
                                                    #f)
                                                (symbol?
                                                  (vector-ref #{r 25422}# 1))
                                                #f)))
                                          #{tmp 25420}#)
                                      (@apply
                                        (lambda (#{r 25452}#)
                                          (#{rest 25343}#
                                            #{r 25452}#
                                            (reverse #{rreq 25348}#)
                                            '()
                                            '()))
                                        #{tmp 25420}#)
                                      (syntax-violation
                                        'lambda*
                                        "invalid argument list"
                                        #{orig-args 25339}#
                                        #{args 25347}#)))))))))))))))
          (#{opt 25341}#
            (lambda (#{args 25471}# #{req 25472}# #{ropt 25473}#)
              (let ((#{tmp 25475}# ($sc-dispatch #{args 25471}# '())))
                (if #{tmp 25475}#
                  (@apply
                    (lambda ()
                      (#{check 25344}#
                        #{req 25472}#
                        (reverse #{ropt 25473}#)
                        #f
                        '()))
                    #{tmp 25475}#)
                  (let ((#{tmp 25481}#
                          ($sc-dispatch #{args 25471}# '(any . any))))
                    (if (if #{tmp 25481}#
                          (@apply
                            (lambda (#{a 25485}# #{b 25486}#)
                              (if (symbol? #{a 25485}#)
                                #t
                                (if (if (vector? #{a 25485}#)
                                      (if (= (vector-length #{a 25485}#) 4)
                                        (eq? (vector-ref #{a 25485}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (symbol? (vector-ref #{a 25485}# 1))
                                  #f)))
                            #{tmp 25481}#)
                          #f)
                      (@apply
                        (lambda (#{a 25513}# #{b 25514}#)
                          (#{opt 25341}#
                            #{b 25514}#
                            #{req 25472}#
                            (cons (cons #{a 25513}#
                                        '(#(syntax-object
                                            #f
                                            ((top)
                                             #(ribcage
                                               #(a b)
                                               #((top) (top))
                                               #("i2358" "i2359"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(args req ropt)
                                               #((top) (top) (top))
                                               #("i2348" "i2349" "i2350"))
                                             #(ribcage
                                               (check rest key opt req)
                                               ((top) (top) (top) (top) (top))
                                               ("i2294"
                                                "i2292"
                                                "i2290"
                                                "i2288"
                                                "i2286"))
                                             #(ribcage
                                               #(orig-args)
                                               #((top))
                                               #("i2285"))
                                             #(ribcage
                                               (lambda-var-list
                                                 gen-var
                                                 strip
                                                 expand-lambda-case
                                                 lambda*-formals
                                                 expand-simple-lambda
                                                 lambda-formals
                                                 ellipsis?
                                                 expand-void
                                                 eval-local-transformer
                                                 expand-local-syntax
                                                 expand-body
                                                 expand-macro
                                                 expand-application
                                                 expand-expr
                                                 expand
                                                 syntax-type
                                                 parse-when-list
                                                 expand-install-global
                                                 expand-top-sequence
                                                 expand-sequence
                                                 source-wrap
                                                 wrap
                                                 bound-id-member?
                                                 distinct-bound-ids?
                                                 valid-bound-ids?
                                                 bound-id=?
                                                 free-id=?
                                                 id-var-name
                                                 same-marks?
                                                 join-marks
                                                 join-wraps
                                                 smart-append
                                                 make-binding-wrap
                                                 extend-ribcage!
                                                 make-empty-ribcage
                                                 new-mark
                                                 anti-mark
                                                 the-anti-mark
                                                 top-marked?
                                                 top-wrap
                                                 empty-wrap
                                                 set-ribcage-labels!
                                                 set-ribcage-marks!
                                                 set-ribcage-symnames!
                                                 ribcage-labels
                                                 ribcage-marks
                                                 ribcage-symnames
                                                 ribcage?
                                                 make-ribcage
                                                 gen-labels
                                                 gen-label
                                                 make-rename
                                                 rename-marks
                                                 rename-new
                                                 rename-old
                                                 subst-rename?
                                                 wrap-subst
                                                 wrap-marks
                                                 make-wrap
                                                 id-sym-name&marks
                                                 id-sym-name
                                                 id?
                                                 nonsymbol-id?
                                                 global-extend
                                                 lookup
                                                 macros-only-env
                                                 extend-var-env
                                                 extend-env
                                                 null-env
                                                 binding-value
                                                 binding-type
                                                 make-binding
                                                 arg-check
                                                 source-annotation
                                                 no-source
                                                 set-syntax-object-module!
                                                 set-syntax-object-wrap!
                                                 set-syntax-object-expression!
                                                 syntax-object-module
                                                 syntax-object-wrap
                                                 syntax-object-expression
                                                 syntax-object?
                                                 make-syntax-object
                                                 build-lexical-var
                                                 build-letrec
                                                 build-named-let
                                                 build-let
                                                 build-sequence
                                                 build-data
                                                 build-primref
                                                 build-lambda-case
                                                 build-case-lambda
                                                 build-simple-lambda
                                                 build-global-definition
                                                 build-global-assignment
                                                 build-global-reference
                                                 analyze-variable
                                                 build-lexical-assignment
                                                 build-lexical-reference
                                                 build-dynlet
                                                 build-conditional
                                                 build-application
                                                 build-void
                                                 maybe-name-value!
                                                 decorate-source
                                                 get-global-definition-hook
                                                 put-global-definition-hook
                                                 gensym-hook
                                                 local-eval-hook
                                                 top-level-eval-hook
                                                 fx<
                                                 fx=
                                                 fx-
                                                 fx+
                                                 set-lambda-meta!
                                                 lambda-meta
                                                 lambda?
                                                 make-dynlet
                                                 make-letrec
                                                 make-let
                                                 make-lambda-case
                                                 make-lambda
                                                 make-sequence
                                                 make-application
                                                 make-conditional
                                                 make-toplevel-define
                                                 make-toplevel-set
                                                 make-toplevel-ref
                                                 make-module-set
                                                 make-module-ref
                                                 make-lexical-set
                                                 make-lexical-ref
                                                 make-primitive-ref
                                                 make-const
                                                 make-void)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("i467"
                                                "i465"
                                                "i463"
                                                "i461"
                                                "i459"
                                                "i457"
                                                "i455"
                                                "i453"
                                                "i451"
                                                "i449"
                                                "i447"
                                                "i445"
                                                "i443"
                                                "i441"
                                                "i439"
                                                "i437"
                                                "i435"
                                                "i433"
                                                "i431"
                                                "i429"
                                                "i427"
                                                "i425"
                                                "i423"
                                                "i421"
                                                "i419"
                                                "i417"
                                                "i415"
                                                "i413"
                                                "i411"
                                                "i409"
                                                "i407"
                                                "i405"
                                                "i403"
                                                "i401"
                                                "i399"
                                                "i398"
                                                "i396"
                                                "i393"
                                                "i392"
                                                "i391"
                                                "i389"
                                                "i388"
                                                "i386"
                                                "i384"
                                                "i382"
                                                "i380"
                                                "i378"
                                                "i376"
                                                "i374"
                                                "i372"
                                                "i369"
                                                "i367"
                                                "i366"
                                                "i364"
                                                "i362"
                                                "i360"
                                                "i358"
                                                "i357"
                                                "i356"
                                                "i355"
                                                "i353"
                                                "i352"
                                                "i349"
                                                "i347"
                                                "i345"
                                                "i343"
                                                "i341"
                                                "i339"
                                                "i337"
                                                "i336"
                                                "i335"
                                                "i333"
                                                "i331"
                                                "i330"
                                                "i327"
                                                "i326"
                                                "i324"
                                                "i322"
                                                "i320"
                                                "i318"
                                                "i316"
                                                "i314"
                                                "i312"
                                                "i310"
                                                "i308"
                                                "i305"
                                                "i303"
                                                "i301"
                                                "i299"
                                                "i297"
                                                "i295"
                                                "i293"
                                                "i291"
                                                "i289"
                                                "i287"
                                                "i285"
                                                "i283"
                                                "i281"
                                                "i279"
                                                "i277"
                                                "i275"
                                                "i273"
                                                "i271"
                                                "i269"
                                                "i267"
                                                "i265"
                                                "i263"
                                                "i261"
                                                "i260"
                                                "i257"
                                                "i255"
                                                "i254"
                                                "i253"
                                                "i252"
                                                "i251"
                                                "i249"
                                                "i247"
                                                "i245"
                                                "i242"
                                                "i240"
                                                "i238"
                                                "i236"
                                                "i234"
                                                "i232"
                                                "i230"
                                                "i228"
                                                "i226"
                                                "i224"
                                                "i222"
                                                "i220"
                                                "i218"
                                                "i216"
                                                "i214"
                                                "i212"
                                                "i210"
                                                "i208"))
                                             #(ribcage
                                               (define-structure
                                                 define-expansion-accessors
                                                 define-expansion-constructors)
                                               ((top) (top) (top))
                                               ("i46" "i45" "i44")))
                                            (hygiene guile))))
                                  #{ropt 25473}#)))
                        #{tmp 25481}#)
                      (let ((#{tmp 25515}#
                              ($sc-dispatch
                                #{args 25471}#
                                '((any any) . any))))
                        (if (if #{tmp 25515}#
                              (@apply
                                (lambda (#{a 25519}#
                                         #{init 25520}#
                                         #{b 25521}#)
                                  (if (symbol? #{a 25519}#)
                                    #t
                                    (if (if (vector? #{a 25519}#)
                                          (if (= (vector-length #{a 25519}#) 4)
                                            (eq? (vector-ref #{a 25519}# 0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (symbol? (vector-ref #{a 25519}# 1))
                                      #f)))
                                #{tmp 25515}#)
                              #f)
                          (@apply
                            (lambda (#{a 25548}# #{init 25549}# #{b 25550}#)
                              (#{opt 25341}#
                                #{b 25550}#
                                #{req 25472}#
                                (cons (list #{a 25548}# #{init 25549}#)
                                      #{ropt 25473}#)))
                            #{tmp 25515}#)
                          (let ((#{tmp 25551}#
                                  ($sc-dispatch #{args 25471}# '(any . any))))
                            (if (if #{tmp 25551}#
                                  (@apply
                                    (lambda (#{a 25555}# #{b 25556}#)
                                      (eq? (syntax->datum #{a 25555}#) #:key))
                                    #{tmp 25551}#)
                                  #f)
                              (@apply
                                (lambda (#{a 25557}# #{b 25558}#)
                                  (#{key 25342}#
                                    #{b 25558}#
                                    #{req 25472}#
                                    (reverse #{ropt 25473}#)
                                    '()))
                                #{tmp 25551}#)
                              (let ((#{tmp 25561}#
                                      ($sc-dispatch
                                        #{args 25471}#
                                        '(any any))))
                                (if (if #{tmp 25561}#
                                      (@apply
                                        (lambda (#{a 25565}# #{b 25566}#)
                                          (eq? (syntax->datum #{a 25565}#)
                                               #:rest))
                                        #{tmp 25561}#)
                                      #f)
                                  (@apply
                                    (lambda (#{a 25567}# #{b 25568}#)
                                      (#{rest 25343}#
                                        #{b 25568}#
                                        #{req 25472}#
                                        (reverse #{ropt 25473}#)
                                        '()))
                                    #{tmp 25561}#)
                                  (let ((#{tmp 25571}# (list #{args 25471}#)))
                                    (if (@apply
                                          (lambda (#{r 25573}#)
                                            (if (symbol? #{r 25573}#)
                                              #t
                                              (if (if (vector? #{r 25573}#)
                                                    (if (= (vector-length
                                                             #{r 25573}#)
                                                           4)
                                                      (eq? (vector-ref
                                                             #{r 25573}#
                                                             0)
                                                           'syntax-object)
                                                      #f)
                                                    #f)
                                                (symbol?
                                                  (vector-ref #{r 25573}# 1))
                                                #f)))
                                          #{tmp 25571}#)
                                      (@apply
                                        (lambda (#{r 25603}#)
                                          (#{rest 25343}#
                                            #{r 25603}#
                                            #{req 25472}#
                                            (reverse #{ropt 25473}#)
                                            '()))
                                        #{tmp 25571}#)
                                      (syntax-violation
                                        'lambda*
                                        "invalid optional argument list"
                                        #{orig-args 25339}#
                                        #{args 25471}#)))))))))))))))
          (#{key 25342}#
            (lambda (#{args 25622}#
                     #{req 25623}#
                     #{opt 25624}#
                     #{rkey 25625}#)
              (let ((#{tmp 25627}# ($sc-dispatch #{args 25622}# '())))
                (if #{tmp 25627}#
                  (@apply
                    (lambda ()
                      (#{check 25344}#
                        #{req 25623}#
                        #{opt 25624}#
                        #f
                        (cons #f (reverse #{rkey 25625}#))))
                    #{tmp 25627}#)
                  (let ((#{tmp 25633}#
                          ($sc-dispatch #{args 25622}# '(any . any))))
                    (if (if #{tmp 25633}#
                          (@apply
                            (lambda (#{a 25637}# #{b 25638}#)
                              (if (symbol? #{a 25637}#)
                                #t
                                (if (if (vector? #{a 25637}#)
                                      (if (= (vector-length #{a 25637}#) 4)
                                        (eq? (vector-ref #{a 25637}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (symbol? (vector-ref #{a 25637}# 1))
                                  #f)))
                            #{tmp 25633}#)
                          #f)
                      (@apply
                        (lambda (#{a 25665}# #{b 25666}#)
                          (let ((#{tmp 25667}#
                                  (symbol->keyword
                                    (syntax->datum #{a 25665}#))))
                            (#{key 25342}#
                              #{b 25666}#
                              #{req 25623}#
                              #{opt 25624}#
                              (cons (cons #{tmp 25667}#
                                          (cons #{a 25665}#
                                                '(#(syntax-object
                                                    #f
                                                    ((top)
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(k)
                                                       #((top))
                                                       #("i2421"))
                                                     #(ribcage
                                                       #(a b)
                                                       #((top) (top))
                                                       #("i2415" "i2416"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(args req opt rkey)
                                                       #((top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                       #("i2404"
                                                         "i2405"
                                                         "i2406"
                                                         "i2407"))
                                                     #(ribcage
                                                       (check rest key opt req)
                                                       ((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                       ("i2294"
                                                        "i2292"
                                                        "i2290"
                                                        "i2288"
                                                        "i2286"))
                                                     #(ribcage
                                                       #(orig-args)
                                                       #((top))
                                                       #("i2285"))
                                                     #(ribcage
                                                       (lambda-var-list
                                                         gen-var
                                                         strip
                                                         expand-lambda-case
                                                         lambda*-formals
                                                         expand-simple-lambda
                                                         lambda-formals
                                                         ellipsis?
                                                         expand-void
                                                         eval-local-transformer
                                                         expand-local-syntax
                                                         expand-body
                                                         expand-macro
                                                         expand-application
                                                         expand-expr
                                                         expand
                                                         syntax-type
                                                         parse-when-list
                                                         expand-install-global
                                                         expand-top-sequence
                                                         expand-sequence
                                                         source-wrap
                                                         wrap
                                                         bound-id-member?
                                                         distinct-bound-ids?
                                                         valid-bound-ids?
                                                         bound-id=?
                                                         free-id=?
                                                         id-var-name
                                                         same-marks?
                                                         join-marks
                                                         join-wraps
                                                         smart-append
                                                         make-binding-wrap
                                                         extend-ribcage!
                                                         make-empty-ribcage
                                                         new-mark
                                                         anti-mark
                                                         the-anti-mark
                                                         top-marked?
                                                         top-wrap
                                                         empty-wrap
                                                         set-ribcage-labels!
                                                         set-ribcage-marks!
                                                         set-ribcage-symnames!
                                                         ribcage-labels
                                                         ribcage-marks
                                                         ribcage-symnames
                                                         ribcage?
                                                         make-ribcage
                                                         gen-labels
                                                         gen-label
                                                         make-rename
                                                         rename-marks
                                                         rename-new
                                                         rename-old
                                                         subst-rename?
                                                         wrap-subst
                                                         wrap-marks
                                                         make-wrap
                                                         id-sym-name&marks
                                                         id-sym-name
                                                         id?
                                                         nonsymbol-id?
                                                         global-extend
                                                         lookup
                                                         macros-only-env
                                                         extend-var-env
                                                         extend-env
                                                         null-env
                                                         binding-value
                                                         binding-type
                                                         make-binding
                                                         arg-check
                                                         source-annotation
                                                         no-source
                                                         set-syntax-object-module!
                                                         set-syntax-object-wrap!
                                                         set-syntax-object-expression!
                                                         syntax-object-module
                                                         syntax-object-wrap
                                                         syntax-object-expression
                                                         syntax-object?
                                                         make-syntax-object
                                                         build-lexical-var
                                                         build-letrec
                                                         build-named-let
                                                         build-let
                                                         build-sequence
                                                         build-data
                                                         build-primref
                                                         build-lambda-case
                                                         build-case-lambda
                                                         build-simple-lambda
                                                         build-global-definition
                                                         build-global-assignment
                                                         build-global-reference
                                                         analyze-variable
                                                         build-lexical-assignment
                                                         build-lexical-reference
                                                         build-dynlet
                                                         build-conditional
                                                         build-application
                                                         build-void
                                                         maybe-name-value!
                                                         decorate-source
                                                         get-global-definition-hook
                                                         put-global-definition-hook
                                                         gensym-hook
                                                         local-eval-hook
                                                         top-level-eval-hook
                                                         fx<
                                                         fx=
                                                         fx-
                                                         fx+
                                                         set-lambda-meta!
                                                         lambda-meta
                                                         lambda?
                                                         make-dynlet
                                                         make-letrec
                                                         make-let
                                                         make-lambda-case
                                                         make-lambda
                                                         make-sequence
                                                         make-application
                                                         make-conditional
                                                         make-toplevel-define
                                                         make-toplevel-set
                                                         make-toplevel-ref
                                                         make-module-set
                                                         make-module-ref
                                                         make-lexical-set
                                                         make-lexical-ref
                                                         make-primitive-ref
                                                         make-const
                                                         make-void)
                                                       ((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                       ("i467"
                                                        "i465"
                                                        "i463"
                                                        "i461"
                                                        "i459"
                                                        "i457"
                                                        "i455"
                                                        "i453"
                                                        "i451"
                                                        "i449"
                                                        "i447"
                                                        "i445"
                                                        "i443"
                                                        "i441"
                                                        "i439"
                                                        "i437"
                                                        "i435"
                                                        "i433"
                                                        "i431"
                                                        "i429"
                                                        "i427"
                                                        "i425"
                                                        "i423"
                                                        "i421"
                                                        "i419"
                                                        "i417"
                                                        "i415"
                                                        "i413"
                                                        "i411"
                                                        "i409"
                                                        "i407"
                                                        "i405"
                                                        "i403"
                                                        "i401"
                                                        "i399"
                                                        "i398"
                                                        "i396"
                                                        "i393"
                                                        "i392"
                                                        "i391"
                                                        "i389"
                                                        "i388"
                                                        "i386"
                                                        "i384"
                                                        "i382"
                                                        "i380"
                                                        "i378"
                                                        "i376"
                                                        "i374"
                                                        "i372"
                                                        "i369"
                                                        "i367"
                                                        "i366"
                                                        "i364"
                                                        "i362"
                                                        "i360"
                                                        "i358"
                                                        "i357"
                                                        "i356"
                                                        "i355"
                                                        "i353"
                                                        "i352"
                                                        "i349"
                                                        "i347"
                                                        "i345"
                                                        "i343"
                                                        "i341"
                                                        "i339"
                                                        "i337"
                                                        "i336"
                                                        "i335"
                                                        "i333"
                                                        "i331"
                                                        "i330"
                                                        "i327"
                                                        "i326"
                                                        "i324"
                                                        "i322"
                                                        "i320"
                                                        "i318"
                                                        "i316"
                                                        "i314"
                                                        "i312"
                                                        "i310"
                                                        "i308"
                                                        "i305"
                                                        "i303"
                                                        "i301"
                                                        "i299"
                                                        "i297"
                                                        "i295"
                                                        "i293"
                                                        "i291"
                                                        "i289"
                                                        "i287"
                                                        "i285"
                                                        "i283"
                                                        "i281"
                                                        "i279"
                                                        "i277"
                                                        "i275"
                                                        "i273"
                                                        "i271"
                                                        "i269"
                                                        "i267"
                                                        "i265"
                                                        "i263"
                                                        "i261"
                                                        "i260"
                                                        "i257"
                                                        "i255"
                                                        "i254"
                                                        "i253"
                                                        "i252"
                                                        "i251"
                                                        "i249"
                                                        "i247"
                                                        "i245"
                                                        "i242"
                                                        "i240"
                                                        "i238"
                                                        "i236"
                                                        "i234"
                                                        "i232"
                                                        "i230"
                                                        "i228"
                                                        "i226"
                                                        "i224"
                                                        "i222"
                                                        "i220"
                                                        "i218"
                                                        "i216"
                                                        "i214"
                                                        "i212"
                                                        "i210"
                                                        "i208"))
                                                     #(ribcage
                                                       (define-structure
                                                         define-expansion-accessors
                                                         define-expansion-constructors)
                                                       ((top) (top) (top))
                                                       ("i46" "i45" "i44")))
                                                    (hygiene guile)))))
                                    #{rkey 25625}#))))
                        #{tmp 25633}#)
                      (let ((#{tmp 25670}#
                              ($sc-dispatch
                                #{args 25622}#
                                '((any any) . any))))
                        (if (if #{tmp 25670}#
                              (@apply
                                (lambda (#{a 25674}#
                                         #{init 25675}#
                                         #{b 25676}#)
                                  (if (symbol? #{a 25674}#)
                                    #t
                                    (if (if (vector? #{a 25674}#)
                                          (if (= (vector-length #{a 25674}#) 4)
                                            (eq? (vector-ref #{a 25674}# 0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (symbol? (vector-ref #{a 25674}# 1))
                                      #f)))
                                #{tmp 25670}#)
                              #f)
                          (@apply
                            (lambda (#{a 25703}# #{init 25704}# #{b 25705}#)
                              (let ((#{tmp 25706}#
                                      (symbol->keyword
                                        (syntax->datum #{a 25703}#))))
                                (#{key 25342}#
                                  #{b 25705}#
                                  #{req 25623}#
                                  #{opt 25624}#
                                  (cons (list #{tmp 25706}#
                                              #{a 25703}#
                                              #{init 25704}#)
                                        #{rkey 25625}#))))
                            #{tmp 25670}#)
                          (let ((#{tmp 25709}#
                                  ($sc-dispatch
                                    #{args 25622}#
                                    '((any any any) . any))))
                            (if (if #{tmp 25709}#
                                  (@apply
                                    (lambda (#{a 25713}#
                                             #{init 25714}#
                                             #{k 25715}#
                                             #{b 25716}#)
                                      (if (if (symbol? #{a 25713}#)
                                            #t
                                            (if (if (vector? #{a 25713}#)
                                                  (if (= (vector-length
                                                           #{a 25713}#)
                                                         4)
                                                    (eq? (vector-ref
                                                           #{a 25713}#
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (symbol?
                                                (vector-ref #{a 25713}# 1))
                                              #f))
                                        (keyword? (syntax->datum #{k 25715}#))
                                        #f))
                                    #{tmp 25709}#)
                                  #f)
                              (@apply
                                (lambda (#{a 25743}#
                                         #{init 25744}#
                                         #{k 25745}#
                                         #{b 25746}#)
                                  (#{key 25342}#
                                    #{b 25746}#
                                    #{req 25623}#
                                    #{opt 25624}#
                                    (cons (list #{k 25745}#
                                                #{a 25743}#
                                                #{init 25744}#)
                                          #{rkey 25625}#)))
                                #{tmp 25709}#)
                              (let ((#{tmp 25747}#
                                      ($sc-dispatch #{args 25622}# '(any))))
                                (if (if #{tmp 25747}#
                                      (@apply
                                        (lambda (#{aok 25751}#)
                                          (eq? (syntax->datum #{aok 25751}#)
                                               #:allow-other-keys))
                                        #{tmp 25747}#)
                                      #f)
                                  (@apply
                                    (lambda (#{aok 25752}#)
                                      (#{check 25344}#
                                        #{req 25623}#
                                        #{opt 25624}#
                                        #f
                                        (cons #t (reverse #{rkey 25625}#))))
                                    #{tmp 25747}#)
                                  (let ((#{tmp 25755}#
                                          ($sc-dispatch
                                            #{args 25622}#
                                            '(any any any))))
                                    (if (if #{tmp 25755}#
                                          (@apply
                                            (lambda (#{aok 25759}#
                                                     #{a 25760}#
                                                     #{b 25761}#)
                                              (if (eq? (syntax->datum
                                                         #{aok 25759}#)
                                                       #:allow-other-keys)
                                                (eq? (syntax->datum
                                                       #{a 25760}#)
                                                     #:rest)
                                                #f))
                                            #{tmp 25755}#)
                                          #f)
                                      (@apply
                                        (lambda (#{aok 25762}#
                                                 #{a 25763}#
                                                 #{b 25764}#)
                                          (#{rest 25343}#
                                            #{b 25764}#
                                            #{req 25623}#
                                            #{opt 25624}#
                                            (cons #t
                                                  (reverse #{rkey 25625}#))))
                                        #{tmp 25755}#)
                                      (let ((#{tmp 25767}#
                                              ($sc-dispatch
                                                #{args 25622}#
                                                '(any . any))))
                                        (if (if #{tmp 25767}#
                                              (@apply
                                                (lambda (#{aok 25771}#
                                                         #{r 25772}#)
                                                  (if (eq? (syntax->datum
                                                             #{aok 25771}#)
                                                           #:allow-other-keys)
                                                    (if (symbol? #{r 25772}#)
                                                      #t
                                                      (if (if (vector?
                                                                #{r 25772}#)
                                                            (if (= (vector-length
                                                                     #{r 25772}#)
                                                                   4)
                                                              (eq? (vector-ref
                                                                     #{r 25772}#
                                                                     0)
                                                                   'syntax-object)
                                                              #f)
                                                            #f)
                                                        (symbol?
                                                          (vector-ref
                                                            #{r 25772}#
                                                            1))
                                                        #f))
                                                    #f))
                                                #{tmp 25767}#)
                                              #f)
                                          (@apply
                                            (lambda (#{aok 25799}# #{r 25800}#)
                                              (#{rest 25343}#
                                                #{r 25800}#
                                                #{req 25623}#
                                                #{opt 25624}#
                                                (cons #t
                                                      (reverse
                                                        #{rkey 25625}#))))
                                            #{tmp 25767}#)
                                          (let ((#{tmp 25803}#
                                                  ($sc-dispatch
                                                    #{args 25622}#
                                                    '(any any))))
                                            (if (if #{tmp 25803}#
                                                  (@apply
                                                    (lambda (#{a 25807}#
                                                             #{b 25808}#)
                                                      (eq? (syntax->datum
                                                             #{a 25807}#)
                                                           #:rest))
                                                    #{tmp 25803}#)
                                                  #f)
                                              (@apply
                                                (lambda (#{a 25809}#
                                                         #{b 25810}#)
                                                  (#{rest 25343}#
                                                    #{b 25810}#
                                                    #{req 25623}#
                                                    #{opt 25624}#
                                                    (cons #f
                                                          (reverse
                                                            #{rkey 25625}#))))
                                                #{tmp 25803}#)
                                              (let ((#{tmp 25813}#
                                                      (list #{args 25622}#)))
                                                (if (@apply
                                                      (lambda (#{r 25815}#)
                                                        (if (symbol?
                                                              #{r 25815}#)
                                                          #t
                                                          (if (if (vector?
                                                                    #{r 25815}#)
                                                                (if (= (vector-length
                                                                         #{r 25815}#)
                                                                       4)
                                                                  (eq? (vector-ref
                                                                         #{r 25815}#
                                                                         0)
                                                                       'syntax-object)
                                                                  #f)
                                                                #f)
                                                            (symbol?
                                                              (vector-ref
                                                                #{r 25815}#
                                                                1))
                                                            #f)))
                                                      #{tmp 25813}#)
                                                  (@apply
                                                    (lambda (#{r 25845}#)
                                                      (#{rest 25343}#
                                                        #{r 25845}#
                                                        #{req 25623}#
                                                        #{opt 25624}#
                                                        (cons #f
                                                              (reverse
                                                                #{rkey 25625}#))))
                                                    #{tmp 25813}#)
                                                  (syntax-violation
                                                    'lambda*
                                                    "invalid keyword argument list"
                                                    #{orig-args 25339}#
                                                    #{args 25622}#)))))))))))))))))))))
          (#{rest 25343}#
            (lambda (#{args 25873}#
                     #{req 25874}#
                     #{opt 25875}#
                     #{kw 25876}#)
              (let ((#{tmp 25878}# (list #{args 25873}#)))
                (if (@apply
                      (lambda (#{r 25880}#)
                        (if (symbol? #{r 25880}#)
                          #t
                          (if (if (vector? #{r 25880}#)
                                (if (= (vector-length #{r 25880}#) 4)
                                  (eq? (vector-ref #{r 25880}# 0)
                                       'syntax-object)
                                  #f)
                                #f)
                            (symbol? (vector-ref #{r 25880}# 1))
                            #f)))
                      #{tmp 25878}#)
                  (@apply
                    (lambda (#{r 25910}#)
                      (#{check 25344}#
                        #{req 25874}#
                        #{opt 25875}#
                        #{r 25910}#
                        #{kw 25876}#))
                    #{tmp 25878}#)
                  (syntax-violation
                    'lambda*
                    "invalid rest argument"
                    #{orig-args 25339}#
                    #{args 25873}#)))))
          (#{check 25344}#
            (lambda (#{req 25914}#
                     #{opt 25915}#
                     #{rest 25916}#
                     #{kw 25917}#)
              (if (#{distinct-bound-ids? 4325}#
                    (append
                      #{req 25914}#
                      (map car #{opt 25915}#)
                      (if #{rest 25916}# (list #{rest 25916}#) '())
                      (if (pair? #{kw 25917}#)
                        (map cadr (cdr #{kw 25917}#))
                        '())))
                (values
                  #{req 25914}#
                  #{opt 25915}#
                  #{rest 25916}#
                  #{kw 25917}#)
                (syntax-violation
                  'lambda*
                  "duplicate identifier in argument list"
                  #{orig-args 25339}#)))))
         (#{req 25340}# #{orig-args 25339}# '()))))
   (#{expand-lambda-case 4346}#
     (lambda (#{e 26033}#
              #{r 26034}#
              #{w 26035}#
              #{s 26036}#
              #{mod 26037}#
              #{get-formals 26038}#
              #{clauses 26039}#)
       (letrec*
         ((#{parse-req 26040}#
            (lambda (#{req 26173}#
                     #{opt 26174}#
                     #{rest 26175}#
                     #{kw 26176}#
                     #{body 26177}#)
              (let ((#{vars 26178}#
                      (map #{gen-var 4348}# #{req 26173}#))
                    (#{labels 26179}#
                      (#{gen-labels 4305}# #{req 26173}#)))
                (let ((#{r* 26180}#
                        (#{extend-var-env 4297}#
                          #{labels 26179}#
                          #{vars 26178}#
                          #{r 26034}#))
                      (#{w* 26181}#
                        (#{make-binding-wrap 4316}#
                          #{req 26173}#
                          #{labels 26179}#
                          #{w 26035}#)))
                  (#{parse-opt 26041}#
                    (map syntax->datum #{req 26173}#)
                    #{opt 26174}#
                    #{rest 26175}#
                    #{kw 26176}#
                    #{body 26177}#
                    (reverse #{vars 26178}#)
                    #{r* 26180}#
                    #{w* 26181}#
                    '()
                    '())))))
          (#{parse-opt 26041}#
            (lambda (#{req 26395}#
                     #{opt 26396}#
                     #{rest 26397}#
                     #{kw 26398}#
                     #{body 26399}#
                     #{vars 26400}#
                     #{r* 26401}#
                     #{w* 26402}#
                     #{out 26403}#
                     #{inits 26404}#)
              (if (pair? #{opt 26396}#)
                (let ((#{tmp 26405}# (car #{opt 26396}#)))
                  (let ((#{tmp 26406}#
                          ($sc-dispatch #{tmp 26405}# '(any any))))
                    (if #{tmp 26406}#
                      (@apply
                        (lambda (#{id 26408}# #{i 26409}#)
                          (let ((#{v 26410}#
                                  (let ((#{id 26418}#
                                          (if (if (vector? #{id 26408}#)
                                                (if (= (vector-length
                                                         #{id 26408}#)
                                                       4)
                                                  (eq? (vector-ref
                                                         #{id 26408}#
                                                         0)
                                                       'syntax-object)
                                                  #f)
                                                #f)
                                            (vector-ref #{id 26408}# 1)
                                            #{id 26408}#)))
                                    (gensym
                                      (string-append
                                        (symbol->string #{id 26418}#)
                                        " ")))))
                            (let ((#{l 26411}#
                                    (#{gen-labels 4305}# (list #{v 26410}#))))
                              (let ((#{r** 26412}#
                                      (#{extend-var-env 4297}#
                                        #{l 26411}#
                                        (list #{v 26410}#)
                                        #{r* 26401}#)))
                                (let ((#{w** 26413}#
                                        (#{make-binding-wrap 4316}#
                                          (list #{id 26408}#)
                                          #{l 26411}#
                                          #{w* 26402}#)))
                                  (#{parse-opt 26041}#
                                    #{req 26395}#
                                    (cdr #{opt 26396}#)
                                    #{rest 26397}#
                                    #{kw 26398}#
                                    #{body 26399}#
                                    (cons #{v 26410}# #{vars 26400}#)
                                    #{r** 26412}#
                                    #{w** 26413}#
                                    (cons (syntax->datum #{id 26408}#)
                                          #{out 26403}#)
                                    (cons (#{expand 4334}#
                                            #{i 26409}#
                                            #{r* 26401}#
                                            #{w* 26402}#
                                            #{mod 26037}#)
                                          #{inits 26404}#)))))))
                        #{tmp 26406}#)
                      (syntax-violation
                        #f
                        "source expression failed to match any pattern"
                        #{tmp 26405}#))))
                (if #{rest 26397}#
                  (let ((#{v 26683}#
                          (let ((#{id 26693}#
                                  (if (if (vector? #{rest 26397}#)
                                        (if (= (vector-length #{rest 26397}#)
                                               4)
                                          (eq? (vector-ref #{rest 26397}# 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (vector-ref #{rest 26397}# 1)
                                    #{rest 26397}#)))
                            (gensym
                              (string-append
                                (symbol->string #{id 26693}#)
                                " ")))))
                    (let ((#{l 26684}#
                            (#{gen-labels 4305}# (list #{v 26683}#))))
                      (let ((#{r* 26685}#
                              (#{extend-var-env 4297}#
                                #{l 26684}#
                                (list #{v 26683}#)
                                #{r* 26401}#)))
                        (let ((#{w* 26686}#
                                (#{make-binding-wrap 4316}#
                                  (list #{rest 26397}#)
                                  #{l 26684}#
                                  #{w* 26402}#)))
                          (#{parse-kw 26042}#
                            #{req 26395}#
                            (if (pair? #{out 26403}#)
                              (reverse #{out 26403}#)
                              #f)
                            (syntax->datum #{rest 26397}#)
                            (if (pair? #{kw 26398}#)
                              (cdr #{kw 26398}#)
                              #{kw 26398}#)
                            #{body 26399}#
                            (cons #{v 26683}# #{vars 26400}#)
                            #{r* 26685}#
                            #{w* 26686}#
                            (if (pair? #{kw 26398}#) (car #{kw 26398}#) #f)
                            '()
                            #{inits 26404}#)))))
                  (#{parse-kw 26042}#
                    #{req 26395}#
                    (if (pair? #{out 26403}#)
                      (reverse #{out 26403}#)
                      #f)
                    #f
                    (if (pair? #{kw 26398}#)
                      (cdr #{kw 26398}#)
                      #{kw 26398}#)
                    #{body 26399}#
                    #{vars 26400}#
                    #{r* 26401}#
                    #{w* 26402}#
                    (if (pair? #{kw 26398}#) (car #{kw 26398}#) #f)
                    '()
                    #{inits 26404}#)))))
          (#{parse-kw 26042}#
            (lambda (#{req 26891}#
                     #{opt 26892}#
                     #{rest 26893}#
                     #{kw 26894}#
                     #{body 26895}#
                     #{vars 26896}#
                     #{r* 26897}#
                     #{w* 26898}#
                     #{aok 26899}#
                     #{out 26900}#
                     #{inits 26901}#)
              (if (pair? #{kw 26894}#)
                (let ((#{tmp 26902}# (car #{kw 26894}#)))
                  (let ((#{tmp 26903}#
                          ($sc-dispatch #{tmp 26902}# '(any any any))))
                    (if #{tmp 26903}#
                      (@apply
                        (lambda (#{k 26905}# #{id 26906}# #{i 26907}#)
                          (let ((#{v 26908}#
                                  (let ((#{id 26916}#
                                          (if (if (vector? #{id 26906}#)
                                                (if (= (vector-length
                                                         #{id 26906}#)
                                                       4)
                                                  (eq? (vector-ref
                                                         #{id 26906}#
                                                         0)
                                                       'syntax-object)
                                                  #f)
                                                #f)
                                            (vector-ref #{id 26906}# 1)
                                            #{id 26906}#)))
                                    (gensym
                                      (string-append
                                        (symbol->string #{id 26916}#)
                                        " ")))))
                            (let ((#{l 26909}#
                                    (#{gen-labels 4305}# (list #{v 26908}#))))
                              (let ((#{r** 26910}#
                                      (#{extend-var-env 4297}#
                                        #{l 26909}#
                                        (list #{v 26908}#)
                                        #{r* 26897}#)))
                                (let ((#{w** 26911}#
                                        (#{make-binding-wrap 4316}#
                                          (list #{id 26906}#)
                                          #{l 26909}#
                                          #{w* 26898}#)))
                                  (#{parse-kw 26042}#
                                    #{req 26891}#
                                    #{opt 26892}#
                                    #{rest 26893}#
                                    (cdr #{kw 26894}#)
                                    #{body 26895}#
                                    (cons #{v 26908}# #{vars 26896}#)
                                    #{r** 26910}#
                                    #{w** 26911}#
                                    #{aok 26899}#
                                    (cons (list (syntax->datum #{k 26905}#)
                                                (syntax->datum #{id 26906}#)
                                                #{v 26908}#)
                                          #{out 26900}#)
                                    (cons (#{expand 4334}#
                                            #{i 26907}#
                                            #{r* 26897}#
                                            #{w* 26898}#
                                            #{mod 26037}#)
                                          #{inits 26901}#)))))))
                        #{tmp 26903}#)
                      (syntax-violation
                        #f
                        "source expression failed to match any pattern"
                        #{tmp 26902}#))))
                (#{parse-body 26043}#
                  #{req 26891}#
                  #{opt 26892}#
                  #{rest 26893}#
                  (if (if #{aok 26899}#
                        #{aok 26899}#
                        (pair? #{out 26900}#))
                    (cons #{aok 26899}# (reverse #{out 26900}#))
                    #f)
                  #{body 26895}#
                  (reverse #{vars 26896}#)
                  #{r* 26897}#
                  #{w* 26898}#
                  (reverse #{inits 26901}#)
                  '()))))
          (#{parse-body 26043}#
            (lambda (#{req 27190}#
                     #{opt 27191}#
                     #{rest 27192}#
                     #{kw 27193}#
                     #{body 27194}#
                     #{vars 27195}#
                     #{r* 27196}#
                     #{w* 27197}#
                     #{inits 27198}#
                     #{meta 27199}#)
              (let ((#{tmp 27201}#
                      ($sc-dispatch
                        #{body 27194}#
                        '(any any . each-any))))
                (if (if #{tmp 27201}#
                      (@apply
                        (lambda (#{docstring 27205}# #{e1 27206}# #{e2 27207}#)
                          (string? (syntax->datum #{docstring 27205}#)))
                        #{tmp 27201}#)
                      #f)
                  (@apply
                    (lambda (#{docstring 27208}# #{e1 27209}# #{e2 27210}#)
                      (#{parse-body 26043}#
                        #{req 27190}#
                        #{opt 27191}#
                        #{rest 27192}#
                        #{kw 27193}#
                        (cons #{e1 27209}# #{e2 27210}#)
                        #{vars 27195}#
                        #{r* 27196}#
                        #{w* 27197}#
                        #{inits 27198}#
                        (append
                          #{meta 27199}#
                          (list (cons 'documentation
                                      (syntax->datum #{docstring 27208}#))))))
                    #{tmp 27201}#)
                  (let ((#{tmp 27211}#
                          ($sc-dispatch
                            #{body 27194}#
                            '(#(vector #(each (any . any))) any . each-any))))
                    (if #{tmp 27211}#
                      (@apply
                        (lambda (#{k 27215}#
                                 #{v 27216}#
                                 #{e1 27217}#
                                 #{e2 27218}#)
                          (#{parse-body 26043}#
                            #{req 27190}#
                            #{opt 27191}#
                            #{rest 27192}#
                            #{kw 27193}#
                            (cons #{e1 27217}# #{e2 27218}#)
                            #{vars 27195}#
                            #{r* 27196}#
                            #{w* 27197}#
                            #{inits 27198}#
                            (append
                              #{meta 27199}#
                              (syntax->datum
                                (map cons #{k 27215}# #{v 27216}#)))))
                        #{tmp 27211}#)
                      (let ((#{tmp 27219}#
                              ($sc-dispatch #{body 27194}# '(any . each-any))))
                        (if #{tmp 27219}#
                          (@apply
                            (lambda (#{e1 27223}# #{e2 27224}#)
                              (values
                                #{meta 27199}#
                                #{req 27190}#
                                #{opt 27191}#
                                #{rest 27192}#
                                #{kw 27193}#
                                #{inits 27198}#
                                #{vars 27195}#
                                (#{expand-body 4338}#
                                  (cons #{e1 27223}# #{e2 27224}#)
                                  (#{wrap 4327}#
                                    (begin
                                      (if (if (pair? #{e 26033}#)
                                            #{s 26036}#
                                            #f)
                                        (set-source-properties!
                                          #{e 26033}#
                                          #{s 26036}#))
                                      #{e 26033}#)
                                    #{w 26035}#
                                    #{mod 26037}#)
                                  #{r* 27196}#
                                  #{w* 27197}#
                                  #{mod 26037}#)))
                            #{tmp 27219}#)
                          (syntax-violation
                            #f
                            "source expression failed to match any pattern"
                            #{body 27194}#))))))))))
         (let ((#{tmp 26045}#
                 ($sc-dispatch #{clauses 26039}# '())))
           (if #{tmp 26045}#
             (@apply
               (lambda () (values '() #f))
               #{tmp 26045}#)
             (let ((#{tmp 26049}#
                     ($sc-dispatch
                       #{clauses 26039}#
                       '((any any . each-any)
                         .
                         #(each (any any . each-any))))))
               (if #{tmp 26049}#
                 (@apply
                   (lambda (#{args 26053}#
                            #{e1 26054}#
                            #{e2 26055}#
                            #{args* 26056}#
                            #{e1* 26057}#
                            #{e2* 26058}#)
                     (call-with-values
                       (lambda ()
                         (#{get-formals 26038}# #{args 26053}#))
                       (lambda (#{req 26059}#
                                #{opt 26060}#
                                #{rest 26061}#
                                #{kw 26062}#)
                         (call-with-values
                           (lambda ()
                             (#{parse-req 26040}#
                               #{req 26059}#
                               #{opt 26060}#
                               #{rest 26061}#
                               #{kw 26062}#
                               (cons #{e1 26054}# #{e2 26055}#)))
                           (lambda (#{meta 26129}#
                                    #{req 26130}#
                                    #{opt 26131}#
                                    #{rest 26132}#
                                    #{kw 26133}#
                                    #{inits 26134}#
                                    #{vars 26135}#
                                    #{body 26136}#)
                             (call-with-values
                               (lambda ()
                                 (#{expand-lambda-case 4346}#
                                   #{e 26033}#
                                   #{r 26034}#
                                   #{w 26035}#
                                   #{s 26036}#
                                   #{mod 26037}#
                                   #{get-formals 26038}#
                                   (map (lambda (#{tmp 2764 26137}#
                                                 #{tmp 2763 26138}#
                                                 #{tmp 2762 26139}#)
                                          (cons #{tmp 2762 26139}#
                                                (cons #{tmp 2763 26138}#
                                                      #{tmp 2764 26137}#)))
                                        #{e2* 26058}#
                                        #{e1* 26057}#
                                        #{args* 26056}#)))
                               (lambda (#{meta* 26140}# #{else* 26141}#)
                                 (values
                                   (append #{meta 26129}# #{meta* 26140}#)
                                   (make-struct/no-tail
                                     (vector-ref %expanded-vtables 14)
                                     #{s 26036}#
                                     #{req 26130}#
                                     #{opt 26131}#
                                     #{rest 26132}#
                                     #{kw 26133}#
                                     #{inits 26134}#
                                     #{vars 26135}#
                                     #{body 26136}#
                                     #{else* 26141}#)))))))))
                   #{tmp 26049}#)
                 (syntax-violation
                   #f
                   "source expression failed to match any pattern"
                   #{clauses 26039}#))))))))
   (#{strip 4347}#
     (lambda (#{x 27261}# #{w 27262}#)
       (if (memq 'top (car #{w 27262}#))
         #{x 27261}#
         (letrec*
           ((#{f 27263}#
              (lambda (#{x 27266}#)
                (if (if (vector? #{x 27266}#)
                      (if (= (vector-length #{x 27266}#) 4)
                        (eq? (vector-ref #{x 27266}# 0) 'syntax-object)
                        #f)
                      #f)
                  (#{strip 4347}#
                    (vector-ref #{x 27266}# 1)
                    (vector-ref #{x 27266}# 2))
                  (if (pair? #{x 27266}#)
                    (let ((#{a 27285}# (#{f 27263}# (car #{x 27266}#)))
                          (#{d 27286}# (#{f 27263}# (cdr #{x 27266}#))))
                      (if (if (eq? #{a 27285}# (car #{x 27266}#))
                            (eq? #{d 27286}# (cdr #{x 27266}#))
                            #f)
                        #{x 27266}#
                        (cons #{a 27285}# #{d 27286}#)))
                    (if (vector? #{x 27266}#)
                      (let ((#{old 27289}# (vector->list #{x 27266}#)))
                        (let ((#{new 27290}# (map #{f 27263}# #{old 27289}#)))
                          (letrec*
                            ((#{lp 27291}#
                               (lambda (#{l1 27367}# #{l2 27368}#)
                                 (if (null? #{l1 27367}#)
                                   #{x 27266}#
                                   (if (eq? (car #{l1 27367}#)
                                            (car #{l2 27368}#))
                                     (#{lp 27291}#
                                       (cdr #{l1 27367}#)
                                       (cdr #{l2 27368}#))
                                     (list->vector #{new 27290}#))))))
                            (#{lp 27291}# #{old 27289}# #{new 27290}#))))
                      #{x 27266}#))))))
           (#{f 27263}# #{x 27261}#)))))
   (#{gen-var 4348}#
     (lambda (#{id 26185}#)
       (let ((#{id 26186}#
               (if (if (vector? #{id 26185}#)
                     (if (= (vector-length #{id 26185}#) 4)
                       (eq? (vector-ref #{id 26185}# 0) 'syntax-object)
                       #f)
                     #f)
                 (vector-ref #{id 26185}# 1)
                 #{id 26185}#)))
         (gensym
           (string-append (symbol->string #{id 26186}#) " "))))))
  (begin
    (module-define!
      (current-module)
      'letrec-syntax
      (make-syntax-transformer
        'letrec-syntax
        'local-syntax
        #t))
    (module-define!
      (current-module)
      'let-syntax
      (make-syntax-transformer
        'let-syntax
        'local-syntax
        #f))
    (#{global-extend 4300}#
      'core
      'fluid-let-syntax
      (lambda (#{e 4469}#
               #{r 4470}#
               #{w 4471}#
               #{s 4472}#
               #{mod 4473}#)
        (let ((#{tmp 4475}#
                ($sc-dispatch
                  #{e 4469}#
                  '(_ #(each (any any)) any . each-any))))
          (if (if #{tmp 4475}#
                (@apply
                  (lambda (#{var 4479}#
                           #{val 4480}#
                           #{e1 4481}#
                           #{e2 4482}#)
                    (#{valid-bound-ids? 4324}# #{var 4479}#))
                  #{tmp 4475}#)
                #f)
            (@apply
              (lambda (#{var 4560}#
                       #{val 4561}#
                       #{e1 4562}#
                       #{e2 4563}#)
                (let ((#{names 4564}#
                        (map (lambda (#{x 4754}#)
                               (#{id-var-name 4321}# #{x 4754}# #{w 4471}#))
                             #{var 4560}#)))
                  (begin
                    (for-each
                      (lambda (#{id 4565}# #{n 4566}#)
                        (let ((#{atom-key 4567}#
                                (car (let ((#{t 4691}#
                                             (assq #{n 4566}# #{r 4470}#)))
                                       (if #{t 4691}#
                                         (cdr #{t 4691}#)
                                         (if (symbol? #{n 4566}#)
                                           (let ((#{t 4696}#
                                                   (begin
                                                     (if (if (not #{mod 4473}#)
                                                           (current-module)
                                                           #f)
                                                       (warn "module system is booted, we should have a module"
                                                             #{n 4566}#))
                                                     (let ((#{v 4733}#
                                                             (module-variable
                                                               (if #{mod 4473}#
                                                                 (resolve-module
                                                                   (cdr #{mod 4473}#))
                                                                 (current-module))
                                                               #{n 4566}#)))
                                                       (if #{v 4733}#
                                                         (if (variable-bound?
                                                               #{v 4733}#)
                                                           (let ((#{val 4742}#
                                                                   (variable-ref
                                                                     #{v 4733}#)))
                                                             (if (macro?
                                                                   #{val 4742}#)
                                                               (if (macro-type
                                                                     #{val 4742}#)
                                                                 (cons (macro-type
                                                                         #{val 4742}#)
                                                                       (macro-binding
                                                                         #{val 4742}#))
                                                                 #f)
                                                               #f))
                                                           #f)
                                                         #f)))))
                                             (if #{t 4696}#
                                               #{t 4696}#
                                               '(global)))
                                           '(displaced-lexical)))))))
                          (if (let ((#{t 4600}# #{atom-key 4567}#))
                                (eqv? #{t 4600}# 'displaced-lexical))
                            (syntax-violation
                              'fluid-let-syntax
                              "identifier out of context"
                              #{e 4469}#
                              (#{wrap 4327}#
                                (begin
                                  (if (if (pair? #{id 4565}#) #{s 4472}# #f)
                                    (set-source-properties!
                                      #{id 4565}#
                                      #{s 4472}#))
                                  #{id 4565}#)
                                #{w 4471}#
                                #{mod 4473}#)))))
                      #{var 4560}#
                      #{names 4564}#)
                    (#{expand-body 4338}#
                      (cons #{e1 4562}# #{e2 4563}#)
                      (#{wrap 4327}#
                        (begin
                          (if (if (pair? #{e 4469}#) #{s 4472}# #f)
                            (set-source-properties! #{e 4469}# #{s 4472}#))
                          #{e 4469}#)
                        #{w 4471}#
                        #{mod 4473}#)
                      (#{extend-env 4296}#
                        #{names 4564}#
                        (let ((#{trans-r 4840}#
                                (#{macros-only-env 4298}# #{r 4470}#)))
                          (map (lambda (#{x 4841}#)
                                 (cons 'macro
                                       (#{eval-local-transformer 4340}#
                                         (#{expand 4334}#
                                           #{x 4841}#
                                           #{trans-r 4840}#
                                           #{w 4471}#
                                           #{mod 4473}#)
                                         #{mod 4473}#)))
                               #{val 4561}#))
                        #{r 4470}#)
                      #{w 4471}#
                      #{mod 4473}#))))
              #{tmp 4475}#)
            (syntax-violation
              'fluid-let-syntax
              "bad syntax"
              (#{wrap 4327}#
                (begin
                  (if (if (pair? #{e 4469}#) #{s 4472}# #f)
                    (set-source-properties! #{e 4469}# #{s 4472}#))
                  #{e 4469}#)
                #{w 4471}#
                #{mod 4473}#))))))
    (module-define!
      (current-module)
      'quote
      (make-syntax-transformer
        'quote
        'core
        (lambda (#{e 5050}#
                 #{r 5051}#
                 #{w 5052}#
                 #{s 5053}#
                 #{mod 5054}#)
          (let ((#{tmp 5056}# ($sc-dispatch #{e 5050}# '(_ any))))
            (if #{tmp 5056}#
              (@apply
                (lambda (#{e 5059}#)
                  (let ((#{exp 5063}#
                          (#{strip 4347}# #{e 5059}# #{w 5052}#)))
                    (make-struct/no-tail
                      (vector-ref %expanded-vtables 1)
                      #{s 5053}#
                      #{exp 5063}#)))
                #{tmp 5056}#)
              (syntax-violation
                'quote
                "bad syntax"
                (#{wrap 4327}#
                  (begin
                    (if (if (pair? #{e 5050}#) #{s 5053}# #f)
                      (set-source-properties! #{e 5050}# #{s 5053}#))
                    #{e 5050}#)
                  #{w 5052}#
                  #{mod 5054}#)))))))
    (#{global-extend 4300}#
      'core
      'syntax
      (letrec*
        ((#{gen-syntax 5290}#
           (lambda (#{src 5392}#
                    #{e 5393}#
                    #{r 5394}#
                    #{maps 5395}#
                    #{ellipsis? 5396}#
                    #{mod 5397}#)
             (if (if (symbol? #{e 5393}#)
                   #t
                   (if (if (vector? #{e 5393}#)
                         (if (= (vector-length #{e 5393}#) 4)
                           (eq? (vector-ref #{e 5393}# 0) 'syntax-object)
                           #f)
                         #f)
                     (symbol? (vector-ref #{e 5393}# 1))
                     #f))
               (let ((#{label 5424}#
                       (#{id-var-name 4321}# #{e 5393}# '(()))))
                 (let ((#{b 5425}#
                         (let ((#{t 5562}# (assq #{label 5424}# #{r 5394}#)))
                           (if #{t 5562}#
                             (cdr #{t 5562}#)
                             (if (symbol? #{label 5424}#)
                               (let ((#{t 5567}#
                                       (begin
                                         (if (if (not #{mod 5397}#)
                                               (current-module)
                                               #f)
                                           (warn "module system is booted, we should have a module"
                                                 #{label 5424}#))
                                         (let ((#{v 5604}#
                                                 (module-variable
                                                   (if #{mod 5397}#
                                                     (resolve-module
                                                       (cdr #{mod 5397}#))
                                                     (current-module))
                                                   #{label 5424}#)))
                                           (if #{v 5604}#
                                             (if (variable-bound? #{v 5604}#)
                                               (let ((#{val 5613}#
                                                       (variable-ref
                                                         #{v 5604}#)))
                                                 (if (macro? #{val 5613}#)
                                                   (if (macro-type
                                                         #{val 5613}#)
                                                     (cons (macro-type
                                                             #{val 5613}#)
                                                           (macro-binding
                                                             #{val 5613}#))
                                                     #f)
                                                   #f))
                                               #f)
                                             #f)))))
                                 (if #{t 5567}# #{t 5567}# '(global)))
                               '(displaced-lexical))))))
                   (if (eq? (car #{b 5425}#) 'syntax)
                     (call-with-values
                       (lambda ()
                         (let ((#{var.lev 5458}# (cdr #{b 5425}#)))
                           (#{gen-ref 5291}#
                             #{src 5392}#
                             (car #{var.lev 5458}#)
                             (cdr #{var.lev 5458}#)
                             #{maps 5395}#)))
                       (lambda (#{var 5554}# #{maps 5555}#)
                         (values (list 'ref #{var 5554}#) #{maps 5555}#)))
                     (if (#{ellipsis? 5396}# #{e 5393}#)
                       (syntax-violation
                         'syntax
                         "misplaced ellipsis"
                         #{src 5392}#)
                       (values (list 'quote #{e 5393}#) #{maps 5395}#)))))
               (let ((#{tmp 5625}#
                       ($sc-dispatch #{e 5393}# '(any any))))
                 (if (if #{tmp 5625}#
                       (@apply
                         (lambda (#{dots 5629}# #{e 5630}#)
                           (#{ellipsis? 5396}# #{dots 5629}#))
                         #{tmp 5625}#)
                       #f)
                   (@apply
                     (lambda (#{dots 5631}# #{e 5632}#)
                       (#{gen-syntax 5290}#
                         #{src 5392}#
                         #{e 5632}#
                         #{r 5394}#
                         #{maps 5395}#
                         (lambda (#{x 5633}#) #f)
                         #{mod 5397}#))
                     #{tmp 5625}#)
                   (let ((#{tmp 5634}#
                           ($sc-dispatch #{e 5393}# '(any any . any))))
                     (if (if #{tmp 5634}#
                           (@apply
                             (lambda (#{x 5638}# #{dots 5639}# #{y 5640}#)
                               (#{ellipsis? 5396}# #{dots 5639}#))
                             #{tmp 5634}#)
                           #f)
                       (@apply
                         (lambda (#{x 5641}# #{dots 5642}# #{y 5643}#)
                           (letrec*
                             ((#{f 5644}#
                                (lambda (#{y 5652}# #{k 5653}#)
                                  (let ((#{tmp 5655}#
                                          ($sc-dispatch
                                            #{y 5652}#
                                            '(any . any))))
                                    (if (if #{tmp 5655}#
                                          (@apply
                                            (lambda (#{dots 5659}# #{y 5660}#)
                                              (#{ellipsis? 5396}#
                                                #{dots 5659}#))
                                            #{tmp 5655}#)
                                          #f)
                                      (@apply
                                        (lambda (#{dots 5661}# #{y 5662}#)
                                          (#{f 5644}#
                                            #{y 5662}#
                                            (lambda (#{maps 5663}#)
                                              (call-with-values
                                                (lambda ()
                                                  (#{k 5653}#
                                                    (cons '() #{maps 5663}#)))
                                                (lambda (#{x 5664}#
                                                         #{maps 5665}#)
                                                  (if (null? (car #{maps 5665}#))
                                                    (syntax-violation
                                                      'syntax
                                                      "extra ellipsis"
                                                      #{src 5392}#)
                                                    (values
                                                      (let ((#{map-env 5669}#
                                                              (car #{maps 5665}#)))
                                                        (list 'apply
                                                              '(primitive
                                                                 append)
                                                              (#{gen-map 5293}#
                                                                #{x 5664}#
                                                                #{map-env 5669}#)))
                                                      (cdr #{maps 5665}#))))))))
                                        #{tmp 5655}#)
                                      (call-with-values
                                        (lambda ()
                                          (#{gen-syntax 5290}#
                                            #{src 5392}#
                                            #{y 5652}#
                                            #{r 5394}#
                                            #{maps 5395}#
                                            #{ellipsis? 5396}#
                                            #{mod 5397}#))
                                        (lambda (#{y 5672}# #{maps 5673}#)
                                          (call-with-values
                                            (lambda ()
                                              (#{k 5653}# #{maps 5673}#))
                                            (lambda (#{x 5674}# #{maps 5675}#)
                                              (values
                                                (if (equal? #{y 5672}# ''())
                                                  #{x 5674}#
                                                  (list 'append
                                                        #{x 5674}#
                                                        #{y 5672}#))
                                                #{maps 5675}#))))))))))
                             (#{f 5644}#
                               #{y 5643}#
                               (lambda (#{maps 5647}#)
                                 (call-with-values
                                   (lambda ()
                                     (#{gen-syntax 5290}#
                                       #{src 5392}#
                                       #{x 5641}#
                                       #{r 5394}#
                                       (cons '() #{maps 5647}#)
                                       #{ellipsis? 5396}#
                                       #{mod 5397}#))
                                   (lambda (#{x 5648}# #{maps 5649}#)
                                     (if (null? (car #{maps 5649}#))
                                       (syntax-violation
                                         'syntax
                                         "extra ellipsis"
                                         #{src 5392}#)
                                       (values
                                         (#{gen-map 5293}#
                                           #{x 5648}#
                                           (car #{maps 5649}#))
                                         (cdr #{maps 5649}#)))))))))
                         #{tmp 5634}#)
                       (let ((#{tmp 5691}#
                               ($sc-dispatch #{e 5393}# '(any . any))))
                         (if #{tmp 5691}#
                           (@apply
                             (lambda (#{x 5695}# #{y 5696}#)
                               (call-with-values
                                 (lambda ()
                                   (#{gen-syntax 5290}#
                                     #{src 5392}#
                                     #{x 5695}#
                                     #{r 5394}#
                                     #{maps 5395}#
                                     #{ellipsis? 5396}#
                                     #{mod 5397}#))
                                 (lambda (#{x 5697}# #{maps 5698}#)
                                   (call-with-values
                                     (lambda ()
                                       (#{gen-syntax 5290}#
                                         #{src 5392}#
                                         #{y 5696}#
                                         #{r 5394}#
                                         #{maps 5698}#
                                         #{ellipsis? 5396}#
                                         #{mod 5397}#))
                                     (lambda (#{y 5699}# #{maps 5700}#)
                                       (values
                                         (let ((#{atom-key 5705}#
                                                 (car #{y 5699}#)))
                                           (if (eqv? #{atom-key 5705}# 'quote)
                                             (if (eq? (car #{x 5697}#) 'quote)
                                               (list 'quote
                                                     (cons (car (cdr #{x 5697}#))
                                                           (car (cdr #{y 5699}#))))
                                               (if (eq? (car (cdr #{y 5699}#))
                                                        '())
                                                 (list 'list #{x 5697}#)
                                                 (list 'cons
                                                       #{x 5697}#
                                                       #{y 5699}#)))
                                             (if (eqv? #{atom-key 5705}# 'list)
                                               (cons 'list
                                                     (cons #{x 5697}#
                                                           (cdr #{y 5699}#)))
                                               (list 'cons
                                                     #{x 5697}#
                                                     #{y 5699}#))))
                                         #{maps 5700}#))))))
                             #{tmp 5691}#)
                           (let ((#{tmp 5734}#
                                   ($sc-dispatch
                                     #{e 5393}#
                                     '#(vector (any . each-any)))))
                             (if #{tmp 5734}#
                               (@apply
                                 (lambda (#{e1 5738}# #{e2 5739}#)
                                   (call-with-values
                                     (lambda ()
                                       (#{gen-syntax 5290}#
                                         #{src 5392}#
                                         (cons #{e1 5738}# #{e2 5739}#)
                                         #{r 5394}#
                                         #{maps 5395}#
                                         #{ellipsis? 5396}#
                                         #{mod 5397}#))
                                     (lambda (#{e 5740}# #{maps 5741}#)
                                       (values
                                         (if (eq? (car #{e 5740}#) 'list)
                                           (cons 'vector (cdr #{e 5740}#))
                                           (if (eq? (car #{e 5740}#) 'quote)
                                             (list 'quote
                                                   (list->vector
                                                     (car (cdr #{e 5740}#))))
                                             (list 'list->vector #{e 5740}#)))
                                         #{maps 5741}#))))
                                 #{tmp 5734}#)
                               (values
                                 (list 'quote #{e 5393}#)
                                 #{maps 5395}#))))))))))))
         (#{gen-ref 5291}#
           (lambda (#{src 5768}#
                    #{var 5769}#
                    #{level 5770}#
                    #{maps 5771}#)
             (if (= #{level 5770}# 0)
               (values #{var 5769}# #{maps 5771}#)
               (if (null? #{maps 5771}#)
                 (syntax-violation
                   'syntax
                   "missing ellipsis"
                   #{src 5768}#)
                 (call-with-values
                   (lambda ()
                     (#{gen-ref 5291}#
                       #{src 5768}#
                       #{var 5769}#
                       (#{1-}# #{level 5770}#)
                       (cdr #{maps 5771}#)))
                   (lambda (#{outer-var 5772}# #{outer-maps 5773}#)
                     (let ((#{b 5774}#
                             (assq #{outer-var 5772}# (car #{maps 5771}#))))
                       (if #{b 5774}#
                         (values (cdr #{b 5774}#) #{maps 5771}#)
                         (let ((#{inner-var 5776}#
                                 (gensym
                                   (string-append (symbol->string 'tmp) " "))))
                           (values
                             #{inner-var 5776}#
                             (cons (cons (cons #{outer-var 5772}#
                                               #{inner-var 5776}#)
                                         (car #{maps 5771}#))
                                   #{outer-maps 5773}#)))))))))))
         (#{gen-map 5293}#
           (lambda (#{e 5790}# #{map-env 5791}#)
             (let ((#{formals 5792}# (map cdr #{map-env 5791}#))
                   (#{actuals 5793}#
                     (map (lambda (#{x 5795}#)
                            (list 'ref (car #{x 5795}#)))
                          #{map-env 5791}#)))
               (if (eq? (car #{e 5790}#) 'ref)
                 (car #{actuals 5793}#)
                 (if (and-map
                       (lambda (#{x 5796}#)
                         (if (eq? (car #{x 5796}#) 'ref)
                           (memq (car (cdr #{x 5796}#)) #{formals 5792}#)
                           #f))
                       (cdr #{e 5790}#))
                   (cons 'map
                         (cons (list 'primitive (car #{e 5790}#))
                               (map (let ((#{r 5798}#
                                            (map cons
                                                 #{formals 5792}#
                                                 #{actuals 5793}#)))
                                      (lambda (#{x 5799}#)
                                        (cdr (assq (car (cdr #{x 5799}#))
                                                   #{r 5798}#))))
                                    (cdr #{e 5790}#))))
                   (cons 'map
                         (cons (list 'lambda #{formals 5792}# #{e 5790}#)
                               #{actuals 5793}#)))))))
         (#{regen 5297}#
           (lambda (#{x 5801}#)
             (let ((#{atom-key 5802}# (car #{x 5801}#)))
               (if (eqv? #{atom-key 5802}# 'ref)
                 (let ((#{name 5812}# (car (cdr #{x 5801}#)))
                       (#{var 5813}# (car (cdr #{x 5801}#))))
                   (make-struct/no-tail
                     (vector-ref %expanded-vtables 3)
                     #f
                     #{name 5812}#
                     #{var 5813}#))
                 (if (eqv? #{atom-key 5802}# 'primitive)
                   (let ((#{name 5825}# (car (cdr #{x 5801}#))))
                     (if (equal? (module-name (current-module)) '(guile))
                       (make-struct/no-tail
                         (vector-ref %expanded-vtables 7)
                         #f
                         #{name 5825}#)
                       (make-struct/no-tail
                         (vector-ref %expanded-vtables 5)
                         #f
                         '(guile)
                         #{name 5825}#
                         #f)))
                   (if (eqv? #{atom-key 5802}# 'quote)
                     (let ((#{exp 5843}# (car (cdr #{x 5801}#))))
                       (make-struct/no-tail
                         (vector-ref %expanded-vtables 1)
                         #f
                         #{exp 5843}#))
                     (if (eqv? #{atom-key 5802}# 'lambda)
                       (if (list? (car (cdr #{x 5801}#)))
                         (let ((#{req 5854}# (car (cdr #{x 5801}#)))
                               (#{vars 5856}# (car (cdr #{x 5801}#)))
                               (#{exp 5858}#
                                 (#{regen 5297}#
                                   (car (cdr (cdr #{x 5801}#))))))
                           (let ((#{body 5863}#
                                   (make-struct/no-tail
                                     (vector-ref %expanded-vtables 14)
                                     #f
                                     #{req 5854}#
                                     #f
                                     #f
                                     #f
                                     '()
                                     #{vars 5856}#
                                     #{exp 5858}#
                                     #f)))
                             (make-struct/no-tail
                               (vector-ref %expanded-vtables 13)
                               #f
                               '()
                               #{body 5863}#)))
                         (error "how did we get here" #{x 5801}#))
                       (let ((#{fun-exp 5879}#
                               (let ((#{name 5888}# (car #{x 5801}#)))
                                 (if (equal?
                                       (module-name (current-module))
                                       '(guile))
                                   (make-struct/no-tail
                                     (vector-ref %expanded-vtables 7)
                                     #f
                                     #{name 5888}#)
                                   (make-struct/no-tail
                                     (vector-ref %expanded-vtables 5)
                                     #f
                                     '(guile)
                                     #{name 5888}#
                                     #f))))
                             (#{arg-exps 5880}#
                               (map #{regen 5297}# (cdr #{x 5801}#))))
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 11)
                           #f
                           #{fun-exp 5879}#
                           #{arg-exps 5880}#))))))))))
        (lambda (#{e 5298}#
                 #{r 5299}#
                 #{w 5300}#
                 #{s 5301}#
                 #{mod 5302}#)
          (let ((#{e 5303}#
                  (#{wrap 4327}#
                    (begin
                      (if (if (pair? #{e 5298}#) #{s 5301}# #f)
                        (set-source-properties! #{e 5298}# #{s 5301}#))
                      #{e 5298}#)
                    #{w 5300}#
                    #{mod 5302}#)))
            (let ((#{tmp 5305}# ($sc-dispatch #{e 5303}# '(_ any))))
              (if #{tmp 5305}#
                (@apply
                  (lambda (#{x 5330}#)
                    (call-with-values
                      (lambda ()
                        (#{gen-syntax 5290}#
                          #{e 5303}#
                          #{x 5330}#
                          #{r 5299}#
                          '()
                          #{ellipsis? 4342}#
                          #{mod 5302}#))
                      (lambda (#{e 5384}# #{maps 5385}#)
                        (#{regen 5297}# #{e 5384}#))))
                  #{tmp 5305}#)
                (syntax-violation
                  'syntax
                  "bad `syntax' form"
                  #{e 5303}#)))))))
    (#{global-extend 4300}#
      'core
      'lambda
      (lambda (#{e 6081}#
               #{r 6082}#
               #{w 6083}#
               #{s 6084}#
               #{mod 6085}#)
        (let ((#{tmp 6087}#
                ($sc-dispatch #{e 6081}# '(_ any any . each-any))))
          (if #{tmp 6087}#
            (@apply
              (lambda (#{args 6091}# #{e1 6092}# #{e2 6093}#)
                (call-with-values
                  (lambda ()
                    (#{lambda-formals 4343}# #{args 6091}#))
                  (lambda (#{req 6096}#
                           #{opt 6097}#
                           #{rest 6098}#
                           #{kw 6099}#)
                    (letrec*
                      ((#{lp 6100}#
                         (lambda (#{body 6103}# #{meta 6104}#)
                           (let ((#{tmp 6106}#
                                   ($sc-dispatch
                                     #{body 6103}#
                                     '(any any . each-any))))
                             (if (if #{tmp 6106}#
                                   (@apply
                                     (lambda (#{docstring 6110}#
                                              #{e1 6111}#
                                              #{e2 6112}#)
                                       (string?
                                         (syntax->datum #{docstring 6110}#)))
                                     #{tmp 6106}#)
                                   #f)
                               (@apply
                                 (lambda (#{docstring 6113}#
                                          #{e1 6114}#
                                          #{e2 6115}#)
                                   (#{lp 6100}#
                                     (cons #{e1 6114}# #{e2 6115}#)
                                     (append
                                       #{meta 6104}#
                                       (list (cons 'documentation
                                                   (syntax->datum
                                                     #{docstring 6113}#))))))
                                 #{tmp 6106}#)
                               (let ((#{tmp 6116}#
                                       ($sc-dispatch
                                         #{body 6103}#
                                         '(#(vector #(each (any . any)))
                                           any
                                           .
                                           each-any))))
                                 (if #{tmp 6116}#
                                   (@apply
                                     (lambda (#{k 6120}#
                                              #{v 6121}#
                                              #{e1 6122}#
                                              #{e2 6123}#)
                                       (#{lp 6100}#
                                         (cons #{e1 6122}# #{e2 6123}#)
                                         (append
                                           #{meta 6104}#
                                           (syntax->datum
                                             (map cons
                                                  #{k 6120}#
                                                  #{v 6121}#)))))
                                     #{tmp 6116}#)
                                   (#{expand-simple-lambda 4344}#
                                     #{e 6081}#
                                     #{r 6082}#
                                     #{w 6083}#
                                     #{s 6084}#
                                     #{mod 6085}#
                                     #{req 6096}#
                                     #{rest 6098}#
                                     #{meta 6104}#
                                     #{body 6103}#))))))))
                      (#{lp 6100}# (cons #{e1 6092}# #{e2 6093}#) '())))))
              #{tmp 6087}#)
            (syntax-violation
              'lambda
              "bad lambda"
              #{e 6081}#)))))
    (#{global-extend 4300}#
      'core
      'lambda*
      (lambda (#{e 6414}#
               #{r 6415}#
               #{w 6416}#
               #{s 6417}#
               #{mod 6418}#)
        (let ((#{tmp 6420}#
                ($sc-dispatch #{e 6414}# '(_ any any . each-any))))
          (if #{tmp 6420}#
            (@apply
              (lambda (#{args 6424}# #{e1 6425}# #{e2 6426}#)
                (call-with-values
                  (lambda ()
                    (#{expand-lambda-case 4346}#
                      #{e 6414}#
                      #{r 6415}#
                      #{w 6416}#
                      #{s 6417}#
                      #{mod 6418}#
                      #{lambda*-formals 4345}#
                      (list (cons #{args 6424}#
                                  (cons #{e1 6425}# #{e2 6426}#)))))
                  (lambda (#{meta 6429}# #{lcase 6430}#)
                    (make-struct/no-tail
                      (vector-ref %expanded-vtables 13)
                      #{s 6417}#
                      #{meta 6429}#
                      #{lcase 6430}#))))
              #{tmp 6420}#)
            (syntax-violation
              'lambda
              "bad lambda*"
              #{e 6414}#)))))
    (#{global-extend 4300}#
      'core
      'case-lambda
      (lambda (#{e 6600}#
               #{r 6601}#
               #{w 6602}#
               #{s 6603}#
               #{mod 6604}#)
        (let ((#{tmp 6606}#
                ($sc-dispatch
                  #{e 6600}#
                  '(_ (any any . each-any)
                      .
                      #(each (any any . each-any))))))
          (if #{tmp 6606}#
            (@apply
              (lambda (#{args 6610}#
                       #{e1 6611}#
                       #{e2 6612}#
                       #{args* 6613}#
                       #{e1* 6614}#
                       #{e2* 6615}#)
                (call-with-values
                  (lambda ()
                    (#{expand-lambda-case 4346}#
                      #{e 6600}#
                      #{r 6601}#
                      #{w 6602}#
                      #{s 6603}#
                      #{mod 6604}#
                      #{lambda-formals 4343}#
                      (cons (cons #{args 6610}#
                                  (cons #{e1 6611}# #{e2 6612}#))
                            (map (lambda (#{tmp 3263 6618}#
                                          #{tmp 3262 6619}#
                                          #{tmp 3261 6620}#)
                                   (cons #{tmp 3261 6620}#
                                         (cons #{tmp 3262 6619}#
                                               #{tmp 3263 6618}#)))
                                 #{e2* 6615}#
                                 #{e1* 6614}#
                                 #{args* 6613}#))))
                  (lambda (#{meta 6621}# #{lcase 6622}#)
                    (make-struct/no-tail
                      (vector-ref %expanded-vtables 13)
                      #{s 6603}#
                      #{meta 6621}#
                      #{lcase 6622}#))))
              #{tmp 6606}#)
            (syntax-violation
              'case-lambda
              "bad case-lambda"
              #{e 6600}#)))))
    (#{global-extend 4300}#
      'core
      'case-lambda*
      (lambda (#{e 6784}#
               #{r 6785}#
               #{w 6786}#
               #{s 6787}#
               #{mod 6788}#)
        (let ((#{tmp 6790}#
                ($sc-dispatch
                  #{e 6784}#
                  '(_ (any any . each-any)
                      .
                      #(each (any any . each-any))))))
          (if #{tmp 6790}#
            (@apply
              (lambda (#{args 6794}#
                       #{e1 6795}#
                       #{e2 6796}#
                       #{args* 6797}#
                       #{e1* 6798}#
                       #{e2* 6799}#)
                (call-with-values
                  (lambda ()
                    (#{expand-lambda-case 4346}#
                      #{e 6784}#
                      #{r 6785}#
                      #{w 6786}#
                      #{s 6787}#
                      #{mod 6788}#
                      #{lambda*-formals 4345}#
                      (cons (cons #{args 6794}#
                                  (cons #{e1 6795}# #{e2 6796}#))
                            (map (lambda (#{tmp 3298 6802}#
                                          #{tmp 3297 6803}#
                                          #{tmp 3296 6804}#)
                                   (cons #{tmp 3296 6804}#
                                         (cons #{tmp 3297 6803}#
                                               #{tmp 3298 6802}#)))
                                 #{e2* 6799}#
                                 #{e1* 6798}#
                                 #{args* 6797}#))))
                  (lambda (#{meta 6805}# #{lcase 6806}#)
                    (make-struct/no-tail
                      (vector-ref %expanded-vtables 13)
                      #{s 6787}#
                      #{meta 6805}#
                      #{lcase 6806}#))))
              #{tmp 6790}#)
            (syntax-violation
              'case-lambda
              "bad case-lambda*"
              #{e 6784}#)))))
    (#{global-extend 4300}#
      'core
      'let
      (letrec*
        ((#{expand-let 6997}#
           (lambda (#{e 7146}#
                    #{r 7147}#
                    #{w 7148}#
                    #{s 7149}#
                    #{mod 7150}#
                    #{constructor 7151}#
                    #{ids 7152}#
                    #{vals 7153}#
                    #{exps 7154}#)
             (if (not (#{valid-bound-ids? 4324}# #{ids 7152}#))
               (syntax-violation
                 'let
                 "duplicate bound variable"
                 #{e 7146}#)
               (let ((#{labels 7232}#
                       (#{gen-labels 4305}# #{ids 7152}#))
                     (#{new-vars 7233}#
                       (map #{gen-var 4348}# #{ids 7152}#)))
                 (let ((#{nw 7234}#
                         (#{make-binding-wrap 4316}#
                           #{ids 7152}#
                           #{labels 7232}#
                           #{w 7148}#))
                       (#{nr 7235}#
                         (#{extend-var-env 4297}#
                           #{labels 7232}#
                           #{new-vars 7233}#
                           #{r 7147}#)))
                   (#{constructor 7151}#
                     #{s 7149}#
                     (map syntax->datum #{ids 7152}#)
                     #{new-vars 7233}#
                     (map (lambda (#{x 7252}#)
                            (#{expand 4334}#
                              #{x 7252}#
                              #{r 7147}#
                              #{w 7148}#
                              #{mod 7150}#))
                          #{vals 7153}#)
                     (#{expand-body 4338}#
                       #{exps 7154}#
                       (#{source-wrap 4328}#
                         #{e 7146}#
                         #{nw 7234}#
                         #{s 7149}#
                         #{mod 7150}#)
                       #{nr 7235}#
                       #{nw 7234}#
                       #{mod 7150}#))))))))
        (lambda (#{e 6998}#
                 #{r 6999}#
                 #{w 7000}#
                 #{s 7001}#
                 #{mod 7002}#)
          (let ((#{tmp 7004}#
                  ($sc-dispatch
                    #{e 6998}#
                    '(_ #(each (any any)) any . each-any))))
            (if (if #{tmp 7004}#
                  (@apply
                    (lambda (#{id 7008}#
                             #{val 7009}#
                             #{e1 7010}#
                             #{e2 7011}#)
                      (and-map #{id? 4302}# #{id 7008}#))
                    #{tmp 7004}#)
                  #f)
              (@apply
                (lambda (#{id 7027}#
                         #{val 7028}#
                         #{e1 7029}#
                         #{e2 7030}#)
                  (#{expand-let 6997}#
                    #{e 6998}#
                    #{r 6999}#
                    #{w 7000}#
                    #{s 7001}#
                    #{mod 7002}#
                    #{build-let 4284}#
                    #{id 7027}#
                    #{val 7028}#
                    (cons #{e1 7029}# #{e2 7030}#)))
                #{tmp 7004}#)
              (let ((#{tmp 7060}#
                      ($sc-dispatch
                        #{e 6998}#
                        '(_ any #(each (any any)) any . each-any))))
                (if (if #{tmp 7060}#
                      (@apply
                        (lambda (#{f 7064}#
                                 #{id 7065}#
                                 #{val 7066}#
                                 #{e1 7067}#
                                 #{e2 7068}#)
                          (if (if (symbol? #{f 7064}#)
                                #t
                                (if (if (vector? #{f 7064}#)
                                      (if (= (vector-length #{f 7064}#) 4)
                                        (eq? (vector-ref #{f 7064}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (symbol? (vector-ref #{f 7064}# 1))
                                  #f))
                            (and-map #{id? 4302}# #{id 7065}#)
                            #f))
                        #{tmp 7060}#)
                      #f)
                  (@apply
                    (lambda (#{f 7110}#
                             #{id 7111}#
                             #{val 7112}#
                             #{e1 7113}#
                             #{e2 7114}#)
                      (#{expand-let 6997}#
                        #{e 6998}#
                        #{r 6999}#
                        #{w 7000}#
                        #{s 7001}#
                        #{mod 7002}#
                        #{build-named-let 4285}#
                        (cons #{f 7110}# #{id 7111}#)
                        #{val 7112}#
                        (cons #{e1 7113}# #{e2 7114}#)))
                    #{tmp 7060}#)
                  (syntax-violation
                    'let
                    "bad let"
                    (#{wrap 4327}#
                      (begin
                        (if (if (pair? #{e 6998}#) #{s 7001}# #f)
                          (set-source-properties! #{e 6998}# #{s 7001}#))
                        #{e 6998}#)
                      #{w 7000}#
                      #{mod 7002}#)))))))))
    (#{global-extend 4300}#
      'core
      'letrec
      (lambda (#{e 7694}#
               #{r 7695}#
               #{w 7696}#
               #{s 7697}#
               #{mod 7698}#)
        (let ((#{tmp 7700}#
                ($sc-dispatch
                  #{e 7694}#
                  '(_ #(each (any any)) any . each-any))))
          (if (if #{tmp 7700}#
                (@apply
                  (lambda (#{id 7704}#
                           #{val 7705}#
                           #{e1 7706}#
                           #{e2 7707}#)
                    (and-map #{id? 4302}# #{id 7704}#))
                  #{tmp 7700}#)
                #f)
            (@apply
              (lambda (#{id 7723}#
                       #{val 7724}#
                       #{e1 7725}#
                       #{e2 7726}#)
                (if (not (#{valid-bound-ids? 4324}# #{id 7723}#))
                  (syntax-violation
                    'letrec
                    "duplicate bound variable"
                    #{e 7694}#)
                  (let ((#{labels 7816}#
                          (#{gen-labels 4305}# #{id 7723}#))
                        (#{new-vars 7817}#
                          (map #{gen-var 4348}# #{id 7723}#)))
                    (let ((#{w 7818}#
                            (#{make-binding-wrap 4316}#
                              #{id 7723}#
                              #{labels 7816}#
                              #{w 7696}#))
                          (#{r 7819}#
                            (#{extend-var-env 4297}#
                              #{labels 7816}#
                              #{new-vars 7817}#
                              #{r 7695}#)))
                      (#{build-letrec 4286}#
                        #{s 7697}#
                        #f
                        (map syntax->datum #{id 7723}#)
                        #{new-vars 7817}#
                        (map (lambda (#{x 7906}#)
                               (#{expand 4334}#
                                 #{x 7906}#
                                 #{r 7819}#
                                 #{w 7818}#
                                 #{mod 7698}#))
                             #{val 7724}#)
                        (#{expand-body 4338}#
                          (cons #{e1 7725}# #{e2 7726}#)
                          (#{wrap 4327}#
                            (begin
                              (if (if (pair? #{e 7694}#) #{s 7697}# #f)
                                (set-source-properties! #{e 7694}# #{s 7697}#))
                              #{e 7694}#)
                            #{w 7818}#
                            #{mod 7698}#)
                          #{r 7819}#
                          #{w 7818}#
                          #{mod 7698}#))))))
              #{tmp 7700}#)
            (syntax-violation
              'letrec
              "bad letrec"
              (#{wrap 4327}#
                (begin
                  (if (if (pair? #{e 7694}#) #{s 7697}# #f)
                    (set-source-properties! #{e 7694}# #{s 7697}#))
                  #{e 7694}#)
                #{w 7696}#
                #{mod 7698}#))))))
    (#{global-extend 4300}#
      'core
      'letrec*
      (lambda (#{e 8323}#
               #{r 8324}#
               #{w 8325}#
               #{s 8326}#
               #{mod 8327}#)
        (let ((#{tmp 8329}#
                ($sc-dispatch
                  #{e 8323}#
                  '(_ #(each (any any)) any . each-any))))
          (if (if #{tmp 8329}#
                (@apply
                  (lambda (#{id 8333}#
                           #{val 8334}#
                           #{e1 8335}#
                           #{e2 8336}#)
                    (and-map #{id? 4302}# #{id 8333}#))
                  #{tmp 8329}#)
                #f)
            (@apply
              (lambda (#{id 8352}#
                       #{val 8353}#
                       #{e1 8354}#
                       #{e2 8355}#)
                (if (not (#{valid-bound-ids? 4324}# #{id 8352}#))
                  (syntax-violation
                    'letrec*
                    "duplicate bound variable"
                    #{e 8323}#)
                  (let ((#{labels 8445}#
                          (#{gen-labels 4305}# #{id 8352}#))
                        (#{new-vars 8446}#
                          (map #{gen-var 4348}# #{id 8352}#)))
                    (let ((#{w 8447}#
                            (#{make-binding-wrap 4316}#
                              #{id 8352}#
                              #{labels 8445}#
                              #{w 8325}#))
                          (#{r 8448}#
                            (#{extend-var-env 4297}#
                              #{labels 8445}#
                              #{new-vars 8446}#
                              #{r 8324}#)))
                      (#{build-letrec 4286}#
                        #{s 8326}#
                        #t
                        (map syntax->datum #{id 8352}#)
                        #{new-vars 8446}#
                        (map (lambda (#{x 8535}#)
                               (#{expand 4334}#
                                 #{x 8535}#
                                 #{r 8448}#
                                 #{w 8447}#
                                 #{mod 8327}#))
                             #{val 8353}#)
                        (#{expand-body 4338}#
                          (cons #{e1 8354}# #{e2 8355}#)
                          (#{wrap 4327}#
                            (begin
                              (if (if (pair? #{e 8323}#) #{s 8326}# #f)
                                (set-source-properties! #{e 8323}# #{s 8326}#))
                              #{e 8323}#)
                            #{w 8447}#
                            #{mod 8327}#)
                          #{r 8448}#
                          #{w 8447}#
                          #{mod 8327}#))))))
              #{tmp 8329}#)
            (syntax-violation
              'letrec*
              "bad letrec*"
              (#{wrap 4327}#
                (begin
                  (if (if (pair? #{e 8323}#) #{s 8326}# #f)
                    (set-source-properties! #{e 8323}# #{s 8326}#))
                  #{e 8323}#)
                #{w 8325}#
                #{mod 8327}#))))))
    (#{global-extend 4300}#
      'core
      'set!
      (lambda (#{e 8994}#
               #{r 8995}#
               #{w 8996}#
               #{s 8997}#
               #{mod 8998}#)
        (let ((#{tmp 9000}#
                ($sc-dispatch #{e 8994}# '(_ any any))))
          (if (if #{tmp 9000}#
                (@apply
                  (lambda (#{id 9004}# #{val 9005}#)
                    (if (symbol? #{id 9004}#)
                      #t
                      (if (if (vector? #{id 9004}#)
                            (if (= (vector-length #{id 9004}#) 4)
                              (eq? (vector-ref #{id 9004}# 0) 'syntax-object)
                              #f)
                            #f)
                        (symbol? (vector-ref #{id 9004}# 1))
                        #f)))
                  #{tmp 9000}#)
                #f)
            (@apply
              (lambda (#{id 9032}# #{val 9033}#)
                (let ((#{n 9034}#
                        (#{id-var-name 4321}# #{id 9032}# #{w 8996}#))
                      (#{id-mod 9035}#
                        (if (if (vector? #{id 9032}#)
                              (if (= (vector-length #{id 9032}#) 4)
                                (eq? (vector-ref #{id 9032}# 0) 'syntax-object)
                                #f)
                              #f)
                          (vector-ref #{id 9032}# 3)
                          #{mod 8998}#)))
                  (let ((#{b 9036}#
                          (let ((#{t 9698}# (assq #{n 9034}# #{r 8995}#)))
                            (if #{t 9698}#
                              (cdr #{t 9698}#)
                              (if (symbol? #{n 9034}#)
                                (let ((#{t 9703}#
                                        (begin
                                          (if (if (not #{id-mod 9035}#)
                                                (current-module)
                                                #f)
                                            (warn "module system is booted, we should have a module"
                                                  #{n 9034}#))
                                          (let ((#{v 9740}#
                                                  (module-variable
                                                    (if #{id-mod 9035}#
                                                      (resolve-module
                                                        (cdr #{id-mod 9035}#))
                                                      (current-module))
                                                    #{n 9034}#)))
                                            (if #{v 9740}#
                                              (if (variable-bound? #{v 9740}#)
                                                (let ((#{val 9749}#
                                                        (variable-ref
                                                          #{v 9740}#)))
                                                  (if (macro? #{val 9749}#)
                                                    (if (macro-type
                                                          #{val 9749}#)
                                                      (cons (macro-type
                                                              #{val 9749}#)
                                                            (macro-binding
                                                              #{val 9749}#))
                                                      #f)
                                                    #f))
                                                #f)
                                              #f)))))
                                  (if #{t 9703}# #{t 9703}# '(global)))
                                '(displaced-lexical))))))
                    (let ((#{atom-key 9037}# (car #{b 9036}#)))
                      (if (let ((#{t 9069}# #{atom-key 9037}#))
                            (eqv? #{t 9069}# 'lexical))
                        (#{build-lexical-assignment 4273}#
                          #{s 8997}#
                          (syntax->datum #{id 9032}#)
                          (cdr #{b 9036}#)
                          (#{expand 4334}#
                            #{val 9033}#
                            #{r 8995}#
                            #{w 8996}#
                            #{mod 8998}#))
                        (if (let ((#{t 9344}# #{atom-key 9037}#))
                              (eqv? #{t 9344}# 'global))
                          (#{build-global-assignment 4276}#
                            #{s 8997}#
                            #{n 9034}#
                            (#{expand 4334}#
                              #{val 9033}#
                              #{r 8995}#
                              #{w 8996}#
                              #{mod 8998}#)
                            #{id-mod 9035}#)
                          (if (let ((#{t 9589}# #{atom-key 9037}#))
                                (eqv? #{t 9589}# 'macro))
                            (let ((#{p 9652}# (cdr #{b 9036}#)))
                              (if (procedure-property
                                    #{p 9652}#
                                    'variable-transformer)
                                (#{expand 4334}#
                                  (#{expand-macro 4337}#
                                    #{p 9652}#
                                    #{e 8994}#
                                    #{r 8995}#
                                    #{w 8996}#
                                    #{s 8997}#
                                    #f
                                    #{mod 8998}#)
                                  #{r 8995}#
                                  '(())
                                  #{mod 8998}#)
                                (syntax-violation
                                  'set!
                                  "not a variable transformer"
                                  (#{wrap 4327}#
                                    #{e 8994}#
                                    #{w 8996}#
                                    #{mod 8998}#)
                                  (#{wrap 4327}#
                                    #{id 9032}#
                                    #{w 8996}#
                                    #{id-mod 9035}#))))
                            (if (eqv? #{atom-key 9037}# 'displaced-lexical)
                              (syntax-violation
                                'set!
                                "identifier out of context"
                                (#{wrap 4327}#
                                  #{id 9032}#
                                  #{w 8996}#
                                  #{mod 8998}#))
                              (syntax-violation
                                'set!
                                "bad set!"
                                (#{wrap 4327}#
                                  (begin
                                    (if (if (pair? #{e 8994}#) #{s 8997}# #f)
                                      (set-source-properties!
                                        #{e 8994}#
                                        #{s 8997}#))
                                    #{e 8994}#)
                                  #{w 8996}#
                                  #{mod 8998}#))))))))))
              #{tmp 9000}#)
            (let ((#{tmp 9845}#
                    ($sc-dispatch
                      #{e 8994}#
                      '(_ (any . each-any) any))))
              (if #{tmp 9845}#
                (@apply
                  (lambda (#{head 9849}# #{tail 9850}# #{val 9851}#)
                    (call-with-values
                      (lambda ()
                        (#{syntax-type 4333}#
                          #{head 9849}#
                          #{r 8995}#
                          '(())
                          #f
                          #f
                          #{mod 8998}#
                          #t))
                      (lambda (#{type 9854}#
                               #{value 9855}#
                               #{ee 9856}#
                               #{ww 9857}#
                               #{ss 9858}#
                               #{modmod 9859}#)
                        (if (eqv? #{type 9854}# 'module-ref)
                          (let ((#{val 9863}#
                                  (#{expand 4334}#
                                    #{val 9851}#
                                    #{r 8995}#
                                    #{w 8996}#
                                    #{mod 8998}#)))
                            (call-with-values
                              (lambda ()
                                (#{value 9855}#
                                  (cons #{head 9849}# #{tail 9850}#)
                                  #{r 8995}#
                                  #{w 8996}#))
                              (lambda (#{e 9864}#
                                       #{r 9865}#
                                       #{w 9866}#
                                       #{s* 9867}#
                                       #{mod 9868}#)
                                (let ((#{tmp 9870}# (list #{e 9864}#)))
                                  (if (@apply
                                        (lambda (#{e 9872}#)
                                          (if (symbol? #{e 9872}#)
                                            #t
                                            (if (if (vector? #{e 9872}#)
                                                  (if (= (vector-length
                                                           #{e 9872}#)
                                                         4)
                                                    (eq? (vector-ref
                                                           #{e 9872}#
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (symbol?
                                                (vector-ref #{e 9872}# 1))
                                              #f)))
                                        #{tmp 9870}#)
                                    (@apply
                                      (lambda (#{e 9902}#)
                                        (#{build-global-assignment 4276}#
                                          #{s 8997}#
                                          (syntax->datum #{e 9902}#)
                                          #{val 9863}#
                                          #{mod 9868}#))
                                      #{tmp 9870}#)
                                    (syntax-violation
                                      #f
                                      "source expression failed to match any pattern"
                                      #{e 9864}#))))))
                          (#{build-application 4269}#
                            #{s 8997}#
                            (let ((#{e 10127}#
                                    (list '#(syntax-object
                                             setter
                                             ((top)
                                              #(ribcage () () ())
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(type value ee ww ss modmod)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("i3544"
                                                  "i3545"
                                                  "i3546"
                                                  "i3547"
                                                  "i3548"
                                                  "i3549"))
                                              #(ribcage
                                                #(head tail val)
                                                #((top) (top) (top))
                                                #("i3530" "i3531" "i3532"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(e r w s mod)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("i3494"
                                                  "i3495"
                                                  "i3496"
                                                  "i3497"
                                                  "i3498"))
                                              #(ribcage
                                                (lambda-var-list
                                                  gen-var
                                                  strip
                                                  expand-lambda-case
                                                  lambda*-formals
                                                  expand-simple-lambda
                                                  lambda-formals
                                                  ellipsis?
                                                  expand-void
                                                  eval-local-transformer
                                                  expand-local-syntax
                                                  expand-body
                                                  expand-macro
                                                  expand-application
                                                  expand-expr
                                                  expand
                                                  syntax-type
                                                  parse-when-list
                                                  expand-install-global
                                                  expand-top-sequence
                                                  expand-sequence
                                                  source-wrap
                                                  wrap
                                                  bound-id-member?
                                                  distinct-bound-ids?
                                                  valid-bound-ids?
                                                  bound-id=?
                                                  free-id=?
                                                  id-var-name
                                                  same-marks?
                                                  join-marks
                                                  join-wraps
                                                  smart-append
                                                  make-binding-wrap
                                                  extend-ribcage!
                                                  make-empty-ribcage
                                                  new-mark
                                                  anti-mark
                                                  the-anti-mark
                                                  top-marked?
                                                  top-wrap
                                                  empty-wrap
                                                  set-ribcage-labels!
                                                  set-ribcage-marks!
                                                  set-ribcage-symnames!
                                                  ribcage-labels
                                                  ribcage-marks
                                                  ribcage-symnames
                                                  ribcage?
                                                  make-ribcage
                                                  gen-labels
                                                  gen-label
                                                  make-rename
                                                  rename-marks
                                                  rename-new
                                                  rename-old
                                                  subst-rename?
                                                  wrap-subst
                                                  wrap-marks
                                                  make-wrap
                                                  id-sym-name&marks
                                                  id-sym-name
                                                  id?
                                                  nonsymbol-id?
                                                  global-extend
                                                  lookup
                                                  macros-only-env
                                                  extend-var-env
                                                  extend-env
                                                  null-env
                                                  binding-value
                                                  binding-type
                                                  make-binding
                                                  arg-check
                                                  source-annotation
                                                  no-source
                                                  set-syntax-object-module!
                                                  set-syntax-object-wrap!
                                                  set-syntax-object-expression!
                                                  syntax-object-module
                                                  syntax-object-wrap
                                                  syntax-object-expression
                                                  syntax-object?
                                                  make-syntax-object
                                                  build-lexical-var
                                                  build-letrec
                                                  build-named-let
                                                  build-let
                                                  build-sequence
                                                  build-data
                                                  build-primref
                                                  build-lambda-case
                                                  build-case-lambda
                                                  build-simple-lambda
                                                  build-global-definition
                                                  build-global-assignment
                                                  build-global-reference
                                                  analyze-variable
                                                  build-lexical-assignment
                                                  build-lexical-reference
                                                  build-dynlet
                                                  build-conditional
                                                  build-application
                                                  build-void
                                                  maybe-name-value!
                                                  decorate-source
                                                  get-global-definition-hook
                                                  put-global-definition-hook
                                                  gensym-hook
                                                  local-eval-hook
                                                  top-level-eval-hook
                                                  fx<
                                                  fx=
                                                  fx-
                                                  fx+
                                                  set-lambda-meta!
                                                  lambda-meta
                                                  lambda?
                                                  make-dynlet
                                                  make-letrec
                                                  make-let
                                                  make-lambda-case
                                                  make-lambda
                                                  make-sequence
                                                  make-application
                                                  make-conditional
                                                  make-toplevel-define
                                                  make-toplevel-set
                                                  make-toplevel-ref
                                                  make-module-set
                                                  make-module-ref
                                                  make-lexical-set
                                                  make-lexical-ref
                                                  make-primitive-ref
                                                  make-const
                                                  make-void)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("i467"
                                                 "i465"
                                                 "i463"
                                                 "i461"
                                                 "i459"
                                                 "i457"
                                                 "i455"
                                                 "i453"
                                                 "i451"
                                                 "i449"
                                                 "i447"
                                                 "i445"
                                                 "i443"
                                                 "i441"
                                                 "i439"
                                                 "i437"
                                                 "i435"
                                                 "i433"
                                                 "i431"
                                                 "i429"
                                                 "i427"
                                                 "i425"
                                                 "i423"
                                                 "i421"
                                                 "i419"
                                                 "i417"
                                                 "i415"
                                                 "i413"
                                                 "i411"
                                                 "i409"
                                                 "i407"
                                                 "i405"
                                                 "i403"
                                                 "i401"
                                                 "i399"
                                                 "i398"
                                                 "i396"
                                                 "i393"
                                                 "i392"
                                                 "i391"
                                                 "i389"
                                                 "i388"
                                                 "i386"
                                                 "i384"
                                                 "i382"
                                                 "i380"
                                                 "i378"
                                                 "i376"
                                                 "i374"
                                                 "i372"
                                                 "i369"
                                                 "i367"
                                                 "i366"
                                                 "i364"
                                                 "i362"
                                                 "i360"
                                                 "i358"
                                                 "i357"
                                                 "i356"
                                                 "i355"
                                                 "i353"
                                                 "i352"
                                                 "i349"
                                                 "i347"
                                                 "i345"
                                                 "i343"
                                                 "i341"
                                                 "i339"
                                                 "i337"
                                                 "i336"
                                                 "i335"
                                                 "i333"
                                                 "i331"
                                                 "i330"
                                                 "i327"
                                                 "i326"
                                                 "i324"
                                                 "i322"
                                                 "i320"
                                                 "i318"
                                                 "i316"
                                                 "i314"
                                                 "i312"
                                                 "i310"
                                                 "i308"
                                                 "i305"
                                                 "i303"
                                                 "i301"
                                                 "i299"
                                                 "i297"
                                                 "i295"
                                                 "i293"
                                                 "i291"
                                                 "i289"
                                                 "i287"
                                                 "i285"
                                                 "i283"
                                                 "i281"
                                                 "i279"
                                                 "i277"
                                                 "i275"
                                                 "i273"
                                                 "i271"
                                                 "i269"
                                                 "i267"
                                                 "i265"
                                                 "i263"
                                                 "i261"
                                                 "i260"
                                                 "i257"
                                                 "i255"
                                                 "i254"
                                                 "i253"
                                                 "i252"
                                                 "i251"
                                                 "i249"
                                                 "i247"
                                                 "i245"
                                                 "i242"
                                                 "i240"
                                                 "i238"
                                                 "i236"
                                                 "i234"
                                                 "i232"
                                                 "i230"
                                                 "i228"
                                                 "i226"
                                                 "i224"
                                                 "i222"
                                                 "i220"
                                                 "i218"
                                                 "i216"
                                                 "i214"
                                                 "i212"
                                                 "i210"
                                                 "i208"))
                                              #(ribcage
                                                (define-structure
                                                  define-expansion-accessors
                                                  define-expansion-constructors)
                                                ((top) (top) (top))
                                                ("i46" "i45" "i44")))
                                             (hygiene guile))
                                          #{head 9849}#)))
                              (call-with-values
                                (lambda ()
                                  (#{syntax-type 4333}#
                                    #{e 10127}#
                                    #{r 8995}#
                                    #{w 8996}#
                                    (#{source-annotation 4295}# #{e 10127}#)
                                    #f
                                    #{mod 8998}#
                                    #f))
                                (lambda (#{type 10134}#
                                         #{value 10135}#
                                         #{e 10136}#
                                         #{w 10137}#
                                         #{s 10138}#
                                         #{mod 10139}#)
                                  (#{expand-expr 4335}#
                                    #{type 10134}#
                                    #{value 10135}#
                                    #{e 10136}#
                                    #{r 8995}#
                                    #{w 10137}#
                                    #{s 10138}#
                                    #{mod 10139}#))))
                            (map (lambda (#{e 10143}#)
                                   (call-with-values
                                     (lambda ()
                                       (#{syntax-type 4333}#
                                         #{e 10143}#
                                         #{r 8995}#
                                         #{w 8996}#
                                         (#{source-annotation 4295}#
                                           #{e 10143}#)
                                         #f
                                         #{mod 8998}#
                                         #f))
                                     (lambda (#{type 10158}#
                                              #{value 10159}#
                                              #{e 10160}#
                                              #{w 10161}#
                                              #{s 10162}#
                                              #{mod 10163}#)
                                       (#{expand-expr 4335}#
                                         #{type 10158}#
                                         #{value 10159}#
                                         #{e 10160}#
                                         #{r 8995}#
                                         #{w 10161}#
                                         #{s 10162}#
                                         #{mod 10163}#))))
                                 (append
                                   #{tail 9850}#
                                   (list #{val 9851}#))))))))
                  #{tmp 9845}#)
                (syntax-violation
                  'set!
                  "bad set!"
                  (#{wrap 4327}#
                    (begin
                      (if (if (pair? #{e 8994}#) #{s 8997}# #f)
                        (set-source-properties! #{e 8994}# #{s 8997}#))
                      #{e 8994}#)
                    #{w 8996}#
                    #{mod 8998}#))))))))
    (module-define!
      (current-module)
      '@
      (make-syntax-transformer
        '@
        'module-ref
        (lambda (#{e 10206}# #{r 10207}# #{w 10208}#)
          (let ((#{tmp 10210}#
                  ($sc-dispatch #{e 10206}# '(_ each-any any))))
            (if (if #{tmp 10210}#
                  (@apply
                    (lambda (#{mod 10213}# #{id 10214}#)
                      (if (and-map #{id? 4302}# #{mod 10213}#)
                        (if (symbol? #{id 10214}#)
                          #t
                          (if (if (vector? #{id 10214}#)
                                (if (= (vector-length #{id 10214}#) 4)
                                  (eq? (vector-ref #{id 10214}# 0)
                                       'syntax-object)
                                  #f)
                                #f)
                            (symbol? (vector-ref #{id 10214}# 1))
                            #f))
                        #f))
                    #{tmp 10210}#)
                  #f)
              (@apply
                (lambda (#{mod 10254}# #{id 10255}#)
                  (values
                    (syntax->datum #{id 10255}#)
                    #{r 10207}#
                    #{w 10208}#
                    #f
                    (syntax->datum
                      (cons '#(syntax-object
                               public
                               ((top)
                                #(ribcage
                                  #(mod id)
                                  #((top) (top))
                                  #("i3591" "i3592"))
                                #(ribcage () () ())
                                #(ribcage
                                  #(e r w)
                                  #((top) (top) (top))
                                  #("i3579" "i3580" "i3581"))
                                #(ribcage
                                  (lambda-var-list
                                    gen-var
                                    strip
                                    expand-lambda-case
                                    lambda*-formals
                                    expand-simple-lambda
                                    lambda-formals
                                    ellipsis?
                                    expand-void
                                    eval-local-transformer
                                    expand-local-syntax
                                    expand-body
                                    expand-macro
                                    expand-application
                                    expand-expr
                                    expand
                                    syntax-type
                                    parse-when-list
                                    expand-install-global
                                    expand-top-sequence
                                    expand-sequence
                                    source-wrap
                                    wrap
                                    bound-id-member?
                                    distinct-bound-ids?
                                    valid-bound-ids?
                                    bound-id=?
                                    free-id=?
                                    id-var-name
                                    same-marks?
                                    join-marks
                                    join-wraps
                                    smart-append
                                    make-binding-wrap
                                    extend-ribcage!
                                    make-empty-ribcage
                                    new-mark
                                    anti-mark
                                    the-anti-mark
                                    top-marked?
                                    top-wrap
                                    empty-wrap
                                    set-ribcage-labels!
                                    set-ribcage-marks!
                                    set-ribcage-symnames!
                                    ribcage-labels
                                    ribcage-marks
                                    ribcage-symnames
                                    ribcage?
                                    make-ribcage
                                    gen-labels
                                    gen-label
                                    make-rename
                                    rename-marks
                                    rename-new
                                    rename-old
                                    subst-rename?
                                    wrap-subst
                                    wrap-marks
                                    make-wrap
                                    id-sym-name&marks
                                    id-sym-name
                                    id?
                                    nonsymbol-id?
                                    global-extend
                                    lookup
                                    macros-only-env
                                    extend-var-env
                                    extend-env
                                    null-env
                                    binding-value
                                    binding-type
                                    make-binding
                                    arg-check
                                    source-annotation
                                    no-source
                                    set-syntax-object-module!
                                    set-syntax-object-wrap!
                                    set-syntax-object-expression!
                                    syntax-object-module
                                    syntax-object-wrap
                                    syntax-object-expression
                                    syntax-object?
                                    make-syntax-object
                                    build-lexical-var
                                    build-letrec
                                    build-named-let
                                    build-let
                                    build-sequence
                                    build-data
                                    build-primref
                                    build-lambda-case
                                    build-case-lambda
                                    build-simple-lambda
                                    build-global-definition
                                    build-global-assignment
                                    build-global-reference
                                    analyze-variable
                                    build-lexical-assignment
                                    build-lexical-reference
                                    build-dynlet
                                    build-conditional
                                    build-application
                                    build-void
                                    maybe-name-value!
                                    decorate-source
                                    get-global-definition-hook
                                    put-global-definition-hook
                                    gensym-hook
                                    local-eval-hook
                                    top-level-eval-hook
                                    fx<
                                    fx=
                                    fx-
                                    fx+
                                    set-lambda-meta!
                                    lambda-meta
                                    lambda?
                                    make-dynlet
                                    make-letrec
                                    make-let
                                    make-lambda-case
                                    make-lambda
                                    make-sequence
                                    make-application
                                    make-conditional
                                    make-toplevel-define
                                    make-toplevel-set
                                    make-toplevel-ref
                                    make-module-set
                                    make-module-ref
                                    make-lexical-set
                                    make-lexical-ref
                                    make-primitive-ref
                                    make-const
                                    make-void)
                                  ((top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top))
                                  ("i467"
                                   "i465"
                                   "i463"
                                   "i461"
                                   "i459"
                                   "i457"
                                   "i455"
                                   "i453"
                                   "i451"
                                   "i449"
                                   "i447"
                                   "i445"
                                   "i443"
                                   "i441"
                                   "i439"
                                   "i437"
                                   "i435"
                                   "i433"
                                   "i431"
                                   "i429"
                                   "i427"
                                   "i425"
                                   "i423"
                                   "i421"
                                   "i419"
                                   "i417"
                                   "i415"
                                   "i413"
                                   "i411"
                                   "i409"
                                   "i407"
                                   "i405"
                                   "i403"
                                   "i401"
                                   "i399"
                                   "i398"
                                   "i396"
                                   "i393"
                                   "i392"
                                   "i391"
                                   "i389"
                                   "i388"
                                   "i386"
                                   "i384"
                                   "i382"
                                   "i380"
                                   "i378"
                                   "i376"
                                   "i374"
                                   "i372"
                                   "i369"
                                   "i367"
                                   "i366"
                                   "i364"
                                   "i362"
                                   "i360"
                                   "i358"
                                   "i357"
                                   "i356"
                                   "i355"
                                   "i353"
                                   "i352"
                                   "i349"
                                   "i347"
                                   "i345"
                                   "i343"
                                   "i341"
                                   "i339"
                                   "i337"
                                   "i336"
                                   "i335"
                                   "i333"
                                   "i331"
                                   "i330"
                                   "i327"
                                   "i326"
                                   "i324"
                                   "i322"
                                   "i320"
                                   "i318"
                                   "i316"
                                   "i314"
                                   "i312"
                                   "i310"
                                   "i308"
                                   "i305"
                                   "i303"
                                   "i301"
                                   "i299"
                                   "i297"
                                   "i295"
                                   "i293"
                                   "i291"
                                   "i289"
                                   "i287"
                                   "i285"
                                   "i283"
                                   "i281"
                                   "i279"
                                   "i277"
                                   "i275"
                                   "i273"
                                   "i271"
                                   "i269"
                                   "i267"
                                   "i265"
                                   "i263"
                                   "i261"
                                   "i260"
                                   "i257"
                                   "i255"
                                   "i254"
                                   "i253"
                                   "i252"
                                   "i251"
                                   "i249"
                                   "i247"
                                   "i245"
                                   "i242"
                                   "i240"
                                   "i238"
                                   "i236"
                                   "i234"
                                   "i232"
                                   "i230"
                                   "i228"
                                   "i226"
                                   "i224"
                                   "i222"
                                   "i220"
                                   "i218"
                                   "i216"
                                   "i214"
                                   "i212"
                                   "i210"
                                   "i208"))
                                #(ribcage
                                  (define-structure
                                    define-expansion-accessors
                                    define-expansion-constructors)
                                  ((top) (top) (top))
                                  ("i46" "i45" "i44")))
                               (hygiene guile))
                            #{mod 10254}#))))
                #{tmp 10210}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{e 10206}#))))))
    (#{global-extend 4300}#
      'module-ref
      '@@
      (lambda (#{e 10347}# #{r 10348}# #{w 10349}#)
        (letrec*
          ((#{remodulate 10350}#
             (lambda (#{x 10385}# #{mod 10386}#)
               (if (pair? #{x 10385}#)
                 (cons (#{remodulate 10350}#
                         (car #{x 10385}#)
                         #{mod 10386}#)
                       (#{remodulate 10350}#
                         (cdr #{x 10385}#)
                         #{mod 10386}#))
                 (if (if (vector? #{x 10385}#)
                       (if (= (vector-length #{x 10385}#) 4)
                         (eq? (vector-ref #{x 10385}# 0) 'syntax-object)
                         #f)
                       #f)
                   (let ((#{expression 10400}#
                           (#{remodulate 10350}#
                             (vector-ref #{x 10385}# 1)
                             #{mod 10386}#))
                         (#{wrap 10401}# (vector-ref #{x 10385}# 2)))
                     (vector
                       'syntax-object
                       #{expression 10400}#
                       #{wrap 10401}#
                       #{mod 10386}#))
                   (if (vector? #{x 10385}#)
                     (let ((#{n 10409}# (vector-length #{x 10385}#)))
                       (let ((#{v 10410}# (make-vector #{n 10409}#)))
                         (letrec*
                           ((#{loop 10411}#
                              (lambda (#{i 10458}#)
                                (if (= #{i 10458}# #{n 10409}#)
                                  #{v 10410}#
                                  (begin
                                    (vector-set!
                                      #{v 10410}#
                                      #{i 10458}#
                                      (#{remodulate 10350}#
                                        (vector-ref #{x 10385}# #{i 10458}#)
                                        #{mod 10386}#))
                                    (#{loop 10411}# (#{1+}# #{i 10458}#)))))))
                           (#{loop 10411}# 0))))
                     #{x 10385}#))))))
          (let ((#{tmp 10352}#
                  ($sc-dispatch #{e 10347}# '(_ each-any any))))
            (if (if #{tmp 10352}#
                  (@apply
                    (lambda (#{mod 10356}# #{exp 10357}#)
                      (and-map #{id? 4302}# #{mod 10356}#))
                    #{tmp 10352}#)
                  #f)
              (@apply
                (lambda (#{mod 10373}# #{exp 10374}#)
                  (let ((#{mod 10375}#
                          (syntax->datum
                            (cons '#(syntax-object
                                     private
                                     ((top)
                                      #(ribcage
                                        #(mod exp)
                                        #((top) (top))
                                        #("i3635" "i3636"))
                                      #(ribcage (remodulate) ((top)) ("i3602"))
                                      #(ribcage
                                        #(e r w)
                                        #((top) (top) (top))
                                        #("i3599" "i3600" "i3601"))
                                      #(ribcage
                                        (lambda-var-list
                                          gen-var
                                          strip
                                          expand-lambda-case
                                          lambda*-formals
                                          expand-simple-lambda
                                          lambda-formals
                                          ellipsis?
                                          expand-void
                                          eval-local-transformer
                                          expand-local-syntax
                                          expand-body
                                          expand-macro
                                          expand-application
                                          expand-expr
                                          expand
                                          syntax-type
                                          parse-when-list
                                          expand-install-global
                                          expand-top-sequence
                                          expand-sequence
                                          source-wrap
                                          wrap
                                          bound-id-member?
                                          distinct-bound-ids?
                                          valid-bound-ids?
                                          bound-id=?
                                          free-id=?
                                          id-var-name
                                          same-marks?
                                          join-marks
                                          join-wraps
                                          smart-append
                                          make-binding-wrap
                                          extend-ribcage!
                                          make-empty-ribcage
                                          new-mark
                                          anti-mark
                                          the-anti-mark
                                          top-marked?
                                          top-wrap
                                          empty-wrap
                                          set-ribcage-labels!
                                          set-ribcage-marks!
                                          set-ribcage-symnames!
                                          ribcage-labels
                                          ribcage-marks
                                          ribcage-symnames
                                          ribcage?
                                          make-ribcage
                                          gen-labels
                                          gen-label
                                          make-rename
                                          rename-marks
                                          rename-new
                                          rename-old
                                          subst-rename?
                                          wrap-subst
                                          wrap-marks
                                          make-wrap
                                          id-sym-name&marks
                                          id-sym-name
                                          id?
                                          nonsymbol-id?
                                          global-extend
                                          lookup
                                          macros-only-env
                                          extend-var-env
                                          extend-env
                                          null-env
                                          binding-value
                                          binding-type
                                          make-binding
                                          arg-check
                                          source-annotation
                                          no-source
                                          set-syntax-object-module!
                                          set-syntax-object-wrap!
                                          set-syntax-object-expression!
                                          syntax-object-module
                                          syntax-object-wrap
                                          syntax-object-expression
                                          syntax-object?
                                          make-syntax-object
                                          build-lexical-var
                                          build-letrec
                                          build-named-let
                                          build-let
                                          build-sequence
                                          build-data
                                          build-primref
                                          build-lambda-case
                                          build-case-lambda
                                          build-simple-lambda
                                          build-global-definition
                                          build-global-assignment
                                          build-global-reference
                                          analyze-variable
                                          build-lexical-assignment
                                          build-lexical-reference
                                          build-dynlet
                                          build-conditional
                                          build-application
                                          build-void
                                          maybe-name-value!
                                          decorate-source
                                          get-global-definition-hook
                                          put-global-definition-hook
                                          gensym-hook
                                          local-eval-hook
                                          top-level-eval-hook
                                          fx<
                                          fx=
                                          fx-
                                          fx+
                                          set-lambda-meta!
                                          lambda-meta
                                          lambda?
                                          make-dynlet
                                          make-letrec
                                          make-let
                                          make-lambda-case
                                          make-lambda
                                          make-sequence
                                          make-application
                                          make-conditional
                                          make-toplevel-define
                                          make-toplevel-set
                                          make-toplevel-ref
                                          make-module-set
                                          make-module-ref
                                          make-lexical-set
                                          make-lexical-ref
                                          make-primitive-ref
                                          make-const
                                          make-void)
                                        ((top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top))
                                        ("i467"
                                         "i465"
                                         "i463"
                                         "i461"
                                         "i459"
                                         "i457"
                                         "i455"
                                         "i453"
                                         "i451"
                                         "i449"
                                         "i447"
                                         "i445"
                                         "i443"
                                         "i441"
                                         "i439"
                                         "i437"
                                         "i435"
                                         "i433"
                                         "i431"
                                         "i429"
                                         "i427"
                                         "i425"
                                         "i423"
                                         "i421"
                                         "i419"
                                         "i417"
                                         "i415"
                                         "i413"
                                         "i411"
                                         "i409"
                                         "i407"
                                         "i405"
                                         "i403"
                                         "i401"
                                         "i399"
                                         "i398"
                                         "i396"
                                         "i393"
                                         "i392"
                                         "i391"
                                         "i389"
                                         "i388"
                                         "i386"
                                         "i384"
                                         "i382"
                                         "i380"
                                         "i378"
                                         "i376"
                                         "i374"
                                         "i372"
                                         "i369"
                                         "i367"
                                         "i366"
                                         "i364"
                                         "i362"
                                         "i360"
                                         "i358"
                                         "i357"
                                         "i356"
                                         "i355"
                                         "i353"
                                         "i352"
                                         "i349"
                                         "i347"
                                         "i345"
                                         "i343"
                                         "i341"
                                         "i339"
                                         "i337"
                                         "i336"
                                         "i335"
                                         "i333"
                                         "i331"
                                         "i330"
                                         "i327"
                                         "i326"
                                         "i324"
                                         "i322"
                                         "i320"
                                         "i318"
                                         "i316"
                                         "i314"
                                         "i312"
                                         "i310"
                                         "i308"
                                         "i305"
                                         "i303"
                                         "i301"
                                         "i299"
                                         "i297"
                                         "i295"
                                         "i293"
                                         "i291"
                                         "i289"
                                         "i287"
                                         "i285"
                                         "i283"
                                         "i281"
                                         "i279"
                                         "i277"
                                         "i275"
                                         "i273"
                                         "i271"
                                         "i269"
                                         "i267"
                                         "i265"
                                         "i263"
                                         "i261"
                                         "i260"
                                         "i257"
                                         "i255"
                                         "i254"
                                         "i253"
                                         "i252"
                                         "i251"
                                         "i249"
                                         "i247"
                                         "i245"
                                         "i242"
                                         "i240"
                                         "i238"
                                         "i236"
                                         "i234"
                                         "i232"
                                         "i230"
                                         "i228"
                                         "i226"
                                         "i224"
                                         "i222"
                                         "i220"
                                         "i218"
                                         "i216"
                                         "i214"
                                         "i212"
                                         "i210"
                                         "i208"))
                                      #(ribcage
                                        (define-structure
                                          define-expansion-accessors
                                          define-expansion-constructors)
                                        ((top) (top) (top))
                                        ("i46" "i45" "i44")))
                                     (hygiene guile))
                                  #{mod 10373}#))))
                    (values
                      (#{remodulate 10350}#
                        #{exp 10374}#
                        #{mod 10375}#)
                      #{r 10348}#
                      #{w 10349}#
                      (#{source-annotation 4295}# #{exp 10374}#)
                      #{mod 10375}#)))
                #{tmp 10352}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{e 10347}#))))))
    (#{global-extend 4300}#
      'core
      'if
      (lambda (#{e 10559}#
               #{r 10560}#
               #{w 10561}#
               #{s 10562}#
               #{mod 10563}#)
        (let ((#{tmp 10565}#
                ($sc-dispatch #{e 10559}# '(_ any any))))
          (if #{tmp 10565}#
            (@apply
              (lambda (#{test 10569}# #{then 10570}#)
                (#{build-conditional 4270}#
                  #{s 10562}#
                  (#{expand 4334}#
                    #{test 10569}#
                    #{r 10560}#
                    #{w 10561}#
                    #{mod 10563}#)
                  (#{expand 4334}#
                    #{then 10570}#
                    #{r 10560}#
                    #{w 10561}#
                    #{mod 10563}#)
                  (make-struct/no-tail
                    (vector-ref %expanded-vtables 0)
                    #f)))
              #{tmp 10565}#)
            (let ((#{tmp 10795}#
                    ($sc-dispatch #{e 10559}# '(_ any any any))))
              (if #{tmp 10795}#
                (@apply
                  (lambda (#{test 10799}# #{then 10800}# #{else 10801}#)
                    (#{build-conditional 4270}#
                      #{s 10562}#
                      (#{expand 4334}#
                        #{test 10799}#
                        #{r 10560}#
                        #{w 10561}#
                        #{mod 10563}#)
                      (#{expand 4334}#
                        #{then 10800}#
                        #{r 10560}#
                        #{w 10561}#
                        #{mod 10563}#)
                      (#{expand 4334}#
                        #{else 10801}#
                        #{r 10560}#
                        #{w 10561}#
                        #{mod 10563}#)))
                  #{tmp 10795}#)
                (syntax-violation
                  #f
                  "source expression failed to match any pattern"
                  #{e 10559}#)))))))
    (#{global-extend 4300}#
      'core
      'with-fluids
      (lambda (#{e 11200}#
               #{r 11201}#
               #{w 11202}#
               #{s 11203}#
               #{mod 11204}#)
        (let ((#{tmp 11206}#
                ($sc-dispatch
                  #{e 11200}#
                  '(_ #(each (any any)) any . each-any))))
          (if #{tmp 11206}#
            (@apply
              (lambda (#{fluid 11210}#
                       #{val 11211}#
                       #{b 11212}#
                       #{b* 11213}#)
                (#{build-dynlet 4271}#
                  #{s 11203}#
                  (map (lambda (#{x 11294}#)
                         (#{expand 4334}#
                           #{x 11294}#
                           #{r 11201}#
                           #{w 11202}#
                           #{mod 11204}#))
                       #{fluid 11210}#)
                  (map (lambda (#{x 11364}#)
                         (#{expand 4334}#
                           #{x 11364}#
                           #{r 11201}#
                           #{w 11202}#
                           #{mod 11204}#))
                       #{val 11211}#)
                  (#{expand-body 4338}#
                    (cons #{b 11212}# #{b* 11213}#)
                    (#{wrap 4327}#
                      (begin
                        (if (if (pair? #{e 11200}#) #{s 11203}# #f)
                          (set-source-properties! #{e 11200}# #{s 11203}#))
                        #{e 11200}#)
                      #{w 11202}#
                      #{mod 11204}#)
                    #{r 11201}#
                    #{w 11202}#
                    #{mod 11204}#)))
              #{tmp 11206}#)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              #{e 11200}#)))))
    (module-define!
      (current-module)
      'begin
      (make-syntax-transformer 'begin 'begin '()))
    (module-define!
      (current-module)
      'define
      (make-syntax-transformer 'define 'define '()))
    (module-define!
      (current-module)
      'define-syntax
      (make-syntax-transformer
        'define-syntax
        'define-syntax
        '()))
    (module-define!
      (current-module)
      'eval-when
      (make-syntax-transformer
        'eval-when
        'eval-when
        '()))
    (#{global-extend 4300}#
      'core
      'syntax-case
      (letrec*
        ((#{convert-pattern 11722}#
           (lambda (#{pattern 13319}# #{keys 13320}#)
             (letrec*
               ((#{cvt* 13321}#
                  (lambda (#{p* 13945}# #{n 13946}# #{ids 13947}#)
                    (if (not (pair? #{p* 13945}#))
                      (#{cvt 13323}#
                        #{p* 13945}#
                        #{n 13946}#
                        #{ids 13947}#)
                      (call-with-values
                        (lambda ()
                          (#{cvt* 13321}#
                            (cdr #{p* 13945}#)
                            #{n 13946}#
                            #{ids 13947}#))
                        (lambda (#{y 13950}# #{ids 13951}#)
                          (call-with-values
                            (lambda ()
                              (#{cvt 13323}#
                                (car #{p* 13945}#)
                                #{n 13946}#
                                #{ids 13951}#))
                            (lambda (#{x 13954}# #{ids 13955}#)
                              (values
                                (cons #{x 13954}# #{y 13950}#)
                                #{ids 13955}#))))))))
                (#{v-reverse 13322}#
                  (lambda (#{x 13956}#)
                    (letrec*
                      ((#{loop 13957}#
                         (lambda (#{r 14037}# #{x 14038}#)
                           (if (not (pair? #{x 14038}#))
                             (values #{r 14037}# #{x 14038}#)
                             (#{loop 13957}#
                               (cons (car #{x 14038}#) #{r 14037}#)
                               (cdr #{x 14038}#))))))
                      (#{loop 13957}# '() #{x 13956}#))))
                (#{cvt 13323}#
                  (lambda (#{p 13326}# #{n 13327}# #{ids 13328}#)
                    (if (if (symbol? #{p 13326}#)
                          #t
                          (if (if (vector? #{p 13326}#)
                                (if (= (vector-length #{p 13326}#) 4)
                                  (eq? (vector-ref #{p 13326}# 0)
                                       'syntax-object)
                                  #f)
                                #f)
                            (symbol? (vector-ref #{p 13326}# 1))
                            #f))
                      (if (#{bound-id-member? 4326}#
                            #{p 13326}#
                            #{keys 13320}#)
                        (values
                          (vector 'free-id #{p 13326}#)
                          #{ids 13328}#)
                        (if (if (eq? (if (if (vector? #{p 13326}#)
                                           (if (= (vector-length #{p 13326}#)
                                                  4)
                                             (eq? (vector-ref #{p 13326}# 0)
                                                  'syntax-object)
                                             #f)
                                           #f)
                                       (vector-ref #{p 13326}# 1)
                                       #{p 13326}#)
                                     (if (if (= (vector-length
                                                  '#(syntax-object
                                                     _
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(p n ids)
                                                        #((top) (top) (top))
                                                        #("i3736"
                                                          "i3737"
                                                          "i3738"))
                                                      #(ribcage
                                                        (cvt v-reverse cvt*)
                                                        ((top) (top) (top))
                                                        ("i3709"
                                                         "i3707"
                                                         "i3705"))
                                                      #(ribcage
                                                        #(pattern keys)
                                                        #((top) (top))
                                                        #("i3703" "i3704"))
                                                      #(ribcage
                                                        (gen-syntax-case
                                                          gen-clause
                                                          build-dispatch-call
                                                          convert-pattern)
                                                        ((top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                        ("i3699"
                                                         "i3697"
                                                         "i3695"
                                                         "i3693"))
                                                      #(ribcage
                                                        (lambda-var-list
                                                          gen-var
                                                          strip
                                                          expand-lambda-case
                                                          lambda*-formals
                                                          expand-simple-lambda
                                                          lambda-formals
                                                          ellipsis?
                                                          expand-void
                                                          eval-local-transformer
                                                          expand-local-syntax
                                                          expand-body
                                                          expand-macro
                                                          expand-application
                                                          expand-expr
                                                          expand
                                                          syntax-type
                                                          parse-when-list
                                                          expand-install-global
                                                          expand-top-sequence
                                                          expand-sequence
                                                          source-wrap
                                                          wrap
                                                          bound-id-member?
                                                          distinct-bound-ids?
                                                          valid-bound-ids?
                                                          bound-id=?
                                                          free-id=?
                                                          id-var-name
                                                          same-marks?
                                                          join-marks
                                                          join-wraps
                                                          smart-append
                                                          make-binding-wrap
                                                          extend-ribcage!
                                                          make-empty-ribcage
                                                          new-mark
                                                          anti-mark
                                                          the-anti-mark
                                                          top-marked?
                                                          top-wrap
                                                          empty-wrap
                                                          set-ribcage-labels!
                                                          set-ribcage-marks!
                                                          set-ribcage-symnames!
                                                          ribcage-labels
                                                          ribcage-marks
                                                          ribcage-symnames
                                                          ribcage?
                                                          make-ribcage
                                                          gen-labels
                                                          gen-label
                                                          make-rename
                                                          rename-marks
                                                          rename-new
                                                          rename-old
                                                          subst-rename?
                                                          wrap-subst
                                                          wrap-marks
                                                          make-wrap
                                                          id-sym-name&marks
                                                          id-sym-name
                                                          id?
                                                          nonsymbol-id?
                                                          global-extend
                                                          lookup
                                                          macros-only-env
                                                          extend-var-env
                                                          extend-env
                                                          null-env
                                                          binding-value
                                                          binding-type
                                                          make-binding
                                                          arg-check
                                                          source-annotation
                                                          no-source
                                                          set-syntax-object-module!
                                                          set-syntax-object-wrap!
                                                          set-syntax-object-expression!
                                                          syntax-object-module
                                                          syntax-object-wrap
                                                          syntax-object-expression
                                                          syntax-object?
                                                          make-syntax-object
                                                          build-lexical-var
                                                          build-letrec
                                                          build-named-let
                                                          build-let
                                                          build-sequence
                                                          build-data
                                                          build-primref
                                                          build-lambda-case
                                                          build-case-lambda
                                                          build-simple-lambda
                                                          build-global-definition
                                                          build-global-assignment
                                                          build-global-reference
                                                          analyze-variable
                                                          build-lexical-assignment
                                                          build-lexical-reference
                                                          build-dynlet
                                                          build-conditional
                                                          build-application
                                                          build-void
                                                          maybe-name-value!
                                                          decorate-source
                                                          get-global-definition-hook
                                                          put-global-definition-hook
                                                          gensym-hook
                                                          local-eval-hook
                                                          top-level-eval-hook
                                                          fx<
                                                          fx=
                                                          fx-
                                                          fx+
                                                          set-lambda-meta!
                                                          lambda-meta
                                                          lambda?
                                                          make-dynlet
                                                          make-letrec
                                                          make-let
                                                          make-lambda-case
                                                          make-lambda
                                                          make-sequence
                                                          make-application
                                                          make-conditional
                                                          make-toplevel-define
                                                          make-toplevel-set
                                                          make-toplevel-ref
                                                          make-module-set
                                                          make-module-ref
                                                          make-lexical-set
                                                          make-lexical-ref
                                                          make-primitive-ref
                                                          make-const
                                                          make-void)
                                                        ((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                        ("i467"
                                                         "i465"
                                                         "i463"
                                                         "i461"
                                                         "i459"
                                                         "i457"
                                                         "i455"
                                                         "i453"
                                                         "i451"
                                                         "i449"
                                                         "i447"
                                                         "i445"
                                                         "i443"
                                                         "i441"
                                                         "i439"
                                                         "i437"
                                                         "i435"
                                                         "i433"
                                                         "i431"
                                                         "i429"
                                                         "i427"
                                                         "i425"
                                                         "i423"
                                                         "i421"
                                                         "i419"
                                                         "i417"
                                                         "i415"
                                                         "i413"
                                                         "i411"
                                                         "i409"
                                                         "i407"
                                                         "i405"
                                                         "i403"
                                                         "i401"
                                                         "i399"
                                                         "i398"
                                                         "i396"
                                                         "i393"
                                                         "i392"
                                                         "i391"
                                                         "i389"
                                                         "i388"
                                                         "i386"
                                                         "i384"
                                                         "i382"
                                                         "i380"
                                                         "i378"
                                                         "i376"
                                                         "i374"
                                                         "i372"
                                                         "i369"
                                                         "i367"
                                                         "i366"
                                                         "i364"
                                                         "i362"
                                                         "i360"
                                                         "i358"
                                                         "i357"
                                                         "i356"
                                                         "i355"
                                                         "i353"
                                                         "i352"
                                                         "i349"
                                                         "i347"
                                                         "i345"
                                                         "i343"
                                                         "i341"
                                                         "i339"
                                                         "i337"
                                                         "i336"
                                                         "i335"
                                                         "i333"
                                                         "i331"
                                                         "i330"
                                                         "i327"
                                                         "i326"
                                                         "i324"
                                                         "i322"
                                                         "i320"
                                                         "i318"
                                                         "i316"
                                                         "i314"
                                                         "i312"
                                                         "i310"
                                                         "i308"
                                                         "i305"
                                                         "i303"
                                                         "i301"
                                                         "i299"
                                                         "i297"
                                                         "i295"
                                                         "i293"
                                                         "i291"
                                                         "i289"
                                                         "i287"
                                                         "i285"
                                                         "i283"
                                                         "i281"
                                                         "i279"
                                                         "i277"
                                                         "i275"
                                                         "i273"
                                                         "i271"
                                                         "i269"
                                                         "i267"
                                                         "i265"
                                                         "i263"
                                                         "i261"
                                                         "i260"
                                                         "i257"
                                                         "i255"
                                                         "i254"
                                                         "i253"
                                                         "i252"
                                                         "i251"
                                                         "i249"
                                                         "i247"
                                                         "i245"
                                                         "i242"
                                                         "i240"
                                                         "i238"
                                                         "i236"
                                                         "i234"
                                                         "i232"
                                                         "i230"
                                                         "i228"
                                                         "i226"
                                                         "i224"
                                                         "i222"
                                                         "i220"
                                                         "i218"
                                                         "i216"
                                                         "i214"
                                                         "i212"
                                                         "i210"
                                                         "i208"))
                                                      #(ribcage
                                                        (define-structure
                                                          define-expansion-accessors
                                                          define-expansion-constructors)
                                                        ((top) (top) (top))
                                                        ("i46" "i45" "i44")))
                                                     (hygiene guile)))
                                                4)
                                           #t
                                           #f)
                                       '_
                                       '#(syntax-object
                                          _
                                          ((top)
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(p n ids)
                                             #((top) (top) (top))
                                             #("i3736" "i3737" "i3738"))
                                           #(ribcage
                                             (cvt v-reverse cvt*)
                                             ((top) (top) (top))
                                             ("i3709" "i3707" "i3705"))
                                           #(ribcage
                                             #(pattern keys)
                                             #((top) (top))
                                             #("i3703" "i3704"))
                                           #(ribcage
                                             (gen-syntax-case
                                               gen-clause
                                               build-dispatch-call
                                               convert-pattern)
                                             ((top) (top) (top) (top))
                                             ("i3699" "i3697" "i3695" "i3693"))
                                           #(ribcage
                                             (lambda-var-list
                                               gen-var
                                               strip
                                               expand-lambda-case
                                               lambda*-formals
                                               expand-simple-lambda
                                               lambda-formals
                                               ellipsis?
                                               expand-void
                                               eval-local-transformer
                                               expand-local-syntax
                                               expand-body
                                               expand-macro
                                               expand-application
                                               expand-expr
                                               expand
                                               syntax-type
                                               parse-when-list
                                               expand-install-global
                                               expand-top-sequence
                                               expand-sequence
                                               source-wrap
                                               wrap
                                               bound-id-member?
                                               distinct-bound-ids?
                                               valid-bound-ids?
                                               bound-id=?
                                               free-id=?
                                               id-var-name
                                               same-marks?
                                               join-marks
                                               join-wraps
                                               smart-append
                                               make-binding-wrap
                                               extend-ribcage!
                                               make-empty-ribcage
                                               new-mark
                                               anti-mark
                                               the-anti-mark
                                               top-marked?
                                               top-wrap
                                               empty-wrap
                                               set-ribcage-labels!
                                               set-ribcage-marks!
                                               set-ribcage-symnames!
                                               ribcage-labels
                                               ribcage-marks
                                               ribcage-symnames
                                               ribcage?
                                               make-ribcage
                                               gen-labels
                                               gen-label
                                               make-rename
                                               rename-marks
                                               rename-new
                                               rename-old
                                               subst-rename?
                                               wrap-subst
                                               wrap-marks
                                               make-wrap
                                               id-sym-name&marks
                                               id-sym-name
                                               id?
                                               nonsymbol-id?
                                               global-extend
                                               lookup
                                               macros-only-env
                                               extend-var-env
                                               extend-env
                                               null-env
                                               binding-value
                                               binding-type
                                               make-binding
                                               arg-check
                                               source-annotation
                                               no-source
                                               set-syntax-object-module!
                                               set-syntax-object-wrap!
                                               set-syntax-object-expression!
                                               syntax-object-module
                                               syntax-object-wrap
                                               syntax-object-expression
                                               syntax-object?
                                               make-syntax-object
                                               build-lexical-var
                                               build-letrec
                                               build-named-let
                                               build-let
                                               build-sequence
                                               build-data
                                               build-primref
                                               build-lambda-case
                                               build-case-lambda
                                               build-simple-lambda
                                               build-global-definition
                                               build-global-assignment
                                               build-global-reference
                                               analyze-variable
                                               build-lexical-assignment
                                               build-lexical-reference
                                               build-dynlet
                                               build-conditional
                                               build-application
                                               build-void
                                               maybe-name-value!
                                               decorate-source
                                               get-global-definition-hook
                                               put-global-definition-hook
                                               gensym-hook
                                               local-eval-hook
                                               top-level-eval-hook
                                               fx<
                                               fx=
                                               fx-
                                               fx+
                                               set-lambda-meta!
                                               lambda-meta
                                               lambda?
                                               make-dynlet
                                               make-letrec
                                               make-let
                                               make-lambda-case
                                               make-lambda
                                               make-sequence
                                               make-application
                                               make-conditional
                                               make-toplevel-define
                                               make-toplevel-set
                                               make-toplevel-ref
                                               make-module-set
                                               make-module-ref
                                               make-lexical-set
                                               make-lexical-ref
                                               make-primitive-ref
                                               make-const
                                               make-void)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("i467"
                                              "i465"
                                              "i463"
                                              "i461"
                                              "i459"
                                              "i457"
                                              "i455"
                                              "i453"
                                              "i451"
                                              "i449"
                                              "i447"
                                              "i445"
                                              "i443"
                                              "i441"
                                              "i439"
                                              "i437"
                                              "i435"
                                              "i433"
                                              "i431"
                                              "i429"
                                              "i427"
                                              "i425"
                                              "i423"
                                              "i421"
                                              "i419"
                                              "i417"
                                              "i415"
                                              "i413"
                                              "i411"
                                              "i409"
                                              "i407"
                                              "i405"
                                              "i403"
                                              "i401"
                                              "i399"
                                              "i398"
                                              "i396"
                                              "i393"
                                              "i392"
                                              "i391"
                                              "i389"
                                              "i388"
                                              "i386"
                                              "i384"
                                              "i382"
                                              "i380"
                                              "i378"
                                              "i376"
                                              "i374"
                                              "i372"
                                              "i369"
                                              "i367"
                                              "i366"
                                              "i364"
                                              "i362"
                                              "i360"
                                              "i358"
                                              "i357"
                                              "i356"
                                              "i355"
                                              "i353"
                                              "i352"
                                              "i349"
                                              "i347"
                                              "i345"
                                              "i343"
                                              "i341"
                                              "i339"
                                              "i337"
                                              "i336"
                                              "i335"
                                              "i333"
                                              "i331"
                                              "i330"
                                              "i327"
                                              "i326"
                                              "i324"
                                              "i322"
                                              "i320"
                                              "i318"
                                              "i316"
                                              "i314"
                                              "i312"
                                              "i310"
                                              "i308"
                                              "i305"
                                              "i303"
                                              "i301"
                                              "i299"
                                              "i297"
                                              "i295"
                                              "i293"
                                              "i291"
                                              "i289"
                                              "i287"
                                              "i285"
                                              "i283"
                                              "i281"
                                              "i279"
                                              "i277"
                                              "i275"
                                              "i273"
                                              "i271"
                                              "i269"
                                              "i267"
                                              "i265"
                                              "i263"
                                              "i261"
                                              "i260"
                                              "i257"
                                              "i255"
                                              "i254"
                                              "i253"
                                              "i252"
                                              "i251"
                                              "i249"
                                              "i247"
                                              "i245"
                                              "i242"
                                              "i240"
                                              "i238"
                                              "i236"
                                              "i234"
                                              "i232"
                                              "i230"
                                              "i228"
                                              "i226"
                                              "i224"
                                              "i222"
                                              "i220"
                                              "i218"
                                              "i216"
                                              "i214"
                                              "i212"
                                              "i210"
                                              "i208"))
                                           #(ribcage
                                             (define-structure
                                               define-expansion-accessors
                                               define-expansion-constructors)
                                             ((top) (top) (top))
                                             ("i46" "i45" "i44")))
                                          (hygiene guile))))
                              (eq? (#{id-var-name 4321}# #{p 13326}# '(()))
                                   (#{id-var-name 4321}#
                                     '#(syntax-object
                                        _
                                        ((top)
                                         #(ribcage () () ())
                                         #(ribcage
                                           #(p n ids)
                                           #((top) (top) (top))
                                           #("i3736" "i3737" "i3738"))
                                         #(ribcage
                                           (cvt v-reverse cvt*)
                                           ((top) (top) (top))
                                           ("i3709" "i3707" "i3705"))
                                         #(ribcage
                                           #(pattern keys)
                                           #((top) (top))
                                           #("i3703" "i3704"))
                                         #(ribcage
                                           (gen-syntax-case
                                             gen-clause
                                             build-dispatch-call
                                             convert-pattern)
                                           ((top) (top) (top) (top))
                                           ("i3699" "i3697" "i3695" "i3693"))
                                         #(ribcage
                                           (lambda-var-list
                                             gen-var
                                             strip
                                             expand-lambda-case
                                             lambda*-formals
                                             expand-simple-lambda
                                             lambda-formals
                                             ellipsis?
                                             expand-void
                                             eval-local-transformer
                                             expand-local-syntax
                                             expand-body
                                             expand-macro
                                             expand-application
                                             expand-expr
                                             expand
                                             syntax-type
                                             parse-when-list
                                             expand-install-global
                                             expand-top-sequence
                                             expand-sequence
                                             source-wrap
                                             wrap
                                             bound-id-member?
                                             distinct-bound-ids?
                                             valid-bound-ids?
                                             bound-id=?
                                             free-id=?
                                             id-var-name
                                             same-marks?
                                             join-marks
                                             join-wraps
                                             smart-append
                                             make-binding-wrap
                                             extend-ribcage!
                                             make-empty-ribcage
                                             new-mark
                                             anti-mark
                                             the-anti-mark
                                             top-marked?
                                             top-wrap
                                             empty-wrap
                                             set-ribcage-labels!
                                             set-ribcage-marks!
                                             set-ribcage-symnames!
                                             ribcage-labels
                                             ribcage-marks
                                             ribcage-symnames
                                             ribcage?
                                             make-ribcage
                                             gen-labels
                                             gen-label
                                             make-rename
                                             rename-marks
                                             rename-new
                                             rename-old
                                             subst-rename?
                                             wrap-subst
                                             wrap-marks
                                             make-wrap
                                             id-sym-name&marks
                                             id-sym-name
                                             id?
                                             nonsymbol-id?
                                             global-extend
                                             lookup
                                             macros-only-env
                                             extend-var-env
                                             extend-env
                                             null-env
                                             binding-value
                                             binding-type
                                             make-binding
                                             arg-check
                                             source-annotation
                                             no-source
                                             set-syntax-object-module!
                                             set-syntax-object-wrap!
                                             set-syntax-object-expression!
                                             syntax-object-module
                                             syntax-object-wrap
                                             syntax-object-expression
                                             syntax-object?
                                             make-syntax-object
                                             build-lexical-var
                                             build-letrec
                                             build-named-let
                                             build-let
                                             build-sequence
                                             build-data
                                             build-primref
                                             build-lambda-case
                                             build-case-lambda
                                             build-simple-lambda
                                             build-global-definition
                                             build-global-assignment
                                             build-global-reference
                                             analyze-variable
                                             build-lexical-assignment
                                             build-lexical-reference
                                             build-dynlet
                                             build-conditional
                                             build-application
                                             build-void
                                             maybe-name-value!
                                             decorate-source
                                             get-global-definition-hook
                                             put-global-definition-hook
                                             gensym-hook
                                             local-eval-hook
                                             top-level-eval-hook
                                             fx<
                                             fx=
                                             fx-
                                             fx+
                                             set-lambda-meta!
                                             lambda-meta
                                             lambda?
                                             make-dynlet
                                             make-letrec
                                             make-let
                                             make-lambda-case
                                             make-lambda
                                             make-sequence
                                             make-application
                                             make-conditional
                                             make-toplevel-define
                                             make-toplevel-set
                                             make-toplevel-ref
                                             make-module-set
                                             make-module-ref
                                             make-lexical-set
                                             make-lexical-ref
                                             make-primitive-ref
                                             make-const
                                             make-void)
                                           ((top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top))
                                           ("i467"
                                            "i465"
                                            "i463"
                                            "i461"
                                            "i459"
                                            "i457"
                                            "i455"
                                            "i453"
                                            "i451"
                                            "i449"
                                            "i447"
                                            "i445"
                                            "i443"
                                            "i441"
                                            "i439"
                                            "i437"
                                            "i435"
                                            "i433"
                                            "i431"
                                            "i429"
                                            "i427"
                                            "i425"
                                            "i423"
                                            "i421"
                                            "i419"
                                            "i417"
                                            "i415"
                                            "i413"
                                            "i411"
                                            "i409"
                                            "i407"
                                            "i405"
                                            "i403"
                                            "i401"
                                            "i399"
                                            "i398"
                                            "i396"
                                            "i393"
                                            "i392"
                                            "i391"
                                            "i389"
                                            "i388"
                                            "i386"
                                            "i384"
                                            "i382"
                                            "i380"
                                            "i378"
                                            "i376"
                                            "i374"
                                            "i372"
                                            "i369"
                                            "i367"
                                            "i366"
                                            "i364"
                                            "i362"
                                            "i360"
                                            "i358"
                                            "i357"
                                            "i356"
                                            "i355"
                                            "i353"
                                            "i352"
                                            "i349"
                                            "i347"
                                            "i345"
                                            "i343"
                                            "i341"
                                            "i339"
                                            "i337"
                                            "i336"
                                            "i335"
                                            "i333"
                                            "i331"
                                            "i330"
                                            "i327"
                                            "i326"
                                            "i324"
                                            "i322"
                                            "i320"
                                            "i318"
                                            "i316"
                                            "i314"
                                            "i312"
                                            "i310"
                                            "i308"
                                            "i305"
                                            "i303"
                                            "i301"
                                            "i299"
                                            "i297"
                                            "i295"
                                            "i293"
                                            "i291"
                                            "i289"
                                            "i287"
                                            "i285"
                                            "i283"
                                            "i281"
                                            "i279"
                                            "i277"
                                            "i275"
                                            "i273"
                                            "i271"
                                            "i269"
                                            "i267"
                                            "i265"
                                            "i263"
                                            "i261"
                                            "i260"
                                            "i257"
                                            "i255"
                                            "i254"
                                            "i253"
                                            "i252"
                                            "i251"
                                            "i249"
                                            "i247"
                                            "i245"
                                            "i242"
                                            "i240"
                                            "i238"
                                            "i236"
                                            "i234"
                                            "i232"
                                            "i230"
                                            "i228"
                                            "i226"
                                            "i224"
                                            "i222"
                                            "i220"
                                            "i218"
                                            "i216"
                                            "i214"
                                            "i212"
                                            "i210"
                                            "i208"))
                                         #(ribcage
                                           (define-structure
                                             define-expansion-accessors
                                             define-expansion-constructors)
                                           ((top) (top) (top))
                                           ("i46" "i45" "i44")))
                                        (hygiene guile))
                                     '(())))
                              #f)
                          (values '_ #{ids 13328}#)
                          (values
                            'any
                            (cons (cons #{p 13326}# #{n 13327}#)
                                  #{ids 13328}#))))
                      (let ((#{tmp 13648}#
                              ($sc-dispatch #{p 13326}# '(any any))))
                        (if (if #{tmp 13648}#
                              (@apply
                                (lambda (#{x 13652}# #{dots 13653}#)
                                  (if (if (if (vector? #{dots 13653}#)
                                            (if (= (vector-length
                                                     #{dots 13653}#)
                                                   4)
                                              (eq? (vector-ref
                                                     #{dots 13653}#
                                                     0)
                                                   'syntax-object)
                                              #f)
                                            #f)
                                        (symbol? (vector-ref #{dots 13653}# 1))
                                        #f)
                                    (if (eq? (if (if (vector? #{dots 13653}#)
                                                   (if (= (vector-length
                                                            #{dots 13653}#)
                                                          4)
                                                     (eq? (vector-ref
                                                            #{dots 13653}#
                                                            0)
                                                          'syntax-object)
                                                     #f)
                                                   #f)
                                               (vector-ref #{dots 13653}# 1)
                                               #{dots 13653}#)
                                             (if (if (= (vector-length
                                                          '#(syntax-object
                                                             ...
                                                             ((top)
                                                              #(ribcage
                                                                ()
                                                                ()
                                                                ())
                                                              #(ribcage
                                                                ()
                                                                ()
                                                                ())
                                                              #(ribcage
                                                                #(x)
                                                                #((top))
                                                                #("i2219"))
                                                              #(ribcage
                                                                (lambda-var-list
                                                                  gen-var
                                                                  strip
                                                                  expand-lambda-case
                                                                  lambda*-formals
                                                                  expand-simple-lambda
                                                                  lambda-formals
                                                                  ellipsis?
                                                                  expand-void
                                                                  eval-local-transformer
                                                                  expand-local-syntax
                                                                  expand-body
                                                                  expand-macro
                                                                  expand-application
                                                                  expand-expr
                                                                  expand
                                                                  syntax-type
                                                                  parse-when-list
                                                                  expand-install-global
                                                                  expand-top-sequence
                                                                  expand-sequence
                                                                  source-wrap
                                                                  wrap
                                                                  bound-id-member?
                                                                  distinct-bound-ids?
                                                                  valid-bound-ids?
                                                                  bound-id=?
                                                                  free-id=?
                                                                  id-var-name
                                                                  same-marks?
                                                                  join-marks
                                                                  join-wraps
                                                                  smart-append
                                                                  make-binding-wrap
                                                                  extend-ribcage!
                                                                  make-empty-ribcage
                                                                  new-mark
                                                                  anti-mark
                                                                  the-anti-mark
                                                                  top-marked?
                                                                  top-wrap
                                                                  empty-wrap
                                                                  set-ribcage-labels!
                                                                  set-ribcage-marks!
                                                                  set-ribcage-symnames!
                                                                  ribcage-labels
                                                                  ribcage-marks
                                                                  ribcage-symnames
                                                                  ribcage?
                                                                  make-ribcage
                                                                  gen-labels
                                                                  gen-label
                                                                  make-rename
                                                                  rename-marks
                                                                  rename-new
                                                                  rename-old
                                                                  subst-rename?
                                                                  wrap-subst
                                                                  wrap-marks
                                                                  make-wrap
                                                                  id-sym-name&marks
                                                                  id-sym-name
                                                                  id?
                                                                  nonsymbol-id?
                                                                  global-extend
                                                                  lookup
                                                                  macros-only-env
                                                                  extend-var-env
                                                                  extend-env
                                                                  null-env
                                                                  binding-value
                                                                  binding-type
                                                                  make-binding
                                                                  arg-check
                                                                  source-annotation
                                                                  no-source
                                                                  set-syntax-object-module!
                                                                  set-syntax-object-wrap!
                                                                  set-syntax-object-expression!
                                                                  syntax-object-module
                                                                  syntax-object-wrap
                                                                  syntax-object-expression
                                                                  syntax-object?
                                                                  make-syntax-object
                                                                  build-lexical-var
                                                                  build-letrec
                                                                  build-named-let
                                                                  build-let
                                                                  build-sequence
                                                                  build-data
                                                                  build-primref
                                                                  build-lambda-case
                                                                  build-case-lambda
                                                                  build-simple-lambda
                                                                  build-global-definition
                                                                  build-global-assignment
                                                                  build-global-reference
                                                                  analyze-variable
                                                                  build-lexical-assignment
                                                                  build-lexical-reference
                                                                  build-dynlet
                                                                  build-conditional
                                                                  build-application
                                                                  build-void
                                                                  maybe-name-value!
                                                                  decorate-source
                                                                  get-global-definition-hook
                                                                  put-global-definition-hook
                                                                  gensym-hook
                                                                  local-eval-hook
                                                                  top-level-eval-hook
                                                                  fx<
                                                                  fx=
                                                                  fx-
                                                                  fx+
                                                                  set-lambda-meta!
                                                                  lambda-meta
                                                                  lambda?
                                                                  make-dynlet
                                                                  make-letrec
                                                                  make-let
                                                                  make-lambda-case
                                                                  make-lambda
                                                                  make-sequence
                                                                  make-application
                                                                  make-conditional
                                                                  make-toplevel-define
                                                                  make-toplevel-set
                                                                  make-toplevel-ref
                                                                  make-module-set
                                                                  make-module-ref
                                                                  make-lexical-set
                                                                  make-lexical-ref
                                                                  make-primitive-ref
                                                                  make-const
                                                                  make-void)
                                                                ((top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                                ("i467"
                                                                 "i465"
                                                                 "i463"
                                                                 "i461"
                                                                 "i459"
                                                                 "i457"
                                                                 "i455"
                                                                 "i453"
                                                                 "i451"
                                                                 "i449"
                                                                 "i447"
                                                                 "i445"
                                                                 "i443"
                                                                 "i441"
                                                                 "i439"
                                                                 "i437"
                                                                 "i435"
                                                                 "i433"
                                                                 "i431"
                                                                 "i429"
                                                                 "i427"
                                                                 "i425"
                                                                 "i423"
                                                                 "i421"
                                                                 "i419"
                                                                 "i417"
                                                                 "i415"
                                                                 "i413"
                                                                 "i411"
                                                                 "i409"
                                                                 "i407"
                                                                 "i405"
                                                                 "i403"
                                                                 "i401"
                                                                 "i399"
                                                                 "i398"
                                                                 "i396"
                                                                 "i393"
                                                                 "i392"
                                                                 "i391"
                                                                 "i389"
                                                                 "i388"
                                                                 "i386"
                                                                 "i384"
                                                                 "i382"
                                                                 "i380"
                                                                 "i378"
                                                                 "i376"
                                                                 "i374"
                                                                 "i372"
                                                                 "i369"
                                                                 "i367"
                                                                 "i366"
                                                                 "i364"
                                                                 "i362"
                                                                 "i360"
                                                                 "i358"
                                                                 "i357"
                                                                 "i356"
                                                                 "i355"
                                                                 "i353"
                                                                 "i352"
                                                                 "i349"
                                                                 "i347"
                                                                 "i345"
                                                                 "i343"
                                                                 "i341"
                                                                 "i339"
                                                                 "i337"
                                                                 "i336"
                                                                 "i335"
                                                                 "i333"
                                                                 "i331"
                                                                 "i330"
                                                                 "i327"
                                                                 "i326"
                                                                 "i324"
                                                                 "i322"
                                                                 "i320"
                                                                 "i318"
                                                                 "i316"
                                                                 "i314"
                                                                 "i312"
                                                                 "i310"
                                                                 "i308"
                                                                 "i305"
                                                                 "i303"
                                                                 "i301"
                                                                 "i299"
                                                                 "i297"
                                                                 "i295"
                                                                 "i293"
                                                                 "i291"
                                                                 "i289"
                                                                 "i287"
                                                                 "i285"
                                                                 "i283"
                                                                 "i281"
                                                                 "i279"
                                                                 "i277"
                                                                 "i275"
                                                                 "i273"
                                                                 "i271"
                                                                 "i269"
                                                                 "i267"
                                                                 "i265"
                                                                 "i263"
                                                                 "i261"
                                                                 "i260"
                                                                 "i257"
                                                                 "i255"
                                                                 "i254"
                                                                 "i253"
                                                                 "i252"
                                                                 "i251"
                                                                 "i249"
                                                                 "i247"
                                                                 "i245"
                                                                 "i242"
                                                                 "i240"
                                                                 "i238"
                                                                 "i236"
                                                                 "i234"
                                                                 "i232"
                                                                 "i230"
                                                                 "i228"
                                                                 "i226"
                                                                 "i224"
                                                                 "i222"
                                                                 "i220"
                                                                 "i218"
                                                                 "i216"
                                                                 "i214"
                                                                 "i212"
                                                                 "i210"
                                                                 "i208"))
                                                              #(ribcage
                                                                (define-structure
                                                                  define-expansion-accessors
                                                                  define-expansion-constructors)
                                                                ((top)
                                                                 (top)
                                                                 (top))
                                                                ("i46"
                                                                 "i45"
                                                                 "i44")))
                                                             (hygiene guile)))
                                                        4)
                                                   #t
                                                   #f)
                                               '...
                                               '#(syntax-object
                                                  ...
                                                  ((top)
                                                   #(ribcage () () ())
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i2219"))
                                                   #(ribcage
                                                     (lambda-var-list
                                                       gen-var
                                                       strip
                                                       expand-lambda-case
                                                       lambda*-formals
                                                       expand-simple-lambda
                                                       lambda-formals
                                                       ellipsis?
                                                       expand-void
                                                       eval-local-transformer
                                                       expand-local-syntax
                                                       expand-body
                                                       expand-macro
                                                       expand-application
                                                       expand-expr
                                                       expand
                                                       syntax-type
                                                       parse-when-list
                                                       expand-install-global
                                                       expand-top-sequence
                                                       expand-sequence
                                                       source-wrap
                                                       wrap
                                                       bound-id-member?
                                                       distinct-bound-ids?
                                                       valid-bound-ids?
                                                       bound-id=?
                                                       free-id=?
                                                       id-var-name
                                                       same-marks?
                                                       join-marks
                                                       join-wraps
                                                       smart-append
                                                       make-binding-wrap
                                                       extend-ribcage!
                                                       make-empty-ribcage
                                                       new-mark
                                                       anti-mark
                                                       the-anti-mark
                                                       top-marked?
                                                       top-wrap
                                                       empty-wrap
                                                       set-ribcage-labels!
                                                       set-ribcage-marks!
                                                       set-ribcage-symnames!
                                                       ribcage-labels
                                                       ribcage-marks
                                                       ribcage-symnames
                                                       ribcage?
                                                       make-ribcage
                                                       gen-labels
                                                       gen-label
                                                       make-rename
                                                       rename-marks
                                                       rename-new
                                                       rename-old
                                                       subst-rename?
                                                       wrap-subst
                                                       wrap-marks
                                                       make-wrap
                                                       id-sym-name&marks
                                                       id-sym-name
                                                       id?
                                                       nonsymbol-id?
                                                       global-extend
                                                       lookup
                                                       macros-only-env
                                                       extend-var-env
                                                       extend-env
                                                       null-env
                                                       binding-value
                                                       binding-type
                                                       make-binding
                                                       arg-check
                                                       source-annotation
                                                       no-source
                                                       set-syntax-object-module!
                                                       set-syntax-object-wrap!
                                                       set-syntax-object-expression!
                                                       syntax-object-module
                                                       syntax-object-wrap
                                                       syntax-object-expression
                                                       syntax-object?
                                                       make-syntax-object
                                                       build-lexical-var
                                                       build-letrec
                                                       build-named-let
                                                       build-let
                                                       build-sequence
                                                       build-data
                                                       build-primref
                                                       build-lambda-case
                                                       build-case-lambda
                                                       build-simple-lambda
                                                       build-global-definition
                                                       build-global-assignment
                                                       build-global-reference
                                                       analyze-variable
                                                       build-lexical-assignment
                                                       build-lexical-reference
                                                       build-dynlet
                                                       build-conditional
                                                       build-application
                                                       build-void
                                                       maybe-name-value!
                                                       decorate-source
                                                       get-global-definition-hook
                                                       put-global-definition-hook
                                                       gensym-hook
                                                       local-eval-hook
                                                       top-level-eval-hook
                                                       fx<
                                                       fx=
                                                       fx-
                                                       fx+
                                                       set-lambda-meta!
                                                       lambda-meta
                                                       lambda?
                                                       make-dynlet
                                                       make-letrec
                                                       make-let
                                                       make-lambda-case
                                                       make-lambda
                                                       make-sequence
                                                       make-application
                                                       make-conditional
                                                       make-toplevel-define
                                                       make-toplevel-set
                                                       make-toplevel-ref
                                                       make-module-set
                                                       make-module-ref
                                                       make-lexical-set
                                                       make-lexical-ref
                                                       make-primitive-ref
                                                       make-const
                                                       make-void)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("i467"
                                                      "i465"
                                                      "i463"
                                                      "i461"
                                                      "i459"
                                                      "i457"
                                                      "i455"
                                                      "i453"
                                                      "i451"
                                                      "i449"
                                                      "i447"
                                                      "i445"
                                                      "i443"
                                                      "i441"
                                                      "i439"
                                                      "i437"
                                                      "i435"
                                                      "i433"
                                                      "i431"
                                                      "i429"
                                                      "i427"
                                                      "i425"
                                                      "i423"
                                                      "i421"
                                                      "i419"
                                                      "i417"
                                                      "i415"
                                                      "i413"
                                                      "i411"
                                                      "i409"
                                                      "i407"
                                                      "i405"
                                                      "i403"
                                                      "i401"
                                                      "i399"
                                                      "i398"
                                                      "i396"
                                                      "i393"
                                                      "i392"
                                                      "i391"
                                                      "i389"
                                                      "i388"
                                                      "i386"
                                                      "i384"
                                                      "i382"
                                                      "i380"
                                                      "i378"
                                                      "i376"
                                                      "i374"
                                                      "i372"
                                                      "i369"
                                                      "i367"
                                                      "i366"
                                                      "i364"
                                                      "i362"
                                                      "i360"
                                                      "i358"
                                                      "i357"
                                                      "i356"
                                                      "i355"
                                                      "i353"
                                                      "i352"
                                                      "i349"
                                                      "i347"
                                                      "i345"
                                                      "i343"
                                                      "i341"
                                                      "i339"
                                                      "i337"
                                                      "i336"
                                                      "i335"
                                                      "i333"
                                                      "i331"
                                                      "i330"
                                                      "i327"
                                                      "i326"
                                                      "i324"
                                                      "i322"
                                                      "i320"
                                                      "i318"
                                                      "i316"
                                                      "i314"
                                                      "i312"
                                                      "i310"
                                                      "i308"
                                                      "i305"
                                                      "i303"
                                                      "i301"
                                                      "i299"
                                                      "i297"
                                                      "i295"
                                                      "i293"
                                                      "i291"
                                                      "i289"
                                                      "i287"
                                                      "i285"
                                                      "i283"
                                                      "i281"
                                                      "i279"
                                                      "i277"
                                                      "i275"
                                                      "i273"
                                                      "i271"
                                                      "i269"
                                                      "i267"
                                                      "i265"
                                                      "i263"
                                                      "i261"
                                                      "i260"
                                                      "i257"
                                                      "i255"
                                                      "i254"
                                                      "i253"
                                                      "i252"
                                                      "i251"
                                                      "i249"
                                                      "i247"
                                                      "i245"
                                                      "i242"
                                                      "i240"
                                                      "i238"
                                                      "i236"
                                                      "i234"
                                                      "i232"
                                                      "i230"
                                                      "i228"
                                                      "i226"
                                                      "i224"
                                                      "i222"
                                                      "i220"
                                                      "i218"
                                                      "i216"
                                                      "i214"
                                                      "i212"
                                                      "i210"
                                                      "i208"))
                                                   #(ribcage
                                                     (define-structure
                                                       define-expansion-accessors
                                                       define-expansion-constructors)
                                                     ((top) (top) (top))
                                                     ("i46" "i45" "i44")))
                                                  (hygiene guile))))
                                      (eq? (#{id-var-name 4321}#
                                             #{dots 13653}#
                                             '(()))
                                           (#{id-var-name 4321}#
                                             '#(syntax-object
                                                ...
                                                ((top)
                                                 #(ribcage () () ())
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("i2219"))
                                                 #(ribcage
                                                   (lambda-var-list
                                                     gen-var
                                                     strip
                                                     expand-lambda-case
                                                     lambda*-formals
                                                     expand-simple-lambda
                                                     lambda-formals
                                                     ellipsis?
                                                     expand-void
                                                     eval-local-transformer
                                                     expand-local-syntax
                                                     expand-body
                                                     expand-macro
                                                     expand-application
                                                     expand-expr
                                                     expand
                                                     syntax-type
                                                     parse-when-list
                                                     expand-install-global
                                                     expand-top-sequence
                                                     expand-sequence
                                                     source-wrap
                                                     wrap
                                                     bound-id-member?
                                                     distinct-bound-ids?
                                                     valid-bound-ids?
                                                     bound-id=?
                                                     free-id=?
                                                     id-var-name
                                                     same-marks?
                                                     join-marks
                                                     join-wraps
                                                     smart-append
                                                     make-binding-wrap
                                                     extend-ribcage!
                                                     make-empty-ribcage
                                                     new-mark
                                                     anti-mark
                                                     the-anti-mark
                                                     top-marked?
                                                     top-wrap
                                                     empty-wrap
                                                     set-ribcage-labels!
                                                     set-ribcage-marks!
                                                     set-ribcage-symnames!
                                                     ribcage-labels
                                                     ribcage-marks
                                                     ribcage-symnames
                                                     ribcage?
                                                     make-ribcage
                                                     gen-labels
                                                     gen-label
                                                     make-rename
                                                     rename-marks
                                                     rename-new
                                                     rename-old
                                                     subst-rename?
                                                     wrap-subst
                                                     wrap-marks
                                                     make-wrap
                                                     id-sym-name&marks
                                                     id-sym-name
                                                     id?
                                                     nonsymbol-id?
                                                     global-extend
                                                     lookup
                                                     macros-only-env
                                                     extend-var-env
                                                     extend-env
                                                     null-env
                                                     binding-value
                                                     binding-type
                                                     make-binding
                                                     arg-check
                                                     source-annotation
                                                     no-source
                                                     set-syntax-object-module!
                                                     set-syntax-object-wrap!
                                                     set-syntax-object-expression!
                                                     syntax-object-module
                                                     syntax-object-wrap
                                                     syntax-object-expression
                                                     syntax-object?
                                                     make-syntax-object
                                                     build-lexical-var
                                                     build-letrec
                                                     build-named-let
                                                     build-let
                                                     build-sequence
                                                     build-data
                                                     build-primref
                                                     build-lambda-case
                                                     build-case-lambda
                                                     build-simple-lambda
                                                     build-global-definition
                                                     build-global-assignment
                                                     build-global-reference
                                                     analyze-variable
                                                     build-lexical-assignment
                                                     build-lexical-reference
                                                     build-dynlet
                                                     build-conditional
                                                     build-application
                                                     build-void
                                                     maybe-name-value!
                                                     decorate-source
                                                     get-global-definition-hook
                                                     put-global-definition-hook
                                                     gensym-hook
                                                     local-eval-hook
                                                     top-level-eval-hook
                                                     fx<
                                                     fx=
                                                     fx-
                                                     fx+
                                                     set-lambda-meta!
                                                     lambda-meta
                                                     lambda?
                                                     make-dynlet
                                                     make-letrec
                                                     make-let
                                                     make-lambda-case
                                                     make-lambda
                                                     make-sequence
                                                     make-application
                                                     make-conditional
                                                     make-toplevel-define
                                                     make-toplevel-set
                                                     make-toplevel-ref
                                                     make-module-set
                                                     make-module-ref
                                                     make-lexical-set
                                                     make-lexical-ref
                                                     make-primitive-ref
                                                     make-const
                                                     make-void)
                                                   ((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                   ("i467"
                                                    "i465"
                                                    "i463"
                                                    "i461"
                                                    "i459"
                                                    "i457"
                                                    "i455"
                                                    "i453"
                                                    "i451"
                                                    "i449"
                                                    "i447"
                                                    "i445"
                                                    "i443"
                                                    "i441"
                                                    "i439"
                                                    "i437"
                                                    "i435"
                                                    "i433"
                                                    "i431"
                                                    "i429"
                                                    "i427"
                                                    "i425"
                                                    "i423"
                                                    "i421"
                                                    "i419"
                                                    "i417"
                                                    "i415"
                                                    "i413"
                                                    "i411"
                                                    "i409"
                                                    "i407"
                                                    "i405"
                                                    "i403"
                                                    "i401"
                                                    "i399"
                                                    "i398"
                                                    "i396"
                                                    "i393"
                                                    "i392"
                                                    "i391"
                                                    "i389"
                                                    "i388"
                                                    "i386"
                                                    "i384"
                                                    "i382"
                                                    "i380"
                                                    "i378"
                                                    "i376"
                                                    "i374"
                                                    "i372"
                                                    "i369"
                                                    "i367"
                                                    "i366"
                                                    "i364"
                                                    "i362"
                                                    "i360"
                                                    "i358"
                                                    "i357"
                                                    "i356"
                                                    "i355"
                                                    "i353"
                                                    "i352"
                                                    "i349"
                                                    "i347"
                                                    "i345"
                                                    "i343"
                                                    "i341"
                                                    "i339"
                                                    "i337"
                                                    "i336"
                                                    "i335"
                                                    "i333"
                                                    "i331"
                                                    "i330"
                                                    "i327"
                                                    "i326"
                                                    "i324"
                                                    "i322"
                                                    "i320"
                                                    "i318"
                                                    "i316"
                                                    "i314"
                                                    "i312"
                                                    "i310"
                                                    "i308"
                                                    "i305"
                                                    "i303"
                                                    "i301"
                                                    "i299"
                                                    "i297"
                                                    "i295"
                                                    "i293"
                                                    "i291"
                                                    "i289"
                                                    "i287"
                                                    "i285"
                                                    "i283"
                                                    "i281"
                                                    "i279"
                                                    "i277"
                                                    "i275"
                                                    "i273"
                                                    "i271"
                                                    "i269"
                                                    "i267"
                                                    "i265"
                                                    "i263"
                                                    "i261"
                                                    "i260"
                                                    "i257"
                                                    "i255"
                                                    "i254"
                                                    "i253"
                                                    "i252"
                                                    "i251"
                                                    "i249"
                                                    "i247"
                                                    "i245"
                                                    "i242"
                                                    "i240"
                                                    "i238"
                                                    "i236"
                                                    "i234"
                                                    "i232"
                                                    "i230"
                                                    "i228"
                                                    "i226"
                                                    "i224"
                                                    "i222"
                                                    "i220"
                                                    "i218"
                                                    "i216"
                                                    "i214"
                                                    "i212"
                                                    "i210"
                                                    "i208"))
                                                 #(ribcage
                                                   (define-structure
                                                     define-expansion-accessors
                                                     define-expansion-constructors)
                                                   ((top) (top) (top))
                                                   ("i46" "i45" "i44")))
                                                (hygiene guile))
                                             '(())))
                                      #f)
                                    #f))
                                #{tmp 13648}#)
                              #f)
                          (@apply
                            (lambda (#{x 13753}# #{dots 13754}#)
                              (call-with-values
                                (lambda ()
                                  (#{cvt 13323}#
                                    #{x 13753}#
                                    (#{1+}# #{n 13327}#)
                                    #{ids 13328}#))
                                (lambda (#{p 13755}# #{ids 13756}#)
                                  (values
                                    (if (eq? #{p 13755}# 'any)
                                      'each-any
                                      (vector 'each #{p 13755}#))
                                    #{ids 13756}#))))
                            #{tmp 13648}#)
                          (let ((#{tmp 13757}#
                                  ($sc-dispatch #{p 13326}# '(any any . any))))
                            (if (if #{tmp 13757}#
                                  (@apply
                                    (lambda (#{x 13761}#
                                             #{dots 13762}#
                                             #{ys 13763}#)
                                      (if (if (if (vector? #{dots 13762}#)
                                                (if (= (vector-length
                                                         #{dots 13762}#)
                                                       4)
                                                  (eq? (vector-ref
                                                         #{dots 13762}#
                                                         0)
                                                       'syntax-object)
                                                  #f)
                                                #f)
                                            (symbol?
                                              (vector-ref #{dots 13762}# 1))
                                            #f)
                                        (if (eq? (if (if (vector?
                                                           #{dots 13762}#)
                                                       (if (= (vector-length
                                                                #{dots 13762}#)
                                                              4)
                                                         (eq? (vector-ref
                                                                #{dots 13762}#
                                                                0)
                                                              'syntax-object)
                                                         #f)
                                                       #f)
                                                   (vector-ref
                                                     #{dots 13762}#
                                                     1)
                                                   #{dots 13762}#)
                                                 (if (if (= (vector-length
                                                              '#(syntax-object
                                                                 ...
                                                                 ((top)
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(x)
                                                                    #((top))
                                                                    #("i2219"))
                                                                  #(ribcage
                                                                    (lambda-var-list
                                                                      gen-var
                                                                      strip
                                                                      expand-lambda-case
                                                                      lambda*-formals
                                                                      expand-simple-lambda
                                                                      lambda-formals
                                                                      ellipsis?
                                                                      expand-void
                                                                      eval-local-transformer
                                                                      expand-local-syntax
                                                                      expand-body
                                                                      expand-macro
                                                                      expand-application
                                                                      expand-expr
                                                                      expand
                                                                      syntax-type
                                                                      parse-when-list
                                                                      expand-install-global
                                                                      expand-top-sequence
                                                                      expand-sequence
                                                                      source-wrap
                                                                      wrap
                                                                      bound-id-member?
                                                                      distinct-bound-ids?
                                                                      valid-bound-ids?
                                                                      bound-id=?
                                                                      free-id=?
                                                                      id-var-name
                                                                      same-marks?
                                                                      join-marks
                                                                      join-wraps
                                                                      smart-append
                                                                      make-binding-wrap
                                                                      extend-ribcage!
                                                                      make-empty-ribcage
                                                                      new-mark
                                                                      anti-mark
                                                                      the-anti-mark
                                                                      top-marked?
                                                                      top-wrap
                                                                      empty-wrap
                                                                      set-ribcage-labels!
                                                                      set-ribcage-marks!
                                                                      set-ribcage-symnames!
                                                                      ribcage-labels
                                                                      ribcage-marks
                                                                      ribcage-symnames
                                                                      ribcage?
                                                                      make-ribcage
                                                                      gen-labels
                                                                      gen-label
                                                                      make-rename
                                                                      rename-marks
                                                                      rename-new
                                                                      rename-old
                                                                      subst-rename?
                                                                      wrap-subst
                                                                      wrap-marks
                                                                      make-wrap
                                                                      id-sym-name&marks
                                                                      id-sym-name
                                                                      id?
                                                                      nonsymbol-id?
                                                                      global-extend
                                                                      lookup
                                                                      macros-only-env
                                                                      extend-var-env
                                                                      extend-env
                                                                      null-env
                                                                      binding-value
                                                                      binding-type
                                                                      make-binding
                                                                      arg-check
                                                                      source-annotation
                                                                      no-source
                                                                      set-syntax-object-module!
                                                                      set-syntax-object-wrap!
                                                                      set-syntax-object-expression!
                                                                      syntax-object-module
                                                                      syntax-object-wrap
                                                                      syntax-object-expression
                                                                      syntax-object?
                                                                      make-syntax-object
                                                                      build-lexical-var
                                                                      build-letrec
                                                                      build-named-let
                                                                      build-let
                                                                      build-sequence
                                                                      build-data
                                                                      build-primref
                                                                      build-lambda-case
                                                                      build-case-lambda
                                                                      build-simple-lambda
                                                                      build-global-definition
                                                                      build-global-assignment
                                                                      build-global-reference
                                                                      analyze-variable
                                                                      build-lexical-assignment
                                                                      build-lexical-reference
                                                                      build-dynlet
                                                                      build-conditional
                                                                      build-application
                                                                      build-void
                                                                      maybe-name-value!
                                                                      decorate-source
                                                                      get-global-definition-hook
                                                                      put-global-definition-hook
                                                                      gensym-hook
                                                                      local-eval-hook
                                                                      top-level-eval-hook
                                                                      fx<
                                                                      fx=
                                                                      fx-
                                                                      fx+
                                                                      set-lambda-meta!
                                                                      lambda-meta
                                                                      lambda?
                                                                      make-dynlet
                                                                      make-letrec
                                                                      make-let
                                                                      make-lambda-case
                                                                      make-lambda
                                                                      make-sequence
                                                                      make-application
                                                                      make-conditional
                                                                      make-toplevel-define
                                                                      make-toplevel-set
                                                                      make-toplevel-ref
                                                                      make-module-set
                                                                      make-module-ref
                                                                      make-lexical-set
                                                                      make-lexical-ref
                                                                      make-primitive-ref
                                                                      make-const
                                                                      make-void)
                                                                    ((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                    ("i467"
                                                                     "i465"
                                                                     "i463"
                                                                     "i461"
                                                                     "i459"
                                                                     "i457"
                                                                     "i455"
                                                                     "i453"
                                                                     "i451"
                                                                     "i449"
                                                                     "i447"
                                                                     "i445"
                                                                     "i443"
                                                                     "i441"
                                                                     "i439"
                                                                     "i437"
                                                                     "i435"
                                                                     "i433"
                                                                     "i431"
                                                                     "i429"
                                                                     "i427"
                                                                     "i425"
                                                                     "i423"
                                                                     "i421"
                                                                     "i419"
                                                                     "i417"
                                                                     "i415"
                                                                     "i413"
                                                                     "i411"
                                                                     "i409"
                                                                     "i407"
                                                                     "i405"
                                                                     "i403"
                                                                     "i401"
                                                                     "i399"
                                                                     "i398"
                                                                     "i396"
                                                                     "i393"
                                                                     "i392"
                                                                     "i391"
                                                                     "i389"
                                                                     "i388"
                                                                     "i386"
                                                                     "i384"
                                                                     "i382"
                                                                     "i380"
                                                                     "i378"
                                                                     "i376"
                                                                     "i374"
                                                                     "i372"
                                                                     "i369"
                                                                     "i367"
                                                                     "i366"
                                                                     "i364"
                                                                     "i362"
                                                                     "i360"
                                                                     "i358"
                                                                     "i357"
                                                                     "i356"
                                                                     "i355"
                                                                     "i353"
                                                                     "i352"
                                                                     "i349"
                                                                     "i347"
                                                                     "i345"
                                                                     "i343"
                                                                     "i341"
                                                                     "i339"
                                                                     "i337"
                                                                     "i336"
                                                                     "i335"
                                                                     "i333"
                                                                     "i331"
                                                                     "i330"
                                                                     "i327"
                                                                     "i326"
                                                                     "i324"
                                                                     "i322"
                                                                     "i320"
                                                                     "i318"
                                                                     "i316"
                                                                     "i314"
                                                                     "i312"
                                                                     "i310"
                                                                     "i308"
                                                                     "i305"
                                                                     "i303"
                                                                     "i301"
                                                                     "i299"
                                                                     "i297"
                                                                     "i295"
                                                                     "i293"
                                                                     "i291"
                                                                     "i289"
                                                                     "i287"
                                                                     "i285"
                                                                     "i283"
                                                                     "i281"
                                                                     "i279"
                                                                     "i277"
                                                                     "i275"
                                                                     "i273"
                                                                     "i271"
                                                                     "i269"
                                                                     "i267"
                                                                     "i265"
                                                                     "i263"
                                                                     "i261"
                                                                     "i260"
                                                                     "i257"
                                                                     "i255"
                                                                     "i254"
                                                                     "i253"
                                                                     "i252"
                                                                     "i251"
                                                                     "i249"
                                                                     "i247"
                                                                     "i245"
                                                                     "i242"
                                                                     "i240"
                                                                     "i238"
                                                                     "i236"
                                                                     "i234"
                                                                     "i232"
                                                                     "i230"
                                                                     "i228"
                                                                     "i226"
                                                                     "i224"
                                                                     "i222"
                                                                     "i220"
                                                                     "i218"
                                                                     "i216"
                                                                     "i214"
                                                                     "i212"
                                                                     "i210"
                                                                     "i208"))
                                                                  #(ribcage
                                                                    (define-structure
                                                                      define-expansion-accessors
                                                                      define-expansion-constructors)
                                                                    ((top)
                                                                     (top)
                                                                     (top))
                                                                    ("i46"
                                                                     "i45"
                                                                     "i44")))
                                                                 (hygiene
                                                                   guile)))
                                                            4)
                                                       #t
                                                       #f)
                                                   '...
                                                   '#(syntax-object
                                                      ...
                                                      ((top)
                                                       #(ribcage () () ())
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i2219"))
                                                       #(ribcage
                                                         (lambda-var-list
                                                           gen-var
                                                           strip
                                                           expand-lambda-case
                                                           lambda*-formals
                                                           expand-simple-lambda
                                                           lambda-formals
                                                           ellipsis?
                                                           expand-void
                                                           eval-local-transformer
                                                           expand-local-syntax
                                                           expand-body
                                                           expand-macro
                                                           expand-application
                                                           expand-expr
                                                           expand
                                                           syntax-type
                                                           parse-when-list
                                                           expand-install-global
                                                           expand-top-sequence
                                                           expand-sequence
                                                           source-wrap
                                                           wrap
                                                           bound-id-member?
                                                           distinct-bound-ids?
                                                           valid-bound-ids?
                                                           bound-id=?
                                                           free-id=?
                                                           id-var-name
                                                           same-marks?
                                                           join-marks
                                                           join-wraps
                                                           smart-append
                                                           make-binding-wrap
                                                           extend-ribcage!
                                                           make-empty-ribcage
                                                           new-mark
                                                           anti-mark
                                                           the-anti-mark
                                                           top-marked?
                                                           top-wrap
                                                           empty-wrap
                                                           set-ribcage-labels!
                                                           set-ribcage-marks!
                                                           set-ribcage-symnames!
                                                           ribcage-labels
                                                           ribcage-marks
                                                           ribcage-symnames
                                                           ribcage?
                                                           make-ribcage
                                                           gen-labels
                                                           gen-label
                                                           make-rename
                                                           rename-marks
                                                           rename-new
                                                           rename-old
                                                           subst-rename?
                                                           wrap-subst
                                                           wrap-marks
                                                           make-wrap
                                                           id-sym-name&marks
                                                           id-sym-name
                                                           id?
                                                           nonsymbol-id?
                                                           global-extend
                                                           lookup
                                                           macros-only-env
                                                           extend-var-env
                                                           extend-env
                                                           null-env
                                                           binding-value
                                                           binding-type
                                                           make-binding
                                                           arg-check
                                                           source-annotation
                                                           no-source
                                                           set-syntax-object-module!
                                                           set-syntax-object-wrap!
                                                           set-syntax-object-expression!
                                                           syntax-object-module
                                                           syntax-object-wrap
                                                           syntax-object-expression
                                                           syntax-object?
                                                           make-syntax-object
                                                           build-lexical-var
                                                           build-letrec
                                                           build-named-let
                                                           build-let
                                                           build-sequence
                                                           build-data
                                                           build-primref
                                                           build-lambda-case
                                                           build-case-lambda
                                                           build-simple-lambda
                                                           build-global-definition
                                                           build-global-assignment
                                                           build-global-reference
                                                           analyze-variable
                                                           build-lexical-assignment
                                                           build-lexical-reference
                                                           build-dynlet
                                                           build-conditional
                                                           build-application
                                                           build-void
                                                           maybe-name-value!
                                                           decorate-source
                                                           get-global-definition-hook
                                                           put-global-definition-hook
                                                           gensym-hook
                                                           local-eval-hook
                                                           top-level-eval-hook
                                                           fx<
                                                           fx=
                                                           fx-
                                                           fx+
                                                           set-lambda-meta!
                                                           lambda-meta
                                                           lambda?
                                                           make-dynlet
                                                           make-letrec
                                                           make-let
                                                           make-lambda-case
                                                           make-lambda
                                                           make-sequence
                                                           make-application
                                                           make-conditional
                                                           make-toplevel-define
                                                           make-toplevel-set
                                                           make-toplevel-ref
                                                           make-module-set
                                                           make-module-ref
                                                           make-lexical-set
                                                           make-lexical-ref
                                                           make-primitive-ref
                                                           make-const
                                                           make-void)
                                                         ((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                         ("i467"
                                                          "i465"
                                                          "i463"
                                                          "i461"
                                                          "i459"
                                                          "i457"
                                                          "i455"
                                                          "i453"
                                                          "i451"
                                                          "i449"
                                                          "i447"
                                                          "i445"
                                                          "i443"
                                                          "i441"
                                                          "i439"
                                                          "i437"
                                                          "i435"
                                                          "i433"
                                                          "i431"
                                                          "i429"
                                                          "i427"
                                                          "i425"
                                                          "i423"
                                                          "i421"
                                                          "i419"
                                                          "i417"
                                                          "i415"
                                                          "i413"
                                                          "i411"
                                                          "i409"
                                                          "i407"
                                                          "i405"
                                                          "i403"
                                                          "i401"
                                                          "i399"
                                                          "i398"
                                                          "i396"
                                                          "i393"
                                                          "i392"
                                                          "i391"
                                                          "i389"
                                                          "i388"
                                                          "i386"
                                                          "i384"
                                                          "i382"
                                                          "i380"
                                                          "i378"
                                                          "i376"
                                                          "i374"
                                                          "i372"
                                                          "i369"
                                                          "i367"
                                                          "i366"
                                                          "i364"
                                                          "i362"
                                                          "i360"
                                                          "i358"
                                                          "i357"
                                                          "i356"
                                                          "i355"
                                                          "i353"
                                                          "i352"
                                                          "i349"
                                                          "i347"
                                                          "i345"
                                                          "i343"
                                                          "i341"
                                                          "i339"
                                                          "i337"
                                                          "i336"
                                                          "i335"
                                                          "i333"
                                                          "i331"
                                                          "i330"
                                                          "i327"
                                                          "i326"
                                                          "i324"
                                                          "i322"
                                                          "i320"
                                                          "i318"
                                                          "i316"
                                                          "i314"
                                                          "i312"
                                                          "i310"
                                                          "i308"
                                                          "i305"
                                                          "i303"
                                                          "i301"
                                                          "i299"
                                                          "i297"
                                                          "i295"
                                                          "i293"
                                                          "i291"
                                                          "i289"
                                                          "i287"
                                                          "i285"
                                                          "i283"
                                                          "i281"
                                                          "i279"
                                                          "i277"
                                                          "i275"
                                                          "i273"
                                                          "i271"
                                                          "i269"
                                                          "i267"
                                                          "i265"
                                                          "i263"
                                                          "i261"
                                                          "i260"
                                                          "i257"
                                                          "i255"
                                                          "i254"
                                                          "i253"
                                                          "i252"
                                                          "i251"
                                                          "i249"
                                                          "i247"
                                                          "i245"
                                                          "i242"
                                                          "i240"
                                                          "i238"
                                                          "i236"
                                                          "i234"
                                                          "i232"
                                                          "i230"
                                                          "i228"
                                                          "i226"
                                                          "i224"
                                                          "i222"
                                                          "i220"
                                                          "i218"
                                                          "i216"
                                                          "i214"
                                                          "i212"
                                                          "i210"
                                                          "i208"))
                                                       #(ribcage
                                                         (define-structure
                                                           define-expansion-accessors
                                                           define-expansion-constructors)
                                                         ((top) (top) (top))
                                                         ("i46" "i45" "i44")))
                                                      (hygiene guile))))
                                          (eq? (#{id-var-name 4321}#
                                                 #{dots 13762}#
                                                 '(()))
                                               (#{id-var-name 4321}#
                                                 '#(syntax-object
                                                    ...
                                                    ((top)
                                                     #(ribcage () () ())
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("i2219"))
                                                     #(ribcage
                                                       (lambda-var-list
                                                         gen-var
                                                         strip
                                                         expand-lambda-case
                                                         lambda*-formals
                                                         expand-simple-lambda
                                                         lambda-formals
                                                         ellipsis?
                                                         expand-void
                                                         eval-local-transformer
                                                         expand-local-syntax
                                                         expand-body
                                                         expand-macro
                                                         expand-application
                                                         expand-expr
                                                         expand
                                                         syntax-type
                                                         parse-when-list
                                                         expand-install-global
                                                         expand-top-sequence
                                                         expand-sequence
                                                         source-wrap
                                                         wrap
                                                         bound-id-member?
                                                         distinct-bound-ids?
                                                         valid-bound-ids?
                                                         bound-id=?
                                                         free-id=?
                                                         id-var-name
                                                         same-marks?
                                                         join-marks
                                                         join-wraps
                                                         smart-append
                                                         make-binding-wrap
                                                         extend-ribcage!
                                                         make-empty-ribcage
                                                         new-mark
                                                         anti-mark
                                                         the-anti-mark
                                                         top-marked?
                                                         top-wrap
                                                         empty-wrap
                                                         set-ribcage-labels!
                                                         set-ribcage-marks!
                                                         set-ribcage-symnames!
                                                         ribcage-labels
                                                         ribcage-marks
                                                         ribcage-symnames
                                                         ribcage?
                                                         make-ribcage
                                                         gen-labels
                                                         gen-label
                                                         make-rename
                                                         rename-marks
                                                         rename-new
                                                         rename-old
                                                         subst-rename?
                                                         wrap-subst
                                                         wrap-marks
                                                         make-wrap
                                                         id-sym-name&marks
                                                         id-sym-name
                                                         id?
                                                         nonsymbol-id?
                                                         global-extend
                                                         lookup
                                                         macros-only-env
                                                         extend-var-env
                                                         extend-env
                                                         null-env
                                                         binding-value
                                                         binding-type
                                                         make-binding
                                                         arg-check
                                                         source-annotation
                                                         no-source
                                                         set-syntax-object-module!
                                                         set-syntax-object-wrap!
                                                         set-syntax-object-expression!
                                                         syntax-object-module
                                                         syntax-object-wrap
                                                         syntax-object-expression
                                                         syntax-object?
                                                         make-syntax-object
                                                         build-lexical-var
                                                         build-letrec
                                                         build-named-let
                                                         build-let
                                                         build-sequence
                                                         build-data
                                                         build-primref
                                                         build-lambda-case
                                                         build-case-lambda
                                                         build-simple-lambda
                                                         build-global-definition
                                                         build-global-assignment
                                                         build-global-reference
                                                         analyze-variable
                                                         build-lexical-assignment
                                                         build-lexical-reference
                                                         build-dynlet
                                                         build-conditional
                                                         build-application
                                                         build-void
                                                         maybe-name-value!
                                                         decorate-source
                                                         get-global-definition-hook
                                                         put-global-definition-hook
                                                         gensym-hook
                                                         local-eval-hook
                                                         top-level-eval-hook
                                                         fx<
                                                         fx=
                                                         fx-
                                                         fx+
                                                         set-lambda-meta!
                                                         lambda-meta
                                                         lambda?
                                                         make-dynlet
                                                         make-letrec
                                                         make-let
                                                         make-lambda-case
                                                         make-lambda
                                                         make-sequence
                                                         make-application
                                                         make-conditional
                                                         make-toplevel-define
                                                         make-toplevel-set
                                                         make-toplevel-ref
                                                         make-module-set
                                                         make-module-ref
                                                         make-lexical-set
                                                         make-lexical-ref
                                                         make-primitive-ref
                                                         make-const
                                                         make-void)
                                                       ((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                       ("i467"
                                                        "i465"
                                                        "i463"
                                                        "i461"
                                                        "i459"
                                                        "i457"
                                                        "i455"
                                                        "i453"
                                                        "i451"
                                                        "i449"
                                                        "i447"
                                                        "i445"
                                                        "i443"
                                                        "i441"
                                                        "i439"
                                                        "i437"
                                                        "i435"
                                                        "i433"
                                                        "i431"
                                                        "i429"
                                                        "i427"
                                                        "i425"
                                                        "i423"
                                                        "i421"
                                                        "i419"
                                                        "i417"
                                                        "i415"
                                                        "i413"
                                                        "i411"
                                                        "i409"
                                                        "i407"
                                                        "i405"
                                                        "i403"
                                                        "i401"
                                                        "i399"
                                                        "i398"
                                                        "i396"
                                                        "i393"
                                                        "i392"
                                                        "i391"
                                                        "i389"
                                                        "i388"
                                                        "i386"
                                                        "i384"
                                                        "i382"
                                                        "i380"
                                                        "i378"
                                                        "i376"
                                                        "i374"
                                                        "i372"
                                                        "i369"
                                                        "i367"
                                                        "i366"
                                                        "i364"
                                                        "i362"
                                                        "i360"
                                                        "i358"
                                                        "i357"
                                                        "i356"
                                                        "i355"
                                                        "i353"
                                                        "i352"
                                                        "i349"
                                                        "i347"
                                                        "i345"
                                                        "i343"
                                                        "i341"
                                                        "i339"
                                                        "i337"
                                                        "i336"
                                                        "i335"
                                                        "i333"
                                                        "i331"
                                                        "i330"
                                                        "i327"
                                                        "i326"
                                                        "i324"
                                                        "i322"
                                                        "i320"
                                                        "i318"
                                                        "i316"
                                                        "i314"
                                                        "i312"
                                                        "i310"
                                                        "i308"
                                                        "i305"
                                                        "i303"
                                                        "i301"
                                                        "i299"
                                                        "i297"
                                                        "i295"
                                                        "i293"
                                                        "i291"
                                                        "i289"
                                                        "i287"
                                                        "i285"
                                                        "i283"
                                                        "i281"
                                                        "i279"
                                                        "i277"
                                                        "i275"
                                                        "i273"
                                                        "i271"
                                                        "i269"
                                                        "i267"
                                                        "i265"
                                                        "i263"
                                                        "i261"
                                                        "i260"
                                                        "i257"
                                                        "i255"
                                                        "i254"
                                                        "i253"
                                                        "i252"
                                                        "i251"
                                                        "i249"
                                                        "i247"
                                                        "i245"
                                                        "i242"
                                                        "i240"
                                                        "i238"
                                                        "i236"
                                                        "i234"
                                                        "i232"
                                                        "i230"
                                                        "i228"
                                                        "i226"
                                                        "i224"
                                                        "i222"
                                                        "i220"
                                                        "i218"
                                                        "i216"
                                                        "i214"
                                                        "i212"
                                                        "i210"
                                                        "i208"))
                                                     #(ribcage
                                                       (define-structure
                                                         define-expansion-accessors
                                                         define-expansion-constructors)
                                                       ((top) (top) (top))
                                                       ("i46" "i45" "i44")))
                                                    (hygiene guile))
                                                 '(())))
                                          #f)
                                        #f))
                                    #{tmp 13757}#)
                                  #f)
                              (@apply
                                (lambda (#{x 13863}#
                                         #{dots 13864}#
                                         #{ys 13865}#)
                                  (call-with-values
                                    (lambda ()
                                      (#{cvt* 13321}#
                                        #{ys 13865}#
                                        #{n 13327}#
                                        #{ids 13328}#))
                                    (lambda (#{ys 13868}# #{ids 13869}#)
                                      (call-with-values
                                        (lambda ()
                                          (#{cvt 13323}#
                                            #{x 13863}#
                                            (#{1+}# #{n 13327}#)
                                            #{ids 13869}#))
                                        (lambda (#{x 13870}# #{ids 13871}#)
                                          (call-with-values
                                            (lambda ()
                                              (#{v-reverse 13322}#
                                                #{ys 13868}#))
                                            (lambda (#{ys 13904}# #{e 13905}#)
                                              (values
                                                (vector
                                                  'each+
                                                  #{x 13870}#
                                                  #{ys 13904}#
                                                  #{e 13905}#)
                                                #{ids 13871}#))))))))
                                #{tmp 13757}#)
                              (let ((#{tmp 13906}#
                                      ($sc-dispatch #{p 13326}# '(any . any))))
                                (if #{tmp 13906}#
                                  (@apply
                                    (lambda (#{x 13910}# #{y 13911}#)
                                      (call-with-values
                                        (lambda ()
                                          (#{cvt 13323}#
                                            #{y 13911}#
                                            #{n 13327}#
                                            #{ids 13328}#))
                                        (lambda (#{y 13912}# #{ids 13913}#)
                                          (call-with-values
                                            (lambda ()
                                              (#{cvt 13323}#
                                                #{x 13910}#
                                                #{n 13327}#
                                                #{ids 13913}#))
                                            (lambda (#{x 13914}# #{ids 13915}#)
                                              (values
                                                (cons #{x 13914}# #{y 13912}#)
                                                #{ids 13915}#))))))
                                    #{tmp 13906}#)
                                  (let ((#{tmp 13916}#
                                          ($sc-dispatch #{p 13326}# '())))
                                    (if #{tmp 13916}#
                                      (@apply
                                        (lambda () (values '() #{ids 13328}#))
                                        #{tmp 13916}#)
                                      (let ((#{tmp 13920}#
                                              ($sc-dispatch
                                                #{p 13326}#
                                                '#(vector each-any))))
                                        (if #{tmp 13920}#
                                          (@apply
                                            (lambda (#{x 13924}#)
                                              (call-with-values
                                                (lambda ()
                                                  (#{cvt 13323}#
                                                    #{x 13924}#
                                                    #{n 13327}#
                                                    #{ids 13328}#))
                                                (lambda (#{p 13925}#
                                                         #{ids 13926}#)
                                                  (values
                                                    (vector
                                                      'vector
                                                      #{p 13925}#)
                                                    #{ids 13926}#))))
                                            #{tmp 13920}#)
                                          (values
                                            (vector
                                              'atom
                                              (#{strip 4347}#
                                                #{p 13326}#
                                                '(())))
                                            #{ids 13328}#)))))))))))))))
               (#{cvt 13323}# #{pattern 13319}# 0 '()))))
         (#{build-dispatch-call 11723}#
           (lambda (#{pvars 14039}#
                    #{exp 14040}#
                    #{y 14041}#
                    #{r 14042}#
                    #{mod 14043}#)
             (let ((#{ids 14044}# (map car #{pvars 14039}#)))
               (begin
                 (map cdr #{pvars 14039}#)
                 (let ((#{labels 14046}#
                         (#{gen-labels 4305}# #{ids 14044}#))
                       (#{new-vars 14047}#
                         (map #{gen-var 4348}# #{ids 14044}#)))
                   (#{build-application 4269}#
                     #f
                     (if (equal? (module-name (current-module)) '(guile))
                       (make-struct/no-tail
                         (vector-ref %expanded-vtables 7)
                         #f
                         'apply)
                       (make-struct/no-tail
                         (vector-ref %expanded-vtables 5)
                         #f
                         '(guile)
                         'apply
                         #f))
                     (list (#{build-simple-lambda 4278}#
                             #f
                             (map syntax->datum #{ids 14044}#)
                             #f
                             #{new-vars 14047}#
                             '()
                             (#{expand 4334}#
                               #{exp 14040}#
                               (#{extend-env 4296}#
                                 #{labels 14046}#
                                 (map (lambda (#{var 14372}# #{level 14373}#)
                                        (cons 'syntax
                                              (cons #{var 14372}#
                                                    #{level 14373}#)))
                                      #{new-vars 14047}#
                                      (map cdr #{pvars 14039}#))
                                 #{r 14042}#)
                               (#{make-binding-wrap 4316}#
                                 #{ids 14044}#
                                 #{labels 14046}#
                                 '(()))
                               #{mod 14043}#))
                           #{y 14041}#)))))))
         (#{gen-clause 11724}#
           (lambda (#{x 12691}#
                    #{keys 12692}#
                    #{clauses 12693}#
                    #{r 12694}#
                    #{pat 12695}#
                    #{fender 12696}#
                    #{exp 12697}#
                    #{mod 12698}#)
             (call-with-values
               (lambda ()
                 (#{convert-pattern 11722}#
                   #{pat 12695}#
                   #{keys 12692}#))
               (lambda (#{p 12853}# #{pvars 12854}#)
                 (if (not (#{distinct-bound-ids? 4325}#
                            (map car #{pvars 12854}#)))
                   (syntax-violation
                     'syntax-case
                     "duplicate pattern variable"
                     #{pat 12695}#)
                   (if (not (and-map
                              (lambda (#{x 12970}#)
                                (not (let ((#{x 12974}# (car #{x 12970}#)))
                                       (if (if (if (vector? #{x 12974}#)
                                                 (if (= (vector-length
                                                          #{x 12974}#)
                                                        4)
                                                   (eq? (vector-ref
                                                          #{x 12974}#
                                                          0)
                                                        'syntax-object)
                                                   #f)
                                                 #f)
                                             (symbol?
                                               (vector-ref #{x 12974}# 1))
                                             #f)
                                         (if (eq? (if (if (vector? #{x 12974}#)
                                                        (if (= (vector-length
                                                                 #{x 12974}#)
                                                               4)
                                                          (eq? (vector-ref
                                                                 #{x 12974}#
                                                                 0)
                                                               'syntax-object)
                                                          #f)
                                                        #f)
                                                    (vector-ref #{x 12974}# 1)
                                                    #{x 12974}#)
                                                  (if (if (= (vector-length
                                                               '#(syntax-object
                                                                  ...
                                                                  ((top)
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     #(x)
                                                                     #((top))
                                                                     #("i2219"))
                                                                   #(ribcage
                                                                     (lambda-var-list
                                                                       gen-var
                                                                       strip
                                                                       expand-lambda-case
                                                                       lambda*-formals
                                                                       expand-simple-lambda
                                                                       lambda-formals
                                                                       ellipsis?
                                                                       expand-void
                                                                       eval-local-transformer
                                                                       expand-local-syntax
                                                                       expand-body
                                                                       expand-macro
                                                                       expand-application
                                                                       expand-expr
                                                                       expand
                                                                       syntax-type
                                                                       parse-when-list
                                                                       expand-install-global
                                                                       expand-top-sequence
                                                                       expand-sequence
                                                                       source-wrap
                                                                       wrap
                                                                       bound-id-member?
                                                                       distinct-bound-ids?
                                                                       valid-bound-ids?
                                                                       bound-id=?
                                                                       free-id=?
                                                                       id-var-name
                                                                       same-marks?
                                                                       join-marks
                                                                       join-wraps
                                                                       smart-append
                                                                       make-binding-wrap
                                                                       extend-ribcage!
                                                                       make-empty-ribcage
                                                                       new-mark
                                                                       anti-mark
                                                                       the-anti-mark
                                                                       top-marked?
                                                                       top-wrap
                                                                       empty-wrap
                                                                       set-ribcage-labels!
                                                                       set-ribcage-marks!
                                                                       set-ribcage-symnames!
                                                                       ribcage-labels
                                                                       ribcage-marks
                                                                       ribcage-symnames
                                                                       ribcage?
                                                                       make-ribcage
                                                                       gen-labels
                                                                       gen-label
                                                                       make-rename
                                                                       rename-marks
                                                                       rename-new
                                                                       rename-old
                                                                       subst-rename?
                                                                       wrap-subst
                                                                       wrap-marks
                                                                       make-wrap
                                                                       id-sym-name&marks
                                                                       id-sym-name
                                                                       id?
                                                                       nonsymbol-id?
                                                                       global-extend
                                                                       lookup
                                                                       macros-only-env
                                                                       extend-var-env
                                                                       extend-env
                                                                       null-env
                                                                       binding-value
                                                                       binding-type
                                                                       make-binding
                                                                       arg-check
                                                                       source-annotation
                                                                       no-source
                                                                       set-syntax-object-module!
                                                                       set-syntax-object-wrap!
                                                                       set-syntax-object-expression!
                                                                       syntax-object-module
                                                                       syntax-object-wrap
                                                                       syntax-object-expression
                                                                       syntax-object?
                                                                       make-syntax-object
                                                                       build-lexical-var
                                                                       build-letrec
                                                                       build-named-let
                                                                       build-let
                                                                       build-sequence
                                                                       build-data
                                                                       build-primref
                                                                       build-lambda-case
                                                                       build-case-lambda
                                                                       build-simple-lambda
                                                                       build-global-definition
                                                                       build-global-assignment
                                                                       build-global-reference
                                                                       analyze-variable
                                                                       build-lexical-assignment
                                                                       build-lexical-reference
                                                                       build-dynlet
                                                                       build-conditional
                                                                       build-application
                                                                       build-void
                                                                       maybe-name-value!
                                                                       decorate-source
                                                                       get-global-definition-hook
                                                                       put-global-definition-hook
                                                                       gensym-hook
                                                                       local-eval-hook
                                                                       top-level-eval-hook
                                                                       fx<
                                                                       fx=
                                                                       fx-
                                                                       fx+
                                                                       set-lambda-meta!
                                                                       lambda-meta
                                                                       lambda?
                                                                       make-dynlet
                                                                       make-letrec
                                                                       make-let
                                                                       make-lambda-case
                                                                       make-lambda
                                                                       make-sequence
                                                                       make-application
                                                                       make-conditional
                                                                       make-toplevel-define
                                                                       make-toplevel-set
                                                                       make-toplevel-ref
                                                                       make-module-set
                                                                       make-module-ref
                                                                       make-lexical-set
                                                                       make-lexical-ref
                                                                       make-primitive-ref
                                                                       make-const
                                                                       make-void)
                                                                     ((top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top))
                                                                     ("i467"
                                                                      "i465"
                                                                      "i463"
                                                                      "i461"
                                                                      "i459"
                                                                      "i457"
                                                                      "i455"
                                                                      "i453"
                                                                      "i451"
                                                                      "i449"
                                                                      "i447"
                                                                      "i445"
                                                                      "i443"
                                                                      "i441"
                                                                      "i439"
                                                                      "i437"
                                                                      "i435"
                                                                      "i433"
                                                                      "i431"
                                                                      "i429"
                                                                      "i427"
                                                                      "i425"
                                                                      "i423"
                                                                      "i421"
                                                                      "i419"
                                                                      "i417"
                                                                      "i415"
                                                                      "i413"
                                                                      "i411"
                                                                      "i409"
                                                                      "i407"
                                                                      "i405"
                                                                      "i403"
                                                                      "i401"
                                                                      "i399"
                                                                      "i398"
                                                                      "i396"
                                                                      "i393"
                                                                      "i392"
                                                                      "i391"
                                                                      "i389"
                                                                      "i388"
                                                                      "i386"
                                                                      "i384"
                                                                      "i382"
                                                                      "i380"
                                                                      "i378"
                                                                      "i376"
                                                                      "i374"
                                                                      "i372"
                                                                      "i369"
                                                                      "i367"
                                                                      "i366"
                                                                      "i364"
                                                                      "i362"
                                                                      "i360"
                                                                      "i358"
                                                                      "i357"
                                                                      "i356"
                                                                      "i355"
                                                                      "i353"
                                                                      "i352"
                                                                      "i349"
                                                                      "i347"
                                                                      "i345"
                                                                      "i343"
                                                                      "i341"
                                                                      "i339"
                                                                      "i337"
                                                                      "i336"
                                                                      "i335"
                                                                      "i333"
                                                                      "i331"
                                                                      "i330"
                                                                      "i327"
                                                                      "i326"
                                                                      "i324"
                                                                      "i322"
                                                                      "i320"
                                                                      "i318"
                                                                      "i316"
                                                                      "i314"
                                                                      "i312"
                                                                      "i310"
                                                                      "i308"
                                                                      "i305"
                                                                      "i303"
                                                                      "i301"
                                                                      "i299"
                                                                      "i297"
                                                                      "i295"
                                                                      "i293"
                                                                      "i291"
                                                                      "i289"
                                                                      "i287"
                                                                      "i285"
                                                                      "i283"
                                                                      "i281"
                                                                      "i279"
                                                                      "i277"
                                                                      "i275"
                                                                      "i273"
                                                                      "i271"
                                                                      "i269"
                                                                      "i267"
                                                                      "i265"
                                                                      "i263"
                                                                      "i261"
                                                                      "i260"
                                                                      "i257"
                                                                      "i255"
                                                                      "i254"
                                                                      "i253"
                                                                      "i252"
                                                                      "i251"
                                                                      "i249"
                                                                      "i247"
                                                                      "i245"
                                                                      "i242"
                                                                      "i240"
                                                                      "i238"
                                                                      "i236"
                                                                      "i234"
                                                                      "i232"
                                                                      "i230"
                                                                      "i228"
                                                                      "i226"
                                                                      "i224"
                                                                      "i222"
                                                                      "i220"
                                                                      "i218"
                                                                      "i216"
                                                                      "i214"
                                                                      "i212"
                                                                      "i210"
                                                                      "i208"))
                                                                   #(ribcage
                                                                     (define-structure
                                                                       define-expansion-accessors
                                                                       define-expansion-constructors)
                                                                     ((top)
                                                                      (top)
                                                                      (top))
                                                                     ("i46"
                                                                      "i45"
                                                                      "i44")))
                                                                  (hygiene
                                                                    guile)))
                                                             4)
                                                        #t
                                                        #f)
                                                    '...
                                                    '#(syntax-object
                                                       ...
                                                       ((top)
                                                        #(ribcage () () ())
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(x)
                                                          #((top))
                                                          #("i2219"))
                                                        #(ribcage
                                                          (lambda-var-list
                                                            gen-var
                                                            strip
                                                            expand-lambda-case
                                                            lambda*-formals
                                                            expand-simple-lambda
                                                            lambda-formals
                                                            ellipsis?
                                                            expand-void
                                                            eval-local-transformer
                                                            expand-local-syntax
                                                            expand-body
                                                            expand-macro
                                                            expand-application
                                                            expand-expr
                                                            expand
                                                            syntax-type
                                                            parse-when-list
                                                            expand-install-global
                                                            expand-top-sequence
                                                            expand-sequence
                                                            source-wrap
                                                            wrap
                                                            bound-id-member?
                                                            distinct-bound-ids?
                                                            valid-bound-ids?
                                                            bound-id=?
                                                            free-id=?
                                                            id-var-name
                                                            same-marks?
                                                            join-marks
                                                            join-wraps
                                                            smart-append
                                                            make-binding-wrap
                                                            extend-ribcage!
                                                            make-empty-ribcage
                                                            new-mark
                                                            anti-mark
                                                            the-anti-mark
                                                            top-marked?
                                                            top-wrap
                                                            empty-wrap
                                                            set-ribcage-labels!
                                                            set-ribcage-marks!
                                                            set-ribcage-symnames!
                                                            ribcage-labels
                                                            ribcage-marks
                                                            ribcage-symnames
                                                            ribcage?
                                                            make-ribcage
                                                            gen-labels
                                                            gen-label
                                                            make-rename
                                                            rename-marks
                                                            rename-new
                                                            rename-old
                                                            subst-rename?
                                                            wrap-subst
                                                            wrap-marks
                                                            make-wrap
                                                            id-sym-name&marks
                                                            id-sym-name
                                                            id?
                                                            nonsymbol-id?
                                                            global-extend
                                                            lookup
                                                            macros-only-env
                                                            extend-var-env
                                                            extend-env
                                                            null-env
                                                            binding-value
                                                            binding-type
                                                            make-binding
                                                            arg-check
                                                            source-annotation
                                                            no-source
                                                            set-syntax-object-module!
                                                            set-syntax-object-wrap!
                                                            set-syntax-object-expression!
                                                            syntax-object-module
                                                            syntax-object-wrap
                                                            syntax-object-expression
                                                            syntax-object?
                                                            make-syntax-object
                                                            build-lexical-var
                                                            build-letrec
                                                            build-named-let
                                                            build-let
                                                            build-sequence
                                                            build-data
                                                            build-primref
                                                            build-lambda-case
                                                            build-case-lambda
                                                            build-simple-lambda
                                                            build-global-definition
                                                            build-global-assignment
                                                            build-global-reference
                                                            analyze-variable
                                                            build-lexical-assignment
                                                            build-lexical-reference
                                                            build-dynlet
                                                            build-conditional
                                                            build-application
                                                            build-void
                                                            maybe-name-value!
                                                            decorate-source
                                                            get-global-definition-hook
                                                            put-global-definition-hook
                                                            gensym-hook
                                                            local-eval-hook
                                                            top-level-eval-hook
                                                            fx<
                                                            fx=
                                                            fx-
                                                            fx+
                                                            set-lambda-meta!
                                                            lambda-meta
                                                            lambda?
                                                            make-dynlet
                                                            make-letrec
                                                            make-let
                                                            make-lambda-case
                                                            make-lambda
                                                            make-sequence
                                                            make-application
                                                            make-conditional
                                                            make-toplevel-define
                                                            make-toplevel-set
                                                            make-toplevel-ref
                                                            make-module-set
                                                            make-module-ref
                                                            make-lexical-set
                                                            make-lexical-ref
                                                            make-primitive-ref
                                                            make-const
                                                            make-void)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("i467"
                                                           "i465"
                                                           "i463"
                                                           "i461"
                                                           "i459"
                                                           "i457"
                                                           "i455"
                                                           "i453"
                                                           "i451"
                                                           "i449"
                                                           "i447"
                                                           "i445"
                                                           "i443"
                                                           "i441"
                                                           "i439"
                                                           "i437"
                                                           "i435"
                                                           "i433"
                                                           "i431"
                                                           "i429"
                                                           "i427"
                                                           "i425"
                                                           "i423"
                                                           "i421"
                                                           "i419"
                                                           "i417"
                                                           "i415"
                                                           "i413"
                                                           "i411"
                                                           "i409"
                                                           "i407"
                                                           "i405"
                                                           "i403"
                                                           "i401"
                                                           "i399"
                                                           "i398"
                                                           "i396"
                                                           "i393"
                                                           "i392"
                                                           "i391"
                                                           "i389"
                                                           "i388"
                                                           "i386"
                                                           "i384"
                                                           "i382"
                                                           "i380"
                                                           "i378"
                                                           "i376"
                                                           "i374"
                                                           "i372"
                                                           "i369"
                                                           "i367"
                                                           "i366"
                                                           "i364"
                                                           "i362"
                                                           "i360"
                                                           "i358"
                                                           "i357"
                                                           "i356"
                                                           "i355"
                                                           "i353"
                                                           "i352"
                                                           "i349"
                                                           "i347"
                                                           "i345"
                                                           "i343"
                                                           "i341"
                                                           "i339"
                                                           "i337"
                                                           "i336"
                                                           "i335"
                                                           "i333"
                                                           "i331"
                                                           "i330"
                                                           "i327"
                                                           "i326"
                                                           "i324"
                                                           "i322"
                                                           "i320"
                                                           "i318"
                                                           "i316"
                                                           "i314"
                                                           "i312"
                                                           "i310"
                                                           "i308"
                                                           "i305"
                                                           "i303"
                                                           "i301"
                                                           "i299"
                                                           "i297"
                                                           "i295"
                                                           "i293"
                                                           "i291"
                                                           "i289"
                                                           "i287"
                                                           "i285"
                                                           "i283"
                                                           "i281"
                                                           "i279"
                                                           "i277"
                                                           "i275"
                                                           "i273"
                                                           "i271"
                                                           "i269"
                                                           "i267"
                                                           "i265"
                                                           "i263"
                                                           "i261"
                                                           "i260"
                                                           "i257"
                                                           "i255"
                                                           "i254"
                                                           "i253"
                                                           "i252"
                                                           "i251"
                                                           "i249"
                                                           "i247"
                                                           "i245"
                                                           "i242"
                                                           "i240"
                                                           "i238"
                                                           "i236"
                                                           "i234"
                                                           "i232"
                                                           "i230"
                                                           "i228"
                                                           "i226"
                                                           "i224"
                                                           "i222"
                                                           "i220"
                                                           "i218"
                                                           "i216"
                                                           "i214"
                                                           "i212"
                                                           "i210"
                                                           "i208"))
                                                        #(ribcage
                                                          (define-structure
                                                            define-expansion-accessors
                                                            define-expansion-constructors)
                                                          ((top) (top) (top))
                                                          ("i46" "i45" "i44")))
                                                       (hygiene guile))))
                                           (eq? (#{id-var-name 4321}#
                                                  #{x 12974}#
                                                  '(()))
                                                (#{id-var-name 4321}#
                                                  '#(syntax-object
                                                     ...
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(x)
                                                        #((top))
                                                        #("i2219"))
                                                      #(ribcage
                                                        (lambda-var-list
                                                          gen-var
                                                          strip
                                                          expand-lambda-case
                                                          lambda*-formals
                                                          expand-simple-lambda
                                                          lambda-formals
                                                          ellipsis?
                                                          expand-void
                                                          eval-local-transformer
                                                          expand-local-syntax
                                                          expand-body
                                                          expand-macro
                                                          expand-application
                                                          expand-expr
                                                          expand
                                                          syntax-type
                                                          parse-when-list
                                                          expand-install-global
                                                          expand-top-sequence
                                                          expand-sequence
                                                          source-wrap
                                                          wrap
                                                          bound-id-member?
                                                          distinct-bound-ids?
                                                          valid-bound-ids?
                                                          bound-id=?
                                                          free-id=?
                                                          id-var-name
                                                          same-marks?
                                                          join-marks
                                                          join-wraps
                                                          smart-append
                                                          make-binding-wrap
                                                          extend-ribcage!
                                                          make-empty-ribcage
                                                          new-mark
                                                          anti-mark
                                                          the-anti-mark
                                                          top-marked?
                                                          top-wrap
                                                          empty-wrap
                                                          set-ribcage-labels!
                                                          set-ribcage-marks!
                                                          set-ribcage-symnames!
                                                          ribcage-labels
                                                          ribcage-marks
                                                          ribcage-symnames
                                                          ribcage?
                                                          make-ribcage
                                                          gen-labels
                                                          gen-label
                                                          make-rename
                                                          rename-marks
                                                          rename-new
                                                          rename-old
                                                          subst-rename?
                                                          wrap-subst
                                                          wrap-marks
                                                          make-wrap
                                                          id-sym-name&marks
                                                          id-sym-name
                                                          id?
                                                          nonsymbol-id?
                                                          global-extend
                                                          lookup
                                                          macros-only-env
                                                          extend-var-env
                                                          extend-env
                                                          null-env
                                                          binding-value
                                                          binding-type
                                                          make-binding
                                                          arg-check
                                                          source-annotation
                                                          no-source
                                                          set-syntax-object-module!
                                                          set-syntax-object-wrap!
                                                          set-syntax-object-expression!
                                                          syntax-object-module
                                                          syntax-object-wrap
                                                          syntax-object-expression
                                                          syntax-object?
                                                          make-syntax-object
                                                          build-lexical-var
                                                          build-letrec
                                                          build-named-let
                                                          build-let
                                                          build-sequence
                                                          build-data
                                                          build-primref
                                                          build-lambda-case
                                                          build-case-lambda
                                                          build-simple-lambda
                                                          build-global-definition
                                                          build-global-assignment
                                                          build-global-reference
                                                          analyze-variable
                                                          build-lexical-assignment
                                                          build-lexical-reference
                                                          build-dynlet
                                                          build-conditional
                                                          build-application
                                                          build-void
                                                          maybe-name-value!
                                                          decorate-source
                                                          get-global-definition-hook
                                                          put-global-definition-hook
                                                          gensym-hook
                                                          local-eval-hook
                                                          top-level-eval-hook
                                                          fx<
                                                          fx=
                                                          fx-
                                                          fx+
                                                          set-lambda-meta!
                                                          lambda-meta
                                                          lambda?
                                                          make-dynlet
                                                          make-letrec
                                                          make-let
                                                          make-lambda-case
                                                          make-lambda
                                                          make-sequence
                                                          make-application
                                                          make-conditional
                                                          make-toplevel-define
                                                          make-toplevel-set
                                                          make-toplevel-ref
                                                          make-module-set
                                                          make-module-ref
                                                          make-lexical-set
                                                          make-lexical-ref
                                                          make-primitive-ref
                                                          make-const
                                                          make-void)
                                                        ((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                        ("i467"
                                                         "i465"
                                                         "i463"
                                                         "i461"
                                                         "i459"
                                                         "i457"
                                                         "i455"
                                                         "i453"
                                                         "i451"
                                                         "i449"
                                                         "i447"
                                                         "i445"
                                                         "i443"
                                                         "i441"
                                                         "i439"
                                                         "i437"
                                                         "i435"
                                                         "i433"
                                                         "i431"
                                                         "i429"
                                                         "i427"
                                                         "i425"
                                                         "i423"
                                                         "i421"
                                                         "i419"
                                                         "i417"
                                                         "i415"
                                                         "i413"
                                                         "i411"
                                                         "i409"
                                                         "i407"
                                                         "i405"
                                                         "i403"
                                                         "i401"
                                                         "i399"
                                                         "i398"
                                                         "i396"
                                                         "i393"
                                                         "i392"
                                                         "i391"
                                                         "i389"
                                                         "i388"
                                                         "i386"
                                                         "i384"
                                                         "i382"
                                                         "i380"
                                                         "i378"
                                                         "i376"
                                                         "i374"
                                                         "i372"
                                                         "i369"
                                                         "i367"
                                                         "i366"
                                                         "i364"
                                                         "i362"
                                                         "i360"
                                                         "i358"
                                                         "i357"
                                                         "i356"
                                                         "i355"
                                                         "i353"
                                                         "i352"
                                                         "i349"
                                                         "i347"
                                                         "i345"
                                                         "i343"
                                                         "i341"
                                                         "i339"
                                                         "i337"
                                                         "i336"
                                                         "i335"
                                                         "i333"
                                                         "i331"
                                                         "i330"
                                                         "i327"
                                                         "i326"
                                                         "i324"
                                                         "i322"
                                                         "i320"
                                                         "i318"
                                                         "i316"
                                                         "i314"
                                                         "i312"
                                                         "i310"
                                                         "i308"
                                                         "i305"
                                                         "i303"
                                                         "i301"
                                                         "i299"
                                                         "i297"
                                                         "i295"
                                                         "i293"
                                                         "i291"
                                                         "i289"
                                                         "i287"
                                                         "i285"
                                                         "i283"
                                                         "i281"
                                                         "i279"
                                                         "i277"
                                                         "i275"
                                                         "i273"
                                                         "i271"
                                                         "i269"
                                                         "i267"
                                                         "i265"
                                                         "i263"
                                                         "i261"
                                                         "i260"
                                                         "i257"
                                                         "i255"
                                                         "i254"
                                                         "i253"
                                                         "i252"
                                                         "i251"
                                                         "i249"
                                                         "i247"
                                                         "i245"
                                                         "i242"
                                                         "i240"
                                                         "i238"
                                                         "i236"
                                                         "i234"
                                                         "i232"
                                                         "i230"
                                                         "i228"
                                                         "i226"
                                                         "i224"
                                                         "i222"
                                                         "i220"
                                                         "i218"
                                                         "i216"
                                                         "i214"
                                                         "i212"
                                                         "i210"
                                                         "i208"))
                                                      #(ribcage
                                                        (define-structure
                                                          define-expansion-accessors
                                                          define-expansion-constructors)
                                                        ((top) (top) (top))
                                                        ("i46" "i45" "i44")))
                                                     (hygiene guile))
                                                  '(())))
                                           #f)
                                         #f))))
                              #{pvars 12854}#))
                     (syntax-violation
                       'syntax-case
                       "misplaced ellipsis"
                       #{pat 12695}#)
                     (let ((#{y 13050}#
                             (gensym
                               (string-append (symbol->string 'tmp) " "))))
                       (#{build-application 4269}#
                         #f
                         (let ((#{req 13193}# (list 'tmp))
                               (#{vars 13195}# (list #{y 13050}#))
                               (#{exp 13197}#
                                 (let ((#{y 13214}#
                                         (make-struct/no-tail
                                           (vector-ref %expanded-vtables 3)
                                           #f
                                           'tmp
                                           #{y 13050}#)))
                                   (let ((#{test-exp 13218}#
                                           (let ((#{tmp 13227}#
                                                   ($sc-dispatch
                                                     #{fender 12696}#
                                                     '#(atom #t))))
                                             (if #{tmp 13227}#
                                               (@apply
                                                 (lambda () #{y 13214}#)
                                                 #{tmp 13227}#)
                                               (let ((#{then-exp 13245}#
                                                       (#{build-dispatch-call 11723}#
                                                         #{pvars 12854}#
                                                         #{fender 12696}#
                                                         #{y 13214}#
                                                         #{r 12694}#
                                                         #{mod 12698}#))
                                                     (#{else-exp 13246}#
                                                       (make-struct/no-tail
                                                         (vector-ref
                                                           %expanded-vtables
                                                           1)
                                                         #f
                                                         #f)))
                                                 (make-struct/no-tail
                                                   (vector-ref
                                                     %expanded-vtables
                                                     10)
                                                   #f
                                                   #{y 13214}#
                                                   #{then-exp 13245}#
                                                   #{else-exp 13246}#)))))
                                         (#{then-exp 13219}#
                                           (#{build-dispatch-call 11723}#
                                             #{pvars 12854}#
                                             #{exp 12697}#
                                             #{y 13214}#
                                             #{r 12694}#
                                             #{mod 12698}#))
                                         (#{else-exp 13220}#
                                           (#{gen-syntax-case 11725}#
                                             #{x 12691}#
                                             #{keys 12692}#
                                             #{clauses 12693}#
                                             #{r 12694}#
                                             #{mod 12698}#)))
                                     (make-struct/no-tail
                                       (vector-ref %expanded-vtables 10)
                                       #f
                                       #{test-exp 13218}#
                                       #{then-exp 13219}#
                                       #{else-exp 13220}#)))))
                           (let ((#{body 13202}#
                                   (make-struct/no-tail
                                     (vector-ref %expanded-vtables 14)
                                     #f
                                     #{req 13193}#
                                     #f
                                     #f
                                     #f
                                     '()
                                     #{vars 13195}#
                                     #{exp 13197}#
                                     #f)))
                             (make-struct/no-tail
                               (vector-ref %expanded-vtables 13)
                               #f
                               '()
                               #{body 13202}#)))
                         (list (if (eq? #{p 12853}# 'any)
                                 (let ((#{fun-exp 13268}#
                                         (if (equal?
                                               (module-name (current-module))
                                               '(guile))
                                           (make-struct/no-tail
                                             (vector-ref %expanded-vtables 7)
                                             #f
                                             'list)
                                           (make-struct/no-tail
                                             (vector-ref %expanded-vtables 5)
                                             #f
                                             '(guile)
                                             'list
                                             #f)))
                                       (#{arg-exps 13269}# (list #{x 12691}#)))
                                   (make-struct/no-tail
                                     (vector-ref %expanded-vtables 11)
                                     #f
                                     #{fun-exp 13268}#
                                     #{arg-exps 13269}#))
                                 (let ((#{fun-exp 13292}#
                                         (if (equal?
                                               (module-name (current-module))
                                               '(guile))
                                           (make-struct/no-tail
                                             (vector-ref %expanded-vtables 7)
                                             #f
                                             '$sc-dispatch)
                                           (make-struct/no-tail
                                             (vector-ref %expanded-vtables 5)
                                             #f
                                             '(guile)
                                             '$sc-dispatch
                                             #f)))
                                       (#{arg-exps 13293}#
                                         (list #{x 12691}#
                                               (make-struct/no-tail
                                                 (vector-ref
                                                   %expanded-vtables
                                                   1)
                                                 #f
                                                 #{p 12853}#))))
                                   (make-struct/no-tail
                                     (vector-ref %expanded-vtables 11)
                                     #f
                                     #{fun-exp 13292}#
                                     #{arg-exps 13293}#))))))))))))
         (#{gen-syntax-case 11725}#
           (lambda (#{x 12124}#
                    #{keys 12125}#
                    #{clauses 12126}#
                    #{r 12127}#
                    #{mod 12128}#)
             (if (null? #{clauses 12126}#)
               (let ((#{fun-exp 12133}#
                       (if (equal? (module-name (current-module)) '(guile))
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 7)
                           #f
                           'syntax-violation)
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 5)
                           #f
                           '(guile)
                           'syntax-violation
                           #f)))
                     (#{arg-exps 12134}#
                       (list (make-struct/no-tail
                               (vector-ref %expanded-vtables 1)
                               #f
                               #f)
                             (make-struct/no-tail
                               (vector-ref %expanded-vtables 1)
                               #f
                               "source expression failed to match any pattern")
                             #{x 12124}#)))
                 (make-struct/no-tail
                   (vector-ref %expanded-vtables 11)
                   #f
                   #{fun-exp 12133}#
                   #{arg-exps 12134}#))
               (let ((#{tmp 12167}# (car #{clauses 12126}#)))
                 (let ((#{tmp 12168}#
                         ($sc-dispatch #{tmp 12167}# '(any any))))
                   (if #{tmp 12168}#
                     (@apply
                       (lambda (#{pat 12170}# #{exp 12171}#)
                         (if (if (if (symbol? #{pat 12170}#)
                                   #t
                                   (if (if (vector? #{pat 12170}#)
                                         (if (= (vector-length #{pat 12170}#)
                                                4)
                                           (eq? (vector-ref #{pat 12170}# 0)
                                                'syntax-object)
                                           #f)
                                         #f)
                                     (symbol? (vector-ref #{pat 12170}# 1))
                                     #f))
                               (and-map
                                 (lambda (#{x 12198}#)
                                   (not (if (eq? (if (if (vector?
                                                           #{pat 12170}#)
                                                       (if (= (vector-length
                                                                #{pat 12170}#)
                                                              4)
                                                         (eq? (vector-ref
                                                                #{pat 12170}#
                                                                0)
                                                              'syntax-object)
                                                         #f)
                                                       #f)
                                                   (vector-ref #{pat 12170}# 1)
                                                   #{pat 12170}#)
                                                 (if (if (vector? #{x 12198}#)
                                                       (if (= (vector-length
                                                                #{x 12198}#)
                                                              4)
                                                         (eq? (vector-ref
                                                                #{x 12198}#
                                                                0)
                                                              'syntax-object)
                                                         #f)
                                                       #f)
                                                   (vector-ref #{x 12198}# 1)
                                                   #{x 12198}#))
                                          (eq? (#{id-var-name 4321}#
                                                 #{pat 12170}#
                                                 '(()))
                                               (#{id-var-name 4321}#
                                                 #{x 12198}#
                                                 '(())))
                                          #f)))
                                 (cons '#(syntax-object
                                          ...
                                          ((top)
                                           #(ribcage
                                             #(pat exp)
                                             #((top) (top))
                                             #("i3900" "i3901"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x keys clauses r mod)
                                             #((top) (top) (top) (top) (top))
                                             #("i3889"
                                               "i3890"
                                               "i3891"
                                               "i3892"
                                               "i3893"))
                                           #(ribcage
                                             (gen-syntax-case
                                               gen-clause
                                               build-dispatch-call
                                               convert-pattern)
                                             ((top) (top) (top) (top))
                                             ("i3699" "i3697" "i3695" "i3693"))
                                           #(ribcage
                                             (lambda-var-list
                                               gen-var
                                               strip
                                               expand-lambda-case
                                               lambda*-formals
                                               expand-simple-lambda
                                               lambda-formals
                                               ellipsis?
                                               expand-void
                                               eval-local-transformer
                                               expand-local-syntax
                                               expand-body
                                               expand-macro
                                               expand-application
                                               expand-expr
                                               expand
                                               syntax-type
                                               parse-when-list
                                               expand-install-global
                                               expand-top-sequence
                                               expand-sequence
                                               source-wrap
                                               wrap
                                               bound-id-member?
                                               distinct-bound-ids?
                                               valid-bound-ids?
                                               bound-id=?
                                               free-id=?
                                               id-var-name
                                               same-marks?
                                               join-marks
                                               join-wraps
                                               smart-append
                                               make-binding-wrap
                                               extend-ribcage!
                                               make-empty-ribcage
                                               new-mark
                                               anti-mark
                                               the-anti-mark
                                               top-marked?
                                               top-wrap
                                               empty-wrap
                                               set-ribcage-labels!
                                               set-ribcage-marks!
                                               set-ribcage-symnames!
                                               ribcage-labels
                                               ribcage-marks
                                               ribcage-symnames
                                               ribcage?
                                               make-ribcage
                                               gen-labels
                                               gen-label
                                               make-rename
                                               rename-marks
                                               rename-new
                                               rename-old
                                               subst-rename?
                                               wrap-subst
                                               wrap-marks
                                               make-wrap
                                               id-sym-name&marks
                                               id-sym-name
                                               id?
                                               nonsymbol-id?
                                               global-extend
                                               lookup
                                               macros-only-env
                                               extend-var-env
                                               extend-env
                                               null-env
                                               binding-value
                                               binding-type
                                               make-binding
                                               arg-check
                                               source-annotation
                                               no-source
                                               set-syntax-object-module!
                                               set-syntax-object-wrap!
                                               set-syntax-object-expression!
                                               syntax-object-module
                                               syntax-object-wrap
                                               syntax-object-expression
                                               syntax-object?
                                               make-syntax-object
                                               build-lexical-var
                                               build-letrec
                                               build-named-let
                                               build-let
                                               build-sequence
                                               build-data
                                               build-primref
                                               build-lambda-case
                                               build-case-lambda
                                               build-simple-lambda
                                               build-global-definition
                                               build-global-assignment
                                               build-global-reference
                                               analyze-variable
                                               build-lexical-assignment
                                               build-lexical-reference
                                               build-dynlet
                                               build-conditional
                                               build-application
                                               build-void
                                               maybe-name-value!
                                               decorate-source
                                               get-global-definition-hook
                                               put-global-definition-hook
                                               gensym-hook
                                               local-eval-hook
                                               top-level-eval-hook
                                               fx<
                                               fx=
                                               fx-
                                               fx+
                                               set-lambda-meta!
                                               lambda-meta
                                               lambda?
                                               make-dynlet
                                               make-letrec
                                               make-let
                                               make-lambda-case
                                               make-lambda
                                               make-sequence
                                               make-application
                                               make-conditional
                                               make-toplevel-define
                                               make-toplevel-set
                                               make-toplevel-ref
                                               make-module-set
                                               make-module-ref
                                               make-lexical-set
                                               make-lexical-ref
                                               make-primitive-ref
                                               make-const
                                               make-void)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("i467"
                                              "i465"
                                              "i463"
                                              "i461"
                                              "i459"
                                              "i457"
                                              "i455"
                                              "i453"
                                              "i451"
                                              "i449"
                                              "i447"
                                              "i445"
                                              "i443"
                                              "i441"
                                              "i439"
                                              "i437"
                                              "i435"
                                              "i433"
                                              "i431"
                                              "i429"
                                              "i427"
                                              "i425"
                                              "i423"
                                              "i421"
                                              "i419"
                                              "i417"
                                              "i415"
                                              "i413"
                                              "i411"
                                              "i409"
                                              "i407"
                                              "i405"
                                              "i403"
                                              "i401"
                                              "i399"
                                              "i398"
                                              "i396"
                                              "i393"
                                              "i392"
                                              "i391"
                                              "i389"
                                              "i388"
                                              "i386"
                                              "i384"
                                              "i382"
                                              "i380"
                                              "i378"
                                              "i376"
                                              "i374"
                                              "i372"
                                              "i369"
                                              "i367"
                                              "i366"
                                              "i364"
                                              "i362"
                                              "i360"
                                              "i358"
                                              "i357"
                                              "i356"
                                              "i355"
                                              "i353"
                                              "i352"
                                              "i349"
                                              "i347"
                                              "i345"
                                              "i343"
                                              "i341"
                                              "i339"
                                              "i337"
                                              "i336"
                                              "i335"
                                              "i333"
                                              "i331"
                                              "i330"
                                              "i327"
                                              "i326"
                                              "i324"
                                              "i322"
                                              "i320"
                                              "i318"
                                              "i316"
                                              "i314"
                                              "i312"
                                              "i310"
                                              "i308"
                                              "i305"
                                              "i303"
                                              "i301"
                                              "i299"
                                              "i297"
                                              "i295"
                                              "i293"
                                              "i291"
                                              "i289"
                                              "i287"
                                              "i285"
                                              "i283"
                                              "i281"
                                              "i279"
                                              "i277"
                                              "i275"
                                              "i273"
                                              "i271"
                                              "i269"
                                              "i267"
                                              "i265"
                                              "i263"
                                              "i261"
                                              "i260"
                                              "i257"
                                              "i255"
                                              "i254"
                                              "i253"
                                              "i252"
                                              "i251"
                                              "i249"
                                              "i247"
                                              "i245"
                                              "i242"
                                              "i240"
                                              "i238"
                                              "i236"
                                              "i234"
                                              "i232"
                                              "i230"
                                              "i228"
                                              "i226"
                                              "i224"
                                              "i222"
                                              "i220"
                                              "i218"
                                              "i216"
                                              "i214"
                                              "i212"
                                              "i210"
                                              "i208"))
                                           #(ribcage
                                             (define-structure
                                               define-expansion-accessors
                                               define-expansion-constructors)
                                             ((top) (top) (top))
                                             ("i46" "i45" "i44")))
                                          (hygiene guile))
                                       #{keys 12125}#))
                               #f)
                           (if (if (eq? (if (if (= (vector-length
                                                     '#(syntax-object
                                                        pad
                                                        ((top)
                                                         #(ribcage
                                                           #(pat exp)
                                                           #((top) (top))
                                                           #("i3900" "i3901"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x
                                                             keys
                                                             clauses
                                                             r
                                                             mod)
                                                           #((top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                           #("i3889"
                                                             "i3890"
                                                             "i3891"
                                                             "i3892"
                                                             "i3893"))
                                                         #(ribcage
                                                           (gen-syntax-case
                                                             gen-clause
                                                             build-dispatch-call
                                                             convert-pattern)
                                                           ((top)
                                                            (top)
                                                            (top)
                                                            (top))
                                                           ("i3699"
                                                            "i3697"
                                                            "i3695"
                                                            "i3693"))
                                                         #(ribcage
                                                           (lambda-var-list
                                                             gen-var
                                                             strip
                                                             expand-lambda-case
                                                             lambda*-formals
                                                             expand-simple-lambda
                                                             lambda-formals
                                                             ellipsis?
                                                             expand-void
                                                             eval-local-transformer
                                                             expand-local-syntax
                                                             expand-body
                                                             expand-macro
                                                             expand-application
                                                             expand-expr
                                                             expand
                                                             syntax-type
                                                             parse-when-list
                                                             expand-install-global
                                                             expand-top-sequence
                                                             expand-sequence
                                                             source-wrap
                                                             wrap
                                                             bound-id-member?
                                                             distinct-bound-ids?
                                                             valid-bound-ids?
                                                             bound-id=?
                                                             free-id=?
                                                             id-var-name
                                                             same-marks?
                                                             join-marks
                                                             join-wraps
                                                             smart-append
                                                             make-binding-wrap
                                                             extend-ribcage!
                                                             make-empty-ribcage
                                                             new-mark
                                                             anti-mark
                                                             the-anti-mark
                                                             top-marked?
                                                             top-wrap
                                                             empty-wrap
                                                             set-ribcage-labels!
                                                             set-ribcage-marks!
                                                             set-ribcage-symnames!
                                                             ribcage-labels
                                                             ribcage-marks
                                                             ribcage-symnames
                                                             ribcage?
                                                             make-ribcage
                                                             gen-labels
                                                             gen-label
                                                             make-rename
                                                             rename-marks
                                                             rename-new
                                                             rename-old
                                                             subst-rename?
                                                             wrap-subst
                                                             wrap-marks
                                                             make-wrap
                                                             id-sym-name&marks
                                                             id-sym-name
                                                             id?
                                                             nonsymbol-id?
                                                             global-extend
                                                             lookup
                                                             macros-only-env
                                                             extend-var-env
                                                             extend-env
                                                             null-env
                                                             binding-value
                                                             binding-type
                                                             make-binding
                                                             arg-check
                                                             source-annotation
                                                             no-source
                                                             set-syntax-object-module!
                                                             set-syntax-object-wrap!
                                                             set-syntax-object-expression!
                                                             syntax-object-module
                                                             syntax-object-wrap
                                                             syntax-object-expression
                                                             syntax-object?
                                                             make-syntax-object
                                                             build-lexical-var
                                                             build-letrec
                                                             build-named-let
                                                             build-let
                                                             build-sequence
                                                             build-data
                                                             build-primref
                                                             build-lambda-case
                                                             build-case-lambda
                                                             build-simple-lambda
                                                             build-global-definition
                                                             build-global-assignment
                                                             build-global-reference
                                                             analyze-variable
                                                             build-lexical-assignment
                                                             build-lexical-reference
                                                             build-dynlet
                                                             build-conditional
                                                             build-application
                                                             build-void
                                                             maybe-name-value!
                                                             decorate-source
                                                             get-global-definition-hook
                                                             put-global-definition-hook
                                                             gensym-hook
                                                             local-eval-hook
                                                             top-level-eval-hook
                                                             fx<
                                                             fx=
                                                             fx-
                                                             fx+
                                                             set-lambda-meta!
                                                             lambda-meta
                                                             lambda?
                                                             make-dynlet
                                                             make-letrec
                                                             make-let
                                                             make-lambda-case
                                                             make-lambda
                                                             make-sequence
                                                             make-application
                                                             make-conditional
                                                             make-toplevel-define
                                                             make-toplevel-set
                                                             make-toplevel-ref
                                                             make-module-set
                                                             make-module-ref
                                                             make-lexical-set
                                                             make-lexical-ref
                                                             make-primitive-ref
                                                             make-const
                                                             make-void)
                                                           ((top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top))
                                                           ("i467"
                                                            "i465"
                                                            "i463"
                                                            "i461"
                                                            "i459"
                                                            "i457"
                                                            "i455"
                                                            "i453"
                                                            "i451"
                                                            "i449"
                                                            "i447"
                                                            "i445"
                                                            "i443"
                                                            "i441"
                                                            "i439"
                                                            "i437"
                                                            "i435"
                                                            "i433"
                                                            "i431"
                                                            "i429"
                                                            "i427"
                                                            "i425"
                                                            "i423"
                                                            "i421"
                                                            "i419"
                                                            "i417"
                                                            "i415"
                                                            "i413"
                                                            "i411"
                                                            "i409"
                                                            "i407"
                                                            "i405"
                                                            "i403"
                                                            "i401"
                                                            "i399"
                                                            "i398"
                                                            "i396"
                                                            "i393"
                                                            "i392"
                                                            "i391"
                                                            "i389"
                                                            "i388"
                                                            "i386"
                                                            "i384"
                                                            "i382"
                                                            "i380"
                                                            "i378"
                                                            "i376"
                                                            "i374"
                                                            "i372"
                                                            "i369"
                                                            "i367"
                                                            "i366"
                                                            "i364"
                                                            "i362"
                                                            "i360"
                                                            "i358"
                                                            "i357"
                                                            "i356"
                                                            "i355"
                                                            "i353"
                                                            "i352"
                                                            "i349"
                                                            "i347"
                                                            "i345"
                                                            "i343"
                                                            "i341"
                                                            "i339"
                                                            "i337"
                                                            "i336"
                                                            "i335"
                                                            "i333"
                                                            "i331"
                                                            "i330"
                                                            "i327"
                                                            "i326"
                                                            "i324"
                                                            "i322"
                                                            "i320"
                                                            "i318"
                                                            "i316"
                                                            "i314"
                                                            "i312"
                                                            "i310"
                                                            "i308"
                                                            "i305"
                                                            "i303"
                                                            "i301"
                                                            "i299"
                                                            "i297"
                                                            "i295"
                                                            "i293"
                                                            "i291"
                                                            "i289"
                                                            "i287"
                                                            "i285"
                                                            "i283"
                                                            "i281"
                                                            "i279"
                                                            "i277"
                                                            "i275"
                                                            "i273"
                                                            "i271"
                                                            "i269"
                                                            "i267"
                                                            "i265"
                                                            "i263"
                                                            "i261"
                                                            "i260"
                                                            "i257"
                                                            "i255"
                                                            "i254"
                                                            "i253"
                                                            "i252"
                                                            "i251"
                                                            "i249"
                                                            "i247"
                                                            "i245"
                                                            "i242"
                                                            "i240"
                                                            "i238"
                                                            "i236"
                                                            "i234"
                                                            "i232"
                                                            "i230"
                                                            "i228"
                                                            "i226"
                                                            "i224"
                                                            "i222"
                                                            "i220"
                                                            "i218"
                                                            "i216"
                                                            "i214"
                                                            "i212"
                                                            "i210"
                                                            "i208"))
                                                         #(ribcage
                                                           (define-structure
                                                             define-expansion-accessors
                                                             define-expansion-constructors)
                                                           ((top) (top) (top))
                                                           ("i46"
                                                            "i45"
                                                            "i44")))
                                                        (hygiene guile)))
                                                   4)
                                              #t
                                              #f)
                                          'pad
                                          '#(syntax-object
                                             pad
                                             ((top)
                                              #(ribcage
                                                #(pat exp)
                                                #((top) (top))
                                                #("i3900" "i3901"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(x keys clauses r mod)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("i3889"
                                                  "i3890"
                                                  "i3891"
                                                  "i3892"
                                                  "i3893"))
                                              #(ribcage
                                                (gen-syntax-case
                                                  gen-clause
                                                  build-dispatch-call
                                                  convert-pattern)
                                                ((top) (top) (top) (top))
                                                ("i3699"
                                                 "i3697"
                                                 "i3695"
                                                 "i3693"))
                                              #(ribcage
                                                (lambda-var-list
                                                  gen-var
                                                  strip
                                                  expand-lambda-case
                                                  lambda*-formals
                                                  expand-simple-lambda
                                                  lambda-formals
                                                  ellipsis?
                                                  expand-void
                                                  eval-local-transformer
                                                  expand-local-syntax
                                                  expand-body
                                                  expand-macro
                                                  expand-application
                                                  expand-expr
                                                  expand
                                                  syntax-type
                                                  parse-when-list
                                                  expand-install-global
                                                  expand-top-sequence
                                                  expand-sequence
                                                  source-wrap
                                                  wrap
                                                  bound-id-member?
                                                  distinct-bound-ids?
                                                  valid-bound-ids?
                                                  bound-id=?
                                                  free-id=?
                                                  id-var-name
                                                  same-marks?
                                                  join-marks
                                                  join-wraps
                                                  smart-append
                                                  make-binding-wrap
                                                  extend-ribcage!
                                                  make-empty-ribcage
                                                  new-mark
                                                  anti-mark
                                                  the-anti-mark
                                                  top-marked?
                                                  top-wrap
                                                  empty-wrap
                                                  set-ribcage-labels!
                                                  set-ribcage-marks!
                                                  set-ribcage-symnames!
                                                  ribcage-labels
                                                  ribcage-marks
                                                  ribcage-symnames
                                                  ribcage?
                                                  make-ribcage
                                                  gen-labels
                                                  gen-label
                                                  make-rename
                                                  rename-marks
                                                  rename-new
                                                  rename-old
                                                  subst-rename?
                                                  wrap-subst
                                                  wrap-marks
                                                  make-wrap
                                                  id-sym-name&marks
                                                  id-sym-name
                                                  id?
                                                  nonsymbol-id?
                                                  global-extend
                                                  lookup
                                                  macros-only-env
                                                  extend-var-env
                                                  extend-env
                                                  null-env
                                                  binding-value
                                                  binding-type
                                                  make-binding
                                                  arg-check
                                                  source-annotation
                                                  no-source
                                                  set-syntax-object-module!
                                                  set-syntax-object-wrap!
                                                  set-syntax-object-expression!
                                                  syntax-object-module
                                                  syntax-object-wrap
                                                  syntax-object-expression
                                                  syntax-object?
                                                  make-syntax-object
                                                  build-lexical-var
                                                  build-letrec
                                                  build-named-let
                                                  build-let
                                                  build-sequence
                                                  build-data
                                                  build-primref
                                                  build-lambda-case
                                                  build-case-lambda
                                                  build-simple-lambda
                                                  build-global-definition
                                                  build-global-assignment
                                                  build-global-reference
                                                  analyze-variable
                                                  build-lexical-assignment
                                                  build-lexical-reference
                                                  build-dynlet
                                                  build-conditional
                                                  build-application
                                                  build-void
                                                  maybe-name-value!
                                                  decorate-source
                                                  get-global-definition-hook
                                                  put-global-definition-hook
                                                  gensym-hook
                                                  local-eval-hook
                                                  top-level-eval-hook
                                                  fx<
                                                  fx=
                                                  fx-
                                                  fx+
                                                  set-lambda-meta!
                                                  lambda-meta
                                                  lambda?
                                                  make-dynlet
                                                  make-letrec
                                                  make-let
                                                  make-lambda-case
                                                  make-lambda
                                                  make-sequence
                                                  make-application
                                                  make-conditional
                                                  make-toplevel-define
                                                  make-toplevel-set
                                                  make-toplevel-ref
                                                  make-module-set
                                                  make-module-ref
                                                  make-lexical-set
                                                  make-lexical-ref
                                                  make-primitive-ref
                                                  make-const
                                                  make-void)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("i467"
                                                 "i465"
                                                 "i463"
                                                 "i461"
                                                 "i459"
                                                 "i457"
                                                 "i455"
                                                 "i453"
                                                 "i451"
                                                 "i449"
                                                 "i447"
                                                 "i445"
                                                 "i443"
                                                 "i441"
                                                 "i439"
                                                 "i437"
                                                 "i435"
                                                 "i433"
                                                 "i431"
                                                 "i429"
                                                 "i427"
                                                 "i425"
                                                 "i423"
                                                 "i421"
                                                 "i419"
                                                 "i417"
                                                 "i415"
                                                 "i413"
                                                 "i411"
                                                 "i409"
                                                 "i407"
                                                 "i405"
                                                 "i403"
                                                 "i401"
                                                 "i399"
                                                 "i398"
                                                 "i396"
                                                 "i393"
                                                 "i392"
                                                 "i391"
                                                 "i389"
                                                 "i388"
                                                 "i386"
                                                 "i384"
                                                 "i382"
                                                 "i380"
                                                 "i378"
                                                 "i376"
                                                 "i374"
                                                 "i372"
                                                 "i369"
                                                 "i367"
                                                 "i366"
                                                 "i364"
                                                 "i362"
                                                 "i360"
                                                 "i358"
                                                 "i357"
                                                 "i356"
                                                 "i355"
                                                 "i353"
                                                 "i352"
                                                 "i349"
                                                 "i347"
                                                 "i345"
                                                 "i343"
                                                 "i341"
                                                 "i339"
                                                 "i337"
                                                 "i336"
                                                 "i335"
                                                 "i333"
                                                 "i331"
                                                 "i330"
                                                 "i327"
                                                 "i326"
                                                 "i324"
                                                 "i322"
                                                 "i320"
                                                 "i318"
                                                 "i316"
                                                 "i314"
                                                 "i312"
                                                 "i310"
                                                 "i308"
                                                 "i305"
                                                 "i303"
                                                 "i301"
                                                 "i299"
                                                 "i297"
                                                 "i295"
                                                 "i293"
                                                 "i291"
                                                 "i289"
                                                 "i287"
                                                 "i285"
                                                 "i283"
                                                 "i281"
                                                 "i279"
                                                 "i277"
                                                 "i275"
                                                 "i273"
                                                 "i271"
                                                 "i269"
                                                 "i267"
                                                 "i265"
                                                 "i263"
                                                 "i261"
                                                 "i260"
                                                 "i257"
                                                 "i255"
                                                 "i254"
                                                 "i253"
                                                 "i252"
                                                 "i251"
                                                 "i249"
                                                 "i247"
                                                 "i245"
                                                 "i242"
                                                 "i240"
                                                 "i238"
                                                 "i236"
                                                 "i234"
                                                 "i232"
                                                 "i230"
                                                 "i228"
                                                 "i226"
                                                 "i224"
                                                 "i222"
                                                 "i220"
                                                 "i218"
                                                 "i216"
                                                 "i214"
                                                 "i212"
                                                 "i210"
                                                 "i208"))
                                              #(ribcage
                                                (define-structure
                                                  define-expansion-accessors
                                                  define-expansion-constructors)
                                                ((top) (top) (top))
                                                ("i46" "i45" "i44")))
                                             (hygiene guile)))
                                        (if (if (= (vector-length
                                                     '#(syntax-object
                                                        _
                                                        ((top)
                                                         #(ribcage
                                                           #(pat exp)
                                                           #((top) (top))
                                                           #("i3900" "i3901"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x
                                                             keys
                                                             clauses
                                                             r
                                                             mod)
                                                           #((top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                           #("i3889"
                                                             "i3890"
                                                             "i3891"
                                                             "i3892"
                                                             "i3893"))
                                                         #(ribcage
                                                           (gen-syntax-case
                                                             gen-clause
                                                             build-dispatch-call
                                                             convert-pattern)
                                                           ((top)
                                                            (top)
                                                            (top)
                                                            (top))
                                                           ("i3699"
                                                            "i3697"
                                                            "i3695"
                                                            "i3693"))
                                                         #(ribcage
                                                           (lambda-var-list
                                                             gen-var
                                                             strip
                                                             expand-lambda-case
                                                             lambda*-formals
                                                             expand-simple-lambda
                                                             lambda-formals
                                                             ellipsis?
                                                             expand-void
                                                             eval-local-transformer
                                                             expand-local-syntax
                                                             expand-body
                                                             expand-macro
                                                             expand-application
                                                             expand-expr
                                                             expand
                                                             syntax-type
                                                             parse-when-list
                                                             expand-install-global
                                                             expand-top-sequence
                                                             expand-sequence
                                                             source-wrap
                                                             wrap
                                                             bound-id-member?
                                                             distinct-bound-ids?
                                                             valid-bound-ids?
                                                             bound-id=?
                                                             free-id=?
                                                             id-var-name
                                                             same-marks?
                                                             join-marks
                                                             join-wraps
                                                             smart-append
                                                             make-binding-wrap
                                                             extend-ribcage!
                                                             make-empty-ribcage
                                                             new-mark
                                                             anti-mark
                                                             the-anti-mark
                                                             top-marked?
                                                             top-wrap
                                                             empty-wrap
                                                             set-ribcage-labels!
                                                             set-ribcage-marks!
                                                             set-ribcage-symnames!
                                                             ribcage-labels
                                                             ribcage-marks
                                                             ribcage-symnames
                                                             ribcage?
                                                             make-ribcage
                                                             gen-labels
                                                             gen-label
                                                             make-rename
                                                             rename-marks
                                                             rename-new
                                                             rename-old
                                                             subst-rename?
                                                             wrap-subst
                                                             wrap-marks
                                                             make-wrap
                                                             id-sym-name&marks
                                                             id-sym-name
                                                             id?
                                                             nonsymbol-id?
                                                             global-extend
                                                             lookup
                                                             macros-only-env
                                                             extend-var-env
                                                             extend-env
                                                             null-env
                                                             binding-value
                                                             binding-type
                                                             make-binding
                                                             arg-check
                                                             source-annotation
                                                             no-source
                                                             set-syntax-object-module!
                                                             set-syntax-object-wrap!
                                                             set-syntax-object-expression!
                                                             syntax-object-module
                                                             syntax-object-wrap
                                                             syntax-object-expression
                                                             syntax-object?
                                                             make-syntax-object
                                                             build-lexical-var
                                                             build-letrec
                                                             build-named-let
                                                             build-let
                                                             build-sequence
                                                             build-data
                                                             build-primref
                                                             build-lambda-case
                                                             build-case-lambda
                                                             build-simple-lambda
                                                             build-global-definition
                                                             build-global-assignment
                                                             build-global-reference
                                                             analyze-variable
                                                             build-lexical-assignment
                                                             build-lexical-reference
                                                             build-dynlet
                                                             build-conditional
                                                             build-application
                                                             build-void
                                                             maybe-name-value!
                                                             decorate-source
                                                             get-global-definition-hook
                                                             put-global-definition-hook
                                                             gensym-hook
                                                             local-eval-hook
                                                             top-level-eval-hook
                                                             fx<
                                                             fx=
                                                             fx-
                                                             fx+
                                                             set-lambda-meta!
                                                             lambda-meta
                                                             lambda?
                                                             make-dynlet
                                                             make-letrec
                                                             make-let
                                                             make-lambda-case
                                                             make-lambda
                                                             make-sequence
                                                             make-application
                                                             make-conditional
                                                             make-toplevel-define
                                                             make-toplevel-set
                                                             make-toplevel-ref
                                                             make-module-set
                                                             make-module-ref
                                                             make-lexical-set
                                                             make-lexical-ref
                                                             make-primitive-ref
                                                             make-const
                                                             make-void)
                                                           ((top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top))
                                                           ("i467"
                                                            "i465"
                                                            "i463"
                                                            "i461"
                                                            "i459"
                                                            "i457"
                                                            "i455"
                                                            "i453"
                                                            "i451"
                                                            "i449"
                                                            "i447"
                                                            "i445"
                                                            "i443"
                                                            "i441"
                                                            "i439"
                                                            "i437"
                                                            "i435"
                                                            "i433"
                                                            "i431"
                                                            "i429"
                                                            "i427"
                                                            "i425"
                                                            "i423"
                                                            "i421"
                                                            "i419"
                                                            "i417"
                                                            "i415"
                                                            "i413"
                                                            "i411"
                                                            "i409"
                                                            "i407"
                                                            "i405"
                                                            "i403"
                                                            "i401"
                                                            "i399"
                                                            "i398"
                                                            "i396"
                                                            "i393"
                                                            "i392"
                                                            "i391"
                                                            "i389"
                                                            "i388"
                                                            "i386"
                                                            "i384"
                                                            "i382"
                                                            "i380"
                                                            "i378"
                                                            "i376"
                                                            "i374"
                                                            "i372"
                                                            "i369"
                                                            "i367"
                                                            "i366"
                                                            "i364"
                                                            "i362"
                                                            "i360"
                                                            "i358"
                                                            "i357"
                                                            "i356"
                                                            "i355"
                                                            "i353"
                                                            "i352"
                                                            "i349"
                                                            "i347"
                                                            "i345"
                                                            "i343"
                                                            "i341"
                                                            "i339"
                                                            "i337"
                                                            "i336"
                                                            "i335"
                                                            "i333"
                                                            "i331"
                                                            "i330"
                                                            "i327"
                                                            "i326"
                                                            "i324"
                                                            "i322"
                                                            "i320"
                                                            "i318"
                                                            "i316"
                                                            "i314"
                                                            "i312"
                                                            "i310"
                                                            "i308"
                                                            "i305"
                                                            "i303"
                                                            "i301"
                                                            "i299"
                                                            "i297"
                                                            "i295"
                                                            "i293"
                                                            "i291"
                                                            "i289"
                                                            "i287"
                                                            "i285"
                                                            "i283"
                                                            "i281"
                                                            "i279"
                                                            "i277"
                                                            "i275"
                                                            "i273"
                                                            "i271"
                                                            "i269"
                                                            "i267"
                                                            "i265"
                                                            "i263"
                                                            "i261"
                                                            "i260"
                                                            "i257"
                                                            "i255"
                                                            "i254"
                                                            "i253"
                                                            "i252"
                                                            "i251"
                                                            "i249"
                                                            "i247"
                                                            "i245"
                                                            "i242"
                                                            "i240"
                                                            "i238"
                                                            "i236"
                                                            "i234"
                                                            "i232"
                                                            "i230"
                                                            "i228"
                                                            "i226"
                                                            "i224"
                                                            "i222"
                                                            "i220"
                                                            "i218"
                                                            "i216"
                                                            "i214"
                                                            "i212"
                                                            "i210"
                                                            "i208"))
                                                         #(ribcage
                                                           (define-structure
                                                             define-expansion-accessors
                                                             define-expansion-constructors)
                                                           ((top) (top) (top))
                                                           ("i46"
                                                            "i45"
                                                            "i44")))
                                                        (hygiene guile)))
                                                   4)
                                              #t
                                              #f)
                                          '_
                                          '#(syntax-object
                                             _
                                             ((top)
                                              #(ribcage
                                                #(pat exp)
                                                #((top) (top))
                                                #("i3900" "i3901"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(x keys clauses r mod)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("i3889"
                                                  "i3890"
                                                  "i3891"
                                                  "i3892"
                                                  "i3893"))
                                              #(ribcage
                                                (gen-syntax-case
                                                  gen-clause
                                                  build-dispatch-call
                                                  convert-pattern)
                                                ((top) (top) (top) (top))
                                                ("i3699"
                                                 "i3697"
                                                 "i3695"
                                                 "i3693"))
                                              #(ribcage
                                                (lambda-var-list
                                                  gen-var
                                                  strip
                                                  expand-lambda-case
                                                  lambda*-formals
                                                  expand-simple-lambda
                                                  lambda-formals
                                                  ellipsis?
                                                  expand-void
                                                  eval-local-transformer
                                                  expand-local-syntax
                                                  expand-body
                                                  expand-macro
                                                  expand-application
                                                  expand-expr
                                                  expand
                                                  syntax-type
                                                  parse-when-list
                                                  expand-install-global
                                                  expand-top-sequence
                                                  expand-sequence
                                                  source-wrap
                                                  wrap
                                                  bound-id-member?
                                                  distinct-bound-ids?
                                                  valid-bound-ids?
                                                  bound-id=?
                                                  free-id=?
                                                  id-var-name
                                                  same-marks?
                                                  join-marks
                                                  join-wraps
                                                  smart-append
                                                  make-binding-wrap
                                                  extend-ribcage!
                                                  make-empty-ribcage
                                                  new-mark
                                                  anti-mark
                                                  the-anti-mark
                                                  top-marked?
                                                  top-wrap
                                                  empty-wrap
                                                  set-ribcage-labels!
                                                  set-ribcage-marks!
                                                  set-ribcage-symnames!
                                                  ribcage-labels
                                                  ribcage-marks
                                                  ribcage-symnames
                                                  ribcage?
                                                  make-ribcage
                                                  gen-labels
                                                  gen-label
                                                  make-rename
                                                  rename-marks
                                                  rename-new
                                                  rename-old
                                                  subst-rename?
                                                  wrap-subst
                                                  wrap-marks
                                                  make-wrap
                                                  id-sym-name&marks
                                                  id-sym-name
                                                  id?
                                                  nonsymbol-id?
                                                  global-extend
                                                  lookup
                                                  macros-only-env
                                                  extend-var-env
                                                  extend-env
                                                  null-env
                                                  binding-value
                                                  binding-type
                                                  make-binding
                                                  arg-check
                                                  source-annotation
                                                  no-source
                                                  set-syntax-object-module!
                                                  set-syntax-object-wrap!
                                                  set-syntax-object-expression!
                                                  syntax-object-module
                                                  syntax-object-wrap
                                                  syntax-object-expression
                                                  syntax-object?
                                                  make-syntax-object
                                                  build-lexical-var
                                                  build-letrec
                                                  build-named-let
                                                  build-let
                                                  build-sequence
                                                  build-data
                                                  build-primref
                                                  build-lambda-case
                                                  build-case-lambda
                                                  build-simple-lambda
                                                  build-global-definition
                                                  build-global-assignment
                                                  build-global-reference
                                                  analyze-variable
                                                  build-lexical-assignment
                                                  build-lexical-reference
                                                  build-dynlet
                                                  build-conditional
                                                  build-application
                                                  build-void
                                                  maybe-name-value!
                                                  decorate-source
                                                  get-global-definition-hook
                                                  put-global-definition-hook
                                                  gensym-hook
                                                  local-eval-hook
                                                  top-level-eval-hook
                                                  fx<
                                                  fx=
                                                  fx-
                                                  fx+
                                                  set-lambda-meta!
                                                  lambda-meta
                                                  lambda?
                                                  make-dynlet
                                                  make-letrec
                                                  make-let
                                                  make-lambda-case
                                                  make-lambda
                                                  make-sequence
                                                  make-application
                                                  make-conditional
                                                  make-toplevel-define
                                                  make-toplevel-set
                                                  make-toplevel-ref
                                                  make-module-set
                                                  make-module-ref
                                                  make-lexical-set
                                                  make-lexical-ref
                                                  make-primitive-ref
                                                  make-const
                                                  make-void)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("i467"
                                                 "i465"
                                                 "i463"
                                                 "i461"
                                                 "i459"
                                                 "i457"
                                                 "i455"
                                                 "i453"
                                                 "i451"
                                                 "i449"
                                                 "i447"
                                                 "i445"
                                                 "i443"
                                                 "i441"
                                                 "i439"
                                                 "i437"
                                                 "i435"
                                                 "i433"
                                                 "i431"
                                                 "i429"
                                                 "i427"
                                                 "i425"
                                                 "i423"
                                                 "i421"
                                                 "i419"
                                                 "i417"
                                                 "i415"
                                                 "i413"
                                                 "i411"
                                                 "i409"
                                                 "i407"
                                                 "i405"
                                                 "i403"
                                                 "i401"
                                                 "i399"
                                                 "i398"
                                                 "i396"
                                                 "i393"
                                                 "i392"
                                                 "i391"
                                                 "i389"
                                                 "i388"
                                                 "i386"
                                                 "i384"
                                                 "i382"
                                                 "i380"
                                                 "i378"
                                                 "i376"
                                                 "i374"
                                                 "i372"
                                                 "i369"
                                                 "i367"
                                                 "i366"
                                                 "i364"
                                                 "i362"
                                                 "i360"
                                                 "i358"
                                                 "i357"
                                                 "i356"
                                                 "i355"
                                                 "i353"
                                                 "i352"
                                                 "i349"
                                                 "i347"
                                                 "i345"
                                                 "i343"
                                                 "i341"
                                                 "i339"
                                                 "i337"
                                                 "i336"
                                                 "i335"
                                                 "i333"
                                                 "i331"
                                                 "i330"
                                                 "i327"
                                                 "i326"
                                                 "i324"
                                                 "i322"
                                                 "i320"
                                                 "i318"
                                                 "i316"
                                                 "i314"
                                                 "i312"
                                                 "i310"
                                                 "i308"
                                                 "i305"
                                                 "i303"
                                                 "i301"
                                                 "i299"
                                                 "i297"
                                                 "i295"
                                                 "i293"
                                                 "i291"
                                                 "i289"
                                                 "i287"
                                                 "i285"
                                                 "i283"
                                                 "i281"
                                                 "i279"
                                                 "i277"
                                                 "i275"
                                                 "i273"
                                                 "i271"
                                                 "i269"
                                                 "i267"
                                                 "i265"
                                                 "i263"
                                                 "i261"
                                                 "i260"
                                                 "i257"
                                                 "i255"
                                                 "i254"
                                                 "i253"
                                                 "i252"
                                                 "i251"
                                                 "i249"
                                                 "i247"
                                                 "i245"
                                                 "i242"
                                                 "i240"
                                                 "i238"
                                                 "i236"
                                                 "i234"
                                                 "i232"
                                                 "i230"
                                                 "i228"
                                                 "i226"
                                                 "i224"
                                                 "i222"
                                                 "i220"
                                                 "i218"
                                                 "i216"
                                                 "i214"
                                                 "i212"
                                                 "i210"
                                                 "i208"))
                                              #(ribcage
                                                (define-structure
                                                  define-expansion-accessors
                                                  define-expansion-constructors)
                                                ((top) (top) (top))
                                                ("i46" "i45" "i44")))
                                             (hygiene guile))))
                                 (eq? (#{id-var-name 4321}#
                                        '#(syntax-object
                                           pad
                                           ((top)
                                            #(ribcage
                                              #(pat exp)
                                              #((top) (top))
                                              #("i3900" "i3901"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(x keys clauses r mod)
                                              #((top) (top) (top) (top) (top))
                                              #("i3889"
                                                "i3890"
                                                "i3891"
                                                "i3892"
                                                "i3893"))
                                            #(ribcage
                                              (gen-syntax-case
                                                gen-clause
                                                build-dispatch-call
                                                convert-pattern)
                                              ((top) (top) (top) (top))
                                              ("i3699"
                                               "i3697"
                                               "i3695"
                                               "i3693"))
                                            #(ribcage
                                              (lambda-var-list
                                                gen-var
                                                strip
                                                expand-lambda-case
                                                lambda*-formals
                                                expand-simple-lambda
                                                lambda-formals
                                                ellipsis?
                                                expand-void
                                                eval-local-transformer
                                                expand-local-syntax
                                                expand-body
                                                expand-macro
                                                expand-application
                                                expand-expr
                                                expand
                                                syntax-type
                                                parse-when-list
                                                expand-install-global
                                                expand-top-sequence
                                                expand-sequence
                                                source-wrap
                                                wrap
                                                bound-id-member?
                                                distinct-bound-ids?
                                                valid-bound-ids?
                                                bound-id=?
                                                free-id=?
                                                id-var-name
                                                same-marks?
                                                join-marks
                                                join-wraps
                                                smart-append
                                                make-binding-wrap
                                                extend-ribcage!
                                                make-empty-ribcage
                                                new-mark
                                                anti-mark
                                                the-anti-mark
                                                top-marked?
                                                top-wrap
                                                empty-wrap
                                                set-ribcage-labels!
                                                set-ribcage-marks!
                                                set-ribcage-symnames!
                                                ribcage-labels
                                                ribcage-marks
                                                ribcage-symnames
                                                ribcage?
                                                make-ribcage
                                                gen-labels
                                                gen-label
                                                make-rename
                                                rename-marks
                                                rename-new
                                                rename-old
                                                subst-rename?
                                                wrap-subst
                                                wrap-marks
                                                make-wrap
                                                id-sym-name&marks
                                                id-sym-name
                                                id?
                                                nonsymbol-id?
                                                global-extend
                                                lookup
                                                macros-only-env
                                                extend-var-env
                                                extend-env
                                                null-env
                                                binding-value
                                                binding-type
                                                make-binding
                                                arg-check
                                                source-annotation
                                                no-source
                                                set-syntax-object-module!
                                                set-syntax-object-wrap!
                                                set-syntax-object-expression!
                                                syntax-object-module
                                                syntax-object-wrap
                                                syntax-object-expression
                                                syntax-object?
                                                make-syntax-object
                                                build-lexical-var
                                                build-letrec
                                                build-named-let
                                                build-let
                                                build-sequence
                                                build-data
                                                build-primref
                                                build-lambda-case
                                                build-case-lambda
                                                build-simple-lambda
                                                build-global-definition
                                                build-global-assignment
                                                build-global-reference
                                                analyze-variable
                                                build-lexical-assignment
                                                build-lexical-reference
                                                build-dynlet
                                                build-conditional
                                                build-application
                                                build-void
                                                maybe-name-value!
                                                decorate-source
                                                get-global-definition-hook
                                                put-global-definition-hook
                                                gensym-hook
                                                local-eval-hook
                                                top-level-eval-hook
                                                fx<
                                                fx=
                                                fx-
                                                fx+
                                                set-lambda-meta!
                                                lambda-meta
                                                lambda?
                                                make-dynlet
                                                make-letrec
                                                make-let
                                                make-lambda-case
                                                make-lambda
                                                make-sequence
                                                make-application
                                                make-conditional
                                                make-toplevel-define
                                                make-toplevel-set
                                                make-toplevel-ref
                                                make-module-set
                                                make-module-ref
                                                make-lexical-set
                                                make-lexical-ref
                                                make-primitive-ref
                                                make-const
                                                make-void)
                                              ((top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top))
                                              ("i467"
                                               "i465"
                                               "i463"
                                               "i461"
                                               "i459"
                                               "i457"
                                               "i455"
                                               "i453"
                                               "i451"
                                               "i449"
                                               "i447"
                                               "i445"
                                               "i443"
                                               "i441"
                                               "i439"
                                               "i437"
                                               "i435"
                                               "i433"
                                               "i431"
                                               "i429"
                                               "i427"
                                               "i425"
                                               "i423"
                                               "i421"
                                               "i419"
                                               "i417"
                                               "i415"
                                               "i413"
                                               "i411"
                                               "i409"
                                               "i407"
                                               "i405"
                                               "i403"
                                               "i401"
                                               "i399"
                                               "i398"
                                               "i396"
                                               "i393"
                                               "i392"
                                               "i391"
                                               "i389"
                                               "i388"
                                               "i386"
                                               "i384"
                                               "i382"
                                               "i380"
                                               "i378"
                                               "i376"
                                               "i374"
                                               "i372"
                                               "i369"
                                               "i367"
                                               "i366"
                                               "i364"
                                               "i362"
                                               "i360"
                                               "i358"
                                               "i357"
                                               "i356"
                                               "i355"
                                               "i353"
                                               "i352"
                                               "i349"
                                               "i347"
                                               "i345"
                                               "i343"
                                               "i341"
                                               "i339"
                                               "i337"
                                               "i336"
                                               "i335"
                                               "i333"
                                               "i331"
                                               "i330"
                                               "i327"
                                               "i326"
                                               "i324"
                                               "i322"
                                               "i320"
                                               "i318"
                                               "i316"
                                               "i314"
                                               "i312"
                                               "i310"
                                               "i308"
                                               "i305"
                                               "i303"
                                               "i301"
                                               "i299"
                                               "i297"
                                               "i295"
                                               "i293"
                                               "i291"
                                               "i289"
                                               "i287"
                                               "i285"
                                               "i283"
                                               "i281"
                                               "i279"
                                               "i277"
                                               "i275"
                                               "i273"
                                               "i271"
                                               "i269"
                                               "i267"
                                               "i265"
                                               "i263"
                                               "i261"
                                               "i260"
                                               "i257"
                                               "i255"
                                               "i254"
                                               "i253"
                                               "i252"
                                               "i251"
                                               "i249"
                                               "i247"
                                               "i245"
                                               "i242"
                                               "i240"
                                               "i238"
                                               "i236"
                                               "i234"
                                               "i232"
                                               "i230"
                                               "i228"
                                               "i226"
                                               "i224"
                                               "i222"
                                               "i220"
                                               "i218"
                                               "i216"
                                               "i214"
                                               "i212"
                                               "i210"
                                               "i208"))
                                            #(ribcage
                                              (define-structure
                                                define-expansion-accessors
                                                define-expansion-constructors)
                                              ((top) (top) (top))
                                              ("i46" "i45" "i44")))
                                           (hygiene guile))
                                        '(()))
                                      (#{id-var-name 4321}#
                                        '#(syntax-object
                                           _
                                           ((top)
                                            #(ribcage
                                              #(pat exp)
                                              #((top) (top))
                                              #("i3900" "i3901"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(x keys clauses r mod)
                                              #((top) (top) (top) (top) (top))
                                              #("i3889"
                                                "i3890"
                                                "i3891"
                                                "i3892"
                                                "i3893"))
                                            #(ribcage
                                              (gen-syntax-case
                                                gen-clause
                                                build-dispatch-call
                                                convert-pattern)
                                              ((top) (top) (top) (top))
                                              ("i3699"
                                               "i3697"
                                               "i3695"
                                               "i3693"))
                                            #(ribcage
                                              (lambda-var-list
                                                gen-var
                                                strip
                                                expand-lambda-case
                                                lambda*-formals
                                                expand-simple-lambda
                                                lambda-formals
                                                ellipsis?
                                                expand-void
                                                eval-local-transformer
                                                expand-local-syntax
                                                expand-body
                                                expand-macro
                                                expand-application
                                                expand-expr
                                                expand
                                                syntax-type
                                                parse-when-list
                                                expand-install-global
                                                expand-top-sequence
                                                expand-sequence
                                                source-wrap
                                                wrap
                                                bound-id-member?
                                                distinct-bound-ids?
                                                valid-bound-ids?
                                                bound-id=?
                                                free-id=?
                                                id-var-name
                                                same-marks?
                                                join-marks
                                                join-wraps
                                                smart-append
                                                make-binding-wrap
                                                extend-ribcage!
                                                make-empty-ribcage
                                                new-mark
                                                anti-mark
                                                the-anti-mark
                                                top-marked?
                                                top-wrap
                                                empty-wrap
                                                set-ribcage-labels!
                                                set-ribcage-marks!
                                                set-ribcage-symnames!
                                                ribcage-labels
                                                ribcage-marks
                                                ribcage-symnames
                                                ribcage?
                                                make-ribcage
                                                gen-labels
                                                gen-label
                                                make-rename
                                                rename-marks
                                                rename-new
                                                rename-old
                                                subst-rename?
                                                wrap-subst
                                                wrap-marks
                                                make-wrap
                                                id-sym-name&marks
                                                id-sym-name
                                                id?
                                                nonsymbol-id?
                                                global-extend
                                                lookup
                                                macros-only-env
                                                extend-var-env
                                                extend-env
                                                null-env
                                                binding-value
                                                binding-type
                                                make-binding
                                                arg-check
                                                source-annotation
                                                no-source
                                                set-syntax-object-module!
                                                set-syntax-object-wrap!
                                                set-syntax-object-expression!
                                                syntax-object-module
                                                syntax-object-wrap
                                                syntax-object-expression
                                                syntax-object?
                                                make-syntax-object
                                                build-lexical-var
                                                build-letrec
                                                build-named-let
                                                build-let
                                                build-sequence
                                                build-data
                                                build-primref
                                                build-lambda-case
                                                build-case-lambda
                                                build-simple-lambda
                                                build-global-definition
                                                build-global-assignment
                                                build-global-reference
                                                analyze-variable
                                                build-lexical-assignment
                                                build-lexical-reference
                                                build-dynlet
                                                build-conditional
                                                build-application
                                                build-void
                                                maybe-name-value!
                                                decorate-source
                                                get-global-definition-hook
                                                put-global-definition-hook
                                                gensym-hook
                                                local-eval-hook
                                                top-level-eval-hook
                                                fx<
                                                fx=
                                                fx-
                                                fx+
                                                set-lambda-meta!
                                                lambda-meta
                                                lambda?
                                                make-dynlet
                                                make-letrec
                                                make-let
                                                make-lambda-case
                                                make-lambda
                                                make-sequence
                                                make-application
                                                make-conditional
                                                make-toplevel-define
                                                make-toplevel-set
                                                make-toplevel-ref
                                                make-module-set
                                                make-module-ref
                                                make-lexical-set
                                                make-lexical-ref
                                                make-primitive-ref
                                                make-const
                                                make-void)
                                              ((top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top))
                                              ("i467"
                                               "i465"
                                               "i463"
                                               "i461"
                                               "i459"
                                               "i457"
                                               "i455"
                                               "i453"
                                               "i451"
                                               "i449"
                                               "i447"
                                               "i445"
                                               "i443"
                                               "i441"
                                               "i439"
                                               "i437"
                                               "i435"
                                               "i433"
                                               "i431"
                                               "i429"
                                               "i427"
                                               "i425"
                                               "i423"
                                               "i421"
                                               "i419"
                                               "i417"
                                               "i415"
                                               "i413"
                                               "i411"
                                               "i409"
                                               "i407"
                                               "i405"
                                               "i403"
                                               "i401"
                                               "i399"
                                               "i398"
                                               "i396"
                                               "i393"
                                               "i392"
                                               "i391"
                                               "i389"
                                               "i388"
                                               "i386"
                                               "i384"
                                               "i382"
                                               "i380"
                                               "i378"
                                               "i376"
                                               "i374"
                                               "i372"
                                               "i369"
                                               "i367"
                                               "i366"
                                               "i364"
                                               "i362"
                                               "i360"
                                               "i358"
                                               "i357"
                                               "i356"
                                               "i355"
                                               "i353"
                                               "i352"
                                               "i349"
                                               "i347"
                                               "i345"
                                               "i343"
                                               "i341"
                                               "i339"
                                               "i337"
                                               "i336"
                                               "i335"
                                               "i333"
                                               "i331"
                                               "i330"
                                               "i327"
                                               "i326"
                                               "i324"
                                               "i322"
                                               "i320"
                                               "i318"
                                               "i316"
                                               "i314"
                                               "i312"
                                               "i310"
                                               "i308"
                                               "i305"
                                               "i303"
                                               "i301"
                                               "i299"
                                               "i297"
                                               "i295"
                                               "i293"
                                               "i291"
                                               "i289"
                                               "i287"
                                               "i285"
                                               "i283"
                                               "i281"
                                               "i279"
                                               "i277"
                                               "i275"
                                               "i273"
                                               "i271"
                                               "i269"
                                               "i267"
                                               "i265"
                                               "i263"
                                               "i261"
                                               "i260"
                                               "i257"
                                               "i255"
                                               "i254"
                                               "i253"
                                               "i252"
                                               "i251"
                                               "i249"
                                               "i247"
                                               "i245"
                                               "i242"
                                               "i240"
                                               "i238"
                                               "i236"
                                               "i234"
                                               "i232"
                                               "i230"
                                               "i228"
                                               "i226"
                                               "i224"
                                               "i222"
                                               "i220"
                                               "i218"
                                               "i216"
                                               "i214"
                                               "i212"
                                               "i210"
                                               "i208"))
                                            #(ribcage
                                              (define-structure
                                                define-expansion-accessors
                                                define-expansion-constructors)
                                              ((top) (top) (top))
                                              ("i46" "i45" "i44")))
                                           (hygiene guile))
                                        '(())))
                                 #f)
                             (#{expand 4334}#
                               #{exp 12171}#
                               #{r 12127}#
                               '(())
                               #{mod 12128}#)
                             (let ((#{labels 12374}#
                                     (list (symbol->string (gensym "i"))))
                                   (#{var 12375}#
                                     (let ((#{id 12413}#
                                             (if (if (vector? #{pat 12170}#)
                                                   (if (= (vector-length
                                                            #{pat 12170}#)
                                                          4)
                                                     (eq? (vector-ref
                                                            #{pat 12170}#
                                                            0)
                                                          'syntax-object)
                                                     #f)
                                                   #f)
                                               (vector-ref #{pat 12170}# 1)
                                               #{pat 12170}#)))
                                       (gensym
                                         (string-append
                                           (symbol->string #{id 12413}#)
                                           " ")))))
                               (#{build-application 4269}#
                                 #f
                                 (#{build-simple-lambda 4278}#
                                   #f
                                   (list (syntax->datum #{pat 12170}#))
                                   #f
                                   (list #{var 12375}#)
                                   '()
                                   (#{expand 4334}#
                                     #{exp 12171}#
                                     (#{extend-env 4296}#
                                       #{labels 12374}#
                                       (list (cons 'syntax
                                                   (cons #{var 12375}# 0)))
                                       #{r 12127}#)
                                     (#{make-binding-wrap 4316}#
                                       (list #{pat 12170}#)
                                       #{labels 12374}#
                                       '(()))
                                     #{mod 12128}#))
                                 (list #{x 12124}#))))
                           (#{gen-clause 11724}#
                             #{x 12124}#
                             #{keys 12125}#
                             (cdr #{clauses 12126}#)
                             #{r 12127}#
                             #{pat 12170}#
                             #t
                             #{exp 12171}#
                             #{mod 12128}#)))
                       #{tmp 12168}#)
                     (let ((#{tmp 12683}#
                             ($sc-dispatch #{tmp 12167}# '(any any any))))
                       (if #{tmp 12683}#
                         (@apply
                           (lambda (#{pat 12685}#
                                    #{fender 12686}#
                                    #{exp 12687}#)
                             (#{gen-clause 11724}#
                               #{x 12124}#
                               #{keys 12125}#
                               (cdr #{clauses 12126}#)
                               #{r 12127}#
                               #{pat 12685}#
                               #{fender 12686}#
                               #{exp 12687}#
                               #{mod 12128}#))
                           #{tmp 12683}#)
                         (syntax-violation
                           'syntax-case
                           "invalid clause"
                           (car #{clauses 12126}#)))))))))))
        (lambda (#{e 11726}#
                 #{r 11727}#
                 #{w 11728}#
                 #{s 11729}#
                 #{mod 11730}#)
          (let ((#{e 11731}#
                  (#{wrap 4327}#
                    (begin
                      (if (if (pair? #{e 11726}#) #{s 11729}# #f)
                        (set-source-properties! #{e 11726}# #{s 11729}#))
                      #{e 11726}#)
                    #{w 11728}#
                    #{mod 11730}#)))
            (let ((#{tmp 11733}#
                    ($sc-dispatch
                      #{e 11731}#
                      '(_ any each-any . each-any))))
              (if #{tmp 11733}#
                (@apply
                  (lambda (#{val 11758}# #{key 11759}# #{m 11760}#)
                    (if (and-map
                          (lambda (#{x 11761}#)
                            (if (if (symbol? #{x 11761}#)
                                  #t
                                  (if (if (vector? #{x 11761}#)
                                        (if (= (vector-length #{x 11761}#) 4)
                                          (eq? (vector-ref #{x 11761}# 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (symbol? (vector-ref #{x 11761}# 1))
                                    #f))
                              (not (if (if (if (vector? #{x 11761}#)
                                             (if (= (vector-length #{x 11761}#)
                                                    4)
                                               (eq? (vector-ref #{x 11761}# 0)
                                                    'syntax-object)
                                               #f)
                                             #f)
                                         (symbol? (vector-ref #{x 11761}# 1))
                                         #f)
                                     (if (eq? (if (if (vector? #{x 11761}#)
                                                    (if (= (vector-length
                                                             #{x 11761}#)
                                                           4)
                                                      (eq? (vector-ref
                                                             #{x 11761}#
                                                             0)
                                                           'syntax-object)
                                                      #f)
                                                    #f)
                                                (vector-ref #{x 11761}# 1)
                                                #{x 11761}#)
                                              (if (if (= (vector-length
                                                           '#(syntax-object
                                                              ...
                                                              ((top)
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(x)
                                                                 #((top))
                                                                 #("i2219"))
                                                               #(ribcage
                                                                 (lambda-var-list
                                                                   gen-var
                                                                   strip
                                                                   expand-lambda-case
                                                                   lambda*-formals
                                                                   expand-simple-lambda
                                                                   lambda-formals
                                                                   ellipsis?
                                                                   expand-void
                                                                   eval-local-transformer
                                                                   expand-local-syntax
                                                                   expand-body
                                                                   expand-macro
                                                                   expand-application
                                                                   expand-expr
                                                                   expand
                                                                   syntax-type
                                                                   parse-when-list
                                                                   expand-install-global
                                                                   expand-top-sequence
                                                                   expand-sequence
                                                                   source-wrap
                                                                   wrap
                                                                   bound-id-member?
                                                                   distinct-bound-ids?
                                                                   valid-bound-ids?
                                                                   bound-id=?
                                                                   free-id=?
                                                                   id-var-name
                                                                   same-marks?
                                                                   join-marks
                                                                   join-wraps
                                                                   smart-append
                                                                   make-binding-wrap
                                                                   extend-ribcage!
                                                                   make-empty-ribcage
                                                                   new-mark
                                                                   anti-mark
                                                                   the-anti-mark
                                                                   top-marked?
                                                                   top-wrap
                                                                   empty-wrap
                                                                   set-ribcage-labels!
                                                                   set-ribcage-marks!
                                                                   set-ribcage-symnames!
                                                                   ribcage-labels
                                                                   ribcage-marks
                                                                   ribcage-symnames
                                                                   ribcage?
                                                                   make-ribcage
                                                                   gen-labels
                                                                   gen-label
                                                                   make-rename
                                                                   rename-marks
                                                                   rename-new
                                                                   rename-old
                                                                   subst-rename?
                                                                   wrap-subst
                                                                   wrap-marks
                                                                   make-wrap
                                                                   id-sym-name&marks
                                                                   id-sym-name
                                                                   id?
                                                                   nonsymbol-id?
                                                                   global-extend
                                                                   lookup
                                                                   macros-only-env
                                                                   extend-var-env
                                                                   extend-env
                                                                   null-env
                                                                   binding-value
                                                                   binding-type
                                                                   make-binding
                                                                   arg-check
                                                                   source-annotation
                                                                   no-source
                                                                   set-syntax-object-module!
                                                                   set-syntax-object-wrap!
                                                                   set-syntax-object-expression!
                                                                   syntax-object-module
                                                                   syntax-object-wrap
                                                                   syntax-object-expression
                                                                   syntax-object?
                                                                   make-syntax-object
                                                                   build-lexical-var
                                                                   build-letrec
                                                                   build-named-let
                                                                   build-let
                                                                   build-sequence
                                                                   build-data
                                                                   build-primref
                                                                   build-lambda-case
                                                                   build-case-lambda
                                                                   build-simple-lambda
                                                                   build-global-definition
                                                                   build-global-assignment
                                                                   build-global-reference
                                                                   analyze-variable
                                                                   build-lexical-assignment
                                                                   build-lexical-reference
                                                                   build-dynlet
                                                                   build-conditional
                                                                   build-application
                                                                   build-void
                                                                   maybe-name-value!
                                                                   decorate-source
                                                                   get-global-definition-hook
                                                                   put-global-definition-hook
                                                                   gensym-hook
                                                                   local-eval-hook
                                                                   top-level-eval-hook
                                                                   fx<
                                                                   fx=
                                                                   fx-
                                                                   fx+
                                                                   set-lambda-meta!
                                                                   lambda-meta
                                                                   lambda?
                                                                   make-dynlet
                                                                   make-letrec
                                                                   make-let
                                                                   make-lambda-case
                                                                   make-lambda
                                                                   make-sequence
                                                                   make-application
                                                                   make-conditional
                                                                   make-toplevel-define
                                                                   make-toplevel-set
                                                                   make-toplevel-ref
                                                                   make-module-set
                                                                   make-module-ref
                                                                   make-lexical-set
                                                                   make-lexical-ref
                                                                   make-primitive-ref
                                                                   make-const
                                                                   make-void)
                                                                 ((top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top))
                                                                 ("i467"
                                                                  "i465"
                                                                  "i463"
                                                                  "i461"
                                                                  "i459"
                                                                  "i457"
                                                                  "i455"
                                                                  "i453"
                                                                  "i451"
                                                                  "i449"
                                                                  "i447"
                                                                  "i445"
                                                                  "i443"
                                                                  "i441"
                                                                  "i439"
                                                                  "i437"
                                                                  "i435"
                                                                  "i433"
                                                                  "i431"
                                                                  "i429"
                                                                  "i427"
                                                                  "i425"
                                                                  "i423"
                                                                  "i421"
                                                                  "i419"
                                                                  "i417"
                                                                  "i415"
                                                                  "i413"
                                                                  "i411"
                                                                  "i409"
                                                                  "i407"
                                                                  "i405"
                                                                  "i403"
                                                                  "i401"
                                                                  "i399"
                                                                  "i398"
                                                                  "i396"
                                                                  "i393"
                                                                  "i392"
                                                                  "i391"
                                                                  "i389"
                                                                  "i388"
                                                                  "i386"
                                                                  "i384"
                                                                  "i382"
                                                                  "i380"
                                                                  "i378"
                                                                  "i376"
                                                                  "i374"
                                                                  "i372"
                                                                  "i369"
                                                                  "i367"
                                                                  "i366"
                                                                  "i364"
                                                                  "i362"
                                                                  "i360"
                                                                  "i358"
                                                                  "i357"
                                                                  "i356"
                                                                  "i355"
                                                                  "i353"
                                                                  "i352"
                                                                  "i349"
                                                                  "i347"
                                                                  "i345"
                                                                  "i343"
                                                                  "i341"
                                                                  "i339"
                                                                  "i337"
                                                                  "i336"
                                                                  "i335"
                                                                  "i333"
                                                                  "i331"
                                                                  "i330"
                                                                  "i327"
                                                                  "i326"
                                                                  "i324"
                                                                  "i322"
                                                                  "i320"
                                                                  "i318"
                                                                  "i316"
                                                                  "i314"
                                                                  "i312"
                                                                  "i310"
                                                                  "i308"
                                                                  "i305"
                                                                  "i303"
                                                                  "i301"
                                                                  "i299"
                                                                  "i297"
                                                                  "i295"
                                                                  "i293"
                                                                  "i291"
                                                                  "i289"
                                                                  "i287"
                                                                  "i285"
                                                                  "i283"
                                                                  "i281"
                                                                  "i279"
                                                                  "i277"
                                                                  "i275"
                                                                  "i273"
                                                                  "i271"
                                                                  "i269"
                                                                  "i267"
                                                                  "i265"
                                                                  "i263"
                                                                  "i261"
                                                                  "i260"
                                                                  "i257"
                                                                  "i255"
                                                                  "i254"
                                                                  "i253"
                                                                  "i252"
                                                                  "i251"
                                                                  "i249"
                                                                  "i247"
                                                                  "i245"
                                                                  "i242"
                                                                  "i240"
                                                                  "i238"
                                                                  "i236"
                                                                  "i234"
                                                                  "i232"
                                                                  "i230"
                                                                  "i228"
                                                                  "i226"
                                                                  "i224"
                                                                  "i222"
                                                                  "i220"
                                                                  "i218"
                                                                  "i216"
                                                                  "i214"
                                                                  "i212"
                                                                  "i210"
                                                                  "i208"))
                                                               #(ribcage
                                                                 (define-structure
                                                                   define-expansion-accessors
                                                                   define-expansion-constructors)
                                                                 ((top)
                                                                  (top)
                                                                  (top))
                                                                 ("i46"
                                                                  "i45"
                                                                  "i44")))
                                                              (hygiene guile)))
                                                         4)
                                                    #t
                                                    #f)
                                                '...
                                                '#(syntax-object
                                                   ...
                                                   ((top)
                                                    #(ribcage () () ())
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i2219"))
                                                    #(ribcage
                                                      (lambda-var-list
                                                        gen-var
                                                        strip
                                                        expand-lambda-case
                                                        lambda*-formals
                                                        expand-simple-lambda
                                                        lambda-formals
                                                        ellipsis?
                                                        expand-void
                                                        eval-local-transformer
                                                        expand-local-syntax
                                                        expand-body
                                                        expand-macro
                                                        expand-application
                                                        expand-expr
                                                        expand
                                                        syntax-type
                                                        parse-when-list
                                                        expand-install-global
                                                        expand-top-sequence
                                                        expand-sequence
                                                        source-wrap
                                                        wrap
                                                        bound-id-member?
                                                        distinct-bound-ids?
                                                        valid-bound-ids?
                                                        bound-id=?
                                                        free-id=?
                                                        id-var-name
                                                        same-marks?
                                                        join-marks
                                                        join-wraps
                                                        smart-append
                                                        make-binding-wrap
                                                        extend-ribcage!
                                                        make-empty-ribcage
                                                        new-mark
                                                        anti-mark
                                                        the-anti-mark
                                                        top-marked?
                                                        top-wrap
                                                        empty-wrap
                                                        set-ribcage-labels!
                                                        set-ribcage-marks!
                                                        set-ribcage-symnames!
                                                        ribcage-labels
                                                        ribcage-marks
                                                        ribcage-symnames
                                                        ribcage?
                                                        make-ribcage
                                                        gen-labels
                                                        gen-label
                                                        make-rename
                                                        rename-marks
                                                        rename-new
                                                        rename-old
                                                        subst-rename?
                                                        wrap-subst
                                                        wrap-marks
                                                        make-wrap
                                                        id-sym-name&marks
                                                        id-sym-name
                                                        id?
                                                        nonsymbol-id?
                                                        global-extend
                                                        lookup
                                                        macros-only-env
                                                        extend-var-env
                                                        extend-env
                                                        null-env
                                                        binding-value
                                                        binding-type
                                                        make-binding
                                                        arg-check
                                                        source-annotation
                                                        no-source
                                                        set-syntax-object-module!
                                                        set-syntax-object-wrap!
                                                        set-syntax-object-expression!
                                                        syntax-object-module
                                                        syntax-object-wrap
                                                        syntax-object-expression
                                                        syntax-object?
                                                        make-syntax-object
                                                        build-lexical-var
                                                        build-letrec
                                                        build-named-let
                                                        build-let
                                                        build-sequence
                                                        build-data
                                                        build-primref
                                                        build-lambda-case
                                                        build-case-lambda
                                                        build-simple-lambda
                                                        build-global-definition
                                                        build-global-assignment
                                                        build-global-reference
                                                        analyze-variable
                                                        build-lexical-assignment
                                                        build-lexical-reference
                                                        build-dynlet
                                                        build-conditional
                                                        build-application
                                                        build-void
                                                        maybe-name-value!
                                                        decorate-source
                                                        get-global-definition-hook
                                                        put-global-definition-hook
                                                        gensym-hook
                                                        local-eval-hook
                                                        top-level-eval-hook
                                                        fx<
                                                        fx=
                                                        fx-
                                                        fx+
                                                        set-lambda-meta!
                                                        lambda-meta
                                                        lambda?
                                                        make-dynlet
                                                        make-letrec
                                                        make-let
                                                        make-lambda-case
                                                        make-lambda
                                                        make-sequence
                                                        make-application
                                                        make-conditional
                                                        make-toplevel-define
                                                        make-toplevel-set
                                                        make-toplevel-ref
                                                        make-module-set
                                                        make-module-ref
                                                        make-lexical-set
                                                        make-lexical-ref
                                                        make-primitive-ref
                                                        make-const
                                                        make-void)
                                                      ((top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top))
                                                      ("i467"
                                                       "i465"
                                                       "i463"
                                                       "i461"
                                                       "i459"
                                                       "i457"
                                                       "i455"
                                                       "i453"
                                                       "i451"
                                                       "i449"
                                                       "i447"
                                                       "i445"
                                                       "i443"
                                                       "i441"
                                                       "i439"
                                                       "i437"
                                                       "i435"
                                                       "i433"
                                                       "i431"
                                                       "i429"
                                                       "i427"
                                                       "i425"
                                                       "i423"
                                                       "i421"
                                                       "i419"
                                                       "i417"
                                                       "i415"
                                                       "i413"
                                                       "i411"
                                                       "i409"
                                                       "i407"
                                                       "i405"
                                                       "i403"
                                                       "i401"
                                                       "i399"
                                                       "i398"
                                                       "i396"
                                                       "i393"
                                                       "i392"
                                                       "i391"
                                                       "i389"
                                                       "i388"
                                                       "i386"
                                                       "i384"
                                                       "i382"
                                                       "i380"
                                                       "i378"
                                                       "i376"
                                                       "i374"
                                                       "i372"
                                                       "i369"
                                                       "i367"
                                                       "i366"
                                                       "i364"
                                                       "i362"
                                                       "i360"
                                                       "i358"
                                                       "i357"
                                                       "i356"
                                                       "i355"
                                                       "i353"
                                                       "i352"
                                                       "i349"
                                                       "i347"
                                                       "i345"
                                                       "i343"
                                                       "i341"
                                                       "i339"
                                                       "i337"
                                                       "i336"
                                                       "i335"
                                                       "i333"
                                                       "i331"
                                                       "i330"
                                                       "i327"
                                                       "i326"
                                                       "i324"
                                                       "i322"
                                                       "i320"
                                                       "i318"
                                                       "i316"
                                                       "i314"
                                                       "i312"
                                                       "i310"
                                                       "i308"
                                                       "i305"
                                                       "i303"
                                                       "i301"
                                                       "i299"
                                                       "i297"
                                                       "i295"
                                                       "i293"
                                                       "i291"
                                                       "i289"
                                                       "i287"
                                                       "i285"
                                                       "i283"
                                                       "i281"
                                                       "i279"
                                                       "i277"
                                                       "i275"
                                                       "i273"
                                                       "i271"
                                                       "i269"
                                                       "i267"
                                                       "i265"
                                                       "i263"
                                                       "i261"
                                                       "i260"
                                                       "i257"
                                                       "i255"
                                                       "i254"
                                                       "i253"
                                                       "i252"
                                                       "i251"
                                                       "i249"
                                                       "i247"
                                                       "i245"
                                                       "i242"
                                                       "i240"
                                                       "i238"
                                                       "i236"
                                                       "i234"
                                                       "i232"
                                                       "i230"
                                                       "i228"
                                                       "i226"
                                                       "i224"
                                                       "i222"
                                                       "i220"
                                                       "i218"
                                                       "i216"
                                                       "i214"
                                                       "i212"
                                                       "i210"
                                                       "i208"))
                                                    #(ribcage
                                                      (define-structure
                                                        define-expansion-accessors
                                                        define-expansion-constructors)
                                                      ((top) (top) (top))
                                                      ("i46" "i45" "i44")))
                                                   (hygiene guile))))
                                       (eq? (#{id-var-name 4321}#
                                              #{x 11761}#
                                              '(()))
                                            (#{id-var-name 4321}#
                                              '#(syntax-object
                                                 ...
                                                 ((top)
                                                  #(ribcage () () ())
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(x)
                                                    #((top))
                                                    #("i2219"))
                                                  #(ribcage
                                                    (lambda-var-list
                                                      gen-var
                                                      strip
                                                      expand-lambda-case
                                                      lambda*-formals
                                                      expand-simple-lambda
                                                      lambda-formals
                                                      ellipsis?
                                                      expand-void
                                                      eval-local-transformer
                                                      expand-local-syntax
                                                      expand-body
                                                      expand-macro
                                                      expand-application
                                                      expand-expr
                                                      expand
                                                      syntax-type
                                                      parse-when-list
                                                      expand-install-global
                                                      expand-top-sequence
                                                      expand-sequence
                                                      source-wrap
                                                      wrap
                                                      bound-id-member?
                                                      distinct-bound-ids?
                                                      valid-bound-ids?
                                                      bound-id=?
                                                      free-id=?
                                                      id-var-name
                                                      same-marks?
                                                      join-marks
                                                      join-wraps
                                                      smart-append
                                                      make-binding-wrap
                                                      extend-ribcage!
                                                      make-empty-ribcage
                                                      new-mark
                                                      anti-mark
                                                      the-anti-mark
                                                      top-marked?
                                                      top-wrap
                                                      empty-wrap
                                                      set-ribcage-labels!
                                                      set-ribcage-marks!
                                                      set-ribcage-symnames!
                                                      ribcage-labels
                                                      ribcage-marks
                                                      ribcage-symnames
                                                      ribcage?
                                                      make-ribcage
                                                      gen-labels
                                                      gen-label
                                                      make-rename
                                                      rename-marks
                                                      rename-new
                                                      rename-old
                                                      subst-rename?
                                                      wrap-subst
                                                      wrap-marks
                                                      make-wrap
                                                      id-sym-name&marks
                                                      id-sym-name
                                                      id?
                                                      nonsymbol-id?
                                                      global-extend
                                                      lookup
                                                      macros-only-env
                                                      extend-var-env
                                                      extend-env
                                                      null-env
                                                      binding-value
                                                      binding-type
                                                      make-binding
                                                      arg-check
                                                      source-annotation
                                                      no-source
                                                      set-syntax-object-module!
                                                      set-syntax-object-wrap!
                                                      set-syntax-object-expression!
                                                      syntax-object-module
                                                      syntax-object-wrap
                                                      syntax-object-expression
                                                      syntax-object?
                                                      make-syntax-object
                                                      build-lexical-var
                                                      build-letrec
                                                      build-named-let
                                                      build-let
                                                      build-sequence
                                                      build-data
                                                      build-primref
                                                      build-lambda-case
                                                      build-case-lambda
                                                      build-simple-lambda
                                                      build-global-definition
                                                      build-global-assignment
                                                      build-global-reference
                                                      analyze-variable
                                                      build-lexical-assignment
                                                      build-lexical-reference
                                                      build-dynlet
                                                      build-conditional
                                                      build-application
                                                      build-void
                                                      maybe-name-value!
                                                      decorate-source
                                                      get-global-definition-hook
                                                      put-global-definition-hook
                                                      gensym-hook
                                                      local-eval-hook
                                                      top-level-eval-hook
                                                      fx<
                                                      fx=
                                                      fx-
                                                      fx+
                                                      set-lambda-meta!
                                                      lambda-meta
                                                      lambda?
                                                      make-dynlet
                                                      make-letrec
                                                      make-let
                                                      make-lambda-case
                                                      make-lambda
                                                      make-sequence
                                                      make-application
                                                      make-conditional
                                                      make-toplevel-define
                                                      make-toplevel-set
                                                      make-toplevel-ref
                                                      make-module-set
                                                      make-module-ref
                                                      make-lexical-set
                                                      make-lexical-ref
                                                      make-primitive-ref
                                                      make-const
                                                      make-void)
                                                    ((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                    ("i467"
                                                     "i465"
                                                     "i463"
                                                     "i461"
                                                     "i459"
                                                     "i457"
                                                     "i455"
                                                     "i453"
                                                     "i451"
                                                     "i449"
                                                     "i447"
                                                     "i445"
                                                     "i443"
                                                     "i441"
                                                     "i439"
                                                     "i437"
                                                     "i435"
                                                     "i433"
                                                     "i431"
                                                     "i429"
                                                     "i427"
                                                     "i425"
                                                     "i423"
                                                     "i421"
                                                     "i419"
                                                     "i417"
                                                     "i415"
                                                     "i413"
                                                     "i411"
                                                     "i409"
                                                     "i407"
                                                     "i405"
                                                     "i403"
                                                     "i401"
                                                     "i399"
                                                     "i398"
                                                     "i396"
                                                     "i393"
                                                     "i392"
                                                     "i391"
                                                     "i389"
                                                     "i388"
                                                     "i386"
                                                     "i384"
                                                     "i382"
                                                     "i380"
                                                     "i378"
                                                     "i376"
                                                     "i374"
                                                     "i372"
                                                     "i369"
                                                     "i367"
                                                     "i366"
                                                     "i364"
                                                     "i362"
                                                     "i360"
                                                     "i358"
                                                     "i357"
                                                     "i356"
                                                     "i355"
                                                     "i353"
                                                     "i352"
                                                     "i349"
                                                     "i347"
                                                     "i345"
                                                     "i343"
                                                     "i341"
                                                     "i339"
                                                     "i337"
                                                     "i336"
                                                     "i335"
                                                     "i333"
                                                     "i331"
                                                     "i330"
                                                     "i327"
                                                     "i326"
                                                     "i324"
                                                     "i322"
                                                     "i320"
                                                     "i318"
                                                     "i316"
                                                     "i314"
                                                     "i312"
                                                     "i310"
                                                     "i308"
                                                     "i305"
                                                     "i303"
                                                     "i301"
                                                     "i299"
                                                     "i297"
                                                     "i295"
                                                     "i293"
                                                     "i291"
                                                     "i289"
                                                     "i287"
                                                     "i285"
                                                     "i283"
                                                     "i281"
                                                     "i279"
                                                     "i277"
                                                     "i275"
                                                     "i273"
                                                     "i271"
                                                     "i269"
                                                     "i267"
                                                     "i265"
                                                     "i263"
                                                     "i261"
                                                     "i260"
                                                     "i257"
                                                     "i255"
                                                     "i254"
                                                     "i253"
                                                     "i252"
                                                     "i251"
                                                     "i249"
                                                     "i247"
                                                     "i245"
                                                     "i242"
                                                     "i240"
                                                     "i238"
                                                     "i236"
                                                     "i234"
                                                     "i232"
                                                     "i230"
                                                     "i228"
                                                     "i226"
                                                     "i224"
                                                     "i222"
                                                     "i220"
                                                     "i218"
                                                     "i216"
                                                     "i214"
                                                     "i212"
                                                     "i210"
                                                     "i208"))
                                                  #(ribcage
                                                    (define-structure
                                                      define-expansion-accessors
                                                      define-expansion-constructors)
                                                    ((top) (top) (top))
                                                    ("i46" "i45" "i44")))
                                                 (hygiene guile))
                                              '(())))
                                       #f)
                                     #f))
                              #f))
                          #{key 11759}#)
                      (let ((#{x 11887}#
                              (gensym
                                (string-append (symbol->string 'tmp) " "))))
                        (#{build-application 4269}#
                          #{s 11729}#
                          (let ((#{req 12017}# (list 'tmp))
                                (#{vars 12019}# (list #{x 11887}#))
                                (#{exp 12021}#
                                  (#{gen-syntax-case 11725}#
                                    (make-struct/no-tail
                                      (vector-ref %expanded-vtables 3)
                                      #f
                                      'tmp
                                      #{x 11887}#)
                                    #{key 11759}#
                                    #{m 11760}#
                                    #{r 11727}#
                                    #{mod 11730}#)))
                            (let ((#{body 12026}#
                                    (make-struct/no-tail
                                      (vector-ref %expanded-vtables 14)
                                      #f
                                      #{req 12017}#
                                      #f
                                      #f
                                      #f
                                      '()
                                      #{vars 12019}#
                                      #{exp 12021}#
                                      #f)))
                              (make-struct/no-tail
                                (vector-ref %expanded-vtables 13)
                                #f
                                '()
                                #{body 12026}#)))
                          (list (#{expand 4334}#
                                  #{val 11758}#
                                  #{r 11727}#
                                  '(())
                                  #{mod 11730}#))))
                      (syntax-violation
                        'syntax-case
                        "invalid literals list"
                        #{e 11731}#)))
                  #{tmp 11733}#)
                (syntax-violation
                  #f
                  "source expression failed to match any pattern"
                  #{e 11731}#)))))))
    (set! macroexpand
      (lambda*
        (#{x 14464}#
          #:optional
          (#{m 14465}# 'e)
          (#{esew 14466}# '(eval)))
        (#{expand-top-sequence 4330}#
          (list #{x 14464}#)
          '()
          '((top))
          #f
          #{m 14465}#
          #{esew 14466}#
          (cons 'hygiene (module-name (current-module))))))
    (set! identifier?
      (lambda (#{x 14469}#)
        (if (if (vector? #{x 14469}#)
              (if (= (vector-length #{x 14469}#) 4)
                (eq? (vector-ref #{x 14469}# 0) 'syntax-object)
                #f)
              #f)
          (symbol? (vector-ref #{x 14469}# 1))
          #f)))
    (set! datum->syntax
      (lambda (#{id 14494}# #{datum 14495}#)
        (let ((#{wrap 14500}# (vector-ref #{id 14494}# 2))
              (#{module 14501}# (vector-ref #{id 14494}# 3)))
          (vector
            'syntax-object
            #{datum 14495}#
            #{wrap 14500}#
            #{module 14501}#))))
    (set! syntax->datum
      (lambda (#{x 14508}#)
        (#{strip 4347}# #{x 14508}# '(()))))
    (set! syntax-source
      (lambda (#{x 14511}#)
        (#{source-annotation 4295}# #{x 14511}#)))
    (set! generate-temporaries
      (lambda (#{ls 14664}#)
        (begin
          (if (not (list? #{ls 14664}#))
            (syntax-violation
              'generate-temporaries
              "invalid argument"
              #{ls 14664}#))
          (let ((#{mod 14672}#
                  (cons 'hygiene (module-name (current-module)))))
            (map (lambda (#{x 14673}#)
                   (#{wrap 4327}# (gensym) '((top)) #{mod 14672}#))
                 #{ls 14664}#)))))
    (set! free-identifier=?
      (lambda (#{x 14677}# #{y 14678}#)
        (begin
          (if (not (if (if (vector? #{x 14677}#)
                         (if (= (vector-length #{x 14677}#) 4)
                           (eq? (vector-ref #{x 14677}# 0) 'syntax-object)
                           #f)
                         #f)
                     (symbol? (vector-ref #{x 14677}# 1))
                     #f))
            (syntax-violation
              'free-identifier=?
              "invalid argument"
              #{x 14677}#))
          (if (not (if (if (vector? #{y 14678}#)
                         (if (= (vector-length #{y 14678}#) 4)
                           (eq? (vector-ref #{y 14678}# 0) 'syntax-object)
                           #f)
                         #f)
                     (symbol? (vector-ref #{y 14678}# 1))
                     #f))
            (syntax-violation
              'free-identifier=?
              "invalid argument"
              #{y 14678}#))
          (if (eq? (if (if (vector? #{x 14677}#)
                         (if (= (vector-length #{x 14677}#) 4)
                           (eq? (vector-ref #{x 14677}# 0) 'syntax-object)
                           #f)
                         #f)
                     (vector-ref #{x 14677}# 1)
                     #{x 14677}#)
                   (if (if (vector? #{y 14678}#)
                         (if (= (vector-length #{y 14678}#) 4)
                           (eq? (vector-ref #{y 14678}# 0) 'syntax-object)
                           #f)
                         #f)
                     (vector-ref #{y 14678}# 1)
                     #{y 14678}#))
            (eq? (#{id-var-name 4321}# #{x 14677}# '(()))
                 (#{id-var-name 4321}# #{y 14678}# '(())))
            #f))))
    (set! bound-identifier=?
      (lambda (#{x 14828}# #{y 14829}#)
        (begin
          (if (not (if (if (vector? #{x 14828}#)
                         (if (= (vector-length #{x 14828}#) 4)
                           (eq? (vector-ref #{x 14828}# 0) 'syntax-object)
                           #f)
                         #f)
                     (symbol? (vector-ref #{x 14828}# 1))
                     #f))
            (syntax-violation
              'bound-identifier=?
              "invalid argument"
              #{x 14828}#))
          (if (not (if (if (vector? #{y 14829}#)
                         (if (= (vector-length #{y 14829}#) 4)
                           (eq? (vector-ref #{y 14829}# 0) 'syntax-object)
                           #f)
                         #f)
                     (symbol? (vector-ref #{y 14829}# 1))
                     #f))
            (syntax-violation
              'bound-identifier=?
              "invalid argument"
              #{y 14829}#))
          (if (if (if (vector? #{x 14828}#)
                    (if (= (vector-length #{x 14828}#) 4)
                      (eq? (vector-ref #{x 14828}# 0) 'syntax-object)
                      #f)
                    #f)
                (if (vector? #{y 14829}#)
                  (if (= (vector-length #{y 14829}#) 4)
                    (eq? (vector-ref #{y 14829}# 0) 'syntax-object)
                    #f)
                  #f)
                #f)
            (if (eq? (vector-ref #{x 14828}# 1)
                     (vector-ref #{y 14829}# 1))
              (#{same-marks? 4320}#
                (car (vector-ref #{x 14828}# 2))
                (car (vector-ref #{y 14829}# 2)))
              #f)
            (eq? #{x 14828}# #{y 14829}#)))))
    (set! syntax-violation
      (lambda*
        (#{who 14962}#
          #{message 14963}#
          #{form 14964}#
          #:optional
          (#{subform 14965}# #f))
        (begin
          (if (not (if (not #{who 14962}#)
                     (not #{who 14962}#)
                     (let ((#{t 14983}# (string? #{who 14962}#)))
                       (if #{t 14983}#
                         #{t 14983}#
                         (symbol? #{who 14962}#)))))
            (syntax-violation
              'syntax-violation
              "invalid argument"
              #{who 14962}#))
          (if (not (string? #{message 14963}#))
            (syntax-violation
              'syntax-violation
              "invalid argument"
              #{message 14963}#))
          (throw 'syntax-error
                 #{who 14962}#
                 #{message 14963}#
                 (#{source-annotation 4295}#
                   (if #{form 14964}#
                     #{form 14964}#
                     #{subform 14965}#))
                 (#{strip 4347}# #{form 14964}# '(()))
                 (if #{subform 14965}#
                   (#{strip 4347}# #{subform 14965}# '(()))
                   #f)))))
    (letrec*
      ((#{match-each 15186}#
         (lambda (#{e 15773}#
                  #{p 15774}#
                  #{w 15775}#
                  #{mod 15776}#)
           (if (pair? #{e 15773}#)
             (let ((#{first 15777}#
                     (#{match 15192}#
                       (car #{e 15773}#)
                       #{p 15774}#
                       #{w 15775}#
                       '()
                       #{mod 15776}#)))
               (if #{first 15777}#
                 (let ((#{rest 15780}#
                         (#{match-each 15186}#
                           (cdr #{e 15773}#)
                           #{p 15774}#
                           #{w 15775}#
                           #{mod 15776}#)))
                   (if #{rest 15780}#
                     (cons #{first 15777}# #{rest 15780}#)
                     #f))
                 #f))
             (if (null? #{e 15773}#)
               '()
               (if (if (vector? #{e 15773}#)
                     (if (= (vector-length #{e 15773}#) 4)
                       (eq? (vector-ref #{e 15773}# 0) 'syntax-object)
                       #f)
                     #f)
                 (#{match-each 15186}#
                   (vector-ref #{e 15773}# 1)
                   #{p 15774}#
                   (#{join-wraps 4318}#
                     #{w 15775}#
                     (vector-ref #{e 15773}# 2))
                   (vector-ref #{e 15773}# 3))
                 #f)))))
       (#{match-each-any 15188}#
         (lambda (#{e 15808}# #{w 15809}# #{mod 15810}#)
           (if (pair? #{e 15808}#)
             (let ((#{l 15811}#
                     (#{match-each-any 15188}#
                       (cdr #{e 15808}#)
                       #{w 15809}#
                       #{mod 15810}#)))
               (if #{l 15811}#
                 (cons (#{wrap 4327}#
                         (car #{e 15808}#)
                         #{w 15809}#
                         #{mod 15810}#)
                       #{l 15811}#)
                 #f))
             (if (null? #{e 15808}#)
               '()
               (if (if (vector? #{e 15808}#)
                     (if (= (vector-length #{e 15808}#) 4)
                       (eq? (vector-ref #{e 15808}# 0) 'syntax-object)
                       #f)
                     #f)
                 (#{match-each-any 15188}#
                   (vector-ref #{e 15808}# 1)
                   (#{join-wraps 4318}#
                     #{w 15809}#
                     (vector-ref #{e 15808}# 2))
                   #{mod 15810}#)
                 #f)))))
       (#{match-empty 15189}#
         (lambda (#{p 15835}# #{r 15836}#)
           (if (null? #{p 15835}#)
             #{r 15836}#
             (if (eq? #{p 15835}# '_)
               #{r 15836}#
               (if (eq? #{p 15835}# 'any)
                 (cons '() #{r 15836}#)
                 (if (pair? #{p 15835}#)
                   (#{match-empty 15189}#
                     (car #{p 15835}#)
                     (#{match-empty 15189}#
                       (cdr #{p 15835}#)
                       #{r 15836}#))
                   (if (eq? #{p 15835}# 'each-any)
                     (cons '() #{r 15836}#)
                     (let ((#{atom-key 15837}# (vector-ref #{p 15835}# 0)))
                       (if (eqv? #{atom-key 15837}# 'each)
                         (#{match-empty 15189}#
                           (vector-ref #{p 15835}# 1)
                           #{r 15836}#)
                         (if (eqv? #{atom-key 15837}# 'each+)
                           (#{match-empty 15189}#
                             (vector-ref #{p 15835}# 1)
                             (#{match-empty 15189}#
                               (reverse (vector-ref #{p 15835}# 2))
                               (#{match-empty 15189}#
                                 (vector-ref #{p 15835}# 3)
                                 #{r 15836}#)))
                           (if (if (eqv? #{atom-key 15837}# 'free-id)
                                 #t
                                 (eqv? #{atom-key 15837}# 'atom))
                             #{r 15836}#
                             (if (eqv? #{atom-key 15837}# 'vector)
                               (#{match-empty 15189}#
                                 (vector-ref #{p 15835}# 1)
                                 #{r 15836}#)))))))))))))
       (#{combine 15190}#
         (lambda (#{r* 15856}# #{r 15857}#)
           (if (null? (car #{r* 15856}#))
             #{r 15857}#
             (cons (map car #{r* 15856}#)
                   (#{combine 15190}#
                     (map cdr #{r* 15856}#)
                     #{r 15857}#)))))
       (#{match* 15191}#
         (lambda (#{e 15221}#
                  #{p 15222}#
                  #{w 15223}#
                  #{r 15224}#
                  #{mod 15225}#)
           (if (null? #{p 15222}#)
             (if (null? #{e 15221}#) #{r 15224}# #f)
             (if (pair? #{p 15222}#)
               (if (pair? #{e 15221}#)
                 (#{match 15192}#
                   (car #{e 15221}#)
                   (car #{p 15222}#)
                   #{w 15223}#
                   (#{match 15192}#
                     (cdr #{e 15221}#)
                     (cdr #{p 15222}#)
                     #{w 15223}#
                     #{r 15224}#
                     #{mod 15225}#)
                   #{mod 15225}#)
                 #f)
               (if (eq? #{p 15222}# 'each-any)
                 (let ((#{l 15230}#
                         (#{match-each-any 15188}#
                           #{e 15221}#
                           #{w 15223}#
                           #{mod 15225}#)))
                   (if #{l 15230}#
                     (cons #{l 15230}# #{r 15224}#)
                     #f))
                 (let ((#{atom-key 15235}# (vector-ref #{p 15222}# 0)))
                   (if (eqv? #{atom-key 15235}# 'each)
                     (if (null? #{e 15221}#)
                       (#{match-empty 15189}#
                         (vector-ref #{p 15222}# 1)
                         #{r 15224}#)
                       (let ((#{l 15242}#
                               (#{match-each 15186}#
                                 #{e 15221}#
                                 (vector-ref #{p 15222}# 1)
                                 #{w 15223}#
                                 #{mod 15225}#)))
                         (if #{l 15242}#
                           (letrec*
                             ((#{collect 15245}#
                                (lambda (#{l 15296}#)
                                  (if (null? (car #{l 15296}#))
                                    #{r 15224}#
                                    (cons (map car #{l 15296}#)
                                          (#{collect 15245}#
                                            (map cdr #{l 15296}#)))))))
                             (#{collect 15245}# #{l 15242}#))
                           #f)))
                     (if (eqv? #{atom-key 15235}# 'each+)
                       (call-with-values
                         (lambda ()
                           (let ((#{x-pat 15305}# (vector-ref #{p 15222}# 1))
                                 (#{y-pat 15306}# (vector-ref #{p 15222}# 2))
                                 (#{z-pat 15307}# (vector-ref #{p 15222}# 3)))
                             (letrec*
                               ((#{f 15311}#
                                  (lambda (#{e 15313}# #{w 15314}#)
                                    (if (pair? #{e 15313}#)
                                      (call-with-values
                                        (lambda ()
                                          (#{f 15311}#
                                            (cdr #{e 15313}#)
                                            #{w 15314}#))
                                        (lambda (#{xr* 15315}#
                                                 #{y-pat 15316}#
                                                 #{r 15317}#)
                                          (if #{r 15317}#
                                            (if (null? #{y-pat 15316}#)
                                              (let ((#{xr 15318}#
                                                      (#{match 15192}#
                                                        (car #{e 15313}#)
                                                        #{x-pat 15305}#
                                                        #{w 15314}#
                                                        '()
                                                        #{mod 15225}#)))
                                                (if #{xr 15318}#
                                                  (values
                                                    (cons #{xr 15318}#
                                                          #{xr* 15315}#)
                                                    #{y-pat 15316}#
                                                    #{r 15317}#)
                                                  (values #f #f #f)))
                                              (values
                                                '()
                                                (cdr #{y-pat 15316}#)
                                                (#{match 15192}#
                                                  (car #{e 15313}#)
                                                  (car #{y-pat 15316}#)
                                                  #{w 15314}#
                                                  #{r 15317}#
                                                  #{mod 15225}#)))
                                            (values #f #f #f))))
                                      (if (if (vector? #{e 15313}#)
                                            (if (= (vector-length #{e 15313}#)
                                                   4)
                                              (eq? (vector-ref #{e 15313}# 0)
                                                   'syntax-object)
                                              #f)
                                            #f)
                                        (#{f 15311}#
                                          (vector-ref #{e 15313}# 1)
                                          (#{join-wraps 4318}#
                                            #{w 15314}#
                                            #{e 15313}#))
                                        (values
                                          '()
                                          #{y-pat 15306}#
                                          (#{match 15192}#
                                            #{e 15313}#
                                            #{z-pat 15307}#
                                            #{w 15314}#
                                            #{r 15224}#
                                            #{mod 15225}#)))))))
                               (#{f 15311}# #{e 15221}# #{w 15223}#))))
                         (lambda (#{xr* 15344}# #{y-pat 15345}# #{r 15346}#)
                           (if #{r 15346}#
                             (if (null? #{y-pat 15345}#)
                               (if (null? #{xr* 15344}#)
                                 (#{match-empty 15189}#
                                   (vector-ref #{p 15222}# 1)
                                   #{r 15346}#)
                                 (#{combine 15190}# #{xr* 15344}# #{r 15346}#))
                               #f)
                             #f)))
                       (if (eqv? #{atom-key 15235}# 'free-id)
                         (if (if (symbol? #{e 15221}#)
                               #t
                               (if (if (vector? #{e 15221}#)
                                     (if (= (vector-length #{e 15221}#) 4)
                                       (eq? (vector-ref #{e 15221}# 0)
                                            'syntax-object)
                                       #f)
                                     #f)
                                 (symbol? (vector-ref #{e 15221}# 1))
                                 #f))
                           (if (let ((#{i 15677}#
                                       (#{wrap 4327}#
                                         #{e 15221}#
                                         #{w 15223}#
                                         #{mod 15225}#))
                                     (#{j 15678}# (vector-ref #{p 15222}# 1)))
                                 (if (eq? (if (if (vector? #{i 15677}#)
                                                (if (= (vector-length
                                                         #{i 15677}#)
                                                       4)
                                                  (eq? (vector-ref
                                                         #{i 15677}#
                                                         0)
                                                       'syntax-object)
                                                  #f)
                                                #f)
                                            (vector-ref #{i 15677}# 1)
                                            #{i 15677}#)
                                          (if (if (vector? #{j 15678}#)
                                                (if (= (vector-length
                                                         #{j 15678}#)
                                                       4)
                                                  (eq? (vector-ref
                                                         #{j 15678}#
                                                         0)
                                                       'syntax-object)
                                                  #f)
                                                #f)
                                            (vector-ref #{j 15678}# 1)
                                            #{j 15678}#))
                                   (eq? (#{id-var-name 4321}#
                                          #{i 15677}#
                                          '(()))
                                        (#{id-var-name 4321}#
                                          #{j 15678}#
                                          '(())))
                                   #f))
                             #{r 15224}#
                             #f)
                           #f)
                         (if (eqv? #{atom-key 15235}# 'atom)
                           (if (equal?
                                 (vector-ref #{p 15222}# 1)
                                 (#{strip 4347}# #{e 15221}# #{w 15223}#))
                             #{r 15224}#
                             #f)
                           (if (eqv? #{atom-key 15235}# 'vector)
                             (if (vector? #{e 15221}#)
                               (#{match 15192}#
                                 (vector->list #{e 15221}#)
                                 (vector-ref #{p 15222}# 1)
                                 #{w 15223}#
                                 #{r 15224}#
                                 #{mod 15225}#)
                               #f))))))))))))
       (#{match 15192}#
         (lambda (#{e 15738}#
                  #{p 15739}#
                  #{w 15740}#
                  #{r 15741}#
                  #{mod 15742}#)
           (if (not #{r 15741}#)
             #f
             (if (eq? #{p 15739}# '_)
               #{r 15741}#
               (if (eq? #{p 15739}# 'any)
                 (cons (#{wrap 4327}#
                         #{e 15738}#
                         #{w 15740}#
                         #{mod 15742}#)
                       #{r 15741}#)
                 (if (if (vector? #{e 15738}#)
                       (if (= (vector-length #{e 15738}#) 4)
                         (eq? (vector-ref #{e 15738}# 0) 'syntax-object)
                         #f)
                       #f)
                   (#{match* 15191}#
                     (vector-ref #{e 15738}# 1)
                     #{p 15739}#
                     (#{join-wraps 4318}#
                       #{w 15740}#
                       (vector-ref #{e 15738}# 2))
                     #{r 15741}#
                     (vector-ref #{e 15738}# 3))
                   (#{match* 15191}#
                     #{e 15738}#
                     #{p 15739}#
                     #{w 15740}#
                     #{r 15741}#
                     #{mod 15742}#))))))))
      (set! $sc-dispatch
        (lambda (#{e 15193}# #{p 15194}#)
          (if (eq? #{p 15194}# 'any)
            (list #{e 15193}#)
            (if (eq? #{p 15194}# '_)
              '()
              (if (if (vector? #{e 15193}#)
                    (if (= (vector-length #{e 15193}#) 4)
                      (eq? (vector-ref #{e 15193}# 0) 'syntax-object)
                      #f)
                    #f)
                (#{match* 15191}#
                  (vector-ref #{e 15193}# 1)
                  #{p 15194}#
                  (vector-ref #{e 15193}# 2)
                  '()
                  (vector-ref #{e 15193}# 3))
                (#{match* 15191}#
                  #{e 15193}#
                  #{p 15194}#
                  '(())
                  '()
                  #f)))))))))

(define with-syntax
  (make-syntax-transformer
    'with-syntax
    'macro
    (lambda (#{x 27949}#)
      (let ((#{tmp 27951}#
              ($sc-dispatch #{x 27949}# '(_ () any . each-any))))
        (if #{tmp 27951}#
          (@apply
            (lambda (#{e1 27955}# #{e2 27956}#)
              (cons '#(syntax-object
                       let
                       ((top)
                        #(ribcage
                          #(e1 e2)
                          #((top) (top))
                          #("i27922" "i27923"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i27919")))
                       (hygiene guile))
                    (cons '() (cons #{e1 27955}# #{e2 27956}#))))
            #{tmp 27951}#)
          (let ((#{tmp 27957}#
                  ($sc-dispatch
                    #{x 27949}#
                    '(_ ((any any)) any . each-any))))
            (if #{tmp 27957}#
              (@apply
                (lambda (#{out 27961}#
                         #{in 27962}#
                         #{e1 27963}#
                         #{e2 27964}#)
                  (list '#(syntax-object
                           syntax-case
                           ((top)
                            #(ribcage
                              #(out in e1 e2)
                              #((top) (top) (top) (top))
                              #("i27928" "i27929" "i27930" "i27931"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i27919")))
                           (hygiene guile))
                        #{in 27962}#
                        '()
                        (list #{out 27961}#
                              (cons '#(syntax-object
                                       let
                                       ((top)
                                        #(ribcage
                                          #(out in e1 e2)
                                          #((top) (top) (top) (top))
                                          #("i27928"
                                            "i27929"
                                            "i27930"
                                            "i27931"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i27919")))
                                       (hygiene guile))
                                    (cons '()
                                          (cons #{e1 27963}# #{e2 27964}#))))))
                #{tmp 27957}#)
              (let ((#{tmp 27965}#
                      ($sc-dispatch
                        #{x 27949}#
                        '(_ #(each (any any)) any . each-any))))
                (if #{tmp 27965}#
                  (@apply
                    (lambda (#{out 27969}#
                             #{in 27970}#
                             #{e1 27971}#
                             #{e2 27972}#)
                      (list '#(syntax-object
                               syntax-case
                               ((top)
                                #(ribcage
                                  #(out in e1 e2)
                                  #((top) (top) (top) (top))
                                  #("i27938" "i27939" "i27940" "i27941"))
                                #(ribcage () () ())
                                #(ribcage #(x) #((top)) #("i27919")))
                               (hygiene guile))
                            (cons '#(syntax-object
                                     list
                                     ((top)
                                      #(ribcage
                                        #(out in e1 e2)
                                        #((top) (top) (top) (top))
                                        #("i27938" "i27939" "i27940" "i27941"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("i27919")))
                                     (hygiene guile))
                                  #{in 27970}#)
                            '()
                            (list #{out 27969}#
                                  (cons '#(syntax-object
                                           let
                                           ((top)
                                            #(ribcage
                                              #(out in e1 e2)
                                              #((top) (top) (top) (top))
                                              #("i27938"
                                                "i27939"
                                                "i27940"
                                                "i27941"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(x)
                                              #((top))
                                              #("i27919")))
                                           (hygiene guile))
                                        (cons '()
                                              (cons #{e1 27971}#
                                                    #{e2 27972}#))))))
                    #{tmp 27965}#)
                  (syntax-violation
                    #f
                    "source expression failed to match any pattern"
                    #{x 27949}#))))))))))

(define syntax-rules
  (make-syntax-transformer
    'syntax-rules
    'macro
    (lambda (#{x 28026}#)
      (let ((#{tmp 28028}#
              ($sc-dispatch
                #{x 28026}#
                '(_ each-any . #(each ((any . any) any))))))
        (if #{tmp 28028}#
          (@apply
            (lambda (#{k 28032}#
                     #{keyword 28033}#
                     #{pattern 28034}#
                     #{template 28035}#)
              (list '#(syntax-object
                       lambda
                       ((top)
                        #(ribcage
                          #(k keyword pattern template)
                          #((top) (top) (top) (top))
                          #("i27989" "i27990" "i27991" "i27992"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i27986")))
                       (hygiene guile))
                    '(#(syntax-object
                        x
                        ((top)
                         #(ribcage
                           #(k keyword pattern template)
                           #((top) (top) (top) (top))
                           #("i27989" "i27990" "i27991" "i27992"))
                         #(ribcage () () ())
                         #(ribcage #(x) #((top)) #("i27986")))
                        (hygiene guile)))
                    (vector
                      '(#(syntax-object
                          macro-type
                          ((top)
                           #(ribcage
                             #(k keyword pattern template)
                             #((top) (top) (top) (top))
                             #("i27989" "i27990" "i27991" "i27992"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("i27986")))
                          (hygiene guile))
                        .
                        #(syntax-object
                          syntax-rules
                          ((top)
                           #(ribcage
                             #(k keyword pattern template)
                             #((top) (top) (top) (top))
                             #("i27989" "i27990" "i27991" "i27992"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("i27986")))
                          (hygiene guile)))
                      (cons '#(syntax-object
                               patterns
                               ((top)
                                #(ribcage
                                  #(k keyword pattern template)
                                  #((top) (top) (top) (top))
                                  #("i27989" "i27990" "i27991" "i27992"))
                                #(ribcage () () ())
                                #(ribcage #(x) #((top)) #("i27986")))
                               (hygiene guile))
                            #{pattern 28034}#))
                    (cons '#(syntax-object
                             syntax-case
                             ((top)
                              #(ribcage
                                #(k keyword pattern template)
                                #((top) (top) (top) (top))
                                #("i27989" "i27990" "i27991" "i27992"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i27986")))
                             (hygiene guile))
                          (cons '#(syntax-object
                                   x
                                   ((top)
                                    #(ribcage
                                      #(k keyword pattern template)
                                      #((top) (top) (top) (top))
                                      #("i27989" "i27990" "i27991" "i27992"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("i27986")))
                                   (hygiene guile))
                                (cons #{k 28032}#
                                      (map (lambda (#{tmp 28000 28036}#
                                                    #{tmp 27999 28037}#)
                                             (list (cons '#(syntax-object
                                                            dummy
                                                            ((top)
                                                             #(ribcage
                                                               #(k
                                                                 keyword
                                                                 pattern
                                                                 template)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i27989"
                                                                 "i27990"
                                                                 "i27991"
                                                                 "i27992"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("i27986")))
                                                            (hygiene guile))
                                                         #{tmp 27999 28037}#)
                                                   (list '#(syntax-object
                                                            syntax
                                                            ((top)
                                                             #(ribcage
                                                               #(k
                                                                 keyword
                                                                 pattern
                                                                 template)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i27989"
                                                                 "i27990"
                                                                 "i27991"
                                                                 "i27992"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("i27986")))
                                                            (hygiene guile))
                                                         #{tmp 28000 28036}#)))
                                           #{template 28035}#
                                           #{pattern 28034}#))))))
            #{tmp 28028}#)
          (let ((#{tmp 28038}#
                  ($sc-dispatch
                    #{x 28026}#
                    '(_ each-any any . #(each ((any . any) any))))))
            (if (if #{tmp 28038}#
                  (@apply
                    (lambda (#{k 28042}#
                             #{docstring 28043}#
                             #{keyword 28044}#
                             #{pattern 28045}#
                             #{template 28046}#)
                      (string? (syntax->datum #{docstring 28043}#)))
                    #{tmp 28038}#)
                  #f)
              (@apply
                (lambda (#{k 28047}#
                         #{docstring 28048}#
                         #{keyword 28049}#
                         #{pattern 28050}#
                         #{template 28051}#)
                  (list '#(syntax-object
                           lambda
                           ((top)
                            #(ribcage
                              #(k docstring keyword pattern template)
                              #((top) (top) (top) (top) (top))
                              #("i28012" "i28013" "i28014" "i28015" "i28016"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i27986")))
                           (hygiene guile))
                        '(#(syntax-object
                            x
                            ((top)
                             #(ribcage
                               #(k docstring keyword pattern template)
                               #((top) (top) (top) (top) (top))
                               #("i28012" "i28013" "i28014" "i28015" "i28016"))
                             #(ribcage () () ())
                             #(ribcage #(x) #((top)) #("i27986")))
                            (hygiene guile)))
                        #{docstring 28048}#
                        (vector
                          '(#(syntax-object
                              macro-type
                              ((top)
                               #(ribcage
                                 #(k docstring keyword pattern template)
                                 #((top) (top) (top) (top) (top))
                                 #("i28012"
                                   "i28013"
                                   "i28014"
                                   "i28015"
                                   "i28016"))
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("i27986")))
                              (hygiene guile))
                            .
                            #(syntax-object
                              syntax-rules
                              ((top)
                               #(ribcage
                                 #(k docstring keyword pattern template)
                                 #((top) (top) (top) (top) (top))
                                 #("i28012"
                                   "i28013"
                                   "i28014"
                                   "i28015"
                                   "i28016"))
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("i27986")))
                              (hygiene guile)))
                          (cons '#(syntax-object
                                   patterns
                                   ((top)
                                    #(ribcage
                                      #(k docstring keyword pattern template)
                                      #((top) (top) (top) (top) (top))
                                      #("i28012"
                                        "i28013"
                                        "i28014"
                                        "i28015"
                                        "i28016"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("i27986")))
                                   (hygiene guile))
                                #{pattern 28050}#))
                        (cons '#(syntax-object
                                 syntax-case
                                 ((top)
                                  #(ribcage
                                    #(k docstring keyword pattern template)
                                    #((top) (top) (top) (top) (top))
                                    #("i28012"
                                      "i28013"
                                      "i28014"
                                      "i28015"
                                      "i28016"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("i27986")))
                                 (hygiene guile))
                              (cons '#(syntax-object
                                       x
                                       ((top)
                                        #(ribcage
                                          #(k
                                            docstring
                                            keyword
                                            pattern
                                            template)
                                          #((top) (top) (top) (top) (top))
                                          #("i28012"
                                            "i28013"
                                            "i28014"
                                            "i28015"
                                            "i28016"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i27986")))
                                       (hygiene guile))
                                    (cons #{k 28047}#
                                          (map (lambda (#{tmp 28025 28052}#
                                                        #{tmp 28024 28053}#)
                                                 (list (cons '#(syntax-object
                                                                dummy
                                                                ((top)
                                                                 #(ribcage
                                                                   #(k
                                                                     docstring
                                                                     keyword
                                                                     pattern
                                                                     template)
                                                                   #((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                   #("i28012"
                                                                     "i28013"
                                                                     "i28014"
                                                                     "i28015"
                                                                     "i28016"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("i27986")))
                                                                (hygiene
                                                                  guile))
                                                             #{tmp 28024 28053}#)
                                                       (list '#(syntax-object
                                                                syntax
                                                                ((top)
                                                                 #(ribcage
                                                                   #(k
                                                                     docstring
                                                                     keyword
                                                                     pattern
                                                                     template)
                                                                   #((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                   #("i28012"
                                                                     "i28013"
                                                                     "i28014"
                                                                     "i28015"
                                                                     "i28016"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("i27986")))
                                                                (hygiene
                                                                  guile))
                                                             #{tmp 28025 28052}#)))
                                               #{template 28051}#
                                               #{pattern 28050}#))))))
                #{tmp 28038}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{x 28026}#))))))))

(define define-syntax-rule
  (make-syntax-transformer
    'define-syntax-rule
    'macro
    (lambda (#{x 28090}#)
      (let ((#{tmp 28092}#
              ($sc-dispatch #{x 28090}# '(_ (any . any) any))))
        (if #{tmp 28092}#
          (@apply
            (lambda (#{name 28096}#
                     #{pattern 28097}#
                     #{template 28098}#)
              (list '#(syntax-object
                       define-syntax
                       ((top)
                        #(ribcage
                          #(name pattern template)
                          #((top) (top) (top))
                          #("i28067" "i28068" "i28069"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i28064")))
                       (hygiene guile))
                    #{name 28096}#
                    (list '#(syntax-object
                             syntax-rules
                             ((top)
                              #(ribcage
                                #(name pattern template)
                                #((top) (top) (top))
                                #("i28067" "i28068" "i28069"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i28064")))
                             (hygiene guile))
                          '()
                          (list (cons '#(syntax-object
                                         _
                                         ((top)
                                          #(ribcage
                                            #(name pattern template)
                                            #((top) (top) (top))
                                            #("i28067" "i28068" "i28069"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i28064")))
                                         (hygiene guile))
                                      #{pattern 28097}#)
                                #{template 28098}#))))
            #{tmp 28092}#)
          (let ((#{tmp 28099}#
                  ($sc-dispatch
                    #{x 28090}#
                    '(_ (any . any) any any))))
            (if (if #{tmp 28099}#
                  (@apply
                    (lambda (#{name 28103}#
                             #{pattern 28104}#
                             #{docstring 28105}#
                             #{template 28106}#)
                      (string? (syntax->datum #{docstring 28105}#)))
                    #{tmp 28099}#)
                  #f)
              (@apply
                (lambda (#{name 28107}#
                         #{pattern 28108}#
                         #{docstring 28109}#
                         #{template 28110}#)
                  (list '#(syntax-object
                           define-syntax
                           ((top)
                            #(ribcage
                              #(name pattern docstring template)
                              #((top) (top) (top) (top))
                              #("i28082" "i28083" "i28084" "i28085"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i28064")))
                           (hygiene guile))
                        #{name 28107}#
                        (list '#(syntax-object
                                 syntax-rules
                                 ((top)
                                  #(ribcage
                                    #(name pattern docstring template)
                                    #((top) (top) (top) (top))
                                    #("i28082" "i28083" "i28084" "i28085"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("i28064")))
                                 (hygiene guile))
                              '()
                              #{docstring 28109}#
                              (list (cons '#(syntax-object
                                             _
                                             ((top)
                                              #(ribcage
                                                #(name
                                                  pattern
                                                  docstring
                                                  template)
                                                #((top) (top) (top) (top))
                                                #("i28082"
                                                  "i28083"
                                                  "i28084"
                                                  "i28085"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(x)
                                                #((top))
                                                #("i28064")))
                                             (hygiene guile))
                                          #{pattern 28108}#)
                                    #{template 28110}#))))
                #{tmp 28099}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{x 28090}#))))))))

(define let*
  (make-syntax-transformer
    'let*
    'macro
    (lambda (#{x 28159}#)
      (let ((#{tmp 28161}#
              ($sc-dispatch
                #{x 28159}#
                '(any #(each (any any)) any . each-any))))
        (if (if #{tmp 28161}#
              (@apply
                (lambda (#{let* 28165}#
                         #{x 28166}#
                         #{v 28167}#
                         #{e1 28168}#
                         #{e2 28169}#)
                  (and-map identifier? #{x 28166}#))
                #{tmp 28161}#)
              #f)
          (@apply
            (lambda (#{let* 28170}#
                     #{x 28171}#
                     #{v 28172}#
                     #{e1 28173}#
                     #{e2 28174}#)
              (letrec*
                ((#{f 28175}#
                   (lambda (#{bindings 28178}#)
                     (if (null? #{bindings 28178}#)
                       (cons '#(syntax-object
                                let
                                ((top)
                                 #(ribcage () () ())
                                 #(ribcage
                                   #(f bindings)
                                   #((top) (top))
                                   #("i28145" "i28146"))
                                 #(ribcage
                                   #(let* x v e1 e2)
                                   #((top) (top) (top) (top) (top))
                                   #("i28135"
                                     "i28136"
                                     "i28137"
                                     "i28138"
                                     "i28139"))
                                 #(ribcage () () ())
                                 #(ribcage #(x) #((top)) #("i28121")))
                                (hygiene guile))
                             (cons '() (cons #{e1 28173}# #{e2 28174}#)))
                       (let ((#{tmp 28179}#
                               (list (#{f 28175}# (cdr #{bindings 28178}#))
                                     (car #{bindings 28178}#))))
                         (let ((#{tmp 28180}#
                                 ($sc-dispatch #{tmp 28179}# '(any any))))
                           (if #{tmp 28180}#
                             (@apply
                               (lambda (#{body 28182}# #{binding 28183}#)
                                 (list '#(syntax-object
                                          let
                                          ((top)
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(body binding)
                                             #((top) (top))
                                             #("i28155" "i28156"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(f bindings)
                                             #((top) (top))
                                             #("i28145" "i28146"))
                                           #(ribcage
                                             #(let* x v e1 e2)
                                             #((top) (top) (top) (top) (top))
                                             #("i28135"
                                               "i28136"
                                               "i28137"
                                               "i28138"
                                               "i28139"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x)
                                             #((top))
                                             #("i28121")))
                                          (hygiene guile))
                                       (list #{binding 28183}#)
                                       #{body 28182}#))
                               #{tmp 28180}#)
                             (syntax-violation
                               #f
                               "source expression failed to match any pattern"
                               #{tmp 28179}#))))))))
                (#{f 28175}# (map list #{x 28171}# #{v 28172}#))))
            #{tmp 28161}#)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            #{x 28159}#))))))

(define do
  (make-syntax-transformer
    'do
    'macro
    (lambda (#{orig-x 28241}#)
      (let ((#{tmp 28243}#
              ($sc-dispatch
                #{orig-x 28241}#
                '(_ #(each (any any . any))
                    (any . each-any)
                    .
                    each-any))))
        (if #{tmp 28243}#
          (@apply
            (lambda (#{var 28247}#
                     #{init 28248}#
                     #{step 28249}#
                     #{e0 28250}#
                     #{e1 28251}#
                     #{c 28252}#)
              (let ((#{tmp 28253}#
                      (map (lambda (#{v 28256}# #{s 28257}#)
                             (let ((#{tmp 28259}#
                                     ($sc-dispatch #{s 28257}# '())))
                               (if #{tmp 28259}#
                                 (@apply (lambda () #{v 28256}#) #{tmp 28259}#)
                                 (let ((#{tmp 28262}#
                                         ($sc-dispatch #{s 28257}# '(any))))
                                   (if #{tmp 28262}#
                                     (@apply
                                       (lambda (#{e 28265}#) #{e 28265}#)
                                       #{tmp 28262}#)
                                     (syntax-violation
                                       'do
                                       "bad step expression"
                                       #{orig-x 28241}#
                                       #{s 28257}#))))))
                           #{var 28247}#
                           #{step 28249}#)))
                (let ((#{tmp 28254}#
                        ($sc-dispatch #{tmp 28253}# 'each-any)))
                  (if #{tmp 28254}#
                    (@apply
                      (lambda (#{step 28271}#)
                        (let ((#{tmp 28273}# ($sc-dispatch #{e1 28251}# '())))
                          (if #{tmp 28273}#
                            (@apply
                              (lambda ()
                                (list '#(syntax-object
                                         let
                                         ((top)
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(step)
                                            #((top))
                                            #("i28209"))
                                          #(ribcage
                                            #(var init step e0 e1 c)
                                            #((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                            #("i28194"
                                              "i28195"
                                              "i28196"
                                              "i28197"
                                              "i28198"
                                              "i28199"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(orig-x)
                                            #((top))
                                            #("i28191")))
                                         (hygiene guile))
                                      '#(syntax-object
                                         doloop
                                         ((top)
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(step)
                                            #((top))
                                            #("i28209"))
                                          #(ribcage
                                            #(var init step e0 e1 c)
                                            #((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                            #("i28194"
                                              "i28195"
                                              "i28196"
                                              "i28197"
                                              "i28198"
                                              "i28199"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(orig-x)
                                            #((top))
                                            #("i28191")))
                                         (hygiene guile))
                                      (map list #{var 28247}# #{init 28248}#)
                                      (list '#(syntax-object
                                               if
                                               ((top)
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(step)
                                                  #((top))
                                                  #("i28209"))
                                                #(ribcage
                                                  #(var init step e0 e1 c)
                                                  #((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                  #("i28194"
                                                    "i28195"
                                                    "i28196"
                                                    "i28197"
                                                    "i28198"
                                                    "i28199"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(orig-x)
                                                  #((top))
                                                  #("i28191")))
                                               (hygiene guile))
                                            (list '#(syntax-object
                                                     not
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(step)
                                                        #((top))
                                                        #("i28209"))
                                                      #(ribcage
                                                        #(var
                                                          init
                                                          step
                                                          e0
                                                          e1
                                                          c)
                                                        #((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                        #("i28194"
                                                          "i28195"
                                                          "i28196"
                                                          "i28197"
                                                          "i28198"
                                                          "i28199"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(orig-x)
                                                        #((top))
                                                        #("i28191")))
                                                     (hygiene guile))
                                                  #{e0 28250}#)
                                            (cons '#(syntax-object
                                                     begin
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(step)
                                                        #((top))
                                                        #("i28209"))
                                                      #(ribcage
                                                        #(var
                                                          init
                                                          step
                                                          e0
                                                          e1
                                                          c)
                                                        #((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                        #("i28194"
                                                          "i28195"
                                                          "i28196"
                                                          "i28197"
                                                          "i28198"
                                                          "i28199"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(orig-x)
                                                        #((top))
                                                        #("i28191")))
                                                     (hygiene guile))
                                                  (append
                                                    #{c 28252}#
                                                    (list (cons '#(syntax-object
                                                                   doloop
                                                                   ((top)
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(step)
                                                                      #((top))
                                                                      #("i28209"))
                                                                    #(ribcage
                                                                      #(var
                                                                        init
                                                                        step
                                                                        e0
                                                                        e1
                                                                        c)
                                                                      #((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                      #("i28194"
                                                                        "i28195"
                                                                        "i28196"
                                                                        "i28197"
                                                                        "i28198"
                                                                        "i28199"))
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(orig-x)
                                                                      #((top))
                                                                      #("i28191")))
                                                                   (hygiene
                                                                     guile))
                                                                #{step 28271}#)))))))
                              #{tmp 28273}#)
                            (let ((#{tmp 28277}#
                                    ($sc-dispatch
                                      #{e1 28251}#
                                      '(any . each-any))))
                              (if #{tmp 28277}#
                                (@apply
                                  (lambda (#{e1 28281}# #{e2 28282}#)
                                    (list '#(syntax-object
                                             let
                                             ((top)
                                              #(ribcage
                                                #(e1 e2)
                                                #((top) (top))
                                                #("i28218" "i28219"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(step)
                                                #((top))
                                                #("i28209"))
                                              #(ribcage
                                                #(var init step e0 e1 c)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("i28194"
                                                  "i28195"
                                                  "i28196"
                                                  "i28197"
                                                  "i28198"
                                                  "i28199"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(orig-x)
                                                #((top))
                                                #("i28191")))
                                             (hygiene guile))
                                          '#(syntax-object
                                             doloop
                                             ((top)
                                              #(ribcage
                                                #(e1 e2)
                                                #((top) (top))
                                                #("i28218" "i28219"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(step)
                                                #((top))
                                                #("i28209"))
                                              #(ribcage
                                                #(var init step e0 e1 c)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("i28194"
                                                  "i28195"
                                                  "i28196"
                                                  "i28197"
                                                  "i28198"
                                                  "i28199"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(orig-x)
                                                #((top))
                                                #("i28191")))
                                             (hygiene guile))
                                          (map list
                                               #{var 28247}#
                                               #{init 28248}#)
                                          (list '#(syntax-object
                                                   if
                                                   ((top)
                                                    #(ribcage
                                                      #(e1 e2)
                                                      #((top) (top))
                                                      #("i28218" "i28219"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(step)
                                                      #((top))
                                                      #("i28209"))
                                                    #(ribcage
                                                      #(var init step e0 e1 c)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i28194"
                                                        "i28195"
                                                        "i28196"
                                                        "i28197"
                                                        "i28198"
                                                        "i28199"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(orig-x)
                                                      #((top))
                                                      #("i28191")))
                                                   (hygiene guile))
                                                #{e0 28250}#
                                                (cons '#(syntax-object
                                                         begin
                                                         ((top)
                                                          #(ribcage
                                                            #(e1 e2)
                                                            #((top) (top))
                                                            #("i28218"
                                                              "i28219"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(step)
                                                            #((top))
                                                            #("i28209"))
                                                          #(ribcage
                                                            #(var
                                                              init
                                                              step
                                                              e0
                                                              e1
                                                              c)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i28194"
                                                              "i28195"
                                                              "i28196"
                                                              "i28197"
                                                              "i28198"
                                                              "i28199"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(orig-x)
                                                            #((top))
                                                            #("i28191")))
                                                         (hygiene guile))
                                                      (cons #{e1 28281}#
                                                            #{e2 28282}#))
                                                (cons '#(syntax-object
                                                         begin
                                                         ((top)
                                                          #(ribcage
                                                            #(e1 e2)
                                                            #((top) (top))
                                                            #("i28218"
                                                              "i28219"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(step)
                                                            #((top))
                                                            #("i28209"))
                                                          #(ribcage
                                                            #(var
                                                              init
                                                              step
                                                              e0
                                                              e1
                                                              c)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i28194"
                                                              "i28195"
                                                              "i28196"
                                                              "i28197"
                                                              "i28198"
                                                              "i28199"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(orig-x)
                                                            #((top))
                                                            #("i28191")))
                                                         (hygiene guile))
                                                      (append
                                                        #{c 28252}#
                                                        (list (cons '#(syntax-object
                                                                       doloop
                                                                       ((top)
                                                                        #(ribcage
                                                                          #(e1
                                                                            e2)
                                                                          #((top)
                                                                            (top))
                                                                          #("i28218"
                                                                            "i28219"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(step)
                                                                          #((top))
                                                                          #("i28209"))
                                                                        #(ribcage
                                                                          #(var
                                                                            init
                                                                            step
                                                                            e0
                                                                            e1
                                                                            c)
                                                                          #((top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top))
                                                                          #("i28194"
                                                                            "i28195"
                                                                            "i28196"
                                                                            "i28197"
                                                                            "i28198"
                                                                            "i28199"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(orig-x)
                                                                          #((top))
                                                                          #("i28191")))
                                                                       (hygiene
                                                                         guile))
                                                                    #{step 28271}#)))))))
                                  #{tmp 28277}#)
                                (syntax-violation
                                  #f
                                  "source expression failed to match any pattern"
                                  #{e1 28251}#))))))
                      #{tmp 28254}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp 28253}#)))))
            #{tmp 28243}#)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            #{orig-x 28241}#))))))

(define quasiquote
  (make-syntax-transformer
    'quasiquote
    'macro
    (letrec*
      ((#{quasi 28568}#
         (lambda (#{p 28592}# #{lev 28593}#)
           (let ((#{tmp 28595}#
                   ($sc-dispatch
                     #{p 28592}#
                     '(#(free-id
                         #(syntax-object
                           unquote
                           ((top)
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("i28314" "i28315"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("i28310"
                               "i28308"
                               "i28306"
                               "i28304"
                               "i28302"
                               "i28300"
                               "i28298")))
                           (hygiene guile)))
                       any))))
             (if #{tmp 28595}#
               (@apply
                 (lambda (#{p 28599}#)
                   (if (= #{lev 28593}# 0)
                     (list '#(syntax-object
                              "value"
                              ((top)
                               #(ribcage #(p) #((top)) #("i28318"))
                               #(ribcage () () ())
                               #(ribcage
                                 #(p lev)
                                 #((top) (top))
                                 #("i28314" "i28315"))
                               #(ribcage
                                 (emit quasivector
                                       quasilist*
                                       quasiappend
                                       quasicons
                                       vquasi
                                       quasi)
                                 ((top) (top) (top) (top) (top) (top) (top))
                                 ("i28310"
                                  "i28308"
                                  "i28306"
                                  "i28304"
                                  "i28302"
                                  "i28300"
                                  "i28298")))
                              (hygiene guile))
                           #{p 28599}#)
                     (#{quasicons 28570}#
                       '(#(syntax-object
                           "quote"
                           ((top)
                            #(ribcage #(p) #((top)) #("i28318"))
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("i28314" "i28315"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("i28310"
                               "i28308"
                               "i28306"
                               "i28304"
                               "i28302"
                               "i28300"
                               "i28298")))
                           (hygiene guile))
                         #(syntax-object
                           unquote
                           ((top)
                            #(ribcage #(p) #((top)) #("i28318"))
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("i28314" "i28315"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("i28310"
                               "i28308"
                               "i28306"
                               "i28304"
                               "i28302"
                               "i28300"
                               "i28298")))
                           (hygiene guile)))
                       (#{quasi 28568}#
                         (list #{p 28599}#)
                         (#{1-}# #{lev 28593}#)))))
                 #{tmp 28595}#)
               (let ((#{tmp 28602}#
                       ($sc-dispatch
                         #{p 28592}#
                         '(#(free-id
                             #(syntax-object
                               quasiquote
                               ((top)
                                #(ribcage () () ())
                                #(ribcage
                                  #(p lev)
                                  #((top) (top))
                                  #("i28314" "i28315"))
                                #(ribcage
                                  (emit quasivector
                                        quasilist*
                                        quasiappend
                                        quasicons
                                        vquasi
                                        quasi)
                                  ((top) (top) (top) (top) (top) (top) (top))
                                  ("i28310"
                                   "i28308"
                                   "i28306"
                                   "i28304"
                                   "i28302"
                                   "i28300"
                                   "i28298")))
                               (hygiene guile)))
                           any))))
                 (if #{tmp 28602}#
                   (@apply
                     (lambda (#{p 28606}#)
                       (#{quasicons 28570}#
                         '(#(syntax-object
                             "quote"
                             ((top)
                              #(ribcage #(p) #((top)) #("i28321"))
                              #(ribcage () () ())
                              #(ribcage
                                #(p lev)
                                #((top) (top))
                                #("i28314" "i28315"))
                              #(ribcage
                                (emit quasivector
                                      quasilist*
                                      quasiappend
                                      quasicons
                                      vquasi
                                      quasi)
                                ((top) (top) (top) (top) (top) (top) (top))
                                ("i28310"
                                 "i28308"
                                 "i28306"
                                 "i28304"
                                 "i28302"
                                 "i28300"
                                 "i28298")))
                             (hygiene guile))
                           #(syntax-object
                             quasiquote
                             ((top)
                              #(ribcage #(p) #((top)) #("i28321"))
                              #(ribcage () () ())
                              #(ribcage
                                #(p lev)
                                #((top) (top))
                                #("i28314" "i28315"))
                              #(ribcage
                                (emit quasivector
                                      quasilist*
                                      quasiappend
                                      quasicons
                                      vquasi
                                      quasi)
                                ((top) (top) (top) (top) (top) (top) (top))
                                ("i28310"
                                 "i28308"
                                 "i28306"
                                 "i28304"
                                 "i28302"
                                 "i28300"
                                 "i28298")))
                             (hygiene guile)))
                         (#{quasi 28568}#
                           (list #{p 28606}#)
                           (#{1+}# #{lev 28593}#))))
                     #{tmp 28602}#)
                   (let ((#{tmp 28609}#
                           ($sc-dispatch #{p 28592}# '(any . any))))
                     (if #{tmp 28609}#
                       (@apply
                         (lambda (#{p 28613}# #{q 28614}#)
                           (let ((#{tmp 28616}#
                                   ($sc-dispatch
                                     #{p 28613}#
                                     '(#(free-id
                                         #(syntax-object
                                           unquote
                                           ((top)
                                            #(ribcage
                                              #(p q)
                                              #((top) (top))
                                              #("i28324" "i28325"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(p lev)
                                              #((top) (top))
                                              #("i28314" "i28315"))
                                            #(ribcage
                                              (emit quasivector
                                                    quasilist*
                                                    quasiappend
                                                    quasicons
                                                    vquasi
                                                    quasi)
                                              ((top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top))
                                              ("i28310"
                                               "i28308"
                                               "i28306"
                                               "i28304"
                                               "i28302"
                                               "i28300"
                                               "i28298")))
                                           (hygiene guile)))
                                       .
                                       each-any))))
                             (if #{tmp 28616}#
                               (@apply
                                 (lambda (#{p 28620}#)
                                   (if (= #{lev 28593}# 0)
                                     (#{quasilist* 28572}#
                                       (map (lambda (#{tmp 28332 28656}#)
                                              (list '#(syntax-object
                                                       "value"
                                                       ((top)
                                                        #(ribcage
                                                          #(p)
                                                          #((top))
                                                          #("i28330"))
                                                        #(ribcage
                                                          #(p q)
                                                          #((top) (top))
                                                          #("i28324" "i28325"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(p lev)
                                                          #((top) (top))
                                                          #("i28314" "i28315"))
                                                        #(ribcage
                                                          (emit quasivector
                                                                quasilist*
                                                                quasiappend
                                                                quasicons
                                                                vquasi
                                                                quasi)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("i28310"
                                                           "i28308"
                                                           "i28306"
                                                           "i28304"
                                                           "i28302"
                                                           "i28300"
                                                           "i28298")))
                                                       (hygiene guile))
                                                    #{tmp 28332 28656}#))
                                            #{p 28620}#)
                                       (#{quasi 28568}#
                                         #{q 28614}#
                                         #{lev 28593}#))
                                     (#{quasicons 28570}#
                                       (#{quasicons 28570}#
                                         '(#(syntax-object
                                             "quote"
                                             ((top)
                                              #(ribcage
                                                #(p)
                                                #((top))
                                                #("i28330"))
                                              #(ribcage
                                                #(p q)
                                                #((top) (top))
                                                #("i28324" "i28325"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(p lev)
                                                #((top) (top))
                                                #("i28314" "i28315"))
                                              #(ribcage
                                                (emit quasivector
                                                      quasilist*
                                                      quasiappend
                                                      quasicons
                                                      vquasi
                                                      quasi)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("i28310"
                                                 "i28308"
                                                 "i28306"
                                                 "i28304"
                                                 "i28302"
                                                 "i28300"
                                                 "i28298")))
                                             (hygiene guile))
                                           #(syntax-object
                                             unquote
                                             ((top)
                                              #(ribcage
                                                #(p)
                                                #((top))
                                                #("i28330"))
                                              #(ribcage
                                                #(p q)
                                                #((top) (top))
                                                #("i28324" "i28325"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(p lev)
                                                #((top) (top))
                                                #("i28314" "i28315"))
                                              #(ribcage
                                                (emit quasivector
                                                      quasilist*
                                                      quasiappend
                                                      quasicons
                                                      vquasi
                                                      quasi)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("i28310"
                                                 "i28308"
                                                 "i28306"
                                                 "i28304"
                                                 "i28302"
                                                 "i28300"
                                                 "i28298")))
                                             (hygiene guile)))
                                         (#{quasi 28568}#
                                           #{p 28620}#
                                           (#{1-}# #{lev 28593}#)))
                                       (#{quasi 28568}#
                                         #{q 28614}#
                                         #{lev 28593}#))))
                                 #{tmp 28616}#)
                               (let ((#{tmp 28661}#
                                       ($sc-dispatch
                                         #{p 28613}#
                                         '(#(free-id
                                             #(syntax-object
                                               unquote-splicing
                                               ((top)
                                                #(ribcage
                                                  #(p q)
                                                  #((top) (top))
                                                  #("i28324" "i28325"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(p lev)
                                                  #((top) (top))
                                                  #("i28314" "i28315"))
                                                #(ribcage
                                                  (emit quasivector
                                                        quasilist*
                                                        quasiappend
                                                        quasicons
                                                        vquasi
                                                        quasi)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("i28310"
                                                   "i28308"
                                                   "i28306"
                                                   "i28304"
                                                   "i28302"
                                                   "i28300"
                                                   "i28298")))
                                               (hygiene guile)))
                                           .
                                           each-any))))
                                 (if #{tmp 28661}#
                                   (@apply
                                     (lambda (#{p 28665}#)
                                       (if (= #{lev 28593}# 0)
                                         (#{quasiappend 28571}#
                                           (map (lambda (#{tmp 28337 28668}#)
                                                  (list '#(syntax-object
                                                           "value"
                                                           ((top)
                                                            #(ribcage
                                                              #(p)
                                                              #((top))
                                                              #("i28335"))
                                                            #(ribcage
                                                              #(p q)
                                                              #((top) (top))
                                                              #("i28324"
                                                                "i28325"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(p lev)
                                                              #((top) (top))
                                                              #("i28314"
                                                                "i28315"))
                                                            #(ribcage
                                                              (emit quasivector
                                                                    quasilist*
                                                                    quasiappend
                                                                    quasicons
                                                                    vquasi
                                                                    quasi)
                                                              ((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                              ("i28310"
                                                               "i28308"
                                                               "i28306"
                                                               "i28304"
                                                               "i28302"
                                                               "i28300"
                                                               "i28298")))
                                                           (hygiene guile))
                                                        #{tmp 28337 28668}#))
                                                #{p 28665}#)
                                           (#{quasi 28568}#
                                             #{q 28614}#
                                             #{lev 28593}#))
                                         (#{quasicons 28570}#
                                           (#{quasicons 28570}#
                                             '(#(syntax-object
                                                 "quote"
                                                 ((top)
                                                  #(ribcage
                                                    #(p)
                                                    #((top))
                                                    #("i28335"))
                                                  #(ribcage
                                                    #(p q)
                                                    #((top) (top))
                                                    #("i28324" "i28325"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(p lev)
                                                    #((top) (top))
                                                    #("i28314" "i28315"))
                                                  #(ribcage
                                                    (emit quasivector
                                                          quasilist*
                                                          quasiappend
                                                          quasicons
                                                          vquasi
                                                          quasi)
                                                    ((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                    ("i28310"
                                                     "i28308"
                                                     "i28306"
                                                     "i28304"
                                                     "i28302"
                                                     "i28300"
                                                     "i28298")))
                                                 (hygiene guile))
                                               #(syntax-object
                                                 unquote-splicing
                                                 ((top)
                                                  #(ribcage
                                                    #(p)
                                                    #((top))
                                                    #("i28335"))
                                                  #(ribcage
                                                    #(p q)
                                                    #((top) (top))
                                                    #("i28324" "i28325"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(p lev)
                                                    #((top) (top))
                                                    #("i28314" "i28315"))
                                                  #(ribcage
                                                    (emit quasivector
                                                          quasilist*
                                                          quasiappend
                                                          quasicons
                                                          vquasi
                                                          quasi)
                                                    ((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                    ("i28310"
                                                     "i28308"
                                                     "i28306"
                                                     "i28304"
                                                     "i28302"
                                                     "i28300"
                                                     "i28298")))
                                                 (hygiene guile)))
                                             (#{quasi 28568}#
                                               #{p 28665}#
                                               (#{1-}# #{lev 28593}#)))
                                           (#{quasi 28568}#
                                             #{q 28614}#
                                             #{lev 28593}#))))
                                     #{tmp 28661}#)
                                   (#{quasicons 28570}#
                                     (#{quasi 28568}#
                                       #{p 28613}#
                                       #{lev 28593}#)
                                     (#{quasi 28568}#
                                       #{q 28614}#
                                       #{lev 28593}#)))))))
                         #{tmp 28609}#)
                       (let ((#{tmp 28682}#
                               ($sc-dispatch #{p 28592}# '#(vector each-any))))
                         (if #{tmp 28682}#
                           (@apply
                             (lambda (#{x 28686}#)
                               (let ((#{x 28689}#
                                       (#{vquasi 28569}#
                                         #{x 28686}#
                                         #{lev 28593}#)))
                                 (let ((#{tmp 28691}#
                                         ($sc-dispatch
                                           #{x 28689}#
                                           '(#(atom "quote") each-any))))
                                   (if #{tmp 28691}#
                                     (@apply
                                       (lambda (#{x 28695}#)
                                         (list '#(syntax-object
                                                  "quote"
                                                  ((top)
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i28442"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i28439"))
                                                   #(ribcage
                                                     (emit quasivector
                                                           quasilist*
                                                           quasiappend
                                                           quasicons
                                                           vquasi
                                                           quasi)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("i28310"
                                                      "i28308"
                                                      "i28306"
                                                      "i28304"
                                                      "i28302"
                                                      "i28300"
                                                      "i28298")))
                                                  (hygiene guile))
                                               (list->vector #{x 28695}#)))
                                       #{tmp 28691}#)
                                     (letrec*
                                       ((#{f 28697}#
                                          (lambda (#{y 28709}# #{k 28710}#)
                                            (let ((#{tmp 28712}#
                                                    ($sc-dispatch
                                                      #{y 28709}#
                                                      '(#(atom "quote")
                                                        each-any))))
                                              (if #{tmp 28712}#
                                                (@apply
                                                  (lambda (#{y 28715}#)
                                                    (#{k 28710}#
                                                      (map (lambda (#{tmp 28467 28716}#)
                                                             (list '#(syntax-object
                                                                      "quote"
                                                                      ((top)
                                                                       #(ribcage
                                                                         #(y)
                                                                         #((top))
                                                                         #("i28465"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(f
                                                                           y
                                                                           k)
                                                                         #((top)
                                                                           (top)
                                                                           (top))
                                                                         #("i28447"
                                                                           "i28448"
                                                                           "i28449"))
                                                                       #(ribcage
                                                                         #(_)
                                                                         #((top))
                                                                         #("i28445"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(x)
                                                                         #((top))
                                                                         #("i28439"))
                                                                       #(ribcage
                                                                         (emit quasivector
                                                                               quasilist*
                                                                               quasiappend
                                                                               quasicons
                                                                               vquasi
                                                                               quasi)
                                                                         ((top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top))
                                                                         ("i28310"
                                                                          "i28308"
                                                                          "i28306"
                                                                          "i28304"
                                                                          "i28302"
                                                                          "i28300"
                                                                          "i28298")))
                                                                      (hygiene
                                                                        guile))
                                                                   #{tmp 28467 28716}#))
                                                           #{y 28715}#)))
                                                  #{tmp 28712}#)
                                                (let ((#{tmp 28717}#
                                                        ($sc-dispatch
                                                          #{y 28709}#
                                                          '(#(atom "list")
                                                            .
                                                            each-any))))
                                                  (if #{tmp 28717}#
                                                    (@apply
                                                      (lambda (#{y 28720}#)
                                                        (#{k 28710}#
                                                          #{y 28720}#))
                                                      #{tmp 28717}#)
                                                    (let ((#{tmp 28721}#
                                                            ($sc-dispatch
                                                              #{y 28709}#
                                                              '(#(atom "list*")
                                                                .
                                                                #(each+
                                                                  any
                                                                  (any)
                                                                  ())))))
                                                      (if #{tmp 28721}#
                                                        (@apply
                                                          (lambda (#{y 28724}#
                                                                   #{z 28725}#)
                                                            (#{f 28697}#
                                                              #{z 28725}#
                                                              (lambda (#{ls 28726}#)
                                                                (#{k 28710}#
                                                                  (append
                                                                    #{y 28724}#
                                                                    #{ls 28726}#)))))
                                                          #{tmp 28721}#)
                                                        (list '#(syntax-object
                                                                 "list->vector"
                                                                 ((top)
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(#{ g28482}#)
                                                                    #((m28483
                                                                        top))
                                                                    #("i28486"))
                                                                  #(ribcage
                                                                    #(else)
                                                                    #((top))
                                                                    #("i28480"))
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(f y k)
                                                                    #((top)
                                                                      (top)
                                                                      (top))
                                                                    #("i28447"
                                                                      "i28448"
                                                                      "i28449"))
                                                                  #(ribcage
                                                                    #(_)
                                                                    #((top))
                                                                    #("i28445"))
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(x)
                                                                    #((top))
                                                                    #("i28439"))
                                                                  #(ribcage
                                                                    (emit quasivector
                                                                          quasilist*
                                                                          quasiappend
                                                                          quasicons
                                                                          vquasi
                                                                          quasi)
                                                                    ((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                    ("i28310"
                                                                     "i28308"
                                                                     "i28306"
                                                                     "i28304"
                                                                     "i28302"
                                                                     "i28300"
                                                                     "i28298")))
                                                                 (hygiene
                                                                   guile))
                                                              #{x 28689}#))))))))))
                                       (#{f 28697}#
                                         #{x 28689}#
                                         (lambda (#{ls 28699}#)
                                           (let ((#{tmp 28701}#
                                                   ($sc-dispatch
                                                     #{ls 28699}#
                                                     'each-any)))
                                             (if #{tmp 28701}#
                                               (@apply
                                                 (lambda (#{ g28455 28704}#)
                                                   (cons '#(syntax-object
                                                            "vector"
                                                            ((top)
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(#{ g28455}#)
                                                               #((m28456 top))
                                                               #("i28460"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(ls)
                                                               #((top))
                                                               #("i28454"))
                                                             #(ribcage
                                                               #(_)
                                                               #((top))
                                                               #("i28445"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("i28439"))
                                                             #(ribcage
                                                               (emit quasivector
                                                                     quasilist*
                                                                     quasiappend
                                                                     quasicons
                                                                     vquasi
                                                                     quasi)
                                                               ((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                               ("i28310"
                                                                "i28308"
                                                                "i28306"
                                                                "i28304"
                                                                "i28302"
                                                                "i28300"
                                                                "i28298")))
                                                            (hygiene guile))
                                                         #{ g28455 28704}#))
                                                 #{tmp 28701}#)
                                               (syntax-violation
                                                 #f
                                                 "source expression failed to match any pattern"
                                                 #{ls 28699}#))))))))))
                             #{tmp 28682}#)
                           (list '#(syntax-object
                                    "quote"
                                    ((top)
                                     #(ribcage #(p) #((top)) #("i28345"))
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(p lev)
                                       #((top) (top))
                                       #("i28314" "i28315"))
                                     #(ribcage
                                       (emit quasivector
                                             quasilist*
                                             quasiappend
                                             quasicons
                                             vquasi
                                             quasi)
                                       ((top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top))
                                       ("i28310"
                                        "i28308"
                                        "i28306"
                                        "i28304"
                                        "i28302"
                                        "i28300"
                                        "i28298")))
                                    (hygiene guile))
                                 #{p 28592}#)))))))))))
       (#{vquasi 28569}#
         (lambda (#{p 28754}# #{lev 28755}#)
           (let ((#{tmp 28757}#
                   ($sc-dispatch #{p 28754}# '(any . any))))
             (if #{tmp 28757}#
               (@apply
                 (lambda (#{p 28761}# #{q 28762}#)
                   (let ((#{tmp 28764}#
                           ($sc-dispatch
                             #{p 28761}#
                             '(#(free-id
                                 #(syntax-object
                                   unquote
                                   ((top)
                                    #(ribcage
                                      #(p q)
                                      #((top) (top))
                                      #("i28353" "i28354"))
                                    #(ribcage () () ())
                                    #(ribcage
                                      #(p lev)
                                      #((top) (top))
                                      #("i28349" "i28350"))
                                    #(ribcage
                                      (emit quasivector
                                            quasilist*
                                            quasiappend
                                            quasicons
                                            vquasi
                                            quasi)
                                      ((top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top))
                                      ("i28310"
                                       "i28308"
                                       "i28306"
                                       "i28304"
                                       "i28302"
                                       "i28300"
                                       "i28298")))
                                   (hygiene guile)))
                               .
                               each-any))))
                     (if #{tmp 28764}#
                       (@apply
                         (lambda (#{p 28768}#)
                           (if (= #{lev 28755}# 0)
                             (#{quasilist* 28572}#
                               (map (lambda (#{tmp 28361 28804}#)
                                      (list '#(syntax-object
                                               "value"
                                               ((top)
                                                #(ribcage
                                                  #(p)
                                                  #((top))
                                                  #("i28359"))
                                                #(ribcage
                                                  #(p q)
                                                  #((top) (top))
                                                  #("i28353" "i28354"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(p lev)
                                                  #((top) (top))
                                                  #("i28349" "i28350"))
                                                #(ribcage
                                                  (emit quasivector
                                                        quasilist*
                                                        quasiappend
                                                        quasicons
                                                        vquasi
                                                        quasi)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("i28310"
                                                   "i28308"
                                                   "i28306"
                                                   "i28304"
                                                   "i28302"
                                                   "i28300"
                                                   "i28298")))
                                               (hygiene guile))
                                            #{tmp 28361 28804}#))
                                    #{p 28768}#)
                               (#{vquasi 28569}# #{q 28762}# #{lev 28755}#))
                             (#{quasicons 28570}#
                               (#{quasicons 28570}#
                                 '(#(syntax-object
                                     "quote"
                                     ((top)
                                      #(ribcage #(p) #((top)) #("i28359"))
                                      #(ribcage
                                        #(p q)
                                        #((top) (top))
                                        #("i28353" "i28354"))
                                      #(ribcage () () ())
                                      #(ribcage
                                        #(p lev)
                                        #((top) (top))
                                        #("i28349" "i28350"))
                                      #(ribcage
                                        (emit quasivector
                                              quasilist*
                                              quasiappend
                                              quasicons
                                              vquasi
                                              quasi)
                                        ((top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top))
                                        ("i28310"
                                         "i28308"
                                         "i28306"
                                         "i28304"
                                         "i28302"
                                         "i28300"
                                         "i28298")))
                                     (hygiene guile))
                                   #(syntax-object
                                     unquote
                                     ((top)
                                      #(ribcage #(p) #((top)) #("i28359"))
                                      #(ribcage
                                        #(p q)
                                        #((top) (top))
                                        #("i28353" "i28354"))
                                      #(ribcage () () ())
                                      #(ribcage
                                        #(p lev)
                                        #((top) (top))
                                        #("i28349" "i28350"))
                                      #(ribcage
                                        (emit quasivector
                                              quasilist*
                                              quasiappend
                                              quasicons
                                              vquasi
                                              quasi)
                                        ((top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top))
                                        ("i28310"
                                         "i28308"
                                         "i28306"
                                         "i28304"
                                         "i28302"
                                         "i28300"
                                         "i28298")))
                                     (hygiene guile)))
                                 (#{quasi 28568}#
                                   #{p 28768}#
                                   (#{1-}# #{lev 28755}#)))
                               (#{vquasi 28569}# #{q 28762}# #{lev 28755}#))))
                         #{tmp 28764}#)
                       (let ((#{tmp 28811}#
                               ($sc-dispatch
                                 #{p 28761}#
                                 '(#(free-id
                                     #(syntax-object
                                       unquote-splicing
                                       ((top)
                                        #(ribcage
                                          #(p q)
                                          #((top) (top))
                                          #("i28353" "i28354"))
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(p lev)
                                          #((top) (top))
                                          #("i28349" "i28350"))
                                        #(ribcage
                                          (emit quasivector
                                                quasilist*
                                                quasiappend
                                                quasicons
                                                vquasi
                                                quasi)
                                          ((top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top))
                                          ("i28310"
                                           "i28308"
                                           "i28306"
                                           "i28304"
                                           "i28302"
                                           "i28300"
                                           "i28298")))
                                       (hygiene guile)))
                                   .
                                   each-any))))
                         (if #{tmp 28811}#
                           (@apply
                             (lambda (#{p 28815}#)
                               (if (= #{lev 28755}# 0)
                                 (#{quasiappend 28571}#
                                   (map (lambda (#{tmp 28366 28818}#)
                                          (list '#(syntax-object
                                                   "value"
                                                   ((top)
                                                    #(ribcage
                                                      #(p)
                                                      #((top))
                                                      #("i28364"))
                                                    #(ribcage
                                                      #(p q)
                                                      #((top) (top))
                                                      #("i28353" "i28354"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(p lev)
                                                      #((top) (top))
                                                      #("i28349" "i28350"))
                                                    #(ribcage
                                                      (emit quasivector
                                                            quasilist*
                                                            quasiappend
                                                            quasicons
                                                            vquasi
                                                            quasi)
                                                      ((top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top))
                                                      ("i28310"
                                                       "i28308"
                                                       "i28306"
                                                       "i28304"
                                                       "i28302"
                                                       "i28300"
                                                       "i28298")))
                                                   (hygiene guile))
                                                #{tmp 28366 28818}#))
                                        #{p 28815}#)
                                   (#{vquasi 28569}#
                                     #{q 28762}#
                                     #{lev 28755}#))
                                 (#{quasicons 28570}#
                                   (#{quasicons 28570}#
                                     '(#(syntax-object
                                         "quote"
                                         ((top)
                                          #(ribcage #(p) #((top)) #("i28364"))
                                          #(ribcage
                                            #(p q)
                                            #((top) (top))
                                            #("i28353" "i28354"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(p lev)
                                            #((top) (top))
                                            #("i28349" "i28350"))
                                          #(ribcage
                                            (emit quasivector
                                                  quasilist*
                                                  quasiappend
                                                  quasicons
                                                  vquasi
                                                  quasi)
                                            ((top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top))
                                            ("i28310"
                                             "i28308"
                                             "i28306"
                                             "i28304"
                                             "i28302"
                                             "i28300"
                                             "i28298")))
                                         (hygiene guile))
                                       #(syntax-object
                                         unquote-splicing
                                         ((top)
                                          #(ribcage #(p) #((top)) #("i28364"))
                                          #(ribcage
                                            #(p q)
                                            #((top) (top))
                                            #("i28353" "i28354"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(p lev)
                                            #((top) (top))
                                            #("i28349" "i28350"))
                                          #(ribcage
                                            (emit quasivector
                                                  quasilist*
                                                  quasiappend
                                                  quasicons
                                                  vquasi
                                                  quasi)
                                            ((top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top))
                                            ("i28310"
                                             "i28308"
                                             "i28306"
                                             "i28304"
                                             "i28302"
                                             "i28300"
                                             "i28298")))
                                         (hygiene guile)))
                                     (#{quasi 28568}#
                                       #{p 28815}#
                                       (#{1-}# #{lev 28755}#)))
                                   (#{vquasi 28569}#
                                     #{q 28762}#
                                     #{lev 28755}#))))
                             #{tmp 28811}#)
                           (#{quasicons 28570}#
                             (#{quasi 28568}# #{p 28761}# #{lev 28755}#)
                             (#{vquasi 28569}# #{q 28762}# #{lev 28755}#)))))))
                 #{tmp 28757}#)
               (let ((#{tmp 28836}# ($sc-dispatch #{p 28754}# '())))
                 (if #{tmp 28836}#
                   (@apply
                     (lambda ()
                       '(#(syntax-object
                           "quote"
                           ((top)
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("i28349" "i28350"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("i28310"
                               "i28308"
                               "i28306"
                               "i28304"
                               "i28302"
                               "i28300"
                               "i28298")))
                           (hygiene guile))
                         ()))
                     #{tmp 28836}#)
                   (syntax-violation
                     #f
                     "source expression failed to match any pattern"
                     #{p 28754}#)))))))
       (#{quasicons 28570}#
         (lambda (#{x 28849}# #{y 28850}#)
           (let ((#{tmp 28851}# (list #{x 28849}# #{y 28850}#)))
             (let ((#{tmp 28852}#
                     ($sc-dispatch #{tmp 28851}# '(any any))))
               (if #{tmp 28852}#
                 (@apply
                   (lambda (#{x 28854}# #{y 28855}#)
                     (let ((#{tmp 28857}#
                             ($sc-dispatch
                               #{y 28855}#
                               '(#(atom "quote") any))))
                       (if #{tmp 28857}#
                         (@apply
                           (lambda (#{dy 28861}#)
                             (let ((#{tmp 28863}#
                                     ($sc-dispatch
                                       #{x 28854}#
                                       '(#(atom "quote") any))))
                               (if #{tmp 28863}#
                                 (@apply
                                   (lambda (#{dx 28867}#)
                                     (list '#(syntax-object
                                              "quote"
                                              ((top)
                                               #(ribcage
                                                 #(dx)
                                                 #((top))
                                                 #("i28388"))
                                               #(ribcage
                                                 #(dy)
                                                 #((top))
                                                 #("i28384"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("i28378" "i28379"))
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("i28373" "i28374"))
                                               #(ribcage
                                                 (emit quasivector
                                                       quasilist*
                                                       quasiappend
                                                       quasicons
                                                       vquasi
                                                       quasi)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("i28310"
                                                  "i28308"
                                                  "i28306"
                                                  "i28304"
                                                  "i28302"
                                                  "i28300"
                                                  "i28298")))
                                              (hygiene guile))
                                           (cons #{dx 28867}# #{dy 28861}#)))
                                   #{tmp 28863}#)
                                 (if (null? #{dy 28861}#)
                                   (list '#(syntax-object
                                            "list"
                                            ((top)
                                             #(ribcage
                                               #(_)
                                               #((top))
                                               #("i28390"))
                                             #(ribcage
                                               #(dy)
                                               #((top))
                                               #("i28384"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("i28378" "i28379"))
                                             #(ribcage () () ())
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("i28373" "i28374"))
                                             #(ribcage
                                               (emit quasivector
                                                     quasilist*
                                                     quasiappend
                                                     quasicons
                                                     vquasi
                                                     quasi)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("i28310"
                                                "i28308"
                                                "i28306"
                                                "i28304"
                                                "i28302"
                                                "i28300"
                                                "i28298")))
                                            (hygiene guile))
                                         #{x 28854}#)
                                   (list '#(syntax-object
                                            "list*"
                                            ((top)
                                             #(ribcage
                                               #(_)
                                               #((top))
                                               #("i28390"))
                                             #(ribcage
                                               #(dy)
                                               #((top))
                                               #("i28384"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("i28378" "i28379"))
                                             #(ribcage () () ())
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("i28373" "i28374"))
                                             #(ribcage
                                               (emit quasivector
                                                     quasilist*
                                                     quasiappend
                                                     quasicons
                                                     vquasi
                                                     quasi)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("i28310"
                                                "i28308"
                                                "i28306"
                                                "i28304"
                                                "i28302"
                                                "i28300"
                                                "i28298")))
                                            (hygiene guile))
                                         #{x 28854}#
                                         #{y 28855}#)))))
                           #{tmp 28857}#)
                         (let ((#{tmp 28872}#
                                 ($sc-dispatch
                                   #{y 28855}#
                                   '(#(atom "list") . any))))
                           (if #{tmp 28872}#
                             (@apply
                               (lambda (#{stuff 28876}#)
                                 (cons '#(syntax-object
                                          "list"
                                          ((top)
                                           #(ribcage
                                             #(stuff)
                                             #((top))
                                             #("i28393"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("i28378" "i28379"))
                                           #(ribcage () () ())
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("i28373" "i28374"))
                                           #(ribcage
                                             (emit quasivector
                                                   quasilist*
                                                   quasiappend
                                                   quasicons
                                                   vquasi
                                                   quasi)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("i28310"
                                              "i28308"
                                              "i28306"
                                              "i28304"
                                              "i28302"
                                              "i28300"
                                              "i28298")))
                                          (hygiene guile))
                                       (cons #{x 28854}# #{stuff 28876}#)))
                               #{tmp 28872}#)
                             (let ((#{tmp 28877}#
                                     ($sc-dispatch
                                       #{y 28855}#
                                       '(#(atom "list*") . any))))
                               (if #{tmp 28877}#
                                 (@apply
                                   (lambda (#{stuff 28881}#)
                                     (cons '#(syntax-object
                                              "list*"
                                              ((top)
                                               #(ribcage
                                                 #(stuff)
                                                 #((top))
                                                 #("i28396"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("i28378" "i28379"))
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("i28373" "i28374"))
                                               #(ribcage
                                                 (emit quasivector
                                                       quasilist*
                                                       quasiappend
                                                       quasicons
                                                       vquasi
                                                       quasi)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("i28310"
                                                  "i28308"
                                                  "i28306"
                                                  "i28304"
                                                  "i28302"
                                                  "i28300"
                                                  "i28298")))
                                              (hygiene guile))
                                           (cons #{x 28854}# #{stuff 28881}#)))
                                   #{tmp 28877}#)
                                 (list '#(syntax-object
                                          "list*"
                                          ((top)
                                           #(ribcage #(_) #((top)) #("i28398"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("i28378" "i28379"))
                                           #(ribcage () () ())
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("i28373" "i28374"))
                                           #(ribcage
                                             (emit quasivector
                                                   quasilist*
                                                   quasiappend
                                                   quasicons
                                                   vquasi
                                                   quasi)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("i28310"
                                              "i28308"
                                              "i28306"
                                              "i28304"
                                              "i28302"
                                              "i28300"
                                              "i28298")))
                                          (hygiene guile))
                                       #{x 28854}#
                                       #{y 28855}#))))))))
                   #{tmp 28852}#)
                 (syntax-violation
                   #f
                   "source expression failed to match any pattern"
                   #{tmp 28851}#))))))
       (#{quasiappend 28571}#
         (lambda (#{x 28892}# #{y 28893}#)
           (let ((#{tmp 28895}#
                   ($sc-dispatch #{y 28893}# '(#(atom "quote") ()))))
             (if #{tmp 28895}#
               (@apply
                 (lambda ()
                   (if (null? #{x 28892}#)
                     '(#(syntax-object
                         "quote"
                         ((top)
                          #(ribcage () () ())
                          #(ribcage
                            #(x y)
                            #((top) (top))
                            #("i28402" "i28403"))
                          #(ribcage
                            (emit quasivector
                                  quasilist*
                                  quasiappend
                                  quasicons
                                  vquasi
                                  quasi)
                            ((top) (top) (top) (top) (top) (top) (top))
                            ("i28310"
                             "i28308"
                             "i28306"
                             "i28304"
                             "i28302"
                             "i28300"
                             "i28298")))
                         (hygiene guile))
                       ())
                     (if (null? (cdr #{x 28892}#))
                       (car #{x 28892}#)
                       (let ((#{tmp 28900}#
                               ($sc-dispatch #{x 28892}# 'each-any)))
                         (if #{tmp 28900}#
                           (@apply
                             (lambda (#{p 28904}#)
                               (cons '#(syntax-object
                                        "append"
                                        ((top)
                                         #(ribcage () () ())
                                         #(ribcage #(p) #((top)) #("i28414"))
                                         #(ribcage () () ())
                                         #(ribcage
                                           #(x y)
                                           #((top) (top))
                                           #("i28402" "i28403"))
                                         #(ribcage
                                           (emit quasivector
                                                 quasilist*
                                                 quasiappend
                                                 quasicons
                                                 vquasi
                                                 quasi)
                                           ((top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top))
                                           ("i28310"
                                            "i28308"
                                            "i28306"
                                            "i28304"
                                            "i28302"
                                            "i28300"
                                            "i28298")))
                                        (hygiene guile))
                                     #{p 28904}#))
                             #{tmp 28900}#)
                           (syntax-violation
                             #f
                             "source expression failed to match any pattern"
                             #{x 28892}#))))))
                 #{tmp 28895}#)
               (if (null? #{x 28892}#)
                 #{y 28893}#
                 (let ((#{tmp 28912}# (list #{x 28892}# #{y 28893}#)))
                   (let ((#{tmp 28913}#
                           ($sc-dispatch #{tmp 28912}# '(each-any any))))
                     (if #{tmp 28913}#
                       (@apply
                         (lambda (#{p 28915}# #{y 28916}#)
                           (cons '#(syntax-object
                                    "append"
                                    ((top)
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(p y)
                                       #((top) (top))
                                       #("i28425" "i28426"))
                                     #(ribcage #(_) #((top)) #("i28417"))
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(x y)
                                       #((top) (top))
                                       #("i28402" "i28403"))
                                     #(ribcage
                                       (emit quasivector
                                             quasilist*
                                             quasiappend
                                             quasicons
                                             vquasi
                                             quasi)
                                       ((top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top))
                                       ("i28310"
                                        "i28308"
                                        "i28306"
                                        "i28304"
                                        "i28302"
                                        "i28300"
                                        "i28298")))
                                    (hygiene guile))
                                 (append #{p 28915}# (list #{y 28916}#))))
                         #{tmp 28913}#)
                       (syntax-violation
                         #f
                         "source expression failed to match any pattern"
                         #{tmp 28912}#)))))))))
       (#{quasilist* 28572}#
         (lambda (#{x 28920}# #{y 28921}#)
           (letrec*
             ((#{f 28922}#
                (lambda (#{x 29011}#)
                  (if (null? #{x 29011}#)
                    #{y 28921}#
                    (#{quasicons 28570}#
                      (car #{x 29011}#)
                      (#{f 28922}# (cdr #{x 29011}#)))))))
             (#{f 28922}# #{x 28920}#))))
       (#{emit 28574}#
         (lambda (#{x 29014}#)
           (let ((#{tmp 29016}#
                   ($sc-dispatch #{x 29014}# '(#(atom "quote") any))))
             (if #{tmp 29016}#
               (@apply
                 (lambda (#{x 29020}#)
                   (list '#(syntax-object
                            quote
                            ((top)
                             #(ribcage #(x) #((top)) #("i28492"))
                             #(ribcage () () ())
                             #(ribcage #(x) #((top)) #("i28489"))
                             #(ribcage
                               (emit quasivector
                                     quasilist*
                                     quasiappend
                                     quasicons
                                     vquasi
                                     quasi)
                               ((top) (top) (top) (top) (top) (top) (top))
                               ("i28310"
                                "i28308"
                                "i28306"
                                "i28304"
                                "i28302"
                                "i28300"
                                "i28298")))
                            (hygiene guile))
                         #{x 29020}#))
                 #{tmp 29016}#)
               (let ((#{tmp 29021}#
                       ($sc-dispatch
                         #{x 29014}#
                         '(#(atom "list") . each-any))))
                 (if #{tmp 29021}#
                   (@apply
                     (lambda (#{x 29025}#)
                       (let ((#{tmp 29026}# (map #{emit 28574}# #{x 29025}#)))
                         (let ((#{tmp 29027}#
                                 ($sc-dispatch #{tmp 29026}# 'each-any)))
                           (if #{tmp 29027}#
                             (@apply
                               (lambda (#{ g28497 29029}#)
                                 (cons '#(syntax-object
                                          list
                                          ((top)
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(#{ g28497}#)
                                             #((m28498 top))
                                             #("i28502"))
                                           #(ribcage #(x) #((top)) #("i28495"))
                                           #(ribcage () () ())
                                           #(ribcage #(x) #((top)) #("i28489"))
                                           #(ribcage
                                             (emit quasivector
                                                   quasilist*
                                                   quasiappend
                                                   quasicons
                                                   vquasi
                                                   quasi)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("i28310"
                                              "i28308"
                                              "i28306"
                                              "i28304"
                                              "i28302"
                                              "i28300"
                                              "i28298")))
                                          (hygiene guile))
                                       #{ g28497 29029}#))
                               #{tmp 29027}#)
                             (syntax-violation
                               #f
                               "source expression failed to match any pattern"
                               #{tmp 29026}#)))))
                     #{tmp 29021}#)
                   (let ((#{tmp 29030}#
                           ($sc-dispatch
                             #{x 29014}#
                             '(#(atom "list*") . #(each+ any (any) ())))))
                     (if #{tmp 29030}#
                       (@apply
                         (lambda (#{x 29034}# #{y 29035}#)
                           (letrec*
                             ((#{f 29036}#
                                (lambda (#{x* 29039}#)
                                  (if (null? #{x* 29039}#)
                                    (#{emit 28574}# #{y 29035}#)
                                    (let ((#{tmp 29040}#
                                            (list (#{emit 28574}#
                                                    (car #{x* 29039}#))
                                                  (#{f 29036}#
                                                    (cdr #{x* 29039}#)))))
                                      (let ((#{tmp 29041}#
                                              ($sc-dispatch
                                                #{tmp 29040}#
                                                '(any any))))
                                        (if #{tmp 29041}#
                                          (@apply
                                            (lambda (#{ g28517 29043}#
                                                     #{ g28516 29044}#)
                                              (list '#(syntax-object
                                                       cons
                                                       ((top)
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(#{ g28517}#
                                                            #{ g28516}#)
                                                          #((m28518 top)
                                                            (m28518 top))
                                                          #("i28522" "i28523"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(f x*)
                                                          #((top) (top))
                                                          #("i28511" "i28512"))
                                                        #(ribcage
                                                          #(x y)
                                                          #((top) (top))
                                                          #("i28507" "i28508"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(x)
                                                          #((top))
                                                          #("i28489"))
                                                        #(ribcage
                                                          (emit quasivector
                                                                quasilist*
                                                                quasiappend
                                                                quasicons
                                                                vquasi
                                                                quasi)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("i28310"
                                                           "i28308"
                                                           "i28306"
                                                           "i28304"
                                                           "i28302"
                                                           "i28300"
                                                           "i28298")))
                                                       (hygiene guile))
                                                    #{ g28517 29043}#
                                                    #{ g28516 29044}#))
                                            #{tmp 29041}#)
                                          (syntax-violation
                                            #f
                                            "source expression failed to match any pattern"
                                            #{tmp 29040}#))))))))
                             (#{f 29036}# #{x 29034}#)))
                         #{tmp 29030}#)
                       (let ((#{tmp 29045}#
                               ($sc-dispatch
                                 #{x 29014}#
                                 '(#(atom "append") . each-any))))
                         (if #{tmp 29045}#
                           (@apply
                             (lambda (#{x 29049}#)
                               (let ((#{tmp 29050}#
                                       (map #{emit 28574}# #{x 29049}#)))
                                 (let ((#{tmp 29051}#
                                         ($sc-dispatch
                                           #{tmp 29050}#
                                           'each-any)))
                                   (if #{tmp 29051}#
                                     (@apply
                                       (lambda (#{ g28529 29053}#)
                                         (cons '#(syntax-object
                                                  append
                                                  ((top)
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(#{ g28529}#)
                                                     #((m28530 top))
                                                     #("i28534"))
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i28527"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i28489"))
                                                   #(ribcage
                                                     (emit quasivector
                                                           quasilist*
                                                           quasiappend
                                                           quasicons
                                                           vquasi
                                                           quasi)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("i28310"
                                                      "i28308"
                                                      "i28306"
                                                      "i28304"
                                                      "i28302"
                                                      "i28300"
                                                      "i28298")))
                                                  (hygiene guile))
                                               #{ g28529 29053}#))
                                       #{tmp 29051}#)
                                     (syntax-violation
                                       #f
                                       "source expression failed to match any pattern"
                                       #{tmp 29050}#)))))
                             #{tmp 29045}#)
                           (let ((#{tmp 29054}#
                                   ($sc-dispatch
                                     #{x 29014}#
                                     '(#(atom "vector") . each-any))))
                             (if #{tmp 29054}#
                               (@apply
                                 (lambda (#{x 29058}#)
                                   (let ((#{tmp 29059}#
                                           (map #{emit 28574}# #{x 29058}#)))
                                     (let ((#{tmp 29060}#
                                             ($sc-dispatch
                                               #{tmp 29059}#
                                               'each-any)))
                                       (if #{tmp 29060}#
                                         (@apply
                                           (lambda (#{ g28541 29062}#)
                                             (cons '#(syntax-object
                                                      vector
                                                      ((top)
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(#{ g28541}#)
                                                         #((m28542 top))
                                                         #("i28546"))
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i28539"))
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i28489"))
                                                       #(ribcage
                                                         (emit quasivector
                                                               quasilist*
                                                               quasiappend
                                                               quasicons
                                                               vquasi
                                                               quasi)
                                                         ((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                         ("i28310"
                                                          "i28308"
                                                          "i28306"
                                                          "i28304"
                                                          "i28302"
                                                          "i28300"
                                                          "i28298")))
                                                      (hygiene guile))
                                                   #{ g28541 29062}#))
                                           #{tmp 29060}#)
                                         (syntax-violation
                                           #f
                                           "source expression failed to match any pattern"
                                           #{tmp 29059}#)))))
                                 #{tmp 29054}#)
                               (let ((#{tmp 29063}#
                                       ($sc-dispatch
                                         #{x 29014}#
                                         '(#(atom "list->vector") any))))
                                 (if #{tmp 29063}#
                                   (@apply
                                     (lambda (#{x 29067}#)
                                       (let ((#{tmp 29068}#
                                               (#{emit 28574}# #{x 29067}#)))
                                         (list '#(syntax-object
                                                  list->vector
                                                  ((top)
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(#{ g28553}#)
                                                     #((m28554 top))
                                                     #("i28557"))
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i28551"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i28489"))
                                                   #(ribcage
                                                     (emit quasivector
                                                           quasilist*
                                                           quasiappend
                                                           quasicons
                                                           vquasi
                                                           quasi)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("i28310"
                                                      "i28308"
                                                      "i28306"
                                                      "i28304"
                                                      "i28302"
                                                      "i28300"
                                                      "i28298")))
                                                  (hygiene guile))
                                               #{tmp 29068}#)))
                                     #{tmp 29063}#)
                                   (let ((#{tmp 29071}#
                                           ($sc-dispatch
                                             #{x 29014}#
                                             '(#(atom "value") any))))
                                     (if #{tmp 29071}#
                                       (@apply
                                         (lambda (#{x 29075}#) #{x 29075}#)
                                         #{tmp 29071}#)
                                       (syntax-violation
                                         #f
                                         "source expression failed to match any pattern"
                                         #{x 29014}#))))))))))))))))))
      (lambda (#{x 28575}#)
        (let ((#{tmp 28577}#
                ($sc-dispatch #{x 28575}# '(_ any))))
          (if #{tmp 28577}#
            (@apply
              (lambda (#{e 28581}#)
                (#{emit 28574}# (#{quasi 28568}# #{e 28581}# 0)))
              #{tmp 28577}#)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              #{x 28575}#)))))))

(define include
  (make-syntax-transformer
    'include
    'macro
    (lambda (#{x 29130}#)
      (letrec*
        ((#{read-file 29131}#
           (lambda (#{fn 29240}# #{k 29241}#)
             (let ((#{p 29242}# (open-input-file #{fn 29240}#)))
               (letrec*
                 ((#{f 29243}#
                    (lambda (#{x 29297}# #{result 29298}#)
                      (if (eof-object? #{x 29297}#)
                        (begin
                          (close-input-port #{p 29242}#)
                          (reverse #{result 29298}#))
                        (#{f 29243}#
                          (read #{p 29242}#)
                          (cons (datum->syntax #{k 29241}# #{x 29297}#)
                                #{result 29298}#))))))
                 (#{f 29243}# (read #{p 29242}#) '()))))))
        (let ((#{tmp 29133}#
                ($sc-dispatch #{x 29130}# '(any any))))
          (if #{tmp 29133}#
            (@apply
              (lambda (#{k 29137}# #{filename 29138}#)
                (let ((#{fn 29139}# (syntax->datum #{filename 29138}#)))
                  (let ((#{tmp 29140}#
                          (#{read-file 29131}#
                            #{fn 29139}#
                            #{filename 29138}#)))
                    (let ((#{tmp 29141}#
                            ($sc-dispatch #{tmp 29140}# 'each-any)))
                      (if #{tmp 29141}#
                        (@apply
                          (lambda (#{exp 29159}#)
                            (cons '#(syntax-object
                                     begin
                                     ((top)
                                      #(ribcage () () ())
                                      #(ribcage #(exp) #((top)) #("i29127"))
                                      #(ribcage () () ())
                                      #(ribcage () () ())
                                      #(ribcage #(fn) #((top)) #("i29122"))
                                      #(ribcage
                                        #(k filename)
                                        #((top) (top))
                                        #("i29118" "i29119"))
                                      #(ribcage (read-file) ((top)) ("i29102"))
                                      #(ribcage #(x) #((top)) #("i29101")))
                                     (hygiene guile))
                                  #{exp 29159}#))
                          #{tmp 29141}#)
                        (syntax-violation
                          #f
                          "source expression failed to match any pattern"
                          #{tmp 29140}#))))))
              #{tmp 29133}#)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              #{x 29130}#)))))))

(define include-from-path
  (make-syntax-transformer
    'include-from-path
    'macro
    (lambda (#{x 29317}#)
      (let ((#{tmp 29319}#
              ($sc-dispatch #{x 29317}# '(any any))))
        (if #{tmp 29319}#
          (@apply
            (lambda (#{k 29323}# #{filename 29324}#)
              (let ((#{fn 29325}# (syntax->datum #{filename 29324}#)))
                (let ((#{tmp 29326}#
                        (datum->syntax
                          #{filename 29324}#
                          (let ((#{t 29329}# (%search-load-path #{fn 29325}#)))
                            (if #{t 29329}#
                              #{t 29329}#
                              (syntax-violation
                                'include-from-path
                                "file not found in path"
                                #{x 29317}#
                                #{filename 29324}#))))))
                  (list '#(syntax-object
                           include
                           ((top)
                            #(ribcage () () ())
                            #(ribcage #(fn) #((top)) #("i29311"))
                            #(ribcage () () ())
                            #(ribcage () () ())
                            #(ribcage #(fn) #((top)) #("i29307"))
                            #(ribcage
                              #(k filename)
                              #((top) (top))
                              #("i29303" "i29304"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i29300")))
                           (hygiene guile))
                        #{tmp 29326}#))))
            #{tmp 29319}#)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            #{x 29317}#))))))

(define unquote
  (make-syntax-transformer
    'unquote
    'macro
    (lambda (#{x 29338}#)
      (syntax-violation
        'unquote
        "expression not valid outside of quasiquote"
        #{x 29338}#))))

(define unquote-splicing
  (make-syntax-transformer
    'unquote-splicing
    'macro
    (lambda (#{x 29341}#)
      (syntax-violation
        'unquote-splicing
        "expression not valid outside of quasiquote"
        #{x 29341}#))))

(define case
  (make-syntax-transformer
    'case
    'macro
    (lambda (#{x 29397}#)
      (let ((#{tmp 29399}#
              ($sc-dispatch
                #{x 29397}#
                '(_ any any . each-any))))
        (if #{tmp 29399}#
          (@apply
            (lambda (#{e 29403}# #{m1 29404}# #{m2 29405}#)
              (let ((#{tmp 29406}#
                      (letrec*
                        ((#{f 29448}#
                           (lambda (#{clause 29451}# #{clauses 29452}#)
                             (if (null? #{clauses 29452}#)
                               (let ((#{tmp 29454}#
                                       ($sc-dispatch
                                         #{clause 29451}#
                                         '(#(free-id
                                             #(syntax-object
                                               else
                                               ((top)
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(f clause clauses)
                                                  #((top) (top) (top))
                                                  #("i29356"
                                                    "i29357"
                                                    "i29358"))
                                                #(ribcage
                                                  #(e m1 m2)
                                                  #((top) (top) (top))
                                                  #("i29346"
                                                    "i29347"
                                                    "i29348"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(x)
                                                  #((top))
                                                  #("i29343")))
                                               (hygiene guile)))
                                           any
                                           .
                                           each-any))))
                                 (if #{tmp 29454}#
                                   (@apply
                                     (lambda (#{e1 29458}# #{e2 29459}#)
                                       (cons '#(syntax-object
                                                begin
                                                ((top)
                                                 #(ribcage
                                                   #(e1 e2)
                                                   #((top) (top))
                                                   #("i29365" "i29366"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(f clause clauses)
                                                   #((top) (top) (top))
                                                   #("i29356"
                                                     "i29357"
                                                     "i29358"))
                                                 #(ribcage
                                                   #(e m1 m2)
                                                   #((top) (top) (top))
                                                   #("i29346"
                                                     "i29347"
                                                     "i29348"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("i29343")))
                                                (hygiene guile))
                                             (cons #{e1 29458}# #{e2 29459}#)))
                                     #{tmp 29454}#)
                                   (let ((#{tmp 29460}#
                                           ($sc-dispatch
                                             #{clause 29451}#
                                             '(each-any any . each-any))))
                                     (if #{tmp 29460}#
                                       (@apply
                                         (lambda (#{k 29464}#
                                                  #{e1 29465}#
                                                  #{e2 29466}#)
                                           (list '#(syntax-object
                                                    if
                                                    ((top)
                                                     #(ribcage
                                                       #(k e1 e2)
                                                       #((top) (top) (top))
                                                       #("i29371"
                                                         "i29372"
                                                         "i29373"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(f clause clauses)
                                                       #((top) (top) (top))
                                                       #("i29356"
                                                         "i29357"
                                                         "i29358"))
                                                     #(ribcage
                                                       #(e m1 m2)
                                                       #((top) (top) (top))
                                                       #("i29346"
                                                         "i29347"
                                                         "i29348"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("i29343")))
                                                    (hygiene guile))
                                                 (list '#(syntax-object
                                                          memv
                                                          ((top)
                                                           #(ribcage
                                                             #(k e1 e2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i29371"
                                                               "i29372"
                                                               "i29373"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(f
                                                               clause
                                                               clauses)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i29356"
                                                               "i29357"
                                                               "i29358"))
                                                           #(ribcage
                                                             #(e m1 m2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i29346"
                                                               "i29347"
                                                               "i29348"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("i29343")))
                                                          (hygiene guile))
                                                       '#(syntax-object
                                                          t
                                                          ((top)
                                                           #(ribcage
                                                             #(k e1 e2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i29371"
                                                               "i29372"
                                                               "i29373"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(f
                                                               clause
                                                               clauses)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i29356"
                                                               "i29357"
                                                               "i29358"))
                                                           #(ribcage
                                                             #(e m1 m2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i29346"
                                                               "i29347"
                                                               "i29348"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("i29343")))
                                                          (hygiene guile))
                                                       (list '#(syntax-object
                                                                quote
                                                                ((top)
                                                                 #(ribcage
                                                                   #(k e1 e2)
                                                                   #((top)
                                                                     (top)
                                                                     (top))
                                                                   #("i29371"
                                                                     "i29372"
                                                                     "i29373"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(f
                                                                     clause
                                                                     clauses)
                                                                   #((top)
                                                                     (top)
                                                                     (top))
                                                                   #("i29356"
                                                                     "i29357"
                                                                     "i29358"))
                                                                 #(ribcage
                                                                   #(e m1 m2)
                                                                   #((top)
                                                                     (top)
                                                                     (top))
                                                                   #("i29346"
                                                                     "i29347"
                                                                     "i29348"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("i29343")))
                                                                (hygiene
                                                                  guile))
                                                             #{k 29464}#))
                                                 (cons '#(syntax-object
                                                          begin
                                                          ((top)
                                                           #(ribcage
                                                             #(k e1 e2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i29371"
                                                               "i29372"
                                                               "i29373"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(f
                                                               clause
                                                               clauses)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i29356"
                                                               "i29357"
                                                               "i29358"))
                                                           #(ribcage
                                                             #(e m1 m2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i29346"
                                                               "i29347"
                                                               "i29348"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("i29343")))
                                                          (hygiene guile))
                                                       (cons #{e1 29465}#
                                                             #{e2 29466}#))))
                                         #{tmp 29460}#)
                                       (syntax-violation
                                         'case
                                         "bad clause"
                                         #{x 29397}#
                                         #{clause 29451}#)))))
                               (let ((#{tmp 29474}#
                                       (#{f 29448}#
                                         (car #{clauses 29452}#)
                                         (cdr #{clauses 29452}#))))
                                 (let ((#{tmp 29477}#
                                         ($sc-dispatch
                                           #{clause 29451}#
                                           '(each-any any . each-any))))
                                   (if #{tmp 29477}#
                                     (@apply
                                       (lambda (#{k 29481}#
                                                #{e1 29482}#
                                                #{e2 29483}#)
                                         (list '#(syntax-object
                                                  if
                                                  ((top)
                                                   #(ribcage
                                                     #(k e1 e2)
                                                     #((top) (top) (top))
                                                     #("i29387"
                                                       "i29388"
                                                       "i29389"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(rest)
                                                     #((top))
                                                     #("i29383"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(f clause clauses)
                                                     #((top) (top) (top))
                                                     #("i29356"
                                                       "i29357"
                                                       "i29358"))
                                                   #(ribcage
                                                     #(e m1 m2)
                                                     #((top) (top) (top))
                                                     #("i29346"
                                                       "i29347"
                                                       "i29348"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i29343")))
                                                  (hygiene guile))
                                               (list '#(syntax-object
                                                        memv
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("i29387"
                                                             "i29388"
                                                             "i29389"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(rest)
                                                           #((top))
                                                           #("i29383"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("i29356"
                                                             "i29357"
                                                             "i29358"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("i29346"
                                                             "i29347"
                                                             "i29348"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("i29343")))
                                                        (hygiene guile))
                                                     '#(syntax-object
                                                        t
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("i29387"
                                                             "i29388"
                                                             "i29389"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(rest)
                                                           #((top))
                                                           #("i29383"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("i29356"
                                                             "i29357"
                                                             "i29358"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("i29346"
                                                             "i29347"
                                                             "i29348"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("i29343")))
                                                        (hygiene guile))
                                                     (list '#(syntax-object
                                                              quote
                                                              ((top)
                                                               #(ribcage
                                                                 #(k e1 e2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i29387"
                                                                   "i29388"
                                                                   "i29389"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(rest)
                                                                 #((top))
                                                                 #("i29383"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(f
                                                                   clause
                                                                   clauses)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i29356"
                                                                   "i29357"
                                                                   "i29358"))
                                                               #(ribcage
                                                                 #(e m1 m2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i29346"
                                                                   "i29347"
                                                                   "i29348"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(x)
                                                                 #((top))
                                                                 #("i29343")))
                                                              (hygiene guile))
                                                           #{k 29481}#))
                                               (cons '#(syntax-object
                                                        begin
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("i29387"
                                                             "i29388"
                                                             "i29389"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(rest)
                                                           #((top))
                                                           #("i29383"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("i29356"
                                                             "i29357"
                                                             "i29358"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("i29346"
                                                             "i29347"
                                                             "i29348"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("i29343")))
                                                        (hygiene guile))
                                                     (cons #{e1 29482}#
                                                           #{e2 29483}#))
                                               #{tmp 29474}#))
                                       #{tmp 29477}#)
                                     (syntax-violation
                                       'case
                                       "bad clause"
                                       #{x 29397}#
                                       #{clause 29451}#))))))))
                        (#{f 29448}# #{m1 29404}# #{m2 29405}#))))
                (let ((#{body 29407}# #{tmp 29406}#))
                  (list '#(syntax-object
                           let
                           ((top)
                            #(ribcage () () ())
                            #(ribcage #(body) #((top)) #("i29354"))
                            #(ribcage
                              #(e m1 m2)
                              #((top) (top) (top))
                              #("i29346" "i29347" "i29348"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i29343")))
                           (hygiene guile))
                        (list (list '#(syntax-object
                                       t
                                       ((top)
                                        #(ribcage () () ())
                                        #(ribcage #(body) #((top)) #("i29354"))
                                        #(ribcage
                                          #(e m1 m2)
                                          #((top) (top) (top))
                                          #("i29346" "i29347" "i29348"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i29343")))
                                       (hygiene guile))
                                    #{e 29403}#))
                        #{body 29407}#))))
            #{tmp 29399}#)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            #{x 29397}#))))))

(define make-variable-transformer
  (lambda (#{proc 29501}#)
    (if (procedure? #{proc 29501}#)
      (letrec*
        ((#{trans 29502}#
           (lambda (#{x 29508}#)
             (#{proc 29501}# #{x 29508}#))))
        (begin
          (set-procedure-property!
            #{trans 29502}#
            'variable-transformer
            #t)
          #{trans 29502}#))
      (error "variable transformer not a procedure"
             #{proc 29501}#))))

(define identifier-syntax
  (make-syntax-transformer
    'identifier-syntax
    'macro
    (lambda (#{x 29540}#)
      (let ((#{tmp 29542}#
              ($sc-dispatch #{x 29540}# '(_ any))))
        (if #{tmp 29542}#
          (@apply
            (lambda (#{e 29546}#)
              (list '#(syntax-object
                       lambda
                       ((top)
                        #(ribcage #(e) #((top)) #("i29515"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i29512")))
                       (hygiene guile))
                    '(#(syntax-object
                        x
                        ((top)
                         #(ribcage #(e) #((top)) #("i29515"))
                         #(ribcage () () ())
                         #(ribcage #(x) #((top)) #("i29512")))
                        (hygiene guile)))
                    '#((#(syntax-object
                          macro-type
                          ((top)
                           #(ribcage #(e) #((top)) #("i29515"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("i29512")))
                          (hygiene guile))
                        .
                        #(syntax-object
                          identifier-syntax
                          ((top)
                           #(ribcage #(e) #((top)) #("i29515"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("i29512")))
                          (hygiene guile))))
                    (list '#(syntax-object
                             syntax-case
                             ((top)
                              #(ribcage #(e) #((top)) #("i29515"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i29512")))
                             (hygiene guile))
                          '#(syntax-object
                             x
                             ((top)
                              #(ribcage #(e) #((top)) #("i29515"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i29512")))
                             (hygiene guile))
                          '()
                          (list '#(syntax-object
                                   id
                                   ((top)
                                    #(ribcage #(e) #((top)) #("i29515"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("i29512")))
                                   (hygiene guile))
                                '(#(syntax-object
                                    identifier?
                                    ((top)
                                     #(ribcage #(e) #((top)) #("i29515"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i29512")))
                                    (hygiene guile))
                                  (#(syntax-object
                                     syntax
                                     ((top)
                                      #(ribcage #(e) #((top)) #("i29515"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("i29512")))
                                     (hygiene guile))
                                   #(syntax-object
                                     id
                                     ((top)
                                      #(ribcage #(e) #((top)) #("i29515"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("i29512")))
                                     (hygiene guile))))
                                (list '#(syntax-object
                                         syntax
                                         ((top)
                                          #(ribcage #(e) #((top)) #("i29515"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i29512")))
                                         (hygiene guile))
                                      #{e 29546}#))
                          (list '(#(syntax-object
                                    _
                                    ((top)
                                     #(ribcage #(e) #((top)) #("i29515"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i29512")))
                                    (hygiene guile))
                                  #(syntax-object
                                    x
                                    ((top)
                                     #(ribcage #(e) #((top)) #("i29515"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i29512")))
                                    (hygiene guile))
                                  #(syntax-object
                                    ...
                                    ((top)
                                     #(ribcage #(e) #((top)) #("i29515"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i29512")))
                                    (hygiene guile)))
                                (list '#(syntax-object
                                         syntax
                                         ((top)
                                          #(ribcage #(e) #((top)) #("i29515"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i29512")))
                                         (hygiene guile))
                                      (cons #{e 29546}#
                                            '(#(syntax-object
                                                x
                                                ((top)
                                                 #(ribcage
                                                   #(e)
                                                   #((top))
                                                   #("i29515"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("i29512")))
                                                (hygiene guile))
                                              #(syntax-object
                                                ...
                                                ((top)
                                                 #(ribcage
                                                   #(e)
                                                   #((top))
                                                   #("i29515"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("i29512")))
                                                (hygiene guile)))))))))
            #{tmp 29542}#)
          (let ((#{tmp 29547}#
                  ($sc-dispatch
                    #{x 29540}#
                    '(_ (any any)
                        ((#(free-id
                            #(syntax-object
                              set!
                              ((top)
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("i29512")))
                              (hygiene guile)))
                          any
                          any)
                         any)))))
            (if (if #{tmp 29547}#
                  (@apply
                    (lambda (#{id 29551}#
                             #{exp1 29552}#
                             #{var 29553}#
                             #{val 29554}#
                             #{exp2 29555}#)
                      (if (identifier? #{id 29551}#)
                        (identifier? #{var 29553}#)
                        #f))
                    #{tmp 29547}#)
                  #f)
              (@apply
                (lambda (#{id 29556}#
                         #{exp1 29557}#
                         #{var 29558}#
                         #{val 29559}#
                         #{exp2 29560}#)
                  (list '#(syntax-object
                           make-variable-transformer
                           ((top)
                            #(ribcage
                              #(id exp1 var val exp2)
                              #((top) (top) (top) (top) (top))
                              #("i29530" "i29531" "i29532" "i29533" "i29534"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i29512")))
                           (hygiene guile))
                        (list '#(syntax-object
                                 lambda
                                 ((top)
                                  #(ribcage
                                    #(id exp1 var val exp2)
                                    #((top) (top) (top) (top) (top))
                                    #("i29530"
                                      "i29531"
                                      "i29532"
                                      "i29533"
                                      "i29534"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("i29512")))
                                 (hygiene guile))
                              '(#(syntax-object
                                  x
                                  ((top)
                                   #(ribcage
                                     #(id exp1 var val exp2)
                                     #((top) (top) (top) (top) (top))
                                     #("i29530"
                                       "i29531"
                                       "i29532"
                                       "i29533"
                                       "i29534"))
                                   #(ribcage () () ())
                                   #(ribcage #(x) #((top)) #("i29512")))
                                  (hygiene guile)))
                              '#((#(syntax-object
                                    macro-type
                                    ((top)
                                     #(ribcage
                                       #(id exp1 var val exp2)
                                       #((top) (top) (top) (top) (top))
                                       #("i29530"
                                         "i29531"
                                         "i29532"
                                         "i29533"
                                         "i29534"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i29512")))
                                    (hygiene guile))
                                  .
                                  #(syntax-object
                                    variable-transformer
                                    ((top)
                                     #(ribcage
                                       #(id exp1 var val exp2)
                                       #((top) (top) (top) (top) (top))
                                       #("i29530"
                                         "i29531"
                                         "i29532"
                                         "i29533"
                                         "i29534"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i29512")))
                                    (hygiene guile))))
                              (list '#(syntax-object
                                       syntax-case
                                       ((top)
                                        #(ribcage
                                          #(id exp1 var val exp2)
                                          #((top) (top) (top) (top) (top))
                                          #("i29530"
                                            "i29531"
                                            "i29532"
                                            "i29533"
                                            "i29534"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i29512")))
                                       (hygiene guile))
                                    '#(syntax-object
                                       x
                                       ((top)
                                        #(ribcage
                                          #(id exp1 var val exp2)
                                          #((top) (top) (top) (top) (top))
                                          #("i29530"
                                            "i29531"
                                            "i29532"
                                            "i29533"
                                            "i29534"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i29512")))
                                       (hygiene guile))
                                    '(#(syntax-object
                                        set!
                                        ((top)
                                         #(ribcage
                                           #(id exp1 var val exp2)
                                           #((top) (top) (top) (top) (top))
                                           #("i29530"
                                             "i29531"
                                             "i29532"
                                             "i29533"
                                             "i29534"))
                                         #(ribcage () () ())
                                         #(ribcage #(x) #((top)) #("i29512")))
                                        (hygiene guile)))
                                    (list (list '#(syntax-object
                                                   set!
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i29530"
                                                        "i29531"
                                                        "i29532"
                                                        "i29533"
                                                        "i29534"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i29512")))
                                                   (hygiene guile))
                                                #{var 29558}#
                                                #{val 29559}#)
                                          (list '#(syntax-object
                                                   syntax
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i29530"
                                                        "i29531"
                                                        "i29532"
                                                        "i29533"
                                                        "i29534"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i29512")))
                                                   (hygiene guile))
                                                #{exp2 29560}#))
                                    (list (cons #{id 29556}#
                                                '(#(syntax-object
                                                    x
                                                    ((top)
                                                     #(ribcage
                                                       #(id exp1 var val exp2)
                                                       #((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                       #("i29530"
                                                         "i29531"
                                                         "i29532"
                                                         "i29533"
                                                         "i29534"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("i29512")))
                                                    (hygiene guile))
                                                  #(syntax-object
                                                    ...
                                                    ((top)
                                                     #(ribcage
                                                       #(id exp1 var val exp2)
                                                       #((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                       #("i29530"
                                                         "i29531"
                                                         "i29532"
                                                         "i29533"
                                                         "i29534"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("i29512")))
                                                    (hygiene guile))))
                                          (list '#(syntax-object
                                                   syntax
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i29530"
                                                        "i29531"
                                                        "i29532"
                                                        "i29533"
                                                        "i29534"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i29512")))
                                                   (hygiene guile))
                                                (cons #{exp1 29557}#
                                                      '(#(syntax-object
                                                          x
                                                          ((top)
                                                           #(ribcage
                                                             #(id
                                                               exp1
                                                               var
                                                               val
                                                               exp2)
                                                             #((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                             #("i29530"
                                                               "i29531"
                                                               "i29532"
                                                               "i29533"
                                                               "i29534"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("i29512")))
                                                          (hygiene guile))
                                                        #(syntax-object
                                                          ...
                                                          ((top)
                                                           #(ribcage
                                                             #(id
                                                               exp1
                                                               var
                                                               val
                                                               exp2)
                                                             #((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                             #("i29530"
                                                               "i29531"
                                                               "i29532"
                                                               "i29533"
                                                               "i29534"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("i29512")))
                                                          (hygiene guile))))))
                                    (list #{id 29556}#
                                          (list '#(syntax-object
                                                   identifier?
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i29530"
                                                        "i29531"
                                                        "i29532"
                                                        "i29533"
                                                        "i29534"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i29512")))
                                                   (hygiene guile))
                                                (list '#(syntax-object
                                                         syntax
                                                         ((top)
                                                          #(ribcage
                                                            #(id
                                                              exp1
                                                              var
                                                              val
                                                              exp2)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i29530"
                                                              "i29531"
                                                              "i29532"
                                                              "i29533"
                                                              "i29534"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(x)
                                                            #((top))
                                                            #("i29512")))
                                                         (hygiene guile))
                                                      #{id 29556}#))
                                          (list '#(syntax-object
                                                   syntax
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i29530"
                                                        "i29531"
                                                        "i29532"
                                                        "i29533"
                                                        "i29534"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i29512")))
                                                   (hygiene guile))
                                                #{exp1 29557}#))))))
                #{tmp 29547}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{x 29540}#))))))))

(define define*
  (make-syntax-transformer
    'define*
    'macro
    (lambda (#{x 29592}#)
      (let ((#{tmp 29594}#
              ($sc-dispatch
                #{x 29592}#
                '(_ (any . any) any . each-any))))
        (if #{tmp 29594}#
          (@apply
            (lambda (#{id 29598}#
                     #{args 29599}#
                     #{b0 29600}#
                     #{b1 29601}#)
              (list '#(syntax-object
                       define
                       ((top)
                        #(ribcage
                          #(id args b0 b1)
                          #((top) (top) (top) (top))
                          #("i29574" "i29575" "i29576" "i29577"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i29571")))
                       (hygiene guile))
                    #{id 29598}#
                    (cons '#(syntax-object
                             lambda*
                             ((top)
                              #(ribcage
                                #(id args b0 b1)
                                #((top) (top) (top) (top))
                                #("i29574" "i29575" "i29576" "i29577"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i29571")))
                             (hygiene guile))
                          (cons #{args 29599}#
                                (cons #{b0 29600}# #{b1 29601}#)))))
            #{tmp 29594}#)
          (let ((#{tmp 29602}#
                  ($sc-dispatch #{x 29592}# '(_ any any))))
            (if (if #{tmp 29602}#
                  (@apply
                    (lambda (#{id 29606}# #{val 29607}#)
                      (identifier?
                        '#(syntax-object
                           x
                           ((top)
                            #(ribcage
                              #(id val)
                              #((top) (top))
                              #("i29584" "i29585"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i29571")))
                           (hygiene guile))))
                    #{tmp 29602}#)
                  #f)
              (@apply
                (lambda (#{id 29608}# #{val 29609}#)
                  (list '#(syntax-object
                           define
                           ((top)
                            #(ribcage
                              #(id val)
                              #((top) (top))
                              #("i29588" "i29589"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i29571")))
                           (hygiene guile))
                        #{id 29608}#
                        #{val 29609}#))
                #{tmp 29602}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{x 29592}#))))))))

