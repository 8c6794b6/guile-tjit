(eval-when (compile) (set-current-module (resolve-module (quote (guile)))))
(if #f #f)

(letrec ((#{and-map*\ 4802}#
           (lambda (#{f\ 4864}# #{first\ 4865}# . #{rest\ 4866}#)
             (let ((#{t\ 4872}# (null? #{first\ 4865}#)))
               (if #{t\ 4872}#
                 #{t\ 4872}#
                 (if (null? #{rest\ 4866}#)
                   (letrec ((#{andmap\ 4876}#
                              (lambda (#{first\ 4877}#)
                                (let ((#{x\ 4880}# (car #{first\ 4877}#))
                                      (#{first\ 4881}# (cdr #{first\ 4877}#)))
                                  (if (null? #{first\ 4881}#)
                                    (#{f\ 4864}# #{x\ 4880}#)
                                    (if (#{f\ 4864}# #{x\ 4880}#)
                                      (#{andmap\ 4876}# #{first\ 4881}#)
                                      #f))))))
                     (#{andmap\ 4876}# #{first\ 4865}#))
                   (letrec ((#{andmap\ 4887}#
                              (lambda (#{first\ 4888}# #{rest\ 4889}#)
                                (let ((#{x\ 4894}# (car #{first\ 4888}#))
                                      (#{xr\ 4895}# (map car #{rest\ 4889}#))
                                      (#{first\ 4896}# (cdr #{first\ 4888}#))
                                      (#{rest\ 4897}#
                                        (map cdr #{rest\ 4889}#)))
                                  (if (null? #{first\ 4896}#)
                                    (apply #{f\ 4864}#
                                           (cons #{x\ 4894}# #{xr\ 4895}#))
                                    (if (apply #{f\ 4864}#
                                               (cons #{x\ 4894}# #{xr\ 4895}#))
                                      (#{andmap\ 4887}#
                                        #{first\ 4896}#
                                        #{rest\ 4897}#)
                                      #f))))))
                     (#{andmap\ 4887}# #{first\ 4865}# #{rest\ 4866}#))))))))
  (letrec ((#{lambda-var-list\ 5119}#
             (lambda (#{vars\ 5334}#)
               (letrec ((#{lvl\ 5340}#
                          (lambda (#{vars\ 5341}# #{ls\ 5342}# #{w\ 5343}#)
                            (if (pair? #{vars\ 5341}#)
                              (#{lvl\ 5340}#
                                (cdr #{vars\ 5341}#)
                                (cons (#{wrap\ 5073}#
                                        (car #{vars\ 5341}#)
                                        #{w\ 5343}#
                                        #f)
                                      #{ls\ 5342}#)
                                #{w\ 5343}#)
                              (if (#{id?\ 5004}# #{vars\ 5341}#)
                                (cons (#{wrap\ 5073}#
                                        #{vars\ 5341}#
                                        #{w\ 5343}#
                                        #f)
                                      #{ls\ 5342}#)
                                (if (null? #{vars\ 5341}#)
                                  #{ls\ 5342}#
                                  (if (#{syntax-object?\ 4968}# #{vars\ 5341}#)
                                    (#{lvl\ 5340}#
                                      (#{syntax-object-expression\ 4970}#
                                        #{vars\ 5341}#)
                                      #{ls\ 5342}#
                                      (#{join-wraps\ 5055}#
                                        #{w\ 5343}#
                                        (#{syntax-object-wrap\ 4972}#
                                          #{vars\ 5341}#)))
                                    (cons #{vars\ 5341}# #{ls\ 5342}#))))))))
                 (#{lvl\ 5340}#
                   #{vars\ 5334}#
                   '()
                   '(())))))
           (#{gen-var\ 5117}#
             (lambda (#{id\ 5354}#)
               (let ((#{id\ 5357}#
                       (if (#{syntax-object?\ 4968}# #{id\ 5354}#)
                         (#{syntax-object-expression\ 4970}# #{id\ 5354}#)
                         #{id\ 5354}#)))
                 (gensym
                   (string-append (symbol->string #{id\ 5357}#) " ")))))
           (#{strip\ 5115}#
             (lambda (#{x\ 5359}# #{w\ 5360}#)
               (if (memq 'top
                         (#{wrap-marks\ 5011}# #{w\ 5360}#))
                 #{x\ 5359}#
                 (letrec ((#{f\ 5366}#
                            (lambda (#{x\ 5367}#)
                              (if (#{syntax-object?\ 4968}# #{x\ 5367}#)
                                (#{strip\ 5115}#
                                  (#{syntax-object-expression\ 4970}#
                                    #{x\ 5367}#)
                                  (#{syntax-object-wrap\ 4972}# #{x\ 5367}#))
                                (if (pair? #{x\ 5367}#)
                                  (let ((#{a\ 5374}#
                                          (#{f\ 5366}# (car #{x\ 5367}#)))
                                        (#{d\ 5375}#
                                          (#{f\ 5366}# (cdr #{x\ 5367}#))))
                                    (if (if (eq? #{a\ 5374}# (car #{x\ 5367}#))
                                          (eq? #{d\ 5375}# (cdr #{x\ 5367}#))
                                          #f)
                                      #{x\ 5367}#
                                      (cons #{a\ 5374}# #{d\ 5375}#)))
                                  (if (vector? #{x\ 5367}#)
                                    (let ((#{old\ 5381}#
                                            (vector->list #{x\ 5367}#)))
                                      (let ((#{new\ 5383}#
                                              (map #{f\ 5366}# #{old\ 5381}#)))
                                        (if (#{and-map*\ 4802}#
                                              eq?
                                              #{old\ 5381}#
                                              #{new\ 5383}#)
                                          #{x\ 5367}#
                                          (list->vector #{new\ 5383}#))))
                                    #{x\ 5367}#))))))
                   (#{f\ 5366}# #{x\ 5359}#)))))
           (#{chi-lambda-case\ 5113}#
             (lambda (#{e\ 5385}#
                      #{r\ 5386}#
                      #{w\ 5387}#
                      #{s\ 5388}#
                      #{mod\ 5389}#
                      #{get-formals\ 5390}#
                      #{clauses\ 5391}#)
               (letrec ((#{expand-body\ 5406}#
                          (lambda (#{req\ 5407}#
                                   #{opt\ 5408}#
                                   #{rest\ 5409}#
                                   #{kw\ 5410}#
                                   #{body\ 5411}#
                                   #{vars\ 5412}#
                                   #{r*\ 5413}#
                                   #{w*\ 5414}#
                                   #{inits\ 5415}#
                                   #{meta\ 5416}#)
                            ((lambda (#{tmp\ 5427}#)
                               ((lambda (#{tmp\ 5428}#)
                                  (if (if #{tmp\ 5428}#
                                        (apply (lambda (#{docstring\ 5432}#
                                                        #{e1\ 5433}#
                                                        #{e2\ 5434}#)
                                                 (string?
                                                   (syntax->datum
                                                     #{docstring\ 5432}#)))
                                               #{tmp\ 5428}#)
                                        #f)
                                    (apply (lambda (#{docstring\ 5438}#
                                                    #{e1\ 5439}#
                                                    #{e2\ 5440}#)
                                             (#{expand-body\ 5406}#
                                               #{req\ 5407}#
                                               #{opt\ 5408}#
                                               #{rest\ 5409}#
                                               #{kw\ 5410}#
                                               (cons #{e1\ 5439}# #{e2\ 5440}#)
                                               #{vars\ 5412}#
                                               #{r*\ 5413}#
                                               #{w*\ 5414}#
                                               #{inits\ 5415}#
                                               (append
                                                 #{meta\ 5416}#
                                                 (list (cons 'documentation
                                                             (syntax->datum
                                                               #{docstring\ 5438}#))))))
                                           #{tmp\ 5428}#)
                                    ((lambda (#{tmp\ 5443}#)
                                       (if #{tmp\ 5443}#
                                         (apply (lambda (#{k\ 5448}#
                                                         #{v\ 5449}#
                                                         #{e1\ 5450}#
                                                         #{e2\ 5451}#)
                                                  (#{expand-body\ 5406}#
                                                    #{req\ 5407}#
                                                    #{opt\ 5408}#
                                                    #{rest\ 5409}#
                                                    #{kw\ 5410}#
                                                    (cons #{e1\ 5450}#
                                                          #{e2\ 5451}#)
                                                    #{vars\ 5412}#
                                                    #{r*\ 5413}#
                                                    #{w*\ 5414}#
                                                    #{inits\ 5415}#
                                                    (append
                                                      #{meta\ 5416}#
                                                      (syntax->datum
                                                        (map cons
                                                             #{k\ 5448}#
                                                             #{v\ 5449}#)))))
                                                #{tmp\ 5443}#)
                                         ((lambda (#{tmp\ 5455}#)
                                            (if #{tmp\ 5455}#
                                              (apply (lambda (#{e1\ 5458}#
                                                              #{e2\ 5459}#)
                                                       (values
                                                         #{meta\ 5416}#
                                                         #{req\ 5407}#
                                                         #{opt\ 5408}#
                                                         #{rest\ 5409}#
                                                         #{kw\ 5410}#
                                                         #{inits\ 5415}#
                                                         #{vars\ 5412}#
                                                         (#{chi-body\ 5097}#
                                                           (cons #{e1\ 5458}#
                                                                 #{e2\ 5459}#)
                                                           (#{source-wrap\ 5075}#
                                                             #{e\ 5385}#
                                                             #{w\ 5387}#
                                                             #{s\ 5388}#
                                                             #{mod\ 5389}#)
                                                           #{r*\ 5413}#
                                                           #{w*\ 5414}#
                                                           #{mod\ 5389}#)))
                                                     #{tmp\ 5455}#)
                                              (syntax-violation
                                                #f
                                                "source expression failed to match any pattern"
                                                #{tmp\ 5427}#)))
                                          ($sc-dispatch
                                            #{tmp\ 5427}#
                                            '(any . each-any)))))
                                     ($sc-dispatch
                                       #{tmp\ 5427}#
                                       '(#(vector #(each (any . any)))
                                         any
                                         .
                                         each-any)))))
                                ($sc-dispatch
                                  #{tmp\ 5427}#
                                  '(any any . each-any))))
                             #{body\ 5411}#)))
                        (#{expand-kw\ 5404}#
                          (lambda (#{req\ 5461}#
                                   #{opt\ 5462}#
                                   #{rest\ 5463}#
                                   #{kw\ 5464}#
                                   #{body\ 5465}#
                                   #{vars\ 5466}#
                                   #{r*\ 5467}#
                                   #{w*\ 5468}#
                                   #{aok\ 5469}#
                                   #{out\ 5470}#
                                   #{inits\ 5471}#)
                            (if (pair? #{kw\ 5464}#)
                              ((lambda (#{tmp\ 5485}#)
                                 ((lambda (#{tmp\ 5486}#)
                                    (if #{tmp\ 5486}#
                                      (apply (lambda (#{k\ 5490}#
                                                      #{id\ 5491}#
                                                      #{i\ 5492}#)
                                               (let ((#{v\ 5495}#
                                                       (#{gen-var\ 5117}#
                                                         #{id\ 5491}#)))
                                                 (let ((#{l\ 5497}#
                                                         (#{gen-labels\ 5022}#
                                                           (list #{v\ 5495}#))))
                                                   (let ((#{r**\ 5499}#
                                                           (#{extend-var-env\ 4994}#
                                                             #{l\ 5497}#
                                                             (list #{v\ 5495}#)
                                                             #{r*\ 5467}#)))
                                                     (let ((#{w**\ 5501}#
                                                             (#{make-binding-wrap\ 5051}#
                                                               (list #{id\ 5491}#)
                                                               #{l\ 5497}#
                                                               #{w*\ 5468}#)))
                                                       (#{expand-kw\ 5404}#
                                                         #{req\ 5461}#
                                                         #{opt\ 5462}#
                                                         #{rest\ 5463}#
                                                         (cdr #{kw\ 5464}#)
                                                         #{body\ 5465}#
                                                         (cons #{v\ 5495}#
                                                               #{vars\ 5466}#)
                                                         #{r**\ 5499}#
                                                         #{w**\ 5501}#
                                                         #{aok\ 5469}#
                                                         (cons (list (syntax->datum
                                                                       #{k\ 5490}#)
                                                                     (syntax->datum
                                                                       #{id\ 5491}#)
                                                                     #{v\ 5495}#)
                                                               #{out\ 5470}#)
                                                         (cons (#{chi\ 5089}#
                                                                 #{i\ 5492}#
                                                                 #{r*\ 5467}#
                                                                 #{w*\ 5468}#
                                                                 #{mod\ 5389}#)
                                                               #{inits\ 5471}#)))))))
                                             #{tmp\ 5486}#)
                                      (syntax-violation
                                        #f
                                        "source expression failed to match any pattern"
                                        #{tmp\ 5485}#)))
                                  ($sc-dispatch
                                    #{tmp\ 5485}#
                                    '(any any any))))
                               (car #{kw\ 5464}#))
                              (#{expand-body\ 5406}#
                                #{req\ 5461}#
                                #{opt\ 5462}#
                                #{rest\ 5463}#
                                (if (let ((#{t\ 5505}# #{aok\ 5469}#))
                                      (if #{t\ 5505}#
                                        #{t\ 5505}#
                                        (pair? #{out\ 5470}#)))
                                  (cons #{aok\ 5469}# (reverse #{out\ 5470}#))
                                  #f)
                                #{body\ 5465}#
                                (reverse #{vars\ 5466}#)
                                #{r*\ 5467}#
                                #{w*\ 5468}#
                                (reverse #{inits\ 5471}#)
                                '()))))
                        (#{expand-opt\ 5402}#
                          (lambda (#{req\ 5507}#
                                   #{opt\ 5508}#
                                   #{rest\ 5509}#
                                   #{kw\ 5510}#
                                   #{body\ 5511}#
                                   #{vars\ 5512}#
                                   #{r*\ 5513}#
                                   #{w*\ 5514}#
                                   #{out\ 5515}#
                                   #{inits\ 5516}#)
                            (if (pair? #{opt\ 5508}#)
                              ((lambda (#{tmp\ 5529}#)
                                 ((lambda (#{tmp\ 5530}#)
                                    (if #{tmp\ 5530}#
                                      (apply (lambda (#{id\ 5533}# #{i\ 5534}#)
                                               (let ((#{v\ 5537}#
                                                       (#{gen-var\ 5117}#
                                                         #{id\ 5533}#)))
                                                 (let ((#{l\ 5539}#
                                                         (#{gen-labels\ 5022}#
                                                           (list #{v\ 5537}#))))
                                                   (let ((#{r**\ 5541}#
                                                           (#{extend-var-env\ 4994}#
                                                             #{l\ 5539}#
                                                             (list #{v\ 5537}#)
                                                             #{r*\ 5513}#)))
                                                     (let ((#{w**\ 5543}#
                                                             (#{make-binding-wrap\ 5051}#
                                                               (list #{id\ 5533}#)
                                                               #{l\ 5539}#
                                                               #{w*\ 5514}#)))
                                                       (#{expand-opt\ 5402}#
                                                         #{req\ 5507}#
                                                         (cdr #{opt\ 5508}#)
                                                         #{rest\ 5509}#
                                                         #{kw\ 5510}#
                                                         #{body\ 5511}#
                                                         (cons #{v\ 5537}#
                                                               #{vars\ 5512}#)
                                                         #{r**\ 5541}#
                                                         #{w**\ 5543}#
                                                         (cons (syntax->datum
                                                                 #{id\ 5533}#)
                                                               #{out\ 5515}#)
                                                         (cons (#{chi\ 5089}#
                                                                 #{i\ 5534}#
                                                                 #{r*\ 5513}#
                                                                 #{w*\ 5514}#
                                                                 #{mod\ 5389}#)
                                                               #{inits\ 5516}#)))))))
                                             #{tmp\ 5530}#)
                                      (syntax-violation
                                        #f
                                        "source expression failed to match any pattern"
                                        #{tmp\ 5529}#)))
                                  ($sc-dispatch
                                    #{tmp\ 5529}#
                                    '(any any))))
                               (car #{opt\ 5508}#))
                              (if #{rest\ 5509}#
                                (let ((#{v\ 5548}#
                                        (#{gen-var\ 5117}# #{rest\ 5509}#)))
                                  (let ((#{l\ 5550}#
                                          (#{gen-labels\ 5022}#
                                            (list #{v\ 5548}#))))
                                    (let ((#{r*\ 5552}#
                                            (#{extend-var-env\ 4994}#
                                              #{l\ 5550}#
                                              (list #{v\ 5548}#)
                                              #{r*\ 5513}#)))
                                      (let ((#{w*\ 5554}#
                                              (#{make-binding-wrap\ 5051}#
                                                (list #{rest\ 5509}#)
                                                #{l\ 5550}#
                                                #{w*\ 5514}#)))
                                        (#{expand-kw\ 5404}#
                                          #{req\ 5507}#
                                          (if (pair? #{out\ 5515}#)
                                            (reverse #{out\ 5515}#)
                                            #f)
                                          (syntax->datum #{rest\ 5509}#)
                                          (if (pair? #{kw\ 5510}#)
                                            (cdr #{kw\ 5510}#)
                                            #{kw\ 5510}#)
                                          #{body\ 5511}#
                                          (cons #{v\ 5548}# #{vars\ 5512}#)
                                          #{r*\ 5552}#
                                          #{w*\ 5554}#
                                          (if (pair? #{kw\ 5510}#)
                                            (car #{kw\ 5510}#)
                                            #f)
                                          '()
                                          #{inits\ 5516}#)))))
                                (#{expand-kw\ 5404}#
                                  #{req\ 5507}#
                                  (if (pair? #{out\ 5515}#)
                                    (reverse #{out\ 5515}#)
                                    #f)
                                  #f
                                  (if (pair? #{kw\ 5510}#)
                                    (cdr #{kw\ 5510}#)
                                    #{kw\ 5510}#)
                                  #{body\ 5511}#
                                  #{vars\ 5512}#
                                  #{r*\ 5513}#
                                  #{w*\ 5514}#
                                  (if (pair? #{kw\ 5510}#)
                                    (car #{kw\ 5510}#)
                                    #f)
                                  '()
                                  #{inits\ 5516}#)))))
                        (#{expand-req\ 5400}#
                          (lambda (#{req\ 5556}#
                                   #{opt\ 5557}#
                                   #{rest\ 5558}#
                                   #{kw\ 5559}#
                                   #{body\ 5560}#)
                            (let ((#{vars\ 5568}#
                                    (map #{gen-var\ 5117}# #{req\ 5556}#))
                                  (#{labels\ 5569}#
                                    (#{gen-labels\ 5022}# #{req\ 5556}#)))
                              (let ((#{r*\ 5572}#
                                      (#{extend-var-env\ 4994}#
                                        #{labels\ 5569}#
                                        #{vars\ 5568}#
                                        #{r\ 5386}#))
                                    (#{w*\ 5573}#
                                      (#{make-binding-wrap\ 5051}#
                                        #{req\ 5556}#
                                        #{labels\ 5569}#
                                        #{w\ 5387}#)))
                                (#{expand-opt\ 5402}#
                                  (map syntax->datum #{req\ 5556}#)
                                  #{opt\ 5557}#
                                  #{rest\ 5558}#
                                  #{kw\ 5559}#
                                  #{body\ 5560}#
                                  (reverse #{vars\ 5568}#)
                                  #{r*\ 5572}#
                                  #{w*\ 5573}#
                                  '()
                                  '()))))))
                 ((lambda (#{tmp\ 5574}#)
                    ((lambda (#{tmp\ 5575}#)
                       (if #{tmp\ 5575}#
                         (apply (lambda () (values (quote ()) #f))
                                #{tmp\ 5575}#)
                         ((lambda (#{tmp\ 5576}#)
                            (if #{tmp\ 5576}#
                              (apply (lambda (#{args\ 5583}#
                                              #{e1\ 5584}#
                                              #{e2\ 5585}#
                                              #{args*\ 5586}#
                                              #{e1*\ 5587}#
                                              #{e2*\ 5588}#)
                                       (call-with-values
                                         (lambda ()
                                           (#{get-formals\ 5390}#
                                             #{args\ 5583}#))
                                         (lambda (#{req\ 5589}#
                                                  #{opt\ 5590}#
                                                  #{rest\ 5591}#
                                                  #{kw\ 5592}#)
                                           (call-with-values
                                             (lambda ()
                                               (#{expand-req\ 5400}#
                                                 #{req\ 5589}#
                                                 #{opt\ 5590}#
                                                 #{rest\ 5591}#
                                                 #{kw\ 5592}#
                                                 (cons #{e1\ 5584}#
                                                       #{e2\ 5585}#)))
                                             (lambda (#{meta\ 5598}#
                                                      #{req\ 5599}#
                                                      #{opt\ 5600}#
                                                      #{rest\ 5601}#
                                                      #{kw\ 5602}#
                                                      #{inits\ 5603}#
                                                      #{vars\ 5604}#
                                                      #{body\ 5605}#)
                                               (call-with-values
                                                 (lambda ()
                                                   (#{chi-lambda-case\ 5113}#
                                                     #{e\ 5385}#
                                                     #{r\ 5386}#
                                                     #{w\ 5387}#
                                                     #{s\ 5388}#
                                                     #{mod\ 5389}#
                                                     #{get-formals\ 5390}#
                                                     (map (lambda (#{tmp\ 5616}#
                                                                   #{tmp\ 5615}#
                                                                   #{tmp\ 5614}#)
                                                            (cons #{tmp\ 5614}#
                                                                  (cons #{tmp\ 5615}#
                                                                        #{tmp\ 5616}#)))
                                                          #{e2*\ 5588}#
                                                          #{e1*\ 5587}#
                                                          #{args*\ 5586}#)))
                                                 (lambda (#{meta*\ 5618}#
                                                          #{else*\ 5619}#)
                                                   (values
                                                     (append
                                                       #{meta\ 5598}#
                                                       #{meta*\ 5618}#)
                                                     (#{build-lambda-case\ 4950}#
                                                       #{s\ 5388}#
                                                       #{req\ 5599}#
                                                       #{opt\ 5600}#
                                                       #{rest\ 5601}#
                                                       #{kw\ 5602}#
                                                       #{inits\ 5603}#
                                                       #{vars\ 5604}#
                                                       #{body\ 5605}#
                                                       #{else*\ 5619}#)))))))))
                                     #{tmp\ 5576}#)
                              (syntax-violation
                                #f
                                "source expression failed to match any pattern"
                                #{tmp\ 5574}#)))
                          ($sc-dispatch
                            #{tmp\ 5574}#
                            '((any any . each-any)
                              .
                              #(each (any any . each-any)))))))
                     ($sc-dispatch #{tmp\ 5574}# (quote ()))))
                  #{clauses\ 5391}#))))
           (#{lambda*-formals\ 5111}#
             (lambda (#{orig-args\ 5622}#)
               (letrec ((#{check\ 5633}#
                          (lambda (#{req\ 5634}#
                                   #{opt\ 5635}#
                                   #{rest\ 5636}#
                                   #{kw\ 5637}#)
                            (if (#{distinct-bound-ids?\ 5069}#
                                  (append
                                    #{req\ 5634}#
                                    (map car #{opt\ 5635}#)
                                    (if #{rest\ 5636}#
                                      (list #{rest\ 5636}#)
                                      '())
                                    (if (pair? #{kw\ 5637}#)
                                      (map cadr (cdr #{kw\ 5637}#))
                                      '())))
                              (values
                                #{req\ 5634}#
                                #{opt\ 5635}#
                                #{rest\ 5636}#
                                #{kw\ 5637}#)
                              (syntax-violation
                                'lambda*
                                "duplicate identifier in argument list"
                                #{orig-args\ 5622}#))))
                        (#{rest\ 5631}#
                          (lambda (#{args\ 5645}#
                                   #{req\ 5646}#
                                   #{opt\ 5647}#
                                   #{kw\ 5648}#)
                            ((lambda (#{tmp\ 5653}#)
                               ((lambda (#{tmp\ 5654}#)
                                  (if (if #{tmp\ 5654}#
                                        (apply (lambda (#{r\ 5656}#)
                                                 (#{id?\ 5004}# #{r\ 5656}#))
                                               #{tmp\ 5654}#)
                                        #f)
                                    (apply (lambda (#{r\ 5658}#)
                                             (#{check\ 5633}#
                                               #{req\ 5646}#
                                               #{opt\ 5647}#
                                               #{r\ 5658}#
                                               #{kw\ 5648}#))
                                           #{tmp\ 5654}#)
                                    ((lambda (#{else\ 5660}#)
                                       (syntax-violation
                                         'lambda*
                                         "invalid rest argument"
                                         #{orig-args\ 5622}#
                                         #{args\ 5645}#))
                                     #{tmp\ 5653}#)))
                                (list #{tmp\ 5653}#)))
                             #{args\ 5645}#)))
                        (#{key\ 5629}#
                          (lambda (#{args\ 5661}#
                                   #{req\ 5662}#
                                   #{opt\ 5663}#
                                   #{rkey\ 5664}#)
                            ((lambda (#{tmp\ 5669}#)
                               ((lambda (#{tmp\ 5670}#)
                                  (if #{tmp\ 5670}#
                                    (apply (lambda ()
                                             (#{check\ 5633}#
                                               #{req\ 5662}#
                                               #{opt\ 5663}#
                                               #f
                                               (cons #f
                                                     (reverse
                                                       #{rkey\ 5664}#))))
                                           #{tmp\ 5670}#)
                                    ((lambda (#{tmp\ 5671}#)
                                       (if (if #{tmp\ 5671}#
                                             (apply (lambda (#{a\ 5674}#
                                                             #{b\ 5675}#)
                                                      (#{id?\ 5004}#
                                                        #{a\ 5674}#))
                                                    #{tmp\ 5671}#)
                                             #f)
                                         (apply (lambda (#{a\ 5678}#
                                                         #{b\ 5679}#)
                                                  ((lambda (#{tmp\ 5681}#)
                                                     ((lambda (#{k\ 5683}#)
                                                        (#{key\ 5629}#
                                                          #{b\ 5679}#
                                                          #{req\ 5662}#
                                                          #{opt\ 5663}#
                                                          (cons (cons #{k\ 5683}#
                                                                      (cons #{a\ 5678}#
                                                                            '(#(syntax-object
                                                                                #f
                                                                                ((top)
                                                                                 #(ribcage
                                                                                   #(k)
                                                                                   #((top))
                                                                                   #("i5682"))
                                                                                 #(ribcage
                                                                                   #(a
                                                                                     b)
                                                                                   #((top)
                                                                                     (top))
                                                                                   #("i5676"
                                                                                     "i5677"))
                                                                                 #(ribcage
                                                                                   ()
                                                                                   ()
                                                                                   ())
                                                                                 #(ribcage
                                                                                   #(args
                                                                                     req
                                                                                     opt
                                                                                     rkey)
                                                                                   #((top)
                                                                                     (top)
                                                                                     (top)
                                                                                     (top))
                                                                                   #("i5665"
                                                                                     "i5666"
                                                                                     "i5667"
                                                                                     "i5668"))
                                                                                 #(ribcage
                                                                                   (check rest
                                                                                          key
                                                                                          opt
                                                                                          req)
                                                                                   ((top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top))
                                                                                   ("i5632"
                                                                                    "i5630"
                                                                                    "i5628"
                                                                                    "i5626"
                                                                                    "i5624"))
                                                                                 #(ribcage
                                                                                   #(orig-args)
                                                                                   #((top))
                                                                                   #("i5623"))
                                                                                 #(ribcage
                                                                                   (lambda-var-list
                                                                                     gen-var
                                                                                     strip
                                                                                     chi-lambda-case
                                                                                     lambda*-formals
                                                                                     chi-simple-lambda
                                                                                     lambda-formals
                                                                                     ellipsis?
                                                                                     chi-void
                                                                                     eval-local-transformer
                                                                                     chi-local-syntax
                                                                                     chi-body
                                                                                     chi-macro
                                                                                     chi-application
                                                                                     chi-expr
                                                                                     chi
                                                                                     chi-top
                                                                                     syntax-type
                                                                                     chi-when-list
                                                                                     chi-install-global
                                                                                     chi-top-sequence
                                                                                     chi-sequence
                                                                                     source-wrap
                                                                                     wrap
                                                                                     bound-id-member?
                                                                                     distinct-bound-ids?
                                                                                     valid-bound-ids?
                                                                                     bound-id=?
                                                                                     free-id=?
                                                                                     id-var-name
                                                                                     same-marks?
                                                                                     join-marks
                                                                                     join-wraps
                                                                                     smart-append
                                                                                     make-binding-wrap
                                                                                     extend-ribcage!
                                                                                     make-empty-ribcage
                                                                                     new-mark
                                                                                     anti-mark
                                                                                     the-anti-mark
                                                                                     top-marked?
                                                                                     top-wrap
                                                                                     empty-wrap
                                                                                     set-ribcage-labels!
                                                                                     set-ribcage-marks!
                                                                                     set-ribcage-symnames!
                                                                                     ribcage-labels
                                                                                     ribcage-marks
                                                                                     ribcage-symnames
                                                                                     ribcage?
                                                                                     make-ribcage
                                                                                     gen-labels
                                                                                     gen-label
                                                                                     make-rename
                                                                                     rename-marks
                                                                                     rename-new
                                                                                     rename-old
                                                                                     subst-rename?
                                                                                     wrap-subst
                                                                                     wrap-marks
                                                                                     make-wrap
                                                                                     id-sym-name&marks
                                                                                     id-sym-name
                                                                                     id?
                                                                                     nonsymbol-id?
                                                                                     global-extend
                                                                                     lookup
                                                                                     macros-only-env
                                                                                     extend-var-env
                                                                                     extend-env
                                                                                     null-env
                                                                                     binding-value
                                                                                     binding-type
                                                                                     make-binding
                                                                                     arg-check
                                                                                     source-annotation
                                                                                     no-source
                                                                                     set-syntax-object-module!
                                                                                     set-syntax-object-wrap!
                                                                                     set-syntax-object-expression!
                                                                                     syntax-object-module
                                                                                     syntax-object-wrap
                                                                                     syntax-object-expression
                                                                                     syntax-object?
                                                                                     make-syntax-object
                                                                                     build-lexical-var
                                                                                     build-letrec
                                                                                     build-named-let
                                                                                     build-let
                                                                                     build-sequence
                                                                                     build-data
                                                                                     build-primref
                                                                                     build-lambda-case
                                                                                     build-case-lambda
                                                                                     build-simple-lambda
                                                                                     build-global-definition
                                                                                     maybe-name-value!
                                                                                     build-global-assignment
                                                                                     build-global-reference
                                                                                     analyze-variable
                                                                                     build-lexical-assignment
                                                                                     build-lexical-reference
                                                                                     build-dynlet
                                                                                     build-conditional
                                                                                     build-application
                                                                                     build-void
                                                                                     decorate-source
                                                                                     get-global-definition-hook
                                                                                     put-global-definition-hook
                                                                                     gensym-hook
                                                                                     local-eval-hook
                                                                                     top-level-eval-hook
                                                                                     fx<
                                                                                     fx=
                                                                                     fx-
                                                                                     fx+
                                                                                     *mode*
                                                                                     noexpand)
                                                                                   ((top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top))
                                                                                   ("i5118"
                                                                                    "i5116"
                                                                                    "i5114"
                                                                                    "i5112"
                                                                                    "i5110"
                                                                                    "i5108"
                                                                                    "i5106"
                                                                                    "i5104"
                                                                                    "i5102"
                                                                                    "i5100"
                                                                                    "i5098"
                                                                                    "i5096"
                                                                                    "i5094"
                                                                                    "i5092"
                                                                                    "i5090"
                                                                                    "i5088"
                                                                                    "i5086"
                                                                                    "i5084"
                                                                                    "i5082"
                                                                                    "i5080"
                                                                                    "i5078"
                                                                                    "i5076"
                                                                                    "i5074"
                                                                                    "i5072"
                                                                                    "i5070"
                                                                                    "i5068"
                                                                                    "i5066"
                                                                                    "i5064"
                                                                                    "i5062"
                                                                                    "i5060"
                                                                                    "i5058"
                                                                                    "i5056"
                                                                                    "i5054"
                                                                                    "i5052"
                                                                                    "i5050"
                                                                                    "i5048"
                                                                                    "i5047"
                                                                                    "i5046"
                                                                                    "i5044"
                                                                                    "i5043"
                                                                                    "i5042"
                                                                                    "i5041"
                                                                                    "i5040"
                                                                                    "i5038"
                                                                                    "i5036"
                                                                                    "i5034"
                                                                                    "i5032"
                                                                                    "i5030"
                                                                                    "i5028"
                                                                                    "i5026"
                                                                                    "i5024"
                                                                                    "i5021"
                                                                                    "i5019"
                                                                                    "i5018"
                                                                                    "i5017"
                                                                                    "i5016"
                                                                                    "i5015"
                                                                                    "i5014"
                                                                                    "i5012"
                                                                                    "i5010"
                                                                                    "i5008"
                                                                                    "i5006"
                                                                                    "i5005"
                                                                                    "i5003"
                                                                                    "i5001"
                                                                                    "i4999"
                                                                                    "i4997"
                                                                                    "i4995"
                                                                                    "i4993"
                                                                                    "i4991"
                                                                                    "i4990"
                                                                                    "i4988"
                                                                                    "i4986"
                                                                                    "i4985"
                                                                                    "i4984"
                                                                                    "i4982"
                                                                                    "i4981"
                                                                                    "i4979"
                                                                                    "i4977"
                                                                                    "i4975"
                                                                                    "i4973"
                                                                                    "i4971"
                                                                                    "i4969"
                                                                                    "i4967"
                                                                                    "i4965"
                                                                                    "i4963"
                                                                                    "i4961"
                                                                                    "i4959"
                                                                                    "i4957"
                                                                                    "i4955"
                                                                                    "i4953"
                                                                                    "i4951"
                                                                                    "i4949"
                                                                                    "i4947"
                                                                                    "i4945"
                                                                                    "i4943"
                                                                                    "i4941"
                                                                                    "i4939"
                                                                                    "i4937"
                                                                                    "i4935"
                                                                                    "i4933"
                                                                                    "i4931"
                                                                                    "i4929"
                                                                                    "i4927"
                                                                                    "i4925"
                                                                                    "i4923"
                                                                                    "i4921"
                                                                                    "i4919"
                                                                                    "i4917"
                                                                                    "i4916"
                                                                                    "i4914"
                                                                                    "i4912"
                                                                                    "i4910"
                                                                                    "i4908"
                                                                                    "i4906"
                                                                                    "i4904"
                                                                                    "i4902"
                                                                                    "i4900"))
                                                                                 #(ribcage
                                                                                   (define-structure
                                                                                     and-map*)
                                                                                   ((top)
                                                                                    (top))
                                                                                   ("i4803"
                                                                                    "i4801")))
                                                                                (hygiene
                                                                                  guile)))))
                                                                #{rkey\ 5664}#)))
                                                      #{tmp\ 5681}#))
                                                   (symbol->keyword
                                                     (syntax->datum
                                                       #{a\ 5678}#))))
                                                #{tmp\ 5671}#)
                                         ((lambda (#{tmp\ 5684}#)
                                            (if (if #{tmp\ 5684}#
                                                  (apply (lambda (#{a\ 5688}#
                                                                  #{init\ 5689}#
                                                                  #{b\ 5690}#)
                                                           (#{id?\ 5004}#
                                                             #{a\ 5688}#))
                                                         #{tmp\ 5684}#)
                                                  #f)
                                              (apply (lambda (#{a\ 5694}#
                                                              #{init\ 5695}#
                                                              #{b\ 5696}#)
                                                       ((lambda (#{tmp\ 5698}#)
                                                          ((lambda (#{k\ 5700}#)
                                                             (#{key\ 5629}#
                                                               #{b\ 5696}#
                                                               #{req\ 5662}#
                                                               #{opt\ 5663}#
                                                               (cons (list #{k\ 5700}#
                                                                           #{a\ 5694}#
                                                                           #{init\ 5695}#)
                                                                     #{rkey\ 5664}#)))
                                                           #{tmp\ 5698}#))
                                                        (symbol->keyword
                                                          (syntax->datum
                                                            #{a\ 5694}#))))
                                                     #{tmp\ 5684}#)
                                              ((lambda (#{tmp\ 5701}#)
                                                 (if (if #{tmp\ 5701}#
                                                       (apply (lambda (#{a\ 5706}#
                                                                       #{init\ 5707}#
                                                                       #{k\ 5708}#
                                                                       #{b\ 5709}#)
                                                                (if (#{id?\ 5004}#
                                                                      #{a\ 5706}#)
                                                                  (keyword?
                                                                    (syntax->datum
                                                                      #{k\ 5708}#))
                                                                  #f))
                                                              #{tmp\ 5701}#)
                                                       #f)
                                                   (apply (lambda (#{a\ 5716}#
                                                                   #{init\ 5717}#
                                                                   #{k\ 5718}#
                                                                   #{b\ 5719}#)
                                                            (#{key\ 5629}#
                                                              #{b\ 5719}#
                                                              #{req\ 5662}#
                                                              #{opt\ 5663}#
                                                              (cons (list #{k\ 5718}#
                                                                          #{a\ 5716}#
                                                                          #{init\ 5717}#)
                                                                    #{rkey\ 5664}#)))
                                                          #{tmp\ 5701}#)
                                                   ((lambda (#{tmp\ 5720}#)
                                                      (if (if #{tmp\ 5720}#
                                                            (apply (lambda (#{aok\ 5722}#)
                                                                     (eq? (syntax->datum
                                                                            #{aok\ 5722}#)
                                                                          #:allow-other-keys))
                                                                   #{tmp\ 5720}#)
                                                            #f)
                                                        (apply (lambda (#{aok\ 5724}#)
                                                                 (#{check\ 5633}#
                                                                   #{req\ 5662}#
                                                                   #{opt\ 5663}#
                                                                   #f
                                                                   (cons #t
                                                                         (reverse
                                                                           #{rkey\ 5664}#))))
                                                               #{tmp\ 5720}#)
                                                        ((lambda (#{tmp\ 5725}#)
                                                           (if (if #{tmp\ 5725}#
                                                                 (apply (lambda (#{aok\ 5729}#
                                                                                 #{a\ 5730}#
                                                                                 #{b\ 5731}#)
                                                                          (if (eq? (syntax->datum
                                                                                     #{aok\ 5729}#)
                                                                                   #:allow-other-keys)
                                                                            (eq? (syntax->datum
                                                                                   #{a\ 5730}#)
                                                                                 #:rest)
                                                                            #f))
                                                                        #{tmp\ 5725}#)
                                                                 #f)
                                                             (apply (lambda (#{aok\ 5737}#
                                                                             #{a\ 5738}#
                                                                             #{b\ 5739}#)
                                                                      (#{rest\ 5631}#
                                                                        #{b\ 5739}#
                                                                        #{req\ 5662}#
                                                                        #{opt\ 5663}#
                                                                        (cons #t
                                                                              (reverse
                                                                                #{rkey\ 5664}#))))
                                                                    #{tmp\ 5725}#)
                                                             ((lambda (#{tmp\ 5740}#)
                                                                (if (if #{tmp\ 5740}#
                                                                      (apply (lambda (#{aok\ 5743}#
                                                                                      #{r\ 5744}#)
                                                                               (if (eq? (syntax->datum
                                                                                          #{aok\ 5743}#)
                                                                                        #:allow-other-keys)
                                                                                 (#{id?\ 5004}#
                                                                                   #{r\ 5744}#)
                                                                                 #f))
                                                                             #{tmp\ 5740}#)
                                                                      #f)
                                                                  (apply (lambda (#{aok\ 5749}#
                                                                                  #{r\ 5750}#)
                                                                           (#{rest\ 5631}#
                                                                             #{r\ 5750}#
                                                                             #{req\ 5662}#
                                                                             #{opt\ 5663}#
                                                                             (cons #t
                                                                                   (reverse
                                                                                     #{rkey\ 5664}#))))
                                                                         #{tmp\ 5740}#)
                                                                  ((lambda (#{tmp\ 5751}#)
                                                                     (if (if #{tmp\ 5751}#
                                                                           (apply (lambda (#{a\ 5754}#
                                                                                           #{b\ 5755}#)
                                                                                    (eq? (syntax->datum
                                                                                           #{a\ 5754}#)
                                                                                         #:rest))
                                                                                  #{tmp\ 5751}#)
                                                                           #f)
                                                                       (apply (lambda (#{a\ 5758}#
                                                                                       #{b\ 5759}#)
                                                                                (#{rest\ 5631}#
                                                                                  #{b\ 5759}#
                                                                                  #{req\ 5662}#
                                                                                  #{opt\ 5663}#
                                                                                  (cons #f
                                                                                        (reverse
                                                                                          #{rkey\ 5664}#))))
                                                                              #{tmp\ 5751}#)
                                                                       ((lambda (#{tmp\ 5760}#)
                                                                          (if (if #{tmp\ 5760}#
                                                                                (apply (lambda (#{r\ 5762}#)
                                                                                         (#{id?\ 5004}#
                                                                                           #{r\ 5762}#))
                                                                                       #{tmp\ 5760}#)
                                                                                #f)
                                                                            (apply (lambda (#{r\ 5764}#)
                                                                                     (#{rest\ 5631}#
                                                                                       #{r\ 5764}#
                                                                                       #{req\ 5662}#
                                                                                       #{opt\ 5663}#
                                                                                       (cons #f
                                                                                             (reverse
                                                                                               #{rkey\ 5664}#))))
                                                                                   #{tmp\ 5760}#)
                                                                            ((lambda (#{else\ 5766}#)
                                                                               (syntax-violation
                                                                                 'lambda*
                                                                                 "invalid keyword argument list"
                                                                                 #{orig-args\ 5622}#
                                                                                 #{args\ 5661}#))
                                                                             #{tmp\ 5669}#)))
                                                                        (list #{tmp\ 5669}#))))
                                                                   ($sc-dispatch
                                                                     #{tmp\ 5669}#
                                                                     '(any any)))))
                                                              ($sc-dispatch
                                                                #{tmp\ 5669}#
                                                                '(any .
                                                                      any)))))
                                                         ($sc-dispatch
                                                           #{tmp\ 5669}#
                                                           '(any any any)))))
                                                    ($sc-dispatch
                                                      #{tmp\ 5669}#
                                                      '(any)))))
                                               ($sc-dispatch
                                                 #{tmp\ 5669}#
                                                 '((any any any) . any)))))
                                          ($sc-dispatch
                                            #{tmp\ 5669}#
                                            '((any any) . any)))))
                                     ($sc-dispatch
                                       #{tmp\ 5669}#
                                       '(any . any)))))
                                ($sc-dispatch #{tmp\ 5669}# (quote ()))))
                             #{args\ 5661}#)))
                        (#{opt\ 5627}#
                          (lambda (#{args\ 5767}# #{req\ 5768}# #{ropt\ 5769}#)
                            ((lambda (#{tmp\ 5773}#)
                               ((lambda (#{tmp\ 5774}#)
                                  (if #{tmp\ 5774}#
                                    (apply (lambda ()
                                             (#{check\ 5633}#
                                               #{req\ 5768}#
                                               (reverse #{ropt\ 5769}#)
                                               #f
                                               '()))
                                           #{tmp\ 5774}#)
                                    ((lambda (#{tmp\ 5775}#)
                                       (if (if #{tmp\ 5775}#
                                             (apply (lambda (#{a\ 5778}#
                                                             #{b\ 5779}#)
                                                      (#{id?\ 5004}#
                                                        #{a\ 5778}#))
                                                    #{tmp\ 5775}#)
                                             #f)
                                         (apply (lambda (#{a\ 5782}#
                                                         #{b\ 5783}#)
                                                  (#{opt\ 5627}#
                                                    #{b\ 5783}#
                                                    #{req\ 5768}#
                                                    (cons (cons #{a\ 5782}#
                                                                '(#(syntax-object
                                                                    #f
                                                                    ((top)
                                                                     #(ribcage
                                                                       #(a b)
                                                                       #((top)
                                                                         (top))
                                                                       #("i5780"
                                                                         "i5781"))
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       #(args
                                                                         req
                                                                         ropt)
                                                                       #((top)
                                                                         (top)
                                                                         (top))
                                                                       #("i5770"
                                                                         "i5771"
                                                                         "i5772"))
                                                                     #(ribcage
                                                                       (check rest
                                                                              key
                                                                              opt
                                                                              req)
                                                                       ((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                       ("i5632"
                                                                        "i5630"
                                                                        "i5628"
                                                                        "i5626"
                                                                        "i5624"))
                                                                     #(ribcage
                                                                       #(orig-args)
                                                                       #((top))
                                                                       #("i5623"))
                                                                     #(ribcage
                                                                       (lambda-var-list
                                                                         gen-var
                                                                         strip
                                                                         chi-lambda-case
                                                                         lambda*-formals
                                                                         chi-simple-lambda
                                                                         lambda-formals
                                                                         ellipsis?
                                                                         chi-void
                                                                         eval-local-transformer
                                                                         chi-local-syntax
                                                                         chi-body
                                                                         chi-macro
                                                                         chi-application
                                                                         chi-expr
                                                                         chi
                                                                         chi-top
                                                                         syntax-type
                                                                         chi-when-list
                                                                         chi-install-global
                                                                         chi-top-sequence
                                                                         chi-sequence
                                                                         source-wrap
                                                                         wrap
                                                                         bound-id-member?
                                                                         distinct-bound-ids?
                                                                         valid-bound-ids?
                                                                         bound-id=?
                                                                         free-id=?
                                                                         id-var-name
                                                                         same-marks?
                                                                         join-marks
                                                                         join-wraps
                                                                         smart-append
                                                                         make-binding-wrap
                                                                         extend-ribcage!
                                                                         make-empty-ribcage
                                                                         new-mark
                                                                         anti-mark
                                                                         the-anti-mark
                                                                         top-marked?
                                                                         top-wrap
                                                                         empty-wrap
                                                                         set-ribcage-labels!
                                                                         set-ribcage-marks!
                                                                         set-ribcage-symnames!
                                                                         ribcage-labels
                                                                         ribcage-marks
                                                                         ribcage-symnames
                                                                         ribcage?
                                                                         make-ribcage
                                                                         gen-labels
                                                                         gen-label
                                                                         make-rename
                                                                         rename-marks
                                                                         rename-new
                                                                         rename-old
                                                                         subst-rename?
                                                                         wrap-subst
                                                                         wrap-marks
                                                                         make-wrap
                                                                         id-sym-name&marks
                                                                         id-sym-name
                                                                         id?
                                                                         nonsymbol-id?
                                                                         global-extend
                                                                         lookup
                                                                         macros-only-env
                                                                         extend-var-env
                                                                         extend-env
                                                                         null-env
                                                                         binding-value
                                                                         binding-type
                                                                         make-binding
                                                                         arg-check
                                                                         source-annotation
                                                                         no-source
                                                                         set-syntax-object-module!
                                                                         set-syntax-object-wrap!
                                                                         set-syntax-object-expression!
                                                                         syntax-object-module
                                                                         syntax-object-wrap
                                                                         syntax-object-expression
                                                                         syntax-object?
                                                                         make-syntax-object
                                                                         build-lexical-var
                                                                         build-letrec
                                                                         build-named-let
                                                                         build-let
                                                                         build-sequence
                                                                         build-data
                                                                         build-primref
                                                                         build-lambda-case
                                                                         build-case-lambda
                                                                         build-simple-lambda
                                                                         build-global-definition
                                                                         maybe-name-value!
                                                                         build-global-assignment
                                                                         build-global-reference
                                                                         analyze-variable
                                                                         build-lexical-assignment
                                                                         build-lexical-reference
                                                                         build-dynlet
                                                                         build-conditional
                                                                         build-application
                                                                         build-void
                                                                         decorate-source
                                                                         get-global-definition-hook
                                                                         put-global-definition-hook
                                                                         gensym-hook
                                                                         local-eval-hook
                                                                         top-level-eval-hook
                                                                         fx<
                                                                         fx=
                                                                         fx-
                                                                         fx+
                                                                         *mode*
                                                                         noexpand)
                                                                       ((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                       ("i5118"
                                                                        "i5116"
                                                                        "i5114"
                                                                        "i5112"
                                                                        "i5110"
                                                                        "i5108"
                                                                        "i5106"
                                                                        "i5104"
                                                                        "i5102"
                                                                        "i5100"
                                                                        "i5098"
                                                                        "i5096"
                                                                        "i5094"
                                                                        "i5092"
                                                                        "i5090"
                                                                        "i5088"
                                                                        "i5086"
                                                                        "i5084"
                                                                        "i5082"
                                                                        "i5080"
                                                                        "i5078"
                                                                        "i5076"
                                                                        "i5074"
                                                                        "i5072"
                                                                        "i5070"
                                                                        "i5068"
                                                                        "i5066"
                                                                        "i5064"
                                                                        "i5062"
                                                                        "i5060"
                                                                        "i5058"
                                                                        "i5056"
                                                                        "i5054"
                                                                        "i5052"
                                                                        "i5050"
                                                                        "i5048"
                                                                        "i5047"
                                                                        "i5046"
                                                                        "i5044"
                                                                        "i5043"
                                                                        "i5042"
                                                                        "i5041"
                                                                        "i5040"
                                                                        "i5038"
                                                                        "i5036"
                                                                        "i5034"
                                                                        "i5032"
                                                                        "i5030"
                                                                        "i5028"
                                                                        "i5026"
                                                                        "i5024"
                                                                        "i5021"
                                                                        "i5019"
                                                                        "i5018"
                                                                        "i5017"
                                                                        "i5016"
                                                                        "i5015"
                                                                        "i5014"
                                                                        "i5012"
                                                                        "i5010"
                                                                        "i5008"
                                                                        "i5006"
                                                                        "i5005"
                                                                        "i5003"
                                                                        "i5001"
                                                                        "i4999"
                                                                        "i4997"
                                                                        "i4995"
                                                                        "i4993"
                                                                        "i4991"
                                                                        "i4990"
                                                                        "i4988"
                                                                        "i4986"
                                                                        "i4985"
                                                                        "i4984"
                                                                        "i4982"
                                                                        "i4981"
                                                                        "i4979"
                                                                        "i4977"
                                                                        "i4975"
                                                                        "i4973"
                                                                        "i4971"
                                                                        "i4969"
                                                                        "i4967"
                                                                        "i4965"
                                                                        "i4963"
                                                                        "i4961"
                                                                        "i4959"
                                                                        "i4957"
                                                                        "i4955"
                                                                        "i4953"
                                                                        "i4951"
                                                                        "i4949"
                                                                        "i4947"
                                                                        "i4945"
                                                                        "i4943"
                                                                        "i4941"
                                                                        "i4939"
                                                                        "i4937"
                                                                        "i4935"
                                                                        "i4933"
                                                                        "i4931"
                                                                        "i4929"
                                                                        "i4927"
                                                                        "i4925"
                                                                        "i4923"
                                                                        "i4921"
                                                                        "i4919"
                                                                        "i4917"
                                                                        "i4916"
                                                                        "i4914"
                                                                        "i4912"
                                                                        "i4910"
                                                                        "i4908"
                                                                        "i4906"
                                                                        "i4904"
                                                                        "i4902"
                                                                        "i4900"))
                                                                     #(ribcage
                                                                       (define-structure
                                                                         and-map*)
                                                                       ((top)
                                                                        (top))
                                                                       ("i4803"
                                                                        "i4801")))
                                                                    (hygiene
                                                                      guile))))
                                                          #{ropt\ 5769}#)))
                                                #{tmp\ 5775}#)
                                         ((lambda (#{tmp\ 5784}#)
                                            (if (if #{tmp\ 5784}#
                                                  (apply (lambda (#{a\ 5788}#
                                                                  #{init\ 5789}#
                                                                  #{b\ 5790}#)
                                                           (#{id?\ 5004}#
                                                             #{a\ 5788}#))
                                                         #{tmp\ 5784}#)
                                                  #f)
                                              (apply (lambda (#{a\ 5794}#
                                                              #{init\ 5795}#
                                                              #{b\ 5796}#)
                                                       (#{opt\ 5627}#
                                                         #{b\ 5796}#
                                                         #{req\ 5768}#
                                                         (cons (list #{a\ 5794}#
                                                                     #{init\ 5795}#)
                                                               #{ropt\ 5769}#)))
                                                     #{tmp\ 5784}#)
                                              ((lambda (#{tmp\ 5797}#)
                                                 (if (if #{tmp\ 5797}#
                                                       (apply (lambda (#{a\ 5800}#
                                                                       #{b\ 5801}#)
                                                                (eq? (syntax->datum
                                                                       #{a\ 5800}#)
                                                                     #:key))
                                                              #{tmp\ 5797}#)
                                                       #f)
                                                   (apply (lambda (#{a\ 5804}#
                                                                   #{b\ 5805}#)
                                                            (#{key\ 5629}#
                                                              #{b\ 5805}#
                                                              #{req\ 5768}#
                                                              (reverse
                                                                #{ropt\ 5769}#)
                                                              '()))
                                                          #{tmp\ 5797}#)
                                                   ((lambda (#{tmp\ 5806}#)
                                                      (if (if #{tmp\ 5806}#
                                                            (apply (lambda (#{a\ 5809}#
                                                                            #{b\ 5810}#)
                                                                     (eq? (syntax->datum
                                                                            #{a\ 5809}#)
                                                                          #:rest))
                                                                   #{tmp\ 5806}#)
                                                            #f)
                                                        (apply (lambda (#{a\ 5813}#
                                                                        #{b\ 5814}#)
                                                                 (#{rest\ 5631}#
                                                                   #{b\ 5814}#
                                                                   #{req\ 5768}#
                                                                   (reverse
                                                                     #{ropt\ 5769}#)
                                                                   '()))
                                                               #{tmp\ 5806}#)
                                                        ((lambda (#{tmp\ 5815}#)
                                                           (if (if #{tmp\ 5815}#
                                                                 (apply (lambda (#{r\ 5817}#)
                                                                          (#{id?\ 5004}#
                                                                            #{r\ 5817}#))
                                                                        #{tmp\ 5815}#)
                                                                 #f)
                                                             (apply (lambda (#{r\ 5819}#)
                                                                      (#{rest\ 5631}#
                                                                        #{r\ 5819}#
                                                                        #{req\ 5768}#
                                                                        (reverse
                                                                          #{ropt\ 5769}#)
                                                                        '()))
                                                                    #{tmp\ 5815}#)
                                                             ((lambda (#{else\ 5821}#)
                                                                (syntax-violation
                                                                  'lambda*
                                                                  "invalid optional argument list"
                                                                  #{orig-args\ 5622}#
                                                                  #{args\ 5767}#))
                                                              #{tmp\ 5773}#)))
                                                         (list #{tmp\ 5773}#))))
                                                    ($sc-dispatch
                                                      #{tmp\ 5773}#
                                                      '(any any)))))
                                               ($sc-dispatch
                                                 #{tmp\ 5773}#
                                                 '(any . any)))))
                                          ($sc-dispatch
                                            #{tmp\ 5773}#
                                            '((any any) . any)))))
                                     ($sc-dispatch
                                       #{tmp\ 5773}#
                                       '(any . any)))))
                                ($sc-dispatch #{tmp\ 5773}# (quote ()))))
                             #{args\ 5767}#)))
                        (#{req\ 5625}#
                          (lambda (#{args\ 5822}# #{rreq\ 5823}#)
                            ((lambda (#{tmp\ 5826}#)
                               ((lambda (#{tmp\ 5827}#)
                                  (if #{tmp\ 5827}#
                                    (apply (lambda ()
                                             (#{check\ 5633}#
                                               (reverse #{rreq\ 5823}#)
                                               '()
                                               #f
                                               '()))
                                           #{tmp\ 5827}#)
                                    ((lambda (#{tmp\ 5828}#)
                                       (if (if #{tmp\ 5828}#
                                             (apply (lambda (#{a\ 5831}#
                                                             #{b\ 5832}#)
                                                      (#{id?\ 5004}#
                                                        #{a\ 5831}#))
                                                    #{tmp\ 5828}#)
                                             #f)
                                         (apply (lambda (#{a\ 5835}#
                                                         #{b\ 5836}#)
                                                  (#{req\ 5625}#
                                                    #{b\ 5836}#
                                                    (cons #{a\ 5835}#
                                                          #{rreq\ 5823}#)))
                                                #{tmp\ 5828}#)
                                         ((lambda (#{tmp\ 5837}#)
                                            (if (if #{tmp\ 5837}#
                                                  (apply (lambda (#{a\ 5840}#
                                                                  #{b\ 5841}#)
                                                           (eq? (syntax->datum
                                                                  #{a\ 5840}#)
                                                                #:optional))
                                                         #{tmp\ 5837}#)
                                                  #f)
                                              (apply (lambda (#{a\ 5844}#
                                                              #{b\ 5845}#)
                                                       (#{opt\ 5627}#
                                                         #{b\ 5845}#
                                                         (reverse
                                                           #{rreq\ 5823}#)
                                                         '()))
                                                     #{tmp\ 5837}#)
                                              ((lambda (#{tmp\ 5846}#)
                                                 (if (if #{tmp\ 5846}#
                                                       (apply (lambda (#{a\ 5849}#
                                                                       #{b\ 5850}#)
                                                                (eq? (syntax->datum
                                                                       #{a\ 5849}#)
                                                                     #:key))
                                                              #{tmp\ 5846}#)
                                                       #f)
                                                   (apply (lambda (#{a\ 5853}#
                                                                   #{b\ 5854}#)
                                                            (#{key\ 5629}#
                                                              #{b\ 5854}#
                                                              (reverse
                                                                #{rreq\ 5823}#)
                                                              '()
                                                              '()))
                                                          #{tmp\ 5846}#)
                                                   ((lambda (#{tmp\ 5855}#)
                                                      (if (if #{tmp\ 5855}#
                                                            (apply (lambda (#{a\ 5858}#
                                                                            #{b\ 5859}#)
                                                                     (eq? (syntax->datum
                                                                            #{a\ 5858}#)
                                                                          #:rest))
                                                                   #{tmp\ 5855}#)
                                                            #f)
                                                        (apply (lambda (#{a\ 5862}#
                                                                        #{b\ 5863}#)
                                                                 (#{rest\ 5631}#
                                                                   #{b\ 5863}#
                                                                   (reverse
                                                                     #{rreq\ 5823}#)
                                                                   '()
                                                                   '()))
                                                               #{tmp\ 5855}#)
                                                        ((lambda (#{tmp\ 5864}#)
                                                           (if (if #{tmp\ 5864}#
                                                                 (apply (lambda (#{r\ 5866}#)
                                                                          (#{id?\ 5004}#
                                                                            #{r\ 5866}#))
                                                                        #{tmp\ 5864}#)
                                                                 #f)
                                                             (apply (lambda (#{r\ 5868}#)
                                                                      (#{rest\ 5631}#
                                                                        #{r\ 5868}#
                                                                        (reverse
                                                                          #{rreq\ 5823}#)
                                                                        '()
                                                                        '()))
                                                                    #{tmp\ 5864}#)
                                                             ((lambda (#{else\ 5870}#)
                                                                (syntax-violation
                                                                  'lambda*
                                                                  "invalid argument list"
                                                                  #{orig-args\ 5622}#
                                                                  #{args\ 5822}#))
                                                              #{tmp\ 5826}#)))
                                                         (list #{tmp\ 5826}#))))
                                                    ($sc-dispatch
                                                      #{tmp\ 5826}#
                                                      '(any any)))))
                                               ($sc-dispatch
                                                 #{tmp\ 5826}#
                                                 '(any . any)))))
                                          ($sc-dispatch
                                            #{tmp\ 5826}#
                                            '(any . any)))))
                                     ($sc-dispatch
                                       #{tmp\ 5826}#
                                       '(any . any)))))
                                ($sc-dispatch #{tmp\ 5826}# (quote ()))))
                             #{args\ 5822}#))))
                 (#{req\ 5625}# #{orig-args\ 5622}# (quote ())))))
           (#{chi-simple-lambda\ 5109}#
             (lambda (#{e\ 5871}#
                      #{r\ 5872}#
                      #{w\ 5873}#
                      #{s\ 5874}#
                      #{mod\ 5875}#
                      #{req\ 5876}#
                      #{rest\ 5877}#
                      #{meta\ 5878}#
                      #{body\ 5879}#)
               (let ((#{ids\ 5891}#
                       (if #{rest\ 5877}#
                         (append #{req\ 5876}# (list #{rest\ 5877}#))
                         #{req\ 5876}#)))
                 (let ((#{vars\ 5893}#
                         (map #{gen-var\ 5117}# #{ids\ 5891}#)))
                   (let ((#{labels\ 5895}#
                           (#{gen-labels\ 5022}# #{ids\ 5891}#)))
                     (#{build-simple-lambda\ 4946}#
                       #{s\ 5874}#
                       (map syntax->datum #{req\ 5876}#)
                       (if #{rest\ 5877}#
                         (syntax->datum #{rest\ 5877}#)
                         #f)
                       #{vars\ 5893}#
                       #{meta\ 5878}#
                       (#{chi-body\ 5097}#
                         #{body\ 5879}#
                         (#{source-wrap\ 5075}#
                           #{e\ 5871}#
                           #{w\ 5873}#
                           #{s\ 5874}#
                           #{mod\ 5875}#)
                         (#{extend-var-env\ 4994}#
                           #{labels\ 5895}#
                           #{vars\ 5893}#
                           #{r\ 5872}#)
                         (#{make-binding-wrap\ 5051}#
                           #{ids\ 5891}#
                           #{labels\ 5895}#
                           #{w\ 5873}#)
                         #{mod\ 5875}#)))))))
           (#{lambda-formals\ 5107}#
             (lambda (#{orig-args\ 5898}#)
               (letrec ((#{check\ 5903}#
                          (lambda (#{req\ 5904}# #{rest\ 5905}#)
                            (if (#{distinct-bound-ids?\ 5069}#
                                  (if #{rest\ 5905}#
                                    (cons #{rest\ 5905}# #{req\ 5904}#)
                                    #{req\ 5904}#))
                              (values #{req\ 5904}# #f #{rest\ 5905}# #f)
                              (syntax-violation
                                'lambda
                                "duplicate identifier in argument list"
                                #{orig-args\ 5898}#))))
                        (#{req\ 5901}#
                          (lambda (#{args\ 5911}# #{rreq\ 5912}#)
                            ((lambda (#{tmp\ 5915}#)
                               ((lambda (#{tmp\ 5916}#)
                                  (if #{tmp\ 5916}#
                                    (apply (lambda ()
                                             (#{check\ 5903}#
                                               (reverse #{rreq\ 5912}#)
                                               #f))
                                           #{tmp\ 5916}#)
                                    ((lambda (#{tmp\ 5917}#)
                                       (if (if #{tmp\ 5917}#
                                             (apply (lambda (#{a\ 5920}#
                                                             #{b\ 5921}#)
                                                      (#{id?\ 5004}#
                                                        #{a\ 5920}#))
                                                    #{tmp\ 5917}#)
                                             #f)
                                         (apply (lambda (#{a\ 5924}#
                                                         #{b\ 5925}#)
                                                  (#{req\ 5901}#
                                                    #{b\ 5925}#
                                                    (cons #{a\ 5924}#
                                                          #{rreq\ 5912}#)))
                                                #{tmp\ 5917}#)
                                         ((lambda (#{tmp\ 5926}#)
                                            (if (if #{tmp\ 5926}#
                                                  (apply (lambda (#{r\ 5928}#)
                                                           (#{id?\ 5004}#
                                                             #{r\ 5928}#))
                                                         #{tmp\ 5926}#)
                                                  #f)
                                              (apply (lambda (#{r\ 5930}#)
                                                       (#{check\ 5903}#
                                                         (reverse
                                                           #{rreq\ 5912}#)
                                                         #{r\ 5930}#))
                                                     #{tmp\ 5926}#)
                                              ((lambda (#{else\ 5932}#)
                                                 (syntax-violation
                                                   'lambda
                                                   "invalid argument list"
                                                   #{orig-args\ 5898}#
                                                   #{args\ 5911}#))
                                               #{tmp\ 5915}#)))
                                          (list #{tmp\ 5915}#))))
                                     ($sc-dispatch
                                       #{tmp\ 5915}#
                                       '(any . any)))))
                                ($sc-dispatch #{tmp\ 5915}# (quote ()))))
                             #{args\ 5911}#))))
                 (#{req\ 5901}# #{orig-args\ 5898}# (quote ())))))
           (#{ellipsis?\ 5105}#
             (lambda (#{x\ 5933}#)
               (if (#{nonsymbol-id?\ 5002}# #{x\ 5933}#)
                 (#{free-id=?\ 5063}#
                   #{x\ 5933}#
                   '#(syntax-object
                      ...
                      ((top)
                       #(ribcage () () ())
                       #(ribcage () () ())
                       #(ribcage #(x) #((top)) #("i5934"))
                       #(ribcage
                         (lambda-var-list
                           gen-var
                           strip
                           chi-lambda-case
                           lambda*-formals
                           chi-simple-lambda
                           lambda-formals
                           ellipsis?
                           chi-void
                           eval-local-transformer
                           chi-local-syntax
                           chi-body
                           chi-macro
                           chi-application
                           chi-expr
                           chi
                           chi-top
                           syntax-type
                           chi-when-list
                           chi-install-global
                           chi-top-sequence
                           chi-sequence
                           source-wrap
                           wrap
                           bound-id-member?
                           distinct-bound-ids?
                           valid-bound-ids?
                           bound-id=?
                           free-id=?
                           id-var-name
                           same-marks?
                           join-marks
                           join-wraps
                           smart-append
                           make-binding-wrap
                           extend-ribcage!
                           make-empty-ribcage
                           new-mark
                           anti-mark
                           the-anti-mark
                           top-marked?
                           top-wrap
                           empty-wrap
                           set-ribcage-labels!
                           set-ribcage-marks!
                           set-ribcage-symnames!
                           ribcage-labels
                           ribcage-marks
                           ribcage-symnames
                           ribcage?
                           make-ribcage
                           gen-labels
                           gen-label
                           make-rename
                           rename-marks
                           rename-new
                           rename-old
                           subst-rename?
                           wrap-subst
                           wrap-marks
                           make-wrap
                           id-sym-name&marks
                           id-sym-name
                           id?
                           nonsymbol-id?
                           global-extend
                           lookup
                           macros-only-env
                           extend-var-env
                           extend-env
                           null-env
                           binding-value
                           binding-type
                           make-binding
                           arg-check
                           source-annotation
                           no-source
                           set-syntax-object-module!
                           set-syntax-object-wrap!
                           set-syntax-object-expression!
                           syntax-object-module
                           syntax-object-wrap
                           syntax-object-expression
                           syntax-object?
                           make-syntax-object
                           build-lexical-var
                           build-letrec
                           build-named-let
                           build-let
                           build-sequence
                           build-data
                           build-primref
                           build-lambda-case
                           build-case-lambda
                           build-simple-lambda
                           build-global-definition
                           maybe-name-value!
                           build-global-assignment
                           build-global-reference
                           analyze-variable
                           build-lexical-assignment
                           build-lexical-reference
                           build-dynlet
                           build-conditional
                           build-application
                           build-void
                           decorate-source
                           get-global-definition-hook
                           put-global-definition-hook
                           gensym-hook
                           local-eval-hook
                           top-level-eval-hook
                           fx<
                           fx=
                           fx-
                           fx+
                           *mode*
                           noexpand)
                         ((top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top))
                         ("i5118"
                          "i5116"
                          "i5114"
                          "i5112"
                          "i5110"
                          "i5108"
                          "i5106"
                          "i5104"
                          "i5102"
                          "i5100"
                          "i5098"
                          "i5096"
                          "i5094"
                          "i5092"
                          "i5090"
                          "i5088"
                          "i5086"
                          "i5084"
                          "i5082"
                          "i5080"
                          "i5078"
                          "i5076"
                          "i5074"
                          "i5072"
                          "i5070"
                          "i5068"
                          "i5066"
                          "i5064"
                          "i5062"
                          "i5060"
                          "i5058"
                          "i5056"
                          "i5054"
                          "i5052"
                          "i5050"
                          "i5048"
                          "i5047"
                          "i5046"
                          "i5044"
                          "i5043"
                          "i5042"
                          "i5041"
                          "i5040"
                          "i5038"
                          "i5036"
                          "i5034"
                          "i5032"
                          "i5030"
                          "i5028"
                          "i5026"
                          "i5024"
                          "i5021"
                          "i5019"
                          "i5018"
                          "i5017"
                          "i5016"
                          "i5015"
                          "i5014"
                          "i5012"
                          "i5010"
                          "i5008"
                          "i5006"
                          "i5005"
                          "i5003"
                          "i5001"
                          "i4999"
                          "i4997"
                          "i4995"
                          "i4993"
                          "i4991"
                          "i4990"
                          "i4988"
                          "i4986"
                          "i4985"
                          "i4984"
                          "i4982"
                          "i4981"
                          "i4979"
                          "i4977"
                          "i4975"
                          "i4973"
                          "i4971"
                          "i4969"
                          "i4967"
                          "i4965"
                          "i4963"
                          "i4961"
                          "i4959"
                          "i4957"
                          "i4955"
                          "i4953"
                          "i4951"
                          "i4949"
                          "i4947"
                          "i4945"
                          "i4943"
                          "i4941"
                          "i4939"
                          "i4937"
                          "i4935"
                          "i4933"
                          "i4931"
                          "i4929"
                          "i4927"
                          "i4925"
                          "i4923"
                          "i4921"
                          "i4919"
                          "i4917"
                          "i4916"
                          "i4914"
                          "i4912"
                          "i4910"
                          "i4908"
                          "i4906"
                          "i4904"
                          "i4902"
                          "i4900"))
                       #(ribcage
                         (define-structure and-map*)
                         ((top) (top))
                         ("i4803" "i4801")))
                      (hygiene guile)))
                 #f)))
           (#{chi-void\ 5103}#
             (lambda () (#{build-void\ 4924}# #f)))
           (#{eval-local-transformer\ 5101}#
             (lambda (#{expanded\ 5938}# #{mod\ 5939}#)
               (let ((#{p\ 5943}#
                       (#{local-eval-hook\ 4915}#
                         #{expanded\ 5938}#
                         #{mod\ 5939}#)))
                 (if (procedure? #{p\ 5943}#)
                   (cons #{p\ 5943}# (module-name (current-module)))
                   (syntax-violation
                     #f
                     "nonprocedure transformer"
                     #{p\ 5943}#)))))
           (#{chi-local-syntax\ 5099}#
             (lambda (#{rec?\ 5944}#
                      #{e\ 5945}#
                      #{r\ 5946}#
                      #{w\ 5947}#
                      #{s\ 5948}#
                      #{mod\ 5949}#
                      #{k\ 5950}#)
               ((lambda (#{tmp\ 5958}#)
                  ((lambda (#{tmp\ 5959}#)
                     (if #{tmp\ 5959}#
                       (apply (lambda (#{_\ 5965}#
                                       #{id\ 5966}#
                                       #{val\ 5967}#
                                       #{e1\ 5968}#
                                       #{e2\ 5969}#)
                                (let ((#{ids\ 5971}# #{id\ 5966}#))
                                  (if (not (#{valid-bound-ids?\ 5067}#
                                             #{ids\ 5971}#))
                                    (syntax-violation
                                      #f
                                      "duplicate bound keyword"
                                      #{e\ 5945}#)
                                    (let ((#{labels\ 5974}#
                                            (#{gen-labels\ 5022}#
                                              #{ids\ 5971}#)))
                                      (let ((#{new-w\ 5976}#
                                              (#{make-binding-wrap\ 5051}#
                                                #{ids\ 5971}#
                                                #{labels\ 5974}#
                                                #{w\ 5947}#)))
                                        (#{k\ 5950}#
                                          (cons #{e1\ 5968}# #{e2\ 5969}#)
                                          (#{extend-env\ 4992}#
                                            #{labels\ 5974}#
                                            (let ((#{w\ 5980}#
                                                    (if #{rec?\ 5944}#
                                                      #{new-w\ 5976}#
                                                      #{w\ 5947}#))
                                                  (#{trans-r\ 5981}#
                                                    (#{macros-only-env\ 4996}#
                                                      #{r\ 5946}#)))
                                              (map (lambda (#{x\ 5982}#)
                                                     (cons 'macro
                                                           (#{eval-local-transformer\ 5101}#
                                                             (#{chi\ 5089}#
                                                               #{x\ 5982}#
                                                               #{trans-r\ 5981}#
                                                               #{w\ 5980}#
                                                               #{mod\ 5949}#)
                                                             #{mod\ 5949}#)))
                                                   #{val\ 5967}#))
                                            #{r\ 5946}#)
                                          #{new-w\ 5976}#
                                          #{s\ 5948}#
                                          #{mod\ 5949}#))))))
                              #{tmp\ 5959}#)
                       ((lambda (#{_\ 5987}#)
                          (syntax-violation
                            #f
                            "bad local syntax definition"
                            (#{source-wrap\ 5075}#
                              #{e\ 5945}#
                              #{w\ 5947}#
                              #{s\ 5948}#
                              #{mod\ 5949}#)))
                        #{tmp\ 5958}#)))
                   ($sc-dispatch
                     #{tmp\ 5958}#
                     '(any #(each (any any)) any . each-any))))
                #{e\ 5945}#)))
           (#{chi-body\ 5097}#
             (lambda (#{body\ 5988}#
                      #{outer-form\ 5989}#
                      #{r\ 5990}#
                      #{w\ 5991}#
                      #{mod\ 5992}#)
               (let ((#{r\ 6000}#
                       (cons '("placeholder" placeholder)
                             #{r\ 5990}#)))
                 (let ((#{ribcage\ 6002}#
                         (#{make-ribcage\ 5025}#
                           '()
                           '()
                           '())))
                   (let ((#{w\ 6005}#
                           (#{make-wrap\ 5009}#
                             (#{wrap-marks\ 5011}# #{w\ 5991}#)
                             (cons #{ribcage\ 6002}#
                                   (#{wrap-subst\ 5013}# #{w\ 5991}#)))))
                     (letrec ((#{parse\ 6014}#
                                (lambda (#{body\ 6015}#
                                         #{ids\ 6016}#
                                         #{labels\ 6017}#
                                         #{var-ids\ 6018}#
                                         #{vars\ 6019}#
                                         #{vals\ 6020}#
                                         #{bindings\ 6021}#)
                                  (if (null? #{body\ 6015}#)
                                    (syntax-violation
                                      #f
                                      "no expressions in body"
                                      #{outer-form\ 5989}#)
                                    (let ((#{e\ 6026}# (cdar #{body\ 6015}#))
                                          (#{er\ 6027}# (caar #{body\ 6015}#)))
                                      (call-with-values
                                        (lambda ()
                                          (#{syntax-type\ 5085}#
                                            #{e\ 6026}#
                                            #{er\ 6027}#
                                            '(())
                                            (#{source-annotation\ 4983}#
                                              #{er\ 6027}#)
                                            #{ribcage\ 6002}#
                                            #{mod\ 5992}#
                                            #f))
                                        (lambda (#{type\ 6029}#
                                                 #{value\ 6030}#
                                                 #{e\ 6031}#
                                                 #{w\ 6032}#
                                                 #{s\ 6033}#
                                                 #{mod\ 6034}#)
                                          (if (memv #{type\ 6029}#
                                                    '(define-form))
                                            (let ((#{id\ 6044}#
                                                    (#{wrap\ 5073}#
                                                      #{value\ 6030}#
                                                      #{w\ 6032}#
                                                      #{mod\ 6034}#))
                                                  (#{label\ 6045}#
                                                    (#{gen-label\ 5020}#)))
                                              (let ((#{var\ 6047}#
                                                      (#{gen-var\ 5117}#
                                                        #{id\ 6044}#)))
                                                (begin
                                                  (#{extend-ribcage!\ 5049}#
                                                    #{ribcage\ 6002}#
                                                    #{id\ 6044}#
                                                    #{label\ 6045}#)
                                                  (#{parse\ 6014}#
                                                    (cdr #{body\ 6015}#)
                                                    (cons #{id\ 6044}#
                                                          #{ids\ 6016}#)
                                                    (cons #{label\ 6045}#
                                                          #{labels\ 6017}#)
                                                    (cons #{id\ 6044}#
                                                          #{var-ids\ 6018}#)
                                                    (cons #{var\ 6047}#
                                                          #{vars\ 6019}#)
                                                    (cons (cons #{er\ 6027}#
                                                                (#{wrap\ 5073}#
                                                                  #{e\ 6031}#
                                                                  #{w\ 6032}#
                                                                  #{mod\ 6034}#))
                                                          #{vals\ 6020}#)
                                                    (cons (cons 'lexical
                                                                #{var\ 6047}#)
                                                          #{bindings\ 6021}#)))))
                                            (if (memv #{type\ 6029}#
                                                      '(define-syntax-form))
                                              (let ((#{id\ 6052}#
                                                      (#{wrap\ 5073}#
                                                        #{value\ 6030}#
                                                        #{w\ 6032}#
                                                        #{mod\ 6034}#))
                                                    (#{label\ 6053}#
                                                      (#{gen-label\ 5020}#)))
                                                (begin
                                                  (#{extend-ribcage!\ 5049}#
                                                    #{ribcage\ 6002}#
                                                    #{id\ 6052}#
                                                    #{label\ 6053}#)
                                                  (#{parse\ 6014}#
                                                    (cdr #{body\ 6015}#)
                                                    (cons #{id\ 6052}#
                                                          #{ids\ 6016}#)
                                                    (cons #{label\ 6053}#
                                                          #{labels\ 6017}#)
                                                    #{var-ids\ 6018}#
                                                    #{vars\ 6019}#
                                                    #{vals\ 6020}#
                                                    (cons (cons 'macro
                                                                (cons #{er\ 6027}#
                                                                      (#{wrap\ 5073}#
                                                                        #{e\ 6031}#
                                                                        #{w\ 6032}#
                                                                        #{mod\ 6034}#)))
                                                          #{bindings\ 6021}#))))
                                              (if (memv #{type\ 6029}#
                                                        '(begin-form))
                                                ((lambda (#{tmp\ 6056}#)
                                                   ((lambda (#{tmp\ 6057}#)
                                                      (if #{tmp\ 6057}#
                                                        (apply (lambda (#{_\ 6060}#
                                                                        #{e1\ 6061}#)
                                                                 (#{parse\ 6014}#
                                                                   (letrec ((#{f\ 6064}#
                                                                              (lambda (#{forms\ 6065}#)
                                                                                (if (null? #{forms\ 6065}#)
                                                                                  (cdr #{body\ 6015}#)
                                                                                  (cons (cons #{er\ 6027}#
                                                                                              (#{wrap\ 5073}#
                                                                                                (car #{forms\ 6065}#)
                                                                                                #{w\ 6032}#
                                                                                                #{mod\ 6034}#))
                                                                                        (#{f\ 6064}#
                                                                                          (cdr #{forms\ 6065}#)))))))
                                                                     (#{f\ 6064}#
                                                                       #{e1\ 6061}#))
                                                                   #{ids\ 6016}#
                                                                   #{labels\ 6017}#
                                                                   #{var-ids\ 6018}#
                                                                   #{vars\ 6019}#
                                                                   #{vals\ 6020}#
                                                                   #{bindings\ 6021}#))
                                                               #{tmp\ 6057}#)
                                                        (syntax-violation
                                                          #f
                                                          "source expression failed to match any pattern"
                                                          #{tmp\ 6056}#)))
                                                    ($sc-dispatch
                                                      #{tmp\ 6056}#
                                                      '(any . each-any))))
                                                 #{e\ 6031}#)
                                                (if (memv #{type\ 6029}#
                                                          '(local-syntax-form))
                                                  (#{chi-local-syntax\ 5099}#
                                                    #{value\ 6030}#
                                                    #{e\ 6031}#
                                                    #{er\ 6027}#
                                                    #{w\ 6032}#
                                                    #{s\ 6033}#
                                                    #{mod\ 6034}#
                                                    (lambda (#{forms\ 6068}#
                                                             #{er\ 6069}#
                                                             #{w\ 6070}#
                                                             #{s\ 6071}#
                                                             #{mod\ 6072}#)
                                                      (#{parse\ 6014}#
                                                        (letrec ((#{f\ 6080}#
                                                                   (lambda (#{forms\ 6081}#)
                                                                     (if (null? #{forms\ 6081}#)
                                                                       (cdr #{body\ 6015}#)
                                                                       (cons (cons #{er\ 6069}#
                                                                                   (#{wrap\ 5073}#
                                                                                     (car #{forms\ 6081}#)
                                                                                     #{w\ 6070}#
                                                                                     #{mod\ 6072}#))
                                                                             (#{f\ 6080}#
                                                                               (cdr #{forms\ 6081}#)))))))
                                                          (#{f\ 6080}#
                                                            #{forms\ 6068}#))
                                                        #{ids\ 6016}#
                                                        #{labels\ 6017}#
                                                        #{var-ids\ 6018}#
                                                        #{vars\ 6019}#
                                                        #{vals\ 6020}#
                                                        #{bindings\ 6021}#)))
                                                  (if (null? #{ids\ 6016}#)
                                                    (#{build-sequence\ 4956}#
                                                      #f
                                                      (map (lambda (#{x\ 6084}#)
                                                             (#{chi\ 5089}#
                                                               (cdr #{x\ 6084}#)
                                                               (car #{x\ 6084}#)
                                                               '(())
                                                               #{mod\ 6034}#))
                                                           (cons (cons #{er\ 6027}#
                                                                       (#{source-wrap\ 5075}#
                                                                         #{e\ 6031}#
                                                                         #{w\ 6032}#
                                                                         #{s\ 6033}#
                                                                         #{mod\ 6034}#))
                                                                 (cdr #{body\ 6015}#))))
                                                    (begin
                                                      (if (not (#{valid-bound-ids?\ 5067}#
                                                                 #{ids\ 6016}#))
                                                        (syntax-violation
                                                          #f
                                                          "invalid or duplicate identifier in definition"
                                                          #{outer-form\ 5989}#))
                                                      (letrec ((#{loop\ 6091}#
                                                                 (lambda (#{bs\ 6092}#
                                                                          #{er-cache\ 6093}#
                                                                          #{r-cache\ 6094}#)
                                                                   (if (not (null? #{bs\ 6092}#))
                                                                     (let ((#{b\ 6097}#
                                                                             (car #{bs\ 6092}#)))
                                                                       (if (eq? (car #{b\ 6097}#)
                                                                                'macro)
                                                                         (let ((#{er\ 6100}#
                                                                                 (cadr #{b\ 6097}#)))
                                                                           (let ((#{r-cache\ 6102}#
                                                                                   (if (eq? #{er\ 6100}#
                                                                                            #{er-cache\ 6093}#)
                                                                                     #{r-cache\ 6094}#
                                                                                     (#{macros-only-env\ 4996}#
                                                                                       #{er\ 6100}#))))
                                                                             (begin
                                                                               (set-cdr!
                                                                                 #{b\ 6097}#
                                                                                 (#{eval-local-transformer\ 5101}#
                                                                                   (#{chi\ 5089}#
                                                                                     (cddr #{b\ 6097}#)
                                                                                     #{r-cache\ 6102}#
                                                                                     '(())
                                                                                     #{mod\ 6034}#)
                                                                                   #{mod\ 6034}#))
                                                                               (#{loop\ 6091}#
                                                                                 (cdr #{bs\ 6092}#)
                                                                                 #{er\ 6100}#
                                                                                 #{r-cache\ 6102}#))))
                                                                         (#{loop\ 6091}#
                                                                           (cdr #{bs\ 6092}#)
                                                                           #{er-cache\ 6093}#
                                                                           #{r-cache\ 6094}#)))))))
                                                        (#{loop\ 6091}#
                                                          #{bindings\ 6021}#
                                                          #f
                                                          #f))
                                                      (set-cdr!
                                                        #{r\ 6000}#
                                                        (#{extend-env\ 4992}#
                                                          #{labels\ 6017}#
                                                          #{bindings\ 6021}#
                                                          (cdr #{r\ 6000}#)))
                                                      (#{build-letrec\ 4962}#
                                                        #f
                                                        (map syntax->datum
                                                             #{var-ids\ 6018}#)
                                                        #{vars\ 6019}#
                                                        (map (lambda (#{x\ 6105}#)
                                                               (#{chi\ 5089}#
                                                                 (cdr #{x\ 6105}#)
                                                                 (car #{x\ 6105}#)
                                                                 '(())
                                                                 #{mod\ 6034}#))
                                                             #{vals\ 6020}#)
                                                        (#{build-sequence\ 4956}#
                                                          #f
                                                          (map (lambda (#{x\ 6109}#)
                                                                 (#{chi\ 5089}#
                                                                   (cdr #{x\ 6109}#)
                                                                   (car #{x\ 6109}#)
                                                                   '(())
                                                                   #{mod\ 6034}#))
                                                               (cons (cons #{er\ 6027}#
                                                                           (#{source-wrap\ 5075}#
                                                                             #{e\ 6031}#
                                                                             #{w\ 6032}#
                                                                             #{s\ 6033}#
                                                                             #{mod\ 6034}#))
                                                                     (cdr #{body\ 6015}#))))))))))))))))))
                       (#{parse\ 6014}#
                         (map (lambda (#{x\ 6022}#)
                                (cons #{r\ 6000}#
                                      (#{wrap\ 5073}#
                                        #{x\ 6022}#
                                        #{w\ 6005}#
                                        #{mod\ 5992}#)))
                              #{body\ 5988}#)
                         '()
                         '()
                         '()
                         '()
                         '()
                         '())))))))
           (#{chi-macro\ 5095}#
             (lambda (#{p\ 6112}#
                      #{e\ 6113}#
                      #{r\ 6114}#
                      #{w\ 6115}#
                      #{rib\ 6116}#
                      #{mod\ 6117}#)
               (letrec ((#{rebuild-macro-output\ 6125}#
                          (lambda (#{x\ 6126}# #{m\ 6127}#)
                            (if (pair? #{x\ 6126}#)
                              (cons (#{rebuild-macro-output\ 6125}#
                                      (car #{x\ 6126}#)
                                      #{m\ 6127}#)
                                    (#{rebuild-macro-output\ 6125}#
                                      (cdr #{x\ 6126}#)
                                      #{m\ 6127}#))
                              (if (#{syntax-object?\ 4968}# #{x\ 6126}#)
                                (let ((#{w\ 6135}#
                                        (#{syntax-object-wrap\ 4972}#
                                          #{x\ 6126}#)))
                                  (let ((#{ms\ 6138}#
                                          (#{wrap-marks\ 5011}# #{w\ 6135}#))
                                        (#{s\ 6139}#
                                          (#{wrap-subst\ 5013}# #{w\ 6135}#)))
                                    (if (if (pair? #{ms\ 6138}#)
                                          (eq? (car #{ms\ 6138}#) #f)
                                          #f)
                                      (#{make-syntax-object\ 4966}#
                                        (#{syntax-object-expression\ 4970}#
                                          #{x\ 6126}#)
                                        (#{make-wrap\ 5009}#
                                          (cdr #{ms\ 6138}#)
                                          (if #{rib\ 6116}#
                                            (cons #{rib\ 6116}#
                                                  (cdr #{s\ 6139}#))
                                            (cdr #{s\ 6139}#)))
                                        (#{syntax-object-module\ 4974}#
                                          #{x\ 6126}#))
                                      (#{make-syntax-object\ 4966}#
                                        (#{syntax-object-expression\ 4970}#
                                          #{x\ 6126}#)
                                        (#{make-wrap\ 5009}#
                                          (cons #{m\ 6127}# #{ms\ 6138}#)
                                          (if #{rib\ 6116}#
                                            (cons #{rib\ 6116}#
                                                  (cons 'shift
                                                        #{s\ 6139}#))
                                            (cons (quote shift) #{s\ 6139}#)))
                                        (cons 'hygiene
                                              (cdr #{p\ 6112}#))))))
                                (if (vector? #{x\ 6126}#)
                                  (let ((#{n\ 6147}#
                                          (vector-length #{x\ 6126}#)))
                                    (let ((#{v\ 6149}#
                                            (make-vector #{n\ 6147}#)))
                                      (letrec ((#{loop\ 6152}#
                                                 (lambda (#{i\ 6153}#)
                                                   (if (#{fx=\ 4909}#
                                                         #{i\ 6153}#
                                                         #{n\ 6147}#)
                                                     (begin
                                                       (if #f #f)
                                                       #{v\ 6149}#)
                                                     (begin
                                                       (vector-set!
                                                         #{v\ 6149}#
                                                         #{i\ 6153}#
                                                         (#{rebuild-macro-output\ 6125}#
                                                           (vector-ref
                                                             #{x\ 6126}#
                                                             #{i\ 6153}#)
                                                           #{m\ 6127}#))
                                                       (#{loop\ 6152}#
                                                         (#{fx+\ 4905}#
                                                           #{i\ 6153}#
                                                           1)))))))
                                        (#{loop\ 6152}# 0))))
                                  (if (symbol? #{x\ 6126}#)
                                    (syntax-violation
                                      #f
                                      "encountered raw symbol in macro output"
                                      (#{source-wrap\ 5075}#
                                        #{e\ 6113}#
                                        #{w\ 6115}#
                                        (#{wrap-subst\ 5013}# #{w\ 6115}#)
                                        #{mod\ 6117}#)
                                      #{x\ 6126}#)
                                    #{x\ 6126}#)))))))
                 (#{rebuild-macro-output\ 6125}#
                   ((car #{p\ 6112}#)
                    (#{wrap\ 5073}#
                      #{e\ 6113}#
                      (#{anti-mark\ 5045}# #{w\ 6115}#)
                      #{mod\ 6117}#))
                   (gensym "m")))))
           (#{chi-application\ 5093}#
             (lambda (#{x\ 6160}#
                      #{e\ 6161}#
                      #{r\ 6162}#
                      #{w\ 6163}#
                      #{s\ 6164}#
                      #{mod\ 6165}#)
               ((lambda (#{tmp\ 6172}#)
                  ((lambda (#{tmp\ 6173}#)
                     (if #{tmp\ 6173}#
                       (apply (lambda (#{e0\ 6176}# #{e1\ 6177}#)
                                (#{build-application\ 4926}#
                                  #{s\ 6164}#
                                  #{x\ 6160}#
                                  (map (lambda (#{e\ 6178}#)
                                         (#{chi\ 5089}#
                                           #{e\ 6178}#
                                           #{r\ 6162}#
                                           #{w\ 6163}#
                                           #{mod\ 6165}#))
                                       #{e1\ 6177}#)))
                              #{tmp\ 6173}#)
                       (syntax-violation
                         #f
                         "source expression failed to match any pattern"
                         #{tmp\ 6172}#)))
                   ($sc-dispatch
                     #{tmp\ 6172}#
                     '(any . each-any))))
                #{e\ 6161}#)))
           (#{chi-expr\ 5091}#
             (lambda (#{type\ 6181}#
                      #{value\ 6182}#
                      #{e\ 6183}#
                      #{r\ 6184}#
                      #{w\ 6185}#
                      #{s\ 6186}#
                      #{mod\ 6187}#)
               (if (memv #{type\ 6181}# (quote (lexical)))
                 (#{build-lexical-reference\ 4932}#
                   'value
                   #{s\ 6186}#
                   #{e\ 6183}#
                   #{value\ 6182}#)
                 (if (memv #{type\ 6181}# (quote (core core-form)))
                   (#{value\ 6182}#
                     #{e\ 6183}#
                     #{r\ 6184}#
                     #{w\ 6185}#
                     #{s\ 6186}#
                     #{mod\ 6187}#)
                   (if (memv #{type\ 6181}# (quote (module-ref)))
                     (call-with-values
                       (lambda ()
                         (#{value\ 6182}#
                           #{e\ 6183}#
                           #{r\ 6184}#
                           #{w\ 6185}#))
                       (lambda (#{e\ 6198}#
                                #{r\ 6199}#
                                #{w\ 6200}#
                                #{s\ 6201}#
                                #{mod\ 6202}#)
                         (#{chi\ 5089}#
                           #{e\ 6198}#
                           #{r\ 6199}#
                           #{w\ 6200}#
                           #{mod\ 6202}#)))
                     (if (memv #{type\ 6181}# (quote (lexical-call)))
                       (#{chi-application\ 5093}#
                         (#{build-lexical-reference\ 4932}#
                           'fun
                           (#{source-annotation\ 4983}# (car #{e\ 6183}#))
                           (car #{e\ 6183}#)
                           #{value\ 6182}#)
                         #{e\ 6183}#
                         #{r\ 6184}#
                         #{w\ 6185}#
                         #{s\ 6186}#
                         #{mod\ 6187}#)
                       (if (memv #{type\ 6181}# (quote (global-call)))
                         (#{chi-application\ 5093}#
                           (#{build-global-reference\ 4938}#
                             (#{source-annotation\ 4983}# (car #{e\ 6183}#))
                             (if (#{syntax-object?\ 4968}# #{value\ 6182}#)
                               (#{syntax-object-expression\ 4970}#
                                 #{value\ 6182}#)
                               #{value\ 6182}#)
                             (if (#{syntax-object?\ 4968}# #{value\ 6182}#)
                               (#{syntax-object-module\ 4974}# #{value\ 6182}#)
                               #{mod\ 6187}#))
                           #{e\ 6183}#
                           #{r\ 6184}#
                           #{w\ 6185}#
                           #{s\ 6186}#
                           #{mod\ 6187}#)
                         (if (memv #{type\ 6181}# (quote (constant)))
                           (#{build-data\ 4954}#
                             #{s\ 6186}#
                             (#{strip\ 5115}#
                               (#{source-wrap\ 5075}#
                                 #{e\ 6183}#
                                 #{w\ 6185}#
                                 #{s\ 6186}#
                                 #{mod\ 6187}#)
                               '(())))
                           (if (memv #{type\ 6181}# (quote (global)))
                             (#{build-global-reference\ 4938}#
                               #{s\ 6186}#
                               #{value\ 6182}#
                               #{mod\ 6187}#)
                             (if (memv #{type\ 6181}# (quote (call)))
                               (#{chi-application\ 5093}#
                                 (#{chi\ 5089}#
                                   (car #{e\ 6183}#)
                                   #{r\ 6184}#
                                   #{w\ 6185}#
                                   #{mod\ 6187}#)
                                 #{e\ 6183}#
                                 #{r\ 6184}#
                                 #{w\ 6185}#
                                 #{s\ 6186}#
                                 #{mod\ 6187}#)
                               (if (memv #{type\ 6181}# (quote (begin-form)))
                                 ((lambda (#{tmp\ 6215}#)
                                    ((lambda (#{tmp\ 6216}#)
                                       (if #{tmp\ 6216}#
                                         (apply (lambda (#{_\ 6220}#
                                                         #{e1\ 6221}#
                                                         #{e2\ 6222}#)
                                                  (#{chi-sequence\ 5077}#
                                                    (cons #{e1\ 6221}#
                                                          #{e2\ 6222}#)
                                                    #{r\ 6184}#
                                                    #{w\ 6185}#
                                                    #{s\ 6186}#
                                                    #{mod\ 6187}#))
                                                #{tmp\ 6216}#)
                                         (syntax-violation
                                           #f
                                           "source expression failed to match any pattern"
                                           #{tmp\ 6215}#)))
                                     ($sc-dispatch
                                       #{tmp\ 6215}#
                                       '(any any . each-any))))
                                  #{e\ 6183}#)
                                 (if (memv #{type\ 6181}#
                                           '(local-syntax-form))
                                   (#{chi-local-syntax\ 5099}#
                                     #{value\ 6182}#
                                     #{e\ 6183}#
                                     #{r\ 6184}#
                                     #{w\ 6185}#
                                     #{s\ 6186}#
                                     #{mod\ 6187}#
                                     #{chi-sequence\ 5077}#)
                                   (if (memv #{type\ 6181}#
                                             '(eval-when-form))
                                     ((lambda (#{tmp\ 6226}#)
                                        ((lambda (#{tmp\ 6227}#)
                                           (if #{tmp\ 6227}#
                                             (apply (lambda (#{_\ 6232}#
                                                             #{x\ 6233}#
                                                             #{e1\ 6234}#
                                                             #{e2\ 6235}#)
                                                      (let ((#{when-list\ 6237}#
                                                              (#{chi-when-list\ 5083}#
                                                                #{e\ 6183}#
                                                                #{x\ 6233}#
                                                                #{w\ 6185}#)))
                                                        (if (memq 'eval
                                                                  #{when-list\ 6237}#)
                                                          (#{chi-sequence\ 5077}#
                                                            (cons #{e1\ 6234}#
                                                                  #{e2\ 6235}#)
                                                            #{r\ 6184}#
                                                            #{w\ 6185}#
                                                            #{s\ 6186}#
                                                            #{mod\ 6187}#)
                                                          (#{chi-void\ 5103}#))))
                                                    #{tmp\ 6227}#)
                                             (syntax-violation
                                               #f
                                               "source expression failed to match any pattern"
                                               #{tmp\ 6226}#)))
                                         ($sc-dispatch
                                           #{tmp\ 6226}#
                                           '(any each-any any . each-any))))
                                      #{e\ 6183}#)
                                     (if (memv #{type\ 6181}#
                                               '(define-form
                                                  define-syntax-form))
                                       (syntax-violation
                                         #f
                                         "definition in expression context"
                                         #{e\ 6183}#
                                         (#{wrap\ 5073}#
                                           #{value\ 6182}#
                                           #{w\ 6185}#
                                           #{mod\ 6187}#))
                                       (if (memv #{type\ 6181}#
                                                 '(syntax))
                                         (syntax-violation
                                           #f
                                           "reference to pattern variable outside syntax form"
                                           (#{source-wrap\ 5075}#
                                             #{e\ 6183}#
                                             #{w\ 6185}#
                                             #{s\ 6186}#
                                             #{mod\ 6187}#))
                                         (if (memv #{type\ 6181}#
                                                   '(displaced-lexical))
                                           (syntax-violation
                                             #f
                                             "reference to identifier outside its scope"
                                             (#{source-wrap\ 5075}#
                                               #{e\ 6183}#
                                               #{w\ 6185}#
                                               #{s\ 6186}#
                                               #{mod\ 6187}#))
                                           (syntax-violation
                                             #f
                                             "unexpected syntax"
                                             (#{source-wrap\ 5075}#
                                               #{e\ 6183}#
                                               #{w\ 6185}#
                                               #{s\ 6186}#
                                               #{mod\ 6187}#))))))))))))))))))
           (#{chi\ 5089}#
             (lambda (#{e\ 6244}#
                      #{r\ 6245}#
                      #{w\ 6246}#
                      #{mod\ 6247}#)
               (call-with-values
                 (lambda ()
                   (#{syntax-type\ 5085}#
                     #{e\ 6244}#
                     #{r\ 6245}#
                     #{w\ 6246}#
                     (#{source-annotation\ 4983}# #{e\ 6244}#)
                     #f
                     #{mod\ 6247}#
                     #f))
                 (lambda (#{type\ 6252}#
                          #{value\ 6253}#
                          #{e\ 6254}#
                          #{w\ 6255}#
                          #{s\ 6256}#
                          #{mod\ 6257}#)
                   (#{chi-expr\ 5091}#
                     #{type\ 6252}#
                     #{value\ 6253}#
                     #{e\ 6254}#
                     #{r\ 6245}#
                     #{w\ 6255}#
                     #{s\ 6256}#
                     #{mod\ 6257}#)))))
           (#{chi-top\ 5087}#
             (lambda (#{e\ 6264}#
                      #{r\ 6265}#
                      #{w\ 6266}#
                      #{m\ 6267}#
                      #{esew\ 6268}#
                      #{mod\ 6269}#)
               (call-with-values
                 (lambda ()
                   (#{syntax-type\ 5085}#
                     #{e\ 6264}#
                     #{r\ 6265}#
                     #{w\ 6266}#
                     (#{source-annotation\ 4983}# #{e\ 6264}#)
                     #f
                     #{mod\ 6269}#
                     #f))
                 (lambda (#{type\ 6290}#
                          #{value\ 6291}#
                          #{e\ 6292}#
                          #{w\ 6293}#
                          #{s\ 6294}#
                          #{mod\ 6295}#)
                   (if (memv #{type\ 6290}# (quote (begin-form)))
                     ((lambda (#{tmp\ 6303}#)
                        ((lambda (#{tmp\ 6304}#)
                           (if #{tmp\ 6304}#
                             (apply (lambda (#{_\ 6306}#) (#{chi-void\ 5103}#))
                                    #{tmp\ 6304}#)
                             ((lambda (#{tmp\ 6307}#)
                                (if #{tmp\ 6307}#
                                  (apply (lambda (#{_\ 6311}#
                                                  #{e1\ 6312}#
                                                  #{e2\ 6313}#)
                                           (#{chi-top-sequence\ 5079}#
                                             (cons #{e1\ 6312}# #{e2\ 6313}#)
                                             #{r\ 6265}#
                                             #{w\ 6293}#
                                             #{s\ 6294}#
                                             #{m\ 6267}#
                                             #{esew\ 6268}#
                                             #{mod\ 6295}#))
                                         #{tmp\ 6307}#)
                                  (syntax-violation
                                    #f
                                    "source expression failed to match any pattern"
                                    #{tmp\ 6303}#)))
                              ($sc-dispatch
                                #{tmp\ 6303}#
                                '(any any . each-any)))))
                         ($sc-dispatch #{tmp\ 6303}# (quote (any)))))
                      #{e\ 6292}#)
                     (if (memv #{type\ 6290}# (quote (local-syntax-form)))
                       (#{chi-local-syntax\ 5099}#
                         #{value\ 6291}#
                         #{e\ 6292}#
                         #{r\ 6265}#
                         #{w\ 6293}#
                         #{s\ 6294}#
                         #{mod\ 6295}#
                         (lambda (#{body\ 6316}#
                                  #{r\ 6317}#
                                  #{w\ 6318}#
                                  #{s\ 6319}#
                                  #{mod\ 6320}#)
                           (#{chi-top-sequence\ 5079}#
                             #{body\ 6316}#
                             #{r\ 6317}#
                             #{w\ 6318}#
                             #{s\ 6319}#
                             #{m\ 6267}#
                             #{esew\ 6268}#
                             #{mod\ 6320}#)))
                       (if (memv #{type\ 6290}# (quote (eval-when-form)))
                         ((lambda (#{tmp\ 6327}#)
                            ((lambda (#{tmp\ 6328}#)
                               (if #{tmp\ 6328}#
                                 (apply (lambda (#{_\ 6333}#
                                                 #{x\ 6334}#
                                                 #{e1\ 6335}#
                                                 #{e2\ 6336}#)
                                          (let ((#{when-list\ 6339}#
                                                  (#{chi-when-list\ 5083}#
                                                    #{e\ 6292}#
                                                    #{x\ 6334}#
                                                    #{w\ 6293}#))
                                                (#{body\ 6340}#
                                                  (cons #{e1\ 6335}#
                                                        #{e2\ 6336}#)))
                                            (if (eq? #{m\ 6267}# (quote e))
                                              (if (memq 'eval
                                                        #{when-list\ 6339}#)
                                                (#{chi-top-sequence\ 5079}#
                                                  #{body\ 6340}#
                                                  #{r\ 6265}#
                                                  #{w\ 6293}#
                                                  #{s\ 6294}#
                                                  (if (memq 'expand
                                                            #{when-list\ 6339}#)
                                                    'c&e
                                                    'e)
                                                  '(eval)
                                                  #{mod\ 6295}#)
                                                (begin
                                                  (if (memq 'expand
                                                            #{when-list\ 6339}#)
                                                    (#{top-level-eval-hook\ 4913}#
                                                      (#{chi-top-sequence\ 5079}#
                                                        #{body\ 6340}#
                                                        #{r\ 6265}#
                                                        #{w\ 6293}#
                                                        #{s\ 6294}#
                                                        'e
                                                        '(eval)
                                                        #{mod\ 6295}#)
                                                      #{mod\ 6295}#))
                                                  (#{chi-void\ 5103}#)))
                                              (if (memq 'load
                                                        #{when-list\ 6339}#)
                                                (if (let ((#{t\ 6349}#
                                                            (memq 'compile
                                                                  #{when-list\ 6339}#)))
                                                      (if #{t\ 6349}#
                                                        #{t\ 6349}#
                                                        (let ((#{t\ 6352}#
                                                                (memq 'expand
                                                                      #{when-list\ 6339}#)))
                                                          (if #{t\ 6352}#
                                                            #{t\ 6352}#
                                                            (if (eq? #{m\ 6267}#
                                                                     'c&e)
                                                              (memq 'eval
                                                                    #{when-list\ 6339}#)
                                                              #f)))))
                                                  (#{chi-top-sequence\ 5079}#
                                                    #{body\ 6340}#
                                                    #{r\ 6265}#
                                                    #{w\ 6293}#
                                                    #{s\ 6294}#
                                                    'c&e
                                                    '(compile load)
                                                    #{mod\ 6295}#)
                                                  (if (memq #{m\ 6267}#
                                                            '(c c&e))
                                                    (#{chi-top-sequence\ 5079}#
                                                      #{body\ 6340}#
                                                      #{r\ 6265}#
                                                      #{w\ 6293}#
                                                      #{s\ 6294}#
                                                      'c
                                                      '(load)
                                                      #{mod\ 6295}#)
                                                    (#{chi-void\ 5103}#)))
                                                (if (let ((#{t\ 6360}#
                                                            (memq 'compile
                                                                  #{when-list\ 6339}#)))
                                                      (if #{t\ 6360}#
                                                        #{t\ 6360}#
                                                        (let ((#{t\ 6363}#
                                                                (memq 'expand
                                                                      #{when-list\ 6339}#)))
                                                          (if #{t\ 6363}#
                                                            #{t\ 6363}#
                                                            (if (eq? #{m\ 6267}#
                                                                     'c&e)
                                                              (memq 'eval
                                                                    #{when-list\ 6339}#)
                                                              #f)))))
                                                  (begin
                                                    (#{top-level-eval-hook\ 4913}#
                                                      (#{chi-top-sequence\ 5079}#
                                                        #{body\ 6340}#
                                                        #{r\ 6265}#
                                                        #{w\ 6293}#
                                                        #{s\ 6294}#
                                                        'e
                                                        '(eval)
                                                        #{mod\ 6295}#)
                                                      #{mod\ 6295}#)
                                                    (#{chi-void\ 5103}#))
                                                  (#{chi-void\ 5103}#))))))
                                        #{tmp\ 6328}#)
                                 (syntax-violation
                                   #f
                                   "source expression failed to match any pattern"
                                   #{tmp\ 6327}#)))
                             ($sc-dispatch
                               #{tmp\ 6327}#
                               '(any each-any any . each-any))))
                          #{e\ 6292}#)
                         (if (memv #{type\ 6290}#
                                   '(define-syntax-form))
                           (let ((#{n\ 6371}#
                                   (#{id-var-name\ 5061}#
                                     #{value\ 6291}#
                                     #{w\ 6293}#))
                                 (#{r\ 6372}#
                                   (#{macros-only-env\ 4996}# #{r\ 6265}#)))
                             (if (memv #{m\ 6267}# (quote (c)))
                               (if (memq (quote compile) #{esew\ 6268}#)
                                 (let ((#{e\ 6375}#
                                         (#{chi-install-global\ 5081}#
                                           #{n\ 6371}#
                                           (#{chi\ 5089}#
                                             #{e\ 6292}#
                                             #{r\ 6372}#
                                             #{w\ 6293}#
                                             #{mod\ 6295}#))))
                                   (begin
                                     (#{top-level-eval-hook\ 4913}#
                                       #{e\ 6375}#
                                       #{mod\ 6295}#)
                                     (if (memq (quote load) #{esew\ 6268}#)
                                       #{e\ 6375}#
                                       (#{chi-void\ 5103}#))))
                                 (if (memq (quote load) #{esew\ 6268}#)
                                   (#{chi-install-global\ 5081}#
                                     #{n\ 6371}#
                                     (#{chi\ 5089}#
                                       #{e\ 6292}#
                                       #{r\ 6372}#
                                       #{w\ 6293}#
                                       #{mod\ 6295}#))
                                   (#{chi-void\ 5103}#)))
                               (if (memv #{m\ 6267}# (quote (c&e)))
                                 (let ((#{e\ 6378}#
                                         (#{chi-install-global\ 5081}#
                                           #{n\ 6371}#
                                           (#{chi\ 5089}#
                                             #{e\ 6292}#
                                             #{r\ 6372}#
                                             #{w\ 6293}#
                                             #{mod\ 6295}#))))
                                   (begin
                                     (#{top-level-eval-hook\ 4913}#
                                       #{e\ 6378}#
                                       #{mod\ 6295}#)
                                     #{e\ 6378}#))
                                 (begin
                                   (if (memq (quote eval) #{esew\ 6268}#)
                                     (#{top-level-eval-hook\ 4913}#
                                       (#{chi-install-global\ 5081}#
                                         #{n\ 6371}#
                                         (#{chi\ 5089}#
                                           #{e\ 6292}#
                                           #{r\ 6372}#
                                           #{w\ 6293}#
                                           #{mod\ 6295}#))
                                       #{mod\ 6295}#))
                                   (#{chi-void\ 5103}#)))))
                           (if (memv #{type\ 6290}# (quote (define-form)))
                             (let ((#{n\ 6383}#
                                     (#{id-var-name\ 5061}#
                                       #{value\ 6291}#
                                       #{w\ 6293}#)))
                               (let ((#{type\ 6385}#
                                       (#{binding-type\ 4987}#
                                         (#{lookup\ 4998}#
                                           #{n\ 6383}#
                                           #{r\ 6265}#
                                           #{mod\ 6295}#))))
                                 (if (memv #{type\ 6385}#
                                           '(global core macro module-ref))
                                   (begin
                                     (if (if (memq #{m\ 6267}# (quote (c c&e)))
                                           (if (not (module-local-variable
                                                      (current-module)
                                                      #{n\ 6383}#))
                                             (current-module)
                                             #f)
                                           #f)
                                       (let ((#{old\ 6391}#
                                               (module-variable
                                                 (current-module)
                                                 #{n\ 6383}#)))
                                         (module-define!
                                           (current-module)
                                           #{n\ 6383}#
                                           (if (variable? #{old\ 6391}#)
                                             (variable-ref #{old\ 6391}#)
                                             #f))))
                                     (let ((#{x\ 6394}#
                                             (#{build-global-definition\ 4944}#
                                               #{s\ 6294}#
                                               #{n\ 6383}#
                                               (#{chi\ 5089}#
                                                 #{e\ 6292}#
                                                 #{r\ 6265}#
                                                 #{w\ 6293}#
                                                 #{mod\ 6295}#))))
                                       (begin
                                         (if (eq? #{m\ 6267}# (quote c&e))
                                           (#{top-level-eval-hook\ 4913}#
                                             #{x\ 6394}#
                                             #{mod\ 6295}#))
                                         #{x\ 6394}#)))
                                   (if (memv #{type\ 6385}#
                                             '(displaced-lexical))
                                     (syntax-violation
                                       #f
                                       "identifier out of context"
                                       #{e\ 6292}#
                                       (#{wrap\ 5073}#
                                         #{value\ 6291}#
                                         #{w\ 6293}#
                                         #{mod\ 6295}#))
                                     (syntax-violation
                                       #f
                                       "cannot define keyword at top level"
                                       #{e\ 6292}#
                                       (#{wrap\ 5073}#
                                         #{value\ 6291}#
                                         #{w\ 6293}#
                                         #{mod\ 6295}#))))))
                             (let ((#{x\ 6400}#
                                     (#{chi-expr\ 5091}#
                                       #{type\ 6290}#
                                       #{value\ 6291}#
                                       #{e\ 6292}#
                                       #{r\ 6265}#
                                       #{w\ 6293}#
                                       #{s\ 6294}#
                                       #{mod\ 6295}#)))
                               (begin
                                 (if (eq? #{m\ 6267}# (quote c&e))
                                   (#{top-level-eval-hook\ 4913}#
                                     #{x\ 6400}#
                                     #{mod\ 6295}#))
                                 #{x\ 6400}#)))))))))))
           (#{syntax-type\ 5085}#
             (lambda (#{e\ 6401}#
                      #{r\ 6402}#
                      #{w\ 6403}#
                      #{s\ 6404}#
                      #{rib\ 6405}#
                      #{mod\ 6406}#
                      #{for-car?\ 6407}#)
               (if (symbol? #{e\ 6401}#)
                 (let ((#{n\ 6419}#
                         (#{id-var-name\ 5061}# #{e\ 6401}# #{w\ 6403}#)))
                   (let ((#{b\ 6421}#
                           (#{lookup\ 4998}#
                             #{n\ 6419}#
                             #{r\ 6402}#
                             #{mod\ 6406}#)))
                     (let ((#{type\ 6423}#
                             (#{binding-type\ 4987}# #{b\ 6421}#)))
                       (if (memv #{type\ 6423}# (quote (lexical)))
                         (values
                           #{type\ 6423}#
                           (#{binding-value\ 4989}# #{b\ 6421}#)
                           #{e\ 6401}#
                           #{w\ 6403}#
                           #{s\ 6404}#
                           #{mod\ 6406}#)
                         (if (memv #{type\ 6423}# (quote (global)))
                           (values
                             #{type\ 6423}#
                             #{n\ 6419}#
                             #{e\ 6401}#
                             #{w\ 6403}#
                             #{s\ 6404}#
                             #{mod\ 6406}#)
                           (if (memv #{type\ 6423}# (quote (macro)))
                             (if #{for-car?\ 6407}#
                               (values
                                 #{type\ 6423}#
                                 (#{binding-value\ 4989}# #{b\ 6421}#)
                                 #{e\ 6401}#
                                 #{w\ 6403}#
                                 #{s\ 6404}#
                                 #{mod\ 6406}#)
                               (#{syntax-type\ 5085}#
                                 (#{chi-macro\ 5095}#
                                   (#{binding-value\ 4989}# #{b\ 6421}#)
                                   #{e\ 6401}#
                                   #{r\ 6402}#
                                   #{w\ 6403}#
                                   #{rib\ 6405}#
                                   #{mod\ 6406}#)
                                 #{r\ 6402}#
                                 '(())
                                 #{s\ 6404}#
                                 #{rib\ 6405}#
                                 #{mod\ 6406}#
                                 #f))
                             (values
                               #{type\ 6423}#
                               (#{binding-value\ 4989}# #{b\ 6421}#)
                               #{e\ 6401}#
                               #{w\ 6403}#
                               #{s\ 6404}#
                               #{mod\ 6406}#)))))))
                 (if (pair? #{e\ 6401}#)
                   (let ((#{first\ 6432}# (car #{e\ 6401}#)))
                     (call-with-values
                       (lambda ()
                         (#{syntax-type\ 5085}#
                           #{first\ 6432}#
                           #{r\ 6402}#
                           #{w\ 6403}#
                           #{s\ 6404}#
                           #{rib\ 6405}#
                           #{mod\ 6406}#
                           #t))
                       (lambda (#{ftype\ 6433}#
                                #{fval\ 6434}#
                                #{fe\ 6435}#
                                #{fw\ 6436}#
                                #{fs\ 6437}#
                                #{fmod\ 6438}#)
                         (if (memv #{ftype\ 6433}# (quote (lexical)))
                           (values
                             'lexical-call
                             #{fval\ 6434}#
                             #{e\ 6401}#
                             #{w\ 6403}#
                             #{s\ 6404}#
                             #{mod\ 6406}#)
                           (if (memv #{ftype\ 6433}# (quote (global)))
                             (values
                               'global-call
                               (#{make-syntax-object\ 4966}#
                                 #{fval\ 6434}#
                                 #{w\ 6403}#
                                 #{fmod\ 6438}#)
                               #{e\ 6401}#
                               #{w\ 6403}#
                               #{s\ 6404}#
                               #{mod\ 6406}#)
                             (if (memv #{ftype\ 6433}# (quote (macro)))
                               (#{syntax-type\ 5085}#
                                 (#{chi-macro\ 5095}#
                                   #{fval\ 6434}#
                                   #{e\ 6401}#
                                   #{r\ 6402}#
                                   #{w\ 6403}#
                                   #{rib\ 6405}#
                                   #{mod\ 6406}#)
                                 #{r\ 6402}#
                                 '(())
                                 #{s\ 6404}#
                                 #{rib\ 6405}#
                                 #{mod\ 6406}#
                                 #{for-car?\ 6407}#)
                               (if (memv #{ftype\ 6433}# (quote (module-ref)))
                                 (call-with-values
                                   (lambda ()
                                     (#{fval\ 6434}#
                                       #{e\ 6401}#
                                       #{r\ 6402}#
                                       #{w\ 6403}#))
                                   (lambda (#{e\ 6450}#
                                            #{r\ 6451}#
                                            #{w\ 6452}#
                                            #{s\ 6453}#
                                            #{mod\ 6454}#)
                                     (#{syntax-type\ 5085}#
                                       #{e\ 6450}#
                                       #{r\ 6451}#
                                       #{w\ 6452}#
                                       #{s\ 6453}#
                                       #{rib\ 6405}#
                                       #{mod\ 6454}#
                                       #{for-car?\ 6407}#)))
                                 (if (memv #{ftype\ 6433}# (quote (core)))
                                   (values
                                     'core-form
                                     #{fval\ 6434}#
                                     #{e\ 6401}#
                                     #{w\ 6403}#
                                     #{s\ 6404}#
                                     #{mod\ 6406}#)
                                   (if (memv #{ftype\ 6433}#
                                             '(local-syntax))
                                     (values
                                       'local-syntax-form
                                       #{fval\ 6434}#
                                       #{e\ 6401}#
                                       #{w\ 6403}#
                                       #{s\ 6404}#
                                       #{mod\ 6406}#)
                                     (if (memv #{ftype\ 6433}# (quote (begin)))
                                       (values
                                         'begin-form
                                         #f
                                         #{e\ 6401}#
                                         #{w\ 6403}#
                                         #{s\ 6404}#
                                         #{mod\ 6406}#)
                                       (if (memv #{ftype\ 6433}#
                                                 '(eval-when))
                                         (values
                                           'eval-when-form
                                           #f
                                           #{e\ 6401}#
                                           #{w\ 6403}#
                                           #{s\ 6404}#
                                           #{mod\ 6406}#)
                                         (if (memv #{ftype\ 6433}#
                                                   '(define))
                                           ((lambda (#{tmp\ 6465}#)
                                              ((lambda (#{tmp\ 6466}#)
                                                 (if (if #{tmp\ 6466}#
                                                       (apply (lambda (#{_\ 6470}#
                                                                       #{name\ 6471}#
                                                                       #{val\ 6472}#)
                                                                (#{id?\ 5004}#
                                                                  #{name\ 6471}#))
                                                              #{tmp\ 6466}#)
                                                       #f)
                                                   (apply (lambda (#{_\ 6476}#
                                                                   #{name\ 6477}#
                                                                   #{val\ 6478}#)
                                                            (values
                                                              'define-form
                                                              #{name\ 6477}#
                                                              #{val\ 6478}#
                                                              #{w\ 6403}#
                                                              #{s\ 6404}#
                                                              #{mod\ 6406}#))
                                                          #{tmp\ 6466}#)
                                                   ((lambda (#{tmp\ 6479}#)
                                                      (if (if #{tmp\ 6479}#
                                                            (apply (lambda (#{_\ 6485}#
                                                                            #{name\ 6486}#
                                                                            #{args\ 6487}#
                                                                            #{e1\ 6488}#
                                                                            #{e2\ 6489}#)
                                                                     (if (#{id?\ 5004}#
                                                                           #{name\ 6486}#)
                                                                       (#{valid-bound-ids?\ 5067}#
                                                                         (#{lambda-var-list\ 5119}#
                                                                           #{args\ 6487}#))
                                                                       #f))
                                                                   #{tmp\ 6479}#)
                                                            #f)
                                                        (apply (lambda (#{_\ 6497}#
                                                                        #{name\ 6498}#
                                                                        #{args\ 6499}#
                                                                        #{e1\ 6500}#
                                                                        #{e2\ 6501}#)
                                                                 (values
                                                                   'define-form
                                                                   (#{wrap\ 5073}#
                                                                     #{name\ 6498}#
                                                                     #{w\ 6403}#
                                                                     #{mod\ 6406}#)
                                                                   (#{decorate-source\ 4922}#
                                                                     (cons '#(syntax-object
                                                                              lambda
                                                                              ((top)
                                                                               #(ribcage
                                                                                 #(_
                                                                                   name
                                                                                   args
                                                                                   e1
                                                                                   e2)
                                                                                 #((top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top))
                                                                                 #("i6492"
                                                                                   "i6493"
                                                                                   "i6494"
                                                                                   "i6495"
                                                                                   "i6496"))
                                                                               #(ribcage
                                                                                 ()
                                                                                 ()
                                                                                 ())
                                                                               #(ribcage
                                                                                 ()
                                                                                 ()
                                                                                 ())
                                                                               #(ribcage
                                                                                 #(ftype
                                                                                   fval
                                                                                   fe
                                                                                   fw
                                                                                   fs
                                                                                   fmod)
                                                                                 #((top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top))
                                                                                 #("i6439"
                                                                                   "i6440"
                                                                                   "i6441"
                                                                                   "i6442"
                                                                                   "i6443"
                                                                                   "i6444"))
                                                                               #(ribcage
                                                                                 ()
                                                                                 ()
                                                                                 ())
                                                                               #(ribcage
                                                                                 #(first)
                                                                                 #((top))
                                                                                 #("i6431"))
                                                                               #(ribcage
                                                                                 ()
                                                                                 ()
                                                                                 ())
                                                                               #(ribcage
                                                                                 ()
                                                                                 ()
                                                                                 ())
                                                                               #(ribcage
                                                                                 ()
                                                                                 ()
                                                                                 ())
                                                                               #(ribcage
                                                                                 #(e
                                                                                   r
                                                                                   w
                                                                                   s
                                                                                   rib
                                                                                   mod
                                                                                   for-car?)
                                                                                 #((top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top))
                                                                                 #("i6408"
                                                                                   "i6409"
                                                                                   "i6410"
                                                                                   "i6411"
                                                                                   "i6412"
                                                                                   "i6413"
                                                                                   "i6414"))
                                                                               #(ribcage
                                                                                 (lambda-var-list
                                                                                   gen-var
                                                                                   strip
                                                                                   chi-lambda-case
                                                                                   lambda*-formals
                                                                                   chi-simple-lambda
                                                                                   lambda-formals
                                                                                   ellipsis?
                                                                                   chi-void
                                                                                   eval-local-transformer
                                                                                   chi-local-syntax
                                                                                   chi-body
                                                                                   chi-macro
                                                                                   chi-application
                                                                                   chi-expr
                                                                                   chi
                                                                                   chi-top
                                                                                   syntax-type
                                                                                   chi-when-list
                                                                                   chi-install-global
                                                                                   chi-top-sequence
                                                                                   chi-sequence
                                                                                   source-wrap
                                                                                   wrap
                                                                                   bound-id-member?
                                                                                   distinct-bound-ids?
                                                                                   valid-bound-ids?
                                                                                   bound-id=?
                                                                                   free-id=?
                                                                                   id-var-name
                                                                                   same-marks?
                                                                                   join-marks
                                                                                   join-wraps
                                                                                   smart-append
                                                                                   make-binding-wrap
                                                                                   extend-ribcage!
                                                                                   make-empty-ribcage
                                                                                   new-mark
                                                                                   anti-mark
                                                                                   the-anti-mark
                                                                                   top-marked?
                                                                                   top-wrap
                                                                                   empty-wrap
                                                                                   set-ribcage-labels!
                                                                                   set-ribcage-marks!
                                                                                   set-ribcage-symnames!
                                                                                   ribcage-labels
                                                                                   ribcage-marks
                                                                                   ribcage-symnames
                                                                                   ribcage?
                                                                                   make-ribcage
                                                                                   gen-labels
                                                                                   gen-label
                                                                                   make-rename
                                                                                   rename-marks
                                                                                   rename-new
                                                                                   rename-old
                                                                                   subst-rename?
                                                                                   wrap-subst
                                                                                   wrap-marks
                                                                                   make-wrap
                                                                                   id-sym-name&marks
                                                                                   id-sym-name
                                                                                   id?
                                                                                   nonsymbol-id?
                                                                                   global-extend
                                                                                   lookup
                                                                                   macros-only-env
                                                                                   extend-var-env
                                                                                   extend-env
                                                                                   null-env
                                                                                   binding-value
                                                                                   binding-type
                                                                                   make-binding
                                                                                   arg-check
                                                                                   source-annotation
                                                                                   no-source
                                                                                   set-syntax-object-module!
                                                                                   set-syntax-object-wrap!
                                                                                   set-syntax-object-expression!
                                                                                   syntax-object-module
                                                                                   syntax-object-wrap
                                                                                   syntax-object-expression
                                                                                   syntax-object?
                                                                                   make-syntax-object
                                                                                   build-lexical-var
                                                                                   build-letrec
                                                                                   build-named-let
                                                                                   build-let
                                                                                   build-sequence
                                                                                   build-data
                                                                                   build-primref
                                                                                   build-lambda-case
                                                                                   build-case-lambda
                                                                                   build-simple-lambda
                                                                                   build-global-definition
                                                                                   maybe-name-value!
                                                                                   build-global-assignment
                                                                                   build-global-reference
                                                                                   analyze-variable
                                                                                   build-lexical-assignment
                                                                                   build-lexical-reference
                                                                                   build-dynlet
                                                                                   build-conditional
                                                                                   build-application
                                                                                   build-void
                                                                                   decorate-source
                                                                                   get-global-definition-hook
                                                                                   put-global-definition-hook
                                                                                   gensym-hook
                                                                                   local-eval-hook
                                                                                   top-level-eval-hook
                                                                                   fx<
                                                                                   fx=
                                                                                   fx-
                                                                                   fx+
                                                                                   *mode*
                                                                                   noexpand)
                                                                                 ((top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top))
                                                                                 ("i5118"
                                                                                  "i5116"
                                                                                  "i5114"
                                                                                  "i5112"
                                                                                  "i5110"
                                                                                  "i5108"
                                                                                  "i5106"
                                                                                  "i5104"
                                                                                  "i5102"
                                                                                  "i5100"
                                                                                  "i5098"
                                                                                  "i5096"
                                                                                  "i5094"
                                                                                  "i5092"
                                                                                  "i5090"
                                                                                  "i5088"
                                                                                  "i5086"
                                                                                  "i5084"
                                                                                  "i5082"
                                                                                  "i5080"
                                                                                  "i5078"
                                                                                  "i5076"
                                                                                  "i5074"
                                                                                  "i5072"
                                                                                  "i5070"
                                                                                  "i5068"
                                                                                  "i5066"
                                                                                  "i5064"
                                                                                  "i5062"
                                                                                  "i5060"
                                                                                  "i5058"
                                                                                  "i5056"
                                                                                  "i5054"
                                                                                  "i5052"
                                                                                  "i5050"
                                                                                  "i5048"
                                                                                  "i5047"
                                                                                  "i5046"
                                                                                  "i5044"
                                                                                  "i5043"
                                                                                  "i5042"
                                                                                  "i5041"
                                                                                  "i5040"
                                                                                  "i5038"
                                                                                  "i5036"
                                                                                  "i5034"
                                                                                  "i5032"
                                                                                  "i5030"
                                                                                  "i5028"
                                                                                  "i5026"
                                                                                  "i5024"
                                                                                  "i5021"
                                                                                  "i5019"
                                                                                  "i5018"
                                                                                  "i5017"
                                                                                  "i5016"
                                                                                  "i5015"
                                                                                  "i5014"
                                                                                  "i5012"
                                                                                  "i5010"
                                                                                  "i5008"
                                                                                  "i5006"
                                                                                  "i5005"
                                                                                  "i5003"
                                                                                  "i5001"
                                                                                  "i4999"
                                                                                  "i4997"
                                                                                  "i4995"
                                                                                  "i4993"
                                                                                  "i4991"
                                                                                  "i4990"
                                                                                  "i4988"
                                                                                  "i4986"
                                                                                  "i4985"
                                                                                  "i4984"
                                                                                  "i4982"
                                                                                  "i4981"
                                                                                  "i4979"
                                                                                  "i4977"
                                                                                  "i4975"
                                                                                  "i4973"
                                                                                  "i4971"
                                                                                  "i4969"
                                                                                  "i4967"
                                                                                  "i4965"
                                                                                  "i4963"
                                                                                  "i4961"
                                                                                  "i4959"
                                                                                  "i4957"
                                                                                  "i4955"
                                                                                  "i4953"
                                                                                  "i4951"
                                                                                  "i4949"
                                                                                  "i4947"
                                                                                  "i4945"
                                                                                  "i4943"
                                                                                  "i4941"
                                                                                  "i4939"
                                                                                  "i4937"
                                                                                  "i4935"
                                                                                  "i4933"
                                                                                  "i4931"
                                                                                  "i4929"
                                                                                  "i4927"
                                                                                  "i4925"
                                                                                  "i4923"
                                                                                  "i4921"
                                                                                  "i4919"
                                                                                  "i4917"
                                                                                  "i4916"
                                                                                  "i4914"
                                                                                  "i4912"
                                                                                  "i4910"
                                                                                  "i4908"
                                                                                  "i4906"
                                                                                  "i4904"
                                                                                  "i4902"
                                                                                  "i4900"))
                                                                               #(ribcage
                                                                                 (define-structure
                                                                                   and-map*)
                                                                                 ((top)
                                                                                  (top))
                                                                                 ("i4803"
                                                                                  "i4801")))
                                                                              (hygiene
                                                                                guile))
                                                                           (#{wrap\ 5073}#
                                                                             (cons #{args\ 6499}#
                                                                                   (cons #{e1\ 6500}#
                                                                                         #{e2\ 6501}#))
                                                                             #{w\ 6403}#
                                                                             #{mod\ 6406}#))
                                                                     #{s\ 6404}#)
                                                                   '(())
                                                                   #{s\ 6404}#
                                                                   #{mod\ 6406}#))
                                                               #{tmp\ 6479}#)
                                                        ((lambda (#{tmp\ 6504}#)
                                                           (if (if #{tmp\ 6504}#
                                                                 (apply (lambda (#{_\ 6507}#
                                                                                 #{name\ 6508}#)
                                                                          (#{id?\ 5004}#
                                                                            #{name\ 6508}#))
                                                                        #{tmp\ 6504}#)
                                                                 #f)
                                                             (apply (lambda (#{_\ 6511}#
                                                                             #{name\ 6512}#)
                                                                      (values
                                                                        'define-form
                                                                        (#{wrap\ 5073}#
                                                                          #{name\ 6512}#
                                                                          #{w\ 6403}#
                                                                          #{mod\ 6406}#)
                                                                        '(#(syntax-object
                                                                            if
                                                                            ((top)
                                                                             #(ribcage
                                                                               #(_
                                                                                 name)
                                                                               #((top)
                                                                                 (top))
                                                                               #("i6509"
                                                                                 "i6510"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(ftype
                                                                                 fval
                                                                                 fe
                                                                                 fw
                                                                                 fs
                                                                                 fmod)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i6439"
                                                                                 "i6440"
                                                                                 "i6441"
                                                                                 "i6442"
                                                                                 "i6443"
                                                                                 "i6444"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(first)
                                                                               #((top))
                                                                               #("i6431"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(e
                                                                                 r
                                                                                 w
                                                                                 s
                                                                                 rib
                                                                                 mod
                                                                                 for-car?)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i6408"
                                                                                 "i6409"
                                                                                 "i6410"
                                                                                 "i6411"
                                                                                 "i6412"
                                                                                 "i6413"
                                                                                 "i6414"))
                                                                             #(ribcage
                                                                               (lambda-var-list
                                                                                 gen-var
                                                                                 strip
                                                                                 chi-lambda-case
                                                                                 lambda*-formals
                                                                                 chi-simple-lambda
                                                                                 lambda-formals
                                                                                 ellipsis?
                                                                                 chi-void
                                                                                 eval-local-transformer
                                                                                 chi-local-syntax
                                                                                 chi-body
                                                                                 chi-macro
                                                                                 chi-application
                                                                                 chi-expr
                                                                                 chi
                                                                                 chi-top
                                                                                 syntax-type
                                                                                 chi-when-list
                                                                                 chi-install-global
                                                                                 chi-top-sequence
                                                                                 chi-sequence
                                                                                 source-wrap
                                                                                 wrap
                                                                                 bound-id-member?
                                                                                 distinct-bound-ids?
                                                                                 valid-bound-ids?
                                                                                 bound-id=?
                                                                                 free-id=?
                                                                                 id-var-name
                                                                                 same-marks?
                                                                                 join-marks
                                                                                 join-wraps
                                                                                 smart-append
                                                                                 make-binding-wrap
                                                                                 extend-ribcage!
                                                                                 make-empty-ribcage
                                                                                 new-mark
                                                                                 anti-mark
                                                                                 the-anti-mark
                                                                                 top-marked?
                                                                                 top-wrap
                                                                                 empty-wrap
                                                                                 set-ribcage-labels!
                                                                                 set-ribcage-marks!
                                                                                 set-ribcage-symnames!
                                                                                 ribcage-labels
                                                                                 ribcage-marks
                                                                                 ribcage-symnames
                                                                                 ribcage?
                                                                                 make-ribcage
                                                                                 gen-labels
                                                                                 gen-label
                                                                                 make-rename
                                                                                 rename-marks
                                                                                 rename-new
                                                                                 rename-old
                                                                                 subst-rename?
                                                                                 wrap-subst
                                                                                 wrap-marks
                                                                                 make-wrap
                                                                                 id-sym-name&marks
                                                                                 id-sym-name
                                                                                 id?
                                                                                 nonsymbol-id?
                                                                                 global-extend
                                                                                 lookup
                                                                                 macros-only-env
                                                                                 extend-var-env
                                                                                 extend-env
                                                                                 null-env
                                                                                 binding-value
                                                                                 binding-type
                                                                                 make-binding
                                                                                 arg-check
                                                                                 source-annotation
                                                                                 no-source
                                                                                 set-syntax-object-module!
                                                                                 set-syntax-object-wrap!
                                                                                 set-syntax-object-expression!
                                                                                 syntax-object-module
                                                                                 syntax-object-wrap
                                                                                 syntax-object-expression
                                                                                 syntax-object?
                                                                                 make-syntax-object
                                                                                 build-lexical-var
                                                                                 build-letrec
                                                                                 build-named-let
                                                                                 build-let
                                                                                 build-sequence
                                                                                 build-data
                                                                                 build-primref
                                                                                 build-lambda-case
                                                                                 build-case-lambda
                                                                                 build-simple-lambda
                                                                                 build-global-definition
                                                                                 maybe-name-value!
                                                                                 build-global-assignment
                                                                                 build-global-reference
                                                                                 analyze-variable
                                                                                 build-lexical-assignment
                                                                                 build-lexical-reference
                                                                                 build-dynlet
                                                                                 build-conditional
                                                                                 build-application
                                                                                 build-void
                                                                                 decorate-source
                                                                                 get-global-definition-hook
                                                                                 put-global-definition-hook
                                                                                 gensym-hook
                                                                                 local-eval-hook
                                                                                 top-level-eval-hook
                                                                                 fx<
                                                                                 fx=
                                                                                 fx-
                                                                                 fx+
                                                                                 *mode*
                                                                                 noexpand)
                                                                               ((top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top))
                                                                               ("i5118"
                                                                                "i5116"
                                                                                "i5114"
                                                                                "i5112"
                                                                                "i5110"
                                                                                "i5108"
                                                                                "i5106"
                                                                                "i5104"
                                                                                "i5102"
                                                                                "i5100"
                                                                                "i5098"
                                                                                "i5096"
                                                                                "i5094"
                                                                                "i5092"
                                                                                "i5090"
                                                                                "i5088"
                                                                                "i5086"
                                                                                "i5084"
                                                                                "i5082"
                                                                                "i5080"
                                                                                "i5078"
                                                                                "i5076"
                                                                                "i5074"
                                                                                "i5072"
                                                                                "i5070"
                                                                                "i5068"
                                                                                "i5066"
                                                                                "i5064"
                                                                                "i5062"
                                                                                "i5060"
                                                                                "i5058"
                                                                                "i5056"
                                                                                "i5054"
                                                                                "i5052"
                                                                                "i5050"
                                                                                "i5048"
                                                                                "i5047"
                                                                                "i5046"
                                                                                "i5044"
                                                                                "i5043"
                                                                                "i5042"
                                                                                "i5041"
                                                                                "i5040"
                                                                                "i5038"
                                                                                "i5036"
                                                                                "i5034"
                                                                                "i5032"
                                                                                "i5030"
                                                                                "i5028"
                                                                                "i5026"
                                                                                "i5024"
                                                                                "i5021"
                                                                                "i5019"
                                                                                "i5018"
                                                                                "i5017"
                                                                                "i5016"
                                                                                "i5015"
                                                                                "i5014"
                                                                                "i5012"
                                                                                "i5010"
                                                                                "i5008"
                                                                                "i5006"
                                                                                "i5005"
                                                                                "i5003"
                                                                                "i5001"
                                                                                "i4999"
                                                                                "i4997"
                                                                                "i4995"
                                                                                "i4993"
                                                                                "i4991"
                                                                                "i4990"
                                                                                "i4988"
                                                                                "i4986"
                                                                                "i4985"
                                                                                "i4984"
                                                                                "i4982"
                                                                                "i4981"
                                                                                "i4979"
                                                                                "i4977"
                                                                                "i4975"
                                                                                "i4973"
                                                                                "i4971"
                                                                                "i4969"
                                                                                "i4967"
                                                                                "i4965"
                                                                                "i4963"
                                                                                "i4961"
                                                                                "i4959"
                                                                                "i4957"
                                                                                "i4955"
                                                                                "i4953"
                                                                                "i4951"
                                                                                "i4949"
                                                                                "i4947"
                                                                                "i4945"
                                                                                "i4943"
                                                                                "i4941"
                                                                                "i4939"
                                                                                "i4937"
                                                                                "i4935"
                                                                                "i4933"
                                                                                "i4931"
                                                                                "i4929"
                                                                                "i4927"
                                                                                "i4925"
                                                                                "i4923"
                                                                                "i4921"
                                                                                "i4919"
                                                                                "i4917"
                                                                                "i4916"
                                                                                "i4914"
                                                                                "i4912"
                                                                                "i4910"
                                                                                "i4908"
                                                                                "i4906"
                                                                                "i4904"
                                                                                "i4902"
                                                                                "i4900"))
                                                                             #(ribcage
                                                                               (define-structure
                                                                                 and-map*)
                                                                               ((top)
                                                                                (top))
                                                                               ("i4803"
                                                                                "i4801")))
                                                                            (hygiene
                                                                              guile))
                                                                          #(syntax-object
                                                                            #f
                                                                            ((top)
                                                                             #(ribcage
                                                                               #(_
                                                                                 name)
                                                                               #((top)
                                                                                 (top))
                                                                               #("i6509"
                                                                                 "i6510"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(ftype
                                                                                 fval
                                                                                 fe
                                                                                 fw
                                                                                 fs
                                                                                 fmod)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i6439"
                                                                                 "i6440"
                                                                                 "i6441"
                                                                                 "i6442"
                                                                                 "i6443"
                                                                                 "i6444"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(first)
                                                                               #((top))
                                                                               #("i6431"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(e
                                                                                 r
                                                                                 w
                                                                                 s
                                                                                 rib
                                                                                 mod
                                                                                 for-car?)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i6408"
                                                                                 "i6409"
                                                                                 "i6410"
                                                                                 "i6411"
                                                                                 "i6412"
                                                                                 "i6413"
                                                                                 "i6414"))
                                                                             #(ribcage
                                                                               (lambda-var-list
                                                                                 gen-var
                                                                                 strip
                                                                                 chi-lambda-case
                                                                                 lambda*-formals
                                                                                 chi-simple-lambda
                                                                                 lambda-formals
                                                                                 ellipsis?
                                                                                 chi-void
                                                                                 eval-local-transformer
                                                                                 chi-local-syntax
                                                                                 chi-body
                                                                                 chi-macro
                                                                                 chi-application
                                                                                 chi-expr
                                                                                 chi
                                                                                 chi-top
                                                                                 syntax-type
                                                                                 chi-when-list
                                                                                 chi-install-global
                                                                                 chi-top-sequence
                                                                                 chi-sequence
                                                                                 source-wrap
                                                                                 wrap
                                                                                 bound-id-member?
                                                                                 distinct-bound-ids?
                                                                                 valid-bound-ids?
                                                                                 bound-id=?
                                                                                 free-id=?
                                                                                 id-var-name
                                                                                 same-marks?
                                                                                 join-marks
                                                                                 join-wraps
                                                                                 smart-append
                                                                                 make-binding-wrap
                                                                                 extend-ribcage!
                                                                                 make-empty-ribcage
                                                                                 new-mark
                                                                                 anti-mark
                                                                                 the-anti-mark
                                                                                 top-marked?
                                                                                 top-wrap
                                                                                 empty-wrap
                                                                                 set-ribcage-labels!
                                                                                 set-ribcage-marks!
                                                                                 set-ribcage-symnames!
                                                                                 ribcage-labels
                                                                                 ribcage-marks
                                                                                 ribcage-symnames
                                                                                 ribcage?
                                                                                 make-ribcage
                                                                                 gen-labels
                                                                                 gen-label
                                                                                 make-rename
                                                                                 rename-marks
                                                                                 rename-new
                                                                                 rename-old
                                                                                 subst-rename?
                                                                                 wrap-subst
                                                                                 wrap-marks
                                                                                 make-wrap
                                                                                 id-sym-name&marks
                                                                                 id-sym-name
                                                                                 id?
                                                                                 nonsymbol-id?
                                                                                 global-extend
                                                                                 lookup
                                                                                 macros-only-env
                                                                                 extend-var-env
                                                                                 extend-env
                                                                                 null-env
                                                                                 binding-value
                                                                                 binding-type
                                                                                 make-binding
                                                                                 arg-check
                                                                                 source-annotation
                                                                                 no-source
                                                                                 set-syntax-object-module!
                                                                                 set-syntax-object-wrap!
                                                                                 set-syntax-object-expression!
                                                                                 syntax-object-module
                                                                                 syntax-object-wrap
                                                                                 syntax-object-expression
                                                                                 syntax-object?
                                                                                 make-syntax-object
                                                                                 build-lexical-var
                                                                                 build-letrec
                                                                                 build-named-let
                                                                                 build-let
                                                                                 build-sequence
                                                                                 build-data
                                                                                 build-primref
                                                                                 build-lambda-case
                                                                                 build-case-lambda
                                                                                 build-simple-lambda
                                                                                 build-global-definition
                                                                                 maybe-name-value!
                                                                                 build-global-assignment
                                                                                 build-global-reference
                                                                                 analyze-variable
                                                                                 build-lexical-assignment
                                                                                 build-lexical-reference
                                                                                 build-dynlet
                                                                                 build-conditional
                                                                                 build-application
                                                                                 build-void
                                                                                 decorate-source
                                                                                 get-global-definition-hook
                                                                                 put-global-definition-hook
                                                                                 gensym-hook
                                                                                 local-eval-hook
                                                                                 top-level-eval-hook
                                                                                 fx<
                                                                                 fx=
                                                                                 fx-
                                                                                 fx+
                                                                                 *mode*
                                                                                 noexpand)
                                                                               ((top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top))
                                                                               ("i5118"
                                                                                "i5116"
                                                                                "i5114"
                                                                                "i5112"
                                                                                "i5110"
                                                                                "i5108"
                                                                                "i5106"
                                                                                "i5104"
                                                                                "i5102"
                                                                                "i5100"
                                                                                "i5098"
                                                                                "i5096"
                                                                                "i5094"
                                                                                "i5092"
                                                                                "i5090"
                                                                                "i5088"
                                                                                "i5086"
                                                                                "i5084"
                                                                                "i5082"
                                                                                "i5080"
                                                                                "i5078"
                                                                                "i5076"
                                                                                "i5074"
                                                                                "i5072"
                                                                                "i5070"
                                                                                "i5068"
                                                                                "i5066"
                                                                                "i5064"
                                                                                "i5062"
                                                                                "i5060"
                                                                                "i5058"
                                                                                "i5056"
                                                                                "i5054"
                                                                                "i5052"
                                                                                "i5050"
                                                                                "i5048"
                                                                                "i5047"
                                                                                "i5046"
                                                                                "i5044"
                                                                                "i5043"
                                                                                "i5042"
                                                                                "i5041"
                                                                                "i5040"
                                                                                "i5038"
                                                                                "i5036"
                                                                                "i5034"
                                                                                "i5032"
                                                                                "i5030"
                                                                                "i5028"
                                                                                "i5026"
                                                                                "i5024"
                                                                                "i5021"
                                                                                "i5019"
                                                                                "i5018"
                                                                                "i5017"
                                                                                "i5016"
                                                                                "i5015"
                                                                                "i5014"
                                                                                "i5012"
                                                                                "i5010"
                                                                                "i5008"
                                                                                "i5006"
                                                                                "i5005"
                                                                                "i5003"
                                                                                "i5001"
                                                                                "i4999"
                                                                                "i4997"
                                                                                "i4995"
                                                                                "i4993"
                                                                                "i4991"
                                                                                "i4990"
                                                                                "i4988"
                                                                                "i4986"
                                                                                "i4985"
                                                                                "i4984"
                                                                                "i4982"
                                                                                "i4981"
                                                                                "i4979"
                                                                                "i4977"
                                                                                "i4975"
                                                                                "i4973"
                                                                                "i4971"
                                                                                "i4969"
                                                                                "i4967"
                                                                                "i4965"
                                                                                "i4963"
                                                                                "i4961"
                                                                                "i4959"
                                                                                "i4957"
                                                                                "i4955"
                                                                                "i4953"
                                                                                "i4951"
                                                                                "i4949"
                                                                                "i4947"
                                                                                "i4945"
                                                                                "i4943"
                                                                                "i4941"
                                                                                "i4939"
                                                                                "i4937"
                                                                                "i4935"
                                                                                "i4933"
                                                                                "i4931"
                                                                                "i4929"
                                                                                "i4927"
                                                                                "i4925"
                                                                                "i4923"
                                                                                "i4921"
                                                                                "i4919"
                                                                                "i4917"
                                                                                "i4916"
                                                                                "i4914"
                                                                                "i4912"
                                                                                "i4910"
                                                                                "i4908"
                                                                                "i4906"
                                                                                "i4904"
                                                                                "i4902"
                                                                                "i4900"))
                                                                             #(ribcage
                                                                               (define-structure
                                                                                 and-map*)
                                                                               ((top)
                                                                                (top))
                                                                               ("i4803"
                                                                                "i4801")))
                                                                            (hygiene
                                                                              guile))
                                                                          #(syntax-object
                                                                            #f
                                                                            ((top)
                                                                             #(ribcage
                                                                               #(_
                                                                                 name)
                                                                               #((top)
                                                                                 (top))
                                                                               #("i6509"
                                                                                 "i6510"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(ftype
                                                                                 fval
                                                                                 fe
                                                                                 fw
                                                                                 fs
                                                                                 fmod)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i6439"
                                                                                 "i6440"
                                                                                 "i6441"
                                                                                 "i6442"
                                                                                 "i6443"
                                                                                 "i6444"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(first)
                                                                               #((top))
                                                                               #("i6431"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(e
                                                                                 r
                                                                                 w
                                                                                 s
                                                                                 rib
                                                                                 mod
                                                                                 for-car?)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i6408"
                                                                                 "i6409"
                                                                                 "i6410"
                                                                                 "i6411"
                                                                                 "i6412"
                                                                                 "i6413"
                                                                                 "i6414"))
                                                                             #(ribcage
                                                                               (lambda-var-list
                                                                                 gen-var
                                                                                 strip
                                                                                 chi-lambda-case
                                                                                 lambda*-formals
                                                                                 chi-simple-lambda
                                                                                 lambda-formals
                                                                                 ellipsis?
                                                                                 chi-void
                                                                                 eval-local-transformer
                                                                                 chi-local-syntax
                                                                                 chi-body
                                                                                 chi-macro
                                                                                 chi-application
                                                                                 chi-expr
                                                                                 chi
                                                                                 chi-top
                                                                                 syntax-type
                                                                                 chi-when-list
                                                                                 chi-install-global
                                                                                 chi-top-sequence
                                                                                 chi-sequence
                                                                                 source-wrap
                                                                                 wrap
                                                                                 bound-id-member?
                                                                                 distinct-bound-ids?
                                                                                 valid-bound-ids?
                                                                                 bound-id=?
                                                                                 free-id=?
                                                                                 id-var-name
                                                                                 same-marks?
                                                                                 join-marks
                                                                                 join-wraps
                                                                                 smart-append
                                                                                 make-binding-wrap
                                                                                 extend-ribcage!
                                                                                 make-empty-ribcage
                                                                                 new-mark
                                                                                 anti-mark
                                                                                 the-anti-mark
                                                                                 top-marked?
                                                                                 top-wrap
                                                                                 empty-wrap
                                                                                 set-ribcage-labels!
                                                                                 set-ribcage-marks!
                                                                                 set-ribcage-symnames!
                                                                                 ribcage-labels
                                                                                 ribcage-marks
                                                                                 ribcage-symnames
                                                                                 ribcage?
                                                                                 make-ribcage
                                                                                 gen-labels
                                                                                 gen-label
                                                                                 make-rename
                                                                                 rename-marks
                                                                                 rename-new
                                                                                 rename-old
                                                                                 subst-rename?
                                                                                 wrap-subst
                                                                                 wrap-marks
                                                                                 make-wrap
                                                                                 id-sym-name&marks
                                                                                 id-sym-name
                                                                                 id?
                                                                                 nonsymbol-id?
                                                                                 global-extend
                                                                                 lookup
                                                                                 macros-only-env
                                                                                 extend-var-env
                                                                                 extend-env
                                                                                 null-env
                                                                                 binding-value
                                                                                 binding-type
                                                                                 make-binding
                                                                                 arg-check
                                                                                 source-annotation
                                                                                 no-source
                                                                                 set-syntax-object-module!
                                                                                 set-syntax-object-wrap!
                                                                                 set-syntax-object-expression!
                                                                                 syntax-object-module
                                                                                 syntax-object-wrap
                                                                                 syntax-object-expression
                                                                                 syntax-object?
                                                                                 make-syntax-object
                                                                                 build-lexical-var
                                                                                 build-letrec
                                                                                 build-named-let
                                                                                 build-let
                                                                                 build-sequence
                                                                                 build-data
                                                                                 build-primref
                                                                                 build-lambda-case
                                                                                 build-case-lambda
                                                                                 build-simple-lambda
                                                                                 build-global-definition
                                                                                 maybe-name-value!
                                                                                 build-global-assignment
                                                                                 build-global-reference
                                                                                 analyze-variable
                                                                                 build-lexical-assignment
                                                                                 build-lexical-reference
                                                                                 build-dynlet
                                                                                 build-conditional
                                                                                 build-application
                                                                                 build-void
                                                                                 decorate-source
                                                                                 get-global-definition-hook
                                                                                 put-global-definition-hook
                                                                                 gensym-hook
                                                                                 local-eval-hook
                                                                                 top-level-eval-hook
                                                                                 fx<
                                                                                 fx=
                                                                                 fx-
                                                                                 fx+
                                                                                 *mode*
                                                                                 noexpand)
                                                                               ((top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top))
                                                                               ("i5118"
                                                                                "i5116"
                                                                                "i5114"
                                                                                "i5112"
                                                                                "i5110"
                                                                                "i5108"
                                                                                "i5106"
                                                                                "i5104"
                                                                                "i5102"
                                                                                "i5100"
                                                                                "i5098"
                                                                                "i5096"
                                                                                "i5094"
                                                                                "i5092"
                                                                                "i5090"
                                                                                "i5088"
                                                                                "i5086"
                                                                                "i5084"
                                                                                "i5082"
                                                                                "i5080"
                                                                                "i5078"
                                                                                "i5076"
                                                                                "i5074"
                                                                                "i5072"
                                                                                "i5070"
                                                                                "i5068"
                                                                                "i5066"
                                                                                "i5064"
                                                                                "i5062"
                                                                                "i5060"
                                                                                "i5058"
                                                                                "i5056"
                                                                                "i5054"
                                                                                "i5052"
                                                                                "i5050"
                                                                                "i5048"
                                                                                "i5047"
                                                                                "i5046"
                                                                                "i5044"
                                                                                "i5043"
                                                                                "i5042"
                                                                                "i5041"
                                                                                "i5040"
                                                                                "i5038"
                                                                                "i5036"
                                                                                "i5034"
                                                                                "i5032"
                                                                                "i5030"
                                                                                "i5028"
                                                                                "i5026"
                                                                                "i5024"
                                                                                "i5021"
                                                                                "i5019"
                                                                                "i5018"
                                                                                "i5017"
                                                                                "i5016"
                                                                                "i5015"
                                                                                "i5014"
                                                                                "i5012"
                                                                                "i5010"
                                                                                "i5008"
                                                                                "i5006"
                                                                                "i5005"
                                                                                "i5003"
                                                                                "i5001"
                                                                                "i4999"
                                                                                "i4997"
                                                                                "i4995"
                                                                                "i4993"
                                                                                "i4991"
                                                                                "i4990"
                                                                                "i4988"
                                                                                "i4986"
                                                                                "i4985"
                                                                                "i4984"
                                                                                "i4982"
                                                                                "i4981"
                                                                                "i4979"
                                                                                "i4977"
                                                                                "i4975"
                                                                                "i4973"
                                                                                "i4971"
                                                                                "i4969"
                                                                                "i4967"
                                                                                "i4965"
                                                                                "i4963"
                                                                                "i4961"
                                                                                "i4959"
                                                                                "i4957"
                                                                                "i4955"
                                                                                "i4953"
                                                                                "i4951"
                                                                                "i4949"
                                                                                "i4947"
                                                                                "i4945"
                                                                                "i4943"
                                                                                "i4941"
                                                                                "i4939"
                                                                                "i4937"
                                                                                "i4935"
                                                                                "i4933"
                                                                                "i4931"
                                                                                "i4929"
                                                                                "i4927"
                                                                                "i4925"
                                                                                "i4923"
                                                                                "i4921"
                                                                                "i4919"
                                                                                "i4917"
                                                                                "i4916"
                                                                                "i4914"
                                                                                "i4912"
                                                                                "i4910"
                                                                                "i4908"
                                                                                "i4906"
                                                                                "i4904"
                                                                                "i4902"
                                                                                "i4900"))
                                                                             #(ribcage
                                                                               (define-structure
                                                                                 and-map*)
                                                                               ((top)
                                                                                (top))
                                                                               ("i4803"
                                                                                "i4801")))
                                                                            (hygiene
                                                                              guile)))
                                                                        '(())
                                                                        #{s\ 6404}#
                                                                        #{mod\ 6406}#))
                                                                    #{tmp\ 6504}#)
                                                             (syntax-violation
                                                               #f
                                                               "source expression failed to match any pattern"
                                                               #{tmp\ 6465}#)))
                                                         ($sc-dispatch
                                                           #{tmp\ 6465}#
                                                           '(any any)))))
                                                    ($sc-dispatch
                                                      #{tmp\ 6465}#
                                                      '(any (any . any)
                                                            any
                                                            .
                                                            each-any)))))
                                               ($sc-dispatch
                                                 #{tmp\ 6465}#
                                                 '(any any any))))
                                            #{e\ 6401}#)
                                           (if (memv #{ftype\ 6433}#
                                                     '(define-syntax))
                                             ((lambda (#{tmp\ 6515}#)
                                                ((lambda (#{tmp\ 6516}#)
                                                   (if (if #{tmp\ 6516}#
                                                         (apply (lambda (#{_\ 6520}#
                                                                         #{name\ 6521}#
                                                                         #{val\ 6522}#)
                                                                  (#{id?\ 5004}#
                                                                    #{name\ 6521}#))
                                                                #{tmp\ 6516}#)
                                                         #f)
                                                     (apply (lambda (#{_\ 6526}#
                                                                     #{name\ 6527}#
                                                                     #{val\ 6528}#)
                                                              (values
                                                                'define-syntax-form
                                                                #{name\ 6527}#
                                                                #{val\ 6528}#
                                                                #{w\ 6403}#
                                                                #{s\ 6404}#
                                                                #{mod\ 6406}#))
                                                            #{tmp\ 6516}#)
                                                     (syntax-violation
                                                       #f
                                                       "source expression failed to match any pattern"
                                                       #{tmp\ 6515}#)))
                                                 ($sc-dispatch
                                                   #{tmp\ 6515}#
                                                   '(any any any))))
                                              #{e\ 6401}#)
                                             (values
                                               'call
                                               #f
                                               #{e\ 6401}#
                                               #{w\ 6403}#
                                               #{s\ 6404}#
                                               #{mod\ 6406}#))))))))))))))
                   (if (#{syntax-object?\ 4968}# #{e\ 6401}#)
                     (#{syntax-type\ 5085}#
                       (#{syntax-object-expression\ 4970}# #{e\ 6401}#)
                       #{r\ 6402}#
                       (#{join-wraps\ 5055}#
                         #{w\ 6403}#
                         (#{syntax-object-wrap\ 4972}# #{e\ 6401}#))
                       #{s\ 6404}#
                       #{rib\ 6405}#
                       (let ((#{t\ 6534}#
                               (#{syntax-object-module\ 4974}# #{e\ 6401}#)))
                         (if #{t\ 6534}# #{t\ 6534}# #{mod\ 6406}#))
                       #{for-car?\ 6407}#)
                     (if (self-evaluating? #{e\ 6401}#)
                       (values
                         'constant
                         #f
                         #{e\ 6401}#
                         #{w\ 6403}#
                         #{s\ 6404}#
                         #{mod\ 6406}#)
                       (values
                         'other
                         #f
                         #{e\ 6401}#
                         #{w\ 6403}#
                         #{s\ 6404}#
                         #{mod\ 6406}#)))))))
           (#{chi-when-list\ 5083}#
             (lambda (#{e\ 6539}# #{when-list\ 6540}# #{w\ 6541}#)
               (letrec ((#{f\ 6548}#
                          (lambda (#{when-list\ 6549}# #{situations\ 6550}#)
                            (if (null? #{when-list\ 6549}#)
                              #{situations\ 6550}#
                              (#{f\ 6548}#
                                (cdr #{when-list\ 6549}#)
                                (cons (let ((#{x\ 6552}#
                                              (car #{when-list\ 6549}#)))
                                        (if (#{free-id=?\ 5063}#
                                              #{x\ 6552}#
                                              '#(syntax-object
                                                 compile
                                                 ((top)
                                                  #(ribcage () () ())
                                                  #(ribcage () () ())
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(x)
                                                    #((top))
                                                    #("i6551"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(f when-list situations)
                                                    #((top) (top) (top))
                                                    #("i6545" "i6546" "i6547"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(e when-list w)
                                                    #((top) (top) (top))
                                                    #("i6542" "i6543" "i6544"))
                                                  #(ribcage
                                                    (lambda-var-list
                                                      gen-var
                                                      strip
                                                      chi-lambda-case
                                                      lambda*-formals
                                                      chi-simple-lambda
                                                      lambda-formals
                                                      ellipsis?
                                                      chi-void
                                                      eval-local-transformer
                                                      chi-local-syntax
                                                      chi-body
                                                      chi-macro
                                                      chi-application
                                                      chi-expr
                                                      chi
                                                      chi-top
                                                      syntax-type
                                                      chi-when-list
                                                      chi-install-global
                                                      chi-top-sequence
                                                      chi-sequence
                                                      source-wrap
                                                      wrap
                                                      bound-id-member?
                                                      distinct-bound-ids?
                                                      valid-bound-ids?
                                                      bound-id=?
                                                      free-id=?
                                                      id-var-name
                                                      same-marks?
                                                      join-marks
                                                      join-wraps
                                                      smart-append
                                                      make-binding-wrap
                                                      extend-ribcage!
                                                      make-empty-ribcage
                                                      new-mark
                                                      anti-mark
                                                      the-anti-mark
                                                      top-marked?
                                                      top-wrap
                                                      empty-wrap
                                                      set-ribcage-labels!
                                                      set-ribcage-marks!
                                                      set-ribcage-symnames!
                                                      ribcage-labels
                                                      ribcage-marks
                                                      ribcage-symnames
                                                      ribcage?
                                                      make-ribcage
                                                      gen-labels
                                                      gen-label
                                                      make-rename
                                                      rename-marks
                                                      rename-new
                                                      rename-old
                                                      subst-rename?
                                                      wrap-subst
                                                      wrap-marks
                                                      make-wrap
                                                      id-sym-name&marks
                                                      id-sym-name
                                                      id?
                                                      nonsymbol-id?
                                                      global-extend
                                                      lookup
                                                      macros-only-env
                                                      extend-var-env
                                                      extend-env
                                                      null-env
                                                      binding-value
                                                      binding-type
                                                      make-binding
                                                      arg-check
                                                      source-annotation
                                                      no-source
                                                      set-syntax-object-module!
                                                      set-syntax-object-wrap!
                                                      set-syntax-object-expression!
                                                      syntax-object-module
                                                      syntax-object-wrap
                                                      syntax-object-expression
                                                      syntax-object?
                                                      make-syntax-object
                                                      build-lexical-var
                                                      build-letrec
                                                      build-named-let
                                                      build-let
                                                      build-sequence
                                                      build-data
                                                      build-primref
                                                      build-lambda-case
                                                      build-case-lambda
                                                      build-simple-lambda
                                                      build-global-definition
                                                      maybe-name-value!
                                                      build-global-assignment
                                                      build-global-reference
                                                      analyze-variable
                                                      build-lexical-assignment
                                                      build-lexical-reference
                                                      build-dynlet
                                                      build-conditional
                                                      build-application
                                                      build-void
                                                      decorate-source
                                                      get-global-definition-hook
                                                      put-global-definition-hook
                                                      gensym-hook
                                                      local-eval-hook
                                                      top-level-eval-hook
                                                      fx<
                                                      fx=
                                                      fx-
                                                      fx+
                                                      *mode*
                                                      noexpand)
                                                    ((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                    ("i5118"
                                                     "i5116"
                                                     "i5114"
                                                     "i5112"
                                                     "i5110"
                                                     "i5108"
                                                     "i5106"
                                                     "i5104"
                                                     "i5102"
                                                     "i5100"
                                                     "i5098"
                                                     "i5096"
                                                     "i5094"
                                                     "i5092"
                                                     "i5090"
                                                     "i5088"
                                                     "i5086"
                                                     "i5084"
                                                     "i5082"
                                                     "i5080"
                                                     "i5078"
                                                     "i5076"
                                                     "i5074"
                                                     "i5072"
                                                     "i5070"
                                                     "i5068"
                                                     "i5066"
                                                     "i5064"
                                                     "i5062"
                                                     "i5060"
                                                     "i5058"
                                                     "i5056"
                                                     "i5054"
                                                     "i5052"
                                                     "i5050"
                                                     "i5048"
                                                     "i5047"
                                                     "i5046"
                                                     "i5044"
                                                     "i5043"
                                                     "i5042"
                                                     "i5041"
                                                     "i5040"
                                                     "i5038"
                                                     "i5036"
                                                     "i5034"
                                                     "i5032"
                                                     "i5030"
                                                     "i5028"
                                                     "i5026"
                                                     "i5024"
                                                     "i5021"
                                                     "i5019"
                                                     "i5018"
                                                     "i5017"
                                                     "i5016"
                                                     "i5015"
                                                     "i5014"
                                                     "i5012"
                                                     "i5010"
                                                     "i5008"
                                                     "i5006"
                                                     "i5005"
                                                     "i5003"
                                                     "i5001"
                                                     "i4999"
                                                     "i4997"
                                                     "i4995"
                                                     "i4993"
                                                     "i4991"
                                                     "i4990"
                                                     "i4988"
                                                     "i4986"
                                                     "i4985"
                                                     "i4984"
                                                     "i4982"
                                                     "i4981"
                                                     "i4979"
                                                     "i4977"
                                                     "i4975"
                                                     "i4973"
                                                     "i4971"
                                                     "i4969"
                                                     "i4967"
                                                     "i4965"
                                                     "i4963"
                                                     "i4961"
                                                     "i4959"
                                                     "i4957"
                                                     "i4955"
                                                     "i4953"
                                                     "i4951"
                                                     "i4949"
                                                     "i4947"
                                                     "i4945"
                                                     "i4943"
                                                     "i4941"
                                                     "i4939"
                                                     "i4937"
                                                     "i4935"
                                                     "i4933"
                                                     "i4931"
                                                     "i4929"
                                                     "i4927"
                                                     "i4925"
                                                     "i4923"
                                                     "i4921"
                                                     "i4919"
                                                     "i4917"
                                                     "i4916"
                                                     "i4914"
                                                     "i4912"
                                                     "i4910"
                                                     "i4908"
                                                     "i4906"
                                                     "i4904"
                                                     "i4902"
                                                     "i4900"))
                                                  #(ribcage
                                                    (define-structure and-map*)
                                                    ((top) (top))
                                                    ("i4803" "i4801")))
                                                 (hygiene guile)))
                                          'compile
                                          (if (#{free-id=?\ 5063}#
                                                #{x\ 6552}#
                                                '#(syntax-object
                                                   load
                                                   ((top)
                                                    #(ribcage () () ())
                                                    #(ribcage () () ())
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i6551"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(f when-list situations)
                                                      #((top) (top) (top))
                                                      #("i6545"
                                                        "i6546"
                                                        "i6547"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(e when-list w)
                                                      #((top) (top) (top))
                                                      #("i6542"
                                                        "i6543"
                                                        "i6544"))
                                                    #(ribcage
                                                      (lambda-var-list
                                                        gen-var
                                                        strip
                                                        chi-lambda-case
                                                        lambda*-formals
                                                        chi-simple-lambda
                                                        lambda-formals
                                                        ellipsis?
                                                        chi-void
                                                        eval-local-transformer
                                                        chi-local-syntax
                                                        chi-body
                                                        chi-macro
                                                        chi-application
                                                        chi-expr
                                                        chi
                                                        chi-top
                                                        syntax-type
                                                        chi-when-list
                                                        chi-install-global
                                                        chi-top-sequence
                                                        chi-sequence
                                                        source-wrap
                                                        wrap
                                                        bound-id-member?
                                                        distinct-bound-ids?
                                                        valid-bound-ids?
                                                        bound-id=?
                                                        free-id=?
                                                        id-var-name
                                                        same-marks?
                                                        join-marks
                                                        join-wraps
                                                        smart-append
                                                        make-binding-wrap
                                                        extend-ribcage!
                                                        make-empty-ribcage
                                                        new-mark
                                                        anti-mark
                                                        the-anti-mark
                                                        top-marked?
                                                        top-wrap
                                                        empty-wrap
                                                        set-ribcage-labels!
                                                        set-ribcage-marks!
                                                        set-ribcage-symnames!
                                                        ribcage-labels
                                                        ribcage-marks
                                                        ribcage-symnames
                                                        ribcage?
                                                        make-ribcage
                                                        gen-labels
                                                        gen-label
                                                        make-rename
                                                        rename-marks
                                                        rename-new
                                                        rename-old
                                                        subst-rename?
                                                        wrap-subst
                                                        wrap-marks
                                                        make-wrap
                                                        id-sym-name&marks
                                                        id-sym-name
                                                        id?
                                                        nonsymbol-id?
                                                        global-extend
                                                        lookup
                                                        macros-only-env
                                                        extend-var-env
                                                        extend-env
                                                        null-env
                                                        binding-value
                                                        binding-type
                                                        make-binding
                                                        arg-check
                                                        source-annotation
                                                        no-source
                                                        set-syntax-object-module!
                                                        set-syntax-object-wrap!
                                                        set-syntax-object-expression!
                                                        syntax-object-module
                                                        syntax-object-wrap
                                                        syntax-object-expression
                                                        syntax-object?
                                                        make-syntax-object
                                                        build-lexical-var
                                                        build-letrec
                                                        build-named-let
                                                        build-let
                                                        build-sequence
                                                        build-data
                                                        build-primref
                                                        build-lambda-case
                                                        build-case-lambda
                                                        build-simple-lambda
                                                        build-global-definition
                                                        maybe-name-value!
                                                        build-global-assignment
                                                        build-global-reference
                                                        analyze-variable
                                                        build-lexical-assignment
                                                        build-lexical-reference
                                                        build-dynlet
                                                        build-conditional
                                                        build-application
                                                        build-void
                                                        decorate-source
                                                        get-global-definition-hook
                                                        put-global-definition-hook
                                                        gensym-hook
                                                        local-eval-hook
                                                        top-level-eval-hook
                                                        fx<
                                                        fx=
                                                        fx-
                                                        fx+
                                                        *mode*
                                                        noexpand)
                                                      ((top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top))
                                                      ("i5118"
                                                       "i5116"
                                                       "i5114"
                                                       "i5112"
                                                       "i5110"
                                                       "i5108"
                                                       "i5106"
                                                       "i5104"
                                                       "i5102"
                                                       "i5100"
                                                       "i5098"
                                                       "i5096"
                                                       "i5094"
                                                       "i5092"
                                                       "i5090"
                                                       "i5088"
                                                       "i5086"
                                                       "i5084"
                                                       "i5082"
                                                       "i5080"
                                                       "i5078"
                                                       "i5076"
                                                       "i5074"
                                                       "i5072"
                                                       "i5070"
                                                       "i5068"
                                                       "i5066"
                                                       "i5064"
                                                       "i5062"
                                                       "i5060"
                                                       "i5058"
                                                       "i5056"
                                                       "i5054"
                                                       "i5052"
                                                       "i5050"
                                                       "i5048"
                                                       "i5047"
                                                       "i5046"
                                                       "i5044"
                                                       "i5043"
                                                       "i5042"
                                                       "i5041"
                                                       "i5040"
                                                       "i5038"
                                                       "i5036"
                                                       "i5034"
                                                       "i5032"
                                                       "i5030"
                                                       "i5028"
                                                       "i5026"
                                                       "i5024"
                                                       "i5021"
                                                       "i5019"
                                                       "i5018"
                                                       "i5017"
                                                       "i5016"
                                                       "i5015"
                                                       "i5014"
                                                       "i5012"
                                                       "i5010"
                                                       "i5008"
                                                       "i5006"
                                                       "i5005"
                                                       "i5003"
                                                       "i5001"
                                                       "i4999"
                                                       "i4997"
                                                       "i4995"
                                                       "i4993"
                                                       "i4991"
                                                       "i4990"
                                                       "i4988"
                                                       "i4986"
                                                       "i4985"
                                                       "i4984"
                                                       "i4982"
                                                       "i4981"
                                                       "i4979"
                                                       "i4977"
                                                       "i4975"
                                                       "i4973"
                                                       "i4971"
                                                       "i4969"
                                                       "i4967"
                                                       "i4965"
                                                       "i4963"
                                                       "i4961"
                                                       "i4959"
                                                       "i4957"
                                                       "i4955"
                                                       "i4953"
                                                       "i4951"
                                                       "i4949"
                                                       "i4947"
                                                       "i4945"
                                                       "i4943"
                                                       "i4941"
                                                       "i4939"
                                                       "i4937"
                                                       "i4935"
                                                       "i4933"
                                                       "i4931"
                                                       "i4929"
                                                       "i4927"
                                                       "i4925"
                                                       "i4923"
                                                       "i4921"
                                                       "i4919"
                                                       "i4917"
                                                       "i4916"
                                                       "i4914"
                                                       "i4912"
                                                       "i4910"
                                                       "i4908"
                                                       "i4906"
                                                       "i4904"
                                                       "i4902"
                                                       "i4900"))
                                                    #(ribcage
                                                      (define-structure
                                                        and-map*)
                                                      ((top) (top))
                                                      ("i4803" "i4801")))
                                                   (hygiene guile)))
                                            'load
                                            (if (#{free-id=?\ 5063}#
                                                  #{x\ 6552}#
                                                  '#(syntax-object
                                                     eval
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage () () ())
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(x)
                                                        #((top))
                                                        #("i6551"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(f
                                                          when-list
                                                          situations)
                                                        #((top) (top) (top))
                                                        #("i6545"
                                                          "i6546"
                                                          "i6547"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(e when-list w)
                                                        #((top) (top) (top))
                                                        #("i6542"
                                                          "i6543"
                                                          "i6544"))
                                                      #(ribcage
                                                        (lambda-var-list
                                                          gen-var
                                                          strip
                                                          chi-lambda-case
                                                          lambda*-formals
                                                          chi-simple-lambda
                                                          lambda-formals
                                                          ellipsis?
                                                          chi-void
                                                          eval-local-transformer
                                                          chi-local-syntax
                                                          chi-body
                                                          chi-macro
                                                          chi-application
                                                          chi-expr
                                                          chi
                                                          chi-top
                                                          syntax-type
                                                          chi-when-list
                                                          chi-install-global
                                                          chi-top-sequence
                                                          chi-sequence
                                                          source-wrap
                                                          wrap
                                                          bound-id-member?
                                                          distinct-bound-ids?
                                                          valid-bound-ids?
                                                          bound-id=?
                                                          free-id=?
                                                          id-var-name
                                                          same-marks?
                                                          join-marks
                                                          join-wraps
                                                          smart-append
                                                          make-binding-wrap
                                                          extend-ribcage!
                                                          make-empty-ribcage
                                                          new-mark
                                                          anti-mark
                                                          the-anti-mark
                                                          top-marked?
                                                          top-wrap
                                                          empty-wrap
                                                          set-ribcage-labels!
                                                          set-ribcage-marks!
                                                          set-ribcage-symnames!
                                                          ribcage-labels
                                                          ribcage-marks
                                                          ribcage-symnames
                                                          ribcage?
                                                          make-ribcage
                                                          gen-labels
                                                          gen-label
                                                          make-rename
                                                          rename-marks
                                                          rename-new
                                                          rename-old
                                                          subst-rename?
                                                          wrap-subst
                                                          wrap-marks
                                                          make-wrap
                                                          id-sym-name&marks
                                                          id-sym-name
                                                          id?
                                                          nonsymbol-id?
                                                          global-extend
                                                          lookup
                                                          macros-only-env
                                                          extend-var-env
                                                          extend-env
                                                          null-env
                                                          binding-value
                                                          binding-type
                                                          make-binding
                                                          arg-check
                                                          source-annotation
                                                          no-source
                                                          set-syntax-object-module!
                                                          set-syntax-object-wrap!
                                                          set-syntax-object-expression!
                                                          syntax-object-module
                                                          syntax-object-wrap
                                                          syntax-object-expression
                                                          syntax-object?
                                                          make-syntax-object
                                                          build-lexical-var
                                                          build-letrec
                                                          build-named-let
                                                          build-let
                                                          build-sequence
                                                          build-data
                                                          build-primref
                                                          build-lambda-case
                                                          build-case-lambda
                                                          build-simple-lambda
                                                          build-global-definition
                                                          maybe-name-value!
                                                          build-global-assignment
                                                          build-global-reference
                                                          analyze-variable
                                                          build-lexical-assignment
                                                          build-lexical-reference
                                                          build-dynlet
                                                          build-conditional
                                                          build-application
                                                          build-void
                                                          decorate-source
                                                          get-global-definition-hook
                                                          put-global-definition-hook
                                                          gensym-hook
                                                          local-eval-hook
                                                          top-level-eval-hook
                                                          fx<
                                                          fx=
                                                          fx-
                                                          fx+
                                                          *mode*
                                                          noexpand)
                                                        ((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                        ("i5118"
                                                         "i5116"
                                                         "i5114"
                                                         "i5112"
                                                         "i5110"
                                                         "i5108"
                                                         "i5106"
                                                         "i5104"
                                                         "i5102"
                                                         "i5100"
                                                         "i5098"
                                                         "i5096"
                                                         "i5094"
                                                         "i5092"
                                                         "i5090"
                                                         "i5088"
                                                         "i5086"
                                                         "i5084"
                                                         "i5082"
                                                         "i5080"
                                                         "i5078"
                                                         "i5076"
                                                         "i5074"
                                                         "i5072"
                                                         "i5070"
                                                         "i5068"
                                                         "i5066"
                                                         "i5064"
                                                         "i5062"
                                                         "i5060"
                                                         "i5058"
                                                         "i5056"
                                                         "i5054"
                                                         "i5052"
                                                         "i5050"
                                                         "i5048"
                                                         "i5047"
                                                         "i5046"
                                                         "i5044"
                                                         "i5043"
                                                         "i5042"
                                                         "i5041"
                                                         "i5040"
                                                         "i5038"
                                                         "i5036"
                                                         "i5034"
                                                         "i5032"
                                                         "i5030"
                                                         "i5028"
                                                         "i5026"
                                                         "i5024"
                                                         "i5021"
                                                         "i5019"
                                                         "i5018"
                                                         "i5017"
                                                         "i5016"
                                                         "i5015"
                                                         "i5014"
                                                         "i5012"
                                                         "i5010"
                                                         "i5008"
                                                         "i5006"
                                                         "i5005"
                                                         "i5003"
                                                         "i5001"
                                                         "i4999"
                                                         "i4997"
                                                         "i4995"
                                                         "i4993"
                                                         "i4991"
                                                         "i4990"
                                                         "i4988"
                                                         "i4986"
                                                         "i4985"
                                                         "i4984"
                                                         "i4982"
                                                         "i4981"
                                                         "i4979"
                                                         "i4977"
                                                         "i4975"
                                                         "i4973"
                                                         "i4971"
                                                         "i4969"
                                                         "i4967"
                                                         "i4965"
                                                         "i4963"
                                                         "i4961"
                                                         "i4959"
                                                         "i4957"
                                                         "i4955"
                                                         "i4953"
                                                         "i4951"
                                                         "i4949"
                                                         "i4947"
                                                         "i4945"
                                                         "i4943"
                                                         "i4941"
                                                         "i4939"
                                                         "i4937"
                                                         "i4935"
                                                         "i4933"
                                                         "i4931"
                                                         "i4929"
                                                         "i4927"
                                                         "i4925"
                                                         "i4923"
                                                         "i4921"
                                                         "i4919"
                                                         "i4917"
                                                         "i4916"
                                                         "i4914"
                                                         "i4912"
                                                         "i4910"
                                                         "i4908"
                                                         "i4906"
                                                         "i4904"
                                                         "i4902"
                                                         "i4900"))
                                                      #(ribcage
                                                        (define-structure
                                                          and-map*)
                                                        ((top) (top))
                                                        ("i4803" "i4801")))
                                                     (hygiene guile)))
                                              'eval
                                              (if (#{free-id=?\ 5063}#
                                                    #{x\ 6552}#
                                                    '#(syntax-object
                                                       expand
                                                       ((top)
                                                        #(ribcage () () ())
                                                        #(ribcage () () ())
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(x)
                                                          #((top))
                                                          #("i6551"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(f
                                                            when-list
                                                            situations)
                                                          #((top) (top) (top))
                                                          #("i6545"
                                                            "i6546"
                                                            "i6547"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(e when-list w)
                                                          #((top) (top) (top))
                                                          #("i6542"
                                                            "i6543"
                                                            "i6544"))
                                                        #(ribcage
                                                          (lambda-var-list
                                                            gen-var
                                                            strip
                                                            chi-lambda-case
                                                            lambda*-formals
                                                            chi-simple-lambda
                                                            lambda-formals
                                                            ellipsis?
                                                            chi-void
                                                            eval-local-transformer
                                                            chi-local-syntax
                                                            chi-body
                                                            chi-macro
                                                            chi-application
                                                            chi-expr
                                                            chi
                                                            chi-top
                                                            syntax-type
                                                            chi-when-list
                                                            chi-install-global
                                                            chi-top-sequence
                                                            chi-sequence
                                                            source-wrap
                                                            wrap
                                                            bound-id-member?
                                                            distinct-bound-ids?
                                                            valid-bound-ids?
                                                            bound-id=?
                                                            free-id=?
                                                            id-var-name
                                                            same-marks?
                                                            join-marks
                                                            join-wraps
                                                            smart-append
                                                            make-binding-wrap
                                                            extend-ribcage!
                                                            make-empty-ribcage
                                                            new-mark
                                                            anti-mark
                                                            the-anti-mark
                                                            top-marked?
                                                            top-wrap
                                                            empty-wrap
                                                            set-ribcage-labels!
                                                            set-ribcage-marks!
                                                            set-ribcage-symnames!
                                                            ribcage-labels
                                                            ribcage-marks
                                                            ribcage-symnames
                                                            ribcage?
                                                            make-ribcage
                                                            gen-labels
                                                            gen-label
                                                            make-rename
                                                            rename-marks
                                                            rename-new
                                                            rename-old
                                                            subst-rename?
                                                            wrap-subst
                                                            wrap-marks
                                                            make-wrap
                                                            id-sym-name&marks
                                                            id-sym-name
                                                            id?
                                                            nonsymbol-id?
                                                            global-extend
                                                            lookup
                                                            macros-only-env
                                                            extend-var-env
                                                            extend-env
                                                            null-env
                                                            binding-value
                                                            binding-type
                                                            make-binding
                                                            arg-check
                                                            source-annotation
                                                            no-source
                                                            set-syntax-object-module!
                                                            set-syntax-object-wrap!
                                                            set-syntax-object-expression!
                                                            syntax-object-module
                                                            syntax-object-wrap
                                                            syntax-object-expression
                                                            syntax-object?
                                                            make-syntax-object
                                                            build-lexical-var
                                                            build-letrec
                                                            build-named-let
                                                            build-let
                                                            build-sequence
                                                            build-data
                                                            build-primref
                                                            build-lambda-case
                                                            build-case-lambda
                                                            build-simple-lambda
                                                            build-global-definition
                                                            maybe-name-value!
                                                            build-global-assignment
                                                            build-global-reference
                                                            analyze-variable
                                                            build-lexical-assignment
                                                            build-lexical-reference
                                                            build-dynlet
                                                            build-conditional
                                                            build-application
                                                            build-void
                                                            decorate-source
                                                            get-global-definition-hook
                                                            put-global-definition-hook
                                                            gensym-hook
                                                            local-eval-hook
                                                            top-level-eval-hook
                                                            fx<
                                                            fx=
                                                            fx-
                                                            fx+
                                                            *mode*
                                                            noexpand)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("i5118"
                                                           "i5116"
                                                           "i5114"
                                                           "i5112"
                                                           "i5110"
                                                           "i5108"
                                                           "i5106"
                                                           "i5104"
                                                           "i5102"
                                                           "i5100"
                                                           "i5098"
                                                           "i5096"
                                                           "i5094"
                                                           "i5092"
                                                           "i5090"
                                                           "i5088"
                                                           "i5086"
                                                           "i5084"
                                                           "i5082"
                                                           "i5080"
                                                           "i5078"
                                                           "i5076"
                                                           "i5074"
                                                           "i5072"
                                                           "i5070"
                                                           "i5068"
                                                           "i5066"
                                                           "i5064"
                                                           "i5062"
                                                           "i5060"
                                                           "i5058"
                                                           "i5056"
                                                           "i5054"
                                                           "i5052"
                                                           "i5050"
                                                           "i5048"
                                                           "i5047"
                                                           "i5046"
                                                           "i5044"
                                                           "i5043"
                                                           "i5042"
                                                           "i5041"
                                                           "i5040"
                                                           "i5038"
                                                           "i5036"
                                                           "i5034"
                                                           "i5032"
                                                           "i5030"
                                                           "i5028"
                                                           "i5026"
                                                           "i5024"
                                                           "i5021"
                                                           "i5019"
                                                           "i5018"
                                                           "i5017"
                                                           "i5016"
                                                           "i5015"
                                                           "i5014"
                                                           "i5012"
                                                           "i5010"
                                                           "i5008"
                                                           "i5006"
                                                           "i5005"
                                                           "i5003"
                                                           "i5001"
                                                           "i4999"
                                                           "i4997"
                                                           "i4995"
                                                           "i4993"
                                                           "i4991"
                                                           "i4990"
                                                           "i4988"
                                                           "i4986"
                                                           "i4985"
                                                           "i4984"
                                                           "i4982"
                                                           "i4981"
                                                           "i4979"
                                                           "i4977"
                                                           "i4975"
                                                           "i4973"
                                                           "i4971"
                                                           "i4969"
                                                           "i4967"
                                                           "i4965"
                                                           "i4963"
                                                           "i4961"
                                                           "i4959"
                                                           "i4957"
                                                           "i4955"
                                                           "i4953"
                                                           "i4951"
                                                           "i4949"
                                                           "i4947"
                                                           "i4945"
                                                           "i4943"
                                                           "i4941"
                                                           "i4939"
                                                           "i4937"
                                                           "i4935"
                                                           "i4933"
                                                           "i4931"
                                                           "i4929"
                                                           "i4927"
                                                           "i4925"
                                                           "i4923"
                                                           "i4921"
                                                           "i4919"
                                                           "i4917"
                                                           "i4916"
                                                           "i4914"
                                                           "i4912"
                                                           "i4910"
                                                           "i4908"
                                                           "i4906"
                                                           "i4904"
                                                           "i4902"
                                                           "i4900"))
                                                        #(ribcage
                                                          (define-structure
                                                            and-map*)
                                                          ((top) (top))
                                                          ("i4803" "i4801")))
                                                       (hygiene guile)))
                                                'expand
                                                (syntax-violation
                                                  'eval-when
                                                  "invalid situation"
                                                  #{e\ 6539}#
                                                  (#{wrap\ 5073}#
                                                    #{x\ 6552}#
                                                    #{w\ 6541}#
                                                    #f)))))))
                                      #{situations\ 6550}#))))))
                 (#{f\ 6548}# #{when-list\ 6540}# (quote ())))))
           (#{chi-install-global\ 5081}#
             (lambda (#{name\ 6562}# #{e\ 6563}#)
               (#{build-global-definition\ 4944}#
                 #f
                 #{name\ 6562}#
                 (#{build-application\ 4926}#
                   #f
                   (#{build-primref\ 4952}#
                     #f
                     'make-syntax-transformer)
                   (list (#{build-data\ 4954}# #f #{name\ 6562}#)
                         (#{build-data\ 4954}# #f (quote macro))
                         (#{build-application\ 4926}#
                           #f
                           (#{build-primref\ 4952}# #f (quote cons))
                           (list #{e\ 6563}#
                                 (#{build-application\ 4926}#
                                   #f
                                   (#{build-primref\ 4952}#
                                     #f
                                     'module-name)
                                   (list (#{build-application\ 4926}#
                                           #f
                                           (#{build-primref\ 4952}#
                                             #f
                                             'current-module)
                                           '()))))))))))
           (#{chi-top-sequence\ 5079}#
             (lambda (#{body\ 6577}#
                      #{r\ 6578}#
                      #{w\ 6579}#
                      #{s\ 6580}#
                      #{m\ 6581}#
                      #{esew\ 6582}#
                      #{mod\ 6583}#)
               (#{build-sequence\ 4956}#
                 #{s\ 6580}#
                 (letrec ((#{dobody\ 6600}#
                            (lambda (#{body\ 6601}#
                                     #{r\ 6602}#
                                     #{w\ 6603}#
                                     #{m\ 6604}#
                                     #{esew\ 6605}#
                                     #{mod\ 6606}#
                                     #{module\ 6607}#
                                     #{out\ 6608}#)
                              (if (null? #{body\ 6601}#)
                                (reverse #{out\ 6608}#)
                                (let ((#{first\ 6611}#
                                        (#{chi-top\ 5087}#
                                          (car #{body\ 6601}#)
                                          #{r\ 6602}#
                                          #{w\ 6603}#
                                          #{m\ 6604}#
                                          #{esew\ 6605}#
                                          #{mod\ 6606}#)))
                                  (let ((#{new-module\ 6613}#
                                          (current-module)))
                                    (#{dobody\ 6600}#
                                      (cdr #{body\ 6601}#)
                                      #{r\ 6602}#
                                      #{w\ 6603}#
                                      #{m\ 6604}#
                                      #{esew\ 6605}#
                                      (if (eq? #{module\ 6607}#
                                               #{new-module\ 6613}#)
                                        #{mod\ 6606}#
                                        (cons 'hygiene
                                              (module-name
                                                #{new-module\ 6613}#)))
                                      #{new-module\ 6613}#
                                      (cons #{first\ 6611}#
                                            #{out\ 6608}#))))))))
                   (#{dobody\ 6600}#
                     #{body\ 6577}#
                     #{r\ 6578}#
                     #{w\ 6579}#
                     #{m\ 6581}#
                     #{esew\ 6582}#
                     #{mod\ 6583}#
                     (current-module)
                     '())))))
           (#{chi-sequence\ 5077}#
             (lambda (#{body\ 6614}#
                      #{r\ 6615}#
                      #{w\ 6616}#
                      #{s\ 6617}#
                      #{mod\ 6618}#)
               (#{build-sequence\ 4956}#
                 #{s\ 6617}#
                 (letrec ((#{dobody\ 6629}#
                            (lambda (#{body\ 6630}#
                                     #{r\ 6631}#
                                     #{w\ 6632}#
                                     #{mod\ 6633}#)
                              (if (null? #{body\ 6630}#)
                                '()
                                (let ((#{first\ 6635}#
                                        (#{chi\ 5089}#
                                          (car #{body\ 6630}#)
                                          #{r\ 6631}#
                                          #{w\ 6632}#
                                          #{mod\ 6633}#)))
                                  (cons #{first\ 6635}#
                                        (#{dobody\ 6629}#
                                          (cdr #{body\ 6630}#)
                                          #{r\ 6631}#
                                          #{w\ 6632}#
                                          #{mod\ 6633}#)))))))
                   (#{dobody\ 6629}#
                     #{body\ 6614}#
                     #{r\ 6615}#
                     #{w\ 6616}#
                     #{mod\ 6618}#)))))
           (#{source-wrap\ 5075}#
             (lambda (#{x\ 6636}#
                      #{w\ 6637}#
                      #{s\ 6638}#
                      #{defmod\ 6639}#)
               (#{wrap\ 5073}#
                 (#{decorate-source\ 4922}#
                   #{x\ 6636}#
                   #{s\ 6638}#)
                 #{w\ 6637}#
                 #{defmod\ 6639}#)))
           (#{wrap\ 5073}#
             (lambda (#{x\ 6644}# #{w\ 6645}# #{defmod\ 6646}#)
               (if (if (null? (#{wrap-marks\ 5011}# #{w\ 6645}#))
                     (null? (#{wrap-subst\ 5013}# #{w\ 6645}#))
                     #f)
                 #{x\ 6644}#
                 (if (#{syntax-object?\ 4968}# #{x\ 6644}#)
                   (#{make-syntax-object\ 4966}#
                     (#{syntax-object-expression\ 4970}# #{x\ 6644}#)
                     (#{join-wraps\ 5055}#
                       #{w\ 6645}#
                       (#{syntax-object-wrap\ 4972}# #{x\ 6644}#))
                     (#{syntax-object-module\ 4974}# #{x\ 6644}#))
                   (if (null? #{x\ 6644}#)
                     #{x\ 6644}#
                     (#{make-syntax-object\ 4966}#
                       #{x\ 6644}#
                       #{w\ 6645}#
                       #{defmod\ 6646}#))))))
           (#{bound-id-member?\ 5071}#
             (lambda (#{x\ 6659}# #{list\ 6660}#)
               (if (not (null? #{list\ 6660}#))
                 (let ((#{t\ 6667}#
                         (#{bound-id=?\ 5065}#
                           #{x\ 6659}#
                           (car #{list\ 6660}#))))
                   (if #{t\ 6667}#
                     #{t\ 6667}#
                     (#{bound-id-member?\ 5071}#
                       #{x\ 6659}#
                       (cdr #{list\ 6660}#))))
                 #f)))
           (#{distinct-bound-ids?\ 5069}#
             (lambda (#{ids\ 6669}#)
               (letrec ((#{distinct?\ 6673}#
                          (lambda (#{ids\ 6674}#)
                            (let ((#{t\ 6677}# (null? #{ids\ 6674}#)))
                              (if #{t\ 6677}#
                                #{t\ 6677}#
                                (if (not (#{bound-id-member?\ 5071}#
                                           (car #{ids\ 6674}#)
                                           (cdr #{ids\ 6674}#)))
                                  (#{distinct?\ 6673}# (cdr #{ids\ 6674}#))
                                  #f))))))
                 (#{distinct?\ 6673}# #{ids\ 6669}#))))
           (#{valid-bound-ids?\ 5067}#
             (lambda (#{ids\ 6681}#)
               (if (letrec ((#{all-ids?\ 6686}#
                              (lambda (#{ids\ 6687}#)
                                (let ((#{t\ 6690}# (null? #{ids\ 6687}#)))
                                  (if #{t\ 6690}#
                                    #{t\ 6690}#
                                    (if (#{id?\ 5004}# (car #{ids\ 6687}#))
                                      (#{all-ids?\ 6686}# (cdr #{ids\ 6687}#))
                                      #f))))))
                     (#{all-ids?\ 6686}# #{ids\ 6681}#))
                 (#{distinct-bound-ids?\ 5069}# #{ids\ 6681}#)
                 #f)))
           (#{bound-id=?\ 5065}#
             (lambda (#{i\ 6695}# #{j\ 6696}#)
               (if (if (#{syntax-object?\ 4968}# #{i\ 6695}#)
                     (#{syntax-object?\ 4968}# #{j\ 6696}#)
                     #f)
                 (if (eq? (#{syntax-object-expression\ 4970}# #{i\ 6695}#)
                          (#{syntax-object-expression\ 4970}# #{j\ 6696}#))
                   (#{same-marks?\ 5059}#
                     (#{wrap-marks\ 5011}#
                       (#{syntax-object-wrap\ 4972}# #{i\ 6695}#))
                     (#{wrap-marks\ 5011}#
                       (#{syntax-object-wrap\ 4972}# #{j\ 6696}#)))
                   #f)
                 (eq? #{i\ 6695}# #{j\ 6696}#))))
           (#{free-id=?\ 5063}#
             (lambda (#{i\ 6703}# #{j\ 6704}#)
               (if (eq? (let ((#{x\ 6710}# #{i\ 6703}#))
                          (if (#{syntax-object?\ 4968}# #{x\ 6710}#)
                            (#{syntax-object-expression\ 4970}# #{x\ 6710}#)
                            #{x\ 6710}#))
                        (let ((#{x\ 6713}# #{j\ 6704}#))
                          (if (#{syntax-object?\ 4968}# #{x\ 6713}#)
                            (#{syntax-object-expression\ 4970}# #{x\ 6713}#)
                            #{x\ 6713}#)))
                 (eq? (#{id-var-name\ 5061}# #{i\ 6703}# (quote (())))
                      (#{id-var-name\ 5061}# #{j\ 6704}# (quote (()))))
                 #f)))
           (#{id-var-name\ 5061}#
             (lambda (#{id\ 6717}# #{w\ 6718}#)
               (letrec ((#{search-vector-rib\ 6727}#
                          (lambda (#{sym\ 6739}#
                                   #{subst\ 6740}#
                                   #{marks\ 6741}#
                                   #{symnames\ 6742}#
                                   #{ribcage\ 6743}#)
                            (let ((#{n\ 6750}#
                                    (vector-length #{symnames\ 6742}#)))
                              (letrec ((#{f\ 6753}#
                                         (lambda (#{i\ 6754}#)
                                           (if (#{fx=\ 4909}#
                                                 #{i\ 6754}#
                                                 #{n\ 6750}#)
                                             (#{search\ 6723}#
                                               #{sym\ 6739}#
                                               (cdr #{subst\ 6740}#)
                                               #{marks\ 6741}#)
                                             (if (if (eq? (vector-ref
                                                            #{symnames\ 6742}#
                                                            #{i\ 6754}#)
                                                          #{sym\ 6739}#)
                                                   (#{same-marks?\ 5059}#
                                                     #{marks\ 6741}#
                                                     (vector-ref
                                                       (#{ribcage-marks\ 5031}#
                                                         #{ribcage\ 6743}#)
                                                       #{i\ 6754}#))
                                                   #f)
                                               (values
                                                 (vector-ref
                                                   (#{ribcage-labels\ 5033}#
                                                     #{ribcage\ 6743}#)
                                                   #{i\ 6754}#)
                                                 #{marks\ 6741}#)
                                               (#{f\ 6753}#
                                                 (#{fx+\ 4905}#
                                                   #{i\ 6754}#
                                                   1)))))))
                                (#{f\ 6753}# 0)))))
                        (#{search-list-rib\ 6725}#
                          (lambda (#{sym\ 6762}#
                                   #{subst\ 6763}#
                                   #{marks\ 6764}#
                                   #{symnames\ 6765}#
                                   #{ribcage\ 6766}#)
                            (letrec ((#{f\ 6775}#
                                       (lambda (#{symnames\ 6776}# #{i\ 6777}#)
                                         (if (null? #{symnames\ 6776}#)
                                           (#{search\ 6723}#
                                             #{sym\ 6762}#
                                             (cdr #{subst\ 6763}#)
                                             #{marks\ 6764}#)
                                           (if (if (eq? (car #{symnames\ 6776}#)
                                                        #{sym\ 6762}#)
                                                 (#{same-marks?\ 5059}#
                                                   #{marks\ 6764}#
                                                   (list-ref
                                                     (#{ribcage-marks\ 5031}#
                                                       #{ribcage\ 6766}#)
                                                     #{i\ 6777}#))
                                                 #f)
                                             (values
                                               (list-ref
                                                 (#{ribcage-labels\ 5033}#
                                                   #{ribcage\ 6766}#)
                                                 #{i\ 6777}#)
                                               #{marks\ 6764}#)
                                             (#{f\ 6775}#
                                               (cdr #{symnames\ 6776}#)
                                               (#{fx+\ 4905}#
                                                 #{i\ 6777}#
                                                 1)))))))
                              (#{f\ 6775}# #{symnames\ 6765}# 0))))
                        (#{search\ 6723}#
                          (lambda (#{sym\ 6785}#
                                   #{subst\ 6786}#
                                   #{marks\ 6787}#)
                            (if (null? #{subst\ 6786}#)
                              (values #f #{marks\ 6787}#)
                              (let ((#{fst\ 6792}# (car #{subst\ 6786}#)))
                                (if (eq? #{fst\ 6792}# (quote shift))
                                  (#{search\ 6723}#
                                    #{sym\ 6785}#
                                    (cdr #{subst\ 6786}#)
                                    (cdr #{marks\ 6787}#))
                                  (let ((#{symnames\ 6794}#
                                          (#{ribcage-symnames\ 5029}#
                                            #{fst\ 6792}#)))
                                    (if (vector? #{symnames\ 6794}#)
                                      (#{search-vector-rib\ 6727}#
                                        #{sym\ 6785}#
                                        #{subst\ 6786}#
                                        #{marks\ 6787}#
                                        #{symnames\ 6794}#
                                        #{fst\ 6792}#)
                                      (#{search-list-rib\ 6725}#
                                        #{sym\ 6785}#
                                        #{subst\ 6786}#
                                        #{marks\ 6787}#
                                        #{symnames\ 6794}#
                                        #{fst\ 6792}#)))))))))
                 (if (symbol? #{id\ 6717}#)
                   (let ((#{t\ 6797}#
                           (call-with-values
                             (lambda ()
                               (#{search\ 6723}#
                                 #{id\ 6717}#
                                 (#{wrap-subst\ 5013}# #{w\ 6718}#)
                                 (#{wrap-marks\ 5011}# #{w\ 6718}#)))
                             (lambda (#{x\ 6799}# . #{ignore\ 6800}#)
                               #{x\ 6799}#))))
                     (if #{t\ 6797}# #{t\ 6797}# #{id\ 6717}#))
                   (if (#{syntax-object?\ 4968}# #{id\ 6717}#)
                     (let ((#{id\ 6808}#
                             (#{syntax-object-expression\ 4970}# #{id\ 6717}#))
                           (#{w1\ 6809}#
                             (#{syntax-object-wrap\ 4972}# #{id\ 6717}#)))
                       (let ((#{marks\ 6811}#
                               (#{join-marks\ 5057}#
                                 (#{wrap-marks\ 5011}# #{w\ 6718}#)
                                 (#{wrap-marks\ 5011}# #{w1\ 6809}#))))
                         (call-with-values
                           (lambda ()
                             (#{search\ 6723}#
                               #{id\ 6808}#
                               (#{wrap-subst\ 5013}# #{w\ 6718}#)
                               #{marks\ 6811}#))
                           (lambda (#{new-id\ 6812}# #{marks\ 6813}#)
                             (let ((#{t\ 6818}# #{new-id\ 6812}#))
                               (if #{t\ 6818}#
                                 #{t\ 6818}#
                                 (let ((#{t\ 6821}#
                                         (call-with-values
                                           (lambda ()
                                             (#{search\ 6723}#
                                               #{id\ 6808}#
                                               (#{wrap-subst\ 5013}#
                                                 #{w1\ 6809}#)
                                               #{marks\ 6813}#))
                                           (lambda (#{x\ 6823}#
                                                    .
                                                    #{ignore\ 6824}#)
                                             #{x\ 6823}#))))
                                   (if #{t\ 6821}#
                                     #{t\ 6821}#
                                     #{id\ 6808}#))))))))
                     (syntax-violation
                       'id-var-name
                       "invalid id"
                       #{id\ 6717}#))))))
           (#{same-marks?\ 5059}#
             (lambda (#{x\ 6829}# #{y\ 6830}#)
               (let ((#{t\ 6835}# (eq? #{x\ 6829}# #{y\ 6830}#)))
                 (if #{t\ 6835}#
                   #{t\ 6835}#
                   (if (not (null? #{x\ 6829}#))
                     (if (not (null? #{y\ 6830}#))
                       (if (eq? (car #{x\ 6829}#) (car #{y\ 6830}#))
                         (#{same-marks?\ 5059}#
                           (cdr #{x\ 6829}#)
                           (cdr #{y\ 6830}#))
                         #f)
                       #f)
                     #f)))))
           (#{join-marks\ 5057}#
             (lambda (#{m1\ 6841}# #{m2\ 6842}#)
               (#{smart-append\ 5053}#
                 #{m1\ 6841}#
                 #{m2\ 6842}#)))
           (#{join-wraps\ 5055}#
             (lambda (#{w1\ 6845}# #{w2\ 6846}#)
               (let ((#{m1\ 6851}#
                       (#{wrap-marks\ 5011}# #{w1\ 6845}#))
                     (#{s1\ 6852}#
                       (#{wrap-subst\ 5013}# #{w1\ 6845}#)))
                 (if (null? #{m1\ 6851}#)
                   (if (null? #{s1\ 6852}#)
                     #{w2\ 6846}#
                     (#{make-wrap\ 5009}#
                       (#{wrap-marks\ 5011}# #{w2\ 6846}#)
                       (#{smart-append\ 5053}#
                         #{s1\ 6852}#
                         (#{wrap-subst\ 5013}# #{w2\ 6846}#))))
                   (#{make-wrap\ 5009}#
                     (#{smart-append\ 5053}#
                       #{m1\ 6851}#
                       (#{wrap-marks\ 5011}# #{w2\ 6846}#))
                     (#{smart-append\ 5053}#
                       #{s1\ 6852}#
                       (#{wrap-subst\ 5013}# #{w2\ 6846}#)))))))
           (#{smart-append\ 5053}#
             (lambda (#{m1\ 6853}# #{m2\ 6854}#)
               (if (null? #{m2\ 6854}#)
                 #{m1\ 6853}#
                 (append #{m1\ 6853}# #{m2\ 6854}#))))
           (#{make-binding-wrap\ 5051}#
             (lambda (#{ids\ 6857}# #{labels\ 6858}# #{w\ 6859}#)
               (if (null? #{ids\ 6857}#)
                 #{w\ 6859}#
                 (#{make-wrap\ 5009}#
                   (#{wrap-marks\ 5011}# #{w\ 6859}#)
                   (cons (let ((#{labelvec\ 6864}#
                                 (list->vector #{labels\ 6858}#)))
                           (let ((#{n\ 6866}#
                                   (vector-length #{labelvec\ 6864}#)))
                             (let ((#{symnamevec\ 6869}#
                                     (make-vector #{n\ 6866}#))
                                   (#{marksvec\ 6870}#
                                     (make-vector #{n\ 6866}#)))
                               (begin
                                 (letrec ((#{f\ 6874}#
                                            (lambda (#{ids\ 6875}# #{i\ 6876}#)
                                              (if (not (null? #{ids\ 6875}#))
                                                (call-with-values
                                                  (lambda ()
                                                    (#{id-sym-name&marks\ 5007}#
                                                      (car #{ids\ 6875}#)
                                                      #{w\ 6859}#))
                                                  (lambda (#{symname\ 6877}#
                                                           #{marks\ 6878}#)
                                                    (begin
                                                      (vector-set!
                                                        #{symnamevec\ 6869}#
                                                        #{i\ 6876}#
                                                        #{symname\ 6877}#)
                                                      (vector-set!
                                                        #{marksvec\ 6870}#
                                                        #{i\ 6876}#
                                                        #{marks\ 6878}#)
                                                      (#{f\ 6874}#
                                                        (cdr #{ids\ 6875}#)
                                                        (#{fx+\ 4905}#
                                                          #{i\ 6876}#
                                                          1)))))))))
                                   (#{f\ 6874}# #{ids\ 6857}# 0))
                                 (#{make-ribcage\ 5025}#
                                   #{symnamevec\ 6869}#
                                   #{marksvec\ 6870}#
                                   #{labelvec\ 6864}#)))))
                         (#{wrap-subst\ 5013}# #{w\ 6859}#))))))
           (#{extend-ribcage!\ 5049}#
             (lambda (#{ribcage\ 6881}# #{id\ 6882}# #{label\ 6883}#)
               (begin
                 (#{set-ribcage-symnames!\ 5035}#
                   #{ribcage\ 6881}#
                   (cons (#{syntax-object-expression\ 4970}# #{id\ 6882}#)
                         (#{ribcage-symnames\ 5029}# #{ribcage\ 6881}#)))
                 (#{set-ribcage-marks!\ 5037}#
                   #{ribcage\ 6881}#
                   (cons (#{wrap-marks\ 5011}#
                           (#{syntax-object-wrap\ 4972}# #{id\ 6882}#))
                         (#{ribcage-marks\ 5031}# #{ribcage\ 6881}#)))
                 (#{set-ribcage-labels!\ 5039}#
                   #{ribcage\ 6881}#
                   (cons #{label\ 6883}#
                         (#{ribcage-labels\ 5033}# #{ribcage\ 6881}#))))))
           (#{anti-mark\ 5045}#
             (lambda (#{w\ 6887}#)
               (#{make-wrap\ 5009}#
                 (cons #f (#{wrap-marks\ 5011}# #{w\ 6887}#))
                 (cons 'shift
                       (#{wrap-subst\ 5013}# #{w\ 6887}#)))))
           (#{set-ribcage-labels!\ 5039}#
             (lambda (#{x\ 6890}# #{update\ 6891}#)
               (vector-set! #{x\ 6890}# 3 #{update\ 6891}#)))
           (#{set-ribcage-marks!\ 5037}#
             (lambda (#{x\ 6894}# #{update\ 6895}#)
               (vector-set! #{x\ 6894}# 2 #{update\ 6895}#)))
           (#{set-ribcage-symnames!\ 5035}#
             (lambda (#{x\ 6898}# #{update\ 6899}#)
               (vector-set! #{x\ 6898}# 1 #{update\ 6899}#)))
           (#{ribcage-labels\ 5033}#
             (lambda (#{x\ 6902}#) (vector-ref #{x\ 6902}# 3)))
           (#{ribcage-marks\ 5031}#
             (lambda (#{x\ 6904}#) (vector-ref #{x\ 6904}# 2)))
           (#{ribcage-symnames\ 5029}#
             (lambda (#{x\ 6906}#) (vector-ref #{x\ 6906}# 1)))
           (#{ribcage?\ 5027}#
             (lambda (#{x\ 6908}#)
               (if (vector? #{x\ 6908}#)
                 (if (= (vector-length #{x\ 6908}#) 4)
                   (eq? (vector-ref #{x\ 6908}# 0) (quote ribcage))
                   #f)
                 #f)))
           (#{make-ribcage\ 5025}#
             (lambda (#{symnames\ 6913}#
                      #{marks\ 6914}#
                      #{labels\ 6915}#)
               (vector
                 'ribcage
                 #{symnames\ 6913}#
                 #{marks\ 6914}#
                 #{labels\ 6915}#)))
           (#{gen-labels\ 5022}#
             (lambda (#{ls\ 6919}#)
               (if (null? #{ls\ 6919}#)
                 '()
                 (cons (#{gen-label\ 5020}#)
                       (#{gen-labels\ 5022}# (cdr #{ls\ 6919}#))))))
           (#{gen-label\ 5020}#
             (lambda () (symbol->string (gensym "i"))))
           (#{wrap-subst\ 5013}# cdr)
           (#{wrap-marks\ 5011}# car)
           (#{make-wrap\ 5009}# cons)
           (#{id-sym-name&marks\ 5007}#
             (lambda (#{x\ 6921}# #{w\ 6922}#)
               (if (#{syntax-object?\ 4968}# #{x\ 6921}#)
                 (values
                   (#{syntax-object-expression\ 4970}# #{x\ 6921}#)
                   (#{join-marks\ 5057}#
                     (#{wrap-marks\ 5011}# #{w\ 6922}#)
                     (#{wrap-marks\ 5011}#
                       (#{syntax-object-wrap\ 4972}# #{x\ 6921}#))))
                 (values
                   #{x\ 6921}#
                   (#{wrap-marks\ 5011}# #{w\ 6922}#)))))
           (#{id?\ 5004}#
             (lambda (#{x\ 6925}#)
               (if (symbol? #{x\ 6925}#)
                 #t
                 (if (#{syntax-object?\ 4968}# #{x\ 6925}#)
                   (symbol?
                     (#{syntax-object-expression\ 4970}# #{x\ 6925}#))
                   #f))))
           (#{nonsymbol-id?\ 5002}#
             (lambda (#{x\ 6932}#)
               (if (#{syntax-object?\ 4968}# #{x\ 6932}#)
                 (symbol?
                   (#{syntax-object-expression\ 4970}# #{x\ 6932}#))
                 #f)))
           (#{global-extend\ 5000}#
             (lambda (#{type\ 6936}# #{sym\ 6937}# #{val\ 6938}#)
               (#{put-global-definition-hook\ 4918}#
                 #{sym\ 6937}#
                 #{type\ 6936}#
                 #{val\ 6938}#)))
           (#{lookup\ 4998}#
             (lambda (#{x\ 6942}# #{r\ 6943}# #{mod\ 6944}#)
               (let ((#{t\ 6950}# (assq #{x\ 6942}# #{r\ 6943}#)))
                 (if #{t\ 6950}#
                   (cdr #{t\ 6950}#)
                   (if (symbol? #{x\ 6942}#)
                     (let ((#{t\ 6956}#
                             (#{get-global-definition-hook\ 4920}#
                               #{x\ 6942}#
                               #{mod\ 6944}#)))
                       (if #{t\ 6956}# #{t\ 6956}# (quote (global))))
                     '(displaced-lexical))))))
           (#{macros-only-env\ 4996}#
             (lambda (#{r\ 6961}#)
               (if (null? #{r\ 6961}#)
                 '()
                 (let ((#{a\ 6964}# (car #{r\ 6961}#)))
                   (if (eq? (cadr #{a\ 6964}#) (quote macro))
                     (cons #{a\ 6964}#
                           (#{macros-only-env\ 4996}# (cdr #{r\ 6961}#)))
                     (#{macros-only-env\ 4996}# (cdr #{r\ 6961}#)))))))
           (#{extend-var-env\ 4994}#
             (lambda (#{labels\ 6965}# #{vars\ 6966}# #{r\ 6967}#)
               (if (null? #{labels\ 6965}#)
                 #{r\ 6967}#
                 (#{extend-var-env\ 4994}#
                   (cdr #{labels\ 6965}#)
                   (cdr #{vars\ 6966}#)
                   (cons (cons (car #{labels\ 6965}#)
                               (cons (quote lexical) (car #{vars\ 6966}#)))
                         #{r\ 6967}#)))))
           (#{extend-env\ 4992}#
             (lambda (#{labels\ 6972}# #{bindings\ 6973}# #{r\ 6974}#)
               (if (null? #{labels\ 6972}#)
                 #{r\ 6974}#
                 (#{extend-env\ 4992}#
                   (cdr #{labels\ 6972}#)
                   (cdr #{bindings\ 6973}#)
                   (cons (cons (car #{labels\ 6972}#)
                               (car #{bindings\ 6973}#))
                         #{r\ 6974}#)))))
           (#{binding-value\ 4989}# cdr)
           (#{binding-type\ 4987}# car)
           (#{source-annotation\ 4983}#
             (lambda (#{x\ 6978}#)
               (if (#{syntax-object?\ 4968}# #{x\ 6978}#)
                 (#{source-annotation\ 4983}#
                   (#{syntax-object-expression\ 4970}# #{x\ 6978}#))
                 (if (pair? #{x\ 6978}#)
                   (let ((#{props\ 6985}# (source-properties #{x\ 6978}#)))
                     (if (pair? #{props\ 6985}#) #{props\ 6985}# #f))
                   #f))))
           (#{set-syntax-object-module!\ 4980}#
             (lambda (#{x\ 6987}# #{update\ 6988}#)
               (vector-set! #{x\ 6987}# 3 #{update\ 6988}#)))
           (#{set-syntax-object-wrap!\ 4978}#
             (lambda (#{x\ 6991}# #{update\ 6992}#)
               (vector-set! #{x\ 6991}# 2 #{update\ 6992}#)))
           (#{set-syntax-object-expression!\ 4976}#
             (lambda (#{x\ 6995}# #{update\ 6996}#)
               (vector-set! #{x\ 6995}# 1 #{update\ 6996}#)))
           (#{syntax-object-module\ 4974}#
             (lambda (#{x\ 6999}#) (vector-ref #{x\ 6999}# 3)))
           (#{syntax-object-wrap\ 4972}#
             (lambda (#{x\ 7001}#) (vector-ref #{x\ 7001}# 2)))
           (#{syntax-object-expression\ 4970}#
             (lambda (#{x\ 7003}#) (vector-ref #{x\ 7003}# 1)))
           (#{syntax-object?\ 4968}#
             (lambda (#{x\ 7005}#)
               (if (vector? #{x\ 7005}#)
                 (if (= (vector-length #{x\ 7005}#) 4)
                   (eq? (vector-ref #{x\ 7005}# 0)
                        'syntax-object)
                   #f)
                 #f)))
           (#{make-syntax-object\ 4966}#
             (lambda (#{expression\ 7010}#
                      #{wrap\ 7011}#
                      #{module\ 7012}#)
               (vector
                 'syntax-object
                 #{expression\ 7010}#
                 #{wrap\ 7011}#
                 #{module\ 7012}#)))
           (#{build-letrec\ 4962}#
             (lambda (#{src\ 7016}#
                      #{ids\ 7017}#
                      #{vars\ 7018}#
                      #{val-exps\ 7019}#
                      #{body-exp\ 7020}#)
               (if (null? #{vars\ 7018}#)
                 #{body-exp\ 7020}#
                 (let ((#{atom-key\ 7028}# (fluid-ref #{*mode*\ 4903}#)))
                   (if (memv #{atom-key\ 7028}# (quote (c)))
                     (begin
                       (for-each
                         #{maybe-name-value!\ 4942}#
                         #{ids\ 7017}#
                         #{val-exps\ 7019}#)
                       ((@ (language tree-il) make-letrec)
                        #{src\ 7016}#
                        #{ids\ 7017}#
                        #{vars\ 7018}#
                        #{val-exps\ 7019}#
                        #{body-exp\ 7020}#))
                     (#{decorate-source\ 4922}#
                       (list 'letrec
                             (map list #{vars\ 7018}# #{val-exps\ 7019}#)
                             #{body-exp\ 7020}#)
                       #{src\ 7016}#))))))
           (#{build-named-let\ 4960}#
             (lambda (#{src\ 7032}#
                      #{ids\ 7033}#
                      #{vars\ 7034}#
                      #{val-exps\ 7035}#
                      #{body-exp\ 7036}#)
               (let ((#{f\ 7046}# (car #{vars\ 7034}#))
                     (#{f-name\ 7047}# (car #{ids\ 7033}#))
                     (#{vars\ 7048}# (cdr #{vars\ 7034}#))
                     (#{ids\ 7049}# (cdr #{ids\ 7033}#)))
                 (let ((#{atom-key\ 7052}# (fluid-ref #{*mode*\ 4903}#)))
                   (if (memv #{atom-key\ 7052}# (quote (c)))
                     (let ((#{proc\ 7055}#
                             (#{build-simple-lambda\ 4946}#
                               #{src\ 7032}#
                               #{ids\ 7049}#
                               #f
                               #{vars\ 7048}#
                               '()
                               #{body-exp\ 7036}#)))
                       (begin
                         (#{maybe-name-value!\ 4942}#
                           #{f-name\ 7047}#
                           #{proc\ 7055}#)
                         (for-each
                           #{maybe-name-value!\ 4942}#
                           #{ids\ 7049}#
                           #{val-exps\ 7035}#)
                         ((@ (language tree-il) make-letrec)
                          #{src\ 7032}#
                          (list #{f-name\ 7047}#)
                          (list #{f\ 7046}#)
                          (list #{proc\ 7055}#)
                          (#{build-application\ 4926}#
                            #{src\ 7032}#
                            (#{build-lexical-reference\ 4932}#
                              'fun
                              #{src\ 7032}#
                              #{f-name\ 7047}#
                              #{f\ 7046}#)
                            #{val-exps\ 7035}#))))
                     (#{decorate-source\ 4922}#
                       (list 'letrec
                             (list (list #{f\ 7046}#
                                         (list 'lambda
                                               #{vars\ 7048}#
                                               #{body-exp\ 7036}#)))
                             (cons #{f\ 7046}# #{val-exps\ 7035}#))
                       #{src\ 7032}#))))))
           (#{build-let\ 4958}#
             (lambda (#{src\ 7058}#
                      #{ids\ 7059}#
                      #{vars\ 7060}#
                      #{val-exps\ 7061}#
                      #{body-exp\ 7062}#)
               (if (null? #{vars\ 7060}#)
                 #{body-exp\ 7062}#
                 (let ((#{atom-key\ 7070}# (fluid-ref #{*mode*\ 4903}#)))
                   (if (memv #{atom-key\ 7070}# (quote (c)))
                     (begin
                       (for-each
                         #{maybe-name-value!\ 4942}#
                         #{ids\ 7059}#
                         #{val-exps\ 7061}#)
                       ((@ (language tree-il) make-let)
                        #{src\ 7058}#
                        #{ids\ 7059}#
                        #{vars\ 7060}#
                        #{val-exps\ 7061}#
                        #{body-exp\ 7062}#))
                     (#{decorate-source\ 4922}#
                       (list 'let
                             (map list #{vars\ 7060}# #{val-exps\ 7061}#)
                             #{body-exp\ 7062}#)
                       #{src\ 7058}#))))))
           (#{build-sequence\ 4956}#
             (lambda (#{src\ 7074}# #{exps\ 7075}#)
               (if (null? (cdr #{exps\ 7075}#))
                 (car #{exps\ 7075}#)
                 (let ((#{atom-key\ 7080}# (fluid-ref #{*mode*\ 4903}#)))
                   (if (memv #{atom-key\ 7080}# (quote (c)))
                     ((@ (language tree-il) make-sequence)
                      #{src\ 7074}#
                      #{exps\ 7075}#)
                     (#{decorate-source\ 4922}#
                       (cons (quote begin) #{exps\ 7075}#)
                       #{src\ 7074}#))))))
           (#{build-data\ 4954}#
             (lambda (#{src\ 7084}# #{exp\ 7085}#)
               (let ((#{atom-key\ 7090}# (fluid-ref #{*mode*\ 4903}#)))
                 (if (memv #{atom-key\ 7090}# (quote (c)))
                   ((@ (language tree-il) make-const)
                    #{src\ 7084}#
                    #{exp\ 7085}#)
                   (#{decorate-source\ 4922}#
                     (if (if (self-evaluating? #{exp\ 7085}#)
                           (not (vector? #{exp\ 7085}#))
                           #f)
                       #{exp\ 7085}#
                       (list (quote quote) #{exp\ 7085}#))
                     #{src\ 7084}#)))))
           (#{build-primref\ 4952}#
             (lambda (#{src\ 7095}# #{name\ 7096}#)
               (if (equal?
                     (module-name (current-module))
                     '(guile))
                 (let ((#{atom-key\ 7101}# (fluid-ref #{*mode*\ 4903}#)))
                   (if (memv #{atom-key\ 7101}# (quote (c)))
                     ((@ (language tree-il) make-toplevel-ref)
                      #{src\ 7095}#
                      #{name\ 7096}#)
                     (#{decorate-source\ 4922}#
                       #{name\ 7096}#
                       #{src\ 7095}#)))
                 (let ((#{atom-key\ 7106}# (fluid-ref #{*mode*\ 4903}#)))
                   (if (memv #{atom-key\ 7106}# (quote (c)))
                     ((@ (language tree-il) make-module-ref)
                      #{src\ 7095}#
                      '(guile)
                      #{name\ 7096}#
                      #f)
                     (#{decorate-source\ 4922}#
                       (list (quote @@) (quote (guile)) #{name\ 7096}#)
                       #{src\ 7095}#))))))
           (#{build-lambda-case\ 4950}#
             (lambda (#{src\ 7110}#
                      #{req\ 7111}#
                      #{opt\ 7112}#
                      #{rest\ 7113}#
                      #{kw\ 7114}#
                      #{inits\ 7115}#
                      #{vars\ 7116}#
                      #{body\ 7117}#
                      #{else-case\ 7118}#)
               (let ((#{atom-key\ 7130}# (fluid-ref #{*mode*\ 4903}#)))
                 (if (memv #{atom-key\ 7130}# (quote (c)))
                   ((@ (language tree-il) make-lambda-case)
                    #{src\ 7110}#
                    #{req\ 7111}#
                    #{opt\ 7112}#
                    #{rest\ 7113}#
                    #{kw\ 7114}#
                    #{inits\ 7115}#
                    #{vars\ 7116}#
                    #{body\ 7117}#
                    #{else-case\ 7118}#)
                   (let ((#{nreq\ 7135}# (length #{req\ 7111}#)))
                     (let ((#{nopt\ 7137}#
                             (if #{opt\ 7112}# (length #{opt\ 7112}#) 0)))
                       (let ((#{rest-idx\ 7139}#
                               (if #{rest\ 7113}#
                                 (+ #{nreq\ 7135}# #{nopt\ 7137}#)
                                 #f)))
                         (let ((#{allow-other-keys?\ 7143}#
                                 (if #{kw\ 7114}# (car #{kw\ 7114}#) #f)))
                           (let ((#{kw-indices\ 7145}#
                                   (map (lambda (#{x\ 7146}#)
                                          (cons (car #{x\ 7146}#)
                                                (list-index
                                                  #{vars\ 7116}#
                                                  (caddr #{x\ 7146}#))))
                                        (if #{kw\ 7114}#
                                          (cdr #{kw\ 7114}#)
                                          '()))))
                             (let ((#{nargs\ 7149}#
                                     (apply max
                                            (+ #{nreq\ 7135}#
                                               #{nopt\ 7137}#
                                               (if #{rest\ 7113}# 1 0))
                                            (map 1+
                                                 (map cdr
                                                      #{kw-indices\ 7145}#)))))
                               (begin
                                 (let ((#{t\ 7152}#
                                         (= #{nargs\ 7149}#
                                            (length #{vars\ 7116}#)
                                            (+ #{nreq\ 7135}#
                                               (length #{inits\ 7115}#)
                                               (if #{rest\ 7113}# 1 0)))))
                                   (if #{t\ 7152}#
                                     #{t\ 7152}#
                                     (error "something went wrong"
                                            #{req\ 7111}#
                                            #{opt\ 7112}#
                                            #{rest\ 7113}#
                                            #{kw\ 7114}#
                                            #{inits\ 7115}#
                                            #{vars\ 7116}#
                                            #{nreq\ 7135}#
                                            #{nopt\ 7137}#
                                            #{kw-indices\ 7145}#
                                            #{nargs\ 7149}#)))
                                 (#{decorate-source\ 4922}#
                                   (cons (list (cons '(@@ (ice-9 optargs)
                                                          parse-lambda-case)
                                                     (cons (list 'quote
                                                                 (list #{nreq\ 7135}#
                                                                       #{nopt\ 7137}#
                                                                       #{rest-idx\ 7139}#
                                                                       #{nargs\ 7149}#
                                                                       #{allow-other-keys?\ 7143}#
                                                                       #{kw-indices\ 7145}#))
                                                           (cons (cons 'list
                                                                       (map (lambda (#{i\ 7155}#)
                                                                              (list 'lambda
                                                                                    #{vars\ 7116}#
                                                                                    #{i\ 7155}#))
                                                                            #{inits\ 7115}#))
                                                                 '(%%args))))
                                               '=>
                                               (list 'lambda
                                                     '(%%args)
                                                     (cons 'apply
                                                           (cons (list 'lambda
                                                                       #{vars\ 7116}#
                                                                       #{body\ 7117}#)
                                                                 '(%%args)))))
                                         (let ((#{t\ 7160}#
                                                 #{else-case\ 7118}#))
                                           (if #{t\ 7160}#
                                             #{t\ 7160}#
                                             '((%%args
                                                 (scm-error
                                                   'wrong-number-of-args
                                                   #f
                                                   "Wrong number of arguments"
                                                   '()
                                                   %%args))))))
                                   #{src\ 7110}#))))))))))))
           (#{build-case-lambda\ 4948}#
             (lambda (#{src\ 7163}# #{meta\ 7164}# #{body\ 7165}#)
               (let ((#{atom-key\ 7171}# (fluid-ref #{*mode*\ 4903}#)))
                 (if (memv #{atom-key\ 7171}# (quote (c)))
                   ((@ (language tree-il) make-lambda)
                    #{src\ 7163}#
                    #{meta\ 7164}#
                    #{body\ 7165}#)
                   (#{decorate-source\ 4922}#
                     (list 'lambda
                           '%%args
                           (cons (quote cond) #{body\ 7165}#))
                     #{src\ 7163}#)))))
           (#{build-simple-lambda\ 4946}#
             (lambda (#{src\ 7175}#
                      #{req\ 7176}#
                      #{rest\ 7177}#
                      #{vars\ 7178}#
                      #{meta\ 7179}#
                      #{exp\ 7180}#)
               (let ((#{atom-key\ 7189}# (fluid-ref #{*mode*\ 4903}#)))
                 (if (memv #{atom-key\ 7189}# (quote (c)))
                   ((@ (language tree-il) make-lambda)
                    #{src\ 7175}#
                    #{meta\ 7179}#
                    ((@ (language tree-il) make-lambda-case)
                     #{src\ 7175}#
                     #{req\ 7176}#
                     #f
                     #{rest\ 7177}#
                     #f
                     '()
                     #{vars\ 7178}#
                     #{exp\ 7180}#
                     #f))
                   (#{decorate-source\ 4922}#
                     (list 'lambda
                           (if #{rest\ 7177}#
                             (apply cons* #{vars\ 7178}#)
                             #{vars\ 7178}#)
                           #{exp\ 7180}#)
                     #{src\ 7175}#)))))
           (#{build-global-definition\ 4944}#
             (lambda (#{source\ 7193}# #{var\ 7194}# #{exp\ 7195}#)
               (let ((#{atom-key\ 7201}# (fluid-ref #{*mode*\ 4903}#)))
                 (if (memv #{atom-key\ 7201}# (quote (c)))
                   (begin
                     (#{maybe-name-value!\ 4942}#
                       #{var\ 7194}#
                       #{exp\ 7195}#)
                     ((@ (language tree-il) make-toplevel-define)
                      #{source\ 7193}#
                      #{var\ 7194}#
                      #{exp\ 7195}#))
                   (#{decorate-source\ 4922}#
                     (list (quote define) #{var\ 7194}# #{exp\ 7195}#)
                     #{source\ 7193}#)))))
           (#{maybe-name-value!\ 4942}#
             (lambda (#{name\ 7205}# #{val\ 7206}#)
               (if ((@ (language tree-il) lambda?) #{val\ 7206}#)
                 (let ((#{meta\ 7212}#
                         ((@ (language tree-il) lambda-meta)
                          #{val\ 7206}#)))
                   (if (not (assq (quote name) #{meta\ 7212}#))
                     ((setter (@ (language tree-il) lambda-meta))
                      #{val\ 7206}#
                      (acons 'name
                             #{name\ 7205}#
                             #{meta\ 7212}#)))))))
           (#{build-global-assignment\ 4940}#
             (lambda (#{source\ 7213}#
                      #{var\ 7214}#
                      #{exp\ 7215}#
                      #{mod\ 7216}#)
               (#{analyze-variable\ 4936}#
                 #{mod\ 7216}#
                 #{var\ 7214}#
                 (lambda (#{mod\ 7221}# #{var\ 7222}# #{public?\ 7223}#)
                   (let ((#{atom-key\ 7229}# (fluid-ref #{*mode*\ 4903}#)))
                     (if (memv #{atom-key\ 7229}# (quote (c)))
                       ((@ (language tree-il) make-module-set)
                        #{source\ 7213}#
                        #{mod\ 7221}#
                        #{var\ 7222}#
                        #{public?\ 7223}#
                        #{exp\ 7215}#)
                       (#{decorate-source\ 4922}#
                         (list 'set!
                               (list (if #{public?\ 7223}#
                                       '@
                                       '@@)
                                     #{mod\ 7221}#
                                     #{var\ 7222}#)
                               #{exp\ 7215}#)
                         #{source\ 7213}#))))
                 (lambda (#{var\ 7233}#)
                   (let ((#{atom-key\ 7237}# (fluid-ref #{*mode*\ 4903}#)))
                     (if (memv #{atom-key\ 7237}# (quote (c)))
                       ((@ (language tree-il) make-toplevel-set)
                        #{source\ 7213}#
                        #{var\ 7233}#
                        #{exp\ 7215}#)
                       (#{decorate-source\ 4922}#
                         (list (quote set!) #{var\ 7233}# #{exp\ 7215}#)
                         #{source\ 7213}#)))))))
           (#{build-global-reference\ 4938}#
             (lambda (#{source\ 7241}# #{var\ 7242}# #{mod\ 7243}#)
               (#{analyze-variable\ 4936}#
                 #{mod\ 7243}#
                 #{var\ 7242}#
                 (lambda (#{mod\ 7247}# #{var\ 7248}# #{public?\ 7249}#)
                   (let ((#{atom-key\ 7255}# (fluid-ref #{*mode*\ 4903}#)))
                     (if (memv #{atom-key\ 7255}# (quote (c)))
                       ((@ (language tree-il) make-module-ref)
                        #{source\ 7241}#
                        #{mod\ 7247}#
                        #{var\ 7248}#
                        #{public?\ 7249}#)
                       (#{decorate-source\ 4922}#
                         (list (if #{public?\ 7249}# (quote @) (quote @@))
                               #{mod\ 7247}#
                               #{var\ 7248}#)
                         #{source\ 7241}#))))
                 (lambda (#{var\ 7258}#)
                   (let ((#{atom-key\ 7262}# (fluid-ref #{*mode*\ 4903}#)))
                     (if (memv #{atom-key\ 7262}# (quote (c)))
                       ((@ (language tree-il) make-toplevel-ref)
                        #{source\ 7241}#
                        #{var\ 7258}#)
                       (#{decorate-source\ 4922}#
                         #{var\ 7258}#
                         #{source\ 7241}#)))))))
           (#{analyze-variable\ 4936}#
             (lambda (#{mod\ 7265}#
                      #{var\ 7266}#
                      #{modref-cont\ 7267}#
                      #{bare-cont\ 7268}#)
               (if (not #{mod\ 7265}#)
                 (#{bare-cont\ 7268}# #{var\ 7266}#)
                 (let ((#{kind\ 7275}# (car #{mod\ 7265}#))
                       (#{mod\ 7276}# (cdr #{mod\ 7265}#)))
                   (if (memv #{kind\ 7275}# (quote (public)))
                     (#{modref-cont\ 7267}#
                       #{mod\ 7276}#
                       #{var\ 7266}#
                       #t)
                     (if (memv #{kind\ 7275}# (quote (private)))
                       (if (not (equal?
                                  #{mod\ 7276}#
                                  (module-name (current-module))))
                         (#{modref-cont\ 7267}#
                           #{mod\ 7276}#
                           #{var\ 7266}#
                           #f)
                         (#{bare-cont\ 7268}# #{var\ 7266}#))
                       (if (memv #{kind\ 7275}# (quote (bare)))
                         (#{bare-cont\ 7268}# #{var\ 7266}#)
                         (if (memv #{kind\ 7275}# (quote (hygiene)))
                           (if (if (not (equal?
                                          #{mod\ 7276}#
                                          (module-name (current-module))))
                                 (module-variable
                                   (resolve-module #{mod\ 7276}#)
                                   #{var\ 7266}#)
                                 #f)
                             (#{modref-cont\ 7267}#
                               #{mod\ 7276}#
                               #{var\ 7266}#
                               #f)
                             (#{bare-cont\ 7268}# #{var\ 7266}#))
                           (syntax-violation
                             #f
                             "bad module kind"
                             #{var\ 7266}#
                             #{mod\ 7276}#)))))))))
           (#{build-lexical-assignment\ 4934}#
             (lambda (#{source\ 7284}#
                      #{name\ 7285}#
                      #{var\ 7286}#
                      #{exp\ 7287}#)
               (let ((#{atom-key\ 7294}# (fluid-ref #{*mode*\ 4903}#)))
                 (if (memv #{atom-key\ 7294}# (quote (c)))
                   ((@ (language tree-il) make-lexical-set)
                    #{source\ 7284}#
                    #{name\ 7285}#
                    #{var\ 7286}#
                    #{exp\ 7287}#)
                   (#{decorate-source\ 4922}#
                     (list (quote set!) #{var\ 7286}# #{exp\ 7287}#)
                     #{source\ 7284}#)))))
           (#{build-lexical-reference\ 4932}#
             (lambda (#{type\ 7298}#
                      #{source\ 7299}#
                      #{name\ 7300}#
                      #{var\ 7301}#)
               (let ((#{atom-key\ 7308}# (fluid-ref #{*mode*\ 4903}#)))
                 (if (memv #{atom-key\ 7308}# (quote (c)))
                   ((@ (language tree-il) make-lexical-ref)
                    #{source\ 7299}#
                    #{name\ 7300}#
                    #{var\ 7301}#)
                   (#{decorate-source\ 4922}#
                     #{var\ 7301}#
                     #{source\ 7299}#)))))
           (#{build-dynlet\ 4930}#
             (lambda (#{source\ 7311}#
                      #{fluids\ 7312}#
                      #{vals\ 7313}#
                      #{body\ 7314}#)
               (let ((#{atom-key\ 7321}# (fluid-ref #{*mode*\ 4903}#)))
                 (if (memv #{atom-key\ 7321}# (quote (c)))
                   ((@ (language tree-il) make-dynlet)
                    #{source\ 7311}#
                    #{fluids\ 7312}#
                    #{vals\ 7313}#
                    #{body\ 7314}#)
                   (#{decorate-source\ 4922}#
                     (list 'with-fluids
                           (map list #{fluids\ 7312}# #{vals\ 7313}#)
                           #{body\ 7314}#)
                     #{source\ 7311}#)))))
           (#{build-conditional\ 4928}#
             (lambda (#{source\ 7325}#
                      #{test-exp\ 7326}#
                      #{then-exp\ 7327}#
                      #{else-exp\ 7328}#)
               (let ((#{atom-key\ 7335}# (fluid-ref #{*mode*\ 4903}#)))
                 (if (memv #{atom-key\ 7335}# (quote (c)))
                   ((@ (language tree-il) make-conditional)
                    #{source\ 7325}#
                    #{test-exp\ 7326}#
                    #{then-exp\ 7327}#
                    #{else-exp\ 7328}#)
                   (#{decorate-source\ 4922}#
                     (if (equal? #{else-exp\ 7328}# (quote (if #f #f)))
                       (list 'if
                             #{test-exp\ 7326}#
                             #{then-exp\ 7327}#)
                       (list 'if
                             #{test-exp\ 7326}#
                             #{then-exp\ 7327}#
                             #{else-exp\ 7328}#))
                     #{source\ 7325}#)))))
           (#{build-application\ 4926}#
             (lambda (#{source\ 7340}#
                      #{fun-exp\ 7341}#
                      #{arg-exps\ 7342}#)
               (let ((#{atom-key\ 7348}# (fluid-ref #{*mode*\ 4903}#)))
                 (if (memv #{atom-key\ 7348}# (quote (c)))
                   ((@ (language tree-il) make-application)
                    #{source\ 7340}#
                    #{fun-exp\ 7341}#
                    #{arg-exps\ 7342}#)
                   (#{decorate-source\ 4922}#
                     (cons #{fun-exp\ 7341}# #{arg-exps\ 7342}#)
                     #{source\ 7340}#)))))
           (#{build-void\ 4924}#
             (lambda (#{source\ 7352}#)
               (let ((#{atom-key\ 7356}# (fluid-ref #{*mode*\ 4903}#)))
                 (if (memv #{atom-key\ 7356}# (quote (c)))
                   ((@ (language tree-il) make-void)
                    #{source\ 7352}#)
                   (#{decorate-source\ 4922}#
                     '(if #f #f)
                     #{source\ 7352}#)))))
           (#{decorate-source\ 4922}#
             (lambda (#{e\ 7359}# #{s\ 7360}#)
               (begin
                 (if (if (pair? #{e\ 7359}#) #{s\ 7360}# #f)
                   (set-source-properties! #{e\ 7359}# #{s\ 7360}#))
                 #{e\ 7359}#)))
           (#{get-global-definition-hook\ 4920}#
             (lambda (#{symbol\ 7365}# #{module\ 7366}#)
               (begin
                 (if (if (not #{module\ 7366}#) (current-module) #f)
                   (warn "module system is booted, we should have a module"
                         #{symbol\ 7365}#))
                 (let ((#{v\ 7372}#
                         (module-variable
                           (if #{module\ 7366}#
                             (resolve-module (cdr #{module\ 7366}#))
                             (current-module))
                           #{symbol\ 7365}#)))
                   (if #{v\ 7372}#
                     (if (variable-bound? #{v\ 7372}#)
                       (let ((#{val\ 7377}# (variable-ref #{v\ 7372}#)))
                         (if (macro? #{val\ 7377}#)
                           (if (macro-type #{val\ 7377}#)
                             (cons (macro-type #{val\ 7377}#)
                                   (macro-binding #{val\ 7377}#))
                             #f)
                           #f))
                       #f)
                     #f)))))
           (#{put-global-definition-hook\ 4918}#
             (lambda (#{symbol\ 7381}# #{type\ 7382}# #{val\ 7383}#)
               (module-define!
                 (current-module)
                 #{symbol\ 7381}#
                 (make-syntax-transformer
                   #{symbol\ 7381}#
                   #{type\ 7382}#
                   #{val\ 7383}#))))
           (#{local-eval-hook\ 4915}#
             (lambda (#{x\ 7387}# #{mod\ 7388}#)
               (primitive-eval
                 (list #{noexpand\ 4901}#
                       (let ((#{atom-key\ 7394}# (fluid-ref #{*mode*\ 4903}#)))
                         (if (memv #{atom-key\ 7394}# (quote (c)))
                           ((@ (language tree-il) tree-il->scheme)
                            #{x\ 7387}#)
                           #{x\ 7387}#))))))
           (#{top-level-eval-hook\ 4913}#
             (lambda (#{x\ 7397}# #{mod\ 7398}#)
               (primitive-eval
                 (list #{noexpand\ 4901}#
                       (let ((#{atom-key\ 7404}# (fluid-ref #{*mode*\ 4903}#)))
                         (if (memv #{atom-key\ 7404}# (quote (c)))
                           ((@ (language tree-il) tree-il->scheme)
                            #{x\ 7397}#)
                           #{x\ 7397}#))))))
           (#{fx<\ 4911}# <)
           (#{fx=\ 4909}# =)
           (#{fx-\ 4907}# -)
           (#{fx+\ 4905}# +)
           (#{*mode*\ 4903}# (make-fluid))
           (#{noexpand\ 4901}# "noexpand"))
    (begin
      (#{global-extend\ 5000}#
        'local-syntax
        'letrec-syntax
        #t)
      (#{global-extend\ 5000}#
        'local-syntax
        'let-syntax
        #f)
      (#{global-extend\ 5000}#
        'core
        'fluid-let-syntax
        (lambda (#{e\ 7407}#
                 #{r\ 7408}#
                 #{w\ 7409}#
                 #{s\ 7410}#
                 #{mod\ 7411}#)
          ((lambda (#{tmp\ 7417}#)
             ((lambda (#{tmp\ 7418}#)
                (if (if #{tmp\ 7418}#
                      (apply (lambda (#{_\ 7424}#
                                      #{var\ 7425}#
                                      #{val\ 7426}#
                                      #{e1\ 7427}#
                                      #{e2\ 7428}#)
                               (#{valid-bound-ids?\ 5067}# #{var\ 7425}#))
                             #{tmp\ 7418}#)
                      #f)
                  (apply (lambda (#{_\ 7435}#
                                  #{var\ 7436}#
                                  #{val\ 7437}#
                                  #{e1\ 7438}#
                                  #{e2\ 7439}#)
                           (let ((#{names\ 7441}#
                                   (map (lambda (#{x\ 7442}#)
                                          (#{id-var-name\ 5061}#
                                            #{x\ 7442}#
                                            #{w\ 7409}#))
                                        #{var\ 7436}#)))
                             (begin
                               (for-each
                                 (lambda (#{id\ 7445}# #{n\ 7446}#)
                                   (let ((#{atom-key\ 7451}#
                                           (#{binding-type\ 4987}#
                                             (#{lookup\ 4998}#
                                               #{n\ 7446}#
                                               #{r\ 7408}#
                                               #{mod\ 7411}#))))
                                     (if (memv #{atom-key\ 7451}#
                                               '(displaced-lexical))
                                       (syntax-violation
                                         'fluid-let-syntax
                                         "identifier out of context"
                                         #{e\ 7407}#
                                         (#{source-wrap\ 5075}#
                                           #{id\ 7445}#
                                           #{w\ 7409}#
                                           #{s\ 7410}#
                                           #{mod\ 7411}#)))))
                                 #{var\ 7436}#
                                 #{names\ 7441}#)
                               (#{chi-body\ 5097}#
                                 (cons #{e1\ 7438}# #{e2\ 7439}#)
                                 (#{source-wrap\ 5075}#
                                   #{e\ 7407}#
                                   #{w\ 7409}#
                                   #{s\ 7410}#
                                   #{mod\ 7411}#)
                                 (#{extend-env\ 4992}#
                                   #{names\ 7441}#
                                   (let ((#{trans-r\ 7456}#
                                           (#{macros-only-env\ 4996}#
                                             #{r\ 7408}#)))
                                     (map (lambda (#{x\ 7457}#)
                                            (cons 'macro
                                                  (#{eval-local-transformer\ 5101}#
                                                    (#{chi\ 5089}#
                                                      #{x\ 7457}#
                                                      #{trans-r\ 7456}#
                                                      #{w\ 7409}#
                                                      #{mod\ 7411}#)
                                                    #{mod\ 7411}#)))
                                          #{val\ 7437}#))
                                   #{r\ 7408}#)
                                 #{w\ 7409}#
                                 #{mod\ 7411}#))))
                         #{tmp\ 7418}#)
                  ((lambda (#{_\ 7462}#)
                     (syntax-violation
                       'fluid-let-syntax
                       "bad syntax"
                       (#{source-wrap\ 5075}#
                         #{e\ 7407}#
                         #{w\ 7409}#
                         #{s\ 7410}#
                         #{mod\ 7411}#)))
                   #{tmp\ 7417}#)))
              ($sc-dispatch
                #{tmp\ 7417}#
                '(any #(each (any any)) any . each-any))))
           #{e\ 7407}#)))
      (#{global-extend\ 5000}#
        'core
        'quote
        (lambda (#{e\ 7463}#
                 #{r\ 7464}#
                 #{w\ 7465}#
                 #{s\ 7466}#
                 #{mod\ 7467}#)
          ((lambda (#{tmp\ 7473}#)
             ((lambda (#{tmp\ 7474}#)
                (if #{tmp\ 7474}#
                  (apply (lambda (#{_\ 7477}# #{e\ 7478}#)
                           (#{build-data\ 4954}#
                             #{s\ 7466}#
                             (#{strip\ 5115}# #{e\ 7478}# #{w\ 7465}#)))
                         #{tmp\ 7474}#)
                  ((lambda (#{_\ 7480}#)
                     (syntax-violation
                       'quote
                       "bad syntax"
                       (#{source-wrap\ 5075}#
                         #{e\ 7463}#
                         #{w\ 7465}#
                         #{s\ 7466}#
                         #{mod\ 7467}#)))
                   #{tmp\ 7473}#)))
              ($sc-dispatch #{tmp\ 7473}# (quote (any any)))))
           #{e\ 7463}#)))
      (#{global-extend\ 5000}#
        'core
        'syntax
        (letrec ((#{regen\ 7496}#
                   (lambda (#{x\ 7497}#)
                     (let ((#{atom-key\ 7501}# (car #{x\ 7497}#)))
                       (if (memv #{atom-key\ 7501}# (quote (ref)))
                         (#{build-lexical-reference\ 4932}#
                           'value
                           #f
                           (cadr #{x\ 7497}#)
                           (cadr #{x\ 7497}#))
                         (if (memv #{atom-key\ 7501}# (quote (primitive)))
                           (#{build-primref\ 4952}# #f (cadr #{x\ 7497}#))
                           (if (memv #{atom-key\ 7501}# (quote (quote)))
                             (#{build-data\ 4954}# #f (cadr #{x\ 7497}#))
                             (if (memv #{atom-key\ 7501}# (quote (lambda)))
                               (if (list? (cadr #{x\ 7497}#))
                                 (#{build-simple-lambda\ 4946}#
                                   #f
                                   (cadr #{x\ 7497}#)
                                   #f
                                   (cadr #{x\ 7497}#)
                                   '()
                                   (#{regen\ 7496}# (caddr #{x\ 7497}#)))
                                 (error "how did we get here" #{x\ 7497}#))
                               (#{build-application\ 4926}#
                                 #f
                                 (#{build-primref\ 4952}# #f (car #{x\ 7497}#))
                                 (map #{regen\ 7496}#
                                      (cdr #{x\ 7497}#))))))))))
                 (#{gen-vector\ 7494}#
                   (lambda (#{x\ 7513}#)
                     (if (eq? (car #{x\ 7513}#) (quote list))
                       (cons (quote vector) (cdr #{x\ 7513}#))
                       (if (eq? (car #{x\ 7513}#) (quote quote))
                         (list 'quote
                               (list->vector (cadr #{x\ 7513}#)))
                         (list (quote list->vector) #{x\ 7513}#)))))
                 (#{gen-append\ 7492}#
                   (lambda (#{x\ 7523}# #{y\ 7524}#)
                     (if (equal? #{y\ 7524}# (quote (quote ())))
                       #{x\ 7523}#
                       (list (quote append) #{x\ 7523}# #{y\ 7524}#))))
                 (#{gen-cons\ 7490}#
                   (lambda (#{x\ 7528}# #{y\ 7529}#)
                     (let ((#{atom-key\ 7534}# (car #{y\ 7529}#)))
                       (if (memv #{atom-key\ 7534}# (quote (quote)))
                         (if (eq? (car #{x\ 7528}#) (quote quote))
                           (list 'quote
                                 (cons (cadr #{x\ 7528}#) (cadr #{y\ 7529}#)))
                           (if (eq? (cadr #{y\ 7529}#) (quote ()))
                             (list (quote list) #{x\ 7528}#)
                             (list (quote cons) #{x\ 7528}# #{y\ 7529}#)))
                         (if (memv #{atom-key\ 7534}# (quote (list)))
                           (cons 'list
                                 (cons #{x\ 7528}# (cdr #{y\ 7529}#)))
                           (list (quote cons) #{x\ 7528}# #{y\ 7529}#))))))
                 (#{gen-map\ 7488}#
                   (lambda (#{e\ 7543}# #{map-env\ 7544}#)
                     (let ((#{formals\ 7549}# (map cdr #{map-env\ 7544}#))
                           (#{actuals\ 7550}#
                             (map (lambda (#{x\ 7551}#)
                                    (list (quote ref) (car #{x\ 7551}#)))
                                  #{map-env\ 7544}#)))
                       (if (eq? (car #{e\ 7543}#) (quote ref))
                         (car #{actuals\ 7550}#)
                         (if (and-map
                               (lambda (#{x\ 7558}#)
                                 (if (eq? (car #{x\ 7558}#) (quote ref))
                                   (memq (cadr #{x\ 7558}#) #{formals\ 7549}#)
                                   #f))
                               (cdr #{e\ 7543}#))
                           (cons 'map
                                 (cons (list 'primitive
                                             (car #{e\ 7543}#))
                                       (map (let ((#{r\ 7564}#
                                                    (map cons
                                                         #{formals\ 7549}#
                                                         #{actuals\ 7550}#)))
                                              (lambda (#{x\ 7565}#)
                                                (cdr (assq (cadr #{x\ 7565}#)
                                                           #{r\ 7564}#))))
                                            (cdr #{e\ 7543}#))))
                           (cons 'map
                                 (cons (list 'lambda
                                             #{formals\ 7549}#
                                             #{e\ 7543}#)
                                       #{actuals\ 7550}#)))))))
                 (#{gen-mappend\ 7486}#
                   (lambda (#{e\ 7569}# #{map-env\ 7570}#)
                     (list 'apply
                           '(primitive append)
                           (#{gen-map\ 7488}# #{e\ 7569}# #{map-env\ 7570}#))))
                 (#{gen-ref\ 7484}#
                   (lambda (#{src\ 7574}#
                            #{var\ 7575}#
                            #{level\ 7576}#
                            #{maps\ 7577}#)
                     (if (#{fx=\ 4909}# #{level\ 7576}# 0)
                       (values #{var\ 7575}# #{maps\ 7577}#)
                       (if (null? #{maps\ 7577}#)
                         (syntax-violation
                           'syntax
                           "missing ellipsis"
                           #{src\ 7574}#)
                         (call-with-values
                           (lambda ()
                             (#{gen-ref\ 7484}#
                               #{src\ 7574}#
                               #{var\ 7575}#
                               (#{fx-\ 4907}# #{level\ 7576}# 1)
                               (cdr #{maps\ 7577}#)))
                           (lambda (#{outer-var\ 7582}# #{outer-maps\ 7583}#)
                             (let ((#{b\ 7587}#
                                     (assq #{outer-var\ 7582}#
                                           (car #{maps\ 7577}#))))
                               (if #{b\ 7587}#
                                 (values (cdr #{b\ 7587}#) #{maps\ 7577}#)
                                 (let ((#{inner-var\ 7589}#
                                         (#{gen-var\ 5117}# (quote tmp))))
                                   (values
                                     #{inner-var\ 7589}#
                                     (cons (cons (cons #{outer-var\ 7582}#
                                                       #{inner-var\ 7589}#)
                                                 (car #{maps\ 7577}#))
                                           #{outer-maps\ 7583}#)))))))))))
                 (#{gen-syntax\ 7482}#
                   (lambda (#{src\ 7590}#
                            #{e\ 7591}#
                            #{r\ 7592}#
                            #{maps\ 7593}#
                            #{ellipsis?\ 7594}#
                            #{mod\ 7595}#)
                     (if (#{id?\ 5004}# #{e\ 7591}#)
                       (let ((#{label\ 7603}#
                               (#{id-var-name\ 5061}#
                                 #{e\ 7591}#
                                 '(()))))
                         (let ((#{b\ 7606}#
                                 (#{lookup\ 4998}#
                                   #{label\ 7603}#
                                   #{r\ 7592}#
                                   #{mod\ 7595}#)))
                           (if (eq? (#{binding-type\ 4987}# #{b\ 7606}#)
                                    'syntax)
                             (call-with-values
                               (lambda ()
                                 (let ((#{var.lev\ 7608}#
                                         (#{binding-value\ 4989}#
                                           #{b\ 7606}#)))
                                   (#{gen-ref\ 7484}#
                                     #{src\ 7590}#
                                     (car #{var.lev\ 7608}#)
                                     (cdr #{var.lev\ 7608}#)
                                     #{maps\ 7593}#)))
                               (lambda (#{var\ 7609}# #{maps\ 7610}#)
                                 (values
                                   (list (quote ref) #{var\ 7609}#)
                                   #{maps\ 7610}#)))
                             (if (#{ellipsis?\ 7594}# #{e\ 7591}#)
                               (syntax-violation
                                 'syntax
                                 "misplaced ellipsis"
                                 #{src\ 7590}#)
                               (values
                                 (list (quote quote) #{e\ 7591}#)
                                 #{maps\ 7593}#)))))
                       ((lambda (#{tmp\ 7615}#)
                          ((lambda (#{tmp\ 7616}#)
                             (if (if #{tmp\ 7616}#
                                   (apply (lambda (#{dots\ 7619}# #{e\ 7620}#)
                                            (#{ellipsis?\ 7594}#
                                              #{dots\ 7619}#))
                                          #{tmp\ 7616}#)
                                   #f)
                               (apply (lambda (#{dots\ 7623}# #{e\ 7624}#)
                                        (#{gen-syntax\ 7482}#
                                          #{src\ 7590}#
                                          #{e\ 7624}#
                                          #{r\ 7592}#
                                          #{maps\ 7593}#
                                          (lambda (#{x\ 7625}#) #f)
                                          #{mod\ 7595}#))
                                      #{tmp\ 7616}#)
                               ((lambda (#{tmp\ 7627}#)
                                  (if (if #{tmp\ 7627}#
                                        (apply (lambda (#{x\ 7631}#
                                                        #{dots\ 7632}#
                                                        #{y\ 7633}#)
                                                 (#{ellipsis?\ 7594}#
                                                   #{dots\ 7632}#))
                                               #{tmp\ 7627}#)
                                        #f)
                                    (apply (lambda (#{x\ 7637}#
                                                    #{dots\ 7638}#
                                                    #{y\ 7639}#)
                                             (letrec ((#{f\ 7643}#
                                                        (lambda (#{y\ 7644}#
                                                                 #{k\ 7645}#)
                                                          ((lambda (#{tmp\ 7652}#)
                                                             ((lambda (#{tmp\ 7653}#)
                                                                (if (if #{tmp\ 7653}#
                                                                      (apply (lambda (#{dots\ 7656}#
                                                                                      #{y\ 7657}#)
                                                                               (#{ellipsis?\ 7594}#
                                                                                 #{dots\ 7656}#))
                                                                             #{tmp\ 7653}#)
                                                                      #f)
                                                                  (apply (lambda (#{dots\ 7660}#
                                                                                  #{y\ 7661}#)
                                                                           (#{f\ 7643}#
                                                                             #{y\ 7661}#
                                                                             (lambda (#{maps\ 7662}#)
                                                                               (call-with-values
                                                                                 (lambda ()
                                                                                   (#{k\ 7645}#
                                                                                     (cons '()
                                                                                           #{maps\ 7662}#)))
                                                                                 (lambda (#{x\ 7664}#
                                                                                          #{maps\ 7665}#)
                                                                                   (if (null? (car #{maps\ 7665}#))
                                                                                     (syntax-violation
                                                                                       'syntax
                                                                                       "extra ellipsis"
                                                                                       #{src\ 7590}#)
                                                                                     (values
                                                                                       (#{gen-mappend\ 7486}#
                                                                                         #{x\ 7664}#
                                                                                         (car #{maps\ 7665}#))
                                                                                       (cdr #{maps\ 7665}#))))))))
                                                                         #{tmp\ 7653}#)
                                                                  ((lambda (#{_\ 7669}#)
                                                                     (call-with-values
                                                                       (lambda ()
                                                                         (#{gen-syntax\ 7482}#
                                                                           #{src\ 7590}#
                                                                           #{y\ 7644}#
                                                                           #{r\ 7592}#
                                                                           #{maps\ 7593}#
                                                                           #{ellipsis?\ 7594}#
                                                                           #{mod\ 7595}#))
                                                                       (lambda (#{y\ 7670}#
                                                                                #{maps\ 7671}#)
                                                                         (call-with-values
                                                                           (lambda ()
                                                                             (#{k\ 7645}#
                                                                               #{maps\ 7671}#))
                                                                           (lambda (#{x\ 7674}#
                                                                                    #{maps\ 7675}#)
                                                                             (values
                                                                               (#{gen-append\ 7492}#
                                                                                 #{x\ 7674}#
                                                                                 #{y\ 7670}#)
                                                                               #{maps\ 7675}#))))))
                                                                   #{tmp\ 7652}#)))
                                                              ($sc-dispatch
                                                                #{tmp\ 7652}#
                                                                '(any . any))))
                                                           #{y\ 7644}#))))
                                               (#{f\ 7643}#
                                                 #{y\ 7639}#
                                                 (lambda (#{maps\ 7646}#)
                                                   (call-with-values
                                                     (lambda ()
                                                       (#{gen-syntax\ 7482}#
                                                         #{src\ 7590}#
                                                         #{x\ 7637}#
                                                         #{r\ 7592}#
                                                         (cons '()
                                                               #{maps\ 7646}#)
                                                         #{ellipsis?\ 7594}#
                                                         #{mod\ 7595}#))
                                                     (lambda (#{x\ 7648}#
                                                              #{maps\ 7649}#)
                                                       (if (null? (car #{maps\ 7649}#))
                                                         (syntax-violation
                                                           'syntax
                                                           "extra ellipsis"
                                                           #{src\ 7590}#)
                                                         (values
                                                           (#{gen-map\ 7488}#
                                                             #{x\ 7648}#
                                                             (car #{maps\ 7649}#))
                                                           (cdr #{maps\ 7649}#)))))))))
                                           #{tmp\ 7627}#)
                                    ((lambda (#{tmp\ 7678}#)
                                       (if #{tmp\ 7678}#
                                         (apply (lambda (#{x\ 7681}#
                                                         #{y\ 7682}#)
                                                  (call-with-values
                                                    (lambda ()
                                                      (#{gen-syntax\ 7482}#
                                                        #{src\ 7590}#
                                                        #{x\ 7681}#
                                                        #{r\ 7592}#
                                                        #{maps\ 7593}#
                                                        #{ellipsis?\ 7594}#
                                                        #{mod\ 7595}#))
                                                    (lambda (#{x\ 7683}#
                                                             #{maps\ 7684}#)
                                                      (call-with-values
                                                        (lambda ()
                                                          (#{gen-syntax\ 7482}#
                                                            #{src\ 7590}#
                                                            #{y\ 7682}#
                                                            #{r\ 7592}#
                                                            #{maps\ 7684}#
                                                            #{ellipsis?\ 7594}#
                                                            #{mod\ 7595}#))
                                                        (lambda (#{y\ 7687}#
                                                                 #{maps\ 7688}#)
                                                          (values
                                                            (#{gen-cons\ 7490}#
                                                              #{x\ 7683}#
                                                              #{y\ 7687}#)
                                                            #{maps\ 7688}#))))))
                                                #{tmp\ 7678}#)
                                         ((lambda (#{tmp\ 7691}#)
                                            (if #{tmp\ 7691}#
                                              (apply (lambda (#{e1\ 7694}#
                                                              #{e2\ 7695}#)
                                                       (call-with-values
                                                         (lambda ()
                                                           (#{gen-syntax\ 7482}#
                                                             #{src\ 7590}#
                                                             (cons #{e1\ 7694}#
                                                                   #{e2\ 7695}#)
                                                             #{r\ 7592}#
                                                             #{maps\ 7593}#
                                                             #{ellipsis?\ 7594}#
                                                             #{mod\ 7595}#))
                                                         (lambda (#{e\ 7697}#
                                                                  #{maps\ 7698}#)
                                                           (values
                                                             (#{gen-vector\ 7494}#
                                                               #{e\ 7697}#)
                                                             #{maps\ 7698}#))))
                                                     #{tmp\ 7691}#)
                                              ((lambda (#{_\ 7702}#)
                                                 (values
                                                   (list 'quote
                                                         #{e\ 7591}#)
                                                   #{maps\ 7593}#))
                                               #{tmp\ 7615}#)))
                                          ($sc-dispatch
                                            #{tmp\ 7615}#
                                            '#(vector (any . each-any))))))
                                     ($sc-dispatch
                                       #{tmp\ 7615}#
                                       '(any . any)))))
                                ($sc-dispatch
                                  #{tmp\ 7615}#
                                  '(any any . any)))))
                           ($sc-dispatch #{tmp\ 7615}# (quote (any any)))))
                        #{e\ 7591}#)))))
          (lambda (#{e\ 7704}#
                   #{r\ 7705}#
                   #{w\ 7706}#
                   #{s\ 7707}#
                   #{mod\ 7708}#)
            (let ((#{e\ 7715}#
                    (#{source-wrap\ 5075}#
                      #{e\ 7704}#
                      #{w\ 7706}#
                      #{s\ 7707}#
                      #{mod\ 7708}#)))
              ((lambda (#{tmp\ 7716}#)
                 ((lambda (#{tmp\ 7717}#)
                    (if #{tmp\ 7717}#
                      (apply (lambda (#{_\ 7720}# #{x\ 7721}#)
                               (call-with-values
                                 (lambda ()
                                   (#{gen-syntax\ 7482}#
                                     #{e\ 7715}#
                                     #{x\ 7721}#
                                     #{r\ 7705}#
                                     '()
                                     #{ellipsis?\ 5105}#
                                     #{mod\ 7708}#))
                                 (lambda (#{e\ 7722}# #{maps\ 7723}#)
                                   (#{regen\ 7496}# #{e\ 7722}#))))
                             #{tmp\ 7717}#)
                      ((lambda (#{_\ 7727}#)
                         (syntax-violation
                           'syntax
                           "bad `syntax' form"
                           #{e\ 7715}#))
                       #{tmp\ 7716}#)))
                  ($sc-dispatch #{tmp\ 7716}# (quote (any any)))))
               #{e\ 7715}#)))))
      (#{global-extend\ 5000}#
        'core
        'lambda
        (lambda (#{e\ 7728}#
                 #{r\ 7729}#
                 #{w\ 7730}#
                 #{s\ 7731}#
                 #{mod\ 7732}#)
          ((lambda (#{tmp\ 7738}#)
             ((lambda (#{tmp\ 7739}#)
                (if #{tmp\ 7739}#
                  (apply (lambda (#{_\ 7744}#
                                  #{args\ 7745}#
                                  #{e1\ 7746}#
                                  #{e2\ 7747}#)
                           (call-with-values
                             (lambda ()
                               (#{lambda-formals\ 5107}# #{args\ 7745}#))
                             (lambda (#{req\ 7748}#
                                      #{opt\ 7749}#
                                      #{rest\ 7750}#
                                      #{kw\ 7751}#)
                               (letrec ((#{lp\ 7759}#
                                          (lambda (#{body\ 7760}#
                                                   #{meta\ 7761}#)
                                            ((lambda (#{tmp\ 7763}#)
                                               ((lambda (#{tmp\ 7764}#)
                                                  (if (if #{tmp\ 7764}#
                                                        (apply (lambda (#{docstring\ 7768}#
                                                                        #{e1\ 7769}#
                                                                        #{e2\ 7770}#)
                                                                 (string?
                                                                   (syntax->datum
                                                                     #{docstring\ 7768}#)))
                                                               #{tmp\ 7764}#)
                                                        #f)
                                                    (apply (lambda (#{docstring\ 7774}#
                                                                    #{e1\ 7775}#
                                                                    #{e2\ 7776}#)
                                                             (#{lp\ 7759}#
                                                               (cons #{e1\ 7775}#
                                                                     #{e2\ 7776}#)
                                                               (append
                                                                 #{meta\ 7761}#
                                                                 (list (cons 'documentation
                                                                             (syntax->datum
                                                                               #{docstring\ 7774}#))))))
                                                           #{tmp\ 7764}#)
                                                    ((lambda (#{tmp\ 7779}#)
                                                       (if #{tmp\ 7779}#
                                                         (apply (lambda (#{k\ 7784}#
                                                                         #{v\ 7785}#
                                                                         #{e1\ 7786}#
                                                                         #{e2\ 7787}#)
                                                                  (#{lp\ 7759}#
                                                                    (cons #{e1\ 7786}#
                                                                          #{e2\ 7787}#)
                                                                    (append
                                                                      #{meta\ 7761}#
                                                                      (syntax->datum
                                                                        (map cons
                                                                             #{k\ 7784}#
                                                                             #{v\ 7785}#)))))
                                                                #{tmp\ 7779}#)
                                                         ((lambda (#{_\ 7792}#)
                                                            (#{chi-simple-lambda\ 5109}#
                                                              #{e\ 7728}#
                                                              #{r\ 7729}#
                                                              #{w\ 7730}#
                                                              #{s\ 7731}#
                                                              #{mod\ 7732}#
                                                              #{req\ 7748}#
                                                              #{rest\ 7750}#
                                                              #{meta\ 7761}#
                                                              #{body\ 7760}#))
                                                          #{tmp\ 7763}#)))
                                                     ($sc-dispatch
                                                       #{tmp\ 7763}#
                                                       '(#(vector
                                                           #(each (any . any)))
                                                         any
                                                         .
                                                         each-any)))))
                                                ($sc-dispatch
                                                  #{tmp\ 7763}#
                                                  '(any any . each-any))))
                                             #{body\ 7760}#))))
                                 (#{lp\ 7759}#
                                   (cons #{e1\ 7746}# #{e2\ 7747}#)
                                   '())))))
                         #{tmp\ 7739}#)
                  ((lambda (#{_\ 7794}#)
                     (syntax-violation
                       'lambda
                       "bad lambda"
                       #{e\ 7728}#))
                   #{tmp\ 7738}#)))
              ($sc-dispatch
                #{tmp\ 7738}#
                '(any any any . each-any))))
           #{e\ 7728}#)))
      (#{global-extend\ 5000}#
        'core
        'lambda*
        (lambda (#{e\ 7795}#
                 #{r\ 7796}#
                 #{w\ 7797}#
                 #{s\ 7798}#
                 #{mod\ 7799}#)
          ((lambda (#{tmp\ 7805}#)
             ((lambda (#{tmp\ 7806}#)
                (if #{tmp\ 7806}#
                  (apply (lambda (#{_\ 7811}#
                                  #{args\ 7812}#
                                  #{e1\ 7813}#
                                  #{e2\ 7814}#)
                           (call-with-values
                             (lambda ()
                               (#{chi-lambda-case\ 5113}#
                                 #{e\ 7795}#
                                 #{r\ 7796}#
                                 #{w\ 7797}#
                                 #{s\ 7798}#
                                 #{mod\ 7799}#
                                 #{lambda*-formals\ 5111}#
                                 (list (cons #{args\ 7812}#
                                             (cons #{e1\ 7813}#
                                                   #{e2\ 7814}#)))))
                             (lambda (#{meta\ 7816}# #{lcase\ 7817}#)
                               (#{build-case-lambda\ 4948}#
                                 #{s\ 7798}#
                                 #{meta\ 7816}#
                                 #{lcase\ 7817}#))))
                         #{tmp\ 7806}#)
                  ((lambda (#{_\ 7821}#)
                     (syntax-violation
                       'lambda
                       "bad lambda*"
                       #{e\ 7795}#))
                   #{tmp\ 7805}#)))
              ($sc-dispatch
                #{tmp\ 7805}#
                '(any any any . each-any))))
           #{e\ 7795}#)))
      (#{global-extend\ 5000}#
        'core
        'case-lambda
        (lambda (#{e\ 7822}#
                 #{r\ 7823}#
                 #{w\ 7824}#
                 #{s\ 7825}#
                 #{mod\ 7826}#)
          ((lambda (#{tmp\ 7832}#)
             ((lambda (#{tmp\ 7833}#)
                (if #{tmp\ 7833}#
                  (apply (lambda (#{_\ 7841}#
                                  #{args\ 7842}#
                                  #{e1\ 7843}#
                                  #{e2\ 7844}#
                                  #{args*\ 7845}#
                                  #{e1*\ 7846}#
                                  #{e2*\ 7847}#)
                           (call-with-values
                             (lambda ()
                               (#{chi-lambda-case\ 5113}#
                                 #{e\ 7822}#
                                 #{r\ 7823}#
                                 #{w\ 7824}#
                                 #{s\ 7825}#
                                 #{mod\ 7826}#
                                 #{lambda-formals\ 5107}#
                                 (cons (cons #{args\ 7842}#
                                             (cons #{e1\ 7843}# #{e2\ 7844}#))
                                       (map (lambda (#{tmp\ 7851}#
                                                     #{tmp\ 7850}#
                                                     #{tmp\ 7849}#)
                                              (cons #{tmp\ 7849}#
                                                    (cons #{tmp\ 7850}#
                                                          #{tmp\ 7851}#)))
                                            #{e2*\ 7847}#
                                            #{e1*\ 7846}#
                                            #{args*\ 7845}#))))
                             (lambda (#{meta\ 7853}# #{lcase\ 7854}#)
                               (#{build-case-lambda\ 4948}#
                                 #{s\ 7825}#
                                 #{meta\ 7853}#
                                 #{lcase\ 7854}#))))
                         #{tmp\ 7833}#)
                  ((lambda (#{_\ 7858}#)
                     (syntax-violation
                       'case-lambda
                       "bad case-lambda"
                       #{e\ 7822}#))
                   #{tmp\ 7832}#)))
              ($sc-dispatch
                #{tmp\ 7832}#
                '(any (any any . each-any)
                      .
                      #(each (any any . each-any))))))
           #{e\ 7822}#)))
      (#{global-extend\ 5000}#
        'core
        'case-lambda*
        (lambda (#{e\ 7859}#
                 #{r\ 7860}#
                 #{w\ 7861}#
                 #{s\ 7862}#
                 #{mod\ 7863}#)
          ((lambda (#{tmp\ 7869}#)
             ((lambda (#{tmp\ 7870}#)
                (if #{tmp\ 7870}#
                  (apply (lambda (#{_\ 7878}#
                                  #{args\ 7879}#
                                  #{e1\ 7880}#
                                  #{e2\ 7881}#
                                  #{args*\ 7882}#
                                  #{e1*\ 7883}#
                                  #{e2*\ 7884}#)
                           (call-with-values
                             (lambda ()
                               (#{chi-lambda-case\ 5113}#
                                 #{e\ 7859}#
                                 #{r\ 7860}#
                                 #{w\ 7861}#
                                 #{s\ 7862}#
                                 #{mod\ 7863}#
                                 #{lambda*-formals\ 5111}#
                                 (cons (cons #{args\ 7879}#
                                             (cons #{e1\ 7880}# #{e2\ 7881}#))
                                       (map (lambda (#{tmp\ 7888}#
                                                     #{tmp\ 7887}#
                                                     #{tmp\ 7886}#)
                                              (cons #{tmp\ 7886}#
                                                    (cons #{tmp\ 7887}#
                                                          #{tmp\ 7888}#)))
                                            #{e2*\ 7884}#
                                            #{e1*\ 7883}#
                                            #{args*\ 7882}#))))
                             (lambda (#{meta\ 7890}# #{lcase\ 7891}#)
                               (#{build-case-lambda\ 4948}#
                                 #{s\ 7862}#
                                 #{meta\ 7890}#
                                 #{lcase\ 7891}#))))
                         #{tmp\ 7870}#)
                  ((lambda (#{_\ 7895}#)
                     (syntax-violation
                       'case-lambda
                       "bad case-lambda*"
                       #{e\ 7859}#))
                   #{tmp\ 7869}#)))
              ($sc-dispatch
                #{tmp\ 7869}#
                '(any (any any . each-any)
                      .
                      #(each (any any . each-any))))))
           #{e\ 7859}#)))
      (#{global-extend\ 5000}#
        'core
        'let
        (letrec ((#{chi-let\ 7897}#
                   (lambda (#{e\ 7898}#
                            #{r\ 7899}#
                            #{w\ 7900}#
                            #{s\ 7901}#
                            #{mod\ 7902}#
                            #{constructor\ 7903}#
                            #{ids\ 7904}#
                            #{vals\ 7905}#
                            #{exps\ 7906}#)
                     (if (not (#{valid-bound-ids?\ 5067}# #{ids\ 7904}#))
                       (syntax-violation
                         'let
                         "duplicate bound variable"
                         #{e\ 7898}#)
                       (let ((#{labels\ 7918}#
                               (#{gen-labels\ 5022}# #{ids\ 7904}#))
                             (#{new-vars\ 7919}#
                               (map #{gen-var\ 5117}# #{ids\ 7904}#)))
                         (let ((#{nw\ 7922}#
                                 (#{make-binding-wrap\ 5051}#
                                   #{ids\ 7904}#
                                   #{labels\ 7918}#
                                   #{w\ 7900}#))
                               (#{nr\ 7923}#
                                 (#{extend-var-env\ 4994}#
                                   #{labels\ 7918}#
                                   #{new-vars\ 7919}#
                                   #{r\ 7899}#)))
                           (#{constructor\ 7903}#
                             #{s\ 7901}#
                             (map syntax->datum #{ids\ 7904}#)
                             #{new-vars\ 7919}#
                             (map (lambda (#{x\ 7924}#)
                                    (#{chi\ 5089}#
                                      #{x\ 7924}#
                                      #{r\ 7899}#
                                      #{w\ 7900}#
                                      #{mod\ 7902}#))
                                  #{vals\ 7905}#)
                             (#{chi-body\ 5097}#
                               #{exps\ 7906}#
                               (#{source-wrap\ 5075}#
                                 #{e\ 7898}#
                                 #{nw\ 7922}#
                                 #{s\ 7901}#
                                 #{mod\ 7902}#)
                               #{nr\ 7923}#
                               #{nw\ 7922}#
                               #{mod\ 7902}#))))))))
          (lambda (#{e\ 7926}#
                   #{r\ 7927}#
                   #{w\ 7928}#
                   #{s\ 7929}#
                   #{mod\ 7930}#)
            ((lambda (#{tmp\ 7936}#)
               ((lambda (#{tmp\ 7937}#)
                  (if (if #{tmp\ 7937}#
                        (apply (lambda (#{_\ 7943}#
                                        #{id\ 7944}#
                                        #{val\ 7945}#
                                        #{e1\ 7946}#
                                        #{e2\ 7947}#)
                                 (and-map #{id?\ 5004}# #{id\ 7944}#))
                               #{tmp\ 7937}#)
                        #f)
                    (apply (lambda (#{_\ 7954}#
                                    #{id\ 7955}#
                                    #{val\ 7956}#
                                    #{e1\ 7957}#
                                    #{e2\ 7958}#)
                             (#{chi-let\ 7897}#
                               #{e\ 7926}#
                               #{r\ 7927}#
                               #{w\ 7928}#
                               #{s\ 7929}#
                               #{mod\ 7930}#
                               #{build-let\ 4958}#
                               #{id\ 7955}#
                               #{val\ 7956}#
                               (cons #{e1\ 7957}# #{e2\ 7958}#)))
                           #{tmp\ 7937}#)
                    ((lambda (#{tmp\ 7962}#)
                       (if (if #{tmp\ 7962}#
                             (apply (lambda (#{_\ 7969}#
                                             #{f\ 7970}#
                                             #{id\ 7971}#
                                             #{val\ 7972}#
                                             #{e1\ 7973}#
                                             #{e2\ 7974}#)
                                      (if (#{id?\ 5004}# #{f\ 7970}#)
                                        (and-map #{id?\ 5004}# #{id\ 7971}#)
                                        #f))
                                    #{tmp\ 7962}#)
                             #f)
                         (apply (lambda (#{_\ 7984}#
                                         #{f\ 7985}#
                                         #{id\ 7986}#
                                         #{val\ 7987}#
                                         #{e1\ 7988}#
                                         #{e2\ 7989}#)
                                  (#{chi-let\ 7897}#
                                    #{e\ 7926}#
                                    #{r\ 7927}#
                                    #{w\ 7928}#
                                    #{s\ 7929}#
                                    #{mod\ 7930}#
                                    #{build-named-let\ 4960}#
                                    (cons #{f\ 7985}# #{id\ 7986}#)
                                    #{val\ 7987}#
                                    (cons #{e1\ 7988}# #{e2\ 7989}#)))
                                #{tmp\ 7962}#)
                         ((lambda (#{_\ 7994}#)
                            (syntax-violation
                              'let
                              "bad let"
                              (#{source-wrap\ 5075}#
                                #{e\ 7926}#
                                #{w\ 7928}#
                                #{s\ 7929}#
                                #{mod\ 7930}#)))
                          #{tmp\ 7936}#)))
                     ($sc-dispatch
                       #{tmp\ 7936}#
                       '(any any #(each (any any)) any . each-any)))))
                ($sc-dispatch
                  #{tmp\ 7936}#
                  '(any #(each (any any)) any . each-any))))
             #{e\ 7926}#))))
      (#{global-extend\ 5000}#
        'core
        'letrec
        (lambda (#{e\ 7995}#
                 #{r\ 7996}#
                 #{w\ 7997}#
                 #{s\ 7998}#
                 #{mod\ 7999}#)
          ((lambda (#{tmp\ 8005}#)
             ((lambda (#{tmp\ 8006}#)
                (if (if #{tmp\ 8006}#
                      (apply (lambda (#{_\ 8012}#
                                      #{id\ 8013}#
                                      #{val\ 8014}#
                                      #{e1\ 8015}#
                                      #{e2\ 8016}#)
                               (and-map #{id?\ 5004}# #{id\ 8013}#))
                             #{tmp\ 8006}#)
                      #f)
                  (apply (lambda (#{_\ 8023}#
                                  #{id\ 8024}#
                                  #{val\ 8025}#
                                  #{e1\ 8026}#
                                  #{e2\ 8027}#)
                           (let ((#{ids\ 8029}# #{id\ 8024}#))
                             (if (not (#{valid-bound-ids?\ 5067}#
                                        #{ids\ 8029}#))
                               (syntax-violation
                                 'letrec
                                 "duplicate bound variable"
                                 #{e\ 7995}#)
                               (let ((#{labels\ 8033}#
                                       (#{gen-labels\ 5022}# #{ids\ 8029}#))
                                     (#{new-vars\ 8034}#
                                       (map #{gen-var\ 5117}# #{ids\ 8029}#)))
                                 (let ((#{w\ 8037}#
                                         (#{make-binding-wrap\ 5051}#
                                           #{ids\ 8029}#
                                           #{labels\ 8033}#
                                           #{w\ 7997}#))
                                       (#{r\ 8038}#
                                         (#{extend-var-env\ 4994}#
                                           #{labels\ 8033}#
                                           #{new-vars\ 8034}#
                                           #{r\ 7996}#)))
                                   (#{build-letrec\ 4962}#
                                     #{s\ 7998}#
                                     (map syntax->datum #{ids\ 8029}#)
                                     #{new-vars\ 8034}#
                                     (map (lambda (#{x\ 8039}#)
                                            (#{chi\ 5089}#
                                              #{x\ 8039}#
                                              #{r\ 8038}#
                                              #{w\ 8037}#
                                              #{mod\ 7999}#))
                                          #{val\ 8025}#)
                                     (#{chi-body\ 5097}#
                                       (cons #{e1\ 8026}# #{e2\ 8027}#)
                                       (#{source-wrap\ 5075}#
                                         #{e\ 7995}#
                                         #{w\ 8037}#
                                         #{s\ 7998}#
                                         #{mod\ 7999}#)
                                       #{r\ 8038}#
                                       #{w\ 8037}#
                                       #{mod\ 7999}#)))))))
                         #{tmp\ 8006}#)
                  ((lambda (#{_\ 8044}#)
                     (syntax-violation
                       'letrec
                       "bad letrec"
                       (#{source-wrap\ 5075}#
                         #{e\ 7995}#
                         #{w\ 7997}#
                         #{s\ 7998}#
                         #{mod\ 7999}#)))
                   #{tmp\ 8005}#)))
              ($sc-dispatch
                #{tmp\ 8005}#
                '(any #(each (any any)) any . each-any))))
           #{e\ 7995}#)))
      (#{global-extend\ 5000}#
        'core
        'set!
        (lambda (#{e\ 8045}#
                 #{r\ 8046}#
                 #{w\ 8047}#
                 #{s\ 8048}#
                 #{mod\ 8049}#)
          ((lambda (#{tmp\ 8055}#)
             ((lambda (#{tmp\ 8056}#)
                (if (if #{tmp\ 8056}#
                      (apply (lambda (#{_\ 8060}# #{id\ 8061}# #{val\ 8062}#)
                               (#{id?\ 5004}# #{id\ 8061}#))
                             #{tmp\ 8056}#)
                      #f)
                  (apply (lambda (#{_\ 8066}# #{id\ 8067}# #{val\ 8068}#)
                           (let ((#{val\ 8071}#
                                   (#{chi\ 5089}#
                                     #{val\ 8068}#
                                     #{r\ 8046}#
                                     #{w\ 8047}#
                                     #{mod\ 8049}#))
                                 (#{n\ 8072}#
                                   (#{id-var-name\ 5061}#
                                     #{id\ 8067}#
                                     #{w\ 8047}#)))
                             (let ((#{b\ 8074}#
                                     (#{lookup\ 4998}#
                                       #{n\ 8072}#
                                       #{r\ 8046}#
                                       #{mod\ 8049}#)))
                               (let ((#{atom-key\ 8077}#
                                       (#{binding-type\ 4987}# #{b\ 8074}#)))
                                 (if (memv #{atom-key\ 8077}#
                                           '(lexical))
                                   (#{build-lexical-assignment\ 4934}#
                                     #{s\ 8048}#
                                     (syntax->datum #{id\ 8067}#)
                                     (#{binding-value\ 4989}# #{b\ 8074}#)
                                     #{val\ 8071}#)
                                   (if (memv #{atom-key\ 8077}#
                                             '(global))
                                     (#{build-global-assignment\ 4940}#
                                       #{s\ 8048}#
                                       #{n\ 8072}#
                                       #{val\ 8071}#
                                       #{mod\ 8049}#)
                                     (if (memv #{atom-key\ 8077}#
                                               '(displaced-lexical))
                                       (syntax-violation
                                         'set!
                                         "identifier out of context"
                                         (#{wrap\ 5073}#
                                           #{id\ 8067}#
                                           #{w\ 8047}#
                                           #{mod\ 8049}#))
                                       (syntax-violation
                                         'set!
                                         "bad set!"
                                         (#{source-wrap\ 5075}#
                                           #{e\ 8045}#
                                           #{w\ 8047}#
                                           #{s\ 8048}#
                                           #{mod\ 8049}#)))))))))
                         #{tmp\ 8056}#)
                  ((lambda (#{tmp\ 8082}#)
                     (if #{tmp\ 8082}#
                       (apply (lambda (#{_\ 8087}#
                                       #{head\ 8088}#
                                       #{tail\ 8089}#
                                       #{val\ 8090}#)
                                (call-with-values
                                  (lambda ()
                                    (#{syntax-type\ 5085}#
                                      #{head\ 8088}#
                                      #{r\ 8046}#
                                      '(())
                                      #f
                                      #f
                                      #{mod\ 8049}#
                                      #t))
                                  (lambda (#{type\ 8093}#
                                           #{value\ 8094}#
                                           #{ee\ 8095}#
                                           #{ww\ 8096}#
                                           #{ss\ 8097}#
                                           #{modmod\ 8098}#)
                                    (if (memv #{type\ 8093}#
                                              '(module-ref))
                                      (let ((#{val\ 8107}#
                                              (#{chi\ 5089}#
                                                #{val\ 8090}#
                                                #{r\ 8046}#
                                                #{w\ 8047}#
                                                #{mod\ 8049}#)))
                                        (call-with-values
                                          (lambda ()
                                            (#{value\ 8094}#
                                              (cons #{head\ 8088}#
                                                    #{tail\ 8089}#)
                                              #{r\ 8046}#
                                              #{w\ 8047}#))
                                          (lambda (#{e\ 8109}#
                                                   #{r\ 8110}#
                                                   #{w\ 8111}#
                                                   #{s*\ 8112}#
                                                   #{mod\ 8113}#)
                                            ((lambda (#{tmp\ 8119}#)
                                               ((lambda (#{tmp\ 8120}#)
                                                  (if (if #{tmp\ 8120}#
                                                        (apply (lambda (#{e\ 8122}#)
                                                                 (#{id?\ 5004}#
                                                                   #{e\ 8122}#))
                                                               #{tmp\ 8120}#)
                                                        #f)
                                                    (apply (lambda (#{e\ 8124}#)
                                                             (#{build-global-assignment\ 4940}#
                                                               #{s\ 8048}#
                                                               (syntax->datum
                                                                 #{e\ 8124}#)
                                                               #{val\ 8107}#
                                                               #{mod\ 8113}#))
                                                           #{tmp\ 8120}#)
                                                    (syntax-violation
                                                      #f
                                                      "source expression failed to match any pattern"
                                                      #{tmp\ 8119}#)))
                                                (list #{tmp\ 8119}#)))
                                             #{e\ 8109}#))))
                                      (#{build-application\ 4926}#
                                        #{s\ 8048}#
                                        (#{chi\ 5089}#
                                          (list '#(syntax-object
                                                   setter
                                                   ((top)
                                                    #(ribcage () () ())
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(type
                                                        value
                                                        ee
                                                        ww
                                                        ss
                                                        modmod)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i8099"
                                                        "i8100"
                                                        "i8101"
                                                        "i8102"
                                                        "i8103"
                                                        "i8104"))
                                                    #(ribcage
                                                      #(_ head tail val)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i8083"
                                                        "i8084"
                                                        "i8085"
                                                        "i8086"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(e r w s mod)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i8050"
                                                        "i8051"
                                                        "i8052"
                                                        "i8053"
                                                        "i8054"))
                                                    #(ribcage
                                                      (lambda-var-list
                                                        gen-var
                                                        strip
                                                        chi-lambda-case
                                                        lambda*-formals
                                                        chi-simple-lambda
                                                        lambda-formals
                                                        ellipsis?
                                                        chi-void
                                                        eval-local-transformer
                                                        chi-local-syntax
                                                        chi-body
                                                        chi-macro
                                                        chi-application
                                                        chi-expr
                                                        chi
                                                        chi-top
                                                        syntax-type
                                                        chi-when-list
                                                        chi-install-global
                                                        chi-top-sequence
                                                        chi-sequence
                                                        source-wrap
                                                        wrap
                                                        bound-id-member?
                                                        distinct-bound-ids?
                                                        valid-bound-ids?
                                                        bound-id=?
                                                        free-id=?
                                                        id-var-name
                                                        same-marks?
                                                        join-marks
                                                        join-wraps
                                                        smart-append
                                                        make-binding-wrap
                                                        extend-ribcage!
                                                        make-empty-ribcage
                                                        new-mark
                                                        anti-mark
                                                        the-anti-mark
                                                        top-marked?
                                                        top-wrap
                                                        empty-wrap
                                                        set-ribcage-labels!
                                                        set-ribcage-marks!
                                                        set-ribcage-symnames!
                                                        ribcage-labels
                                                        ribcage-marks
                                                        ribcage-symnames
                                                        ribcage?
                                                        make-ribcage
                                                        gen-labels
                                                        gen-label
                                                        make-rename
                                                        rename-marks
                                                        rename-new
                                                        rename-old
                                                        subst-rename?
                                                        wrap-subst
                                                        wrap-marks
                                                        make-wrap
                                                        id-sym-name&marks
                                                        id-sym-name
                                                        id?
                                                        nonsymbol-id?
                                                        global-extend
                                                        lookup
                                                        macros-only-env
                                                        extend-var-env
                                                        extend-env
                                                        null-env
                                                        binding-value
                                                        binding-type
                                                        make-binding
                                                        arg-check
                                                        source-annotation
                                                        no-source
                                                        set-syntax-object-module!
                                                        set-syntax-object-wrap!
                                                        set-syntax-object-expression!
                                                        syntax-object-module
                                                        syntax-object-wrap
                                                        syntax-object-expression
                                                        syntax-object?
                                                        make-syntax-object
                                                        build-lexical-var
                                                        build-letrec
                                                        build-named-let
                                                        build-let
                                                        build-sequence
                                                        build-data
                                                        build-primref
                                                        build-lambda-case
                                                        build-case-lambda
                                                        build-simple-lambda
                                                        build-global-definition
                                                        maybe-name-value!
                                                        build-global-assignment
                                                        build-global-reference
                                                        analyze-variable
                                                        build-lexical-assignment
                                                        build-lexical-reference
                                                        build-dynlet
                                                        build-conditional
                                                        build-application
                                                        build-void
                                                        decorate-source
                                                        get-global-definition-hook
                                                        put-global-definition-hook
                                                        gensym-hook
                                                        local-eval-hook
                                                        top-level-eval-hook
                                                        fx<
                                                        fx=
                                                        fx-
                                                        fx+
                                                        *mode*
                                                        noexpand)
                                                      ((top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top))
                                                      ("i5118"
                                                       "i5116"
                                                       "i5114"
                                                       "i5112"
                                                       "i5110"
                                                       "i5108"
                                                       "i5106"
                                                       "i5104"
                                                       "i5102"
                                                       "i5100"
                                                       "i5098"
                                                       "i5096"
                                                       "i5094"
                                                       "i5092"
                                                       "i5090"
                                                       "i5088"
                                                       "i5086"
                                                       "i5084"
                                                       "i5082"
                                                       "i5080"
                                                       "i5078"
                                                       "i5076"
                                                       "i5074"
                                                       "i5072"
                                                       "i5070"
                                                       "i5068"
                                                       "i5066"
                                                       "i5064"
                                                       "i5062"
                                                       "i5060"
                                                       "i5058"
                                                       "i5056"
                                                       "i5054"
                                                       "i5052"
                                                       "i5050"
                                                       "i5048"
                                                       "i5047"
                                                       "i5046"
                                                       "i5044"
                                                       "i5043"
                                                       "i5042"
                                                       "i5041"
                                                       "i5040"
                                                       "i5038"
                                                       "i5036"
                                                       "i5034"
                                                       "i5032"
                                                       "i5030"
                                                       "i5028"
                                                       "i5026"
                                                       "i5024"
                                                       "i5021"
                                                       "i5019"
                                                       "i5018"
                                                       "i5017"
                                                       "i5016"
                                                       "i5015"
                                                       "i5014"
                                                       "i5012"
                                                       "i5010"
                                                       "i5008"
                                                       "i5006"
                                                       "i5005"
                                                       "i5003"
                                                       "i5001"
                                                       "i4999"
                                                       "i4997"
                                                       "i4995"
                                                       "i4993"
                                                       "i4991"
                                                       "i4990"
                                                       "i4988"
                                                       "i4986"
                                                       "i4985"
                                                       "i4984"
                                                       "i4982"
                                                       "i4981"
                                                       "i4979"
                                                       "i4977"
                                                       "i4975"
                                                       "i4973"
                                                       "i4971"
                                                       "i4969"
                                                       "i4967"
                                                       "i4965"
                                                       "i4963"
                                                       "i4961"
                                                       "i4959"
                                                       "i4957"
                                                       "i4955"
                                                       "i4953"
                                                       "i4951"
                                                       "i4949"
                                                       "i4947"
                                                       "i4945"
                                                       "i4943"
                                                       "i4941"
                                                       "i4939"
                                                       "i4937"
                                                       "i4935"
                                                       "i4933"
                                                       "i4931"
                                                       "i4929"
                                                       "i4927"
                                                       "i4925"
                                                       "i4923"
                                                       "i4921"
                                                       "i4919"
                                                       "i4917"
                                                       "i4916"
                                                       "i4914"
                                                       "i4912"
                                                       "i4910"
                                                       "i4908"
                                                       "i4906"
                                                       "i4904"
                                                       "i4902"
                                                       "i4900"))
                                                    #(ribcage
                                                      (define-structure
                                                        and-map*)
                                                      ((top) (top))
                                                      ("i4803" "i4801")))
                                                   (hygiene guile))
                                                #{head\ 8088}#)
                                          #{r\ 8046}#
                                          #{w\ 8047}#
                                          #{mod\ 8049}#)
                                        (map (lambda (#{e\ 8126}#)
                                               (#{chi\ 5089}#
                                                 #{e\ 8126}#
                                                 #{r\ 8046}#
                                                 #{w\ 8047}#
                                                 #{mod\ 8049}#))
                                             (append
                                               #{tail\ 8089}#
                                               (list #{val\ 8090}#))))))))
                              #{tmp\ 8082}#)
                       ((lambda (#{_\ 8130}#)
                          (syntax-violation
                            'set!
                            "bad set!"
                            (#{source-wrap\ 5075}#
                              #{e\ 8045}#
                              #{w\ 8047}#
                              #{s\ 8048}#
                              #{mod\ 8049}#)))
                        #{tmp\ 8055}#)))
                   ($sc-dispatch
                     #{tmp\ 8055}#
                     '(any (any . each-any) any)))))
              ($sc-dispatch
                #{tmp\ 8055}#
                '(any any any))))
           #{e\ 8045}#)))
      (#{global-extend\ 5000}#
        'module-ref
        '@
        (lambda (#{e\ 8131}# #{r\ 8132}# #{w\ 8133}#)
          ((lambda (#{tmp\ 8137}#)
             ((lambda (#{tmp\ 8138}#)
                (if (if #{tmp\ 8138}#
                      (apply (lambda (#{_\ 8142}# #{mod\ 8143}# #{id\ 8144}#)
                               (if (and-map #{id?\ 5004}# #{mod\ 8143}#)
                                 (#{id?\ 5004}# #{id\ 8144}#)
                                 #f))
                             #{tmp\ 8138}#)
                      #f)
                  (apply (lambda (#{_\ 8151}# #{mod\ 8152}# #{id\ 8153}#)
                           (values
                             (syntax->datum #{id\ 8153}#)
                             #{r\ 8132}#
                             #{w\ 8133}#
                             #f
                             (syntax->datum
                               (cons '#(syntax-object
                                        public
                                        ((top)
                                         #(ribcage
                                           #(_ mod id)
                                           #((top) (top) (top))
                                           #("i8148" "i8149" "i8150"))
                                         #(ribcage () () ())
                                         #(ribcage
                                           #(e r w)
                                           #((top) (top) (top))
                                           #("i8134" "i8135" "i8136"))
                                         #(ribcage
                                           (lambda-var-list
                                             gen-var
                                             strip
                                             chi-lambda-case
                                             lambda*-formals
                                             chi-simple-lambda
                                             lambda-formals
                                             ellipsis?
                                             chi-void
                                             eval-local-transformer
                                             chi-local-syntax
                                             chi-body
                                             chi-macro
                                             chi-application
                                             chi-expr
                                             chi
                                             chi-top
                                             syntax-type
                                             chi-when-list
                                             chi-install-global
                                             chi-top-sequence
                                             chi-sequence
                                             source-wrap
                                             wrap
                                             bound-id-member?
                                             distinct-bound-ids?
                                             valid-bound-ids?
                                             bound-id=?
                                             free-id=?
                                             id-var-name
                                             same-marks?
                                             join-marks
                                             join-wraps
                                             smart-append
                                             make-binding-wrap
                                             extend-ribcage!
                                             make-empty-ribcage
                                             new-mark
                                             anti-mark
                                             the-anti-mark
                                             top-marked?
                                             top-wrap
                                             empty-wrap
                                             set-ribcage-labels!
                                             set-ribcage-marks!
                                             set-ribcage-symnames!
                                             ribcage-labels
                                             ribcage-marks
                                             ribcage-symnames
                                             ribcage?
                                             make-ribcage
                                             gen-labels
                                             gen-label
                                             make-rename
                                             rename-marks
                                             rename-new
                                             rename-old
                                             subst-rename?
                                             wrap-subst
                                             wrap-marks
                                             make-wrap
                                             id-sym-name&marks
                                             id-sym-name
                                             id?
                                             nonsymbol-id?
                                             global-extend
                                             lookup
                                             macros-only-env
                                             extend-var-env
                                             extend-env
                                             null-env
                                             binding-value
                                             binding-type
                                             make-binding
                                             arg-check
                                             source-annotation
                                             no-source
                                             set-syntax-object-module!
                                             set-syntax-object-wrap!
                                             set-syntax-object-expression!
                                             syntax-object-module
                                             syntax-object-wrap
                                             syntax-object-expression
                                             syntax-object?
                                             make-syntax-object
                                             build-lexical-var
                                             build-letrec
                                             build-named-let
                                             build-let
                                             build-sequence
                                             build-data
                                             build-primref
                                             build-lambda-case
                                             build-case-lambda
                                             build-simple-lambda
                                             build-global-definition
                                             maybe-name-value!
                                             build-global-assignment
                                             build-global-reference
                                             analyze-variable
                                             build-lexical-assignment
                                             build-lexical-reference
                                             build-dynlet
                                             build-conditional
                                             build-application
                                             build-void
                                             decorate-source
                                             get-global-definition-hook
                                             put-global-definition-hook
                                             gensym-hook
                                             local-eval-hook
                                             top-level-eval-hook
                                             fx<
                                             fx=
                                             fx-
                                             fx+
                                             *mode*
                                             noexpand)
                                           ((top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top))
                                           ("i5118"
                                            "i5116"
                                            "i5114"
                                            "i5112"
                                            "i5110"
                                            "i5108"
                                            "i5106"
                                            "i5104"
                                            "i5102"
                                            "i5100"
                                            "i5098"
                                            "i5096"
                                            "i5094"
                                            "i5092"
                                            "i5090"
                                            "i5088"
                                            "i5086"
                                            "i5084"
                                            "i5082"
                                            "i5080"
                                            "i5078"
                                            "i5076"
                                            "i5074"
                                            "i5072"
                                            "i5070"
                                            "i5068"
                                            "i5066"
                                            "i5064"
                                            "i5062"
                                            "i5060"
                                            "i5058"
                                            "i5056"
                                            "i5054"
                                            "i5052"
                                            "i5050"
                                            "i5048"
                                            "i5047"
                                            "i5046"
                                            "i5044"
                                            "i5043"
                                            "i5042"
                                            "i5041"
                                            "i5040"
                                            "i5038"
                                            "i5036"
                                            "i5034"
                                            "i5032"
                                            "i5030"
                                            "i5028"
                                            "i5026"
                                            "i5024"
                                            "i5021"
                                            "i5019"
                                            "i5018"
                                            "i5017"
                                            "i5016"
                                            "i5015"
                                            "i5014"
                                            "i5012"
                                            "i5010"
                                            "i5008"
                                            "i5006"
                                            "i5005"
                                            "i5003"
                                            "i5001"
                                            "i4999"
                                            "i4997"
                                            "i4995"
                                            "i4993"
                                            "i4991"
                                            "i4990"
                                            "i4988"
                                            "i4986"
                                            "i4985"
                                            "i4984"
                                            "i4982"
                                            "i4981"
                                            "i4979"
                                            "i4977"
                                            "i4975"
                                            "i4973"
                                            "i4971"
                                            "i4969"
                                            "i4967"
                                            "i4965"
                                            "i4963"
                                            "i4961"
                                            "i4959"
                                            "i4957"
                                            "i4955"
                                            "i4953"
                                            "i4951"
                                            "i4949"
                                            "i4947"
                                            "i4945"
                                            "i4943"
                                            "i4941"
                                            "i4939"
                                            "i4937"
                                            "i4935"
                                            "i4933"
                                            "i4931"
                                            "i4929"
                                            "i4927"
                                            "i4925"
                                            "i4923"
                                            "i4921"
                                            "i4919"
                                            "i4917"
                                            "i4916"
                                            "i4914"
                                            "i4912"
                                            "i4910"
                                            "i4908"
                                            "i4906"
                                            "i4904"
                                            "i4902"
                                            "i4900"))
                                         #(ribcage
                                           (define-structure and-map*)
                                           ((top) (top))
                                           ("i4803" "i4801")))
                                        (hygiene guile))
                                     #{mod\ 8152}#))))
                         #{tmp\ 8138}#)
                  (syntax-violation
                    #f
                    "source expression failed to match any pattern"
                    #{tmp\ 8137}#)))
              ($sc-dispatch
                #{tmp\ 8137}#
                '(any each-any any))))
           #{e\ 8131}#)))
      (#{global-extend\ 5000}#
        'module-ref
        '@@
        (lambda (#{e\ 8155}# #{r\ 8156}# #{w\ 8157}#)
          ((lambda (#{tmp\ 8161}#)
             ((lambda (#{tmp\ 8162}#)
                (if (if #{tmp\ 8162}#
                      (apply (lambda (#{_\ 8166}# #{mod\ 8167}# #{id\ 8168}#)
                               (if (and-map #{id?\ 5004}# #{mod\ 8167}#)
                                 (#{id?\ 5004}# #{id\ 8168}#)
                                 #f))
                             #{tmp\ 8162}#)
                      #f)
                  (apply (lambda (#{_\ 8175}# #{mod\ 8176}# #{id\ 8177}#)
                           (values
                             (syntax->datum #{id\ 8177}#)
                             #{r\ 8156}#
                             #{w\ 8157}#
                             #f
                             (syntax->datum
                               (cons '#(syntax-object
                                        private
                                        ((top)
                                         #(ribcage
                                           #(_ mod id)
                                           #((top) (top) (top))
                                           #("i8172" "i8173" "i8174"))
                                         #(ribcage () () ())
                                         #(ribcage
                                           #(e r w)
                                           #((top) (top) (top))
                                           #("i8158" "i8159" "i8160"))
                                         #(ribcage
                                           (lambda-var-list
                                             gen-var
                                             strip
                                             chi-lambda-case
                                             lambda*-formals
                                             chi-simple-lambda
                                             lambda-formals
                                             ellipsis?
                                             chi-void
                                             eval-local-transformer
                                             chi-local-syntax
                                             chi-body
                                             chi-macro
                                             chi-application
                                             chi-expr
                                             chi
                                             chi-top
                                             syntax-type
                                             chi-when-list
                                             chi-install-global
                                             chi-top-sequence
                                             chi-sequence
                                             source-wrap
                                             wrap
                                             bound-id-member?
                                             distinct-bound-ids?
                                             valid-bound-ids?
                                             bound-id=?
                                             free-id=?
                                             id-var-name
                                             same-marks?
                                             join-marks
                                             join-wraps
                                             smart-append
                                             make-binding-wrap
                                             extend-ribcage!
                                             make-empty-ribcage
                                             new-mark
                                             anti-mark
                                             the-anti-mark
                                             top-marked?
                                             top-wrap
                                             empty-wrap
                                             set-ribcage-labels!
                                             set-ribcage-marks!
                                             set-ribcage-symnames!
                                             ribcage-labels
                                             ribcage-marks
                                             ribcage-symnames
                                             ribcage?
                                             make-ribcage
                                             gen-labels
                                             gen-label
                                             make-rename
                                             rename-marks
                                             rename-new
                                             rename-old
                                             subst-rename?
                                             wrap-subst
                                             wrap-marks
                                             make-wrap
                                             id-sym-name&marks
                                             id-sym-name
                                             id?
                                             nonsymbol-id?
                                             global-extend
                                             lookup
                                             macros-only-env
                                             extend-var-env
                                             extend-env
                                             null-env
                                             binding-value
                                             binding-type
                                             make-binding
                                             arg-check
                                             source-annotation
                                             no-source
                                             set-syntax-object-module!
                                             set-syntax-object-wrap!
                                             set-syntax-object-expression!
                                             syntax-object-module
                                             syntax-object-wrap
                                             syntax-object-expression
                                             syntax-object?
                                             make-syntax-object
                                             build-lexical-var
                                             build-letrec
                                             build-named-let
                                             build-let
                                             build-sequence
                                             build-data
                                             build-primref
                                             build-lambda-case
                                             build-case-lambda
                                             build-simple-lambda
                                             build-global-definition
                                             maybe-name-value!
                                             build-global-assignment
                                             build-global-reference
                                             analyze-variable
                                             build-lexical-assignment
                                             build-lexical-reference
                                             build-dynlet
                                             build-conditional
                                             build-application
                                             build-void
                                             decorate-source
                                             get-global-definition-hook
                                             put-global-definition-hook
                                             gensym-hook
                                             local-eval-hook
                                             top-level-eval-hook
                                             fx<
                                             fx=
                                             fx-
                                             fx+
                                             *mode*
                                             noexpand)
                                           ((top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top))
                                           ("i5118"
                                            "i5116"
                                            "i5114"
                                            "i5112"
                                            "i5110"
                                            "i5108"
                                            "i5106"
                                            "i5104"
                                            "i5102"
                                            "i5100"
                                            "i5098"
                                            "i5096"
                                            "i5094"
                                            "i5092"
                                            "i5090"
                                            "i5088"
                                            "i5086"
                                            "i5084"
                                            "i5082"
                                            "i5080"
                                            "i5078"
                                            "i5076"
                                            "i5074"
                                            "i5072"
                                            "i5070"
                                            "i5068"
                                            "i5066"
                                            "i5064"
                                            "i5062"
                                            "i5060"
                                            "i5058"
                                            "i5056"
                                            "i5054"
                                            "i5052"
                                            "i5050"
                                            "i5048"
                                            "i5047"
                                            "i5046"
                                            "i5044"
                                            "i5043"
                                            "i5042"
                                            "i5041"
                                            "i5040"
                                            "i5038"
                                            "i5036"
                                            "i5034"
                                            "i5032"
                                            "i5030"
                                            "i5028"
                                            "i5026"
                                            "i5024"
                                            "i5021"
                                            "i5019"
                                            "i5018"
                                            "i5017"
                                            "i5016"
                                            "i5015"
                                            "i5014"
                                            "i5012"
                                            "i5010"
                                            "i5008"
                                            "i5006"
                                            "i5005"
                                            "i5003"
                                            "i5001"
                                            "i4999"
                                            "i4997"
                                            "i4995"
                                            "i4993"
                                            "i4991"
                                            "i4990"
                                            "i4988"
                                            "i4986"
                                            "i4985"
                                            "i4984"
                                            "i4982"
                                            "i4981"
                                            "i4979"
                                            "i4977"
                                            "i4975"
                                            "i4973"
                                            "i4971"
                                            "i4969"
                                            "i4967"
                                            "i4965"
                                            "i4963"
                                            "i4961"
                                            "i4959"
                                            "i4957"
                                            "i4955"
                                            "i4953"
                                            "i4951"
                                            "i4949"
                                            "i4947"
                                            "i4945"
                                            "i4943"
                                            "i4941"
                                            "i4939"
                                            "i4937"
                                            "i4935"
                                            "i4933"
                                            "i4931"
                                            "i4929"
                                            "i4927"
                                            "i4925"
                                            "i4923"
                                            "i4921"
                                            "i4919"
                                            "i4917"
                                            "i4916"
                                            "i4914"
                                            "i4912"
                                            "i4910"
                                            "i4908"
                                            "i4906"
                                            "i4904"
                                            "i4902"
                                            "i4900"))
                                         #(ribcage
                                           (define-structure and-map*)
                                           ((top) (top))
                                           ("i4803" "i4801")))
                                        (hygiene guile))
                                     #{mod\ 8176}#))))
                         #{tmp\ 8162}#)
                  (syntax-violation
                    #f
                    "source expression failed to match any pattern"
                    #{tmp\ 8161}#)))
              ($sc-dispatch
                #{tmp\ 8161}#
                '(any each-any any))))
           #{e\ 8155}#)))
      (#{global-extend\ 5000}#
        'core
        'if
        (lambda (#{e\ 8179}#
                 #{r\ 8180}#
                 #{w\ 8181}#
                 #{s\ 8182}#
                 #{mod\ 8183}#)
          ((lambda (#{tmp\ 8189}#)
             ((lambda (#{tmp\ 8190}#)
                (if #{tmp\ 8190}#
                  (apply (lambda (#{_\ 8194}# #{test\ 8195}# #{then\ 8196}#)
                           (#{build-conditional\ 4928}#
                             #{s\ 8182}#
                             (#{chi\ 5089}#
                               #{test\ 8195}#
                               #{r\ 8180}#
                               #{w\ 8181}#
                               #{mod\ 8183}#)
                             (#{chi\ 5089}#
                               #{then\ 8196}#
                               #{r\ 8180}#
                               #{w\ 8181}#
                               #{mod\ 8183}#)
                             (#{build-void\ 4924}# #f)))
                         #{tmp\ 8190}#)
                  ((lambda (#{tmp\ 8198}#)
                     (if #{tmp\ 8198}#
                       (apply (lambda (#{_\ 8203}#
                                       #{test\ 8204}#
                                       #{then\ 8205}#
                                       #{else\ 8206}#)
                                (#{build-conditional\ 4928}#
                                  #{s\ 8182}#
                                  (#{chi\ 5089}#
                                    #{test\ 8204}#
                                    #{r\ 8180}#
                                    #{w\ 8181}#
                                    #{mod\ 8183}#)
                                  (#{chi\ 5089}#
                                    #{then\ 8205}#
                                    #{r\ 8180}#
                                    #{w\ 8181}#
                                    #{mod\ 8183}#)
                                  (#{chi\ 5089}#
                                    #{else\ 8206}#
                                    #{r\ 8180}#
                                    #{w\ 8181}#
                                    #{mod\ 8183}#)))
                              #{tmp\ 8198}#)
                       (syntax-violation
                         #f
                         "source expression failed to match any pattern"
                         #{tmp\ 8189}#)))
                   ($sc-dispatch
                     #{tmp\ 8189}#
                     '(any any any any)))))
              ($sc-dispatch
                #{tmp\ 8189}#
                '(any any any))))
           #{e\ 8179}#)))
      (#{global-extend\ 5000}#
        'core
        'with-fluids
        (lambda (#{e\ 8207}#
                 #{r\ 8208}#
                 #{w\ 8209}#
                 #{s\ 8210}#
                 #{mod\ 8211}#)
          ((lambda (#{tmp\ 8217}#)
             ((lambda (#{tmp\ 8218}#)
                (if #{tmp\ 8218}#
                  (apply (lambda (#{_\ 8224}#
                                  #{fluid\ 8225}#
                                  #{val\ 8226}#
                                  #{b\ 8227}#
                                  #{b*\ 8228}#)
                           (#{build-dynlet\ 4930}#
                             #{s\ 8210}#
                             (map (lambda (#{x\ 8229}#)
                                    (#{chi\ 5089}#
                                      #{x\ 8229}#
                                      #{r\ 8208}#
                                      #{w\ 8209}#
                                      #{mod\ 8211}#))
                                  #{fluid\ 8225}#)
                             (map (lambda (#{x\ 8232}#)
                                    (#{chi\ 5089}#
                                      #{x\ 8232}#
                                      #{r\ 8208}#
                                      #{w\ 8209}#
                                      #{mod\ 8211}#))
                                  #{val\ 8226}#)
                             (#{chi-body\ 5097}#
                               (cons #{b\ 8227}# #{b*\ 8228}#)
                               (#{source-wrap\ 5075}#
                                 #{e\ 8207}#
                                 #{w\ 8209}#
                                 #{s\ 8210}#
                                 #{mod\ 8211}#)
                               #{r\ 8208}#
                               #{w\ 8209}#
                               #{mod\ 8211}#)))
                         #{tmp\ 8218}#)
                  (syntax-violation
                    #f
                    "source expression failed to match any pattern"
                    #{tmp\ 8217}#)))
              ($sc-dispatch
                #{tmp\ 8217}#
                '(any #(each (any any)) any . each-any))))
           #{e\ 8207}#)))
      (#{global-extend\ 5000}#
        'begin
        'begin
        '())
      (#{global-extend\ 5000}#
        'define
        'define
        '())
      (#{global-extend\ 5000}#
        'define-syntax
        'define-syntax
        '())
      (#{global-extend\ 5000}#
        'eval-when
        'eval-when
        '())
      (#{global-extend\ 5000}#
        'core
        'syntax-case
        (letrec ((#{gen-syntax-case\ 8243}#
                   (lambda (#{x\ 8244}#
                            #{keys\ 8245}#
                            #{clauses\ 8246}#
                            #{r\ 8247}#
                            #{mod\ 8248}#)
                     (if (null? #{clauses\ 8246}#)
                       (#{build-application\ 4926}#
                         #f
                         (#{build-primref\ 4952}#
                           #f
                           'syntax-violation)
                         (list (#{build-data\ 4954}# #f #f)
                               (#{build-data\ 4954}#
                                 #f
                                 "source expression failed to match any pattern")
                               #{x\ 8244}#))
                       ((lambda (#{tmp\ 8258}#)
                          ((lambda (#{tmp\ 8259}#)
                             (if #{tmp\ 8259}#
                               (apply (lambda (#{pat\ 8262}# #{exp\ 8263}#)
                                        (if (if (#{id?\ 5004}# #{pat\ 8262}#)
                                              (and-map
                                                (lambda (#{x\ 8266}#)
                                                  (not (#{free-id=?\ 5063}#
                                                         #{pat\ 8262}#
                                                         #{x\ 8266}#)))
                                                (cons '#(syntax-object
                                                         ...
                                                         ((top)
                                                          #(ribcage
                                                            #(pat exp)
                                                            #((top) (top))
                                                            #("i8260" "i8261"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(x
                                                              keys
                                                              clauses
                                                              r
                                                              mod)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i8249"
                                                              "i8250"
                                                              "i8251"
                                                              "i8252"
                                                              "i8253"))
                                                          #(ribcage
                                                            (gen-syntax-case
                                                              gen-clause
                                                              build-dispatch-call
                                                              convert-pattern)
                                                            ((top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                            ("i8242"
                                                             "i8240"
                                                             "i8238"
                                                             "i8236"))
                                                          #(ribcage
                                                            (lambda-var-list
                                                              gen-var
                                                              strip
                                                              chi-lambda-case
                                                              lambda*-formals
                                                              chi-simple-lambda
                                                              lambda-formals
                                                              ellipsis?
                                                              chi-void
                                                              eval-local-transformer
                                                              chi-local-syntax
                                                              chi-body
                                                              chi-macro
                                                              chi-application
                                                              chi-expr
                                                              chi
                                                              chi-top
                                                              syntax-type
                                                              chi-when-list
                                                              chi-install-global
                                                              chi-top-sequence
                                                              chi-sequence
                                                              source-wrap
                                                              wrap
                                                              bound-id-member?
                                                              distinct-bound-ids?
                                                              valid-bound-ids?
                                                              bound-id=?
                                                              free-id=?
                                                              id-var-name
                                                              same-marks?
                                                              join-marks
                                                              join-wraps
                                                              smart-append
                                                              make-binding-wrap
                                                              extend-ribcage!
                                                              make-empty-ribcage
                                                              new-mark
                                                              anti-mark
                                                              the-anti-mark
                                                              top-marked?
                                                              top-wrap
                                                              empty-wrap
                                                              set-ribcage-labels!
                                                              set-ribcage-marks!
                                                              set-ribcage-symnames!
                                                              ribcage-labels
                                                              ribcage-marks
                                                              ribcage-symnames
                                                              ribcage?
                                                              make-ribcage
                                                              gen-labels
                                                              gen-label
                                                              make-rename
                                                              rename-marks
                                                              rename-new
                                                              rename-old
                                                              subst-rename?
                                                              wrap-subst
                                                              wrap-marks
                                                              make-wrap
                                                              id-sym-name&marks
                                                              id-sym-name
                                                              id?
                                                              nonsymbol-id?
                                                              global-extend
                                                              lookup
                                                              macros-only-env
                                                              extend-var-env
                                                              extend-env
                                                              null-env
                                                              binding-value
                                                              binding-type
                                                              make-binding
                                                              arg-check
                                                              source-annotation
                                                              no-source
                                                              set-syntax-object-module!
                                                              set-syntax-object-wrap!
                                                              set-syntax-object-expression!
                                                              syntax-object-module
                                                              syntax-object-wrap
                                                              syntax-object-expression
                                                              syntax-object?
                                                              make-syntax-object
                                                              build-lexical-var
                                                              build-letrec
                                                              build-named-let
                                                              build-let
                                                              build-sequence
                                                              build-data
                                                              build-primref
                                                              build-lambda-case
                                                              build-case-lambda
                                                              build-simple-lambda
                                                              build-global-definition
                                                              maybe-name-value!
                                                              build-global-assignment
                                                              build-global-reference
                                                              analyze-variable
                                                              build-lexical-assignment
                                                              build-lexical-reference
                                                              build-dynlet
                                                              build-conditional
                                                              build-application
                                                              build-void
                                                              decorate-source
                                                              get-global-definition-hook
                                                              put-global-definition-hook
                                                              gensym-hook
                                                              local-eval-hook
                                                              top-level-eval-hook
                                                              fx<
                                                              fx=
                                                              fx-
                                                              fx+
                                                              *mode*
                                                              noexpand)
                                                            ((top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                            ("i5118"
                                                             "i5116"
                                                             "i5114"
                                                             "i5112"
                                                             "i5110"
                                                             "i5108"
                                                             "i5106"
                                                             "i5104"
                                                             "i5102"
                                                             "i5100"
                                                             "i5098"
                                                             "i5096"
                                                             "i5094"
                                                             "i5092"
                                                             "i5090"
                                                             "i5088"
                                                             "i5086"
                                                             "i5084"
                                                             "i5082"
                                                             "i5080"
                                                             "i5078"
                                                             "i5076"
                                                             "i5074"
                                                             "i5072"
                                                             "i5070"
                                                             "i5068"
                                                             "i5066"
                                                             "i5064"
                                                             "i5062"
                                                             "i5060"
                                                             "i5058"
                                                             "i5056"
                                                             "i5054"
                                                             "i5052"
                                                             "i5050"
                                                             "i5048"
                                                             "i5047"
                                                             "i5046"
                                                             "i5044"
                                                             "i5043"
                                                             "i5042"
                                                             "i5041"
                                                             "i5040"
                                                             "i5038"
                                                             "i5036"
                                                             "i5034"
                                                             "i5032"
                                                             "i5030"
                                                             "i5028"
                                                             "i5026"
                                                             "i5024"
                                                             "i5021"
                                                             "i5019"
                                                             "i5018"
                                                             "i5017"
                                                             "i5016"
                                                             "i5015"
                                                             "i5014"
                                                             "i5012"
                                                             "i5010"
                                                             "i5008"
                                                             "i5006"
                                                             "i5005"
                                                             "i5003"
                                                             "i5001"
                                                             "i4999"
                                                             "i4997"
                                                             "i4995"
                                                             "i4993"
                                                             "i4991"
                                                             "i4990"
                                                             "i4988"
                                                             "i4986"
                                                             "i4985"
                                                             "i4984"
                                                             "i4982"
                                                             "i4981"
                                                             "i4979"
                                                             "i4977"
                                                             "i4975"
                                                             "i4973"
                                                             "i4971"
                                                             "i4969"
                                                             "i4967"
                                                             "i4965"
                                                             "i4963"
                                                             "i4961"
                                                             "i4959"
                                                             "i4957"
                                                             "i4955"
                                                             "i4953"
                                                             "i4951"
                                                             "i4949"
                                                             "i4947"
                                                             "i4945"
                                                             "i4943"
                                                             "i4941"
                                                             "i4939"
                                                             "i4937"
                                                             "i4935"
                                                             "i4933"
                                                             "i4931"
                                                             "i4929"
                                                             "i4927"
                                                             "i4925"
                                                             "i4923"
                                                             "i4921"
                                                             "i4919"
                                                             "i4917"
                                                             "i4916"
                                                             "i4914"
                                                             "i4912"
                                                             "i4910"
                                                             "i4908"
                                                             "i4906"
                                                             "i4904"
                                                             "i4902"
                                                             "i4900"))
                                                          #(ribcage
                                                            (define-structure
                                                              and-map*)
                                                            ((top) (top))
                                                            ("i4803" "i4801")))
                                                         (hygiene guile))
                                                      #{keys\ 8245}#))
                                              #f)
                                          (let ((#{labels\ 8270}#
                                                  (list (#{gen-label\ 5020}#)))
                                                (#{var\ 8271}#
                                                  (#{gen-var\ 5117}#
                                                    #{pat\ 8262}#)))
                                            (#{build-application\ 4926}#
                                              #f
                                              (#{build-simple-lambda\ 4946}#
                                                #f
                                                (list (syntax->datum
                                                        #{pat\ 8262}#))
                                                #f
                                                (list #{var\ 8271}#)
                                                '()
                                                (#{chi\ 5089}#
                                                  #{exp\ 8263}#
                                                  (#{extend-env\ 4992}#
                                                    #{labels\ 8270}#
                                                    (list (cons 'syntax
                                                                (cons #{var\ 8271}#
                                                                      0)))
                                                    #{r\ 8247}#)
                                                  (#{make-binding-wrap\ 5051}#
                                                    (list #{pat\ 8262}#)
                                                    #{labels\ 8270}#
                                                    '(()))
                                                  #{mod\ 8248}#))
                                              (list #{x\ 8244}#)))
                                          (#{gen-clause\ 8241}#
                                            #{x\ 8244}#
                                            #{keys\ 8245}#
                                            (cdr #{clauses\ 8246}#)
                                            #{r\ 8247}#
                                            #{pat\ 8262}#
                                            #t
                                            #{exp\ 8263}#
                                            #{mod\ 8248}#)))
                                      #{tmp\ 8259}#)
                               ((lambda (#{tmp\ 8277}#)
                                  (if #{tmp\ 8277}#
                                    (apply (lambda (#{pat\ 8281}#
                                                    #{fender\ 8282}#
                                                    #{exp\ 8283}#)
                                             (#{gen-clause\ 8241}#
                                               #{x\ 8244}#
                                               #{keys\ 8245}#
                                               (cdr #{clauses\ 8246}#)
                                               #{r\ 8247}#
                                               #{pat\ 8281}#
                                               #{fender\ 8282}#
                                               #{exp\ 8283}#
                                               #{mod\ 8248}#))
                                           #{tmp\ 8277}#)
                                    ((lambda (#{_\ 8285}#)
                                       (syntax-violation
                                         'syntax-case
                                         "invalid clause"
                                         (car #{clauses\ 8246}#)))
                                     #{tmp\ 8258}#)))
                                ($sc-dispatch
                                  #{tmp\ 8258}#
                                  '(any any any)))))
                           ($sc-dispatch #{tmp\ 8258}# (quote (any any)))))
                        (car #{clauses\ 8246}#)))))
                 (#{gen-clause\ 8241}#
                   (lambda (#{x\ 8286}#
                            #{keys\ 8287}#
                            #{clauses\ 8288}#
                            #{r\ 8289}#
                            #{pat\ 8290}#
                            #{fender\ 8291}#
                            #{exp\ 8292}#
                            #{mod\ 8293}#)
                     (call-with-values
                       (lambda ()
                         (#{convert-pattern\ 8237}#
                           #{pat\ 8290}#
                           #{keys\ 8287}#))
                       (lambda (#{p\ 8302}# #{pvars\ 8303}#)
                         (if (not (#{distinct-bound-ids?\ 5069}#
                                    (map car #{pvars\ 8303}#)))
                           (syntax-violation
                             'syntax-case
                             "duplicate pattern variable"
                             #{pat\ 8290}#)
                           (if (not (and-map
                                      (lambda (#{x\ 8310}#)
                                        (not (#{ellipsis?\ 5105}#
                                               (car #{x\ 8310}#))))
                                      #{pvars\ 8303}#))
                             (syntax-violation
                               'syntax-case
                               "misplaced ellipsis"
                               #{pat\ 8290}#)
                             (let ((#{y\ 8314}#
                                     (#{gen-var\ 5117}# (quote tmp))))
                               (#{build-application\ 4926}#
                                 #f
                                 (#{build-simple-lambda\ 4946}#
                                   #f
                                   (list (quote tmp))
                                   #f
                                   (list #{y\ 8314}#)
                                   '()
                                   (let ((#{y\ 8318}#
                                           (#{build-lexical-reference\ 4932}#
                                             'value
                                             #f
                                             'tmp
                                             #{y\ 8314}#)))
                                     (#{build-conditional\ 4928}#
                                       #f
                                       ((lambda (#{tmp\ 8321}#)
                                          ((lambda (#{tmp\ 8322}#)
                                             (if #{tmp\ 8322}#
                                               (apply (lambda () #{y\ 8318}#)
                                                      #{tmp\ 8322}#)
                                               ((lambda (#{_\ 8324}#)
                                                  (#{build-conditional\ 4928}#
                                                    #f
                                                    #{y\ 8318}#
                                                    (#{build-dispatch-call\ 8239}#
                                                      #{pvars\ 8303}#
                                                      #{fender\ 8291}#
                                                      #{y\ 8318}#
                                                      #{r\ 8289}#
                                                      #{mod\ 8293}#)
                                                    (#{build-data\ 4954}#
                                                      #f
                                                      #f)))
                                                #{tmp\ 8321}#)))
                                           ($sc-dispatch
                                             #{tmp\ 8321}#
                                             '#(atom #t))))
                                        #{fender\ 8291}#)
                                       (#{build-dispatch-call\ 8239}#
                                         #{pvars\ 8303}#
                                         #{exp\ 8292}#
                                         #{y\ 8318}#
                                         #{r\ 8289}#
                                         #{mod\ 8293}#)
                                       (#{gen-syntax-case\ 8243}#
                                         #{x\ 8286}#
                                         #{keys\ 8287}#
                                         #{clauses\ 8288}#
                                         #{r\ 8289}#
                                         #{mod\ 8293}#))))
                                 (list (if (eq? #{p\ 8302}# (quote any))
                                         (#{build-application\ 4926}#
                                           #f
                                           (#{build-primref\ 4952}#
                                             #f
                                             'list)
                                           (list #{x\ 8286}#))
                                         (#{build-application\ 4926}#
                                           #f
                                           (#{build-primref\ 4952}#
                                             #f
                                             '$sc-dispatch)
                                           (list #{x\ 8286}#
                                                 (#{build-data\ 4954}#
                                                   #f
                                                   #{p\ 8302}#)))))))))))))
                 (#{build-dispatch-call\ 8239}#
                   (lambda (#{pvars\ 8332}#
                            #{exp\ 8333}#
                            #{y\ 8334}#
                            #{r\ 8335}#
                            #{mod\ 8336}#)
                     (let ((#{ids\ 8344}# (map car #{pvars\ 8332}#))
                           (#{levels\ 8345}# (map cdr #{pvars\ 8332}#)))
                       (let ((#{labels\ 8348}#
                               (#{gen-labels\ 5022}# #{ids\ 8344}#))
                             (#{new-vars\ 8349}#
                               (map #{gen-var\ 5117}# #{ids\ 8344}#)))
                         (#{build-application\ 4926}#
                           #f
                           (#{build-primref\ 4952}# #f (quote apply))
                           (list (#{build-simple-lambda\ 4946}#
                                   #f
                                   (map syntax->datum #{ids\ 8344}#)
                                   #f
                                   #{new-vars\ 8349}#
                                   '()
                                   (#{chi\ 5089}#
                                     #{exp\ 8333}#
                                     (#{extend-env\ 4992}#
                                       #{labels\ 8348}#
                                       (map (lambda (#{var\ 8353}#
                                                     #{level\ 8354}#)
                                              (cons 'syntax
                                                    (cons #{var\ 8353}#
                                                          #{level\ 8354}#)))
                                            #{new-vars\ 8349}#
                                            (map cdr #{pvars\ 8332}#))
                                       #{r\ 8335}#)
                                     (#{make-binding-wrap\ 5051}#
                                       #{ids\ 8344}#
                                       #{labels\ 8348}#
                                       '(()))
                                     #{mod\ 8336}#))
                                 #{y\ 8334}#))))))
                 (#{convert-pattern\ 8237}#
                   (lambda (#{pattern\ 8360}# #{keys\ 8361}#)
                     (letrec ((#{cvt\ 8367}#
                                (lambda (#{p\ 8368}# #{n\ 8369}# #{ids\ 8370}#)
                                  (if (#{id?\ 5004}# #{p\ 8368}#)
                                    (if (#{bound-id-member?\ 5071}#
                                          #{p\ 8368}#
                                          #{keys\ 8361}#)
                                      (values
                                        (vector (quote free-id) #{p\ 8368}#)
                                        #{ids\ 8370}#)
                                      (values
                                        'any
                                        (cons (cons #{p\ 8368}# #{n\ 8369}#)
                                              #{ids\ 8370}#)))
                                    ((lambda (#{tmp\ 8374}#)
                                       ((lambda (#{tmp\ 8375}#)
                                          (if (if #{tmp\ 8375}#
                                                (apply (lambda (#{x\ 8378}#
                                                                #{dots\ 8379}#)
                                                         (#{ellipsis?\ 5105}#
                                                           #{dots\ 8379}#))
                                                       #{tmp\ 8375}#)
                                                #f)
                                            (apply (lambda (#{x\ 8382}#
                                                            #{dots\ 8383}#)
                                                     (call-with-values
                                                       (lambda ()
                                                         (#{cvt\ 8367}#
                                                           #{x\ 8382}#
                                                           (#{fx+\ 4905}#
                                                             #{n\ 8369}#
                                                             1)
                                                           #{ids\ 8370}#))
                                                       (lambda (#{p\ 8384}#
                                                                #{ids\ 8385}#)
                                                         (values
                                                           (if (eq? #{p\ 8384}#
                                                                    'any)
                                                             'each-any
                                                             (vector
                                                               'each
                                                               #{p\ 8384}#))
                                                           #{ids\ 8385}#))))
                                                   #{tmp\ 8375}#)
                                            ((lambda (#{tmp\ 8388}#)
                                               (if (if #{tmp\ 8388}#
                                                     (apply (lambda (#{x\ 8392}#
                                                                     #{dots\ 8393}#
                                                                     #{ys\ 8394}#)
                                                              (#{ellipsis?\ 5105}#
                                                                #{dots\ 8393}#))
                                                            #{tmp\ 8388}#)
                                                     #f)
                                                 (apply (lambda (#{x\ 8398}#
                                                                 #{dots\ 8399}#
                                                                 #{ys\ 8400}#)
                                                          (call-with-values
                                                            (lambda ()
                                                              (#{cvt*\ 8365}#
                                                                #{ys\ 8400}#
                                                                #{n\ 8369}#
                                                                #{ids\ 8370}#))
                                                            (lambda (#{ys\ 8402}#
                                                                     #{ids\ 8403}#)
                                                              (call-with-values
                                                                (lambda ()
                                                                  (#{cvt\ 8367}#
                                                                    #{x\ 8398}#
                                                                    (+ #{n\ 8369}#
                                                                       1)
                                                                    #{ids\ 8403}#))
                                                                (lambda (#{x\ 8406}#
                                                                         #{ids\ 8407}#)
                                                                  (values
                                                                    (list->vector
                                                                      (cons 'each+
                                                                            (cons #{x\ 8406}#
                                                                                  (cons (reverse
                                                                                          #{ys\ 8402}#)
                                                                                        '(())))))
                                                                    #{ids\ 8407}#))))))
                                                        #{tmp\ 8388}#)
                                                 ((lambda (#{tmp\ 8411}#)
                                                    (if #{tmp\ 8411}#
                                                      (apply (lambda (#{x\ 8414}#
                                                                      #{y\ 8415}#)
                                                               (call-with-values
                                                                 (lambda ()
                                                                   (#{cvt\ 8367}#
                                                                     #{y\ 8415}#
                                                                     #{n\ 8369}#
                                                                     #{ids\ 8370}#))
                                                                 (lambda (#{y\ 8416}#
                                                                          #{ids\ 8417}#)
                                                                   (call-with-values
                                                                     (lambda ()
                                                                       (#{cvt\ 8367}#
                                                                         #{x\ 8414}#
                                                                         #{n\ 8369}#
                                                                         #{ids\ 8417}#))
                                                                     (lambda (#{x\ 8420}#
                                                                              #{ids\ 8421}#)
                                                                       (values
                                                                         (cons #{x\ 8420}#
                                                                               #{y\ 8416}#)
                                                                         #{ids\ 8421}#))))))
                                                             #{tmp\ 8411}#)
                                                      ((lambda (#{tmp\ 8424}#)
                                                         (if #{tmp\ 8424}#
                                                           (apply (lambda ()
                                                                    (values
                                                                      '()
                                                                      #{ids\ 8370}#))
                                                                  #{tmp\ 8424}#)
                                                           ((lambda (#{tmp\ 8425}#)
                                                              (if #{tmp\ 8425}#
                                                                (apply (lambda (#{x\ 8427}#)
                                                                         (call-with-values
                                                                           (lambda ()
                                                                             (#{cvt\ 8367}#
                                                                               #{x\ 8427}#
                                                                               #{n\ 8369}#
                                                                               #{ids\ 8370}#))
                                                                           (lambda (#{p\ 8429}#
                                                                                    #{ids\ 8430}#)
                                                                             (values
                                                                               (vector
                                                                                 'vector
                                                                                 #{p\ 8429}#)
                                                                               #{ids\ 8430}#))))
                                                                       #{tmp\ 8425}#)
                                                                ((lambda (#{x\ 8434}#)
                                                                   (values
                                                                     (vector
                                                                       'atom
                                                                       (#{strip\ 5115}#
                                                                         #{p\ 8368}#
                                                                         '(())))
                                                                     #{ids\ 8370}#))
                                                                 #{tmp\ 8374}#)))
                                                            ($sc-dispatch
                                                              #{tmp\ 8374}#
                                                              '#(vector
                                                                 each-any)))))
                                                       ($sc-dispatch
                                                         #{tmp\ 8374}#
                                                         '()))))
                                                  ($sc-dispatch
                                                    #{tmp\ 8374}#
                                                    '(any . any)))))
                                             ($sc-dispatch
                                               #{tmp\ 8374}#
                                               '(any any . each-any)))))
                                        ($sc-dispatch
                                          #{tmp\ 8374}#
                                          '(any any))))
                                     #{p\ 8368}#))))
                              (#{cvt*\ 8365}#
                                (lambda (#{p*\ 8436}#
                                         #{n\ 8437}#
                                         #{ids\ 8438}#)
                                  (if (null? #{p*\ 8436}#)
                                    (values (quote ()) #{ids\ 8438}#)
                                    (call-with-values
                                      (lambda ()
                                        (#{cvt*\ 8365}#
                                          (cdr #{p*\ 8436}#)
                                          #{n\ 8437}#
                                          #{ids\ 8438}#))
                                      (lambda (#{y\ 8442}# #{ids\ 8443}#)
                                        (call-with-values
                                          (lambda ()
                                            (#{cvt\ 8367}#
                                              (car #{p*\ 8436}#)
                                              #{n\ 8437}#
                                              #{ids\ 8443}#))
                                          (lambda (#{x\ 8446}# #{ids\ 8447}#)
                                            (values
                                              (cons #{x\ 8446}# #{y\ 8442}#)
                                              #{ids\ 8447}#)))))))))
                       (#{cvt\ 8367}# #{pattern\ 8360}# 0 (quote ()))))))
          (lambda (#{e\ 8450}#
                   #{r\ 8451}#
                   #{w\ 8452}#
                   #{s\ 8453}#
                   #{mod\ 8454}#)
            (let ((#{e\ 8461}#
                    (#{source-wrap\ 5075}#
                      #{e\ 8450}#
                      #{w\ 8452}#
                      #{s\ 8453}#
                      #{mod\ 8454}#)))
              ((lambda (#{tmp\ 8462}#)
                 ((lambda (#{tmp\ 8463}#)
                    (if #{tmp\ 8463}#
                      (apply (lambda (#{_\ 8468}#
                                      #{val\ 8469}#
                                      #{key\ 8470}#
                                      #{m\ 8471}#)
                               (if (and-map
                                     (lambda (#{x\ 8472}#)
                                       (if (#{id?\ 5004}# #{x\ 8472}#)
                                         (not (#{ellipsis?\ 5105}#
                                                #{x\ 8472}#))
                                         #f))
                                     #{key\ 8470}#)
                                 (let ((#{x\ 8478}#
                                         (#{gen-var\ 5117}# (quote tmp))))
                                   (#{build-application\ 4926}#
                                     #{s\ 8453}#
                                     (#{build-simple-lambda\ 4946}#
                                       #f
                                       (list (quote tmp))
                                       #f
                                       (list #{x\ 8478}#)
                                       '()
                                       (#{gen-syntax-case\ 8243}#
                                         (#{build-lexical-reference\ 4932}#
                                           'value
                                           #f
                                           'tmp
                                           #{x\ 8478}#)
                                         #{key\ 8470}#
                                         #{m\ 8471}#
                                         #{r\ 8451}#
                                         #{mod\ 8454}#))
                                     (list (#{chi\ 5089}#
                                             #{val\ 8469}#
                                             #{r\ 8451}#
                                             '(())
                                             #{mod\ 8454}#))))
                                 (syntax-violation
                                   'syntax-case
                                   "invalid literals list"
                                   #{e\ 8461}#)))
                             #{tmp\ 8463}#)
                      (syntax-violation
                        #f
                        "source expression failed to match any pattern"
                        #{tmp\ 8462}#)))
                  ($sc-dispatch
                    #{tmp\ 8462}#
                    '(any any each-any . each-any))))
               #{e\ 8461}#)))))
      (set! macroexpand
        (lambda (#{x\ 8484}# . #{rest\ 8485}#)
          (if (if (pair? #{x\ 8484}#)
                (equal? (car #{x\ 8484}#) #{noexpand\ 4901}#)
                #f)
            (cadr #{x\ 8484}#)
            (let ((#{m\ 8492}#
                    (if (null? #{rest\ 8485}#)
                      'e
                      (car #{rest\ 8485}#)))
                  (#{esew\ 8493}#
                    (if (let ((#{t\ 8496}# (null? #{rest\ 8485}#)))
                          (if #{t\ 8496}#
                            #{t\ 8496}#
                            (null? (cdr #{rest\ 8485}#))))
                      '(eval)
                      (cadr #{rest\ 8485}#))))
              (with-fluids
                ((#{*mode*\ 4903}# #{m\ 8492}#))
                (#{chi-top\ 5087}#
                  #{x\ 8484}#
                  '()
                  '((top))
                  #{m\ 8492}#
                  #{esew\ 8493}#
                  (cons 'hygiene
                        (module-name (current-module)))))))))
      (set! identifier?
        (lambda (#{x\ 8500}#)
          (#{nonsymbol-id?\ 5002}# #{x\ 8500}#)))
      (set! datum->syntax
        (lambda (#{id\ 8502}# #{datum\ 8503}#)
          (#{make-syntax-object\ 4966}#
            #{datum\ 8503}#
            (#{syntax-object-wrap\ 4972}# #{id\ 8502}#)
            #f)))
      (set! syntax->datum
        (lambda (#{x\ 8506}#)
          (#{strip\ 5115}# #{x\ 8506}# (quote (())))))
      (set! generate-temporaries
        (lambda (#{ls\ 8509}#)
          (begin
            (let ((#{x\ 8513}# #{ls\ 8509}#))
              (if (not (list? #{x\ 8513}#))
                (syntax-violation
                  'generate-temporaries
                  "invalid argument"
                  #{x\ 8513}#)))
            (map (lambda (#{x\ 8514}#)
                   (#{wrap\ 5073}# (gensym) (quote ((top))) #f))
                 #{ls\ 8509}#))))
      (set! free-identifier=?
        (lambda (#{x\ 8518}# #{y\ 8519}#)
          (begin
            (let ((#{x\ 8524}# #{x\ 8518}#))
              (if (not (#{nonsymbol-id?\ 5002}# #{x\ 8524}#))
                (syntax-violation
                  'free-identifier=?
                  "invalid argument"
                  #{x\ 8524}#)))
            (let ((#{x\ 8527}# #{y\ 8519}#))
              (if (not (#{nonsymbol-id?\ 5002}# #{x\ 8527}#))
                (syntax-violation
                  'free-identifier=?
                  "invalid argument"
                  #{x\ 8527}#)))
            (#{free-id=?\ 5063}# #{x\ 8518}# #{y\ 8519}#))))
      (set! bound-identifier=?
        (lambda (#{x\ 8528}# #{y\ 8529}#)
          (begin
            (let ((#{x\ 8534}# #{x\ 8528}#))
              (if (not (#{nonsymbol-id?\ 5002}# #{x\ 8534}#))
                (syntax-violation
                  'bound-identifier=?
                  "invalid argument"
                  #{x\ 8534}#)))
            (let ((#{x\ 8537}# #{y\ 8529}#))
              (if (not (#{nonsymbol-id?\ 5002}# #{x\ 8537}#))
                (syntax-violation
                  'bound-identifier=?
                  "invalid argument"
                  #{x\ 8537}#)))
            (#{bound-id=?\ 5065}# #{x\ 8528}# #{y\ 8529}#))))
      (set! syntax-violation
        (lambda (#{who\ 8538}#
                 #{message\ 8539}#
                 #{form\ 8540}#
                 .
                 #{subform\ 8541}#)
          (begin
            (let ((#{x\ 8548}# #{who\ 8538}#))
              (if (not ((lambda (#{x\ 8549}#)
                          (let ((#{t\ 8553}# (not #{x\ 8549}#)))
                            (if #{t\ 8553}#
                              #{t\ 8553}#
                              (let ((#{t\ 8556}# (string? #{x\ 8549}#)))
                                (if #{t\ 8556}#
                                  #{t\ 8556}#
                                  (symbol? #{x\ 8549}#))))))
                        #{x\ 8548}#))
                (syntax-violation
                  'syntax-violation
                  "invalid argument"
                  #{x\ 8548}#)))
            (let ((#{x\ 8560}# #{message\ 8539}#))
              (if (not (string? #{x\ 8560}#))
                (syntax-violation
                  'syntax-violation
                  "invalid argument"
                  #{x\ 8560}#)))
            (scm-error
              'syntax-error
              'macroexpand
              (string-append
                (if #{who\ 8538}# "~a: " "")
                "~a "
                (if (null? #{subform\ 8541}#)
                  "in ~a"
                  "in subform `~s' of `~s'"))
              (let ((#{tail\ 8562}#
                      (cons #{message\ 8539}#
                            (map (lambda (#{x\ 8563}#)
                                   (#{strip\ 5115}# #{x\ 8563}# (quote (()))))
                                 (append
                                   #{subform\ 8541}#
                                   (list #{form\ 8540}#))))))
                (if #{who\ 8538}#
                  (cons #{who\ 8538}# #{tail\ 8562}#)
                  #{tail\ 8562}#))
              #f))))
      (letrec ((#{match\ 8579}#
                 (lambda (#{e\ 8580}#
                          #{p\ 8581}#
                          #{w\ 8582}#
                          #{r\ 8583}#
                          #{mod\ 8584}#)
                   (if (not #{r\ 8583}#)
                     #f
                     (if (eq? #{p\ 8581}# (quote any))
                       (cons (#{wrap\ 5073}#
                               #{e\ 8580}#
                               #{w\ 8582}#
                               #{mod\ 8584}#)
                             #{r\ 8583}#)
                       (if (#{syntax-object?\ 4968}# #{e\ 8580}#)
                         (#{match*\ 8577}#
                           (#{syntax-object-expression\ 4970}# #{e\ 8580}#)
                           #{p\ 8581}#
                           (#{join-wraps\ 5055}#
                             #{w\ 8582}#
                             (#{syntax-object-wrap\ 4972}# #{e\ 8580}#))
                           #{r\ 8583}#
                           (#{syntax-object-module\ 4974}# #{e\ 8580}#))
                         (#{match*\ 8577}#
                           #{e\ 8580}#
                           #{p\ 8581}#
                           #{w\ 8582}#
                           #{r\ 8583}#
                           #{mod\ 8584}#))))))
               (#{match*\ 8577}#
                 (lambda (#{e\ 8597}#
                          #{p\ 8598}#
                          #{w\ 8599}#
                          #{r\ 8600}#
                          #{mod\ 8601}#)
                   (if (null? #{p\ 8598}#)
                     (if (null? #{e\ 8597}#) #{r\ 8600}# #f)
                     (if (pair? #{p\ 8598}#)
                       (if (pair? #{e\ 8597}#)
                         (#{match\ 8579}#
                           (car #{e\ 8597}#)
                           (car #{p\ 8598}#)
                           #{w\ 8599}#
                           (#{match\ 8579}#
                             (cdr #{e\ 8597}#)
                             (cdr #{p\ 8598}#)
                             #{w\ 8599}#
                             #{r\ 8600}#
                             #{mod\ 8601}#)
                           #{mod\ 8601}#)
                         #f)
                       (if (eq? #{p\ 8598}# (quote each-any))
                         (let ((#{l\ 8618}#
                                 (#{match-each-any\ 8571}#
                                   #{e\ 8597}#
                                   #{w\ 8599}#
                                   #{mod\ 8601}#)))
                           (if #{l\ 8618}#
                             (cons #{l\ 8618}# #{r\ 8600}#)
                             #f))
                         (let ((#{atom-key\ 8624}# (vector-ref #{p\ 8598}# 0)))
                           (if (memv #{atom-key\ 8624}# (quote (each)))
                             (if (null? #{e\ 8597}#)
                               (#{match-empty\ 8573}#
                                 (vector-ref #{p\ 8598}# 1)
                                 #{r\ 8600}#)
                               (let ((#{l\ 8627}#
                                       (#{match-each\ 8567}#
                                         #{e\ 8597}#
                                         (vector-ref #{p\ 8598}# 1)
                                         #{w\ 8599}#
                                         #{mod\ 8601}#)))
                                 (if #{l\ 8627}#
                                   (letrec ((#{collect\ 8632}#
                                              (lambda (#{l\ 8633}#)
                                                (if (null? (car #{l\ 8633}#))
                                                  #{r\ 8600}#
                                                  (cons (map car #{l\ 8633}#)
                                                        (#{collect\ 8632}#
                                                          (map cdr
                                                               #{l\ 8633}#)))))))
                                     (#{collect\ 8632}# #{l\ 8627}#))
                                   #f)))
                             (if (memv #{atom-key\ 8624}# (quote (each+)))
                               (call-with-values
                                 (lambda ()
                                   (#{match-each+\ 8569}#
                                     #{e\ 8597}#
                                     (vector-ref #{p\ 8598}# 1)
                                     (vector-ref #{p\ 8598}# 2)
                                     (vector-ref #{p\ 8598}# 3)
                                     #{w\ 8599}#
                                     #{r\ 8600}#
                                     #{mod\ 8601}#))
                                 (lambda (#{xr*\ 8635}#
                                          #{y-pat\ 8636}#
                                          #{r\ 8637}#)
                                   (if #{r\ 8637}#
                                     (if (null? #{y-pat\ 8636}#)
                                       (if (null? #{xr*\ 8635}#)
                                         (#{match-empty\ 8573}#
                                           (vector-ref #{p\ 8598}# 1)
                                           #{r\ 8637}#)
                                         (#{combine\ 8575}#
                                           #{xr*\ 8635}#
                                           #{r\ 8637}#))
                                       #f)
                                     #f)))
                               (if (memv #{atom-key\ 8624}# (quote (free-id)))
                                 (if (#{id?\ 5004}# #{e\ 8597}#)
                                   (if (#{free-id=?\ 5063}#
                                         (#{wrap\ 5073}#
                                           #{e\ 8597}#
                                           #{w\ 8599}#
                                           #{mod\ 8601}#)
                                         (vector-ref #{p\ 8598}# 1))
                                     #{r\ 8600}#
                                     #f)
                                   #f)
                                 (if (memv #{atom-key\ 8624}# (quote (atom)))
                                   (if (equal?
                                         (vector-ref #{p\ 8598}# 1)
                                         (#{strip\ 5115}#
                                           #{e\ 8597}#
                                           #{w\ 8599}#))
                                     #{r\ 8600}#
                                     #f)
                                   (if (memv #{atom-key\ 8624}#
                                             '(vector))
                                     (if (vector? #{e\ 8597}#)
                                       (#{match\ 8579}#
                                         (vector->list #{e\ 8597}#)
                                         (vector-ref #{p\ 8598}# 1)
                                         #{w\ 8599}#
                                         #{r\ 8600}#
                                         #{mod\ 8601}#)
                                       #f))))))))))))
               (#{combine\ 8575}#
                 (lambda (#{r*\ 8654}# #{r\ 8655}#)
                   (if (null? (car #{r*\ 8654}#))
                     #{r\ 8655}#
                     (cons (map car #{r*\ 8654}#)
                           (#{combine\ 8575}#
                             (map cdr #{r*\ 8654}#)
                             #{r\ 8655}#)))))
               (#{match-empty\ 8573}#
                 (lambda (#{p\ 8658}# #{r\ 8659}#)
                   (if (null? #{p\ 8658}#)
                     #{r\ 8659}#
                     (if (eq? #{p\ 8658}# (quote any))
                       (cons (quote ()) #{r\ 8659}#)
                       (if (pair? #{p\ 8658}#)
                         (#{match-empty\ 8573}#
                           (car #{p\ 8658}#)
                           (#{match-empty\ 8573}#
                             (cdr #{p\ 8658}#)
                             #{r\ 8659}#))
                         (if (eq? #{p\ 8658}# (quote each-any))
                           (cons (quote ()) #{r\ 8659}#)
                           (let ((#{atom-key\ 8673}#
                                   (vector-ref #{p\ 8658}# 0)))
                             (if (memv #{atom-key\ 8673}# (quote (each)))
                               (#{match-empty\ 8573}#
                                 (vector-ref #{p\ 8658}# 1)
                                 #{r\ 8659}#)
                               (if (memv #{atom-key\ 8673}# (quote (each+)))
                                 (#{match-empty\ 8573}#
                                   (vector-ref #{p\ 8658}# 1)
                                   (#{match-empty\ 8573}#
                                     (reverse (vector-ref #{p\ 8658}# 2))
                                     (#{match-empty\ 8573}#
                                       (vector-ref #{p\ 8658}# 3)
                                       #{r\ 8659}#)))
                                 (if (memv #{atom-key\ 8673}#
                                           '(free-id atom))
                                   #{r\ 8659}#
                                   (if (memv #{atom-key\ 8673}#
                                             '(vector))
                                     (#{match-empty\ 8573}#
                                       (vector-ref #{p\ 8658}# 1)
                                       #{r\ 8659}#))))))))))))
               (#{match-each-any\ 8571}#
                 (lambda (#{e\ 8678}# #{w\ 8679}# #{mod\ 8680}#)
                   (if (pair? #{e\ 8678}#)
                     (let ((#{l\ 8687}#
                             (#{match-each-any\ 8571}#
                               (cdr #{e\ 8678}#)
                               #{w\ 8679}#
                               #{mod\ 8680}#)))
                       (if #{l\ 8687}#
                         (cons (#{wrap\ 5073}#
                                 (car #{e\ 8678}#)
                                 #{w\ 8679}#
                                 #{mod\ 8680}#)
                               #{l\ 8687}#)
                         #f))
                     (if (null? #{e\ 8678}#)
                       '()
                       (if (#{syntax-object?\ 4968}# #{e\ 8678}#)
                         (#{match-each-any\ 8571}#
                           (#{syntax-object-expression\ 4970}# #{e\ 8678}#)
                           (#{join-wraps\ 5055}#
                             #{w\ 8679}#
                             (#{syntax-object-wrap\ 4972}# #{e\ 8678}#))
                           #{mod\ 8680}#)
                         #f)))))
               (#{match-each+\ 8569}#
                 (lambda (#{e\ 8695}#
                          #{x-pat\ 8696}#
                          #{y-pat\ 8697}#
                          #{z-pat\ 8698}#
                          #{w\ 8699}#
                          #{r\ 8700}#
                          #{mod\ 8701}#)
                   (letrec ((#{f\ 8712}#
                              (lambda (#{e\ 8713}# #{w\ 8714}#)
                                (if (pair? #{e\ 8713}#)
                                  (call-with-values
                                    (lambda ()
                                      (#{f\ 8712}#
                                        (cdr #{e\ 8713}#)
                                        #{w\ 8714}#))
                                    (lambda (#{xr*\ 8717}#
                                             #{y-pat\ 8718}#
                                             #{r\ 8719}#)
                                      (if #{r\ 8719}#
                                        (if (null? #{y-pat\ 8718}#)
                                          (let ((#{xr\ 8724}#
                                                  (#{match\ 8579}#
                                                    (car #{e\ 8713}#)
                                                    #{x-pat\ 8696}#
                                                    #{w\ 8714}#
                                                    '()
                                                    #{mod\ 8701}#)))
                                            (if #{xr\ 8724}#
                                              (values
                                                (cons #{xr\ 8724}#
                                                      #{xr*\ 8717}#)
                                                #{y-pat\ 8718}#
                                                #{r\ 8719}#)
                                              (values #f #f #f)))
                                          (values
                                            '()
                                            (cdr #{y-pat\ 8718}#)
                                            (#{match\ 8579}#
                                              (car #{e\ 8713}#)
                                              (car #{y-pat\ 8718}#)
                                              #{w\ 8714}#
                                              #{r\ 8719}#
                                              #{mod\ 8701}#)))
                                        (values #f #f #f))))
                                  (if (#{syntax-object?\ 4968}# #{e\ 8713}#)
                                    (#{f\ 8712}#
                                      (#{syntax-object-expression\ 4970}#
                                        #{e\ 8713}#)
                                      (#{join-wraps\ 5055}#
                                        #{w\ 8714}#
                                        #{e\ 8713}#))
                                    (values
                                      '()
                                      #{y-pat\ 8697}#
                                      (#{match\ 8579}#
                                        #{e\ 8713}#
                                        #{z-pat\ 8698}#
                                        #{w\ 8714}#
                                        #{r\ 8700}#
                                        #{mod\ 8701}#)))))))
                     (#{f\ 8712}# #{e\ 8695}# #{w\ 8699}#))))
               (#{match-each\ 8567}#
                 (lambda (#{e\ 8728}#
                          #{p\ 8729}#
                          #{w\ 8730}#
                          #{mod\ 8731}#)
                   (if (pair? #{e\ 8728}#)
                     (let ((#{first\ 8739}#
                             (#{match\ 8579}#
                               (car #{e\ 8728}#)
                               #{p\ 8729}#
                               #{w\ 8730}#
                               '()
                               #{mod\ 8731}#)))
                       (if #{first\ 8739}#
                         (let ((#{rest\ 8743}#
                                 (#{match-each\ 8567}#
                                   (cdr #{e\ 8728}#)
                                   #{p\ 8729}#
                                   #{w\ 8730}#
                                   #{mod\ 8731}#)))
                           (if #{rest\ 8743}#
                             (cons #{first\ 8739}# #{rest\ 8743}#)
                             #f))
                         #f))
                     (if (null? #{e\ 8728}#)
                       '()
                       (if (#{syntax-object?\ 4968}# #{e\ 8728}#)
                         (#{match-each\ 8567}#
                           (#{syntax-object-expression\ 4970}# #{e\ 8728}#)
                           #{p\ 8729}#
                           (#{join-wraps\ 5055}#
                             #{w\ 8730}#
                             (#{syntax-object-wrap\ 4972}# #{e\ 8728}#))
                           (#{syntax-object-module\ 4974}# #{e\ 8728}#))
                         #f))))))
        (set! $sc-dispatch
          (lambda (#{e\ 8751}# #{p\ 8752}#)
            (if (eq? #{p\ 8752}# (quote any))
              (list #{e\ 8751}#)
              (if (#{syntax-object?\ 4968}# #{e\ 8751}#)
                (#{match*\ 8577}#
                  (#{syntax-object-expression\ 4970}# #{e\ 8751}#)
                  #{p\ 8752}#
                  (#{syntax-object-wrap\ 4972}# #{e\ 8751}#)
                  '()
                  (#{syntax-object-module\ 4974}# #{e\ 8751}#))
                (#{match*\ 8577}#
                  #{e\ 8751}#
                  #{p\ 8752}#
                  '(())
                  '()
                  #f)))))))))

(define with-syntax
  (make-syntax-transformer
    'with-syntax
    'macro
    (cons (lambda (#{x\ 8761}#)
            ((lambda (#{tmp\ 8763}#)
               ((lambda (#{tmp\ 8764}#)
                  (if #{tmp\ 8764}#
                    (apply (lambda (#{_\ 8768}# #{e1\ 8769}# #{e2\ 8770}#)
                             (cons '#(syntax-object
                                      begin
                                      ((top)
                                       #(ribcage
                                         #(_ e1 e2)
                                         #((top) (top) (top))
                                         #("i8765" "i8766" "i8767"))
                                       #(ribcage () () ())
                                       #(ribcage #(x) #((top)) #("i8762")))
                                      (hygiene guile))
                                   (cons #{e1\ 8769}# #{e2\ 8770}#)))
                           #{tmp\ 8764}#)
                    ((lambda (#{tmp\ 8772}#)
                       (if #{tmp\ 8772}#
                         (apply (lambda (#{_\ 8778}#
                                         #{out\ 8779}#
                                         #{in\ 8780}#
                                         #{e1\ 8781}#
                                         #{e2\ 8782}#)
                                  (list '#(syntax-object
                                           syntax-case
                                           ((top)
                                            #(ribcage
                                              #(_ out in e1 e2)
                                              #((top) (top) (top) (top) (top))
                                              #("i8773"
                                                "i8774"
                                                "i8775"
                                                "i8776"
                                                "i8777"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(x)
                                              #((top))
                                              #("i8762")))
                                           (hygiene guile))
                                        #{in\ 8780}#
                                        '()
                                        (list #{out\ 8779}#
                                              (cons '#(syntax-object
                                                       begin
                                                       ((top)
                                                        #(ribcage
                                                          #(_ out in e1 e2)
                                                          #((top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top))
                                                          #("i8773"
                                                            "i8774"
                                                            "i8775"
                                                            "i8776"
                                                            "i8777"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(x)
                                                          #((top))
                                                          #("i8762")))
                                                       (hygiene guile))
                                                    (cons #{e1\ 8781}#
                                                          #{e2\ 8782}#)))))
                                #{tmp\ 8772}#)
                         ((lambda (#{tmp\ 8784}#)
                            (if #{tmp\ 8784}#
                              (apply (lambda (#{_\ 8790}#
                                              #{out\ 8791}#
                                              #{in\ 8792}#
                                              #{e1\ 8793}#
                                              #{e2\ 8794}#)
                                       (list '#(syntax-object
                                                syntax-case
                                                ((top)
                                                 #(ribcage
                                                   #(_ out in e1 e2)
                                                   #((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                   #("i8785"
                                                     "i8786"
                                                     "i8787"
                                                     "i8788"
                                                     "i8789"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("i8762")))
                                                (hygiene guile))
                                             (cons '#(syntax-object
                                                      list
                                                      ((top)
                                                       #(ribcage
                                                         #(_ out in e1 e2)
                                                         #((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                         #("i8785"
                                                           "i8786"
                                                           "i8787"
                                                           "i8788"
                                                           "i8789"))
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i8762")))
                                                      (hygiene guile))
                                                   #{in\ 8792}#)
                                             '()
                                             (list #{out\ 8791}#
                                                   (cons '#(syntax-object
                                                            begin
                                                            ((top)
                                                             #(ribcage
                                                               #(_
                                                                 out
                                                                 in
                                                                 e1
                                                                 e2)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i8785"
                                                                 "i8786"
                                                                 "i8787"
                                                                 "i8788"
                                                                 "i8789"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("i8762")))
                                                            (hygiene guile))
                                                         (cons #{e1\ 8793}#
                                                               #{e2\ 8794}#)))))
                                     #{tmp\ 8784}#)
                              (syntax-violation
                                #f
                                "source expression failed to match any pattern"
                                #{tmp\ 8763}#)))
                          ($sc-dispatch
                            #{tmp\ 8763}#
                            '(any #(each (any any)) any . each-any)))))
                     ($sc-dispatch
                       #{tmp\ 8763}#
                       '(any ((any any)) any . each-any)))))
                ($sc-dispatch
                  #{tmp\ 8763}#
                  '(any () any . each-any))))
             #{x\ 8761}#))
          (module-name (current-module)))))

(define syntax-rules
  (make-syntax-transformer
    'syntax-rules
    'macro
    (cons (lambda (#{x\ 8798}#)
            ((lambda (#{tmp\ 8800}#)
               ((lambda (#{tmp\ 8801}#)
                  (if #{tmp\ 8801}#
                    (apply (lambda (#{_\ 8807}#
                                    #{k\ 8808}#
                                    #{keyword\ 8809}#
                                    #{pattern\ 8810}#
                                    #{template\ 8811}#)
                             (list '#(syntax-object
                                      lambda
                                      ((top)
                                       #(ribcage
                                         #(_ k keyword pattern template)
                                         #((top) (top) (top) (top) (top))
                                         #("i8802"
                                           "i8803"
                                           "i8804"
                                           "i8805"
                                           "i8806"))
                                       #(ribcage () () ())
                                       #(ribcage #(x) #((top)) #("i8799")))
                                      (hygiene guile))
                                   '(#(syntax-object
                                       x
                                       ((top)
                                        #(ribcage
                                          #(_ k keyword pattern template)
                                          #((top) (top) (top) (top) (top))
                                          #("i8802"
                                            "i8803"
                                            "i8804"
                                            "i8805"
                                            "i8806"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i8799")))
                                       (hygiene guile)))
                                   (vector
                                     '(#(syntax-object
                                         macro-type
                                         ((top)
                                          #(ribcage
                                            #(_ k keyword pattern template)
                                            #((top) (top) (top) (top) (top))
                                            #("i8802"
                                              "i8803"
                                              "i8804"
                                              "i8805"
                                              "i8806"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i8799")))
                                         (hygiene guile))
                                       .
                                       #(syntax-object
                                         syntax-rules
                                         ((top)
                                          #(ribcage
                                            #(_ k keyword pattern template)
                                            #((top) (top) (top) (top) (top))
                                            #("i8802"
                                              "i8803"
                                              "i8804"
                                              "i8805"
                                              "i8806"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i8799")))
                                         (hygiene guile)))
                                     (cons '#(syntax-object
                                              patterns
                                              ((top)
                                               #(ribcage
                                                 #(_
                                                   k
                                                   keyword
                                                   pattern
                                                   template)
                                                 #((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                 #("i8802"
                                                   "i8803"
                                                   "i8804"
                                                   "i8805"
                                                   "i8806"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x)
                                                 #((top))
                                                 #("i8799")))
                                              (hygiene guile))
                                           #{pattern\ 8810}#))
                                   (cons '#(syntax-object
                                            syntax-case
                                            ((top)
                                             #(ribcage
                                               #(_ k keyword pattern template)
                                               #((top) (top) (top) (top) (top))
                                               #("i8802"
                                                 "i8803"
                                                 "i8804"
                                                 "i8805"
                                                 "i8806"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x)
                                               #((top))
                                               #("i8799")))
                                            (hygiene guile))
                                         (cons '#(syntax-object
                                                  x
                                                  ((top)
                                                   #(ribcage
                                                     #(_
                                                       k
                                                       keyword
                                                       pattern
                                                       template)
                                                     #((top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top))
                                                     #("i8802"
                                                       "i8803"
                                                       "i8804"
                                                       "i8805"
                                                       "i8806"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i8799")))
                                                  (hygiene guile))
                                               (cons #{k\ 8808}#
                                                     (map (lambda (#{tmp\ 8815}#
                                                                   #{tmp\ 8814}#)
                                                            (list (cons '#(syntax-object
                                                                           dummy
                                                                           ((top)
                                                                            #(ribcage
                                                                              #(_
                                                                                k
                                                                                keyword
                                                                                pattern
                                                                                template)
                                                                              #((top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top))
                                                                              #("i8802"
                                                                                "i8803"
                                                                                "i8804"
                                                                                "i8805"
                                                                                "i8806"))
                                                                            #(ribcage
                                                                              ()
                                                                              ()
                                                                              ())
                                                                            #(ribcage
                                                                              #(x)
                                                                              #((top))
                                                                              #("i8799")))
                                                                           (hygiene
                                                                             guile))
                                                                        #{tmp\ 8814}#)
                                                                  (list '#(syntax-object
                                                                           syntax
                                                                           ((top)
                                                                            #(ribcage
                                                                              #(_
                                                                                k
                                                                                keyword
                                                                                pattern
                                                                                template)
                                                                              #((top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top))
                                                                              #("i8802"
                                                                                "i8803"
                                                                                "i8804"
                                                                                "i8805"
                                                                                "i8806"))
                                                                            #(ribcage
                                                                              ()
                                                                              ()
                                                                              ())
                                                                            #(ribcage
                                                                              #(x)
                                                                              #((top))
                                                                              #("i8799")))
                                                                           (hygiene
                                                                             guile))
                                                                        #{tmp\ 8815}#)))
                                                          #{template\ 8811}#
                                                          #{pattern\ 8810}#))))))
                           #{tmp\ 8801}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp\ 8800}#)))
                ($sc-dispatch
                  #{tmp\ 8800}#
                  '(any each-any . #(each ((any . any) any))))))
             #{x\ 8798}#))
          (module-name (current-module)))))

(define let*
  (make-syntax-transformer
    'let*
    'macro
    (cons (lambda (#{x\ 8816}#)
            ((lambda (#{tmp\ 8818}#)
               ((lambda (#{tmp\ 8819}#)
                  (if (if #{tmp\ 8819}#
                        (apply (lambda (#{let*\ 8825}#
                                        #{x\ 8826}#
                                        #{v\ 8827}#
                                        #{e1\ 8828}#
                                        #{e2\ 8829}#)
                                 (and-map identifier? #{x\ 8826}#))
                               #{tmp\ 8819}#)
                        #f)
                    (apply (lambda (#{let*\ 8836}#
                                    #{x\ 8837}#
                                    #{v\ 8838}#
                                    #{e1\ 8839}#
                                    #{e2\ 8840}#)
                             (letrec ((#{f\ 8843}#
                                        (lambda (#{bindings\ 8844}#)
                                          (if (null? #{bindings\ 8844}#)
                                            (cons '#(syntax-object
                                                     let
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(f bindings)
                                                        #((top) (top))
                                                        #("i8841" "i8842"))
                                                      #(ribcage
                                                        #(let* x v e1 e2)
                                                        #((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                        #("i8831"
                                                          "i8832"
                                                          "i8833"
                                                          "i8834"
                                                          "i8835"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(x)
                                                        #((top))
                                                        #("i8817")))
                                                     (hygiene guile))
                                                  (cons '()
                                                        (cons #{e1\ 8839}#
                                                              #{e2\ 8840}#)))
                                            ((lambda (#{tmp\ 8849}#)
                                               ((lambda (#{tmp\ 8850}#)
                                                  (if #{tmp\ 8850}#
                                                    (apply (lambda (#{body\ 8853}#
                                                                    #{binding\ 8854}#)
                                                             (list '#(syntax-object
                                                                      let
                                                                      ((top)
                                                                       #(ribcage
                                                                         #(body
                                                                           binding)
                                                                         #((top)
                                                                           (top))
                                                                         #("i8851"
                                                                           "i8852"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(f
                                                                           bindings)
                                                                         #((top)
                                                                           (top))
                                                                         #("i8841"
                                                                           "i8842"))
                                                                       #(ribcage
                                                                         #(let*
                                                                           x
                                                                           v
                                                                           e1
                                                                           e2)
                                                                         #((top)
                                                                           (top)
                                                                           (top)
                                                                           (top)
                                                                           (top))
                                                                         #("i8831"
                                                                           "i8832"
                                                                           "i8833"
                                                                           "i8834"
                                                                           "i8835"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(x)
                                                                         #((top))
                                                                         #("i8817")))
                                                                      (hygiene
                                                                        guile))
                                                                   (list #{binding\ 8854}#)
                                                                   #{body\ 8853}#))
                                                           #{tmp\ 8850}#)
                                                    (syntax-violation
                                                      #f
                                                      "source expression failed to match any pattern"
                                                      #{tmp\ 8849}#)))
                                                ($sc-dispatch
                                                  #{tmp\ 8849}#
                                                  '(any any))))
                                             (list (#{f\ 8843}#
                                                     (cdr #{bindings\ 8844}#))
                                                   (car #{bindings\ 8844}#)))))))
                               (#{f\ 8843}#
                                 (map list #{x\ 8837}# #{v\ 8838}#))))
                           #{tmp\ 8819}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp\ 8818}#)))
                ($sc-dispatch
                  #{tmp\ 8818}#
                  '(any #(each (any any)) any . each-any))))
             #{x\ 8816}#))
          (module-name (current-module)))))

(define do
  (make-syntax-transformer
    'do
    'macro
    (cons (lambda (#{orig-x\ 8855}#)
            ((lambda (#{tmp\ 8857}#)
               ((lambda (#{tmp\ 8858}#)
                  (if #{tmp\ 8858}#
                    (apply (lambda (#{_\ 8866}#
                                    #{var\ 8867}#
                                    #{init\ 8868}#
                                    #{step\ 8869}#
                                    #{e0\ 8870}#
                                    #{e1\ 8871}#
                                    #{c\ 8872}#)
                             ((lambda (#{tmp\ 8874}#)
                                ((lambda (#{tmp\ 8875}#)
                                   (if #{tmp\ 8875}#
                                     (apply (lambda (#{step\ 8877}#)
                                              ((lambda (#{tmp\ 8878}#)
                                                 ((lambda (#{tmp\ 8879}#)
                                                    (if #{tmp\ 8879}#
                                                      (apply (lambda ()
                                                               (list '#(syntax-object
                                                                        let
                                                                        ((top)
                                                                         #(ribcage
                                                                           #(step)
                                                                           #((top))
                                                                           #("i8876"))
                                                                         #(ribcage
                                                                           #(_
                                                                             var
                                                                             init
                                                                             step
                                                                             e0
                                                                             e1
                                                                             c)
                                                                           #((top)
                                                                             (top)
                                                                             (top)
                                                                             (top)
                                                                             (top)
                                                                             (top)
                                                                             (top))
                                                                           #("i8859"
                                                                             "i8860"
                                                                             "i8861"
                                                                             "i8862"
                                                                             "i8863"
                                                                             "i8864"
                                                                             "i8865"))
                                                                         #(ribcage
                                                                           ()
                                                                           ()
                                                                           ())
                                                                         #(ribcage
                                                                           #(orig-x)
                                                                           #((top))
                                                                           #("i8856")))
                                                                        (hygiene
                                                                          guile))
                                                                     '#(syntax-object
                                                                        doloop
                                                                        ((top)
                                                                         #(ribcage
                                                                           #(step)
                                                                           #((top))
                                                                           #("i8876"))
                                                                         #(ribcage
                                                                           #(_
                                                                             var
                                                                             init
                                                                             step
                                                                             e0
                                                                             e1
                                                                             c)
                                                                           #((top)
                                                                             (top)
                                                                             (top)
                                                                             (top)
                                                                             (top)
                                                                             (top)
                                                                             (top))
                                                                           #("i8859"
                                                                             "i8860"
                                                                             "i8861"
                                                                             "i8862"
                                                                             "i8863"
                                                                             "i8864"
                                                                             "i8865"))
                                                                         #(ribcage
                                                                           ()
                                                                           ()
                                                                           ())
                                                                         #(ribcage
                                                                           #(orig-x)
                                                                           #((top))
                                                                           #("i8856")))
                                                                        (hygiene
                                                                          guile))
                                                                     (map list
                                                                          #{var\ 8867}#
                                                                          #{init\ 8868}#)
                                                                     (list '#(syntax-object
                                                                              if
                                                                              ((top)
                                                                               #(ribcage
                                                                                 #(step)
                                                                                 #((top))
                                                                                 #("i8876"))
                                                                               #(ribcage
                                                                                 #(_
                                                                                   var
                                                                                   init
                                                                                   step
                                                                                   e0
                                                                                   e1
                                                                                   c)
                                                                                 #((top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top))
                                                                                 #("i8859"
                                                                                   "i8860"
                                                                                   "i8861"
                                                                                   "i8862"
                                                                                   "i8863"
                                                                                   "i8864"
                                                                                   "i8865"))
                                                                               #(ribcage
                                                                                 ()
                                                                                 ()
                                                                                 ())
                                                                               #(ribcage
                                                                                 #(orig-x)
                                                                                 #((top))
                                                                                 #("i8856")))
                                                                              (hygiene
                                                                                guile))
                                                                           (list '#(syntax-object
                                                                                    not
                                                                                    ((top)
                                                                                     #(ribcage
                                                                                       #(step)
                                                                                       #((top))
                                                                                       #("i8876"))
                                                                                     #(ribcage
                                                                                       #(_
                                                                                         var
                                                                                         init
                                                                                         step
                                                                                         e0
                                                                                         e1
                                                                                         c)
                                                                                       #((top)
                                                                                         (top)
                                                                                         (top)
                                                                                         (top)
                                                                                         (top)
                                                                                         (top)
                                                                                         (top))
                                                                                       #("i8859"
                                                                                         "i8860"
                                                                                         "i8861"
                                                                                         "i8862"
                                                                                         "i8863"
                                                                                         "i8864"
                                                                                         "i8865"))
                                                                                     #(ribcage
                                                                                       ()
                                                                                       ()
                                                                                       ())
                                                                                     #(ribcage
                                                                                       #(orig-x)
                                                                                       #((top))
                                                                                       #("i8856")))
                                                                                    (hygiene
                                                                                      guile))
                                                                                 #{e0\ 8870}#)
                                                                           (cons '#(syntax-object
                                                                                    begin
                                                                                    ((top)
                                                                                     #(ribcage
                                                                                       #(step)
                                                                                       #((top))
                                                                                       #("i8876"))
                                                                                     #(ribcage
                                                                                       #(_
                                                                                         var
                                                                                         init
                                                                                         step
                                                                                         e0
                                                                                         e1
                                                                                         c)
                                                                                       #((top)
                                                                                         (top)
                                                                                         (top)
                                                                                         (top)
                                                                                         (top)
                                                                                         (top)
                                                                                         (top))
                                                                                       #("i8859"
                                                                                         "i8860"
                                                                                         "i8861"
                                                                                         "i8862"
                                                                                         "i8863"
                                                                                         "i8864"
                                                                                         "i8865"))
                                                                                     #(ribcage
                                                                                       ()
                                                                                       ()
                                                                                       ())
                                                                                     #(ribcage
                                                                                       #(orig-x)
                                                                                       #((top))
                                                                                       #("i8856")))
                                                                                    (hygiene
                                                                                      guile))
                                                                                 (append
                                                                                   #{c\ 8872}#
                                                                                   (list (cons '#(syntax-object
                                                                                                  doloop
                                                                                                  ((top)
                                                                                                   #(ribcage
                                                                                                     #(step)
                                                                                                     #((top))
                                                                                                     #("i8876"))
                                                                                                   #(ribcage
                                                                                                     #(_
                                                                                                       var
                                                                                                       init
                                                                                                       step
                                                                                                       e0
                                                                                                       e1
                                                                                                       c)
                                                                                                     #((top)
                                                                                                       (top)
                                                                                                       (top)
                                                                                                       (top)
                                                                                                       (top)
                                                                                                       (top)
                                                                                                       (top))
                                                                                                     #("i8859"
                                                                                                       "i8860"
                                                                                                       "i8861"
                                                                                                       "i8862"
                                                                                                       "i8863"
                                                                                                       "i8864"
                                                                                                       "i8865"))
                                                                                                   #(ribcage
                                                                                                     ()
                                                                                                     ()
                                                                                                     ())
                                                                                                   #(ribcage
                                                                                                     #(orig-x)
                                                                                                     #((top))
                                                                                                     #("i8856")))
                                                                                                  (hygiene
                                                                                                    guile))
                                                                                               #{step\ 8877}#)))))))
                                                             #{tmp\ 8879}#)
                                                      ((lambda (#{tmp\ 8884}#)
                                                         (if #{tmp\ 8884}#
                                                           (apply (lambda (#{e1\ 8887}#
                                                                           #{e2\ 8888}#)
                                                                    (list '#(syntax-object
                                                                             let
                                                                             ((top)
                                                                              #(ribcage
                                                                                #(e1
                                                                                  e2)
                                                                                #((top)
                                                                                  (top))
                                                                                #("i8885"
                                                                                  "i8886"))
                                                                              #(ribcage
                                                                                #(step)
                                                                                #((top))
                                                                                #("i8876"))
                                                                              #(ribcage
                                                                                #(_
                                                                                  var
                                                                                  init
                                                                                  step
                                                                                  e0
                                                                                  e1
                                                                                  c)
                                                                                #((top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top))
                                                                                #("i8859"
                                                                                  "i8860"
                                                                                  "i8861"
                                                                                  "i8862"
                                                                                  "i8863"
                                                                                  "i8864"
                                                                                  "i8865"))
                                                                              #(ribcage
                                                                                ()
                                                                                ()
                                                                                ())
                                                                              #(ribcage
                                                                                #(orig-x)
                                                                                #((top))
                                                                                #("i8856")))
                                                                             (hygiene
                                                                               guile))
                                                                          '#(syntax-object
                                                                             doloop
                                                                             ((top)
                                                                              #(ribcage
                                                                                #(e1
                                                                                  e2)
                                                                                #((top)
                                                                                  (top))
                                                                                #("i8885"
                                                                                  "i8886"))
                                                                              #(ribcage
                                                                                #(step)
                                                                                #((top))
                                                                                #("i8876"))
                                                                              #(ribcage
                                                                                #(_
                                                                                  var
                                                                                  init
                                                                                  step
                                                                                  e0
                                                                                  e1
                                                                                  c)
                                                                                #((top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top))
                                                                                #("i8859"
                                                                                  "i8860"
                                                                                  "i8861"
                                                                                  "i8862"
                                                                                  "i8863"
                                                                                  "i8864"
                                                                                  "i8865"))
                                                                              #(ribcage
                                                                                ()
                                                                                ()
                                                                                ())
                                                                              #(ribcage
                                                                                #(orig-x)
                                                                                #((top))
                                                                                #("i8856")))
                                                                             (hygiene
                                                                               guile))
                                                                          (map list
                                                                               #{var\ 8867}#
                                                                               #{init\ 8868}#)
                                                                          (list '#(syntax-object
                                                                                   if
                                                                                   ((top)
                                                                                    #(ribcage
                                                                                      #(e1
                                                                                        e2)
                                                                                      #((top)
                                                                                        (top))
                                                                                      #("i8885"
                                                                                        "i8886"))
                                                                                    #(ribcage
                                                                                      #(step)
                                                                                      #((top))
                                                                                      #("i8876"))
                                                                                    #(ribcage
                                                                                      #(_
                                                                                        var
                                                                                        init
                                                                                        step
                                                                                        e0
                                                                                        e1
                                                                                        c)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i8859"
                                                                                        "i8860"
                                                                                        "i8861"
                                                                                        "i8862"
                                                                                        "i8863"
                                                                                        "i8864"
                                                                                        "i8865"))
                                                                                    #(ribcage
                                                                                      ()
                                                                                      ()
                                                                                      ())
                                                                                    #(ribcage
                                                                                      #(orig-x)
                                                                                      #((top))
                                                                                      #("i8856")))
                                                                                   (hygiene
                                                                                     guile))
                                                                                #{e0\ 8870}#
                                                                                (cons '#(syntax-object
                                                                                         begin
                                                                                         ((top)
                                                                                          #(ribcage
                                                                                            #(e1
                                                                                              e2)
                                                                                            #((top)
                                                                                              (top))
                                                                                            #("i8885"
                                                                                              "i8886"))
                                                                                          #(ribcage
                                                                                            #(step)
                                                                                            #((top))
                                                                                            #("i8876"))
                                                                                          #(ribcage
                                                                                            #(_
                                                                                              var
                                                                                              init
                                                                                              step
                                                                                              e0
                                                                                              e1
                                                                                              c)
                                                                                            #((top)
                                                                                              (top)
                                                                                              (top)
                                                                                              (top)
                                                                                              (top)
                                                                                              (top)
                                                                                              (top))
                                                                                            #("i8859"
                                                                                              "i8860"
                                                                                              "i8861"
                                                                                              "i8862"
                                                                                              "i8863"
                                                                                              "i8864"
                                                                                              "i8865"))
                                                                                          #(ribcage
                                                                                            ()
                                                                                            ()
                                                                                            ())
                                                                                          #(ribcage
                                                                                            #(orig-x)
                                                                                            #((top))
                                                                                            #("i8856")))
                                                                                         (hygiene
                                                                                           guile))
                                                                                      (cons #{e1\ 8887}#
                                                                                            #{e2\ 8888}#))
                                                                                (cons '#(syntax-object
                                                                                         begin
                                                                                         ((top)
                                                                                          #(ribcage
                                                                                            #(e1
                                                                                              e2)
                                                                                            #((top)
                                                                                              (top))
                                                                                            #("i8885"
                                                                                              "i8886"))
                                                                                          #(ribcage
                                                                                            #(step)
                                                                                            #((top))
                                                                                            #("i8876"))
                                                                                          #(ribcage
                                                                                            #(_
                                                                                              var
                                                                                              init
                                                                                              step
                                                                                              e0
                                                                                              e1
                                                                                              c)
                                                                                            #((top)
                                                                                              (top)
                                                                                              (top)
                                                                                              (top)
                                                                                              (top)
                                                                                              (top)
                                                                                              (top))
                                                                                            #("i8859"
                                                                                              "i8860"
                                                                                              "i8861"
                                                                                              "i8862"
                                                                                              "i8863"
                                                                                              "i8864"
                                                                                              "i8865"))
                                                                                          #(ribcage
                                                                                            ()
                                                                                            ()
                                                                                            ())
                                                                                          #(ribcage
                                                                                            #(orig-x)
                                                                                            #((top))
                                                                                            #("i8856")))
                                                                                         (hygiene
                                                                                           guile))
                                                                                      (append
                                                                                        #{c\ 8872}#
                                                                                        (list (cons '#(syntax-object
                                                                                                       doloop
                                                                                                       ((top)
                                                                                                        #(ribcage
                                                                                                          #(e1
                                                                                                            e2)
                                                                                                          #((top)
                                                                                                            (top))
                                                                                                          #("i8885"
                                                                                                            "i8886"))
                                                                                                        #(ribcage
                                                                                                          #(step)
                                                                                                          #((top))
                                                                                                          #("i8876"))
                                                                                                        #(ribcage
                                                                                                          #(_
                                                                                                            var
                                                                                                            init
                                                                                                            step
                                                                                                            e0
                                                                                                            e1
                                                                                                            c)
                                                                                                          #((top)
                                                                                                            (top)
                                                                                                            (top)
                                                                                                            (top)
                                                                                                            (top)
                                                                                                            (top)
                                                                                                            (top))
                                                                                                          #("i8859"
                                                                                                            "i8860"
                                                                                                            "i8861"
                                                                                                            "i8862"
                                                                                                            "i8863"
                                                                                                            "i8864"
                                                                                                            "i8865"))
                                                                                                        #(ribcage
                                                                                                          ()
                                                                                                          ()
                                                                                                          ())
                                                                                                        #(ribcage
                                                                                                          #(orig-x)
                                                                                                          #((top))
                                                                                                          #("i8856")))
                                                                                                       (hygiene
                                                                                                         guile))
                                                                                                    #{step\ 8877}#)))))))
                                                                  #{tmp\ 8884}#)
                                                           (syntax-violation
                                                             #f
                                                             "source expression failed to match any pattern"
                                                             #{tmp\ 8878}#)))
                                                       ($sc-dispatch
                                                         #{tmp\ 8878}#
                                                         '(any . each-any)))))
                                                  ($sc-dispatch
                                                    #{tmp\ 8878}#
                                                    '())))
                                               #{e1\ 8871}#))
                                            #{tmp\ 8875}#)
                                     (syntax-violation
                                       #f
                                       "source expression failed to match any pattern"
                                       #{tmp\ 8874}#)))
                                 ($sc-dispatch
                                   #{tmp\ 8874}#
                                   'each-any)))
                              (map (lambda (#{v\ 8895}# #{s\ 8896}#)
                                     ((lambda (#{tmp\ 8899}#)
                                        ((lambda (#{tmp\ 8900}#)
                                           (if #{tmp\ 8900}#
                                             (apply (lambda () #{v\ 8895}#)
                                                    #{tmp\ 8900}#)
                                             ((lambda (#{tmp\ 8901}#)
                                                (if #{tmp\ 8901}#
                                                  (apply (lambda (#{e\ 8903}#)
                                                           #{e\ 8903}#)
                                                         #{tmp\ 8901}#)
                                                  ((lambda (#{_\ 8905}#)
                                                     (syntax-violation
                                                       'do
                                                       "bad step expression"
                                                       #{orig-x\ 8855}#
                                                       #{s\ 8896}#))
                                                   #{tmp\ 8899}#)))
                                              ($sc-dispatch
                                                #{tmp\ 8899}#
                                                '(any)))))
                                         ($sc-dispatch
                                           #{tmp\ 8899}#
                                           '())))
                                      #{s\ 8896}#))
                                   #{var\ 8867}#
                                   #{step\ 8869}#)))
                           #{tmp\ 8858}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp\ 8857}#)))
                ($sc-dispatch
                  #{tmp\ 8857}#
                  '(any #(each (any any . any))
                        (any . each-any)
                        .
                        each-any))))
             #{orig-x\ 8855}#))
          (module-name (current-module)))))

(define quasiquote
  (make-syntax-transformer
    'quasiquote
    'macro
    (cons (letrec ((#{quasicons\ 8912}#
                     (lambda (#{x\ 8916}# #{y\ 8917}#)
                       ((lambda (#{tmp\ 8921}#)
                          ((lambda (#{tmp\ 8922}#)
                             (if #{tmp\ 8922}#
                               (apply (lambda (#{x\ 8925}# #{y\ 8926}#)
                                        ((lambda (#{tmp\ 8927}#)
                                           ((lambda (#{tmp\ 8928}#)
                                              (if #{tmp\ 8928}#
                                                (apply (lambda (#{dy\ 8930}#)
                                                         ((lambda (#{tmp\ 8931}#)
                                                            ((lambda (#{tmp\ 8932}#)
                                                               (if #{tmp\ 8932}#
                                                                 (apply (lambda (#{dx\ 8934}#)
                                                                          (list '#(syntax-object
                                                                                   quote
                                                                                   ((top)
                                                                                    #(ribcage
                                                                                      #(dx)
                                                                                      #((top))
                                                                                      #("i8933"))
                                                                                    #(ribcage
                                                                                      #(dy)
                                                                                      #((top))
                                                                                      #("i8929"))
                                                                                    #(ribcage
                                                                                      #(x
                                                                                        y)
                                                                                      #((top)
                                                                                        (top))
                                                                                      #("i8923"
                                                                                        "i8924"))
                                                                                    #(ribcage
                                                                                      ()
                                                                                      ()
                                                                                      ())
                                                                                    #(ribcage
                                                                                      ()
                                                                                      ()
                                                                                      ())
                                                                                    #(ribcage
                                                                                      #(x
                                                                                        y)
                                                                                      #((top)
                                                                                        (top))
                                                                                      #("i8918"
                                                                                        "i8919"))
                                                                                    #(ribcage
                                                                                      #(quasicons
                                                                                        quasiappend
                                                                                        quasivector
                                                                                        quasi)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i8908"
                                                                                        "i8909"
                                                                                        "i8910"
                                                                                        "i8911")))
                                                                                   (hygiene
                                                                                     guile))
                                                                                (cons #{dx\ 8934}#
                                                                                      #{dy\ 8930}#)))
                                                                        #{tmp\ 8932}#)
                                                                 ((lambda (#{_\ 8936}#)
                                                                    (if (null? #{dy\ 8930}#)
                                                                      (list '#(syntax-object
                                                                               list
                                                                               ((top)
                                                                                #(ribcage
                                                                                  #(_)
                                                                                  #((top))
                                                                                  #("i8935"))
                                                                                #(ribcage
                                                                                  #(dy)
                                                                                  #((top))
                                                                                  #("i8929"))
                                                                                #(ribcage
                                                                                  #(x
                                                                                    y)
                                                                                  #((top)
                                                                                    (top))
                                                                                  #("i8923"
                                                                                    "i8924"))
                                                                                #(ribcage
                                                                                  ()
                                                                                  ()
                                                                                  ())
                                                                                #(ribcage
                                                                                  ()
                                                                                  ()
                                                                                  ())
                                                                                #(ribcage
                                                                                  #(x
                                                                                    y)
                                                                                  #((top)
                                                                                    (top))
                                                                                  #("i8918"
                                                                                    "i8919"))
                                                                                #(ribcage
                                                                                  #(quasicons
                                                                                    quasiappend
                                                                                    quasivector
                                                                                    quasi)
                                                                                  #((top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top))
                                                                                  #("i8908"
                                                                                    "i8909"
                                                                                    "i8910"
                                                                                    "i8911")))
                                                                               (hygiene
                                                                                 guile))
                                                                            #{x\ 8925}#)
                                                                      (list '#(syntax-object
                                                                               cons
                                                                               ((top)
                                                                                #(ribcage
                                                                                  #(_)
                                                                                  #((top))
                                                                                  #("i8935"))
                                                                                #(ribcage
                                                                                  #(dy)
                                                                                  #((top))
                                                                                  #("i8929"))
                                                                                #(ribcage
                                                                                  #(x
                                                                                    y)
                                                                                  #((top)
                                                                                    (top))
                                                                                  #("i8923"
                                                                                    "i8924"))
                                                                                #(ribcage
                                                                                  ()
                                                                                  ()
                                                                                  ())
                                                                                #(ribcage
                                                                                  ()
                                                                                  ()
                                                                                  ())
                                                                                #(ribcage
                                                                                  #(x
                                                                                    y)
                                                                                  #((top)
                                                                                    (top))
                                                                                  #("i8918"
                                                                                    "i8919"))
                                                                                #(ribcage
                                                                                  #(quasicons
                                                                                    quasiappend
                                                                                    quasivector
                                                                                    quasi)
                                                                                  #((top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top))
                                                                                  #("i8908"
                                                                                    "i8909"
                                                                                    "i8910"
                                                                                    "i8911")))
                                                                               (hygiene
                                                                                 guile))
                                                                            #{x\ 8925}#
                                                                            #{y\ 8926}#)))
                                                                  #{tmp\ 8931}#)))
                                                             ($sc-dispatch
                                                               #{tmp\ 8931}#
                                                               '(#(free-id
                                                                   #(syntax-object
                                                                     quote
                                                                     ((top)
                                                                      #(ribcage
                                                                        #(dy)
                                                                        #((top))
                                                                        #("i8929"))
                                                                      #(ribcage
                                                                        #(x y)
                                                                        #((top)
                                                                          (top))
                                                                        #("i8923"
                                                                          "i8924"))
                                                                      #(ribcage
                                                                        ()
                                                                        ()
                                                                        ())
                                                                      #(ribcage
                                                                        ()
                                                                        ()
                                                                        ())
                                                                      #(ribcage
                                                                        #(x y)
                                                                        #((top)
                                                                          (top))
                                                                        #("i8918"
                                                                          "i8919"))
                                                                      #(ribcage
                                                                        #(quasicons
                                                                          quasiappend
                                                                          quasivector
                                                                          quasi)
                                                                        #((top)
                                                                          (top)
                                                                          (top)
                                                                          (top))
                                                                        #("i8908"
                                                                          "i8909"
                                                                          "i8910"
                                                                          "i8911")))
                                                                     (hygiene
                                                                       guile)))
                                                                 any))))
                                                          #{x\ 8925}#))
                                                       #{tmp\ 8928}#)
                                                ((lambda (#{tmp\ 8937}#)
                                                   (if #{tmp\ 8937}#
                                                     (apply (lambda (#{stuff\ 8939}#)
                                                              (cons '#(syntax-object
                                                                       list
                                                                       ((top)
                                                                        #(ribcage
                                                                          #(stuff)
                                                                          #((top))
                                                                          #("i8938"))
                                                                        #(ribcage
                                                                          #(x
                                                                            y)
                                                                          #((top)
                                                                            (top))
                                                                          #("i8923"
                                                                            "i8924"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(x
                                                                            y)
                                                                          #((top)
                                                                            (top))
                                                                          #("i8918"
                                                                            "i8919"))
                                                                        #(ribcage
                                                                          #(quasicons
                                                                            quasiappend
                                                                            quasivector
                                                                            quasi)
                                                                          #((top)
                                                                            (top)
                                                                            (top)
                                                                            (top))
                                                                          #("i8908"
                                                                            "i8909"
                                                                            "i8910"
                                                                            "i8911")))
                                                                       (hygiene
                                                                         guile))
                                                                    (cons #{x\ 8925}#
                                                                          #{stuff\ 8939}#)))
                                                            #{tmp\ 8937}#)
                                                     ((lambda (#{else\ 8941}#)
                                                        (list '#(syntax-object
                                                                 cons
                                                                 ((top)
                                                                  #(ribcage
                                                                    #(else)
                                                                    #((top))
                                                                    #("i8940"))
                                                                  #(ribcage
                                                                    #(x y)
                                                                    #((top)
                                                                      (top))
                                                                    #("i8923"
                                                                      "i8924"))
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(x y)
                                                                    #((top)
                                                                      (top))
                                                                    #("i8918"
                                                                      "i8919"))
                                                                  #(ribcage
                                                                    #(quasicons
                                                                      quasiappend
                                                                      quasivector
                                                                      quasi)
                                                                    #((top)
                                                                      (top)
                                                                      (top)
                                                                      (top))
                                                                    #("i8908"
                                                                      "i8909"
                                                                      "i8910"
                                                                      "i8911")))
                                                                 (hygiene
                                                                   guile))
                                                              #{x\ 8925}#
                                                              #{y\ 8926}#))
                                                      #{tmp\ 8927}#)))
                                                 ($sc-dispatch
                                                   #{tmp\ 8927}#
                                                   '(#(free-id
                                                       #(syntax-object
                                                         list
                                                         ((top)
                                                          #(ribcage
                                                            #(x y)
                                                            #((top) (top))
                                                            #("i8923" "i8924"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(x y)
                                                            #((top) (top))
                                                            #("i8918" "i8919"))
                                                          #(ribcage
                                                            #(quasicons
                                                              quasiappend
                                                              quasivector
                                                              quasi)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i8908"
                                                              "i8909"
                                                              "i8910"
                                                              "i8911")))
                                                         (hygiene guile)))
                                                     .
                                                     any)))))
                                            ($sc-dispatch
                                              #{tmp\ 8927}#
                                              '(#(free-id
                                                  #(syntax-object
                                                    quote
                                                    ((top)
                                                     #(ribcage
                                                       #(x y)
                                                       #((top) (top))
                                                       #("i8923" "i8924"))
                                                     #(ribcage () () ())
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x y)
                                                       #((top) (top))
                                                       #("i8918" "i8919"))
                                                     #(ribcage
                                                       #(quasicons
                                                         quasiappend
                                                         quasivector
                                                         quasi)
                                                       #((top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                       #("i8908"
                                                         "i8909"
                                                         "i8910"
                                                         "i8911")))
                                                    (hygiene guile)))
                                                any))))
                                         #{y\ 8926}#))
                                      #{tmp\ 8922}#)
                               (syntax-violation
                                 #f
                                 "source expression failed to match any pattern"
                                 #{tmp\ 8921}#)))
                           ($sc-dispatch #{tmp\ 8921}# (quote (any any)))))
                        (list #{x\ 8916}# #{y\ 8917}#))))
                   (#{quasiappend\ 8913}#
                     (lambda (#{x\ 8942}# #{y\ 8943}#)
                       ((lambda (#{tmp\ 8947}#)
                          ((lambda (#{tmp\ 8948}#)
                             (if #{tmp\ 8948}#
                               (apply (lambda (#{x\ 8951}# #{y\ 8952}#)
                                        ((lambda (#{tmp\ 8953}#)
                                           ((lambda (#{tmp\ 8954}#)
                                              (if #{tmp\ 8954}#
                                                (apply (lambda () #{x\ 8951}#)
                                                       #{tmp\ 8954}#)
                                                ((lambda (#{_\ 8956}#)
                                                   (list '#(syntax-object
                                                            append
                                                            ((top)
                                                             #(ribcage
                                                               #(_)
                                                               #((top))
                                                               #("i8955"))
                                                             #(ribcage
                                                               #(x y)
                                                               #((top) (top))
                                                               #("i8949"
                                                                 "i8950"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x y)
                                                               #((top) (top))
                                                               #("i8944"
                                                                 "i8945"))
                                                             #(ribcage
                                                               #(quasicons
                                                                 quasiappend
                                                                 quasivector
                                                                 quasi)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i8908"
                                                                 "i8909"
                                                                 "i8910"
                                                                 "i8911")))
                                                            (hygiene guile))
                                                         #{x\ 8951}#
                                                         #{y\ 8952}#))
                                                 #{tmp\ 8953}#)))
                                            ($sc-dispatch
                                              #{tmp\ 8953}#
                                              '(#(free-id
                                                  #(syntax-object
                                                    quote
                                                    ((top)
                                                     #(ribcage
                                                       #(x y)
                                                       #((top) (top))
                                                       #("i8949" "i8950"))
                                                     #(ribcage () () ())
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x y)
                                                       #((top) (top))
                                                       #("i8944" "i8945"))
                                                     #(ribcage
                                                       #(quasicons
                                                         quasiappend
                                                         quasivector
                                                         quasi)
                                                       #((top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                       #("i8908"
                                                         "i8909"
                                                         "i8910"
                                                         "i8911")))
                                                    (hygiene guile)))
                                                ()))))
                                         #{y\ 8952}#))
                                      #{tmp\ 8948}#)
                               (syntax-violation
                                 #f
                                 "source expression failed to match any pattern"
                                 #{tmp\ 8947}#)))
                           ($sc-dispatch #{tmp\ 8947}# (quote (any any)))))
                        (list #{x\ 8942}# #{y\ 8943}#))))
                   (#{quasivector\ 8914}#
                     (lambda (#{x\ 8957}#)
                       ((lambda (#{tmp\ 8960}#)
                          ((lambda (#{x\ 8962}#)
                             ((lambda (#{tmp\ 8963}#)
                                ((lambda (#{tmp\ 8964}#)
                                   (if #{tmp\ 8964}#
                                     (apply (lambda (#{x\ 8966}#)
                                              (list '#(syntax-object
                                                       quote
                                                       ((top)
                                                        #(ribcage
                                                          #(x)
                                                          #((top))
                                                          #("i8965"))
                                                        #(ribcage
                                                          #(x)
                                                          #((top))
                                                          #("i8961"))
                                                        #(ribcage () () ())
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(x)
                                                          #((top))
                                                          #("i8958"))
                                                        #(ribcage
                                                          #(quasicons
                                                            quasiappend
                                                            quasivector
                                                            quasi)
                                                          #((top)
                                                            (top)
                                                            (top)
                                                            (top))
                                                          #("i8908"
                                                            "i8909"
                                                            "i8910"
                                                            "i8911")))
                                                       (hygiene guile))
                                                    (list->vector
                                                      #{x\ 8966}#)))
                                            #{tmp\ 8964}#)
                                     ((lambda (#{tmp\ 8968}#)
                                        (if #{tmp\ 8968}#
                                          (apply (lambda (#{x\ 8970}#)
                                                   (cons '#(syntax-object
                                                            vector
                                                            ((top)
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("i8969"))
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("i8961"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("i8958"))
                                                             #(ribcage
                                                               #(quasicons
                                                                 quasiappend
                                                                 quasivector
                                                                 quasi)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i8908"
                                                                 "i8909"
                                                                 "i8910"
                                                                 "i8911")))
                                                            (hygiene guile))
                                                         #{x\ 8970}#))
                                                 #{tmp\ 8968}#)
                                          ((lambda (#{_\ 8973}#)
                                             (list '#(syntax-object
                                                      list->vector
                                                      ((top)
                                                       #(ribcage
                                                         #(_)
                                                         #((top))
                                                         #("i8972"))
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i8961"))
                                                       #(ribcage () () ())
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i8958"))
                                                       #(ribcage
                                                         #(quasicons
                                                           quasiappend
                                                           quasivector
                                                           quasi)
                                                         #((top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                         #("i8908"
                                                           "i8909"
                                                           "i8910"
                                                           "i8911")))
                                                      (hygiene guile))
                                                   #{x\ 8962}#))
                                           #{tmp\ 8963}#)))
                                      ($sc-dispatch
                                        #{tmp\ 8963}#
                                        '(#(free-id
                                            #(syntax-object
                                              list
                                              ((top)
                                               #(ribcage
                                                 #(x)
                                                 #((top))
                                                 #("i8961"))
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x)
                                                 #((top))
                                                 #("i8958"))
                                               #(ribcage
                                                 #(quasicons
                                                   quasiappend
                                                   quasivector
                                                   quasi)
                                                 #((top) (top) (top) (top))
                                                 #("i8908"
                                                   "i8909"
                                                   "i8910"
                                                   "i8911")))
                                              (hygiene guile)))
                                          .
                                          each-any)))))
                                 ($sc-dispatch
                                   #{tmp\ 8963}#
                                   '(#(free-id
                                       #(syntax-object
                                         quote
                                         ((top)
                                          #(ribcage #(x) #((top)) #("i8961"))
                                          #(ribcage () () ())
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i8958"))
                                          #(ribcage
                                            #(quasicons
                                              quasiappend
                                              quasivector
                                              quasi)
                                            #((top) (top) (top) (top))
                                            #("i8908"
                                              "i8909"
                                              "i8910"
                                              "i8911")))
                                         (hygiene guile)))
                                     each-any))))
                              #{x\ 8962}#))
                           #{tmp\ 8960}#))
                        #{x\ 8957}#)))
                   (#{quasi\ 8915}#
                     (lambda (#{p\ 8974}# #{lev\ 8975}#)
                       ((lambda (#{tmp\ 8978}#)
                          ((lambda (#{tmp\ 8979}#)
                             (if #{tmp\ 8979}#
                               (apply (lambda (#{p\ 8981}#)
                                        (if (= #{lev\ 8975}# 0)
                                          #{p\ 8981}#
                                          (#{quasicons\ 8912}#
                                            '(#(syntax-object
                                                quote
                                                ((top)
                                                 #(ribcage
                                                   #(p)
                                                   #((top))
                                                   #("i8980"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(p lev)
                                                   #((top) (top))
                                                   #("i8976" "i8977"))
                                                 #(ribcage
                                                   #(quasicons
                                                     quasiappend
                                                     quasivector
                                                     quasi)
                                                   #((top) (top) (top) (top))
                                                   #("i8908"
                                                     "i8909"
                                                     "i8910"
                                                     "i8911")))
                                                (hygiene guile))
                                              #(syntax-object
                                                unquote
                                                ((top)
                                                 #(ribcage
                                                   #(p)
                                                   #((top))
                                                   #("i8980"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(p lev)
                                                   #((top) (top))
                                                   #("i8976" "i8977"))
                                                 #(ribcage
                                                   #(quasicons
                                                     quasiappend
                                                     quasivector
                                                     quasi)
                                                   #((top) (top) (top) (top))
                                                   #("i8908"
                                                     "i8909"
                                                     "i8910"
                                                     "i8911")))
                                                (hygiene guile)))
                                            (#{quasi\ 8915}#
                                              (list #{p\ 8981}#)
                                              (- #{lev\ 8975}# 1)))))
                                      #{tmp\ 8979}#)
                               ((lambda (#{tmp\ 8982}#)
                                  (if (if #{tmp\ 8982}#
                                        (apply (lambda (#{args\ 8984}#)
                                                 (= #{lev\ 8975}# 0))
                                               #{tmp\ 8982}#)
                                        #f)
                                    (apply (lambda (#{args\ 8986}#)
                                             (syntax-violation
                                               'unquote
                                               "unquote takes exactly one argument"
                                               #{p\ 8974}#
                                               (cons '#(syntax-object
                                                        unquote
                                                        ((top)
                                                         #(ribcage
                                                           #(args)
                                                           #((top))
                                                           #("i8985"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(p lev)
                                                           #((top) (top))
                                                           #("i8976" "i8977"))
                                                         #(ribcage
                                                           #(quasicons
                                                             quasiappend
                                                             quasivector
                                                             quasi)
                                                           #((top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                           #("i8908"
                                                             "i8909"
                                                             "i8910"
                                                             "i8911")))
                                                        (hygiene guile))
                                                     #{args\ 8986}#)))
                                           #{tmp\ 8982}#)
                                    ((lambda (#{tmp\ 8987}#)
                                       (if #{tmp\ 8987}#
                                         (apply (lambda (#{p\ 8990}#
                                                         #{q\ 8991}#)
                                                  (if (= #{lev\ 8975}# 0)
                                                    (#{quasiappend\ 8913}#
                                                      #{p\ 8990}#
                                                      (#{quasi\ 8915}#
                                                        #{q\ 8991}#
                                                        #{lev\ 8975}#))
                                                    (#{quasicons\ 8912}#
                                                      (#{quasicons\ 8912}#
                                                        '(#(syntax-object
                                                            quote
                                                            ((top)
                                                             #(ribcage
                                                               #(p q)
                                                               #((top) (top))
                                                               #("i8988"
                                                                 "i8989"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(p lev)
                                                               #((top) (top))
                                                               #("i8976"
                                                                 "i8977"))
                                                             #(ribcage
                                                               #(quasicons
                                                                 quasiappend
                                                                 quasivector
                                                                 quasi)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i8908"
                                                                 "i8909"
                                                                 "i8910"
                                                                 "i8911")))
                                                            (hygiene guile))
                                                          #(syntax-object
                                                            unquote-splicing
                                                            ((top)
                                                             #(ribcage
                                                               #(p q)
                                                               #((top) (top))
                                                               #("i8988"
                                                                 "i8989"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(p lev)
                                                               #((top) (top))
                                                               #("i8976"
                                                                 "i8977"))
                                                             #(ribcage
                                                               #(quasicons
                                                                 quasiappend
                                                                 quasivector
                                                                 quasi)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i8908"
                                                                 "i8909"
                                                                 "i8910"
                                                                 "i8911")))
                                                            (hygiene guile)))
                                                        (#{quasi\ 8915}#
                                                          (list #{p\ 8990}#)
                                                          (- #{lev\ 8975}# 1)))
                                                      (#{quasi\ 8915}#
                                                        #{q\ 8991}#
                                                        #{lev\ 8975}#))))
                                                #{tmp\ 8987}#)
                                         ((lambda (#{tmp\ 8992}#)
                                            (if (if #{tmp\ 8992}#
                                                  (apply (lambda (#{args\ 8995}#
                                                                  #{q\ 8996}#)
                                                           (= #{lev\ 8975}# 0))
                                                         #{tmp\ 8992}#)
                                                  #f)
                                              (apply (lambda (#{args\ 8999}#
                                                              #{q\ 9000}#)
                                                       (syntax-violation
                                                         'unquote-splicing
                                                         "unquote-splicing takes exactly one argument"
                                                         #{p\ 8974}#
                                                         (cons '#(syntax-object
                                                                  unquote-splicing
                                                                  ((top)
                                                                   #(ribcage
                                                                     #(args q)
                                                                     #((top)
                                                                       (top))
                                                                     #("i8997"
                                                                       "i8998"))
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     #(p lev)
                                                                     #((top)
                                                                       (top))
                                                                     #("i8976"
                                                                       "i8977"))
                                                                   #(ribcage
                                                                     #(quasicons
                                                                       quasiappend
                                                                       quasivector
                                                                       quasi)
                                                                     #((top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                     #("i8908"
                                                                       "i8909"
                                                                       "i8910"
                                                                       "i8911")))
                                                                  (hygiene
                                                                    guile))
                                                               #{args\ 8999}#)))
                                                     #{tmp\ 8992}#)
                                              ((lambda (#{tmp\ 9001}#)
                                                 (if #{tmp\ 9001}#
                                                   (apply (lambda (#{p\ 9003}#)
                                                            (#{quasicons\ 8912}#
                                                              '(#(syntax-object
                                                                  quote
                                                                  ((top)
                                                                   #(ribcage
                                                                     #(p)
                                                                     #((top))
                                                                     #("i9002"))
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     #(p lev)
                                                                     #((top)
                                                                       (top))
                                                                     #("i8976"
                                                                       "i8977"))
                                                                   #(ribcage
                                                                     #(quasicons
                                                                       quasiappend
                                                                       quasivector
                                                                       quasi)
                                                                     #((top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                     #("i8908"
                                                                       "i8909"
                                                                       "i8910"
                                                                       "i8911")))
                                                                  (hygiene
                                                                    guile))
                                                                #(syntax-object
                                                                  quasiquote
                                                                  ((top)
                                                                   #(ribcage
                                                                     #(p)
                                                                     #((top))
                                                                     #("i9002"))
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     #(p lev)
                                                                     #((top)
                                                                       (top))
                                                                     #("i8976"
                                                                       "i8977"))
                                                                   #(ribcage
                                                                     #(quasicons
                                                                       quasiappend
                                                                       quasivector
                                                                       quasi)
                                                                     #((top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                     #("i8908"
                                                                       "i8909"
                                                                       "i8910"
                                                                       "i8911")))
                                                                  (hygiene
                                                                    guile)))
                                                              (#{quasi\ 8915}#
                                                                (list #{p\ 9003}#)
                                                                (+ #{lev\ 8975}#
                                                                   1))))
                                                          #{tmp\ 9001}#)
                                                   ((lambda (#{tmp\ 9004}#)
                                                      (if #{tmp\ 9004}#
                                                        (apply (lambda (#{p\ 9007}#
                                                                        #{q\ 9008}#)
                                                                 (#{quasicons\ 8912}#
                                                                   (#{quasi\ 8915}#
                                                                     #{p\ 9007}#
                                                                     #{lev\ 8975}#)
                                                                   (#{quasi\ 8915}#
                                                                     #{q\ 9008}#
                                                                     #{lev\ 8975}#)))
                                                               #{tmp\ 9004}#)
                                                        ((lambda (#{tmp\ 9009}#)
                                                           (if #{tmp\ 9009}#
                                                             (apply (lambda (#{x\ 9011}#)
                                                                      (#{quasivector\ 8914}#
                                                                        (#{quasi\ 8915}#
                                                                          #{x\ 9011}#
                                                                          #{lev\ 8975}#)))
                                                                    #{tmp\ 9009}#)
                                                             ((lambda (#{p\ 9014}#)
                                                                (list '#(syntax-object
                                                                         quote
                                                                         ((top)
                                                                          #(ribcage
                                                                            #(p)
                                                                            #((top))
                                                                            #("i9013"))
                                                                          #(ribcage
                                                                            ()
                                                                            ()
                                                                            ())
                                                                          #(ribcage
                                                                            #(p
                                                                              lev)
                                                                            #((top)
                                                                              (top))
                                                                            #("i8976"
                                                                              "i8977"))
                                                                          #(ribcage
                                                                            #(quasicons
                                                                              quasiappend
                                                                              quasivector
                                                                              quasi)
                                                                            #((top)
                                                                              (top)
                                                                              (top)
                                                                              (top))
                                                                            #("i8908"
                                                                              "i8909"
                                                                              "i8910"
                                                                              "i8911")))
                                                                         (hygiene
                                                                           guile))
                                                                      #{p\ 9014}#))
                                                              #{tmp\ 8978}#)))
                                                         ($sc-dispatch
                                                           #{tmp\ 8978}#
                                                           '#(vector
                                                              each-any)))))
                                                    ($sc-dispatch
                                                      #{tmp\ 8978}#
                                                      '(any . any)))))
                                               ($sc-dispatch
                                                 #{tmp\ 8978}#
                                                 '(#(free-id
                                                     #(syntax-object
                                                       quasiquote
                                                       ((top)
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(p lev)
                                                          #((top) (top))
                                                          #("i8976" "i8977"))
                                                        #(ribcage
                                                          #(quasicons
                                                            quasiappend
                                                            quasivector
                                                            quasi)
                                                          #((top)
                                                            (top)
                                                            (top)
                                                            (top))
                                                          #("i8908"
                                                            "i8909"
                                                            "i8910"
                                                            "i8911")))
                                                       (hygiene guile)))
                                                   any)))))
                                          ($sc-dispatch
                                            #{tmp\ 8978}#
                                            '((#(free-id
                                                 #(syntax-object
                                                   unquote-splicing
                                                   ((top)
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(p lev)
                                                      #((top) (top))
                                                      #("i8976" "i8977"))
                                                    #(ribcage
                                                      #(quasicons
                                                        quasiappend
                                                        quasivector
                                                        quasi)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i8908"
                                                        "i8909"
                                                        "i8910"
                                                        "i8911")))
                                                   (hygiene guile)))
                                               .
                                               any)
                                              .
                                              any)))))
                                     ($sc-dispatch
                                       #{tmp\ 8978}#
                                       '((#(free-id
                                            #(syntax-object
                                              unquote-splicing
                                              ((top)
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(p lev)
                                                 #((top) (top))
                                                 #("i8976" "i8977"))
                                               #(ribcage
                                                 #(quasicons
                                                   quasiappend
                                                   quasivector
                                                   quasi)
                                                 #((top) (top) (top) (top))
                                                 #("i8908"
                                                   "i8909"
                                                   "i8910"
                                                   "i8911")))
                                              (hygiene guile)))
                                          any)
                                         .
                                         any)))))
                                ($sc-dispatch
                                  #{tmp\ 8978}#
                                  '(#(free-id
                                      #(syntax-object
                                        unquote
                                        ((top)
                                         #(ribcage () () ())
                                         #(ribcage
                                           #(p lev)
                                           #((top) (top))
                                           #("i8976" "i8977"))
                                         #(ribcage
                                           #(quasicons
                                             quasiappend
                                             quasivector
                                             quasi)
                                           #((top) (top) (top) (top))
                                           #("i8908" "i8909" "i8910" "i8911")))
                                        (hygiene guile)))
                                    .
                                    any)))))
                           ($sc-dispatch
                             #{tmp\ 8978}#
                             '(#(free-id
                                 #(syntax-object
                                   unquote
                                   ((top)
                                    #(ribcage () () ())
                                    #(ribcage
                                      #(p lev)
                                      #((top) (top))
                                      #("i8976" "i8977"))
                                    #(ribcage
                                      #(quasicons
                                        quasiappend
                                        quasivector
                                        quasi)
                                      #((top) (top) (top) (top))
                                      #("i8908" "i8909" "i8910" "i8911")))
                                   (hygiene guile)))
                               any))))
                        #{p\ 8974}#))))
            (lambda (#{x\ 9015}#)
              ((lambda (#{tmp\ 9017}#)
                 ((lambda (#{tmp\ 9018}#)
                    (if #{tmp\ 9018}#
                      (apply (lambda (#{_\ 9021}# #{e\ 9022}#)
                               (#{quasi\ 8915}# #{e\ 9022}# 0))
                             #{tmp\ 9018}#)
                      (syntax-violation
                        #f
                        "source expression failed to match any pattern"
                        #{tmp\ 9017}#)))
                  ($sc-dispatch #{tmp\ 9017}# (quote (any any)))))
               #{x\ 9015}#)))
          (module-name (current-module)))))

(define include
  (make-syntax-transformer
    'include
    'macro
    (cons (lambda (#{x\ 9023}#)
            (letrec ((#{read-file\ 9026}#
                       (lambda (#{fn\ 9027}# #{k\ 9028}#)
                         (let ((#{p\ 9032}# (open-input-file #{fn\ 9027}#)))
                           (letrec ((#{f\ 9036}#
                                      (lambda (#{x\ 9037}# #{result\ 9038}#)
                                        (if (eof-object? #{x\ 9037}#)
                                          (begin
                                            (close-input-port #{p\ 9032}#)
                                            (reverse #{result\ 9038}#))
                                          (#{f\ 9036}#
                                            (read #{p\ 9032}#)
                                            (cons (datum->syntax
                                                    #{k\ 9028}#
                                                    #{x\ 9037}#)
                                                  #{result\ 9038}#))))))
                             (#{f\ 9036}# (read #{p\ 9032}#) (quote ())))))))
              ((lambda (#{tmp\ 9039}#)
                 ((lambda (#{tmp\ 9040}#)
                    (if #{tmp\ 9040}#
                      (apply (lambda (#{k\ 9043}# #{filename\ 9044}#)
                               (let ((#{fn\ 9046}#
                                       (syntax->datum #{filename\ 9044}#)))
                                 ((lambda (#{tmp\ 9048}#)
                                    ((lambda (#{tmp\ 9049}#)
                                       (if #{tmp\ 9049}#
                                         (apply (lambda (#{exp\ 9051}#)
                                                  (cons '#(syntax-object
                                                           begin
                                                           ((top)
                                                            #(ribcage
                                                              #(exp)
                                                              #((top))
                                                              #("i9050"))
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(fn)
                                                              #((top))
                                                              #("i9045"))
                                                            #(ribcage
                                                              #(k filename)
                                                              #((top) (top))
                                                              #("i9041"
                                                                "i9042"))
                                                            #(ribcage
                                                              (read-file)
                                                              ((top))
                                                              ("i9025"))
                                                            #(ribcage
                                                              #(x)
                                                              #((top))
                                                              #("i9024")))
                                                           (hygiene guile))
                                                        #{exp\ 9051}#))
                                                #{tmp\ 9049}#)
                                         (syntax-violation
                                           #f
                                           "source expression failed to match any pattern"
                                           #{tmp\ 9048}#)))
                                     ($sc-dispatch
                                       #{tmp\ 9048}#
                                       'each-any)))
                                  (#{read-file\ 9026}#
                                    #{fn\ 9046}#
                                    #{k\ 9043}#))))
                             #{tmp\ 9040}#)
                      (syntax-violation
                        #f
                        "source expression failed to match any pattern"
                        #{tmp\ 9039}#)))
                  ($sc-dispatch #{tmp\ 9039}# (quote (any any)))))
               #{x\ 9023}#)))
          (module-name (current-module)))))

(define include-from-path
  (make-syntax-transformer
    'include-from-path
    'macro
    (cons (lambda (#{x\ 9053}#)
            ((lambda (#{tmp\ 9055}#)
               ((lambda (#{tmp\ 9056}#)
                  (if #{tmp\ 9056}#
                    (apply (lambda (#{k\ 9059}# #{filename\ 9060}#)
                             (let ((#{fn\ 9062}#
                                     (syntax->datum #{filename\ 9060}#)))
                               ((lambda (#{tmp\ 9064}#)
                                  ((lambda (#{fn\ 9066}#)
                                     (list '#(syntax-object
                                              include
                                              ((top)
                                               #(ribcage
                                                 #(fn)
                                                 #((top))
                                                 #("i9065"))
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(fn)
                                                 #((top))
                                                 #("i9061"))
                                               #(ribcage
                                                 #(k filename)
                                                 #((top) (top))
                                                 #("i9057" "i9058"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x)
                                                 #((top))
                                                 #("i9054")))
                                              (hygiene guile))
                                           #{fn\ 9066}#))
                                   #{tmp\ 9064}#))
                                (let ((#{t\ 9069}#
                                        (%search-load-path #{fn\ 9062}#)))
                                  (if #{t\ 9069}#
                                    #{t\ 9069}#
                                    (syntax-violation
                                      'include-from-path
                                      "file not found in path"
                                      #{x\ 9053}#
                                      #{filename\ 9060}#))))))
                           #{tmp\ 9056}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp\ 9055}#)))
                ($sc-dispatch #{tmp\ 9055}# (quote (any any)))))
             #{x\ 9053}#))
          (module-name (current-module)))))

(define unquote
  (make-syntax-transformer
    'unquote
    'macro
    (cons (lambda (#{x\ 9071}#)
            ((lambda (#{tmp\ 9073}#)
               ((lambda (#{tmp\ 9074}#)
                  (if #{tmp\ 9074}#
                    (apply (lambda (#{_\ 9077}# #{e\ 9078}#)
                             (syntax-violation
                               'unquote
                               "expression not valid outside of quasiquote"
                               #{x\ 9071}#))
                           #{tmp\ 9074}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp\ 9073}#)))
                ($sc-dispatch #{tmp\ 9073}# (quote (any any)))))
             #{x\ 9071}#))
          (module-name (current-module)))))

(define unquote-splicing
  (make-syntax-transformer
    'unquote-splicing
    'macro
    (cons (lambda (#{x\ 9079}#)
            ((lambda (#{tmp\ 9081}#)
               ((lambda (#{tmp\ 9082}#)
                  (if #{tmp\ 9082}#
                    (apply (lambda (#{_\ 9085}# #{e\ 9086}#)
                             (syntax-violation
                               'unquote-splicing
                               "expression not valid outside of quasiquote"
                               #{x\ 9079}#))
                           #{tmp\ 9082}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp\ 9081}#)))
                ($sc-dispatch #{tmp\ 9081}# (quote (any any)))))
             #{x\ 9079}#))
          (module-name (current-module)))))

(define case
  (make-syntax-transformer
    'case
    'macro
    (cons (lambda (#{x\ 9087}#)
            ((lambda (#{tmp\ 9089}#)
               ((lambda (#{tmp\ 9090}#)
                  (if #{tmp\ 9090}#
                    (apply (lambda (#{_\ 9095}#
                                    #{e\ 9096}#
                                    #{m1\ 9097}#
                                    #{m2\ 9098}#)
                             ((lambda (#{tmp\ 9100}#)
                                ((lambda (#{body\ 9102}#)
                                   (list '#(syntax-object
                                            let
                                            ((top)
                                             #(ribcage
                                               #(body)
                                               #((top))
                                               #("i9101"))
                                             #(ribcage
                                               #(_ e m1 m2)
                                               #((top) (top) (top) (top))
                                               #("i9091"
                                                 "i9092"
                                                 "i9093"
                                                 "i9094"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x)
                                               #((top))
                                               #("i9088")))
                                            (hygiene guile))
                                         (list (list '#(syntax-object
                                                        t
                                                        ((top)
                                                         #(ribcage
                                                           #(body)
                                                           #((top))
                                                           #("i9101"))
                                                         #(ribcage
                                                           #(_ e m1 m2)
                                                           #((top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                           #("i9091"
                                                             "i9092"
                                                             "i9093"
                                                             "i9094"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("i9088")))
                                                        (hygiene guile))
                                                     #{e\ 9096}#))
                                         #{body\ 9102}#))
                                 #{tmp\ 9100}#))
                              (letrec ((#{f\ 9106}#
                                         (lambda (#{clause\ 9107}#
                                                  #{clauses\ 9108}#)
                                           (if (null? #{clauses\ 9108}#)
                                             ((lambda (#{tmp\ 9110}#)
                                                ((lambda (#{tmp\ 9111}#)
                                                   (if #{tmp\ 9111}#
                                                     (apply (lambda (#{e1\ 9114}#
                                                                     #{e2\ 9115}#)
                                                              (cons '#(syntax-object
                                                                       begin
                                                                       ((top)
                                                                        #(ribcage
                                                                          #(e1
                                                                            e2)
                                                                          #((top)
                                                                            (top))
                                                                          #("i9112"
                                                                            "i9113"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(f
                                                                            clause
                                                                            clauses)
                                                                          #((top)
                                                                            (top)
                                                                            (top))
                                                                          #("i9103"
                                                                            "i9104"
                                                                            "i9105"))
                                                                        #(ribcage
                                                                          #(_
                                                                            e
                                                                            m1
                                                                            m2)
                                                                          #((top)
                                                                            (top)
                                                                            (top)
                                                                            (top))
                                                                          #("i9091"
                                                                            "i9092"
                                                                            "i9093"
                                                                            "i9094"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(x)
                                                                          #((top))
                                                                          #("i9088")))
                                                                       (hygiene
                                                                         guile))
                                                                    (cons #{e1\ 9114}#
                                                                          #{e2\ 9115}#)))
                                                            #{tmp\ 9111}#)
                                                     ((lambda (#{tmp\ 9117}#)
                                                        (if #{tmp\ 9117}#
                                                          (apply (lambda (#{k\ 9121}#
                                                                          #{e1\ 9122}#
                                                                          #{e2\ 9123}#)
                                                                   (list '#(syntax-object
                                                                            if
                                                                            ((top)
                                                                             #(ribcage
                                                                               #(k
                                                                                 e1
                                                                                 e2)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i9118"
                                                                                 "i9119"
                                                                                 "i9120"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(f
                                                                                 clause
                                                                                 clauses)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i9103"
                                                                                 "i9104"
                                                                                 "i9105"))
                                                                             #(ribcage
                                                                               #(_
                                                                                 e
                                                                                 m1
                                                                                 m2)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i9091"
                                                                                 "i9092"
                                                                                 "i9093"
                                                                                 "i9094"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(x)
                                                                               #((top))
                                                                               #("i9088")))
                                                                            (hygiene
                                                                              guile))
                                                                         (list '#(syntax-object
                                                                                  memv
                                                                                  ((top)
                                                                                   #(ribcage
                                                                                     #(k
                                                                                       e1
                                                                                       e2)
                                                                                     #((top)
                                                                                       (top)
                                                                                       (top))
                                                                                     #("i9118"
                                                                                       "i9119"
                                                                                       "i9120"))
                                                                                   #(ribcage
                                                                                     ()
                                                                                     ()
                                                                                     ())
                                                                                   #(ribcage
                                                                                     #(f
                                                                                       clause
                                                                                       clauses)
                                                                                     #((top)
                                                                                       (top)
                                                                                       (top))
                                                                                     #("i9103"
                                                                                       "i9104"
                                                                                       "i9105"))
                                                                                   #(ribcage
                                                                                     #(_
                                                                                       e
                                                                                       m1
                                                                                       m2)
                                                                                     #((top)
                                                                                       (top)
                                                                                       (top)
                                                                                       (top))
                                                                                     #("i9091"
                                                                                       "i9092"
                                                                                       "i9093"
                                                                                       "i9094"))
                                                                                   #(ribcage
                                                                                     ()
                                                                                     ()
                                                                                     ())
                                                                                   #(ribcage
                                                                                     #(x)
                                                                                     #((top))
                                                                                     #("i9088")))
                                                                                  (hygiene
                                                                                    guile))
                                                                               '#(syntax-object
                                                                                  t
                                                                                  ((top)
                                                                                   #(ribcage
                                                                                     #(k
                                                                                       e1
                                                                                       e2)
                                                                                     #((top)
                                                                                       (top)
                                                                                       (top))
                                                                                     #("i9118"
                                                                                       "i9119"
                                                                                       "i9120"))
                                                                                   #(ribcage
                                                                                     ()
                                                                                     ()
                                                                                     ())
                                                                                   #(ribcage
                                                                                     #(f
                                                                                       clause
                                                                                       clauses)
                                                                                     #((top)
                                                                                       (top)
                                                                                       (top))
                                                                                     #("i9103"
                                                                                       "i9104"
                                                                                       "i9105"))
                                                                                   #(ribcage
                                                                                     #(_
                                                                                       e
                                                                                       m1
                                                                                       m2)
                                                                                     #((top)
                                                                                       (top)
                                                                                       (top)
                                                                                       (top))
                                                                                     #("i9091"
                                                                                       "i9092"
                                                                                       "i9093"
                                                                                       "i9094"))
                                                                                   #(ribcage
                                                                                     ()
                                                                                     ()
                                                                                     ())
                                                                                   #(ribcage
                                                                                     #(x)
                                                                                     #((top))
                                                                                     #("i9088")))
                                                                                  (hygiene
                                                                                    guile))
                                                                               (list '#(syntax-object
                                                                                        quote
                                                                                        ((top)
                                                                                         #(ribcage
                                                                                           #(k
                                                                                             e1
                                                                                             e2)
                                                                                           #((top)
                                                                                             (top)
                                                                                             (top))
                                                                                           #("i9118"
                                                                                             "i9119"
                                                                                             "i9120"))
                                                                                         #(ribcage
                                                                                           ()
                                                                                           ()
                                                                                           ())
                                                                                         #(ribcage
                                                                                           #(f
                                                                                             clause
                                                                                             clauses)
                                                                                           #((top)
                                                                                             (top)
                                                                                             (top))
                                                                                           #("i9103"
                                                                                             "i9104"
                                                                                             "i9105"))
                                                                                         #(ribcage
                                                                                           #(_
                                                                                             e
                                                                                             m1
                                                                                             m2)
                                                                                           #((top)
                                                                                             (top)
                                                                                             (top)
                                                                                             (top))
                                                                                           #("i9091"
                                                                                             "i9092"
                                                                                             "i9093"
                                                                                             "i9094"))
                                                                                         #(ribcage
                                                                                           ()
                                                                                           ()
                                                                                           ())
                                                                                         #(ribcage
                                                                                           #(x)
                                                                                           #((top))
                                                                                           #("i9088")))
                                                                                        (hygiene
                                                                                          guile))
                                                                                     #{k\ 9121}#))
                                                                         (cons '#(syntax-object
                                                                                  begin
                                                                                  ((top)
                                                                                   #(ribcage
                                                                                     #(k
                                                                                       e1
                                                                                       e2)
                                                                                     #((top)
                                                                                       (top)
                                                                                       (top))
                                                                                     #("i9118"
                                                                                       "i9119"
                                                                                       "i9120"))
                                                                                   #(ribcage
                                                                                     ()
                                                                                     ()
                                                                                     ())
                                                                                   #(ribcage
                                                                                     #(f
                                                                                       clause
                                                                                       clauses)
                                                                                     #((top)
                                                                                       (top)
                                                                                       (top))
                                                                                     #("i9103"
                                                                                       "i9104"
                                                                                       "i9105"))
                                                                                   #(ribcage
                                                                                     #(_
                                                                                       e
                                                                                       m1
                                                                                       m2)
                                                                                     #((top)
                                                                                       (top)
                                                                                       (top)
                                                                                       (top))
                                                                                     #("i9091"
                                                                                       "i9092"
                                                                                       "i9093"
                                                                                       "i9094"))
                                                                                   #(ribcage
                                                                                     ()
                                                                                     ()
                                                                                     ())
                                                                                   #(ribcage
                                                                                     #(x)
                                                                                     #((top))
                                                                                     #("i9088")))
                                                                                  (hygiene
                                                                                    guile))
                                                                               (cons #{e1\ 9122}#
                                                                                     #{e2\ 9123}#))))
                                                                 #{tmp\ 9117}#)
                                                          ((lambda (#{_\ 9127}#)
                                                             (syntax-violation
                                                               'case
                                                               "bad clause"
                                                               #{x\ 9087}#
                                                               #{clause\ 9107}#))
                                                           #{tmp\ 9110}#)))
                                                      ($sc-dispatch
                                                        #{tmp\ 9110}#
                                                        '(each-any
                                                           any
                                                           .
                                                           each-any)))))
                                                 ($sc-dispatch
                                                   #{tmp\ 9110}#
                                                   '(#(free-id
                                                       #(syntax-object
                                                         else
                                                         ((top)
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(f clause clauses)
                                                            #((top)
                                                              (top)
                                                              (top))
                                                            #("i9103"
                                                              "i9104"
                                                              "i9105"))
                                                          #(ribcage
                                                            #(_ e m1 m2)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i9091"
                                                              "i9092"
                                                              "i9093"
                                                              "i9094"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(x)
                                                            #((top))
                                                            #("i9088")))
                                                         (hygiene guile)))
                                                     any
                                                     .
                                                     each-any))))
                                              #{clause\ 9107}#)
                                             ((lambda (#{tmp\ 9129}#)
                                                ((lambda (#{rest\ 9131}#)
                                                   ((lambda (#{tmp\ 9132}#)
                                                      ((lambda (#{tmp\ 9133}#)
                                                         (if #{tmp\ 9133}#
                                                           (apply (lambda (#{k\ 9137}#
                                                                           #{e1\ 9138}#
                                                                           #{e2\ 9139}#)
                                                                    (list '#(syntax-object
                                                                             if
                                                                             ((top)
                                                                              #(ribcage
                                                                                #(k
                                                                                  e1
                                                                                  e2)
                                                                                #((top)
                                                                                  (top)
                                                                                  (top))
                                                                                #("i9134"
                                                                                  "i9135"
                                                                                  "i9136"))
                                                                              #(ribcage
                                                                                #(rest)
                                                                                #((top))
                                                                                #("i9130"))
                                                                              #(ribcage
                                                                                ()
                                                                                ()
                                                                                ())
                                                                              #(ribcage
                                                                                #(f
                                                                                  clause
                                                                                  clauses)
                                                                                #((top)
                                                                                  (top)
                                                                                  (top))
                                                                                #("i9103"
                                                                                  "i9104"
                                                                                  "i9105"))
                                                                              #(ribcage
                                                                                #(_
                                                                                  e
                                                                                  m1
                                                                                  m2)
                                                                                #((top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top))
                                                                                #("i9091"
                                                                                  "i9092"
                                                                                  "i9093"
                                                                                  "i9094"))
                                                                              #(ribcage
                                                                                ()
                                                                                ()
                                                                                ())
                                                                              #(ribcage
                                                                                #(x)
                                                                                #((top))
                                                                                #("i9088")))
                                                                             (hygiene
                                                                               guile))
                                                                          (list '#(syntax-object
                                                                                   memv
                                                                                   ((top)
                                                                                    #(ribcage
                                                                                      #(k
                                                                                        e1
                                                                                        e2)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i9134"
                                                                                        "i9135"
                                                                                        "i9136"))
                                                                                    #(ribcage
                                                                                      #(rest)
                                                                                      #((top))
                                                                                      #("i9130"))
                                                                                    #(ribcage
                                                                                      ()
                                                                                      ()
                                                                                      ())
                                                                                    #(ribcage
                                                                                      #(f
                                                                                        clause
                                                                                        clauses)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i9103"
                                                                                        "i9104"
                                                                                        "i9105"))
                                                                                    #(ribcage
                                                                                      #(_
                                                                                        e
                                                                                        m1
                                                                                        m2)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i9091"
                                                                                        "i9092"
                                                                                        "i9093"
                                                                                        "i9094"))
                                                                                    #(ribcage
                                                                                      ()
                                                                                      ()
                                                                                      ())
                                                                                    #(ribcage
                                                                                      #(x)
                                                                                      #((top))
                                                                                      #("i9088")))
                                                                                   (hygiene
                                                                                     guile))
                                                                                '#(syntax-object
                                                                                   t
                                                                                   ((top)
                                                                                    #(ribcage
                                                                                      #(k
                                                                                        e1
                                                                                        e2)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i9134"
                                                                                        "i9135"
                                                                                        "i9136"))
                                                                                    #(ribcage
                                                                                      #(rest)
                                                                                      #((top))
                                                                                      #("i9130"))
                                                                                    #(ribcage
                                                                                      ()
                                                                                      ()
                                                                                      ())
                                                                                    #(ribcage
                                                                                      #(f
                                                                                        clause
                                                                                        clauses)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i9103"
                                                                                        "i9104"
                                                                                        "i9105"))
                                                                                    #(ribcage
                                                                                      #(_
                                                                                        e
                                                                                        m1
                                                                                        m2)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i9091"
                                                                                        "i9092"
                                                                                        "i9093"
                                                                                        "i9094"))
                                                                                    #(ribcage
                                                                                      ()
                                                                                      ()
                                                                                      ())
                                                                                    #(ribcage
                                                                                      #(x)
                                                                                      #((top))
                                                                                      #("i9088")))
                                                                                   (hygiene
                                                                                     guile))
                                                                                (list '#(syntax-object
                                                                                         quote
                                                                                         ((top)
                                                                                          #(ribcage
                                                                                            #(k
                                                                                              e1
                                                                                              e2)
                                                                                            #((top)
                                                                                              (top)
                                                                                              (top))
                                                                                            #("i9134"
                                                                                              "i9135"
                                                                                              "i9136"))
                                                                                          #(ribcage
                                                                                            #(rest)
                                                                                            #((top))
                                                                                            #("i9130"))
                                                                                          #(ribcage
                                                                                            ()
                                                                                            ()
                                                                                            ())
                                                                                          #(ribcage
                                                                                            #(f
                                                                                              clause
                                                                                              clauses)
                                                                                            #((top)
                                                                                              (top)
                                                                                              (top))
                                                                                            #("i9103"
                                                                                              "i9104"
                                                                                              "i9105"))
                                                                                          #(ribcage
                                                                                            #(_
                                                                                              e
                                                                                              m1
                                                                                              m2)
                                                                                            #((top)
                                                                                              (top)
                                                                                              (top)
                                                                                              (top))
                                                                                            #("i9091"
                                                                                              "i9092"
                                                                                              "i9093"
                                                                                              "i9094"))
                                                                                          #(ribcage
                                                                                            ()
                                                                                            ()
                                                                                            ())
                                                                                          #(ribcage
                                                                                            #(x)
                                                                                            #((top))
                                                                                            #("i9088")))
                                                                                         (hygiene
                                                                                           guile))
                                                                                      #{k\ 9137}#))
                                                                          (cons '#(syntax-object
                                                                                   begin
                                                                                   ((top)
                                                                                    #(ribcage
                                                                                      #(k
                                                                                        e1
                                                                                        e2)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i9134"
                                                                                        "i9135"
                                                                                        "i9136"))
                                                                                    #(ribcage
                                                                                      #(rest)
                                                                                      #((top))
                                                                                      #("i9130"))
                                                                                    #(ribcage
                                                                                      ()
                                                                                      ()
                                                                                      ())
                                                                                    #(ribcage
                                                                                      #(f
                                                                                        clause
                                                                                        clauses)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i9103"
                                                                                        "i9104"
                                                                                        "i9105"))
                                                                                    #(ribcage
                                                                                      #(_
                                                                                        e
                                                                                        m1
                                                                                        m2)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i9091"
                                                                                        "i9092"
                                                                                        "i9093"
                                                                                        "i9094"))
                                                                                    #(ribcage
                                                                                      ()
                                                                                      ()
                                                                                      ())
                                                                                    #(ribcage
                                                                                      #(x)
                                                                                      #((top))
                                                                                      #("i9088")))
                                                                                   (hygiene
                                                                                     guile))
                                                                                (cons #{e1\ 9138}#
                                                                                      #{e2\ 9139}#))
                                                                          #{rest\ 9131}#))
                                                                  #{tmp\ 9133}#)
                                                           ((lambda (#{_\ 9143}#)
                                                              (syntax-violation
                                                                'case
                                                                "bad clause"
                                                                #{x\ 9087}#
                                                                #{clause\ 9107}#))
                                                            #{tmp\ 9132}#)))
                                                       ($sc-dispatch
                                                         #{tmp\ 9132}#
                                                         '(each-any
                                                            any
                                                            .
                                                            each-any))))
                                                    #{clause\ 9107}#))
                                                 #{tmp\ 9129}#))
                                              (#{f\ 9106}#
                                                (car #{clauses\ 9108}#)
                                                (cdr #{clauses\ 9108}#)))))))
                                (#{f\ 9106}# #{m1\ 9097}# #{m2\ 9098}#))))
                           #{tmp\ 9090}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp\ 9089}#)))
                ($sc-dispatch
                  #{tmp\ 9089}#
                  '(any any any . each-any))))
             #{x\ 9087}#))
          (module-name (current-module)))))

(define identifier-syntax
  (make-syntax-transformer
    'identifier-syntax
    'macro
    (cons (lambda (#{x\ 9144}#)
            ((lambda (#{tmp\ 9146}#)
               ((lambda (#{tmp\ 9147}#)
                  (if #{tmp\ 9147}#
                    (apply (lambda (#{_\ 9150}# #{e\ 9151}#)
                             (list '#(syntax-object
                                      lambda
                                      ((top)
                                       #(ribcage
                                         #(_ e)
                                         #((top) (top))
                                         #("i9148" "i9149"))
                                       #(ribcage () () ())
                                       #(ribcage #(x) #((top)) #("i9145")))
                                      (hygiene guile))
                                   '(#(syntax-object
                                       x
                                       ((top)
                                        #(ribcage
                                          #(_ e)
                                          #((top) (top))
                                          #("i9148" "i9149"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i9145")))
                                       (hygiene guile)))
                                   '#((#(syntax-object
                                         macro-type
                                         ((top)
                                          #(ribcage
                                            #(_ e)
                                            #((top) (top))
                                            #("i9148" "i9149"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i9145")))
                                         (hygiene guile))
                                       .
                                       #(syntax-object
                                         identifier-syntax
                                         ((top)
                                          #(ribcage
                                            #(_ e)
                                            #((top) (top))
                                            #("i9148" "i9149"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i9145")))
                                         (hygiene guile))))
                                   (list '#(syntax-object
                                            syntax-case
                                            ((top)
                                             #(ribcage
                                               #(_ e)
                                               #((top) (top))
                                               #("i9148" "i9149"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x)
                                               #((top))
                                               #("i9145")))
                                            (hygiene guile))
                                         '#(syntax-object
                                            x
                                            ((top)
                                             #(ribcage
                                               #(_ e)
                                               #((top) (top))
                                               #("i9148" "i9149"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x)
                                               #((top))
                                               #("i9145")))
                                            (hygiene guile))
                                         '()
                                         (list '#(syntax-object
                                                  id
                                                  ((top)
                                                   #(ribcage
                                                     #(_ e)
                                                     #((top) (top))
                                                     #("i9148" "i9149"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i9145")))
                                                  (hygiene guile))
                                               '(#(syntax-object
                                                   identifier?
                                                   ((top)
                                                    #(ribcage
                                                      #(_ e)
                                                      #((top) (top))
                                                      #("i9148" "i9149"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i9145")))
                                                   (hygiene guile))
                                                 (#(syntax-object
                                                    syntax
                                                    ((top)
                                                     #(ribcage
                                                       #(_ e)
                                                       #((top) (top))
                                                       #("i9148" "i9149"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("i9145")))
                                                    (hygiene guile))
                                                  #(syntax-object
                                                    id
                                                    ((top)
                                                     #(ribcage
                                                       #(_ e)
                                                       #((top) (top))
                                                       #("i9148" "i9149"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("i9145")))
                                                    (hygiene guile))))
                                               (list '#(syntax-object
                                                        syntax
                                                        ((top)
                                                         #(ribcage
                                                           #(_ e)
                                                           #((top) (top))
                                                           #("i9148" "i9149"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("i9145")))
                                                        (hygiene guile))
                                                     #{e\ 9151}#))
                                         (list (cons #{_\ 9150}#
                                                     '(#(syntax-object
                                                         x
                                                         ((top)
                                                          #(ribcage
                                                            #(_ e)
                                                            #((top) (top))
                                                            #("i9148" "i9149"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(x)
                                                            #((top))
                                                            #("i9145")))
                                                         (hygiene guile))
                                                       #(syntax-object
                                                         ...
                                                         ((top)
                                                          #(ribcage
                                                            #(_ e)
                                                            #((top) (top))
                                                            #("i9148" "i9149"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(x)
                                                            #((top))
                                                            #("i9145")))
                                                         (hygiene guile))))
                                               (list '#(syntax-object
                                                        syntax
                                                        ((top)
                                                         #(ribcage
                                                           #(_ e)
                                                           #((top) (top))
                                                           #("i9148" "i9149"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("i9145")))
                                                        (hygiene guile))
                                                     (cons #{e\ 9151}#
                                                           '(#(syntax-object
                                                               x
                                                               ((top)
                                                                #(ribcage
                                                                  #(_ e)
                                                                  #((top)
                                                                    (top))
                                                                  #("i9148"
                                                                    "i9149"))
                                                                #(ribcage
                                                                  ()
                                                                  ()
                                                                  ())
                                                                #(ribcage
                                                                  #(x)
                                                                  #((top))
                                                                  #("i9145")))
                                                               (hygiene guile))
                                                             #(syntax-object
                                                               ...
                                                               ((top)
                                                                #(ribcage
                                                                  #(_ e)
                                                                  #((top)
                                                                    (top))
                                                                  #("i9148"
                                                                    "i9149"))
                                                                #(ribcage
                                                                  ()
                                                                  ()
                                                                  ())
                                                                #(ribcage
                                                                  #(x)
                                                                  #((top))
                                                                  #("i9145")))
                                                               (hygiene
                                                                 guile)))))))))
                           #{tmp\ 9147}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp\ 9146}#)))
                ($sc-dispatch #{tmp\ 9146}# (quote (any any)))))
             #{x\ 9144}#))
          (module-name (current-module)))))

(define define*
  (make-syntax-transformer
    'define*
    'macro
    (cons (lambda (#{x\ 9152}#)
            ((lambda (#{tmp\ 9154}#)
               ((lambda (#{tmp\ 9155}#)
                  (if #{tmp\ 9155}#
                    (apply (lambda (#{_\ 9161}#
                                    #{id\ 9162}#
                                    #{args\ 9163}#
                                    #{b0\ 9164}#
                                    #{b1\ 9165}#)
                             (list '#(syntax-object
                                      define
                                      ((top)
                                       #(ribcage
                                         #(_ id args b0 b1)
                                         #((top) (top) (top) (top) (top))
                                         #("i9156"
                                           "i9157"
                                           "i9158"
                                           "i9159"
                                           "i9160"))
                                       #(ribcage () () ())
                                       #(ribcage #(x) #((top)) #("i9153")))
                                      (hygiene guile))
                                   #{id\ 9162}#
                                   (cons '#(syntax-object
                                            lambda*
                                            ((top)
                                             #(ribcage
                                               #(_ id args b0 b1)
                                               #((top) (top) (top) (top) (top))
                                               #("i9156"
                                                 "i9157"
                                                 "i9158"
                                                 "i9159"
                                                 "i9160"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x)
                                               #((top))
                                               #("i9153")))
                                            (hygiene guile))
                                         (cons #{args\ 9163}#
                                               (cons #{b0\ 9164}#
                                                     #{b1\ 9165}#)))))
                           #{tmp\ 9155}#)
                    ((lambda (#{tmp\ 9167}#)
                       (if (if #{tmp\ 9167}#
                             (apply (lambda (#{_\ 9171}#
                                             #{id\ 9172}#
                                             #{val\ 9173}#)
                                      (identifier?
                                        '#(syntax-object
                                           x
                                           ((top)
                                            #(ribcage
                                              #(_ id val)
                                              #((top) (top) (top))
                                              #("i9168" "i9169" "i9170"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(x)
                                              #((top))
                                              #("i9153")))
                                           (hygiene guile))))
                                    #{tmp\ 9167}#)
                             #f)
                         (apply (lambda (#{_\ 9177}#
                                         #{id\ 9178}#
                                         #{val\ 9179}#)
                                  (list '#(syntax-object
                                           define
                                           ((top)
                                            #(ribcage
                                              #(_ id val)
                                              #((top) (top) (top))
                                              #("i9174" "i9175" "i9176"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(x)
                                              #((top))
                                              #("i9153")))
                                           (hygiene guile))
                                        #{id\ 9178}#
                                        #{val\ 9179}#))
                                #{tmp\ 9167}#)
                         (syntax-violation
                           #f
                           "source expression failed to match any pattern"
                           #{tmp\ 9154}#)))
                     ($sc-dispatch
                       #{tmp\ 9154}#
                       '(any any any)))))
                ($sc-dispatch
                  #{tmp\ 9154}#
                  '(any (any . any) any . each-any))))
             #{x\ 9152}#))
          (module-name (current-module)))))

