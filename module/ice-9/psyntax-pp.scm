(eval-when (compile) (set-current-module (resolve-module (quote (guile)))))
(if #f #f)

(letrec*
  ((#{make-void 203}#
     (lambda (#{src 765}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 0)
         #{src 765}#)))
   (#{make-const 205}#
     (lambda (#{src 767}# #{exp 768}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 1)
         #{src 767}#
         #{exp 768}#)))
   (#{make-primitive-ref 207}#
     (lambda (#{src 771}# #{name 772}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 2)
         #{src 771}#
         #{name 772}#)))
   (#{make-lexical-ref 209}#
     (lambda (#{src 775}# #{name 776}# #{gensym 777}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 3)
         #{src 775}#
         #{name 776}#
         #{gensym 777}#)))
   (#{make-lexical-set 211}#
     (lambda (#{src 781}#
              #{name 782}#
              #{gensym 783}#
              #{exp 784}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 4)
         #{src 781}#
         #{name 782}#
         #{gensym 783}#
         #{exp 784}#)))
   (#{make-module-ref 213}#
     (lambda (#{src 789}#
              #{mod 790}#
              #{name 791}#
              #{public? 792}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 5)
         #{src 789}#
         #{mod 790}#
         #{name 791}#
         #{public? 792}#)))
   (#{make-module-set 215}#
     (lambda (#{src 797}#
              #{mod 798}#
              #{name 799}#
              #{public? 800}#
              #{exp 801}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 6)
         #{src 797}#
         #{mod 798}#
         #{name 799}#
         #{public? 800}#
         #{exp 801}#)))
   (#{make-toplevel-ref 217}#
     (lambda (#{src 807}# #{name 808}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 7)
         #{src 807}#
         #{name 808}#)))
   (#{make-toplevel-set 219}#
     (lambda (#{src 811}# #{name 812}# #{exp 813}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 8)
         #{src 811}#
         #{name 812}#
         #{exp 813}#)))
   (#{make-toplevel-define 221}#
     (lambda (#{src 817}# #{name 818}# #{exp 819}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 9)
         #{src 817}#
         #{name 818}#
         #{exp 819}#)))
   (#{make-conditional 223}#
     (lambda (#{src 823}#
              #{test 824}#
              #{consequent 825}#
              #{alternate 826}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 10)
         #{src 823}#
         #{test 824}#
         #{consequent 825}#
         #{alternate 826}#)))
   (#{make-call 225}#
     (lambda (#{src 831}# #{proc 832}# #{args 833}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 11)
         #{src 831}#
         #{proc 832}#
         #{args 833}#)))
   (#{make-primcall 227}#
     (lambda (#{src 837}# #{name 838}# #{args 839}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 12)
         #{src 837}#
         #{name 838}#
         #{args 839}#)))
   (#{make-sequence 229}#
     (lambda (#{src 843}# #{exps 844}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 13)
         #{src 843}#
         #{exps 844}#)))
   (#{make-lambda 231}#
     (lambda (#{src 847}# #{meta 848}# #{body 849}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 14)
         #{src 847}#
         #{meta 848}#
         #{body 849}#)))
   (#{make-lambda-case 233}#
     (lambda (#{src 853}#
              #{req 854}#
              #{opt 855}#
              #{rest 856}#
              #{kw 857}#
              #{inits 858}#
              #{gensyms 859}#
              #{body 860}#
              #{alternate 861}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 15)
         #{src 853}#
         #{req 854}#
         #{opt 855}#
         #{rest 856}#
         #{kw 857}#
         #{inits 858}#
         #{gensyms 859}#
         #{body 860}#
         #{alternate 861}#)))
   (#{make-let 235}#
     (lambda (#{src 871}#
              #{names 872}#
              #{gensyms 873}#
              #{vals 874}#
              #{body 875}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 16)
         #{src 871}#
         #{names 872}#
         #{gensyms 873}#
         #{vals 874}#
         #{body 875}#)))
   (#{make-letrec 237}#
     (lambda (#{src 881}#
              #{in-order? 882}#
              #{names 883}#
              #{gensyms 884}#
              #{vals 885}#
              #{body 886}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 17)
         #{src 881}#
         #{in-order? 882}#
         #{names 883}#
         #{gensyms 884}#
         #{vals 885}#
         #{body 886}#)))
   (#{make-dynlet 239}#
     (lambda (#{src 893}#
              #{fluids 894}#
              #{vals 895}#
              #{body 896}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 18)
         #{src 893}#
         #{fluids 894}#
         #{vals 895}#
         #{body 896}#)))
   (#{lambda? 242}#
     (lambda (#{x 901}#)
       (if (struct? #{x 901}#)
         (eq? (struct-vtable #{x 901}#)
              (vector-ref %expanded-vtables 14))
         #f)))
   (#{lambda-meta 244}#
     (lambda (#{x 905}#) (struct-ref #{x 905}# 1)))
   (#{set-lambda-meta! 246}#
     (lambda (#{x 907}# #{v 908}#)
       (struct-set! #{x 907}# 1 #{v 908}#)))
   (#{top-level-eval-hook 252}#
     (lambda (#{x 911}# #{mod 912}#)
       (primitive-eval #{x 911}#)))
   (#{local-eval-hook 254}#
     (lambda (#{x 915}# #{mod 916}#)
       (primitive-eval #{x 915}#)))
   (#{put-global-definition-hook 257}#
     (lambda (#{symbol 919}# #{type 920}# #{val 921}#)
       (module-define!
         (current-module)
         #{symbol 919}#
         (make-syntax-transformer
           #{symbol 919}#
           #{type 920}#
           #{val 921}#))))
   (#{get-global-definition-hook 259}#
     (lambda (#{symbol 925}# #{module 926}#)
       (begin
         (if (if (not #{module 926}#) (current-module) #f)
           (warn "module system is booted, we should have a module"
                 #{symbol 925}#))
         (begin
           (let ((#{v 932}# (module-variable
                              (if #{module 926}#
                                (resolve-module (cdr #{module 926}#))
                                (current-module))
                              #{symbol 925}#)))
             (if #{v 932}#
               (if (variable-bound? #{v 932}#)
                 (begin
                   (let ((#{val 937}# (variable-ref #{v 932}#)))
                     (if (macro? #{val 937}#)
                       (if (macro-type #{val 937}#)
                         (cons (macro-type #{val 937}#)
                               (macro-binding #{val 937}#))
                         #f)
                       #f)))
                 #f)
               #f))))))
   (#{decorate-source 261}#
     (lambda (#{e 941}# #{s 942}#)
       (begin
         (if (if (pair? #{e 941}#) #{s 942}# #f)
           (set-source-properties! #{e 941}# #{s 942}#))
         #{e 941}#)))
   (#{maybe-name-value! 263}#
     (lambda (#{name 947}# #{val 948}#)
       (if (#{lambda? 242}# #{val 948}#)
         (begin
           (let ((#{meta 952}# (#{lambda-meta 244}# #{val 948}#)))
             (if (not (assq 'name #{meta 952}#))
               (#{set-lambda-meta! 246}#
                 #{val 948}#
                 (cons (cons 'name #{name 947}#) #{meta 952}#))))))))
   (#{build-void 265}#
     (lambda (#{source 953}#)
       (#{make-void 203}# #{source 953}#)))
   (#{build-call 267}#
     (lambda (#{source 955}# #{fun-exp 956}# #{arg-exps 957}#)
       (#{make-call 225}#
         #{source 955}#
         #{fun-exp 956}#
         #{arg-exps 957}#)))
   (#{build-conditional 269}#
     (lambda (#{source 961}#
              #{test-exp 962}#
              #{then-exp 963}#
              #{else-exp 964}#)
       (#{make-conditional 223}#
         #{source 961}#
         #{test-exp 962}#
         #{then-exp 963}#
         #{else-exp 964}#)))
   (#{build-dynlet 271}#
     (lambda (#{source 969}#
              #{fluids 970}#
              #{vals 971}#
              #{body 972}#)
       (#{make-dynlet 239}#
         #{source 969}#
         #{fluids 970}#
         #{vals 971}#
         #{body 972}#)))
   (#{build-lexical-reference 273}#
     (lambda (#{type 977}#
              #{source 978}#
              #{name 979}#
              #{var 980}#)
       (#{make-lexical-ref 209}#
         #{source 978}#
         #{name 979}#
         #{var 980}#)))
   (#{build-lexical-assignment 275}#
     (lambda (#{source 985}#
              #{name 986}#
              #{var 987}#
              #{exp 988}#)
       (begin
         (#{maybe-name-value! 263}#
           #{name 986}#
           #{exp 988}#)
         (#{make-lexical-set 211}#
           #{source 985}#
           #{name 986}#
           #{var 987}#
           #{exp 988}#))))
   (#{analyze-variable 277}#
     (lambda (#{mod 993}#
              #{var 994}#
              #{modref-cont 995}#
              #{bare-cont 996}#)
       (if (not #{mod 993}#)
         (#{bare-cont 996}# #{var 994}#)
         (begin
           (let ((#{kind 1003}# (car #{mod 993}#))
                 (#{mod 1004}# (cdr #{mod 993}#)))
             (if (memv #{kind 1003}# '(public))
               (#{modref-cont 995}# #{mod 1004}# #{var 994}# #t)
               (if (memv #{kind 1003}# '(private))
                 (if (not (equal?
                            #{mod 1004}#
                            (module-name (current-module))))
                   (#{modref-cont 995}# #{mod 1004}# #{var 994}# #f)
                   (#{bare-cont 996}# #{var 994}#))
                 (if (memv #{kind 1003}# '(bare))
                   (#{bare-cont 996}# #{var 994}#)
                   (if (memv #{kind 1003}# '(hygiene))
                     (if (if (not (equal?
                                    #{mod 1004}#
                                    (module-name (current-module))))
                           (module-variable
                             (resolve-module #{mod 1004}#)
                             #{var 994}#)
                           #f)
                       (#{modref-cont 995}# #{mod 1004}# #{var 994}# #f)
                       (#{bare-cont 996}# #{var 994}#))
                     (syntax-violation
                       #f
                       "bad module kind"
                       #{var 994}#
                       #{mod 1004}#))))))))))
   (#{build-global-reference 279}#
     (lambda (#{source 1012}# #{var 1013}# #{mod 1014}#)
       (#{analyze-variable 277}#
         #{mod 1014}#
         #{var 1013}#
         (lambda (#{mod 1018}# #{var 1019}# #{public? 1020}#)
           (#{make-module-ref 213}#
             #{source 1012}#
             #{mod 1018}#
             #{var 1019}#
             #{public? 1020}#))
         (lambda (#{var 1024}#)
           (#{make-toplevel-ref 217}#
             #{source 1012}#
             #{var 1024}#)))))
   (#{build-global-assignment 281}#
     (lambda (#{source 1026}#
              #{var 1027}#
              #{exp 1028}#
              #{mod 1029}#)
       (begin
         (#{maybe-name-value! 263}#
           #{var 1027}#
           #{exp 1028}#)
         (#{analyze-variable 277}#
           #{mod 1029}#
           #{var 1027}#
           (lambda (#{mod 1034}# #{var 1035}# #{public? 1036}#)
             (#{make-module-set 215}#
               #{source 1026}#
               #{mod 1034}#
               #{var 1035}#
               #{public? 1036}#
               #{exp 1028}#))
           (lambda (#{var 1040}#)
             (#{make-toplevel-set 219}#
               #{source 1026}#
               #{var 1040}#
               #{exp 1028}#))))))
   (#{build-global-definition 283}#
     (lambda (#{source 1042}# #{var 1043}# #{exp 1044}#)
       (begin
         (#{maybe-name-value! 263}#
           #{var 1043}#
           #{exp 1044}#)
         (#{make-toplevel-define 221}#
           #{source 1042}#
           #{var 1043}#
           #{exp 1044}#))))
   (#{build-simple-lambda 285}#
     (lambda (#{src 1048}#
              #{req 1049}#
              #{rest 1050}#
              #{vars 1051}#
              #{meta 1052}#
              #{exp 1053}#)
       (#{make-lambda 231}#
         #{src 1048}#
         #{meta 1052}#
         (#{make-lambda-case 233}#
           #{src 1048}#
           #{req 1049}#
           #f
           #{rest 1050}#
           #f
           '()
           #{vars 1051}#
           #{exp 1053}#
           #f))))
   (#{build-case-lambda 287}#
     (lambda (#{src 1060}# #{meta 1061}# #{body 1062}#)
       (#{make-lambda 231}#
         #{src 1060}#
         #{meta 1061}#
         #{body 1062}#)))
   (#{build-lambda-case 289}#
     (lambda (#{src 1066}#
              #{req 1067}#
              #{opt 1068}#
              #{rest 1069}#
              #{kw 1070}#
              #{inits 1071}#
              #{vars 1072}#
              #{body 1073}#
              #{else-case 1074}#)
       (#{make-lambda-case 233}#
         #{src 1066}#
         #{req 1067}#
         #{opt 1068}#
         #{rest 1069}#
         #{kw 1070}#
         #{inits 1071}#
         #{vars 1072}#
         #{body 1073}#
         #{else-case 1074}#)))
   (#{build-primcall 291}#
     (lambda (#{src 1084}# #{name 1085}# #{args 1086}#)
       (#{make-primcall 227}#
         #{src 1084}#
         #{name 1085}#
         #{args 1086}#)))
   (#{build-primref 293}#
     (lambda (#{src 1090}# #{name 1091}#)
       (#{make-primitive-ref 207}#
         #{src 1090}#
         #{name 1091}#)))
   (#{build-data 295}#
     (lambda (#{src 1094}# #{exp 1095}#)
       (#{make-const 205}# #{src 1094}# #{exp 1095}#)))
   (#{build-sequence 297}#
     (lambda (#{src 1098}# #{exps 1099}#)
       (if (null? (cdr #{exps 1099}#))
         (car #{exps 1099}#)
         (#{make-sequence 229}#
           #{src 1098}#
           #{exps 1099}#))))
   (#{build-let 299}#
     (lambda (#{src 1102}#
              #{ids 1103}#
              #{vars 1104}#
              #{val-exps 1105}#
              #{body-exp 1106}#)
       (begin
         (for-each
           #{maybe-name-value! 263}#
           #{ids 1103}#
           #{val-exps 1105}#)
         (if (null? #{vars 1104}#)
           #{body-exp 1106}#
           (#{make-let 235}#
             #{src 1102}#
             #{ids 1103}#
             #{vars 1104}#
             #{val-exps 1105}#
             #{body-exp 1106}#)))))
   (#{build-named-let 301}#
     (lambda (#{src 1112}#
              #{ids 1113}#
              #{vars 1114}#
              #{val-exps 1115}#
              #{body-exp 1116}#)
       (begin
         (let ((#{f 1126}# (car #{vars 1114}#))
               (#{f-name 1127}# (car #{ids 1113}#))
               (#{vars 1128}# (cdr #{vars 1114}#))
               (#{ids 1129}# (cdr #{ids 1113}#)))
           (begin
             (let ((#{proc 1131}#
                     (#{build-simple-lambda 285}#
                       #{src 1112}#
                       #{ids 1129}#
                       #f
                       #{vars 1128}#
                       '()
                       #{body-exp 1116}#)))
               (begin
                 (#{maybe-name-value! 263}#
                   #{f-name 1127}#
                   #{proc 1131}#)
                 (for-each
                   #{maybe-name-value! 263}#
                   #{ids 1129}#
                   #{val-exps 1115}#)
                 (#{make-letrec 237}#
                   #{src 1112}#
                   #f
                   (list #{f-name 1127}#)
                   (list #{f 1126}#)
                   (list #{proc 1131}#)
                   (#{build-call 267}#
                     #{src 1112}#
                     (#{build-lexical-reference 273}#
                       'fun
                       #{src 1112}#
                       #{f-name 1127}#
                       #{f 1126}#)
                     #{val-exps 1115}#)))))))))
   (#{build-letrec 303}#
     (lambda (#{src 1132}#
              #{in-order? 1133}#
              #{ids 1134}#
              #{vars 1135}#
              #{val-exps 1136}#
              #{body-exp 1137}#)
       (if (null? #{vars 1135}#)
         #{body-exp 1137}#
         (begin
           (for-each
             #{maybe-name-value! 263}#
             #{ids 1134}#
             #{val-exps 1136}#)
           (#{make-letrec 237}#
             #{src 1132}#
             #{in-order? 1133}#
             #{ids 1134}#
             #{vars 1135}#
             #{val-exps 1136}#
             #{body-exp 1137}#)))))
   (#{make-syntax-object 307}#
     (lambda (#{expression 1144}#
              #{wrap 1145}#
              #{module 1146}#)
       (vector
         'syntax-object
         #{expression 1144}#
         #{wrap 1145}#
         #{module 1146}#)))
   (#{syntax-object? 309}#
     (lambda (#{x 1150}#)
       (if (vector? #{x 1150}#)
         (if (= (vector-length #{x 1150}#) 4)
           (eq? (vector-ref #{x 1150}# 0) 'syntax-object)
           #f)
         #f)))
   (#{syntax-object-expression 311}#
     (lambda (#{x 1155}#) (vector-ref #{x 1155}# 1)))
   (#{syntax-object-wrap 313}#
     (lambda (#{x 1157}#) (vector-ref #{x 1157}# 2)))
   (#{syntax-object-module 315}#
     (lambda (#{x 1159}#) (vector-ref #{x 1159}# 3)))
   (#{source-annotation 324}#
     (lambda (#{x 1173}#)
       (if (#{syntax-object? 309}# #{x 1173}#)
         (#{source-annotation 324}#
           (#{syntax-object-expression 311}# #{x 1173}#))
         (if (pair? #{x 1173}#)
           (begin
             (let ((#{props 1180}# (source-properties #{x 1173}#)))
               (if (pair? #{props 1180}#) #{props 1180}# #f)))
           #f))))
   (#{extend-env 331}#
     (lambda (#{labels 1182}# #{bindings 1183}# #{r 1184}#)
       (if (null? #{labels 1182}#)
         #{r 1184}#
         (#{extend-env 331}#
           (cdr #{labels 1182}#)
           (cdr #{bindings 1183}#)
           (cons (cons (car #{labels 1182}#)
                       (car #{bindings 1183}#))
                 #{r 1184}#)))))
   (#{extend-var-env 333}#
     (lambda (#{labels 1188}# #{vars 1189}# #{r 1190}#)
       (if (null? #{labels 1188}#)
         #{r 1190}#
         (#{extend-var-env 333}#
           (cdr #{labels 1188}#)
           (cdr #{vars 1189}#)
           (cons (cons (car #{labels 1188}#)
                       (cons 'lexical (car #{vars 1189}#)))
                 #{r 1190}#)))))
   (#{macros-only-env 335}#
     (lambda (#{r 1195}#)
       (if (null? #{r 1195}#)
         '()
         (begin
           (let ((#{a 1198}# (car #{r 1195}#)))
             (if (eq? (car (cdr #{a 1198}#)) 'macro)
               (cons #{a 1198}#
                     (#{macros-only-env 335}# (cdr #{r 1195}#)))
               (#{macros-only-env 335}# (cdr #{r 1195}#))))))))
   (#{lookup 337}#
     (lambda (#{x 1199}# #{r 1200}# #{mod 1201}#)
       (begin
         (let ((#{t 1207}# (assq #{x 1199}# #{r 1200}#)))
           (if #{t 1207}#
             (cdr #{t 1207}#)
             (if (symbol? #{x 1199}#)
               (begin
                 (let ((#{t 1213}#
                         (#{get-global-definition-hook 259}#
                           #{x 1199}#
                           #{mod 1201}#)))
                   (if #{t 1213}# #{t 1213}# '(global))))
               '(displaced-lexical)))))))
   (#{global-extend 339}#
     (lambda (#{type 1218}# #{sym 1219}# #{val 1220}#)
       (#{put-global-definition-hook 257}#
         #{sym 1219}#
         #{type 1218}#
         #{val 1220}#)))
   (#{nonsymbol-id? 341}#
     (lambda (#{x 1224}#)
       (if (#{syntax-object? 309}# #{x 1224}#)
         (symbol?
           (#{syntax-object-expression 311}# #{x 1224}#))
         #f)))
   (#{id? 343}#
     (lambda (#{x 1228}#)
       (if (symbol? #{x 1228}#)
         #t
         (if (#{syntax-object? 309}# #{x 1228}#)
           (symbol?
             (#{syntax-object-expression 311}# #{x 1228}#))
           #f))))
   (#{id-sym-name&marks 346}#
     (lambda (#{x 1235}# #{w 1236}#)
       (if (#{syntax-object? 309}# #{x 1235}#)
         (values
           (#{syntax-object-expression 311}# #{x 1235}#)
           (#{join-marks 393}#
             (car #{w 1236}#)
             (car (#{syntax-object-wrap 313}# #{x 1235}#))))
         (values #{x 1235}# (car #{w 1236}#)))))
   (#{gen-label 356}#
     (lambda () (symbol->string (gensym "i"))))
   (#{gen-labels 358}#
     (lambda (#{ls 1242}#)
       (if (null? #{ls 1242}#)
         '()
         (cons (#{gen-label 356}#)
               (#{gen-labels 358}# (cdr #{ls 1242}#))))))
   (#{make-ribcage 361}#
     (lambda (#{symnames 1244}#
              #{marks 1245}#
              #{labels 1246}#)
       (vector
         'ribcage
         #{symnames 1244}#
         #{marks 1245}#
         #{labels 1246}#)))
   (#{ribcage-symnames 365}#
     (lambda (#{x 1255}#) (vector-ref #{x 1255}# 1)))
   (#{ribcage-marks 367}#
     (lambda (#{x 1257}#) (vector-ref #{x 1257}# 2)))
   (#{ribcage-labels 369}#
     (lambda (#{x 1259}#) (vector-ref #{x 1259}# 3)))
   (#{set-ribcage-symnames! 371}#
     (lambda (#{x 1261}# #{update 1262}#)
       (vector-set! #{x 1261}# 1 #{update 1262}#)))
   (#{set-ribcage-marks! 373}#
     (lambda (#{x 1265}# #{update 1266}#)
       (vector-set! #{x 1265}# 2 #{update 1266}#)))
   (#{set-ribcage-labels! 375}#
     (lambda (#{x 1269}# #{update 1270}#)
       (vector-set! #{x 1269}# 3 #{update 1270}#)))
   (#{anti-mark 381}#
     (lambda (#{w 1273}#)
       (cons (cons #f (car #{w 1273}#))
             (cons 'shift (cdr #{w 1273}#)))))
   (#{extend-ribcage! 385}#
     (lambda (#{ribcage 1279}# #{id 1280}# #{label 1281}#)
       (begin
         (#{set-ribcage-symnames! 371}#
           #{ribcage 1279}#
           (cons (#{syntax-object-expression 311}# #{id 1280}#)
                 (#{ribcage-symnames 365}# #{ribcage 1279}#)))
         (#{set-ribcage-marks! 373}#
           #{ribcage 1279}#
           (cons (car (#{syntax-object-wrap 313}# #{id 1280}#))
                 (#{ribcage-marks 367}# #{ribcage 1279}#)))
         (#{set-ribcage-labels! 375}#
           #{ribcage 1279}#
           (cons #{label 1281}#
                 (#{ribcage-labels 369}# #{ribcage 1279}#))))))
   (#{make-binding-wrap 387}#
     (lambda (#{ids 1286}# #{labels 1287}# #{w 1288}#)
       (if (null? #{ids 1286}#)
         #{w 1288}#
         (cons (car #{w 1288}#)
               (cons (begin
                       (let ((#{labelvec 1295}#
                               (list->vector #{labels 1287}#)))
                         (begin
                           (let ((#{n 1297}#
                                   (vector-length #{labelvec 1295}#)))
                             (begin
                               (let ((#{symnamevec 1300}#
                                       (make-vector #{n 1297}#))
                                     (#{marksvec 1301}#
                                       (make-vector #{n 1297}#)))
                                 (begin
                                   (letrec*
                                     ((#{f 1305}#
                                        (lambda (#{ids 1306}# #{i 1307}#)
                                          (if (not (null? #{ids 1306}#))
                                            (call-with-values
                                              (lambda ()
                                                (#{id-sym-name&marks 346}#
                                                  (car #{ids 1306}#)
                                                  #{w 1288}#))
                                              (lambda (#{symname 1308}#
                                                       #{marks 1309}#)
                                                (begin
                                                  (vector-set!
                                                    #{symnamevec 1300}#
                                                    #{i 1307}#
                                                    #{symname 1308}#)
                                                  (vector-set!
                                                    #{marksvec 1301}#
                                                    #{i 1307}#
                                                    #{marks 1309}#)
                                                  (#{f 1305}#
                                                    (cdr #{ids 1306}#)
                                                    (#{1+}# #{i 1307}#)))))))))
                                     (begin (#{f 1305}# #{ids 1286}# 0)))
                                   (#{make-ribcage 361}#
                                     #{symnamevec 1300}#
                                     #{marksvec 1301}#
                                     #{labelvec 1295}#))))))))
                     (cdr #{w 1288}#))))))
   (#{smart-append 389}#
     (lambda (#{m1 1314}# #{m2 1315}#)
       (if (null? #{m2 1315}#)
         #{m1 1314}#
         (append #{m1 1314}# #{m2 1315}#))))
   (#{join-wraps 391}#
     (lambda (#{w1 1318}# #{w2 1319}#)
       (begin
         (let ((#{m1 1324}# (car #{w1 1318}#))
               (#{s1 1325}# (cdr #{w1 1318}#)))
           (if (null? #{m1 1324}#)
             (if (null? #{s1 1325}#)
               #{w2 1319}#
               (cons (car #{w2 1319}#)
                     (#{smart-append 389}#
                       #{s1 1325}#
                       (cdr #{w2 1319}#))))
             (cons (#{smart-append 389}#
                     #{m1 1324}#
                     (car #{w2 1319}#))
                   (#{smart-append 389}#
                     #{s1 1325}#
                     (cdr #{w2 1319}#))))))))
   (#{join-marks 393}#
     (lambda (#{m1 1334}# #{m2 1335}#)
       (#{smart-append 389}# #{m1 1334}# #{m2 1335}#)))
   (#{same-marks? 395}#
     (lambda (#{x 1338}# #{y 1339}#)
       (begin
         (let ((#{t 1344}# (eq? #{x 1338}# #{y 1339}#)))
           (if #{t 1344}#
             #{t 1344}#
             (if (not (null? #{x 1338}#))
               (if (not (null? #{y 1339}#))
                 (if (eq? (car #{x 1338}#) (car #{y 1339}#))
                   (#{same-marks? 395}#
                     (cdr #{x 1338}#)
                     (cdr #{y 1339}#))
                   #f)
                 #f)
               #f))))))
   (#{id-var-name 397}#
     (lambda (#{id 1350}# #{w 1351}#)
       (letrec*
         ((#{search 1356}#
            (lambda (#{sym 1372}# #{subst 1373}# #{marks 1374}#)
              (if (null? #{subst 1373}#)
                (values #f #{marks 1374}#)
                (begin
                  (let ((#{fst 1379}# (car #{subst 1373}#)))
                    (if (eq? #{fst 1379}# 'shift)
                      (#{search 1356}#
                        #{sym 1372}#
                        (cdr #{subst 1373}#)
                        (cdr #{marks 1374}#))
                      (begin
                        (let ((#{symnames 1381}#
                                (#{ribcage-symnames 365}# #{fst 1379}#)))
                          (if (vector? #{symnames 1381}#)
                            (#{search-vector-rib 1360}#
                              #{sym 1372}#
                              #{subst 1373}#
                              #{marks 1374}#
                              #{symnames 1381}#
                              #{fst 1379}#)
                            (#{search-list-rib 1358}#
                              #{sym 1372}#
                              #{subst 1373}#
                              #{marks 1374}#
                              #{symnames 1381}#
                              #{fst 1379}#))))))))))
          (#{search-list-rib 1358}#
            (lambda (#{sym 1382}#
                     #{subst 1383}#
                     #{marks 1384}#
                     #{symnames 1385}#
                     #{ribcage 1386}#)
              (letrec*
                ((#{f 1395}#
                   (lambda (#{symnames 1396}# #{i 1397}#)
                     (if (null? #{symnames 1396}#)
                       (#{search 1356}#
                         #{sym 1382}#
                         (cdr #{subst 1383}#)
                         #{marks 1384}#)
                       (if (if (eq? (car #{symnames 1396}#) #{sym 1382}#)
                             (#{same-marks? 395}#
                               #{marks 1384}#
                               (list-ref
                                 (#{ribcage-marks 367}# #{ribcage 1386}#)
                                 #{i 1397}#))
                             #f)
                         (values
                           (list-ref
                             (#{ribcage-labels 369}# #{ribcage 1386}#)
                             #{i 1397}#)
                           #{marks 1384}#)
                         (#{f 1395}#
                           (cdr #{symnames 1396}#)
                           (#{1+}# #{i 1397}#)))))))
                (begin (#{f 1395}# #{symnames 1385}# 0)))))
          (#{search-vector-rib 1360}#
            (lambda (#{sym 1406}#
                     #{subst 1407}#
                     #{marks 1408}#
                     #{symnames 1409}#
                     #{ribcage 1410}#)
              (begin
                (let ((#{n 1417}# (vector-length #{symnames 1409}#)))
                  (letrec*
                    ((#{f 1420}#
                       (lambda (#{i 1421}#)
                         (if (= #{i 1421}# #{n 1417}#)
                           (#{search 1356}#
                             #{sym 1406}#
                             (cdr #{subst 1407}#)
                             #{marks 1408}#)
                           (if (if (eq? (vector-ref
                                          #{symnames 1409}#
                                          #{i 1421}#)
                                        #{sym 1406}#)
                                 (#{same-marks? 395}#
                                   #{marks 1408}#
                                   (vector-ref
                                     (#{ribcage-marks 367}# #{ribcage 1410}#)
                                     #{i 1421}#))
                                 #f)
                             (values
                               (vector-ref
                                 (#{ribcage-labels 369}# #{ribcage 1410}#)
                                 #{i 1421}#)
                               #{marks 1408}#)
                             (#{f 1420}# (#{1+}# #{i 1421}#)))))))
                    (begin (#{f 1420}# 0))))))))
         (begin
           (if (symbol? #{id 1350}#)
             (begin
               (let ((#{t 1433}#
                       (#{search 1356}#
                         #{id 1350}#
                         (cdr #{w 1351}#)
                         (car #{w 1351}#))))
                 (if #{t 1433}# #{t 1433}# #{id 1350}#)))
             (if (#{syntax-object? 309}# #{id 1350}#)
               (begin
                 (let ((#{id 1442}#
                         (#{syntax-object-expression 311}# #{id 1350}#))
                       (#{w1 1443}#
                         (#{syntax-object-wrap 313}# #{id 1350}#)))
                   (begin
                     (let ((#{marks 1445}#
                             (#{join-marks 393}#
                               (car #{w 1351}#)
                               (car #{w1 1443}#))))
                       (call-with-values
                         (lambda ()
                           (#{search 1356}#
                             #{id 1442}#
                             (cdr #{w 1351}#)
                             #{marks 1445}#))
                         (lambda (#{new-id 1449}# #{marks 1450}#)
                           (begin
                             (let ((#{t 1455}# #{new-id 1449}#))
                               (if #{t 1455}#
                                 #{t 1455}#
                                 (begin
                                   (let ((#{t 1458}#
                                           (#{search 1356}#
                                             #{id 1442}#
                                             (cdr #{w1 1443}#)
                                             #{marks 1450}#)))
                                     (if #{t 1458}#
                                       #{t 1458}#
                                       #{id 1442}#))))))))))))
               (syntax-violation
                 'id-var-name
                 "invalid id"
                 #{id 1350}#)))))))
   (#{free-id=? 399}#
     (lambda (#{i 1463}# #{j 1464}#)
       (if (eq? (begin
                  (let ((#{x 1470}# #{i 1463}#))
                    (if (#{syntax-object? 309}# #{x 1470}#)
                      (#{syntax-object-expression 311}# #{x 1470}#)
                      #{x 1470}#)))
                (begin
                  (let ((#{x 1473}# #{j 1464}#))
                    (if (#{syntax-object? 309}# #{x 1473}#)
                      (#{syntax-object-expression 311}# #{x 1473}#)
                      #{x 1473}#))))
         (eq? (#{id-var-name 397}# #{i 1463}# '(()))
              (#{id-var-name 397}# #{j 1464}# '(())))
         #f)))
   (#{bound-id=? 401}#
     (lambda (#{i 1477}# #{j 1478}#)
       (if (if (#{syntax-object? 309}# #{i 1477}#)
             (#{syntax-object? 309}# #{j 1478}#)
             #f)
         (if (eq? (#{syntax-object-expression 311}# #{i 1477}#)
                  (#{syntax-object-expression 311}# #{j 1478}#))
           (#{same-marks? 395}#
             (car (#{syntax-object-wrap 313}# #{i 1477}#))
             (car (#{syntax-object-wrap 313}# #{j 1478}#)))
           #f)
         (eq? #{i 1477}# #{j 1478}#))))
   (#{valid-bound-ids? 403}#
     (lambda (#{ids 1487}#)
       (if (letrec*
             ((#{all-ids? 1492}#
                (lambda (#{ids 1493}#)
                  (begin
                    (let ((#{t 1496}# (null? #{ids 1493}#)))
                      (if #{t 1496}#
                        #{t 1496}#
                        (if (#{id? 343}# (car #{ids 1493}#))
                          (#{all-ids? 1492}# (cdr #{ids 1493}#))
                          #f)))))))
             (begin (#{all-ids? 1492}# #{ids 1487}#)))
         (#{distinct-bound-ids? 405}# #{ids 1487}#)
         #f)))
   (#{distinct-bound-ids? 405}#
     (lambda (#{ids 1501}#)
       (letrec*
         ((#{distinct? 1505}#
            (lambda (#{ids 1506}#)
              (begin
                (let ((#{t 1509}# (null? #{ids 1506}#)))
                  (if #{t 1509}#
                    #{t 1509}#
                    (if (not (#{bound-id-member? 407}#
                               (car #{ids 1506}#)
                               (cdr #{ids 1506}#)))
                      (#{distinct? 1505}# (cdr #{ids 1506}#))
                      #f)))))))
         (begin (#{distinct? 1505}# #{ids 1501}#)))))
   (#{bound-id-member? 407}#
     (lambda (#{x 1513}# #{list 1514}#)
       (if (not (null? #{list 1514}#))
         (begin
           (let ((#{t 1521}#
                   (#{bound-id=? 401}#
                     #{x 1513}#
                     (car #{list 1514}#))))
             (if #{t 1521}#
               #{t 1521}#
               (#{bound-id-member? 407}#
                 #{x 1513}#
                 (cdr #{list 1514}#)))))
         #f)))
   (#{wrap 409}#
     (lambda (#{x 1523}# #{w 1524}# #{defmod 1525}#)
       (if (if (null? (car #{w 1524}#))
             (null? (cdr #{w 1524}#))
             #f)
         #{x 1523}#
         (if (#{syntax-object? 309}# #{x 1523}#)
           (#{make-syntax-object 307}#
             (#{syntax-object-expression 311}# #{x 1523}#)
             (#{join-wraps 391}#
               #{w 1524}#
               (#{syntax-object-wrap 313}# #{x 1523}#))
             (#{syntax-object-module 315}# #{x 1523}#))
           (if (null? #{x 1523}#)
             #{x 1523}#
             (#{make-syntax-object 307}#
               #{x 1523}#
               #{w 1524}#
               #{defmod 1525}#))))))
   (#{source-wrap 411}#
     (lambda (#{x 1540}#
              #{w 1541}#
              #{s 1542}#
              #{defmod 1543}#)
       (#{wrap 409}#
         (#{decorate-source 261}# #{x 1540}# #{s 1542}#)
         #{w 1541}#
         #{defmod 1543}#)))
   (#{chi-sequence 413}#
     (lambda (#{body 1548}#
              #{r 1549}#
              #{w 1550}#
              #{s 1551}#
              #{mod 1552}#)
       (#{build-sequence 297}#
         #{s 1551}#
         (letrec*
           ((#{dobody 1563}#
              (lambda (#{body 1564}#
                       #{r 1565}#
                       #{w 1566}#
                       #{mod 1567}#)
                (if (null? #{body 1564}#)
                  '()
                  (begin
                    (let ((#{first 1569}#
                            (#{chi 423}#
                              (car #{body 1564}#)
                              #{r 1565}#
                              #{w 1566}#
                              #{mod 1567}#)))
                      (cons #{first 1569}#
                            (#{dobody 1563}#
                              (cdr #{body 1564}#)
                              #{r 1565}#
                              #{w 1566}#
                              #{mod 1567}#))))))))
           (begin
             (#{dobody 1563}#
               #{body 1548}#
               #{r 1549}#
               #{w 1550}#
               #{mod 1552}#))))))
   (#{chi-top-sequence 415}#
     (lambda (#{body 1570}#
              #{r 1571}#
              #{w 1572}#
              #{s 1573}#
              #{m 1574}#
              #{esew 1575}#
              #{mod 1576}#)
       (letrec*
         ((#{scan 1585}#
            (lambda (#{body 1586}#
                     #{r 1587}#
                     #{w 1588}#
                     #{s 1589}#
                     #{m 1590}#
                     #{esew 1591}#
                     #{mod 1592}#
                     #{exps 1593}#)
              (if (null? #{body 1586}#)
                #{exps 1593}#
                (call-with-values
                  (lambda ()
                    (call-with-values
                      (lambda ()
                        (begin
                          (let ((#{e 1606}# (car #{body 1586}#)))
                            (#{syntax-type 421}#
                              #{e 1606}#
                              #{r 1587}#
                              #{w 1588}#
                              (begin
                                (let ((#{t 1609}#
                                        (#{source-annotation 324}#
                                          #{e 1606}#)))
                                  (if #{t 1609}# #{t 1609}# #{s 1589}#)))
                              #f
                              #{mod 1592}#
                              #f))))
                      (lambda (#{type 1611}#
                               #{value 1612}#
                               #{e 1613}#
                               #{w 1614}#
                               #{s 1615}#
                               #{mod 1616}#)
                        (if (memv #{type 1611}# '(begin-form))
                          (let ((#{tmp 1624}# #{e 1613}#))
                            (let ((#{tmp 1625}#
                                    ($sc-dispatch #{tmp 1624}# '(_))))
                              (if #{tmp 1625}#
                                (@apply (lambda () #{exps 1593}#) #{tmp 1625}#)
                                (let ((#{tmp 1626}#
                                        ($sc-dispatch
                                          #{tmp 1624}#
                                          '(_ any . each-any))))
                                  (if #{tmp 1626}#
                                    (@apply
                                      (lambda (#{e1 1629}# #{e2 1630}#)
                                        (#{scan 1585}#
                                          (cons #{e1 1629}# #{e2 1630}#)
                                          #{r 1587}#
                                          #{w 1614}#
                                          #{s 1615}#
                                          #{m 1590}#
                                          #{esew 1591}#
                                          #{mod 1616}#
                                          #{exps 1593}#))
                                      #{tmp 1626}#)
                                    (syntax-violation
                                      #f
                                      "source expression failed to match any pattern"
                                      #{tmp 1624}#))))))
                          (if (memv #{type 1611}# '(local-syntax-form))
                            (#{chi-local-syntax 433}#
                              #{value 1612}#
                              #{e 1613}#
                              #{r 1587}#
                              #{w 1614}#
                              #{s 1615}#
                              #{mod 1616}#
                              (lambda (#{body 1633}#
                                       #{r 1634}#
                                       #{w 1635}#
                                       #{s 1636}#
                                       #{mod 1637}#)
                                (#{scan 1585}#
                                  #{body 1633}#
                                  #{r 1634}#
                                  #{w 1635}#
                                  #{s 1636}#
                                  #{m 1590}#
                                  #{esew 1591}#
                                  #{mod 1637}#
                                  #{exps 1593}#)))
                            (if (memv #{type 1611}# '(eval-when-form))
                              (let ((#{tmp 1644}# #{e 1613}#))
                                (let ((#{tmp 1645}#
                                        ($sc-dispatch
                                          #{tmp 1644}#
                                          '(_ each-any any . each-any))))
                                  (if #{tmp 1645}#
                                    (@apply
                                      (lambda (#{x 1649}#
                                               #{e1 1650}#
                                               #{e2 1651}#)
                                        (begin
                                          (let ((#{when-list 1654}#
                                                  (#{chi-when-list 419}#
                                                    #{e 1613}#
                                                    #{x 1649}#
                                                    #{w 1614}#))
                                                (#{body 1655}#
                                                  (cons #{e1 1650}#
                                                        #{e2 1651}#)))
                                            (if (eq? #{m 1590}# 'e)
                                              (if (memq 'eval
                                                        #{when-list 1654}#)
                                                (#{scan 1585}#
                                                  #{body 1655}#
                                                  #{r 1587}#
                                                  #{w 1614}#
                                                  #{s 1615}#
                                                  (if (memq 'expand
                                                            #{when-list 1654}#)
                                                    'c&e
                                                    'e)
                                                  '(eval)
                                                  #{mod 1616}#
                                                  #{exps 1593}#)
                                                (begin
                                                  (if (memq 'expand
                                                            #{when-list 1654}#)
                                                    (#{top-level-eval-hook 252}#
                                                      (#{chi-top-sequence 415}#
                                                        #{body 1655}#
                                                        #{r 1587}#
                                                        #{w 1614}#
                                                        #{s 1615}#
                                                        'e
                                                        '(eval)
                                                        #{mod 1616}#)
                                                      #{mod 1616}#))
                                                  #{exps 1593}#))
                                              (if (memq 'load
                                                        #{when-list 1654}#)
                                                (if (begin
                                                      (let ((#{t 1664}#
                                                              (memq 'compile
                                                                    #{when-list 1654}#)))
                                                        (if #{t 1664}#
                                                          #{t 1664}#
                                                          (begin
                                                            (let ((#{t 1667}#
                                                                    (memq 'expand
                                                                          #{when-list 1654}#)))
                                                              (if #{t 1667}#
                                                                #{t 1667}#
                                                                (if (eq? #{m 1590}#
                                                                         'c&e)
                                                                  (memq 'eval
                                                                        #{when-list 1654}#)
                                                                  #f)))))))
                                                  (#{scan 1585}#
                                                    #{body 1655}#
                                                    #{r 1587}#
                                                    #{w 1614}#
                                                    #{s 1615}#
                                                    'c&e
                                                    '(compile load)
                                                    #{mod 1616}#
                                                    #{exps 1593}#)
                                                  (if (memq #{m 1590}#
                                                            '(c c&e))
                                                    (#{scan 1585}#
                                                      #{body 1655}#
                                                      #{r 1587}#
                                                      #{w 1614}#
                                                      #{s 1615}#
                                                      'c
                                                      '(load)
                                                      #{mod 1616}#
                                                      #{exps 1593}#)
                                                    #{exps 1593}#))
                                                (if (begin
                                                      (let ((#{t 1675}#
                                                              (memq 'compile
                                                                    #{when-list 1654}#)))
                                                        (if #{t 1675}#
                                                          #{t 1675}#
                                                          (begin
                                                            (let ((#{t 1678}#
                                                                    (memq 'expand
                                                                          #{when-list 1654}#)))
                                                              (if #{t 1678}#
                                                                #{t 1678}#
                                                                (if (eq? #{m 1590}#
                                                                         'c&e)
                                                                  (memq 'eval
                                                                        #{when-list 1654}#)
                                                                  #f)))))))
                                                  (begin
                                                    (#{top-level-eval-hook 252}#
                                                      (#{chi-top-sequence 415}#
                                                        #{body 1655}#
                                                        #{r 1587}#
                                                        #{w 1614}#
                                                        #{s 1615}#
                                                        'e
                                                        '(eval)
                                                        #{mod 1616}#)
                                                      #{mod 1616}#)
                                                    #{exps 1593}#)
                                                  #{exps 1593}#))))))
                                      #{tmp 1645}#)
                                    (syntax-violation
                                      #f
                                      "source expression failed to match any pattern"
                                      #{tmp 1644}#))))
                              (if (memv #{type 1611}# '(define-syntax-form))
                                (begin
                                  (let ((#{n 1686}#
                                          (#{id-var-name 397}#
                                            #{value 1612}#
                                            #{w 1614}#))
                                        (#{r 1687}#
                                          (#{macros-only-env 335}#
                                            #{r 1587}#)))
                                    (if (memv #{m 1590}# '(c))
                                      (if (memq 'compile #{esew 1591}#)
                                        (begin
                                          (let ((#{e 1690}#
                                                  (#{chi-install-global 417}#
                                                    #{n 1686}#
                                                    (#{chi 423}#
                                                      #{e 1613}#
                                                      #{r 1687}#
                                                      #{w 1614}#
                                                      #{mod 1616}#))))
                                            (begin
                                              (#{top-level-eval-hook 252}#
                                                #{e 1690}#
                                                #{mod 1616}#)
                                              (if (memq 'load #{esew 1591}#)
                                                (cons #{e 1690}# #{exps 1593}#)
                                                #{exps 1593}#))))
                                        (if (memq 'load #{esew 1591}#)
                                          (cons (#{chi-install-global 417}#
                                                  #{n 1686}#
                                                  (#{chi 423}#
                                                    #{e 1613}#
                                                    #{r 1687}#
                                                    #{w 1614}#
                                                    #{mod 1616}#))
                                                #{exps 1593}#)
                                          #{exps 1593}#))
                                      (if (memv #{m 1590}# '(c&e))
                                        (begin
                                          (let ((#{e 1693}#
                                                  (#{chi-install-global 417}#
                                                    #{n 1686}#
                                                    (#{chi 423}#
                                                      #{e 1613}#
                                                      #{r 1687}#
                                                      #{w 1614}#
                                                      #{mod 1616}#))))
                                            (begin
                                              (#{top-level-eval-hook 252}#
                                                #{e 1693}#
                                                #{mod 1616}#)
                                              (cons #{e 1693}#
                                                    #{exps 1593}#))))
                                        (begin
                                          (if (memq 'eval #{esew 1591}#)
                                            (#{top-level-eval-hook 252}#
                                              (#{chi-install-global 417}#
                                                #{n 1686}#
                                                (#{chi 423}#
                                                  #{e 1613}#
                                                  #{r 1687}#
                                                  #{w 1614}#
                                                  #{mod 1616}#))
                                              #{mod 1616}#))
                                          #{exps 1593}#)))))
                                (if (memv #{type 1611}# '(define-form))
                                  (begin
                                    (let ((#{n 1698}#
                                            (#{id-var-name 397}#
                                              #{value 1612}#
                                              #{w 1614}#)))
                                      (begin
                                        (let ((#{type 1700}#
                                                (car (#{lookup 337}#
                                                       #{n 1698}#
                                                       #{r 1587}#
                                                       #{mod 1616}#))))
                                          (if (memv #{type 1700}#
                                                    '(global
                                                       core
                                                       macro
                                                       module-ref))
                                            (begin
                                              (if (if (memq #{m 1590}#
                                                            '(c c&e))
                                                    (if (not (module-local-variable
                                                               (current-module)
                                                               #{n 1698}#))
                                                      (current-module)
                                                      #f)
                                                    #f)
                                                (begin
                                                  (let ((#{old 1707}#
                                                          (module-variable
                                                            (current-module)
                                                            #{n 1698}#)))
                                                    (if (if (variable?
                                                              #{old 1707}#)
                                                          (variable-bound?
                                                            #{old 1707}#)
                                                          #f)
                                                      (module-define!
                                                        (current-module)
                                                        #{n 1698}#
                                                        (variable-ref
                                                          #{old 1707}#))
                                                      (module-add!
                                                        (current-module)
                                                        #{n 1698}#
                                                        (make-undefined-variable))))))
                                              (cons (if (eq? #{m 1590}# 'c&e)
                                                      (begin
                                                        (let ((#{x 1711}#
                                                                (#{build-global-definition 283}#
                                                                  #{s 1615}#
                                                                  #{n 1698}#
                                                                  (#{chi 423}#
                                                                    #{e 1613}#
                                                                    #{r 1587}#
                                                                    #{w 1614}#
                                                                    #{mod 1616}#))))
                                                          (begin
                                                            (#{top-level-eval-hook 252}#
                                                              #{x 1711}#
                                                              #{mod 1616}#)
                                                            #{x 1711}#)))
                                                      (lambda ()
                                                        (#{build-global-definition 283}#
                                                          #{s 1615}#
                                                          #{n 1698}#
                                                          (#{chi 423}#
                                                            #{e 1613}#
                                                            #{r 1587}#
                                                            #{w 1614}#
                                                            #{mod 1616}#))))
                                                    #{exps 1593}#))
                                            (if (memv #{type 1700}#
                                                      '(displaced-lexical))
                                              (syntax-violation
                                                #f
                                                "identifier out of context"
                                                #{e 1613}#
                                                (#{wrap 409}#
                                                  #{value 1612}#
                                                  #{w 1614}#
                                                  #{mod 1616}#))
                                              (syntax-violation
                                                #f
                                                "cannot define keyword at top level"
                                                #{e 1613}#
                                                (#{wrap 409}#
                                                  #{value 1612}#
                                                  #{w 1614}#
                                                  #{mod 1616}#))))))))
                                  (cons (if (eq? #{m 1590}# 'c&e)
                                          (begin
                                            (let ((#{x 1716}#
                                                    (#{chi-expr 425}#
                                                      #{type 1611}#
                                                      #{value 1612}#
                                                      #{e 1613}#
                                                      #{r 1587}#
                                                      #{w 1614}#
                                                      #{s 1615}#
                                                      #{mod 1616}#)))
                                              (begin
                                                (#{top-level-eval-hook 252}#
                                                  #{x 1716}#
                                                  #{mod 1616}#)
                                                #{x 1716}#)))
                                          (lambda ()
                                            (#{chi-expr 425}#
                                              #{type 1611}#
                                              #{value 1612}#
                                              #{e 1613}#
                                              #{r 1587}#
                                              #{w 1614}#
                                              #{s 1615}#
                                              #{mod 1616}#)))
                                        #{exps 1593}#)))))))))
                  (lambda (#{exps 1717}#)
                    (#{scan 1585}#
                      (cdr #{body 1586}#)
                      #{r 1587}#
                      #{w 1588}#
                      #{s 1589}#
                      #{m 1590}#
                      #{esew 1591}#
                      #{mod 1592}#
                      #{exps 1717}#)))))))
         (begin
           (call-with-values
             (lambda ()
               (#{scan 1585}#
                 #{body 1570}#
                 #{r 1571}#
                 #{w 1572}#
                 #{s 1573}#
                 #{m 1574}#
                 #{esew 1575}#
                 #{mod 1576}#
                 '()))
             (lambda (#{exps 1719}#)
               (if (null? #{exps 1719}#)
                 (#{build-void 265}# #{s 1573}#)
                 (#{build-sequence 297}#
                   #{s 1573}#
                   (letrec*
                     ((#{lp 1724}#
                        (lambda (#{in 1725}# #{out 1726}#)
                          (if (null? #{in 1725}#)
                            #{out 1726}#
                            (begin
                              (let ((#{e 1728}# (car #{in 1725}#)))
                                (#{lp 1724}#
                                  (cdr #{in 1725}#)
                                  (cons (if (procedure? #{e 1728}#)
                                          (#{e 1728}#)
                                          #{e 1728}#)
                                        #{out 1726}#))))))))
                     (begin (#{lp 1724}# #{exps 1719}# '())))))))))))
   (#{chi-install-global 417}#
     (lambda (#{name 1729}# #{e 1730}#)
       (#{build-global-definition 283}#
         #f
         #{name 1729}#
         (#{build-primcall 291}#
           #f
           'make-syntax-transformer
           (list (#{build-data 295}# #f #{name 1729}#)
                 (#{build-data 295}# #f 'macro)
                 #{e 1730}#)))))
   (#{chi-when-list 419}#
     (lambda (#{e 1737}# #{when-list 1738}# #{w 1739}#)
       (letrec*
         ((#{f 1746}#
            (lambda (#{when-list 1747}# #{situations 1748}#)
              (if (null? #{when-list 1747}#)
                #{situations 1748}#
                (#{f 1746}#
                  (cdr #{when-list 1747}#)
                  (cons (begin
                          (let ((#{x 1750}# (car #{when-list 1747}#)))
                            (if (#{free-id=? 399}#
                                  #{x 1750}#
                                  '#(syntax-object
                                     compile
                                     ((top)
                                      #(ribcage () () ())
                                      #(ribcage () () ())
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("i1749"))
                                      #(ribcage () () ())
                                      #(ribcage
                                        #(f when-list situations)
                                        #((top) (top) (top))
                                        #("i1743" "i1744" "i1745"))
                                      #(ribcage () () ())
                                      #(ribcage
                                        #(e when-list w)
                                        #((top) (top) (top))
                                        #("i1740" "i1741" "i1742"))
                                      #(ribcage
                                        (lambda-var-list
                                          gen-var
                                          strip
                                          chi-lambda-case
                                          lambda*-formals
                                          chi-simple-lambda
                                          lambda-formals
                                          ellipsis?
                                          chi-void
                                          eval-local-transformer
                                          chi-local-syntax
                                          chi-body
                                          chi-macro
                                          chi-call
                                          chi-expr
                                          chi
                                          syntax-type
                                          chi-when-list
                                          chi-install-global
                                          chi-top-sequence
                                          chi-sequence
                                          source-wrap
                                          wrap
                                          bound-id-member?
                                          distinct-bound-ids?
                                          valid-bound-ids?
                                          bound-id=?
                                          free-id=?
                                          id-var-name
                                          same-marks?
                                          join-marks
                                          join-wraps
                                          smart-append
                                          make-binding-wrap
                                          extend-ribcage!
                                          make-empty-ribcage
                                          new-mark
                                          anti-mark
                                          the-anti-mark
                                          top-marked?
                                          top-wrap
                                          empty-wrap
                                          set-ribcage-labels!
                                          set-ribcage-marks!
                                          set-ribcage-symnames!
                                          ribcage-labels
                                          ribcage-marks
                                          ribcage-symnames
                                          ribcage?
                                          make-ribcage
                                          gen-labels
                                          gen-label
                                          make-rename
                                          rename-marks
                                          rename-new
                                          rename-old
                                          subst-rename?
                                          wrap-subst
                                          wrap-marks
                                          make-wrap
                                          id-sym-name&marks
                                          id-sym-name
                                          id?
                                          nonsymbol-id?
                                          global-extend
                                          lookup
                                          macros-only-env
                                          extend-var-env
                                          extend-env
                                          null-env
                                          binding-value
                                          binding-type
                                          make-binding
                                          arg-check
                                          source-annotation
                                          no-source
                                          set-syntax-object-module!
                                          set-syntax-object-wrap!
                                          set-syntax-object-expression!
                                          syntax-object-module
                                          syntax-object-wrap
                                          syntax-object-expression
                                          syntax-object?
                                          make-syntax-object
                                          build-lexical-var
                                          build-letrec
                                          build-named-let
                                          build-let
                                          build-sequence
                                          build-data
                                          build-primref
                                          build-primcall
                                          build-lambda-case
                                          build-case-lambda
                                          build-simple-lambda
                                          build-global-definition
                                          build-global-assignment
                                          build-global-reference
                                          analyze-variable
                                          build-lexical-assignment
                                          build-lexical-reference
                                          build-dynlet
                                          build-conditional
                                          build-call
                                          build-void
                                          maybe-name-value!
                                          decorate-source
                                          get-global-definition-hook
                                          put-global-definition-hook
                                          gensym-hook
                                          local-eval-hook
                                          top-level-eval-hook
                                          fx<
                                          fx=
                                          fx-
                                          fx+
                                          set-lambda-meta!
                                          lambda-meta
                                          lambda?
                                          make-dynlet
                                          make-letrec
                                          make-let
                                          make-lambda-case
                                          make-lambda
                                          make-sequence
                                          make-primcall
                                          make-call
                                          make-conditional
                                          make-toplevel-define
                                          make-toplevel-set
                                          make-toplevel-ref
                                          make-module-set
                                          make-module-ref
                                          make-lexical-set
                                          make-lexical-ref
                                          make-primitive-ref
                                          make-const
                                          make-void)
                                        ((top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top))
                                        ("i452"
                                         "i450"
                                         "i448"
                                         "i446"
                                         "i444"
                                         "i442"
                                         "i440"
                                         "i438"
                                         "i436"
                                         "i434"
                                         "i432"
                                         "i430"
                                         "i428"
                                         "i426"
                                         "i424"
                                         "i422"
                                         "i420"
                                         "i418"
                                         "i416"
                                         "i414"
                                         "i412"
                                         "i410"
                                         "i408"
                                         "i406"
                                         "i404"
                                         "i402"
                                         "i400"
                                         "i398"
                                         "i396"
                                         "i394"
                                         "i392"
                                         "i390"
                                         "i388"
                                         "i386"
                                         "i384"
                                         "i383"
                                         "i382"
                                         "i380"
                                         "i379"
                                         "i378"
                                         "i377"
                                         "i376"
                                         "i374"
                                         "i372"
                                         "i370"
                                         "i368"
                                         "i366"
                                         "i364"
                                         "i362"
                                         "i360"
                                         "i357"
                                         "i355"
                                         "i354"
                                         "i353"
                                         "i352"
                                         "i351"
                                         "i350"
                                         "i349"
                                         "i348"
                                         "i347"
                                         "i345"
                                         "i344"
                                         "i342"
                                         "i340"
                                         "i338"
                                         "i336"
                                         "i334"
                                         "i332"
                                         "i330"
                                         "i329"
                                         "i328"
                                         "i327"
                                         "i326"
                                         "i325"
                                         "i323"
                                         "i322"
                                         "i320"
                                         "i318"
                                         "i316"
                                         "i314"
                                         "i312"
                                         "i310"
                                         "i308"
                                         "i306"
                                         "i304"
                                         "i302"
                                         "i300"
                                         "i298"
                                         "i296"
                                         "i294"
                                         "i292"
                                         "i290"
                                         "i288"
                                         "i286"
                                         "i284"
                                         "i282"
                                         "i280"
                                         "i278"
                                         "i276"
                                         "i274"
                                         "i272"
                                         "i270"
                                         "i268"
                                         "i266"
                                         "i264"
                                         "i262"
                                         "i260"
                                         "i258"
                                         "i256"
                                         "i255"
                                         "i253"
                                         "i251"
                                         "i250"
                                         "i249"
                                         "i248"
                                         "i247"
                                         "i245"
                                         "i243"
                                         "i241"
                                         "i238"
                                         "i236"
                                         "i234"
                                         "i232"
                                         "i230"
                                         "i228"
                                         "i226"
                                         "i224"
                                         "i222"
                                         "i220"
                                         "i218"
                                         "i216"
                                         "i214"
                                         "i212"
                                         "i210"
                                         "i208"
                                         "i206"
                                         "i204"
                                         "i202"))
                                      #(ribcage
                                        (define-structure
                                          define-expansion-accessors
                                          define-expansion-constructors)
                                        ((top) (top) (top))
                                        ("i40" "i39" "i38")))
                                     (hygiene guile)))
                              'compile
                              (if (#{free-id=? 399}#
                                    #{x 1750}#
                                    '#(syntax-object
                                       load
                                       ((top)
                                        #(ribcage () () ())
                                        #(ribcage () () ())
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i1749"))
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(f when-list situations)
                                          #((top) (top) (top))
                                          #("i1743" "i1744" "i1745"))
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(e when-list w)
                                          #((top) (top) (top))
                                          #("i1740" "i1741" "i1742"))
                                        #(ribcage
                                          (lambda-var-list
                                            gen-var
                                            strip
                                            chi-lambda-case
                                            lambda*-formals
                                            chi-simple-lambda
                                            lambda-formals
                                            ellipsis?
                                            chi-void
                                            eval-local-transformer
                                            chi-local-syntax
                                            chi-body
                                            chi-macro
                                            chi-call
                                            chi-expr
                                            chi
                                            syntax-type
                                            chi-when-list
                                            chi-install-global
                                            chi-top-sequence
                                            chi-sequence
                                            source-wrap
                                            wrap
                                            bound-id-member?
                                            distinct-bound-ids?
                                            valid-bound-ids?
                                            bound-id=?
                                            free-id=?
                                            id-var-name
                                            same-marks?
                                            join-marks
                                            join-wraps
                                            smart-append
                                            make-binding-wrap
                                            extend-ribcage!
                                            make-empty-ribcage
                                            new-mark
                                            anti-mark
                                            the-anti-mark
                                            top-marked?
                                            top-wrap
                                            empty-wrap
                                            set-ribcage-labels!
                                            set-ribcage-marks!
                                            set-ribcage-symnames!
                                            ribcage-labels
                                            ribcage-marks
                                            ribcage-symnames
                                            ribcage?
                                            make-ribcage
                                            gen-labels
                                            gen-label
                                            make-rename
                                            rename-marks
                                            rename-new
                                            rename-old
                                            subst-rename?
                                            wrap-subst
                                            wrap-marks
                                            make-wrap
                                            id-sym-name&marks
                                            id-sym-name
                                            id?
                                            nonsymbol-id?
                                            global-extend
                                            lookup
                                            macros-only-env
                                            extend-var-env
                                            extend-env
                                            null-env
                                            binding-value
                                            binding-type
                                            make-binding
                                            arg-check
                                            source-annotation
                                            no-source
                                            set-syntax-object-module!
                                            set-syntax-object-wrap!
                                            set-syntax-object-expression!
                                            syntax-object-module
                                            syntax-object-wrap
                                            syntax-object-expression
                                            syntax-object?
                                            make-syntax-object
                                            build-lexical-var
                                            build-letrec
                                            build-named-let
                                            build-let
                                            build-sequence
                                            build-data
                                            build-primref
                                            build-primcall
                                            build-lambda-case
                                            build-case-lambda
                                            build-simple-lambda
                                            build-global-definition
                                            build-global-assignment
                                            build-global-reference
                                            analyze-variable
                                            build-lexical-assignment
                                            build-lexical-reference
                                            build-dynlet
                                            build-conditional
                                            build-call
                                            build-void
                                            maybe-name-value!
                                            decorate-source
                                            get-global-definition-hook
                                            put-global-definition-hook
                                            gensym-hook
                                            local-eval-hook
                                            top-level-eval-hook
                                            fx<
                                            fx=
                                            fx-
                                            fx+
                                            set-lambda-meta!
                                            lambda-meta
                                            lambda?
                                            make-dynlet
                                            make-letrec
                                            make-let
                                            make-lambda-case
                                            make-lambda
                                            make-sequence
                                            make-primcall
                                            make-call
                                            make-conditional
                                            make-toplevel-define
                                            make-toplevel-set
                                            make-toplevel-ref
                                            make-module-set
                                            make-module-ref
                                            make-lexical-set
                                            make-lexical-ref
                                            make-primitive-ref
                                            make-const
                                            make-void)
                                          ((top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top))
                                          ("i452"
                                           "i450"
                                           "i448"
                                           "i446"
                                           "i444"
                                           "i442"
                                           "i440"
                                           "i438"
                                           "i436"
                                           "i434"
                                           "i432"
                                           "i430"
                                           "i428"
                                           "i426"
                                           "i424"
                                           "i422"
                                           "i420"
                                           "i418"
                                           "i416"
                                           "i414"
                                           "i412"
                                           "i410"
                                           "i408"
                                           "i406"
                                           "i404"
                                           "i402"
                                           "i400"
                                           "i398"
                                           "i396"
                                           "i394"
                                           "i392"
                                           "i390"
                                           "i388"
                                           "i386"
                                           "i384"
                                           "i383"
                                           "i382"
                                           "i380"
                                           "i379"
                                           "i378"
                                           "i377"
                                           "i376"
                                           "i374"
                                           "i372"
                                           "i370"
                                           "i368"
                                           "i366"
                                           "i364"
                                           "i362"
                                           "i360"
                                           "i357"
                                           "i355"
                                           "i354"
                                           "i353"
                                           "i352"
                                           "i351"
                                           "i350"
                                           "i349"
                                           "i348"
                                           "i347"
                                           "i345"
                                           "i344"
                                           "i342"
                                           "i340"
                                           "i338"
                                           "i336"
                                           "i334"
                                           "i332"
                                           "i330"
                                           "i329"
                                           "i328"
                                           "i327"
                                           "i326"
                                           "i325"
                                           "i323"
                                           "i322"
                                           "i320"
                                           "i318"
                                           "i316"
                                           "i314"
                                           "i312"
                                           "i310"
                                           "i308"
                                           "i306"
                                           "i304"
                                           "i302"
                                           "i300"
                                           "i298"
                                           "i296"
                                           "i294"
                                           "i292"
                                           "i290"
                                           "i288"
                                           "i286"
                                           "i284"
                                           "i282"
                                           "i280"
                                           "i278"
                                           "i276"
                                           "i274"
                                           "i272"
                                           "i270"
                                           "i268"
                                           "i266"
                                           "i264"
                                           "i262"
                                           "i260"
                                           "i258"
                                           "i256"
                                           "i255"
                                           "i253"
                                           "i251"
                                           "i250"
                                           "i249"
                                           "i248"
                                           "i247"
                                           "i245"
                                           "i243"
                                           "i241"
                                           "i238"
                                           "i236"
                                           "i234"
                                           "i232"
                                           "i230"
                                           "i228"
                                           "i226"
                                           "i224"
                                           "i222"
                                           "i220"
                                           "i218"
                                           "i216"
                                           "i214"
                                           "i212"
                                           "i210"
                                           "i208"
                                           "i206"
                                           "i204"
                                           "i202"))
                                        #(ribcage
                                          (define-structure
                                            define-expansion-accessors
                                            define-expansion-constructors)
                                          ((top) (top) (top))
                                          ("i40" "i39" "i38")))
                                       (hygiene guile)))
                                'load
                                (if (#{free-id=? 399}#
                                      #{x 1750}#
                                      '#(syntax-object
                                         eval
                                         ((top)
                                          #(ribcage () () ())
                                          #(ribcage () () ())
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i1749"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(f when-list situations)
                                            #((top) (top) (top))
                                            #("i1743" "i1744" "i1745"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(e when-list w)
                                            #((top) (top) (top))
                                            #("i1740" "i1741" "i1742"))
                                          #(ribcage
                                            (lambda-var-list
                                              gen-var
                                              strip
                                              chi-lambda-case
                                              lambda*-formals
                                              chi-simple-lambda
                                              lambda-formals
                                              ellipsis?
                                              chi-void
                                              eval-local-transformer
                                              chi-local-syntax
                                              chi-body
                                              chi-macro
                                              chi-call
                                              chi-expr
                                              chi
                                              syntax-type
                                              chi-when-list
                                              chi-install-global
                                              chi-top-sequence
                                              chi-sequence
                                              source-wrap
                                              wrap
                                              bound-id-member?
                                              distinct-bound-ids?
                                              valid-bound-ids?
                                              bound-id=?
                                              free-id=?
                                              id-var-name
                                              same-marks?
                                              join-marks
                                              join-wraps
                                              smart-append
                                              make-binding-wrap
                                              extend-ribcage!
                                              make-empty-ribcage
                                              new-mark
                                              anti-mark
                                              the-anti-mark
                                              top-marked?
                                              top-wrap
                                              empty-wrap
                                              set-ribcage-labels!
                                              set-ribcage-marks!
                                              set-ribcage-symnames!
                                              ribcage-labels
                                              ribcage-marks
                                              ribcage-symnames
                                              ribcage?
                                              make-ribcage
                                              gen-labels
                                              gen-label
                                              make-rename
                                              rename-marks
                                              rename-new
                                              rename-old
                                              subst-rename?
                                              wrap-subst
                                              wrap-marks
                                              make-wrap
                                              id-sym-name&marks
                                              id-sym-name
                                              id?
                                              nonsymbol-id?
                                              global-extend
                                              lookup
                                              macros-only-env
                                              extend-var-env
                                              extend-env
                                              null-env
                                              binding-value
                                              binding-type
                                              make-binding
                                              arg-check
                                              source-annotation
                                              no-source
                                              set-syntax-object-module!
                                              set-syntax-object-wrap!
                                              set-syntax-object-expression!
                                              syntax-object-module
                                              syntax-object-wrap
                                              syntax-object-expression
                                              syntax-object?
                                              make-syntax-object
                                              build-lexical-var
                                              build-letrec
                                              build-named-let
                                              build-let
                                              build-sequence
                                              build-data
                                              build-primref
                                              build-primcall
                                              build-lambda-case
                                              build-case-lambda
                                              build-simple-lambda
                                              build-global-definition
                                              build-global-assignment
                                              build-global-reference
                                              analyze-variable
                                              build-lexical-assignment
                                              build-lexical-reference
                                              build-dynlet
                                              build-conditional
                                              build-call
                                              build-void
                                              maybe-name-value!
                                              decorate-source
                                              get-global-definition-hook
                                              put-global-definition-hook
                                              gensym-hook
                                              local-eval-hook
                                              top-level-eval-hook
                                              fx<
                                              fx=
                                              fx-
                                              fx+
                                              set-lambda-meta!
                                              lambda-meta
                                              lambda?
                                              make-dynlet
                                              make-letrec
                                              make-let
                                              make-lambda-case
                                              make-lambda
                                              make-sequence
                                              make-primcall
                                              make-call
                                              make-conditional
                                              make-toplevel-define
                                              make-toplevel-set
                                              make-toplevel-ref
                                              make-module-set
                                              make-module-ref
                                              make-lexical-set
                                              make-lexical-ref
                                              make-primitive-ref
                                              make-const
                                              make-void)
                                            ((top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top))
                                            ("i452"
                                             "i450"
                                             "i448"
                                             "i446"
                                             "i444"
                                             "i442"
                                             "i440"
                                             "i438"
                                             "i436"
                                             "i434"
                                             "i432"
                                             "i430"
                                             "i428"
                                             "i426"
                                             "i424"
                                             "i422"
                                             "i420"
                                             "i418"
                                             "i416"
                                             "i414"
                                             "i412"
                                             "i410"
                                             "i408"
                                             "i406"
                                             "i404"
                                             "i402"
                                             "i400"
                                             "i398"
                                             "i396"
                                             "i394"
                                             "i392"
                                             "i390"
                                             "i388"
                                             "i386"
                                             "i384"
                                             "i383"
                                             "i382"
                                             "i380"
                                             "i379"
                                             "i378"
                                             "i377"
                                             "i376"
                                             "i374"
                                             "i372"
                                             "i370"
                                             "i368"
                                             "i366"
                                             "i364"
                                             "i362"
                                             "i360"
                                             "i357"
                                             "i355"
                                             "i354"
                                             "i353"
                                             "i352"
                                             "i351"
                                             "i350"
                                             "i349"
                                             "i348"
                                             "i347"
                                             "i345"
                                             "i344"
                                             "i342"
                                             "i340"
                                             "i338"
                                             "i336"
                                             "i334"
                                             "i332"
                                             "i330"
                                             "i329"
                                             "i328"
                                             "i327"
                                             "i326"
                                             "i325"
                                             "i323"
                                             "i322"
                                             "i320"
                                             "i318"
                                             "i316"
                                             "i314"
                                             "i312"
                                             "i310"
                                             "i308"
                                             "i306"
                                             "i304"
                                             "i302"
                                             "i300"
                                             "i298"
                                             "i296"
                                             "i294"
                                             "i292"
                                             "i290"
                                             "i288"
                                             "i286"
                                             "i284"
                                             "i282"
                                             "i280"
                                             "i278"
                                             "i276"
                                             "i274"
                                             "i272"
                                             "i270"
                                             "i268"
                                             "i266"
                                             "i264"
                                             "i262"
                                             "i260"
                                             "i258"
                                             "i256"
                                             "i255"
                                             "i253"
                                             "i251"
                                             "i250"
                                             "i249"
                                             "i248"
                                             "i247"
                                             "i245"
                                             "i243"
                                             "i241"
                                             "i238"
                                             "i236"
                                             "i234"
                                             "i232"
                                             "i230"
                                             "i228"
                                             "i226"
                                             "i224"
                                             "i222"
                                             "i220"
                                             "i218"
                                             "i216"
                                             "i214"
                                             "i212"
                                             "i210"
                                             "i208"
                                             "i206"
                                             "i204"
                                             "i202"))
                                          #(ribcage
                                            (define-structure
                                              define-expansion-accessors
                                              define-expansion-constructors)
                                            ((top) (top) (top))
                                            ("i40" "i39" "i38")))
                                         (hygiene guile)))
                                  'eval
                                  (if (#{free-id=? 399}#
                                        #{x 1750}#
                                        '#(syntax-object
                                           expand
                                           ((top)
                                            #(ribcage () () ())
                                            #(ribcage () () ())
                                            #(ribcage () () ())
                                            #(ribcage #(x) #((top)) #("i1749"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(f when-list situations)
                                              #((top) (top) (top))
                                              #("i1743" "i1744" "i1745"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(e when-list w)
                                              #((top) (top) (top))
                                              #("i1740" "i1741" "i1742"))
                                            #(ribcage
                                              (lambda-var-list
                                                gen-var
                                                strip
                                                chi-lambda-case
                                                lambda*-formals
                                                chi-simple-lambda
                                                lambda-formals
                                                ellipsis?
                                                chi-void
                                                eval-local-transformer
                                                chi-local-syntax
                                                chi-body
                                                chi-macro
                                                chi-call
                                                chi-expr
                                                chi
                                                syntax-type
                                                chi-when-list
                                                chi-install-global
                                                chi-top-sequence
                                                chi-sequence
                                                source-wrap
                                                wrap
                                                bound-id-member?
                                                distinct-bound-ids?
                                                valid-bound-ids?
                                                bound-id=?
                                                free-id=?
                                                id-var-name
                                                same-marks?
                                                join-marks
                                                join-wraps
                                                smart-append
                                                make-binding-wrap
                                                extend-ribcage!
                                                make-empty-ribcage
                                                new-mark
                                                anti-mark
                                                the-anti-mark
                                                top-marked?
                                                top-wrap
                                                empty-wrap
                                                set-ribcage-labels!
                                                set-ribcage-marks!
                                                set-ribcage-symnames!
                                                ribcage-labels
                                                ribcage-marks
                                                ribcage-symnames
                                                ribcage?
                                                make-ribcage
                                                gen-labels
                                                gen-label
                                                make-rename
                                                rename-marks
                                                rename-new
                                                rename-old
                                                subst-rename?
                                                wrap-subst
                                                wrap-marks
                                                make-wrap
                                                id-sym-name&marks
                                                id-sym-name
                                                id?
                                                nonsymbol-id?
                                                global-extend
                                                lookup
                                                macros-only-env
                                                extend-var-env
                                                extend-env
                                                null-env
                                                binding-value
                                                binding-type
                                                make-binding
                                                arg-check
                                                source-annotation
                                                no-source
                                                set-syntax-object-module!
                                                set-syntax-object-wrap!
                                                set-syntax-object-expression!
                                                syntax-object-module
                                                syntax-object-wrap
                                                syntax-object-expression
                                                syntax-object?
                                                make-syntax-object
                                                build-lexical-var
                                                build-letrec
                                                build-named-let
                                                build-let
                                                build-sequence
                                                build-data
                                                build-primref
                                                build-primcall
                                                build-lambda-case
                                                build-case-lambda
                                                build-simple-lambda
                                                build-global-definition
                                                build-global-assignment
                                                build-global-reference
                                                analyze-variable
                                                build-lexical-assignment
                                                build-lexical-reference
                                                build-dynlet
                                                build-conditional
                                                build-call
                                                build-void
                                                maybe-name-value!
                                                decorate-source
                                                get-global-definition-hook
                                                put-global-definition-hook
                                                gensym-hook
                                                local-eval-hook
                                                top-level-eval-hook
                                                fx<
                                                fx=
                                                fx-
                                                fx+
                                                set-lambda-meta!
                                                lambda-meta
                                                lambda?
                                                make-dynlet
                                                make-letrec
                                                make-let
                                                make-lambda-case
                                                make-lambda
                                                make-sequence
                                                make-primcall
                                                make-call
                                                make-conditional
                                                make-toplevel-define
                                                make-toplevel-set
                                                make-toplevel-ref
                                                make-module-set
                                                make-module-ref
                                                make-lexical-set
                                                make-lexical-ref
                                                make-primitive-ref
                                                make-const
                                                make-void)
                                              ((top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top))
                                              ("i452"
                                               "i450"
                                               "i448"
                                               "i446"
                                               "i444"
                                               "i442"
                                               "i440"
                                               "i438"
                                               "i436"
                                               "i434"
                                               "i432"
                                               "i430"
                                               "i428"
                                               "i426"
                                               "i424"
                                               "i422"
                                               "i420"
                                               "i418"
                                               "i416"
                                               "i414"
                                               "i412"
                                               "i410"
                                               "i408"
                                               "i406"
                                               "i404"
                                               "i402"
                                               "i400"
                                               "i398"
                                               "i396"
                                               "i394"
                                               "i392"
                                               "i390"
                                               "i388"
                                               "i386"
                                               "i384"
                                               "i383"
                                               "i382"
                                               "i380"
                                               "i379"
                                               "i378"
                                               "i377"
                                               "i376"
                                               "i374"
                                               "i372"
                                               "i370"
                                               "i368"
                                               "i366"
                                               "i364"
                                               "i362"
                                               "i360"
                                               "i357"
                                               "i355"
                                               "i354"
                                               "i353"
                                               "i352"
                                               "i351"
                                               "i350"
                                               "i349"
                                               "i348"
                                               "i347"
                                               "i345"
                                               "i344"
                                               "i342"
                                               "i340"
                                               "i338"
                                               "i336"
                                               "i334"
                                               "i332"
                                               "i330"
                                               "i329"
                                               "i328"
                                               "i327"
                                               "i326"
                                               "i325"
                                               "i323"
                                               "i322"
                                               "i320"
                                               "i318"
                                               "i316"
                                               "i314"
                                               "i312"
                                               "i310"
                                               "i308"
                                               "i306"
                                               "i304"
                                               "i302"
                                               "i300"
                                               "i298"
                                               "i296"
                                               "i294"
                                               "i292"
                                               "i290"
                                               "i288"
                                               "i286"
                                               "i284"
                                               "i282"
                                               "i280"
                                               "i278"
                                               "i276"
                                               "i274"
                                               "i272"
                                               "i270"
                                               "i268"
                                               "i266"
                                               "i264"
                                               "i262"
                                               "i260"
                                               "i258"
                                               "i256"
                                               "i255"
                                               "i253"
                                               "i251"
                                               "i250"
                                               "i249"
                                               "i248"
                                               "i247"
                                               "i245"
                                               "i243"
                                               "i241"
                                               "i238"
                                               "i236"
                                               "i234"
                                               "i232"
                                               "i230"
                                               "i228"
                                               "i226"
                                               "i224"
                                               "i222"
                                               "i220"
                                               "i218"
                                               "i216"
                                               "i214"
                                               "i212"
                                               "i210"
                                               "i208"
                                               "i206"
                                               "i204"
                                               "i202"))
                                            #(ribcage
                                              (define-structure
                                                define-expansion-accessors
                                                define-expansion-constructors)
                                              ((top) (top) (top))
                                              ("i40" "i39" "i38")))
                                           (hygiene guile)))
                                    'expand
                                    (syntax-violation
                                      'eval-when
                                      "invalid situation"
                                      #{e 1737}#
                                      (#{wrap 409}#
                                        #{x 1750}#
                                        #{w 1739}#
                                        #f))))))))
                        #{situations 1748}#))))))
         (begin (#{f 1746}# #{when-list 1738}# '())))))
   (#{syntax-type 421}#
     (lambda (#{e 1760}#
              #{r 1761}#
              #{w 1762}#
              #{s 1763}#
              #{rib 1764}#
              #{mod 1765}#
              #{for-car? 1766}#)
       (if (symbol? #{e 1760}#)
         (begin
           (let ((#{n 1778}#
                   (#{id-var-name 397}# #{e 1760}# #{w 1762}#)))
             (begin
               (let ((#{b 1780}#
                       (#{lookup 337}#
                         #{n 1778}#
                         #{r 1761}#
                         #{mod 1765}#)))
                 (begin
                   (let ((#{type 1782}# (car #{b 1780}#)))
                     (if (memv #{type 1782}# '(lexical))
                       (values
                         #{type 1782}#
                         (cdr #{b 1780}#)
                         #{e 1760}#
                         #{w 1762}#
                         #{s 1763}#
                         #{mod 1765}#)
                       (if (memv #{type 1782}# '(global))
                         (values
                           #{type 1782}#
                           #{n 1778}#
                           #{e 1760}#
                           #{w 1762}#
                           #{s 1763}#
                           #{mod 1765}#)
                         (if (memv #{type 1782}# '(macro))
                           (if #{for-car? 1766}#
                             (values
                               #{type 1782}#
                               (cdr #{b 1780}#)
                               #{e 1760}#
                               #{w 1762}#
                               #{s 1763}#
                               #{mod 1765}#)
                             (#{syntax-type 421}#
                               (#{chi-macro 429}#
                                 (cdr #{b 1780}#)
                                 #{e 1760}#
                                 #{r 1761}#
                                 #{w 1762}#
                                 #{s 1763}#
                                 #{rib 1764}#
                                 #{mod 1765}#)
                               #{r 1761}#
                               '(())
                               #{s 1763}#
                               #{rib 1764}#
                               #{mod 1765}#
                               #f))
                           (values
                             #{type 1782}#
                             (cdr #{b 1780}#)
                             #{e 1760}#
                             #{w 1762}#
                             #{s 1763}#
                             #{mod 1765}#))))))))))
         (if (pair? #{e 1760}#)
           (begin
             (let ((#{first 1796}# (car #{e 1760}#)))
               (call-with-values
                 (lambda ()
                   (#{syntax-type 421}#
                     #{first 1796}#
                     #{r 1761}#
                     #{w 1762}#
                     #{s 1763}#
                     #{rib 1764}#
                     #{mod 1765}#
                     #t))
                 (lambda (#{ftype 1797}#
                          #{fval 1798}#
                          #{fe 1799}#
                          #{fw 1800}#
                          #{fs 1801}#
                          #{fmod 1802}#)
                   (if (memv #{ftype 1797}# '(lexical))
                     (values
                       'lexical-call
                       #{fval 1798}#
                       #{e 1760}#
                       #{w 1762}#
                       #{s 1763}#
                       #{mod 1765}#)
                     (if (memv #{ftype 1797}# '(global))
                       (values
                         'global-call
                         (#{make-syntax-object 307}#
                           #{fval 1798}#
                           #{w 1762}#
                           #{fmod 1802}#)
                         #{e 1760}#
                         #{w 1762}#
                         #{s 1763}#
                         #{mod 1765}#)
                       (if (memv #{ftype 1797}# '(macro))
                         (#{syntax-type 421}#
                           (#{chi-macro 429}#
                             #{fval 1798}#
                             #{e 1760}#
                             #{r 1761}#
                             #{w 1762}#
                             #{s 1763}#
                             #{rib 1764}#
                             #{mod 1765}#)
                           #{r 1761}#
                           '(())
                           #{s 1763}#
                           #{rib 1764}#
                           #{mod 1765}#
                           #{for-car? 1766}#)
                         (if (memv #{ftype 1797}# '(module-ref))
                           (call-with-values
                             (lambda ()
                               (#{fval 1798}#
                                 #{e 1760}#
                                 #{r 1761}#
                                 #{w 1762}#))
                             (lambda (#{e 1814}#
                                      #{r 1815}#
                                      #{w 1816}#
                                      #{s 1817}#
                                      #{mod 1818}#)
                               (#{syntax-type 421}#
                                 #{e 1814}#
                                 #{r 1815}#
                                 #{w 1816}#
                                 #{s 1817}#
                                 #{rib 1764}#
                                 #{mod 1818}#
                                 #{for-car? 1766}#)))
                           (if (memv #{ftype 1797}# '(core))
                             (values
                               'core-form
                               #{fval 1798}#
                               #{e 1760}#
                               #{w 1762}#
                               #{s 1763}#
                               #{mod 1765}#)
                             (if (memv #{ftype 1797}# '(local-syntax))
                               (values
                                 'local-syntax-form
                                 #{fval 1798}#
                                 #{e 1760}#
                                 #{w 1762}#
                                 #{s 1763}#
                                 #{mod 1765}#)
                               (if (memv #{ftype 1797}# '(begin))
                                 (values
                                   'begin-form
                                   #f
                                   #{e 1760}#
                                   #{w 1762}#
                                   #{s 1763}#
                                   #{mod 1765}#)
                                 (if (memv #{ftype 1797}# '(eval-when))
                                   (values
                                     'eval-when-form
                                     #f
                                     #{e 1760}#
                                     #{w 1762}#
                                     #{s 1763}#
                                     #{mod 1765}#)
                                   (if (memv #{ftype 1797}# '(define))
                                     (let ((#{tmp 1829}# #{e 1760}#))
                                       (let ((#{tmp 1830}#
                                               ($sc-dispatch
                                                 #{tmp 1829}#
                                                 '(_ any any))))
                                         (if (if #{tmp 1830}#
                                               (@apply
                                                 (lambda (#{name 1833}#
                                                          #{val 1834}#)
                                                   (#{id? 343}# #{name 1833}#))
                                                 #{tmp 1830}#)
                                               #f)
                                           (@apply
                                             (lambda (#{name 1837}#
                                                      #{val 1838}#)
                                               (values
                                                 'define-form
                                                 #{name 1837}#
                                                 #{val 1838}#
                                                 #{w 1762}#
                                                 #{s 1763}#
                                                 #{mod 1765}#))
                                             #{tmp 1830}#)
                                           (let ((#{tmp 1839}#
                                                   ($sc-dispatch
                                                     #{tmp 1829}#
                                                     '(_ (any . any)
                                                         any
                                                         .
                                                         each-any))))
                                             (if (if #{tmp 1839}#
                                                   (@apply
                                                     (lambda (#{name 1844}#
                                                              #{args 1845}#
                                                              #{e1 1846}#
                                                              #{e2 1847}#)
                                                       (if (#{id? 343}#
                                                             #{name 1844}#)
                                                         (#{valid-bound-ids? 403}#
                                                           (#{lambda-var-list 453}#
                                                             #{args 1845}#))
                                                         #f))
                                                     #{tmp 1839}#)
                                                   #f)
                                               (@apply
                                                 (lambda (#{name 1854}#
                                                          #{args 1855}#
                                                          #{e1 1856}#
                                                          #{e2 1857}#)
                                                   (values
                                                     'define-form
                                                     (#{wrap 409}#
                                                       #{name 1854}#
                                                       #{w 1762}#
                                                       #{mod 1765}#)
                                                     (#{decorate-source 261}#
                                                       (cons '#(syntax-object
                                                                lambda
                                                                ((top)
                                                                 #(ribcage
                                                                   #(name
                                                                     args
                                                                     e1
                                                                     e2)
                                                                   #((top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                   #("i1850"
                                                                     "i1851"
                                                                     "i1852"
                                                                     "i1853"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(ftype
                                                                     fval
                                                                     fe
                                                                     fw
                                                                     fs
                                                                     fmod)
                                                                   #((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                   #("i1803"
                                                                     "i1804"
                                                                     "i1805"
                                                                     "i1806"
                                                                     "i1807"
                                                                     "i1808"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(first)
                                                                   #((top))
                                                                   #("i1795"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(e
                                                                     r
                                                                     w
                                                                     s
                                                                     rib
                                                                     mod
                                                                     for-car?)
                                                                   #((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                   #("i1767"
                                                                     "i1768"
                                                                     "i1769"
                                                                     "i1770"
                                                                     "i1771"
                                                                     "i1772"
                                                                     "i1773"))
                                                                 #(ribcage
                                                                   (lambda-var-list
                                                                     gen-var
                                                                     strip
                                                                     chi-lambda-case
                                                                     lambda*-formals
                                                                     chi-simple-lambda
                                                                     lambda-formals
                                                                     ellipsis?
                                                                     chi-void
                                                                     eval-local-transformer
                                                                     chi-local-syntax
                                                                     chi-body
                                                                     chi-macro
                                                                     chi-call
                                                                     chi-expr
                                                                     chi
                                                                     syntax-type
                                                                     chi-when-list
                                                                     chi-install-global
                                                                     chi-top-sequence
                                                                     chi-sequence
                                                                     source-wrap
                                                                     wrap
                                                                     bound-id-member?
                                                                     distinct-bound-ids?
                                                                     valid-bound-ids?
                                                                     bound-id=?
                                                                     free-id=?
                                                                     id-var-name
                                                                     same-marks?
                                                                     join-marks
                                                                     join-wraps
                                                                     smart-append
                                                                     make-binding-wrap
                                                                     extend-ribcage!
                                                                     make-empty-ribcage
                                                                     new-mark
                                                                     anti-mark
                                                                     the-anti-mark
                                                                     top-marked?
                                                                     top-wrap
                                                                     empty-wrap
                                                                     set-ribcage-labels!
                                                                     set-ribcage-marks!
                                                                     set-ribcage-symnames!
                                                                     ribcage-labels
                                                                     ribcage-marks
                                                                     ribcage-symnames
                                                                     ribcage?
                                                                     make-ribcage
                                                                     gen-labels
                                                                     gen-label
                                                                     make-rename
                                                                     rename-marks
                                                                     rename-new
                                                                     rename-old
                                                                     subst-rename?
                                                                     wrap-subst
                                                                     wrap-marks
                                                                     make-wrap
                                                                     id-sym-name&marks
                                                                     id-sym-name
                                                                     id?
                                                                     nonsymbol-id?
                                                                     global-extend
                                                                     lookup
                                                                     macros-only-env
                                                                     extend-var-env
                                                                     extend-env
                                                                     null-env
                                                                     binding-value
                                                                     binding-type
                                                                     make-binding
                                                                     arg-check
                                                                     source-annotation
                                                                     no-source
                                                                     set-syntax-object-module!
                                                                     set-syntax-object-wrap!
                                                                     set-syntax-object-expression!
                                                                     syntax-object-module
                                                                     syntax-object-wrap
                                                                     syntax-object-expression
                                                                     syntax-object?
                                                                     make-syntax-object
                                                                     build-lexical-var
                                                                     build-letrec
                                                                     build-named-let
                                                                     build-let
                                                                     build-sequence
                                                                     build-data
                                                                     build-primref
                                                                     build-primcall
                                                                     build-lambda-case
                                                                     build-case-lambda
                                                                     build-simple-lambda
                                                                     build-global-definition
                                                                     build-global-assignment
                                                                     build-global-reference
                                                                     analyze-variable
                                                                     build-lexical-assignment
                                                                     build-lexical-reference
                                                                     build-dynlet
                                                                     build-conditional
                                                                     build-call
                                                                     build-void
                                                                     maybe-name-value!
                                                                     decorate-source
                                                                     get-global-definition-hook
                                                                     put-global-definition-hook
                                                                     gensym-hook
                                                                     local-eval-hook
                                                                     top-level-eval-hook
                                                                     fx<
                                                                     fx=
                                                                     fx-
                                                                     fx+
                                                                     set-lambda-meta!
                                                                     lambda-meta
                                                                     lambda?
                                                                     make-dynlet
                                                                     make-letrec
                                                                     make-let
                                                                     make-lambda-case
                                                                     make-lambda
                                                                     make-sequence
                                                                     make-primcall
                                                                     make-call
                                                                     make-conditional
                                                                     make-toplevel-define
                                                                     make-toplevel-set
                                                                     make-toplevel-ref
                                                                     make-module-set
                                                                     make-module-ref
                                                                     make-lexical-set
                                                                     make-lexical-ref
                                                                     make-primitive-ref
                                                                     make-const
                                                                     make-void)
                                                                   ((top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top))
                                                                   ("i452"
                                                                    "i450"
                                                                    "i448"
                                                                    "i446"
                                                                    "i444"
                                                                    "i442"
                                                                    "i440"
                                                                    "i438"
                                                                    "i436"
                                                                    "i434"
                                                                    "i432"
                                                                    "i430"
                                                                    "i428"
                                                                    "i426"
                                                                    "i424"
                                                                    "i422"
                                                                    "i420"
                                                                    "i418"
                                                                    "i416"
                                                                    "i414"
                                                                    "i412"
                                                                    "i410"
                                                                    "i408"
                                                                    "i406"
                                                                    "i404"
                                                                    "i402"
                                                                    "i400"
                                                                    "i398"
                                                                    "i396"
                                                                    "i394"
                                                                    "i392"
                                                                    "i390"
                                                                    "i388"
                                                                    "i386"
                                                                    "i384"
                                                                    "i383"
                                                                    "i382"
                                                                    "i380"
                                                                    "i379"
                                                                    "i378"
                                                                    "i377"
                                                                    "i376"
                                                                    "i374"
                                                                    "i372"
                                                                    "i370"
                                                                    "i368"
                                                                    "i366"
                                                                    "i364"
                                                                    "i362"
                                                                    "i360"
                                                                    "i357"
                                                                    "i355"
                                                                    "i354"
                                                                    "i353"
                                                                    "i352"
                                                                    "i351"
                                                                    "i350"
                                                                    "i349"
                                                                    "i348"
                                                                    "i347"
                                                                    "i345"
                                                                    "i344"
                                                                    "i342"
                                                                    "i340"
                                                                    "i338"
                                                                    "i336"
                                                                    "i334"
                                                                    "i332"
                                                                    "i330"
                                                                    "i329"
                                                                    "i328"
                                                                    "i327"
                                                                    "i326"
                                                                    "i325"
                                                                    "i323"
                                                                    "i322"
                                                                    "i320"
                                                                    "i318"
                                                                    "i316"
                                                                    "i314"
                                                                    "i312"
                                                                    "i310"
                                                                    "i308"
                                                                    "i306"
                                                                    "i304"
                                                                    "i302"
                                                                    "i300"
                                                                    "i298"
                                                                    "i296"
                                                                    "i294"
                                                                    "i292"
                                                                    "i290"
                                                                    "i288"
                                                                    "i286"
                                                                    "i284"
                                                                    "i282"
                                                                    "i280"
                                                                    "i278"
                                                                    "i276"
                                                                    "i274"
                                                                    "i272"
                                                                    "i270"
                                                                    "i268"
                                                                    "i266"
                                                                    "i264"
                                                                    "i262"
                                                                    "i260"
                                                                    "i258"
                                                                    "i256"
                                                                    "i255"
                                                                    "i253"
                                                                    "i251"
                                                                    "i250"
                                                                    "i249"
                                                                    "i248"
                                                                    "i247"
                                                                    "i245"
                                                                    "i243"
                                                                    "i241"
                                                                    "i238"
                                                                    "i236"
                                                                    "i234"
                                                                    "i232"
                                                                    "i230"
                                                                    "i228"
                                                                    "i226"
                                                                    "i224"
                                                                    "i222"
                                                                    "i220"
                                                                    "i218"
                                                                    "i216"
                                                                    "i214"
                                                                    "i212"
                                                                    "i210"
                                                                    "i208"
                                                                    "i206"
                                                                    "i204"
                                                                    "i202"))
                                                                 #(ribcage
                                                                   (define-structure
                                                                     define-expansion-accessors
                                                                     define-expansion-constructors)
                                                                   ((top)
                                                                    (top)
                                                                    (top))
                                                                   ("i40"
                                                                    "i39"
                                                                    "i38")))
                                                                (hygiene
                                                                  guile))
                                                             (#{wrap 409}#
                                                               (cons #{args 1855}#
                                                                     (cons #{e1 1856}#
                                                                           #{e2 1857}#))
                                                               #{w 1762}#
                                                               #{mod 1765}#))
                                                       #{s 1763}#)
                                                     '(())
                                                     #{s 1763}#
                                                     #{mod 1765}#))
                                                 #{tmp 1839}#)
                                               (let ((#{tmp 1860}#
                                                       ($sc-dispatch
                                                         #{tmp 1829}#
                                                         '(_ any))))
                                                 (if (if #{tmp 1860}#
                                                       (@apply
                                                         (lambda (#{name 1862}#)
                                                           (#{id? 343}#
                                                             #{name 1862}#))
                                                         #{tmp 1860}#)
                                                       #f)
                                                   (@apply
                                                     (lambda (#{name 1864}#)
                                                       (values
                                                         'define-form
                                                         (#{wrap 409}#
                                                           #{name 1864}#
                                                           #{w 1762}#
                                                           #{mod 1765}#)
                                                         '(#(syntax-object
                                                             if
                                                             ((top)
                                                              #(ribcage
                                                                #(name)
                                                                #((top))
                                                                #("i1863"))
                                                              #(ribcage
                                                                ()
                                                                ()
                                                                ())
                                                              #(ribcage
                                                                ()
                                                                ()
                                                                ())
                                                              #(ribcage
                                                                #(ftype
                                                                  fval
                                                                  fe
                                                                  fw
                                                                  fs
                                                                  fmod)
                                                                #((top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top))
                                                                #("i1803"
                                                                  "i1804"
                                                                  "i1805"
                                                                  "i1806"
                                                                  "i1807"
                                                                  "i1808"))
                                                              #(ribcage
                                                                ()
                                                                ()
                                                                ())
                                                              #(ribcage
                                                                #(first)
                                                                #((top))
                                                                #("i1795"))
                                                              #(ribcage
                                                                ()
                                                                ()
                                                                ())
                                                              #(ribcage
                                                                ()
                                                                ()
                                                                ())
                                                              #(ribcage
                                                                ()
                                                                ()
                                                                ())
                                                              #(ribcage
                                                                #(e
                                                                  r
                                                                  w
                                                                  s
                                                                  rib
                                                                  mod
                                                                  for-car?)
                                                                #((top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top))
                                                                #("i1767"
                                                                  "i1768"
                                                                  "i1769"
                                                                  "i1770"
                                                                  "i1771"
                                                                  "i1772"
                                                                  "i1773"))
                                                              #(ribcage
                                                                (lambda-var-list
                                                                  gen-var
                                                                  strip
                                                                  chi-lambda-case
                                                                  lambda*-formals
                                                                  chi-simple-lambda
                                                                  lambda-formals
                                                                  ellipsis?
                                                                  chi-void
                                                                  eval-local-transformer
                                                                  chi-local-syntax
                                                                  chi-body
                                                                  chi-macro
                                                                  chi-call
                                                                  chi-expr
                                                                  chi
                                                                  syntax-type
                                                                  chi-when-list
                                                                  chi-install-global
                                                                  chi-top-sequence
                                                                  chi-sequence
                                                                  source-wrap
                                                                  wrap
                                                                  bound-id-member?
                                                                  distinct-bound-ids?
                                                                  valid-bound-ids?
                                                                  bound-id=?
                                                                  free-id=?
                                                                  id-var-name
                                                                  same-marks?
                                                                  join-marks
                                                                  join-wraps
                                                                  smart-append
                                                                  make-binding-wrap
                                                                  extend-ribcage!
                                                                  make-empty-ribcage
                                                                  new-mark
                                                                  anti-mark
                                                                  the-anti-mark
                                                                  top-marked?
                                                                  top-wrap
                                                                  empty-wrap
                                                                  set-ribcage-labels!
                                                                  set-ribcage-marks!
                                                                  set-ribcage-symnames!
                                                                  ribcage-labels
                                                                  ribcage-marks
                                                                  ribcage-symnames
                                                                  ribcage?
                                                                  make-ribcage
                                                                  gen-labels
                                                                  gen-label
                                                                  make-rename
                                                                  rename-marks
                                                                  rename-new
                                                                  rename-old
                                                                  subst-rename?
                                                                  wrap-subst
                                                                  wrap-marks
                                                                  make-wrap
                                                                  id-sym-name&marks
                                                                  id-sym-name
                                                                  id?
                                                                  nonsymbol-id?
                                                                  global-extend
                                                                  lookup
                                                                  macros-only-env
                                                                  extend-var-env
                                                                  extend-env
                                                                  null-env
                                                                  binding-value
                                                                  binding-type
                                                                  make-binding
                                                                  arg-check
                                                                  source-annotation
                                                                  no-source
                                                                  set-syntax-object-module!
                                                                  set-syntax-object-wrap!
                                                                  set-syntax-object-expression!
                                                                  syntax-object-module
                                                                  syntax-object-wrap
                                                                  syntax-object-expression
                                                                  syntax-object?
                                                                  make-syntax-object
                                                                  build-lexical-var
                                                                  build-letrec
                                                                  build-named-let
                                                                  build-let
                                                                  build-sequence
                                                                  build-data
                                                                  build-primref
                                                                  build-primcall
                                                                  build-lambda-case
                                                                  build-case-lambda
                                                                  build-simple-lambda
                                                                  build-global-definition
                                                                  build-global-assignment
                                                                  build-global-reference
                                                                  analyze-variable
                                                                  build-lexical-assignment
                                                                  build-lexical-reference
                                                                  build-dynlet
                                                                  build-conditional
                                                                  build-call
                                                                  build-void
                                                                  maybe-name-value!
                                                                  decorate-source
                                                                  get-global-definition-hook
                                                                  put-global-definition-hook
                                                                  gensym-hook
                                                                  local-eval-hook
                                                                  top-level-eval-hook
                                                                  fx<
                                                                  fx=
                                                                  fx-
                                                                  fx+
                                                                  set-lambda-meta!
                                                                  lambda-meta
                                                                  lambda?
                                                                  make-dynlet
                                                                  make-letrec
                                                                  make-let
                                                                  make-lambda-case
                                                                  make-lambda
                                                                  make-sequence
                                                                  make-primcall
                                                                  make-call
                                                                  make-conditional
                                                                  make-toplevel-define
                                                                  make-toplevel-set
                                                                  make-toplevel-ref
                                                                  make-module-set
                                                                  make-module-ref
                                                                  make-lexical-set
                                                                  make-lexical-ref
                                                                  make-primitive-ref
                                                                  make-const
                                                                  make-void)
                                                                ((top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                                ("i452"
                                                                 "i450"
                                                                 "i448"
                                                                 "i446"
                                                                 "i444"
                                                                 "i442"
                                                                 "i440"
                                                                 "i438"
                                                                 "i436"
                                                                 "i434"
                                                                 "i432"
                                                                 "i430"
                                                                 "i428"
                                                                 "i426"
                                                                 "i424"
                                                                 "i422"
                                                                 "i420"
                                                                 "i418"
                                                                 "i416"
                                                                 "i414"
                                                                 "i412"
                                                                 "i410"
                                                                 "i408"
                                                                 "i406"
                                                                 "i404"
                                                                 "i402"
                                                                 "i400"
                                                                 "i398"
                                                                 "i396"
                                                                 "i394"
                                                                 "i392"
                                                                 "i390"
                                                                 "i388"
                                                                 "i386"
                                                                 "i384"
                                                                 "i383"
                                                                 "i382"
                                                                 "i380"
                                                                 "i379"
                                                                 "i378"
                                                                 "i377"
                                                                 "i376"
                                                                 "i374"
                                                                 "i372"
                                                                 "i370"
                                                                 "i368"
                                                                 "i366"
                                                                 "i364"
                                                                 "i362"
                                                                 "i360"
                                                                 "i357"
                                                                 "i355"
                                                                 "i354"
                                                                 "i353"
                                                                 "i352"
                                                                 "i351"
                                                                 "i350"
                                                                 "i349"
                                                                 "i348"
                                                                 "i347"
                                                                 "i345"
                                                                 "i344"
                                                                 "i342"
                                                                 "i340"
                                                                 "i338"
                                                                 "i336"
                                                                 "i334"
                                                                 "i332"
                                                                 "i330"
                                                                 "i329"
                                                                 "i328"
                                                                 "i327"
                                                                 "i326"
                                                                 "i325"
                                                                 "i323"
                                                                 "i322"
                                                                 "i320"
                                                                 "i318"
                                                                 "i316"
                                                                 "i314"
                                                                 "i312"
                                                                 "i310"
                                                                 "i308"
                                                                 "i306"
                                                                 "i304"
                                                                 "i302"
                                                                 "i300"
                                                                 "i298"
                                                                 "i296"
                                                                 "i294"
                                                                 "i292"
                                                                 "i290"
                                                                 "i288"
                                                                 "i286"
                                                                 "i284"
                                                                 "i282"
                                                                 "i280"
                                                                 "i278"
                                                                 "i276"
                                                                 "i274"
                                                                 "i272"
                                                                 "i270"
                                                                 "i268"
                                                                 "i266"
                                                                 "i264"
                                                                 "i262"
                                                                 "i260"
                                                                 "i258"
                                                                 "i256"
                                                                 "i255"
                                                                 "i253"
                                                                 "i251"
                                                                 "i250"
                                                                 "i249"
                                                                 "i248"
                                                                 "i247"
                                                                 "i245"
                                                                 "i243"
                                                                 "i241"
                                                                 "i238"
                                                                 "i236"
                                                                 "i234"
                                                                 "i232"
                                                                 "i230"
                                                                 "i228"
                                                                 "i226"
                                                                 "i224"
                                                                 "i222"
                                                                 "i220"
                                                                 "i218"
                                                                 "i216"
                                                                 "i214"
                                                                 "i212"
                                                                 "i210"
                                                                 "i208"
                                                                 "i206"
                                                                 "i204"
                                                                 "i202"))
                                                              #(ribcage
                                                                (define-structure
                                                                  define-expansion-accessors
                                                                  define-expansion-constructors)
                                                                ((top)
                                                                 (top)
                                                                 (top))
                                                                ("i40"
                                                                 "i39"
                                                                 "i38")))
                                                             (hygiene guile))
                                                           #(syntax-object
                                                             #f
                                                             ((top)
                                                              #(ribcage
                                                                #(name)
                                                                #((top))
                                                                #("i1863"))
                                                              #(ribcage
                                                                ()
                                                                ()
                                                                ())
                                                              #(ribcage
                                                                ()
                                                                ()
                                                                ())
                                                              #(ribcage
                                                                #(ftype
                                                                  fval
                                                                  fe
                                                                  fw
                                                                  fs
                                                                  fmod)
                                                                #((top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top))
                                                                #("i1803"
                                                                  "i1804"
                                                                  "i1805"
                                                                  "i1806"
                                                                  "i1807"
                                                                  "i1808"))
                                                              #(ribcage
                                                                ()
                                                                ()
                                                                ())
                                                              #(ribcage
                                                                #(first)
                                                                #((top))
                                                                #("i1795"))
                                                              #(ribcage
                                                                ()
                                                                ()
                                                                ())
                                                              #(ribcage
                                                                ()
                                                                ()
                                                                ())
                                                              #(ribcage
                                                                ()
                                                                ()
                                                                ())
                                                              #(ribcage
                                                                #(e
                                                                  r
                                                                  w
                                                                  s
                                                                  rib
                                                                  mod
                                                                  for-car?)
                                                                #((top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top))
                                                                #("i1767"
                                                                  "i1768"
                                                                  "i1769"
                                                                  "i1770"
                                                                  "i1771"
                                                                  "i1772"
                                                                  "i1773"))
                                                              #(ribcage
                                                                (lambda-var-list
                                                                  gen-var
                                                                  strip
                                                                  chi-lambda-case
                                                                  lambda*-formals
                                                                  chi-simple-lambda
                                                                  lambda-formals
                                                                  ellipsis?
                                                                  chi-void
                                                                  eval-local-transformer
                                                                  chi-local-syntax
                                                                  chi-body
                                                                  chi-macro
                                                                  chi-call
                                                                  chi-expr
                                                                  chi
                                                                  syntax-type
                                                                  chi-when-list
                                                                  chi-install-global
                                                                  chi-top-sequence
                                                                  chi-sequence
                                                                  source-wrap
                                                                  wrap
                                                                  bound-id-member?
                                                                  distinct-bound-ids?
                                                                  valid-bound-ids?
                                                                  bound-id=?
                                                                  free-id=?
                                                                  id-var-name
                                                                  same-marks?
                                                                  join-marks
                                                                  join-wraps
                                                                  smart-append
                                                                  make-binding-wrap
                                                                  extend-ribcage!
                                                                  make-empty-ribcage
                                                                  new-mark
                                                                  anti-mark
                                                                  the-anti-mark
                                                                  top-marked?
                                                                  top-wrap
                                                                  empty-wrap
                                                                  set-ribcage-labels!
                                                                  set-ribcage-marks!
                                                                  set-ribcage-symnames!
                                                                  ribcage-labels
                                                                  ribcage-marks
                                                                  ribcage-symnames
                                                                  ribcage?
                                                                  make-ribcage
                                                                  gen-labels
                                                                  gen-label
                                                                  make-rename
                                                                  rename-marks
                                                                  rename-new
                                                                  rename-old
                                                                  subst-rename?
                                                                  wrap-subst
                                                                  wrap-marks
                                                                  make-wrap
                                                                  id-sym-name&marks
                                                                  id-sym-name
                                                                  id?
                                                                  nonsymbol-id?
                                                                  global-extend
                                                                  lookup
                                                                  macros-only-env
                                                                  extend-var-env
                                                                  extend-env
                                                                  null-env
                                                                  binding-value
                                                                  binding-type
                                                                  make-binding
                                                                  arg-check
                                                                  source-annotation
                                                                  no-source
                                                                  set-syntax-object-module!
                                                                  set-syntax-object-wrap!
                                                                  set-syntax-object-expression!
                                                                  syntax-object-module
                                                                  syntax-object-wrap
                                                                  syntax-object-expression
                                                                  syntax-object?
                                                                  make-syntax-object
                                                                  build-lexical-var
                                                                  build-letrec
                                                                  build-named-let
                                                                  build-let
                                                                  build-sequence
                                                                  build-data
                                                                  build-primref
                                                                  build-primcall
                                                                  build-lambda-case
                                                                  build-case-lambda
                                                                  build-simple-lambda
                                                                  build-global-definition
                                                                  build-global-assignment
                                                                  build-global-reference
                                                                  analyze-variable
                                                                  build-lexical-assignment
                                                                  build-lexical-reference
                                                                  build-dynlet
                                                                  build-conditional
                                                                  build-call
                                                                  build-void
                                                                  maybe-name-value!
                                                                  decorate-source
                                                                  get-global-definition-hook
                                                                  put-global-definition-hook
                                                                  gensym-hook
                                                                  local-eval-hook
                                                                  top-level-eval-hook
                                                                  fx<
                                                                  fx=
                                                                  fx-
                                                                  fx+
                                                                  set-lambda-meta!
                                                                  lambda-meta
                                                                  lambda?
                                                                  make-dynlet
                                                                  make-letrec
                                                                  make-let
                                                                  make-lambda-case
                                                                  make-lambda
                                                                  make-sequence
                                                                  make-primcall
                                                                  make-call
                                                                  make-conditional
                                                                  make-toplevel-define
                                                                  make-toplevel-set
                                                                  make-toplevel-ref
                                                                  make-module-set
                                                                  make-module-ref
                                                                  make-lexical-set
                                                                  make-lexical-ref
                                                                  make-primitive-ref
                                                                  make-const
                                                                  make-void)
                                                                ((top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                                ("i452"
                                                                 "i450"
                                                                 "i448"
                                                                 "i446"
                                                                 "i444"
                                                                 "i442"
                                                                 "i440"
                                                                 "i438"
                                                                 "i436"
                                                                 "i434"
                                                                 "i432"
                                                                 "i430"
                                                                 "i428"
                                                                 "i426"
                                                                 "i424"
                                                                 "i422"
                                                                 "i420"
                                                                 "i418"
                                                                 "i416"
                                                                 "i414"
                                                                 "i412"
                                                                 "i410"
                                                                 "i408"
                                                                 "i406"
                                                                 "i404"
                                                                 "i402"
                                                                 "i400"
                                                                 "i398"
                                                                 "i396"
                                                                 "i394"
                                                                 "i392"
                                                                 "i390"
                                                                 "i388"
                                                                 "i386"
                                                                 "i384"
                                                                 "i383"
                                                                 "i382"
                                                                 "i380"
                                                                 "i379"
                                                                 "i378"
                                                                 "i377"
                                                                 "i376"
                                                                 "i374"
                                                                 "i372"
                                                                 "i370"
                                                                 "i368"
                                                                 "i366"
                                                                 "i364"
                                                                 "i362"
                                                                 "i360"
                                                                 "i357"
                                                                 "i355"
                                                                 "i354"
                                                                 "i353"
                                                                 "i352"
                                                                 "i351"
                                                                 "i350"
                                                                 "i349"
                                                                 "i348"
                                                                 "i347"
                                                                 "i345"
                                                                 "i344"
                                                                 "i342"
                                                                 "i340"
                                                                 "i338"
                                                                 "i336"
                                                                 "i334"
                                                                 "i332"
                                                                 "i330"
                                                                 "i329"
                                                                 "i328"
                                                                 "i327"
                                                                 "i326"
                                                                 "i325"
                                                                 "i323"
                                                                 "i322"
                                                                 "i320"
                                                                 "i318"
                                                                 "i316"
                                                                 "i314"
                                                                 "i312"
                                                                 "i310"
                                                                 "i308"
                                                                 "i306"
                                                                 "i304"
                                                                 "i302"
                                                                 "i300"
                                                                 "i298"
                                                                 "i296"
                                                                 "i294"
                                                                 "i292"
                                                                 "i290"
                                                                 "i288"
                                                                 "i286"
                                                                 "i284"
                                                                 "i282"
                                                                 "i280"
                                                                 "i278"
                                                                 "i276"
                                                                 "i274"
                                                                 "i272"
                                                                 "i270"
                                                                 "i268"
                                                                 "i266"
                                                                 "i264"
                                                                 "i262"
                                                                 "i260"
                                                                 "i258"
                                                                 "i256"
                                                                 "i255"
                                                                 "i253"
                                                                 "i251"
                                                                 "i250"
                                                                 "i249"
                                                                 "i248"
                                                                 "i247"
                                                                 "i245"
                                                                 "i243"
                                                                 "i241"
                                                                 "i238"
                                                                 "i236"
                                                                 "i234"
                                                                 "i232"
                                                                 "i230"
                                                                 "i228"
                                                                 "i226"
                                                                 "i224"
                                                                 "i222"
                                                                 "i220"
                                                                 "i218"
                                                                 "i216"
                                                                 "i214"
                                                                 "i212"
                                                                 "i210"
                                                                 "i208"
                                                                 "i206"
                                                                 "i204"
                                                                 "i202"))
                                                              #(ribcage
                                                                (define-structure
                                                                  define-expansion-accessors
                                                                  define-expansion-constructors)
                                                                ((top)
                                                                 (top)
                                                                 (top))
                                                                ("i40"
                                                                 "i39"
                                                                 "i38")))
                                                             (hygiene guile))
                                                           #(syntax-object
                                                             #f
                                                             ((top)
                                                              #(ribcage
                                                                #(name)
                                                                #((top))
                                                                #("i1863"))
                                                              #(ribcage
                                                                ()
                                                                ()
                                                                ())
                                                              #(ribcage
                                                                ()
                                                                ()
                                                                ())
                                                              #(ribcage
                                                                #(ftype
                                                                  fval
                                                                  fe
                                                                  fw
                                                                  fs
                                                                  fmod)
                                                                #((top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top))
                                                                #("i1803"
                                                                  "i1804"
                                                                  "i1805"
                                                                  "i1806"
                                                                  "i1807"
                                                                  "i1808"))
                                                              #(ribcage
                                                                ()
                                                                ()
                                                                ())
                                                              #(ribcage
                                                                #(first)
                                                                #((top))
                                                                #("i1795"))
                                                              #(ribcage
                                                                ()
                                                                ()
                                                                ())
                                                              #(ribcage
                                                                ()
                                                                ()
                                                                ())
                                                              #(ribcage
                                                                ()
                                                                ()
                                                                ())
                                                              #(ribcage
                                                                #(e
                                                                  r
                                                                  w
                                                                  s
                                                                  rib
                                                                  mod
                                                                  for-car?)
                                                                #((top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top))
                                                                #("i1767"
                                                                  "i1768"
                                                                  "i1769"
                                                                  "i1770"
                                                                  "i1771"
                                                                  "i1772"
                                                                  "i1773"))
                                                              #(ribcage
                                                                (lambda-var-list
                                                                  gen-var
                                                                  strip
                                                                  chi-lambda-case
                                                                  lambda*-formals
                                                                  chi-simple-lambda
                                                                  lambda-formals
                                                                  ellipsis?
                                                                  chi-void
                                                                  eval-local-transformer
                                                                  chi-local-syntax
                                                                  chi-body
                                                                  chi-macro
                                                                  chi-call
                                                                  chi-expr
                                                                  chi
                                                                  syntax-type
                                                                  chi-when-list
                                                                  chi-install-global
                                                                  chi-top-sequence
                                                                  chi-sequence
                                                                  source-wrap
                                                                  wrap
                                                                  bound-id-member?
                                                                  distinct-bound-ids?
                                                                  valid-bound-ids?
                                                                  bound-id=?
                                                                  free-id=?
                                                                  id-var-name
                                                                  same-marks?
                                                                  join-marks
                                                                  join-wraps
                                                                  smart-append
                                                                  make-binding-wrap
                                                                  extend-ribcage!
                                                                  make-empty-ribcage
                                                                  new-mark
                                                                  anti-mark
                                                                  the-anti-mark
                                                                  top-marked?
                                                                  top-wrap
                                                                  empty-wrap
                                                                  set-ribcage-labels!
                                                                  set-ribcage-marks!
                                                                  set-ribcage-symnames!
                                                                  ribcage-labels
                                                                  ribcage-marks
                                                                  ribcage-symnames
                                                                  ribcage?
                                                                  make-ribcage
                                                                  gen-labels
                                                                  gen-label
                                                                  make-rename
                                                                  rename-marks
                                                                  rename-new
                                                                  rename-old
                                                                  subst-rename?
                                                                  wrap-subst
                                                                  wrap-marks
                                                                  make-wrap
                                                                  id-sym-name&marks
                                                                  id-sym-name
                                                                  id?
                                                                  nonsymbol-id?
                                                                  global-extend
                                                                  lookup
                                                                  macros-only-env
                                                                  extend-var-env
                                                                  extend-env
                                                                  null-env
                                                                  binding-value
                                                                  binding-type
                                                                  make-binding
                                                                  arg-check
                                                                  source-annotation
                                                                  no-source
                                                                  set-syntax-object-module!
                                                                  set-syntax-object-wrap!
                                                                  set-syntax-object-expression!
                                                                  syntax-object-module
                                                                  syntax-object-wrap
                                                                  syntax-object-expression
                                                                  syntax-object?
                                                                  make-syntax-object
                                                                  build-lexical-var
                                                                  build-letrec
                                                                  build-named-let
                                                                  build-let
                                                                  build-sequence
                                                                  build-data
                                                                  build-primref
                                                                  build-primcall
                                                                  build-lambda-case
                                                                  build-case-lambda
                                                                  build-simple-lambda
                                                                  build-global-definition
                                                                  build-global-assignment
                                                                  build-global-reference
                                                                  analyze-variable
                                                                  build-lexical-assignment
                                                                  build-lexical-reference
                                                                  build-dynlet
                                                                  build-conditional
                                                                  build-call
                                                                  build-void
                                                                  maybe-name-value!
                                                                  decorate-source
                                                                  get-global-definition-hook
                                                                  put-global-definition-hook
                                                                  gensym-hook
                                                                  local-eval-hook
                                                                  top-level-eval-hook
                                                                  fx<
                                                                  fx=
                                                                  fx-
                                                                  fx+
                                                                  set-lambda-meta!
                                                                  lambda-meta
                                                                  lambda?
                                                                  make-dynlet
                                                                  make-letrec
                                                                  make-let
                                                                  make-lambda-case
                                                                  make-lambda
                                                                  make-sequence
                                                                  make-primcall
                                                                  make-call
                                                                  make-conditional
                                                                  make-toplevel-define
                                                                  make-toplevel-set
                                                                  make-toplevel-ref
                                                                  make-module-set
                                                                  make-module-ref
                                                                  make-lexical-set
                                                                  make-lexical-ref
                                                                  make-primitive-ref
                                                                  make-const
                                                                  make-void)
                                                                ((top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                                ("i452"
                                                                 "i450"
                                                                 "i448"
                                                                 "i446"
                                                                 "i444"
                                                                 "i442"
                                                                 "i440"
                                                                 "i438"
                                                                 "i436"
                                                                 "i434"
                                                                 "i432"
                                                                 "i430"
                                                                 "i428"
                                                                 "i426"
                                                                 "i424"
                                                                 "i422"
                                                                 "i420"
                                                                 "i418"
                                                                 "i416"
                                                                 "i414"
                                                                 "i412"
                                                                 "i410"
                                                                 "i408"
                                                                 "i406"
                                                                 "i404"
                                                                 "i402"
                                                                 "i400"
                                                                 "i398"
                                                                 "i396"
                                                                 "i394"
                                                                 "i392"
                                                                 "i390"
                                                                 "i388"
                                                                 "i386"
                                                                 "i384"
                                                                 "i383"
                                                                 "i382"
                                                                 "i380"
                                                                 "i379"
                                                                 "i378"
                                                                 "i377"
                                                                 "i376"
                                                                 "i374"
                                                                 "i372"
                                                                 "i370"
                                                                 "i368"
                                                                 "i366"
                                                                 "i364"
                                                                 "i362"
                                                                 "i360"
                                                                 "i357"
                                                                 "i355"
                                                                 "i354"
                                                                 "i353"
                                                                 "i352"
                                                                 "i351"
                                                                 "i350"
                                                                 "i349"
                                                                 "i348"
                                                                 "i347"
                                                                 "i345"
                                                                 "i344"
                                                                 "i342"
                                                                 "i340"
                                                                 "i338"
                                                                 "i336"
                                                                 "i334"
                                                                 "i332"
                                                                 "i330"
                                                                 "i329"
                                                                 "i328"
                                                                 "i327"
                                                                 "i326"
                                                                 "i325"
                                                                 "i323"
                                                                 "i322"
                                                                 "i320"
                                                                 "i318"
                                                                 "i316"
                                                                 "i314"
                                                                 "i312"
                                                                 "i310"
                                                                 "i308"
                                                                 "i306"
                                                                 "i304"
                                                                 "i302"
                                                                 "i300"
                                                                 "i298"
                                                                 "i296"
                                                                 "i294"
                                                                 "i292"
                                                                 "i290"
                                                                 "i288"
                                                                 "i286"
                                                                 "i284"
                                                                 "i282"
                                                                 "i280"
                                                                 "i278"
                                                                 "i276"
                                                                 "i274"
                                                                 "i272"
                                                                 "i270"
                                                                 "i268"
                                                                 "i266"
                                                                 "i264"
                                                                 "i262"
                                                                 "i260"
                                                                 "i258"
                                                                 "i256"
                                                                 "i255"
                                                                 "i253"
                                                                 "i251"
                                                                 "i250"
                                                                 "i249"
                                                                 "i248"
                                                                 "i247"
                                                                 "i245"
                                                                 "i243"
                                                                 "i241"
                                                                 "i238"
                                                                 "i236"
                                                                 "i234"
                                                                 "i232"
                                                                 "i230"
                                                                 "i228"
                                                                 "i226"
                                                                 "i224"
                                                                 "i222"
                                                                 "i220"
                                                                 "i218"
                                                                 "i216"
                                                                 "i214"
                                                                 "i212"
                                                                 "i210"
                                                                 "i208"
                                                                 "i206"
                                                                 "i204"
                                                                 "i202"))
                                                              #(ribcage
                                                                (define-structure
                                                                  define-expansion-accessors
                                                                  define-expansion-constructors)
                                                                ((top)
                                                                 (top)
                                                                 (top))
                                                                ("i40"
                                                                 "i39"
                                                                 "i38")))
                                                             (hygiene guile)))
                                                         '(())
                                                         #{s 1763}#
                                                         #{mod 1765}#))
                                                     #{tmp 1860}#)
                                                   (syntax-violation
                                                     #f
                                                     "source expression failed to match any pattern"
                                                     #{tmp 1829}#))))))))
                                     (if (memv #{ftype 1797}# '(define-syntax))
                                       (let ((#{tmp 1867}# #{e 1760}#))
                                         (let ((#{tmp 1868}#
                                                 ($sc-dispatch
                                                   #{tmp 1867}#
                                                   '(_ any any))))
                                           (if (if #{tmp 1868}#
                                                 (@apply
                                                   (lambda (#{name 1871}#
                                                            #{val 1872}#)
                                                     (#{id? 343}#
                                                       #{name 1871}#))
                                                   #{tmp 1868}#)
                                                 #f)
                                             (@apply
                                               (lambda (#{name 1875}#
                                                        #{val 1876}#)
                                                 (values
                                                   'define-syntax-form
                                                   #{name 1875}#
                                                   #{val 1876}#
                                                   #{w 1762}#
                                                   #{s 1763}#
                                                   #{mod 1765}#))
                                               #{tmp 1868}#)
                                             (syntax-violation
                                               #f
                                               "source expression failed to match any pattern"
                                               #{tmp 1867}#))))
                                       (values
                                         'call
                                         #f
                                         #{e 1760}#
                                         #{w 1762}#
                                         #{s 1763}#
                                         #{mod 1765}#)))))))))))))))
           (if (#{syntax-object? 309}# #{e 1760}#)
             (#{syntax-type 421}#
               (#{syntax-object-expression 311}# #{e 1760}#)
               #{r 1761}#
               (#{join-wraps 391}#
                 #{w 1762}#
                 (#{syntax-object-wrap 313}# #{e 1760}#))
               (begin
                 (let ((#{t 1882}#
                         (#{source-annotation 324}# #{e 1760}#)))
                   (if #{t 1882}# #{t 1882}# #{s 1763}#)))
               #{rib 1764}#
               (begin
                 (let ((#{t 1886}#
                         (#{syntax-object-module 315}# #{e 1760}#)))
                   (if #{t 1886}# #{t 1886}# #{mod 1765}#)))
               #{for-car? 1766}#)
             (if (self-evaluating? #{e 1760}#)
               (values
                 'constant
                 #f
                 #{e 1760}#
                 #{w 1762}#
                 #{s 1763}#
                 #{mod 1765}#)
               (values
                 'other
                 #f
                 #{e 1760}#
                 #{w 1762}#
                 #{s 1763}#
                 #{mod 1765}#)))))))
   (#{chi 423}#
     (lambda (#{e 1891}# #{r 1892}# #{w 1893}# #{mod 1894}#)
       (call-with-values
         (lambda ()
           (#{syntax-type 421}#
             #{e 1891}#
             #{r 1892}#
             #{w 1893}#
             (#{source-annotation 324}# #{e 1891}#)
             #f
             #{mod 1894}#
             #f))
         (lambda (#{type 1899}#
                  #{value 1900}#
                  #{e 1901}#
                  #{w 1902}#
                  #{s 1903}#
                  #{mod 1904}#)
           (#{chi-expr 425}#
             #{type 1899}#
             #{value 1900}#
             #{e 1901}#
             #{r 1892}#
             #{w 1902}#
             #{s 1903}#
             #{mod 1904}#)))))
   (#{chi-expr 425}#
     (lambda (#{type 1911}#
              #{value 1912}#
              #{e 1913}#
              #{r 1914}#
              #{w 1915}#
              #{s 1916}#
              #{mod 1917}#)
       (if (memv #{type 1911}# '(lexical))
         (#{build-lexical-reference 273}#
           'value
           #{s 1916}#
           #{e 1913}#
           #{value 1912}#)
         (if (memv #{type 1911}# '(core core-form))
           (#{value 1912}#
             #{e 1913}#
             #{r 1914}#
             #{w 1915}#
             #{s 1916}#
             #{mod 1917}#)
           (if (memv #{type 1911}# '(module-ref))
             (call-with-values
               (lambda ()
                 (#{value 1912}# #{e 1913}# #{r 1914}# #{w 1915}#))
               (lambda (#{e 1928}#
                        #{r 1929}#
                        #{w 1930}#
                        #{s 1931}#
                        #{mod 1932}#)
                 (#{chi 423}#
                   #{e 1928}#
                   #{r 1929}#
                   #{w 1930}#
                   #{mod 1932}#)))
             (if (memv #{type 1911}# '(lexical-call))
               (#{chi-call 427}#
                 (begin
                   (let ((#{id 1940}# (car #{e 1913}#)))
                     (#{build-lexical-reference 273}#
                       'fun
                       (#{source-annotation 324}# #{id 1940}#)
                       (if (#{syntax-object? 309}# #{id 1940}#)
                         (syntax->datum #{id 1940}#)
                         #{id 1940}#)
                       #{value 1912}#)))
                 #{e 1913}#
                 #{r 1914}#
                 #{w 1915}#
                 #{s 1916}#
                 #{mod 1917}#)
               (if (memv #{type 1911}# '(global-call))
                 (#{chi-call 427}#
                   (#{build-global-reference 279}#
                     (#{source-annotation 324}# (car #{e 1913}#))
                     (if (#{syntax-object? 309}# #{value 1912}#)
                       (#{syntax-object-expression 311}# #{value 1912}#)
                       #{value 1912}#)
                     (if (#{syntax-object? 309}# #{value 1912}#)
                       (#{syntax-object-module 315}# #{value 1912}#)
                       #{mod 1917}#))
                   #{e 1913}#
                   #{r 1914}#
                   #{w 1915}#
                   #{s 1916}#
                   #{mod 1917}#)
                 (if (memv #{type 1911}# '(constant))
                   (#{build-data 295}#
                     #{s 1916}#
                     (#{strip 449}#
                       (#{source-wrap 411}#
                         #{e 1913}#
                         #{w 1915}#
                         #{s 1916}#
                         #{mod 1917}#)
                       '(())))
                   (if (memv #{type 1911}# '(global))
                     (#{build-global-reference 279}#
                       #{s 1916}#
                       #{value 1912}#
                       #{mod 1917}#)
                     (if (memv #{type 1911}# '(call))
                       (#{chi-call 427}#
                         (#{chi 423}#
                           (car #{e 1913}#)
                           #{r 1914}#
                           #{w 1915}#
                           #{mod 1917}#)
                         #{e 1913}#
                         #{r 1914}#
                         #{w 1915}#
                         #{s 1916}#
                         #{mod 1917}#)
                       (if (memv #{type 1911}# '(begin-form))
                         (let ((#{tmp 1947}# #{e 1913}#))
                           (let ((#{tmp 1948}#
                                   ($sc-dispatch
                                     #{tmp 1947}#
                                     '(_ any . each-any))))
                             (if #{tmp 1948}#
                               (@apply
                                 (lambda (#{e1 1951}# #{e2 1952}#)
                                   (#{chi-sequence 413}#
                                     (cons #{e1 1951}# #{e2 1952}#)
                                     #{r 1914}#
                                     #{w 1915}#
                                     #{s 1916}#
                                     #{mod 1917}#))
                                 #{tmp 1948}#)
                               (syntax-violation
                                 #f
                                 "source expression failed to match any pattern"
                                 #{tmp 1947}#))))
                         (if (memv #{type 1911}# '(local-syntax-form))
                           (#{chi-local-syntax 433}#
                             #{value 1912}#
                             #{e 1913}#
                             #{r 1914}#
                             #{w 1915}#
                             #{s 1916}#
                             #{mod 1917}#
                             #{chi-sequence 413}#)
                           (if (memv #{type 1911}# '(eval-when-form))
                             (let ((#{tmp 1956}# #{e 1913}#))
                               (let ((#{tmp 1957}#
                                       ($sc-dispatch
                                         #{tmp 1956}#
                                         '(_ each-any any . each-any))))
                                 (if #{tmp 1957}#
                                   (@apply
                                     (lambda (#{x 1961}#
                                              #{e1 1962}#
                                              #{e2 1963}#)
                                       (begin
                                         (let ((#{when-list 1965}#
                                                 (#{chi-when-list 419}#
                                                   #{e 1913}#
                                                   #{x 1961}#
                                                   #{w 1915}#)))
                                           (if (memq 'eval #{when-list 1965}#)
                                             (#{chi-sequence 413}#
                                               (cons #{e1 1962}# #{e2 1963}#)
                                               #{r 1914}#
                                               #{w 1915}#
                                               #{s 1916}#
                                               #{mod 1917}#)
                                             (#{chi-void 437}#)))))
                                     #{tmp 1957}#)
                                   (syntax-violation
                                     #f
                                     "source expression failed to match any pattern"
                                     #{tmp 1956}#))))
                             (if (memv #{type 1911}#
                                       '(define-form define-syntax-form))
                               (syntax-violation
                                 #f
                                 "definition in expression context"
                                 #{e 1913}#
                                 (#{wrap 409}#
                                   #{value 1912}#
                                   #{w 1915}#
                                   #{mod 1917}#))
                               (if (memv #{type 1911}# '(syntax))
                                 (syntax-violation
                                   #f
                                   "reference to pattern variable outside syntax form"
                                   (#{source-wrap 411}#
                                     #{e 1913}#
                                     #{w 1915}#
                                     #{s 1916}#
                                     #{mod 1917}#))
                                 (if (memv #{type 1911}# '(displaced-lexical))
                                   (syntax-violation
                                     #f
                                     "reference to identifier outside its scope"
                                     (#{source-wrap 411}#
                                       #{e 1913}#
                                       #{w 1915}#
                                       #{s 1916}#
                                       #{mod 1917}#))
                                   (syntax-violation
                                     #f
                                     "unexpected syntax"
                                     (#{source-wrap 411}#
                                       #{e 1913}#
                                       #{w 1915}#
                                       #{s 1916}#
                                       #{mod 1917}#))))))))))))))))))
   (#{chi-call 427}#
     (lambda (#{x 1972}#
              #{e 1973}#
              #{r 1974}#
              #{w 1975}#
              #{s 1976}#
              #{mod 1977}#)
       (let ((#{tmp 1984}# #{e 1973}#))
         (let ((#{tmp 1985}#
                 ($sc-dispatch #{tmp 1984}# '(any . each-any))))
           (if #{tmp 1985}#
             (@apply
               (lambda (#{e0 1988}# #{e1 1989}#)
                 (#{build-call 267}#
                   #{s 1976}#
                   #{x 1972}#
                   (map (lambda (#{e 1990}#)
                          (#{chi 423}#
                            #{e 1990}#
                            #{r 1974}#
                            #{w 1975}#
                            #{mod 1977}#))
                        #{e1 1989}#)))
               #{tmp 1985}#)
             (syntax-violation
               #f
               "source expression failed to match any pattern"
               #{tmp 1984}#))))))
   (#{chi-macro 429}#
     (lambda (#{p 1993}#
              #{e 1994}#
              #{r 1995}#
              #{w 1996}#
              #{s 1997}#
              #{rib 1998}#
              #{mod 1999}#)
       (letrec*
         ((#{rebuild-macro-output 2008}#
            (lambda (#{x 2009}# #{m 2010}#)
              (if (pair? #{x 2009}#)
                (#{decorate-source 261}#
                  (cons (#{rebuild-macro-output 2008}#
                          (car #{x 2009}#)
                          #{m 2010}#)
                        (#{rebuild-macro-output 2008}#
                          (cdr #{x 2009}#)
                          #{m 2010}#))
                  #{s 1997}#)
                (if (#{syntax-object? 309}# #{x 2009}#)
                  (begin
                    (let ((#{w 2018}#
                            (#{syntax-object-wrap 313}# #{x 2009}#)))
                      (begin
                        (let ((#{ms 2021}# (car #{w 2018}#))
                              (#{s 2022}# (cdr #{w 2018}#)))
                          (if (if (pair? #{ms 2021}#)
                                (eq? (car #{ms 2021}#) #f)
                                #f)
                            (#{make-syntax-object 307}#
                              (#{syntax-object-expression 311}# #{x 2009}#)
                              (cons (cdr #{ms 2021}#)
                                    (if #{rib 1998}#
                                      (cons #{rib 1998}# (cdr #{s 2022}#))
                                      (cdr #{s 2022}#)))
                              (#{syntax-object-module 315}# #{x 2009}#))
                            (#{make-syntax-object 307}#
                              (#{decorate-source 261}#
                                (#{syntax-object-expression 311}# #{x 2009}#)
                                #{s 2022}#)
                              (cons (cons #{m 2010}# #{ms 2021}#)
                                    (if #{rib 1998}#
                                      (cons #{rib 1998}#
                                            (cons 'shift #{s 2022}#))
                                      (cons 'shift #{s 2022}#)))
                              (#{syntax-object-module 315}# #{x 2009}#)))))))
                  (if (vector? #{x 2009}#)
                    (begin
                      (let ((#{n 2034}# (vector-length #{x 2009}#)))
                        (begin
                          (let ((#{v 2036}#
                                  (#{decorate-source 261}#
                                    (make-vector #{n 2034}#)
                                    #{x 2009}#)))
                            (letrec*
                              ((#{loop 2039}#
                                 (lambda (#{i 2040}#)
                                   (if (= #{i 2040}# #{n 2034}#)
                                     (begin (if #f #f) #{v 2036}#)
                                     (begin
                                       (vector-set!
                                         #{v 2036}#
                                         #{i 2040}#
                                         (#{rebuild-macro-output 2008}#
                                           (vector-ref #{x 2009}# #{i 2040}#)
                                           #{m 2010}#))
                                       (#{loop 2039}# (#{1+}# #{i 2040}#)))))))
                              (begin (#{loop 2039}# 0)))))))
                    (if (symbol? #{x 2009}#)
                      (syntax-violation
                        #f
                        "encountered raw symbol in macro output"
                        (#{source-wrap 411}#
                          #{e 1994}#
                          #{w 1996}#
                          (cdr #{w 1996}#)
                          #{mod 1999}#)
                        #{x 2009}#)
                      (#{decorate-source 261}# #{x 2009}# #{s 1997}#))))))))
         (begin
           (#{rebuild-macro-output 2008}#
             (#{p 1993}#
               (#{source-wrap 411}#
                 #{e 1994}#
                 (#{anti-mark 381}# #{w 1996}#)
                 #{s 1997}#
                 #{mod 1999}#))
             (gensym "m"))))))
   (#{chi-body 431}#
     (lambda (#{body 2050}#
              #{outer-form 2051}#
              #{r 2052}#
              #{w 2053}#
              #{mod 2054}#)
       (begin
         (let ((#{r 2062}#
                 (cons '("placeholder" placeholder) #{r 2052}#)))
           (begin
             (let ((#{ribcage 2064}#
                     (#{make-ribcage 361}# '() '() '())))
               (begin
                 (let ((#{w 2067}#
                         (cons (car #{w 2053}#)
                               (cons #{ribcage 2064}# (cdr #{w 2053}#)))))
                   (letrec*
                     ((#{parse 2079}#
                        (lambda (#{body 2080}#
                                 #{ids 2081}#
                                 #{labels 2082}#
                                 #{var-ids 2083}#
                                 #{vars 2084}#
                                 #{vals 2085}#
                                 #{bindings 2086}#)
                          (if (null? #{body 2080}#)
                            (syntax-violation
                              #f
                              "no expressions in body"
                              #{outer-form 2051}#)
                            (begin
                              (let ((#{e 2091}# (cdr (car #{body 2080}#)))
                                    (#{er 2092}# (car (car #{body 2080}#))))
                                (call-with-values
                                  (lambda ()
                                    (#{syntax-type 421}#
                                      #{e 2091}#
                                      #{er 2092}#
                                      '(())
                                      (#{source-annotation 324}# #{er 2092}#)
                                      #{ribcage 2064}#
                                      #{mod 2054}#
                                      #f))
                                  (lambda (#{type 2094}#
                                           #{value 2095}#
                                           #{e 2096}#
                                           #{w 2097}#
                                           #{s 2098}#
                                           #{mod 2099}#)
                                    (if (memv #{type 2094}# '(define-form))
                                      (begin
                                        (let ((#{id 2109}#
                                                (#{wrap 409}#
                                                  #{value 2095}#
                                                  #{w 2097}#
                                                  #{mod 2099}#))
                                              (#{label 2110}#
                                                (#{gen-label 356}#)))
                                          (begin
                                            (let ((#{var 2112}#
                                                    (#{gen-var 451}#
                                                      #{id 2109}#)))
                                              (begin
                                                (#{extend-ribcage! 385}#
                                                  #{ribcage 2064}#
                                                  #{id 2109}#
                                                  #{label 2110}#)
                                                (#{parse 2079}#
                                                  (cdr #{body 2080}#)
                                                  (cons #{id 2109}#
                                                        #{ids 2081}#)
                                                  (cons #{label 2110}#
                                                        #{labels 2082}#)
                                                  (cons #{id 2109}#
                                                        #{var-ids 2083}#)
                                                  (cons #{var 2112}#
                                                        #{vars 2084}#)
                                                  (cons (cons #{er 2092}#
                                                              (#{wrap 409}#
                                                                #{e 2096}#
                                                                #{w 2097}#
                                                                #{mod 2099}#))
                                                        #{vals 2085}#)
                                                  (cons (cons 'lexical
                                                              #{var 2112}#)
                                                        #{bindings 2086}#)))))))
                                      (if (memv #{type 2094}#
                                                '(define-syntax-form))
                                        (begin
                                          (let ((#{id 2117}#
                                                  (#{wrap 409}#
                                                    #{value 2095}#
                                                    #{w 2097}#
                                                    #{mod 2099}#))
                                                (#{label 2118}#
                                                  (#{gen-label 356}#)))
                                            (begin
                                              (#{extend-ribcage! 385}#
                                                #{ribcage 2064}#
                                                #{id 2117}#
                                                #{label 2118}#)
                                              (#{parse 2079}#
                                                (cdr #{body 2080}#)
                                                (cons #{id 2117}# #{ids 2081}#)
                                                (cons #{label 2118}#
                                                      #{labels 2082}#)
                                                #{var-ids 2083}#
                                                #{vars 2084}#
                                                #{vals 2085}#
                                                (cons (cons 'macro
                                                            (cons #{er 2092}#
                                                                  (#{wrap 409}#
                                                                    #{e 2096}#
                                                                    #{w 2097}#
                                                                    #{mod 2099}#)))
                                                      #{bindings 2086}#)))))
                                        (if (memv #{type 2094}# '(begin-form))
                                          (let ((#{tmp 2121}# #{e 2096}#))
                                            (let ((#{tmp 2122}#
                                                    ($sc-dispatch
                                                      #{tmp 2121}#
                                                      '(_ . each-any))))
                                              (if #{tmp 2122}#
                                                (@apply
                                                  (lambda (#{e1 2124}#)
                                                    (#{parse 2079}#
                                                      (letrec*
                                                        ((#{f 2127}#
                                                           (lambda (#{forms 2128}#)
                                                             (if (null? #{forms 2128}#)
                                                               (cdr #{body 2080}#)
                                                               (cons (cons #{er 2092}#
                                                                           (#{wrap 409}#
                                                                             (car #{forms 2128}#)
                                                                             #{w 2097}#
                                                                             #{mod 2099}#))
                                                                     (#{f 2127}#
                                                                       (cdr #{forms 2128}#)))))))
                                                        (begin
                                                          (#{f 2127}#
                                                            #{e1 2124}#)))
                                                      #{ids 2081}#
                                                      #{labels 2082}#
                                                      #{var-ids 2083}#
                                                      #{vars 2084}#
                                                      #{vals 2085}#
                                                      #{bindings 2086}#))
                                                  #{tmp 2122}#)
                                                (syntax-violation
                                                  #f
                                                  "source expression failed to match any pattern"
                                                  #{tmp 2121}#))))
                                          (if (memv #{type 2094}#
                                                    '(local-syntax-form))
                                            (#{chi-local-syntax 433}#
                                              #{value 2095}#
                                              #{e 2096}#
                                              #{er 2092}#
                                              #{w 2097}#
                                              #{s 2098}#
                                              #{mod 2099}#
                                              (lambda (#{forms 2131}#
                                                       #{er 2132}#
                                                       #{w 2133}#
                                                       #{s 2134}#
                                                       #{mod 2135}#)
                                                (#{parse 2079}#
                                                  (letrec*
                                                    ((#{f 2143}#
                                                       (lambda (#{forms 2144}#)
                                                         (if (null? #{forms 2144}#)
                                                           (cdr #{body 2080}#)
                                                           (cons (cons #{er 2132}#
                                                                       (#{wrap 409}#
                                                                         (car #{forms 2144}#)
                                                                         #{w 2133}#
                                                                         #{mod 2135}#))
                                                                 (#{f 2143}#
                                                                   (cdr #{forms 2144}#)))))))
                                                    (begin
                                                      (#{f 2143}#
                                                        #{forms 2131}#)))
                                                  #{ids 2081}#
                                                  #{labels 2082}#
                                                  #{var-ids 2083}#
                                                  #{vars 2084}#
                                                  #{vals 2085}#
                                                  #{bindings 2086}#)))
                                            (if (null? #{ids 2081}#)
                                              (#{build-sequence 297}#
                                                #f
                                                (map (lambda (#{x 2147}#)
                                                       (#{chi 423}#
                                                         (cdr #{x 2147}#)
                                                         (car #{x 2147}#)
                                                         '(())
                                                         #{mod 2099}#))
                                                     (cons (cons #{er 2092}#
                                                                 (#{source-wrap 411}#
                                                                   #{e 2096}#
                                                                   #{w 2097}#
                                                                   #{s 2098}#
                                                                   #{mod 2099}#))
                                                           (cdr #{body 2080}#))))
                                              (begin
                                                (if (not (#{valid-bound-ids? 403}#
                                                           #{ids 2081}#))
                                                  (syntax-violation
                                                    #f
                                                    "invalid or duplicate identifier in definition"
                                                    #{outer-form 2051}#))
                                                (letrec*
                                                  ((#{loop 2154}#
                                                     (lambda (#{bs 2155}#
                                                              #{er-cache 2156}#
                                                              #{r-cache 2157}#)
                                                       (if (not (null? #{bs 2155}#))
                                                         (begin
                                                           (let ((#{b 2160}#
                                                                   (car #{bs 2155}#)))
                                                             (if (eq? (car #{b 2160}#)
                                                                      'macro)
                                                               (begin
                                                                 (let ((#{er 2163}#
                                                                         (car (cdr #{b 2160}#))))
                                                                   (begin
                                                                     (let ((#{r-cache 2165}#
                                                                             (if (eq? #{er 2163}#
                                                                                      #{er-cache 2156}#)
                                                                               #{r-cache 2157}#
                                                                               (#{macros-only-env 335}#
                                                                                 #{er 2163}#))))
                                                                       (begin
                                                                         (set-cdr!
                                                                           #{b 2160}#
                                                                           (#{eval-local-transformer 435}#
                                                                             (#{chi 423}#
                                                                               (cdr (cdr #{b 2160}#))
                                                                               #{r-cache 2165}#
                                                                               '(())
                                                                               #{mod 2099}#)
                                                                             #{mod 2099}#))
                                                                         (#{loop 2154}#
                                                                           (cdr #{bs 2155}#)
                                                                           #{er 2163}#
                                                                           #{r-cache 2165}#))))))
                                                               (#{loop 2154}#
                                                                 (cdr #{bs 2155}#)
                                                                 #{er-cache 2156}#
                                                                 #{r-cache 2157}#))))))))
                                                  (begin
                                                    (#{loop 2154}#
                                                      #{bindings 2086}#
                                                      #f
                                                      #f)))
                                                (set-cdr!
                                                  #{r 2062}#
                                                  (#{extend-env 331}#
                                                    #{labels 2082}#
                                                    #{bindings 2086}#
                                                    (cdr #{r 2062}#)))
                                                (#{build-letrec 303}#
                                                  #f
                                                  #t
                                                  (reverse
                                                    (map syntax->datum
                                                         #{var-ids 2083}#))
                                                  (reverse #{vars 2084}#)
                                                  (map (lambda (#{x 2168}#)
                                                         (#{chi 423}#
                                                           (cdr #{x 2168}#)
                                                           (car #{x 2168}#)
                                                           '(())
                                                           #{mod 2099}#))
                                                       (reverse #{vals 2085}#))
                                                  (#{build-sequence 297}#
                                                    #f
                                                    (map (lambda (#{x 2172}#)
                                                           (#{chi 423}#
                                                             (cdr #{x 2172}#)
                                                             (car #{x 2172}#)
                                                             '(())
                                                             #{mod 2099}#))
                                                         (cons (cons #{er 2092}#
                                                                     (#{source-wrap 411}#
                                                                       #{e 2096}#
                                                                       #{w 2097}#
                                                                       #{s 2098}#
                                                                       #{mod 2099}#))
                                                               (cdr #{body 2080}#)))))))))))))))))))
                     (begin
                       (#{parse 2079}#
                         (map (lambda (#{x 2087}#)
                                (cons #{r 2062}#
                                      (#{wrap 409}#
                                        #{x 2087}#
                                        #{w 2067}#
                                        #{mod 2054}#)))
                              #{body 2050}#)
                         '()
                         '()
                         '()
                         '()
                         '()
                         '())))))))))))
   (#{chi-local-syntax 433}#
     (lambda (#{rec? 2175}#
              #{e 2176}#
              #{r 2177}#
              #{w 2178}#
              #{s 2179}#
              #{mod 2180}#
              #{k 2181}#)
       (let ((#{tmp 2189}# #{e 2176}#))
         (let ((#{tmp 2190}#
                 ($sc-dispatch
                   #{tmp 2189}#
                   '(_ #(each (any any)) any . each-any))))
           (if #{tmp 2190}#
             (@apply
               (lambda (#{id 2195}#
                        #{val 2196}#
                        #{e1 2197}#
                        #{e2 2198}#)
                 (begin
                   (let ((#{ids 2200}# #{id 2195}#))
                     (if (not (#{valid-bound-ids? 403}# #{ids 2200}#))
                       (syntax-violation
                         #f
                         "duplicate bound keyword"
                         #{e 2176}#)
                       (begin
                         (let ((#{labels 2203}#
                                 (#{gen-labels 358}# #{ids 2200}#)))
                           (begin
                             (let ((#{new-w 2205}#
                                     (#{make-binding-wrap 387}#
                                       #{ids 2200}#
                                       #{labels 2203}#
                                       #{w 2178}#)))
                               (#{k 2181}#
                                 (cons #{e1 2197}# #{e2 2198}#)
                                 (#{extend-env 331}#
                                   #{labels 2203}#
                                   (begin
                                     (let ((#{w 2209}#
                                             (if #{rec? 2175}#
                                               #{new-w 2205}#
                                               #{w 2178}#))
                                           (#{trans-r 2210}#
                                             (#{macros-only-env 335}#
                                               #{r 2177}#)))
                                       (map (lambda (#{x 2211}#)
                                              (cons 'macro
                                                    (#{eval-local-transformer 435}#
                                                      (#{chi 423}#
                                                        #{x 2211}#
                                                        #{trans-r 2210}#
                                                        #{w 2209}#
                                                        #{mod 2180}#)
                                                      #{mod 2180}#)))
                                            #{val 2196}#)))
                                   #{r 2177}#)
                                 #{new-w 2205}#
                                 #{s 2179}#
                                 #{mod 2180}#)))))))))
               #{tmp 2190}#)
             (let ((#{_ 2216}# #{tmp 2189}#))
               (syntax-violation
                 #f
                 "bad local syntax definition"
                 (#{source-wrap 411}#
                   #{e 2176}#
                   #{w 2178}#
                   #{s 2179}#
                   #{mod 2180}#))))))))
   (#{eval-local-transformer 435}#
     (lambda (#{expanded 2217}# #{mod 2218}#)
       (begin
         (let ((#{p 2222}#
                 (#{local-eval-hook 254}#
                   #{expanded 2217}#
                   #{mod 2218}#)))
           (if (procedure? #{p 2222}#)
             #{p 2222}#
             (syntax-violation
               #f
               "nonprocedure transformer"
               #{p 2222}#))))))
   (#{chi-void 437}#
     (lambda () (#{build-void 265}# #f)))
   (#{ellipsis? 439}#
     (lambda (#{x 2224}#)
       (if (#{nonsymbol-id? 341}# #{x 2224}#)
         (#{free-id=? 399}#
           #{x 2224}#
           '#(syntax-object
              ...
              ((top)
               #(ribcage () () ())
               #(ribcage () () ())
               #(ribcage #(x) #((top)) #("i2225"))
               #(ribcage
                 (lambda-var-list
                   gen-var
                   strip
                   chi-lambda-case
                   lambda*-formals
                   chi-simple-lambda
                   lambda-formals
                   ellipsis?
                   chi-void
                   eval-local-transformer
                   chi-local-syntax
                   chi-body
                   chi-macro
                   chi-call
                   chi-expr
                   chi
                   syntax-type
                   chi-when-list
                   chi-install-global
                   chi-top-sequence
                   chi-sequence
                   source-wrap
                   wrap
                   bound-id-member?
                   distinct-bound-ids?
                   valid-bound-ids?
                   bound-id=?
                   free-id=?
                   id-var-name
                   same-marks?
                   join-marks
                   join-wraps
                   smart-append
                   make-binding-wrap
                   extend-ribcage!
                   make-empty-ribcage
                   new-mark
                   anti-mark
                   the-anti-mark
                   top-marked?
                   top-wrap
                   empty-wrap
                   set-ribcage-labels!
                   set-ribcage-marks!
                   set-ribcage-symnames!
                   ribcage-labels
                   ribcage-marks
                   ribcage-symnames
                   ribcage?
                   make-ribcage
                   gen-labels
                   gen-label
                   make-rename
                   rename-marks
                   rename-new
                   rename-old
                   subst-rename?
                   wrap-subst
                   wrap-marks
                   make-wrap
                   id-sym-name&marks
                   id-sym-name
                   id?
                   nonsymbol-id?
                   global-extend
                   lookup
                   macros-only-env
                   extend-var-env
                   extend-env
                   null-env
                   binding-value
                   binding-type
                   make-binding
                   arg-check
                   source-annotation
                   no-source
                   set-syntax-object-module!
                   set-syntax-object-wrap!
                   set-syntax-object-expression!
                   syntax-object-module
                   syntax-object-wrap
                   syntax-object-expression
                   syntax-object?
                   make-syntax-object
                   build-lexical-var
                   build-letrec
                   build-named-let
                   build-let
                   build-sequence
                   build-data
                   build-primref
                   build-primcall
                   build-lambda-case
                   build-case-lambda
                   build-simple-lambda
                   build-global-definition
                   build-global-assignment
                   build-global-reference
                   analyze-variable
                   build-lexical-assignment
                   build-lexical-reference
                   build-dynlet
                   build-conditional
                   build-call
                   build-void
                   maybe-name-value!
                   decorate-source
                   get-global-definition-hook
                   put-global-definition-hook
                   gensym-hook
                   local-eval-hook
                   top-level-eval-hook
                   fx<
                   fx=
                   fx-
                   fx+
                   set-lambda-meta!
                   lambda-meta
                   lambda?
                   make-dynlet
                   make-letrec
                   make-let
                   make-lambda-case
                   make-lambda
                   make-sequence
                   make-primcall
                   make-call
                   make-conditional
                   make-toplevel-define
                   make-toplevel-set
                   make-toplevel-ref
                   make-module-set
                   make-module-ref
                   make-lexical-set
                   make-lexical-ref
                   make-primitive-ref
                   make-const
                   make-void)
                 ((top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top))
                 ("i452"
                  "i450"
                  "i448"
                  "i446"
                  "i444"
                  "i442"
                  "i440"
                  "i438"
                  "i436"
                  "i434"
                  "i432"
                  "i430"
                  "i428"
                  "i426"
                  "i424"
                  "i422"
                  "i420"
                  "i418"
                  "i416"
                  "i414"
                  "i412"
                  "i410"
                  "i408"
                  "i406"
                  "i404"
                  "i402"
                  "i400"
                  "i398"
                  "i396"
                  "i394"
                  "i392"
                  "i390"
                  "i388"
                  "i386"
                  "i384"
                  "i383"
                  "i382"
                  "i380"
                  "i379"
                  "i378"
                  "i377"
                  "i376"
                  "i374"
                  "i372"
                  "i370"
                  "i368"
                  "i366"
                  "i364"
                  "i362"
                  "i360"
                  "i357"
                  "i355"
                  "i354"
                  "i353"
                  "i352"
                  "i351"
                  "i350"
                  "i349"
                  "i348"
                  "i347"
                  "i345"
                  "i344"
                  "i342"
                  "i340"
                  "i338"
                  "i336"
                  "i334"
                  "i332"
                  "i330"
                  "i329"
                  "i328"
                  "i327"
                  "i326"
                  "i325"
                  "i323"
                  "i322"
                  "i320"
                  "i318"
                  "i316"
                  "i314"
                  "i312"
                  "i310"
                  "i308"
                  "i306"
                  "i304"
                  "i302"
                  "i300"
                  "i298"
                  "i296"
                  "i294"
                  "i292"
                  "i290"
                  "i288"
                  "i286"
                  "i284"
                  "i282"
                  "i280"
                  "i278"
                  "i276"
                  "i274"
                  "i272"
                  "i270"
                  "i268"
                  "i266"
                  "i264"
                  "i262"
                  "i260"
                  "i258"
                  "i256"
                  "i255"
                  "i253"
                  "i251"
                  "i250"
                  "i249"
                  "i248"
                  "i247"
                  "i245"
                  "i243"
                  "i241"
                  "i238"
                  "i236"
                  "i234"
                  "i232"
                  "i230"
                  "i228"
                  "i226"
                  "i224"
                  "i222"
                  "i220"
                  "i218"
                  "i216"
                  "i214"
                  "i212"
                  "i210"
                  "i208"
                  "i206"
                  "i204"
                  "i202"))
               #(ribcage
                 (define-structure
                   define-expansion-accessors
                   define-expansion-constructors)
                 ((top) (top) (top))
                 ("i40" "i39" "i38")))
              (hygiene guile)))
         #f)))
   (#{lambda-formals 441}#
     (lambda (#{orig-args 2228}#)
       (letrec*
         ((#{req 2231}#
            (lambda (#{args 2234}# #{rreq 2235}#)
              (let ((#{tmp 2238}# #{args 2234}#))
                (let ((#{tmp 2239}# ($sc-dispatch #{tmp 2238}# '())))
                  (if #{tmp 2239}#
                    (@apply
                      (lambda ()
                        (#{check 2233}# (reverse #{rreq 2235}#) #f))
                      #{tmp 2239}#)
                    (let ((#{tmp 2240}#
                            ($sc-dispatch #{tmp 2238}# '(any . any))))
                      (if (if #{tmp 2240}#
                            (@apply
                              (lambda (#{a 2243}# #{b 2244}#)
                                (#{id? 343}# #{a 2243}#))
                              #{tmp 2240}#)
                            #f)
                        (@apply
                          (lambda (#{a 2247}# #{b 2248}#)
                            (#{req 2231}#
                              #{b 2248}#
                              (cons #{a 2247}# #{rreq 2235}#)))
                          #{tmp 2240}#)
                        (let ((#{tmp 2249}# (list #{tmp 2238}#)))
                          (if (if #{tmp 2249}#
                                (@apply
                                  (lambda (#{r 2251}#)
                                    (#{id? 343}# #{r 2251}#))
                                  #{tmp 2249}#)
                                #f)
                            (@apply
                              (lambda (#{r 2253}#)
                                (#{check 2233}#
                                  (reverse #{rreq 2235}#)
                                  #{r 2253}#))
                              #{tmp 2249}#)
                            (let ((#{else 2255}# #{tmp 2238}#))
                              (syntax-violation
                                'lambda
                                "invalid argument list"
                                #{orig-args 2228}#
                                #{args 2234}#)))))))))))
          (#{check 2233}#
            (lambda (#{req 2256}# #{rest 2257}#)
              (if (#{distinct-bound-ids? 405}#
                    (if #{rest 2257}#
                      (cons #{rest 2257}# #{req 2256}#)
                      #{req 2256}#))
                (values #{req 2256}# #f #{rest 2257}# #f)
                (syntax-violation
                  'lambda
                  "duplicate identifier in argument list"
                  #{orig-args 2228}#)))))
         (begin (#{req 2231}# #{orig-args 2228}# '())))))
   (#{chi-simple-lambda 443}#
     (lambda (#{e 2263}#
              #{r 2264}#
              #{w 2265}#
              #{s 2266}#
              #{mod 2267}#
              #{req 2268}#
              #{rest 2269}#
              #{meta 2270}#
              #{body 2271}#)
       (begin
         (let ((#{ids 2283}#
                 (if #{rest 2269}#
                   (append #{req 2268}# (list #{rest 2269}#))
                   #{req 2268}#)))
           (begin
             (let ((#{vars 2285}#
                     (map #{gen-var 451}# #{ids 2283}#)))
               (begin
                 (let ((#{labels 2287}#
                         (#{gen-labels 358}# #{ids 2283}#)))
                   (#{build-simple-lambda 285}#
                     #{s 2266}#
                     (map syntax->datum #{req 2268}#)
                     (if #{rest 2269}#
                       (syntax->datum #{rest 2269}#)
                       #f)
                     #{vars 2285}#
                     #{meta 2270}#
                     (#{chi-body 431}#
                       #{body 2271}#
                       (#{source-wrap 411}#
                         #{e 2263}#
                         #{w 2265}#
                         #{s 2266}#
                         #{mod 2267}#)
                       (#{extend-var-env 333}#
                         #{labels 2287}#
                         #{vars 2285}#
                         #{r 2264}#)
                       (#{make-binding-wrap 387}#
                         #{ids 2283}#
                         #{labels 2287}#
                         #{w 2265}#)
                       #{mod 2267}#))))))))))
   (#{lambda*-formals 445}#
     (lambda (#{orig-args 2290}#)
       (letrec*
         ((#{req 2293}#
            (lambda (#{args 2302}# #{rreq 2303}#)
              (let ((#{tmp 2306}# #{args 2302}#))
                (let ((#{tmp 2307}# ($sc-dispatch #{tmp 2306}# '())))
                  (if #{tmp 2307}#
                    (@apply
                      (lambda ()
                        (#{check 2301}#
                          (reverse #{rreq 2303}#)
                          '()
                          #f
                          '()))
                      #{tmp 2307}#)
                    (let ((#{tmp 2308}#
                            ($sc-dispatch #{tmp 2306}# '(any . any))))
                      (if (if #{tmp 2308}#
                            (@apply
                              (lambda (#{a 2311}# #{b 2312}#)
                                (#{id? 343}# #{a 2311}#))
                              #{tmp 2308}#)
                            #f)
                        (@apply
                          (lambda (#{a 2315}# #{b 2316}#)
                            (#{req 2293}#
                              #{b 2316}#
                              (cons #{a 2315}# #{rreq 2303}#)))
                          #{tmp 2308}#)
                        (let ((#{tmp 2317}#
                                ($sc-dispatch #{tmp 2306}# '(any . any))))
                          (if (if #{tmp 2317}#
                                (@apply
                                  (lambda (#{a 2320}# #{b 2321}#)
                                    (eq? (syntax->datum #{a 2320}#)
                                         #:optional))
                                  #{tmp 2317}#)
                                #f)
                            (@apply
                              (lambda (#{a 2324}# #{b 2325}#)
                                (#{opt 2295}#
                                  #{b 2325}#
                                  (reverse #{rreq 2303}#)
                                  '()))
                              #{tmp 2317}#)
                            (let ((#{tmp 2326}#
                                    ($sc-dispatch #{tmp 2306}# '(any . any))))
                              (if (if #{tmp 2326}#
                                    (@apply
                                      (lambda (#{a 2329}# #{b 2330}#)
                                        (eq? (syntax->datum #{a 2329}#) #:key))
                                      #{tmp 2326}#)
                                    #f)
                                (@apply
                                  (lambda (#{a 2333}# #{b 2334}#)
                                    (#{key 2297}#
                                      #{b 2334}#
                                      (reverse #{rreq 2303}#)
                                      '()
                                      '()))
                                  #{tmp 2326}#)
                                (let ((#{tmp 2335}#
                                        ($sc-dispatch
                                          #{tmp 2306}#
                                          '(any any))))
                                  (if (if #{tmp 2335}#
                                        (@apply
                                          (lambda (#{a 2338}# #{b 2339}#)
                                            (eq? (syntax->datum #{a 2338}#)
                                                 #:rest))
                                          #{tmp 2335}#)
                                        #f)
                                    (@apply
                                      (lambda (#{a 2342}# #{b 2343}#)
                                        (#{rest 2299}#
                                          #{b 2343}#
                                          (reverse #{rreq 2303}#)
                                          '()
                                          '()))
                                      #{tmp 2335}#)
                                    (let ((#{tmp 2344}# (list #{tmp 2306}#)))
                                      (if (if #{tmp 2344}#
                                            (@apply
                                              (lambda (#{r 2346}#)
                                                (#{id? 343}# #{r 2346}#))
                                              #{tmp 2344}#)
                                            #f)
                                        (@apply
                                          (lambda (#{r 2348}#)
                                            (#{rest 2299}#
                                              #{r 2348}#
                                              (reverse #{rreq 2303}#)
                                              '()
                                              '()))
                                          #{tmp 2344}#)
                                        (let ((#{else 2350}# #{tmp 2306}#))
                                          (syntax-violation
                                            'lambda*
                                            "invalid argument list"
                                            #{orig-args 2290}#
                                            #{args 2302}#)))))))))))))))))
          (#{opt 2295}#
            (lambda (#{args 2351}# #{req 2352}# #{ropt 2353}#)
              (let ((#{tmp 2357}# #{args 2351}#))
                (let ((#{tmp 2358}# ($sc-dispatch #{tmp 2357}# '())))
                  (if #{tmp 2358}#
                    (@apply
                      (lambda ()
                        (#{check 2301}#
                          #{req 2352}#
                          (reverse #{ropt 2353}#)
                          #f
                          '()))
                      #{tmp 2358}#)
                    (let ((#{tmp 2359}#
                            ($sc-dispatch #{tmp 2357}# '(any . any))))
                      (if (if #{tmp 2359}#
                            (@apply
                              (lambda (#{a 2362}# #{b 2363}#)
                                (#{id? 343}# #{a 2362}#))
                              #{tmp 2359}#)
                            #f)
                        (@apply
                          (lambda (#{a 2366}# #{b 2367}#)
                            (#{opt 2295}#
                              #{b 2367}#
                              #{req 2352}#
                              (cons (cons #{a 2366}#
                                          '(#(syntax-object
                                              #f
                                              ((top)
                                               #(ribcage
                                                 #(a b)
                                                 #((top) (top))
                                                 #("i2364" "i2365"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(args req ropt)
                                                 #((top) (top) (top))
                                                 #("i2354" "i2355" "i2356"))
                                               #(ribcage
                                                 (check rest key opt req)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("i2300"
                                                  "i2298"
                                                  "i2296"
                                                  "i2294"
                                                  "i2292"))
                                               #(ribcage
                                                 #(orig-args)
                                                 #((top))
                                                 #("i2291"))
                                               #(ribcage
                                                 (lambda-var-list
                                                   gen-var
                                                   strip
                                                   chi-lambda-case
                                                   lambda*-formals
                                                   chi-simple-lambda
                                                   lambda-formals
                                                   ellipsis?
                                                   chi-void
                                                   eval-local-transformer
                                                   chi-local-syntax
                                                   chi-body
                                                   chi-macro
                                                   chi-call
                                                   chi-expr
                                                   chi
                                                   syntax-type
                                                   chi-when-list
                                                   chi-install-global
                                                   chi-top-sequence
                                                   chi-sequence
                                                   source-wrap
                                                   wrap
                                                   bound-id-member?
                                                   distinct-bound-ids?
                                                   valid-bound-ids?
                                                   bound-id=?
                                                   free-id=?
                                                   id-var-name
                                                   same-marks?
                                                   join-marks
                                                   join-wraps
                                                   smart-append
                                                   make-binding-wrap
                                                   extend-ribcage!
                                                   make-empty-ribcage
                                                   new-mark
                                                   anti-mark
                                                   the-anti-mark
                                                   top-marked?
                                                   top-wrap
                                                   empty-wrap
                                                   set-ribcage-labels!
                                                   set-ribcage-marks!
                                                   set-ribcage-symnames!
                                                   ribcage-labels
                                                   ribcage-marks
                                                   ribcage-symnames
                                                   ribcage?
                                                   make-ribcage
                                                   gen-labels
                                                   gen-label
                                                   make-rename
                                                   rename-marks
                                                   rename-new
                                                   rename-old
                                                   subst-rename?
                                                   wrap-subst
                                                   wrap-marks
                                                   make-wrap
                                                   id-sym-name&marks
                                                   id-sym-name
                                                   id?
                                                   nonsymbol-id?
                                                   global-extend
                                                   lookup
                                                   macros-only-env
                                                   extend-var-env
                                                   extend-env
                                                   null-env
                                                   binding-value
                                                   binding-type
                                                   make-binding
                                                   arg-check
                                                   source-annotation
                                                   no-source
                                                   set-syntax-object-module!
                                                   set-syntax-object-wrap!
                                                   set-syntax-object-expression!
                                                   syntax-object-module
                                                   syntax-object-wrap
                                                   syntax-object-expression
                                                   syntax-object?
                                                   make-syntax-object
                                                   build-lexical-var
                                                   build-letrec
                                                   build-named-let
                                                   build-let
                                                   build-sequence
                                                   build-data
                                                   build-primref
                                                   build-primcall
                                                   build-lambda-case
                                                   build-case-lambda
                                                   build-simple-lambda
                                                   build-global-definition
                                                   build-global-assignment
                                                   build-global-reference
                                                   analyze-variable
                                                   build-lexical-assignment
                                                   build-lexical-reference
                                                   build-dynlet
                                                   build-conditional
                                                   build-call
                                                   build-void
                                                   maybe-name-value!
                                                   decorate-source
                                                   get-global-definition-hook
                                                   put-global-definition-hook
                                                   gensym-hook
                                                   local-eval-hook
                                                   top-level-eval-hook
                                                   fx<
                                                   fx=
                                                   fx-
                                                   fx+
                                                   set-lambda-meta!
                                                   lambda-meta
                                                   lambda?
                                                   make-dynlet
                                                   make-letrec
                                                   make-let
                                                   make-lambda-case
                                                   make-lambda
                                                   make-sequence
                                                   make-primcall
                                                   make-call
                                                   make-conditional
                                                   make-toplevel-define
                                                   make-toplevel-set
                                                   make-toplevel-ref
                                                   make-module-set
                                                   make-module-ref
                                                   make-lexical-set
                                                   make-lexical-ref
                                                   make-primitive-ref
                                                   make-const
                                                   make-void)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("i452"
                                                  "i450"
                                                  "i448"
                                                  "i446"
                                                  "i444"
                                                  "i442"
                                                  "i440"
                                                  "i438"
                                                  "i436"
                                                  "i434"
                                                  "i432"
                                                  "i430"
                                                  "i428"
                                                  "i426"
                                                  "i424"
                                                  "i422"
                                                  "i420"
                                                  "i418"
                                                  "i416"
                                                  "i414"
                                                  "i412"
                                                  "i410"
                                                  "i408"
                                                  "i406"
                                                  "i404"
                                                  "i402"
                                                  "i400"
                                                  "i398"
                                                  "i396"
                                                  "i394"
                                                  "i392"
                                                  "i390"
                                                  "i388"
                                                  "i386"
                                                  "i384"
                                                  "i383"
                                                  "i382"
                                                  "i380"
                                                  "i379"
                                                  "i378"
                                                  "i377"
                                                  "i376"
                                                  "i374"
                                                  "i372"
                                                  "i370"
                                                  "i368"
                                                  "i366"
                                                  "i364"
                                                  "i362"
                                                  "i360"
                                                  "i357"
                                                  "i355"
                                                  "i354"
                                                  "i353"
                                                  "i352"
                                                  "i351"
                                                  "i350"
                                                  "i349"
                                                  "i348"
                                                  "i347"
                                                  "i345"
                                                  "i344"
                                                  "i342"
                                                  "i340"
                                                  "i338"
                                                  "i336"
                                                  "i334"
                                                  "i332"
                                                  "i330"
                                                  "i329"
                                                  "i328"
                                                  "i327"
                                                  "i326"
                                                  "i325"
                                                  "i323"
                                                  "i322"
                                                  "i320"
                                                  "i318"
                                                  "i316"
                                                  "i314"
                                                  "i312"
                                                  "i310"
                                                  "i308"
                                                  "i306"
                                                  "i304"
                                                  "i302"
                                                  "i300"
                                                  "i298"
                                                  "i296"
                                                  "i294"
                                                  "i292"
                                                  "i290"
                                                  "i288"
                                                  "i286"
                                                  "i284"
                                                  "i282"
                                                  "i280"
                                                  "i278"
                                                  "i276"
                                                  "i274"
                                                  "i272"
                                                  "i270"
                                                  "i268"
                                                  "i266"
                                                  "i264"
                                                  "i262"
                                                  "i260"
                                                  "i258"
                                                  "i256"
                                                  "i255"
                                                  "i253"
                                                  "i251"
                                                  "i250"
                                                  "i249"
                                                  "i248"
                                                  "i247"
                                                  "i245"
                                                  "i243"
                                                  "i241"
                                                  "i238"
                                                  "i236"
                                                  "i234"
                                                  "i232"
                                                  "i230"
                                                  "i228"
                                                  "i226"
                                                  "i224"
                                                  "i222"
                                                  "i220"
                                                  "i218"
                                                  "i216"
                                                  "i214"
                                                  "i212"
                                                  "i210"
                                                  "i208"
                                                  "i206"
                                                  "i204"
                                                  "i202"))
                                               #(ribcage
                                                 (define-structure
                                                   define-expansion-accessors
                                                   define-expansion-constructors)
                                                 ((top) (top) (top))
                                                 ("i40" "i39" "i38")))
                                              (hygiene guile))))
                                    #{ropt 2353}#)))
                          #{tmp 2359}#)
                        (let ((#{tmp 2368}#
                                ($sc-dispatch
                                  #{tmp 2357}#
                                  '((any any) . any))))
                          (if (if #{tmp 2368}#
                                (@apply
                                  (lambda (#{a 2372}# #{init 2373}# #{b 2374}#)
                                    (#{id? 343}# #{a 2372}#))
                                  #{tmp 2368}#)
                                #f)
                            (@apply
                              (lambda (#{a 2378}# #{init 2379}# #{b 2380}#)
                                (#{opt 2295}#
                                  #{b 2380}#
                                  #{req 2352}#
                                  (cons (list #{a 2378}# #{init 2379}#)
                                        #{ropt 2353}#)))
                              #{tmp 2368}#)
                            (let ((#{tmp 2381}#
                                    ($sc-dispatch #{tmp 2357}# '(any . any))))
                              (if (if #{tmp 2381}#
                                    (@apply
                                      (lambda (#{a 2384}# #{b 2385}#)
                                        (eq? (syntax->datum #{a 2384}#) #:key))
                                      #{tmp 2381}#)
                                    #f)
                                (@apply
                                  (lambda (#{a 2388}# #{b 2389}#)
                                    (#{key 2297}#
                                      #{b 2389}#
                                      #{req 2352}#
                                      (reverse #{ropt 2353}#)
                                      '()))
                                  #{tmp 2381}#)
                                (let ((#{tmp 2390}#
                                        ($sc-dispatch
                                          #{tmp 2357}#
                                          '(any any))))
                                  (if (if #{tmp 2390}#
                                        (@apply
                                          (lambda (#{a 2393}# #{b 2394}#)
                                            (eq? (syntax->datum #{a 2393}#)
                                                 #:rest))
                                          #{tmp 2390}#)
                                        #f)
                                    (@apply
                                      (lambda (#{a 2397}# #{b 2398}#)
                                        (#{rest 2299}#
                                          #{b 2398}#
                                          #{req 2352}#
                                          (reverse #{ropt 2353}#)
                                          '()))
                                      #{tmp 2390}#)
                                    (let ((#{tmp 2399}# (list #{tmp 2357}#)))
                                      (if (if #{tmp 2399}#
                                            (@apply
                                              (lambda (#{r 2401}#)
                                                (#{id? 343}# #{r 2401}#))
                                              #{tmp 2399}#)
                                            #f)
                                        (@apply
                                          (lambda (#{r 2403}#)
                                            (#{rest 2299}#
                                              #{r 2403}#
                                              #{req 2352}#
                                              (reverse #{ropt 2353}#)
                                              '()))
                                          #{tmp 2399}#)
                                        (let ((#{else 2405}# #{tmp 2357}#))
                                          (syntax-violation
                                            'lambda*
                                            "invalid optional argument list"
                                            #{orig-args 2290}#
                                            #{args 2351}#)))))))))))))))))
          (#{key 2297}#
            (lambda (#{args 2406}#
                     #{req 2407}#
                     #{opt 2408}#
                     #{rkey 2409}#)
              (let ((#{tmp 2414}# #{args 2406}#))
                (let ((#{tmp 2415}# ($sc-dispatch #{tmp 2414}# '())))
                  (if #{tmp 2415}#
                    (@apply
                      (lambda ()
                        (#{check 2301}#
                          #{req 2407}#
                          #{opt 2408}#
                          #f
                          (cons #f (reverse #{rkey 2409}#))))
                      #{tmp 2415}#)
                    (let ((#{tmp 2416}#
                            ($sc-dispatch #{tmp 2414}# '(any . any))))
                      (if (if #{tmp 2416}#
                            (@apply
                              (lambda (#{a 2419}# #{b 2420}#)
                                (#{id? 343}# #{a 2419}#))
                              #{tmp 2416}#)
                            #f)
                        (@apply
                          (lambda (#{a 2423}# #{b 2424}#)
                            (let ((#{tmp 2426}#
                                    (symbol->keyword
                                      (syntax->datum #{a 2423}#))))
                              (let ((#{k 2428}# #{tmp 2426}#))
                                (#{key 2297}#
                                  #{b 2424}#
                                  #{req 2407}#
                                  #{opt 2408}#
                                  (cons (cons #{k 2428}#
                                              (cons #{a 2423}#
                                                    '(#(syntax-object
                                                        #f
                                                        ((top)
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(k)
                                                           #((top))
                                                           #("i2427"))
                                                         #(ribcage
                                                           #(a b)
                                                           #((top) (top))
                                                           #("i2421" "i2422"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(args req opt rkey)
                                                           #((top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                           #("i2410"
                                                             "i2411"
                                                             "i2412"
                                                             "i2413"))
                                                         #(ribcage
                                                           (check rest
                                                                  key
                                                                  opt
                                                                  req)
                                                           ((top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top))
                                                           ("i2300"
                                                            "i2298"
                                                            "i2296"
                                                            "i2294"
                                                            "i2292"))
                                                         #(ribcage
                                                           #(orig-args)
                                                           #((top))
                                                           #("i2291"))
                                                         #(ribcage
                                                           (lambda-var-list
                                                             gen-var
                                                             strip
                                                             chi-lambda-case
                                                             lambda*-formals
                                                             chi-simple-lambda
                                                             lambda-formals
                                                             ellipsis?
                                                             chi-void
                                                             eval-local-transformer
                                                             chi-local-syntax
                                                             chi-body
                                                             chi-macro
                                                             chi-call
                                                             chi-expr
                                                             chi
                                                             syntax-type
                                                             chi-when-list
                                                             chi-install-global
                                                             chi-top-sequence
                                                             chi-sequence
                                                             source-wrap
                                                             wrap
                                                             bound-id-member?
                                                             distinct-bound-ids?
                                                             valid-bound-ids?
                                                             bound-id=?
                                                             free-id=?
                                                             id-var-name
                                                             same-marks?
                                                             join-marks
                                                             join-wraps
                                                             smart-append
                                                             make-binding-wrap
                                                             extend-ribcage!
                                                             make-empty-ribcage
                                                             new-mark
                                                             anti-mark
                                                             the-anti-mark
                                                             top-marked?
                                                             top-wrap
                                                             empty-wrap
                                                             set-ribcage-labels!
                                                             set-ribcage-marks!
                                                             set-ribcage-symnames!
                                                             ribcage-labels
                                                             ribcage-marks
                                                             ribcage-symnames
                                                             ribcage?
                                                             make-ribcage
                                                             gen-labels
                                                             gen-label
                                                             make-rename
                                                             rename-marks
                                                             rename-new
                                                             rename-old
                                                             subst-rename?
                                                             wrap-subst
                                                             wrap-marks
                                                             make-wrap
                                                             id-sym-name&marks
                                                             id-sym-name
                                                             id?
                                                             nonsymbol-id?
                                                             global-extend
                                                             lookup
                                                             macros-only-env
                                                             extend-var-env
                                                             extend-env
                                                             null-env
                                                             binding-value
                                                             binding-type
                                                             make-binding
                                                             arg-check
                                                             source-annotation
                                                             no-source
                                                             set-syntax-object-module!
                                                             set-syntax-object-wrap!
                                                             set-syntax-object-expression!
                                                             syntax-object-module
                                                             syntax-object-wrap
                                                             syntax-object-expression
                                                             syntax-object?
                                                             make-syntax-object
                                                             build-lexical-var
                                                             build-letrec
                                                             build-named-let
                                                             build-let
                                                             build-sequence
                                                             build-data
                                                             build-primref
                                                             build-primcall
                                                             build-lambda-case
                                                             build-case-lambda
                                                             build-simple-lambda
                                                             build-global-definition
                                                             build-global-assignment
                                                             build-global-reference
                                                             analyze-variable
                                                             build-lexical-assignment
                                                             build-lexical-reference
                                                             build-dynlet
                                                             build-conditional
                                                             build-call
                                                             build-void
                                                             maybe-name-value!
                                                             decorate-source
                                                             get-global-definition-hook
                                                             put-global-definition-hook
                                                             gensym-hook
                                                             local-eval-hook
                                                             top-level-eval-hook
                                                             fx<
                                                             fx=
                                                             fx-
                                                             fx+
                                                             set-lambda-meta!
                                                             lambda-meta
                                                             lambda?
                                                             make-dynlet
                                                             make-letrec
                                                             make-let
                                                             make-lambda-case
                                                             make-lambda
                                                             make-sequence
                                                             make-primcall
                                                             make-call
                                                             make-conditional
                                                             make-toplevel-define
                                                             make-toplevel-set
                                                             make-toplevel-ref
                                                             make-module-set
                                                             make-module-ref
                                                             make-lexical-set
                                                             make-lexical-ref
                                                             make-primitive-ref
                                                             make-const
                                                             make-void)
                                                           ((top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top))
                                                           ("i452"
                                                            "i450"
                                                            "i448"
                                                            "i446"
                                                            "i444"
                                                            "i442"
                                                            "i440"
                                                            "i438"
                                                            "i436"
                                                            "i434"
                                                            "i432"
                                                            "i430"
                                                            "i428"
                                                            "i426"
                                                            "i424"
                                                            "i422"
                                                            "i420"
                                                            "i418"
                                                            "i416"
                                                            "i414"
                                                            "i412"
                                                            "i410"
                                                            "i408"
                                                            "i406"
                                                            "i404"
                                                            "i402"
                                                            "i400"
                                                            "i398"
                                                            "i396"
                                                            "i394"
                                                            "i392"
                                                            "i390"
                                                            "i388"
                                                            "i386"
                                                            "i384"
                                                            "i383"
                                                            "i382"
                                                            "i380"
                                                            "i379"
                                                            "i378"
                                                            "i377"
                                                            "i376"
                                                            "i374"
                                                            "i372"
                                                            "i370"
                                                            "i368"
                                                            "i366"
                                                            "i364"
                                                            "i362"
                                                            "i360"
                                                            "i357"
                                                            "i355"
                                                            "i354"
                                                            "i353"
                                                            "i352"
                                                            "i351"
                                                            "i350"
                                                            "i349"
                                                            "i348"
                                                            "i347"
                                                            "i345"
                                                            "i344"
                                                            "i342"
                                                            "i340"
                                                            "i338"
                                                            "i336"
                                                            "i334"
                                                            "i332"
                                                            "i330"
                                                            "i329"
                                                            "i328"
                                                            "i327"
                                                            "i326"
                                                            "i325"
                                                            "i323"
                                                            "i322"
                                                            "i320"
                                                            "i318"
                                                            "i316"
                                                            "i314"
                                                            "i312"
                                                            "i310"
                                                            "i308"
                                                            "i306"
                                                            "i304"
                                                            "i302"
                                                            "i300"
                                                            "i298"
                                                            "i296"
                                                            "i294"
                                                            "i292"
                                                            "i290"
                                                            "i288"
                                                            "i286"
                                                            "i284"
                                                            "i282"
                                                            "i280"
                                                            "i278"
                                                            "i276"
                                                            "i274"
                                                            "i272"
                                                            "i270"
                                                            "i268"
                                                            "i266"
                                                            "i264"
                                                            "i262"
                                                            "i260"
                                                            "i258"
                                                            "i256"
                                                            "i255"
                                                            "i253"
                                                            "i251"
                                                            "i250"
                                                            "i249"
                                                            "i248"
                                                            "i247"
                                                            "i245"
                                                            "i243"
                                                            "i241"
                                                            "i238"
                                                            "i236"
                                                            "i234"
                                                            "i232"
                                                            "i230"
                                                            "i228"
                                                            "i226"
                                                            "i224"
                                                            "i222"
                                                            "i220"
                                                            "i218"
                                                            "i216"
                                                            "i214"
                                                            "i212"
                                                            "i210"
                                                            "i208"
                                                            "i206"
                                                            "i204"
                                                            "i202"))
                                                         #(ribcage
                                                           (define-structure
                                                             define-expansion-accessors
                                                             define-expansion-constructors)
                                                           ((top) (top) (top))
                                                           ("i40"
                                                            "i39"
                                                            "i38")))
                                                        (hygiene guile)))))
                                        #{rkey 2409}#)))))
                          #{tmp 2416}#)
                        (let ((#{tmp 2429}#
                                ($sc-dispatch
                                  #{tmp 2414}#
                                  '((any any) . any))))
                          (if (if #{tmp 2429}#
                                (@apply
                                  (lambda (#{a 2433}# #{init 2434}# #{b 2435}#)
                                    (#{id? 343}# #{a 2433}#))
                                  #{tmp 2429}#)
                                #f)
                            (@apply
                              (lambda (#{a 2439}# #{init 2440}# #{b 2441}#)
                                (let ((#{tmp 2443}#
                                        (symbol->keyword
                                          (syntax->datum #{a 2439}#))))
                                  (let ((#{k 2445}# #{tmp 2443}#))
                                    (#{key 2297}#
                                      #{b 2441}#
                                      #{req 2407}#
                                      #{opt 2408}#
                                      (cons (list #{k 2445}#
                                                  #{a 2439}#
                                                  #{init 2440}#)
                                            #{rkey 2409}#)))))
                              #{tmp 2429}#)
                            (let ((#{tmp 2446}#
                                    ($sc-dispatch
                                      #{tmp 2414}#
                                      '((any any any) . any))))
                              (if (if #{tmp 2446}#
                                    (@apply
                                      (lambda (#{a 2451}#
                                               #{init 2452}#
                                               #{k 2453}#
                                               #{b 2454}#)
                                        (if (#{id? 343}# #{a 2451}#)
                                          (keyword? (syntax->datum #{k 2453}#))
                                          #f))
                                      #{tmp 2446}#)
                                    #f)
                                (@apply
                                  (lambda (#{a 2461}#
                                           #{init 2462}#
                                           #{k 2463}#
                                           #{b 2464}#)
                                    (#{key 2297}#
                                      #{b 2464}#
                                      #{req 2407}#
                                      #{opt 2408}#
                                      (cons (list #{k 2463}#
                                                  #{a 2461}#
                                                  #{init 2462}#)
                                            #{rkey 2409}#)))
                                  #{tmp 2446}#)
                                (let ((#{tmp 2465}#
                                        ($sc-dispatch #{tmp 2414}# '(any))))
                                  (if (if #{tmp 2465}#
                                        (@apply
                                          (lambda (#{aok 2467}#)
                                            (eq? (syntax->datum #{aok 2467}#)
                                                 #:allow-other-keys))
                                          #{tmp 2465}#)
                                        #f)
                                    (@apply
                                      (lambda (#{aok 2469}#)
                                        (#{check 2301}#
                                          #{req 2407}#
                                          #{opt 2408}#
                                          #f
                                          (cons #t (reverse #{rkey 2409}#))))
                                      #{tmp 2465}#)
                                    (let ((#{tmp 2470}#
                                            ($sc-dispatch
                                              #{tmp 2414}#
                                              '(any any any))))
                                      (if (if #{tmp 2470}#
                                            (@apply
                                              (lambda (#{aok 2474}#
                                                       #{a 2475}#
                                                       #{b 2476}#)
                                                (if (eq? (syntax->datum
                                                           #{aok 2474}#)
                                                         #:allow-other-keys)
                                                  (eq? (syntax->datum
                                                         #{a 2475}#)
                                                       #:rest)
                                                  #f))
                                              #{tmp 2470}#)
                                            #f)
                                        (@apply
                                          (lambda (#{aok 2482}#
                                                   #{a 2483}#
                                                   #{b 2484}#)
                                            (#{rest 2299}#
                                              #{b 2484}#
                                              #{req 2407}#
                                              #{opt 2408}#
                                              (cons #t
                                                    (reverse #{rkey 2409}#))))
                                          #{tmp 2470}#)
                                        (let ((#{tmp 2485}#
                                                ($sc-dispatch
                                                  #{tmp 2414}#
                                                  '(any . any))))
                                          (if (if #{tmp 2485}#
                                                (@apply
                                                  (lambda (#{aok 2488}#
                                                           #{r 2489}#)
                                                    (if (eq? (syntax->datum
                                                               #{aok 2488}#)
                                                             #:allow-other-keys)
                                                      (#{id? 343}# #{r 2489}#)
                                                      #f))
                                                  #{tmp 2485}#)
                                                #f)
                                            (@apply
                                              (lambda (#{aok 2494}# #{r 2495}#)
                                                (#{rest 2299}#
                                                  #{r 2495}#
                                                  #{req 2407}#
                                                  #{opt 2408}#
                                                  (cons #t
                                                        (reverse
                                                          #{rkey 2409}#))))
                                              #{tmp 2485}#)
                                            (let ((#{tmp 2496}#
                                                    ($sc-dispatch
                                                      #{tmp 2414}#
                                                      '(any any))))
                                              (if (if #{tmp 2496}#
                                                    (@apply
                                                      (lambda (#{a 2499}#
                                                               #{b 2500}#)
                                                        (eq? (syntax->datum
                                                               #{a 2499}#)
                                                             #:rest))
                                                      #{tmp 2496}#)
                                                    #f)
                                                (@apply
                                                  (lambda (#{a 2503}#
                                                           #{b 2504}#)
                                                    (#{rest 2299}#
                                                      #{b 2504}#
                                                      #{req 2407}#
                                                      #{opt 2408}#
                                                      (cons #f
                                                            (reverse
                                                              #{rkey 2409}#))))
                                                  #{tmp 2496}#)
                                                (let ((#{tmp 2505}#
                                                        (list #{tmp 2414}#)))
                                                  (if (if #{tmp 2505}#
                                                        (@apply
                                                          (lambda (#{r 2507}#)
                                                            (#{id? 343}#
                                                              #{r 2507}#))
                                                          #{tmp 2505}#)
                                                        #f)
                                                    (@apply
                                                      (lambda (#{r 2509}#)
                                                        (#{rest 2299}#
                                                          #{r 2509}#
                                                          #{req 2407}#
                                                          #{opt 2408}#
                                                          (cons #f
                                                                (reverse
                                                                  #{rkey 2409}#))))
                                                      #{tmp 2505}#)
                                                    (let ((#{else 2511}#
                                                            #{tmp 2414}#))
                                                      (syntax-violation
                                                        'lambda*
                                                        "invalid keyword argument list"
                                                        #{orig-args 2290}#
                                                        #{args 2406}#)))))))))))))))))))))))
          (#{rest 2299}#
            (lambda (#{args 2512}#
                     #{req 2513}#
                     #{opt 2514}#
                     #{kw 2515}#)
              (let ((#{tmp 2520}# #{args 2512}#))
                (let ((#{tmp 2521}# (list #{tmp 2520}#)))
                  (if (if #{tmp 2521}#
                        (@apply
                          (lambda (#{r 2523}#) (#{id? 343}# #{r 2523}#))
                          #{tmp 2521}#)
                        #f)
                    (@apply
                      (lambda (#{r 2525}#)
                        (#{check 2301}#
                          #{req 2513}#
                          #{opt 2514}#
                          #{r 2525}#
                          #{kw 2515}#))
                      #{tmp 2521}#)
                    (let ((#{else 2527}# #{tmp 2520}#))
                      (syntax-violation
                        'lambda*
                        "invalid rest argument"
                        #{orig-args 2290}#
                        #{args 2512}#)))))))
          (#{check 2301}#
            (lambda (#{req 2528}#
                     #{opt 2529}#
                     #{rest 2530}#
                     #{kw 2531}#)
              (if (#{distinct-bound-ids? 405}#
                    (append
                      #{req 2528}#
                      (map car #{opt 2529}#)
                      (if #{rest 2530}# (list #{rest 2530}#) '())
                      (if (pair? #{kw 2531}#)
                        (map cadr (cdr #{kw 2531}#))
                        '())))
                (values
                  #{req 2528}#
                  #{opt 2529}#
                  #{rest 2530}#
                  #{kw 2531}#)
                (syntax-violation
                  'lambda*
                  "duplicate identifier in argument list"
                  #{orig-args 2290}#)))))
         (begin (#{req 2293}# #{orig-args 2290}# '())))))
   (#{chi-lambda-case 447}#
     (lambda (#{e 2539}#
              #{r 2540}#
              #{w 2541}#
              #{s 2542}#
              #{mod 2543}#
              #{get-formals 2544}#
              #{clauses 2545}#)
       (letrec*
         ((#{expand-req 2554}#
            (lambda (#{req 2561}#
                     #{opt 2562}#
                     #{rest 2563}#
                     #{kw 2564}#
                     #{body 2565}#)
              (begin
                (let ((#{vars 2573}#
                        (map #{gen-var 451}# #{req 2561}#))
                      (#{labels 2574}#
                        (#{gen-labels 358}# #{req 2561}#)))
                  (begin
                    (let ((#{r* 2577}#
                            (#{extend-var-env 333}#
                              #{labels 2574}#
                              #{vars 2573}#
                              #{r 2540}#))
                          (#{w* 2578}#
                            (#{make-binding-wrap 387}#
                              #{req 2561}#
                              #{labels 2574}#
                              #{w 2541}#)))
                      (#{expand-opt 2556}#
                        (map syntax->datum #{req 2561}#)
                        #{opt 2562}#
                        #{rest 2563}#
                        #{kw 2564}#
                        #{body 2565}#
                        (reverse #{vars 2573}#)
                        #{r* 2577}#
                        #{w* 2578}#
                        '()
                        '())))))))
          (#{expand-opt 2556}#
            (lambda (#{req 2579}#
                     #{opt 2580}#
                     #{rest 2581}#
                     #{kw 2582}#
                     #{body 2583}#
                     #{vars 2584}#
                     #{r* 2585}#
                     #{w* 2586}#
                     #{out 2587}#
                     #{inits 2588}#)
              (if (pair? #{opt 2580}#)
                (let ((#{tmp 2601}# (car #{opt 2580}#)))
                  (let ((#{tmp 2602}#
                          ($sc-dispatch #{tmp 2601}# '(any any))))
                    (if #{tmp 2602}#
                      (@apply
                        (lambda (#{id 2605}# #{i 2606}#)
                          (begin
                            (let ((#{v 2609}# (#{gen-var 451}# #{id 2605}#)))
                              (begin
                                (let ((#{l 2611}#
                                        (#{gen-labels 358}#
                                          (list #{v 2609}#))))
                                  (begin
                                    (let ((#{r** 2613}#
                                            (#{extend-var-env 333}#
                                              #{l 2611}#
                                              (list #{v 2609}#)
                                              #{r* 2585}#)))
                                      (begin
                                        (let ((#{w** 2615}#
                                                (#{make-binding-wrap 387}#
                                                  (list #{id 2605}#)
                                                  #{l 2611}#
                                                  #{w* 2586}#)))
                                          (#{expand-opt 2556}#
                                            #{req 2579}#
                                            (cdr #{opt 2580}#)
                                            #{rest 2581}#
                                            #{kw 2582}#
                                            #{body 2583}#
                                            (cons #{v 2609}# #{vars 2584}#)
                                            #{r** 2613}#
                                            #{w** 2615}#
                                            (cons (syntax->datum #{id 2605}#)
                                                  #{out 2587}#)
                                            (cons (#{chi 423}#
                                                    #{i 2606}#
                                                    #{r* 2585}#
                                                    #{w* 2586}#
                                                    #{mod 2543}#)
                                                  #{inits 2588}#)))))))))))
                        #{tmp 2602}#)
                      (syntax-violation
                        #f
                        "source expression failed to match any pattern"
                        #{tmp 2601}#))))
                (if #{rest 2581}#
                  (begin
                    (let ((#{v 2620}# (#{gen-var 451}# #{rest 2581}#)))
                      (begin
                        (let ((#{l 2622}#
                                (#{gen-labels 358}# (list #{v 2620}#))))
                          (begin
                            (let ((#{r* 2624}#
                                    (#{extend-var-env 333}#
                                      #{l 2622}#
                                      (list #{v 2620}#)
                                      #{r* 2585}#)))
                              (begin
                                (let ((#{w* 2626}#
                                        (#{make-binding-wrap 387}#
                                          (list #{rest 2581}#)
                                          #{l 2622}#
                                          #{w* 2586}#)))
                                  (#{expand-kw 2558}#
                                    #{req 2579}#
                                    (if (pair? #{out 2587}#)
                                      (reverse #{out 2587}#)
                                      #f)
                                    (syntax->datum #{rest 2581}#)
                                    (if (pair? #{kw 2582}#)
                                      (cdr #{kw 2582}#)
                                      #{kw 2582}#)
                                    #{body 2583}#
                                    (cons #{v 2620}# #{vars 2584}#)
                                    #{r* 2624}#
                                    #{w* 2626}#
                                    (if (pair? #{kw 2582}#)
                                      (car #{kw 2582}#)
                                      #f)
                                    '()
                                    #{inits 2588}#)))))))))
                  (#{expand-kw 2558}#
                    #{req 2579}#
                    (if (pair? #{out 2587}#)
                      (reverse #{out 2587}#)
                      #f)
                    #f
                    (if (pair? #{kw 2582}#)
                      (cdr #{kw 2582}#)
                      #{kw 2582}#)
                    #{body 2583}#
                    #{vars 2584}#
                    #{r* 2585}#
                    #{w* 2586}#
                    (if (pair? #{kw 2582}#) (car #{kw 2582}#) #f)
                    '()
                    #{inits 2588}#)))))
          (#{expand-kw 2558}#
            (lambda (#{req 2628}#
                     #{opt 2629}#
                     #{rest 2630}#
                     #{kw 2631}#
                     #{body 2632}#
                     #{vars 2633}#
                     #{r* 2634}#
                     #{w* 2635}#
                     #{aok 2636}#
                     #{out 2637}#
                     #{inits 2638}#)
              (if (pair? #{kw 2631}#)
                (let ((#{tmp 2652}# (car #{kw 2631}#)))
                  (let ((#{tmp 2653}#
                          ($sc-dispatch #{tmp 2652}# '(any any any))))
                    (if #{tmp 2653}#
                      (@apply
                        (lambda (#{k 2657}# #{id 2658}# #{i 2659}#)
                          (begin
                            (let ((#{v 2662}# (#{gen-var 451}# #{id 2658}#)))
                              (begin
                                (let ((#{l 2664}#
                                        (#{gen-labels 358}#
                                          (list #{v 2662}#))))
                                  (begin
                                    (let ((#{r** 2666}#
                                            (#{extend-var-env 333}#
                                              #{l 2664}#
                                              (list #{v 2662}#)
                                              #{r* 2634}#)))
                                      (begin
                                        (let ((#{w** 2668}#
                                                (#{make-binding-wrap 387}#
                                                  (list #{id 2658}#)
                                                  #{l 2664}#
                                                  #{w* 2635}#)))
                                          (#{expand-kw 2558}#
                                            #{req 2628}#
                                            #{opt 2629}#
                                            #{rest 2630}#
                                            (cdr #{kw 2631}#)
                                            #{body 2632}#
                                            (cons #{v 2662}# #{vars 2633}#)
                                            #{r** 2666}#
                                            #{w** 2668}#
                                            #{aok 2636}#
                                            (cons (list (syntax->datum
                                                          #{k 2657}#)
                                                        (syntax->datum
                                                          #{id 2658}#)
                                                        #{v 2662}#)
                                                  #{out 2637}#)
                                            (cons (#{chi 423}#
                                                    #{i 2659}#
                                                    #{r* 2634}#
                                                    #{w* 2635}#
                                                    #{mod 2543}#)
                                                  #{inits 2638}#)))))))))))
                        #{tmp 2653}#)
                      (syntax-violation
                        #f
                        "source expression failed to match any pattern"
                        #{tmp 2652}#))))
                (#{expand-body 2560}#
                  #{req 2628}#
                  #{opt 2629}#
                  #{rest 2630}#
                  (if (begin
                        (let ((#{t 2672}# #{aok 2636}#))
                          (if #{t 2672}# #{t 2672}# (pair? #{out 2637}#))))
                    (cons #{aok 2636}# (reverse #{out 2637}#))
                    #f)
                  #{body 2632}#
                  (reverse #{vars 2633}#)
                  #{r* 2634}#
                  #{w* 2635}#
                  (reverse #{inits 2638}#)
                  '()))))
          (#{expand-body 2560}#
            (lambda (#{req 2674}#
                     #{opt 2675}#
                     #{rest 2676}#
                     #{kw 2677}#
                     #{body 2678}#
                     #{vars 2679}#
                     #{r* 2680}#
                     #{w* 2681}#
                     #{inits 2682}#
                     #{meta 2683}#)
              (let ((#{tmp 2694}# #{body 2678}#))
                (let ((#{tmp 2695}#
                        ($sc-dispatch #{tmp 2694}# '(any any . each-any))))
                  (if (if #{tmp 2695}#
                        (@apply
                          (lambda (#{docstring 2699}# #{e1 2700}# #{e2 2701}#)
                            (string? (syntax->datum #{docstring 2699}#)))
                          #{tmp 2695}#)
                        #f)
                    (@apply
                      (lambda (#{docstring 2705}# #{e1 2706}# #{e2 2707}#)
                        (#{expand-body 2560}#
                          #{req 2674}#
                          #{opt 2675}#
                          #{rest 2676}#
                          #{kw 2677}#
                          (cons #{e1 2706}# #{e2 2707}#)
                          #{vars 2679}#
                          #{r* 2680}#
                          #{w* 2681}#
                          #{inits 2682}#
                          (append
                            #{meta 2683}#
                            (list (cons 'documentation
                                        (syntax->datum #{docstring 2705}#))))))
                      #{tmp 2695}#)
                    (let ((#{tmp 2710}#
                            ($sc-dispatch
                              #{tmp 2694}#
                              '(#(vector #(each (any . any)))
                                any
                                .
                                each-any))))
                      (if #{tmp 2710}#
                        (@apply
                          (lambda (#{k 2715}#
                                   #{v 2716}#
                                   #{e1 2717}#
                                   #{e2 2718}#)
                            (#{expand-body 2560}#
                              #{req 2674}#
                              #{opt 2675}#
                              #{rest 2676}#
                              #{kw 2677}#
                              (cons #{e1 2717}# #{e2 2718}#)
                              #{vars 2679}#
                              #{r* 2680}#
                              #{w* 2681}#
                              #{inits 2682}#
                              (append
                                #{meta 2683}#
                                (syntax->datum
                                  (map cons #{k 2715}# #{v 2716}#)))))
                          #{tmp 2710}#)
                        (let ((#{tmp 2722}#
                                ($sc-dispatch #{tmp 2694}# '(any . each-any))))
                          (if #{tmp 2722}#
                            (@apply
                              (lambda (#{e1 2725}# #{e2 2726}#)
                                (values
                                  #{meta 2683}#
                                  #{req 2674}#
                                  #{opt 2675}#
                                  #{rest 2676}#
                                  #{kw 2677}#
                                  #{inits 2682}#
                                  #{vars 2679}#
                                  (#{chi-body 431}#
                                    (cons #{e1 2725}# #{e2 2726}#)
                                    (#{source-wrap 411}#
                                      #{e 2539}#
                                      #{w 2541}#
                                      #{s 2542}#
                                      #{mod 2543}#)
                                    #{r* 2680}#
                                    #{w* 2681}#
                                    #{mod 2543}#)))
                              #{tmp 2722}#)
                            (syntax-violation
                              #f
                              "source expression failed to match any pattern"
                              #{tmp 2694}#)))))))))))
         (begin
           (let ((#{tmp 2728}# #{clauses 2545}#))
             (let ((#{tmp 2729}# ($sc-dispatch #{tmp 2728}# '())))
               (if #{tmp 2729}#
                 (@apply (lambda () (values '() #f)) #{tmp 2729}#)
                 (let ((#{tmp 2730}#
                         ($sc-dispatch
                           #{tmp 2728}#
                           '((any any . each-any)
                             .
                             #(each (any any . each-any))))))
                   (if #{tmp 2730}#
                     (@apply
                       (lambda (#{args 2737}#
                                #{e1 2738}#
                                #{e2 2739}#
                                #{args* 2740}#
                                #{e1* 2741}#
                                #{e2* 2742}#)
                         (call-with-values
                           (lambda () (#{get-formals 2544}# #{args 2737}#))
                           (lambda (#{req 2743}#
                                    #{opt 2744}#
                                    #{rest 2745}#
                                    #{kw 2746}#)
                             (call-with-values
                               (lambda ()
                                 (#{expand-req 2554}#
                                   #{req 2743}#
                                   #{opt 2744}#
                                   #{rest 2745}#
                                   #{kw 2746}#
                                   (cons #{e1 2738}# #{e2 2739}#)))
                               (lambda (#{meta 2752}#
                                        #{req 2753}#
                                        #{opt 2754}#
                                        #{rest 2755}#
                                        #{kw 2756}#
                                        #{inits 2757}#
                                        #{vars 2758}#
                                        #{body 2759}#)
                                 (call-with-values
                                   (lambda ()
                                     (#{chi-lambda-case 447}#
                                       #{e 2539}#
                                       #{r 2540}#
                                       #{w 2541}#
                                       #{s 2542}#
                                       #{mod 2543}#
                                       #{get-formals 2544}#
                                       (map (lambda (#{tmp 2770}#
                                                     #{tmp 2769}#
                                                     #{tmp 2768}#)
                                              (cons #{tmp 2768}#
                                                    (cons #{tmp 2769}#
                                                          #{tmp 2770}#)))
                                            #{e2* 2742}#
                                            #{e1* 2741}#
                                            #{args* 2740}#)))
                                   (lambda (#{meta* 2772}# #{else* 2773}#)
                                     (values
                                       (append #{meta 2752}# #{meta* 2772}#)
                                       (#{build-lambda-case 289}#
                                         #{s 2542}#
                                         #{req 2753}#
                                         #{opt 2754}#
                                         #{rest 2755}#
                                         #{kw 2756}#
                                         #{inits 2757}#
                                         #{vars 2758}#
                                         #{body 2759}#
                                         #{else* 2773}#)))))))))
                       #{tmp 2730}#)
                     (syntax-violation
                       #f
                       "source expression failed to match any pattern"
                       #{tmp 2728}#))))))))))
   (#{strip 449}#
     (lambda (#{x 2776}# #{w 2777}#)
       (if (memq 'top (car #{w 2777}#))
         #{x 2776}#
         (letrec*
           ((#{f 2784}#
              (lambda (#{x 2785}#)
                (if (#{syntax-object? 309}# #{x 2785}#)
                  (#{strip 449}#
                    (#{syntax-object-expression 311}# #{x 2785}#)
                    (#{syntax-object-wrap 313}# #{x 2785}#))
                  (if (pair? #{x 2785}#)
                    (begin
                      (let ((#{a 2792}# (#{f 2784}# (car #{x 2785}#)))
                            (#{d 2793}# (#{f 2784}# (cdr #{x 2785}#))))
                        (if (if (eq? #{a 2792}# (car #{x 2785}#))
                              (eq? #{d 2793}# (cdr #{x 2785}#))
                              #f)
                          #{x 2785}#
                          (cons #{a 2792}# #{d 2793}#))))
                    (if (vector? #{x 2785}#)
                      (begin
                        (let ((#{old 2799}# (vector->list #{x 2785}#)))
                          (begin
                            (let ((#{new 2801}# (map #{f 2784}# #{old 2799}#)))
                              (letrec*
                                ((#{lp 2805}#
                                   (lambda (#{l1 2806}# #{l2 2807}#)
                                     (if (null? #{l1 2806}#)
                                       #{x 2785}#
                                       (if (eq? (car #{l1 2806}#)
                                                (car #{l2 2807}#))
                                         (#{lp 2805}#
                                           (cdr #{l1 2806}#)
                                           (cdr #{l2 2807}#))
                                         (list->vector #{new 2801}#))))))
                                (begin
                                  (#{lp 2805}# #{old 2799}# #{new 2801}#)))))))
                      #{x 2785}#))))))
           (begin (#{f 2784}# #{x 2776}#))))))
   (#{gen-var 451}#
     (lambda (#{id 2809}#)
       (begin
         (let ((#{id 2812}#
                 (if (#{syntax-object? 309}# #{id 2809}#)
                   (#{syntax-object-expression 311}# #{id 2809}#)
                   #{id 2809}#)))
           (gensym
             (string-append (symbol->string #{id 2812}#) " "))))))
   (#{lambda-var-list 453}#
     (lambda (#{vars 2814}#)
       (letrec*
         ((#{lvl 2820}#
            (lambda (#{vars 2821}# #{ls 2822}# #{w 2823}#)
              (if (pair? #{vars 2821}#)
                (#{lvl 2820}#
                  (cdr #{vars 2821}#)
                  (cons (#{wrap 409}# (car #{vars 2821}#) #{w 2823}# #f)
                        #{ls 2822}#)
                  #{w 2823}#)
                (if (#{id? 343}# #{vars 2821}#)
                  (cons (#{wrap 409}# #{vars 2821}# #{w 2823}# #f)
                        #{ls 2822}#)
                  (if (null? #{vars 2821}#)
                    #{ls 2822}#
                    (if (#{syntax-object? 309}# #{vars 2821}#)
                      (#{lvl 2820}#
                        (#{syntax-object-expression 311}# #{vars 2821}#)
                        #{ls 2822}#
                        (#{join-wraps 391}#
                          #{w 2823}#
                          (#{syntax-object-wrap 313}# #{vars 2821}#)))
                      (cons #{vars 2821}# #{ls 2822}#))))))))
         (begin (#{lvl 2820}# #{vars 2814}# '() '(())))))))
  (begin
    (lambda (#{x 1161}# #{update 1162}#)
      (vector-set! #{x 1161}# 1 #{update 1162}#))
    (lambda (#{x 1165}# #{update 1166}#)
      (vector-set! #{x 1165}# 2 #{update 1166}#))
    (lambda (#{x 1169}# #{update 1170}#)
      (vector-set! #{x 1169}# 3 #{update 1170}#))
    (lambda (#{x 1250}#)
      (if (vector? #{x 1250}#)
        (if (= (vector-length #{x 1250}#) 4)
          (eq? (vector-ref #{x 1250}# 0) 'ribcage)
          #f)
        #f))
    (begin
      (#{global-extend 339}#
        'local-syntax
        'letrec-syntax
        #t)
      (#{global-extend 339}#
        'local-syntax
        'let-syntax
        #f)
      (#{global-extend 339}#
        'core
        'fluid-let-syntax
        (lambda (#{e 2834}#
                 #{r 2835}#
                 #{w 2836}#
                 #{s 2837}#
                 #{mod 2838}#)
          (let ((#{tmp 2844}# #{e 2834}#))
            (let ((#{tmp 2845}#
                    ($sc-dispatch
                      #{tmp 2844}#
                      '(_ #(each (any any)) any . each-any))))
              (if (if #{tmp 2845}#
                    (@apply
                      (lambda (#{var 2850}#
                               #{val 2851}#
                               #{e1 2852}#
                               #{e2 2853}#)
                        (#{valid-bound-ids? 403}# #{var 2850}#))
                      #{tmp 2845}#)
                    #f)
                (@apply
                  (lambda (#{var 2859}#
                           #{val 2860}#
                           #{e1 2861}#
                           #{e2 2862}#)
                    (begin
                      (let ((#{names 2864}#
                              (map (lambda (#{x 2865}#)
                                     (#{id-var-name 397}#
                                       #{x 2865}#
                                       #{w 2836}#))
                                   #{var 2859}#)))
                        (begin
                          (for-each
                            (lambda (#{id 2868}# #{n 2869}#)
                              (begin
                                (let ((#{atom-key 2874}#
                                        (car (#{lookup 337}#
                                               #{n 2869}#
                                               #{r 2835}#
                                               #{mod 2838}#))))
                                  (if (memv #{atom-key 2874}#
                                            '(displaced-lexical))
                                    (syntax-violation
                                      'fluid-let-syntax
                                      "identifier out of context"
                                      #{e 2834}#
                                      (#{source-wrap 411}#
                                        #{id 2868}#
                                        #{w 2836}#
                                        #{s 2837}#
                                        #{mod 2838}#))))))
                            #{var 2859}#
                            #{names 2864}#)
                          (#{chi-body 431}#
                            (cons #{e1 2861}# #{e2 2862}#)
                            (#{source-wrap 411}#
                              #{e 2834}#
                              #{w 2836}#
                              #{s 2837}#
                              #{mod 2838}#)
                            (#{extend-env 331}#
                              #{names 2864}#
                              (begin
                                (let ((#{trans-r 2880}#
                                        (#{macros-only-env 335}# #{r 2835}#)))
                                  (map (lambda (#{x 2881}#)
                                         (cons 'macro
                                               (#{eval-local-transformer 435}#
                                                 (#{chi 423}#
                                                   #{x 2881}#
                                                   #{trans-r 2880}#
                                                   #{w 2836}#
                                                   #{mod 2838}#)
                                                 #{mod 2838}#)))
                                       #{val 2860}#)))
                              #{r 2835}#)
                            #{w 2836}#
                            #{mod 2838}#)))))
                  #{tmp 2845}#)
                (let ((#{_ 2886}# #{tmp 2844}#))
                  (syntax-violation
                    'fluid-let-syntax
                    "bad syntax"
                    (#{source-wrap 411}#
                      #{e 2834}#
                      #{w 2836}#
                      #{s 2837}#
                      #{mod 2838}#))))))))
      (#{global-extend 339}#
        'core
        'quote
        (lambda (#{e 2887}#
                 #{r 2888}#
                 #{w 2889}#
                 #{s 2890}#
                 #{mod 2891}#)
          (let ((#{tmp 2897}# #{e 2887}#))
            (let ((#{tmp 2898}#
                    ($sc-dispatch #{tmp 2897}# '(_ any))))
              (if #{tmp 2898}#
                (@apply
                  (lambda (#{e 2900}#)
                    (#{build-data 295}#
                      #{s 2890}#
                      (#{strip 449}# #{e 2900}# #{w 2889}#)))
                  #{tmp 2898}#)
                (let ((#{_ 2902}# #{tmp 2897}#))
                  (syntax-violation
                    'quote
                    "bad syntax"
                    (#{source-wrap 411}#
                      #{e 2887}#
                      #{w 2889}#
                      #{s 2890}#
                      #{mod 2891}#))))))))
      (#{global-extend 339}#
        'core
        'syntax
        (letrec*
          ((#{gen-syntax 2904}#
             (lambda (#{src 2919}#
                      #{e 2920}#
                      #{r 2921}#
                      #{maps 2922}#
                      #{ellipsis? 2923}#
                      #{mod 2924}#)
               (if (#{id? 343}# #{e 2920}#)
                 (begin
                   (let ((#{label 2932}#
                           (#{id-var-name 397}# #{e 2920}# '(()))))
                     (begin
                       (let ((#{b 2935}#
                               (#{lookup 337}#
                                 #{label 2932}#
                                 #{r 2921}#
                                 #{mod 2924}#)))
                         (if (eq? (car #{b 2935}#) 'syntax)
                           (call-with-values
                             (lambda ()
                               (begin
                                 (let ((#{var.lev 2938}# (cdr #{b 2935}#)))
                                   (#{gen-ref 2906}#
                                     #{src 2919}#
                                     (car #{var.lev 2938}#)
                                     (cdr #{var.lev 2938}#)
                                     #{maps 2922}#))))
                             (lambda (#{var 2940}# #{maps 2941}#)
                               (values
                                 (list 'ref #{var 2940}#)
                                 #{maps 2941}#)))
                           (if (#{ellipsis? 2923}# #{e 2920}#)
                             (syntax-violation
                               'syntax
                               "misplaced ellipsis"
                               #{src 2919}#)
                             (values
                               (list 'quote #{e 2920}#)
                               #{maps 2922}#)))))))
                 (let ((#{tmp 2946}# #{e 2920}#))
                   (let ((#{tmp 2947}#
                           ($sc-dispatch #{tmp 2946}# '(any any))))
                     (if (if #{tmp 2947}#
                           (@apply
                             (lambda (#{dots 2950}# #{e 2951}#)
                               (#{ellipsis? 2923}# #{dots 2950}#))
                             #{tmp 2947}#)
                           #f)
                       (@apply
                         (lambda (#{dots 2954}# #{e 2955}#)
                           (#{gen-syntax 2904}#
                             #{src 2919}#
                             #{e 2955}#
                             #{r 2921}#
                             #{maps 2922}#
                             (lambda (#{x 2956}#) #f)
                             #{mod 2924}#))
                         #{tmp 2947}#)
                       (let ((#{tmp 2958}#
                               ($sc-dispatch #{tmp 2946}# '(any any . any))))
                         (if (if #{tmp 2958}#
                               (@apply
                                 (lambda (#{x 2962}# #{dots 2963}# #{y 2964}#)
                                   (#{ellipsis? 2923}# #{dots 2963}#))
                                 #{tmp 2958}#)
                               #f)
                           (@apply
                             (lambda (#{x 2968}# #{dots 2969}# #{y 2970}#)
                               (letrec*
                                 ((#{f 2974}#
                                    (lambda (#{y 2975}# #{k 2976}#)
                                      (let ((#{tmp 2983}# #{y 2975}#))
                                        (let ((#{tmp 2984}#
                                                ($sc-dispatch
                                                  #{tmp 2983}#
                                                  '(any . any))))
                                          (if (if #{tmp 2984}#
                                                (@apply
                                                  (lambda (#{dots 2987}#
                                                           #{y 2988}#)
                                                    (#{ellipsis? 2923}#
                                                      #{dots 2987}#))
                                                  #{tmp 2984}#)
                                                #f)
                                            (@apply
                                              (lambda (#{dots 2991}#
                                                       #{y 2992}#)
                                                (#{f 2974}#
                                                  #{y 2992}#
                                                  (lambda (#{maps 2993}#)
                                                    (call-with-values
                                                      (lambda ()
                                                        (#{k 2976}#
                                                          (cons '()
                                                                #{maps 2993}#)))
                                                      (lambda (#{x 2995}#
                                                               #{maps 2996}#)
                                                        (if (null? (car #{maps 2996}#))
                                                          (syntax-violation
                                                            'syntax
                                                            "extra ellipsis"
                                                            #{src 2919}#)
                                                          (values
                                                            (#{gen-mappend 2908}#
                                                              #{x 2995}#
                                                              (car #{maps 2996}#))
                                                            (cdr #{maps 2996}#))))))))
                                              #{tmp 2984}#)
                                            (let ((#{_ 3000}# #{tmp 2983}#))
                                              (call-with-values
                                                (lambda ()
                                                  (#{gen-syntax 2904}#
                                                    #{src 2919}#
                                                    #{y 2975}#
                                                    #{r 2921}#
                                                    #{maps 2922}#
                                                    #{ellipsis? 2923}#
                                                    #{mod 2924}#))
                                                (lambda (#{y 3001}#
                                                         #{maps 3002}#)
                                                  (call-with-values
                                                    (lambda ()
                                                      (#{k 2976}#
                                                        #{maps 3002}#))
                                                    (lambda (#{x 3005}#
                                                             #{maps 3006}#)
                                                      (values
                                                        (#{gen-append 2914}#
                                                          #{x 3005}#
                                                          #{y 3001}#)
                                                        #{maps 3006}#))))))))))))
                                 (begin
                                   (#{f 2974}#
                                     #{y 2970}#
                                     (lambda (#{maps 2977}#)
                                       (call-with-values
                                         (lambda ()
                                           (#{gen-syntax 2904}#
                                             #{src 2919}#
                                             #{x 2968}#
                                             #{r 2921}#
                                             (cons '() #{maps 2977}#)
                                             #{ellipsis? 2923}#
                                             #{mod 2924}#))
                                         (lambda (#{x 2979}# #{maps 2980}#)
                                           (if (null? (car #{maps 2980}#))
                                             (syntax-violation
                                               'syntax
                                               "extra ellipsis"
                                               #{src 2919}#)
                                             (values
                                               (#{gen-map 2910}#
                                                 #{x 2979}#
                                                 (car #{maps 2980}#))
                                               (cdr #{maps 2980}#))))))))))
                             #{tmp 2958}#)
                           (let ((#{tmp 3009}#
                                   ($sc-dispatch #{tmp 2946}# '(any . any))))
                             (if #{tmp 3009}#
                               (@apply
                                 (lambda (#{x 3012}# #{y 3013}#)
                                   (call-with-values
                                     (lambda ()
                                       (#{gen-syntax 2904}#
                                         #{src 2919}#
                                         #{x 3012}#
                                         #{r 2921}#
                                         #{maps 2922}#
                                         #{ellipsis? 2923}#
                                         #{mod 2924}#))
                                     (lambda (#{x 3014}# #{maps 3015}#)
                                       (call-with-values
                                         (lambda ()
                                           (#{gen-syntax 2904}#
                                             #{src 2919}#
                                             #{y 3013}#
                                             #{r 2921}#
                                             #{maps 3015}#
                                             #{ellipsis? 2923}#
                                             #{mod 2924}#))
                                         (lambda (#{y 3018}# #{maps 3019}#)
                                           (values
                                             (#{gen-cons 2912}#
                                               #{x 3014}#
                                               #{y 3018}#)
                                             #{maps 3019}#))))))
                                 #{tmp 3009}#)
                               (let ((#{tmp 3022}#
                                       ($sc-dispatch
                                         #{tmp 2946}#
                                         '#(vector (any . each-any)))))
                                 (if #{tmp 3022}#
                                   (@apply
                                     (lambda (#{e1 3025}# #{e2 3026}#)
                                       (call-with-values
                                         (lambda ()
                                           (#{gen-syntax 2904}#
                                             #{src 2919}#
                                             (cons #{e1 3025}# #{e2 3026}#)
                                             #{r 2921}#
                                             #{maps 2922}#
                                             #{ellipsis? 2923}#
                                             #{mod 2924}#))
                                         (lambda (#{e 3028}# #{maps 3029}#)
                                           (values
                                             (#{gen-vector 2916}# #{e 3028}#)
                                             #{maps 3029}#))))
                                     #{tmp 3022}#)
                                   (let ((#{_ 3033}# #{tmp 2946}#))
                                     (values
                                       (list 'quote #{e 2920}#)
                                       #{maps 2922}#))))))))))))))
           (#{gen-ref 2906}#
             (lambda (#{src 3035}#
                      #{var 3036}#
                      #{level 3037}#
                      #{maps 3038}#)
               (if (= #{level 3037}# 0)
                 (values #{var 3036}# #{maps 3038}#)
                 (if (null? #{maps 3038}#)
                   (syntax-violation
                     'syntax
                     "missing ellipsis"
                     #{src 3035}#)
                   (call-with-values
                     (lambda ()
                       (#{gen-ref 2906}#
                         #{src 3035}#
                         #{var 3036}#
                         (#{1-}# #{level 3037}#)
                         (cdr #{maps 3038}#)))
                     (lambda (#{outer-var 3045}# #{outer-maps 3046}#)
                       (begin
                         (let ((#{b 3050}#
                                 (assq #{outer-var 3045}#
                                       (car #{maps 3038}#))))
                           (if #{b 3050}#
                             (values (cdr #{b 3050}#) #{maps 3038}#)
                             (begin
                               (let ((#{inner-var 3052}#
                                       (#{gen-var 451}# 'tmp)))
                                 (values
                                   #{inner-var 3052}#
                                   (cons (cons (cons #{outer-var 3045}#
                                                     #{inner-var 3052}#)
                                               (car #{maps 3038}#))
                                         #{outer-maps 3046}#)))))))))))))
           (#{gen-mappend 2908}#
             (lambda (#{e 3053}# #{map-env 3054}#)
               (list 'apply
                     '(primitive append)
                     (#{gen-map 2910}# #{e 3053}# #{map-env 3054}#))))
           (#{gen-map 2910}#
             (lambda (#{e 3058}# #{map-env 3059}#)
               (begin
                 (let ((#{formals 3064}# (map cdr #{map-env 3059}#))
                       (#{actuals 3065}#
                         (map (lambda (#{x 3066}#)
                                (list 'ref (car #{x 3066}#)))
                              #{map-env 3059}#)))
                   (if (eq? (car #{e 3058}#) 'ref)
                     (car #{actuals 3065}#)
                     (if (and-map
                           (lambda (#{x 3073}#)
                             (if (eq? (car #{x 3073}#) 'ref)
                               (memq (car (cdr #{x 3073}#)) #{formals 3064}#)
                               #f))
                           (cdr #{e 3058}#))
                       (cons 'map
                             (cons (list 'primitive (car #{e 3058}#))
                                   (map (begin
                                          (let ((#{r 3079}#
                                                  (map cons
                                                       #{formals 3064}#
                                                       #{actuals 3065}#)))
                                            (lambda (#{x 3080}#)
                                              (cdr (assq (car (cdr #{x 3080}#))
                                                         #{r 3079}#)))))
                                        (cdr #{e 3058}#))))
                       (cons 'map
                             (cons (list 'lambda #{formals 3064}# #{e 3058}#)
                                   #{actuals 3065}#))))))))
           (#{gen-cons 2912}#
             (lambda (#{x 3084}# #{y 3085}#)
               (begin
                 (let ((#{atom-key 3090}# (car #{y 3085}#)))
                   (if (memv #{atom-key 3090}# '(quote))
                     (if (eq? (car #{x 3084}#) 'quote)
                       (list 'quote
                             (cons (car (cdr #{x 3084}#))
                                   (car (cdr #{y 3085}#))))
                       (if (eq? (car (cdr #{y 3085}#)) '())
                         (list 'list #{x 3084}#)
                         (list 'cons #{x 3084}# #{y 3085}#)))
                     (if (memv #{atom-key 3090}# '(list))
                       (cons 'list (cons #{x 3084}# (cdr #{y 3085}#)))
                       (list 'cons #{x 3084}# #{y 3085}#)))))))
           (#{gen-append 2914}#
             (lambda (#{x 3099}# #{y 3100}#)
               (if (equal? #{y 3100}# ''())
                 #{x 3099}#
                 (list 'append #{x 3099}# #{y 3100}#))))
           (#{gen-vector 2916}#
             (lambda (#{x 3104}#)
               (if (eq? (car #{x 3104}#) 'list)
                 (cons 'vector (cdr #{x 3104}#))
                 (if (eq? (car #{x 3104}#) 'quote)
                   (list 'quote
                         (list->vector (car (cdr #{x 3104}#))))
                   (list 'list->vector #{x 3104}#)))))
           (#{regen 2918}#
             (lambda (#{x 3114}#)
               (begin
                 (let ((#{atom-key 3118}# (car #{x 3114}#)))
                   (if (memv #{atom-key 3118}# '(ref))
                     (#{build-lexical-reference 273}#
                       'value
                       #f
                       (car (cdr #{x 3114}#))
                       (car (cdr #{x 3114}#)))
                     (if (memv #{atom-key 3118}# '(primitive))
                       (#{build-primref 293}# #f (car (cdr #{x 3114}#)))
                       (if (memv #{atom-key 3118}# '(quote))
                         (#{build-data 295}# #f (car (cdr #{x 3114}#)))
                         (if (memv #{atom-key 3118}# '(lambda))
                           (if (list? (car (cdr #{x 3114}#)))
                             (#{build-simple-lambda 285}#
                               #f
                               (car (cdr #{x 3114}#))
                               #f
                               (car (cdr #{x 3114}#))
                               '()
                               (#{regen 2918}# (car (cdr (cdr #{x 3114}#)))))
                             (error "how did we get here" #{x 3114}#))
                           (#{build-primcall 291}#
                             #f
                             (car #{x 3114}#)
                             (map #{regen 2918}# (cdr #{x 3114}#))))))))))))
          (begin
            (lambda (#{e 3129}#
                     #{r 3130}#
                     #{w 3131}#
                     #{s 3132}#
                     #{mod 3133}#)
              (begin
                (let ((#{e 3140}#
                        (#{source-wrap 411}#
                          #{e 3129}#
                          #{w 3131}#
                          #{s 3132}#
                          #{mod 3133}#)))
                  (let ((#{tmp 3141}# #{e 3140}#))
                    (let ((#{tmp 3142}#
                            ($sc-dispatch #{tmp 3141}# '(_ any))))
                      (if #{tmp 3142}#
                        (@apply
                          (lambda (#{x 3144}#)
                            (call-with-values
                              (lambda ()
                                (#{gen-syntax 2904}#
                                  #{e 3140}#
                                  #{x 3144}#
                                  #{r 3130}#
                                  '()
                                  #{ellipsis? 439}#
                                  #{mod 3133}#))
                              (lambda (#{e 3145}# #{maps 3146}#)
                                (#{regen 2918}# #{e 3145}#))))
                          #{tmp 3142}#)
                        (let ((#{_ 3150}# #{tmp 3141}#))
                          (syntax-violation
                            'syntax
                            "bad `syntax' form"
                            #{e 3140}#)))))))))))
      (#{global-extend 339}#
        'core
        'lambda
        (lambda (#{e 3151}#
                 #{r 3152}#
                 #{w 3153}#
                 #{s 3154}#
                 #{mod 3155}#)
          (let ((#{tmp 3161}# #{e 3151}#))
            (let ((#{tmp 3162}#
                    ($sc-dispatch
                      #{tmp 3161}#
                      '(_ any any . each-any))))
              (if #{tmp 3162}#
                (@apply
                  (lambda (#{args 3166}# #{e1 3167}# #{e2 3168}#)
                    (call-with-values
                      (lambda ()
                        (#{lambda-formals 441}# #{args 3166}#))
                      (lambda (#{req 3169}#
                               #{opt 3170}#
                               #{rest 3171}#
                               #{kw 3172}#)
                        (letrec*
                          ((#{lp 3180}#
                             (lambda (#{body 3181}# #{meta 3182}#)
                               (let ((#{tmp 3184}# #{body 3181}#))
                                 (let ((#{tmp 3185}#
                                         ($sc-dispatch
                                           #{tmp 3184}#
                                           '(any any . each-any))))
                                   (if (if #{tmp 3185}#
                                         (@apply
                                           (lambda (#{docstring 3189}#
                                                    #{e1 3190}#
                                                    #{e2 3191}#)
                                             (string?
                                               (syntax->datum
                                                 #{docstring 3189}#)))
                                           #{tmp 3185}#)
                                         #f)
                                     (@apply
                                       (lambda (#{docstring 3195}#
                                                #{e1 3196}#
                                                #{e2 3197}#)
                                         (#{lp 3180}#
                                           (cons #{e1 3196}# #{e2 3197}#)
                                           (append
                                             #{meta 3182}#
                                             (list (cons 'documentation
                                                         (syntax->datum
                                                           #{docstring 3195}#))))))
                                       #{tmp 3185}#)
                                     (let ((#{tmp 3200}#
                                             ($sc-dispatch
                                               #{tmp 3184}#
                                               '(#(vector #(each (any . any)))
                                                 any
                                                 .
                                                 each-any))))
                                       (if #{tmp 3200}#
                                         (@apply
                                           (lambda (#{k 3205}#
                                                    #{v 3206}#
                                                    #{e1 3207}#
                                                    #{e2 3208}#)
                                             (#{lp 3180}#
                                               (cons #{e1 3207}# #{e2 3208}#)
                                               (append
                                                 #{meta 3182}#
                                                 (syntax->datum
                                                   (map cons
                                                        #{k 3205}#
                                                        #{v 3206}#)))))
                                           #{tmp 3200}#)
                                         (let ((#{_ 3213}# #{tmp 3184}#))
                                           (#{chi-simple-lambda 443}#
                                             #{e 3151}#
                                             #{r 3152}#
                                             #{w 3153}#
                                             #{s 3154}#
                                             #{mod 3155}#
                                             #{req 3169}#
                                             #{rest 3171}#
                                             #{meta 3182}#
                                             #{body 3181}#))))))))))
                          (begin
                            (#{lp 3180}#
                              (cons #{e1 3167}# #{e2 3168}#)
                              '()))))))
                  #{tmp 3162}#)
                (let ((#{_ 3215}# #{tmp 3161}#))
                  (syntax-violation
                    'lambda
                    "bad lambda"
                    #{e 3151}#)))))))
      (#{global-extend 339}#
        'core
        'lambda*
        (lambda (#{e 3216}#
                 #{r 3217}#
                 #{w 3218}#
                 #{s 3219}#
                 #{mod 3220}#)
          (let ((#{tmp 3226}# #{e 3216}#))
            (let ((#{tmp 3227}#
                    ($sc-dispatch
                      #{tmp 3226}#
                      '(_ any any . each-any))))
              (if #{tmp 3227}#
                (@apply
                  (lambda (#{args 3231}# #{e1 3232}# #{e2 3233}#)
                    (call-with-values
                      (lambda ()
                        (#{chi-lambda-case 447}#
                          #{e 3216}#
                          #{r 3217}#
                          #{w 3218}#
                          #{s 3219}#
                          #{mod 3220}#
                          #{lambda*-formals 445}#
                          (list (cons #{args 3231}#
                                      (cons #{e1 3232}# #{e2 3233}#)))))
                      (lambda (#{meta 3235}# #{lcase 3236}#)
                        (#{build-case-lambda 287}#
                          #{s 3219}#
                          #{meta 3235}#
                          #{lcase 3236}#))))
                  #{tmp 3227}#)
                (let ((#{_ 3240}# #{tmp 3226}#))
                  (syntax-violation
                    'lambda
                    "bad lambda*"
                    #{e 3216}#)))))))
      (#{global-extend 339}#
        'core
        'case-lambda
        (lambda (#{e 3241}#
                 #{r 3242}#
                 #{w 3243}#
                 #{s 3244}#
                 #{mod 3245}#)
          (let ((#{tmp 3251}# #{e 3241}#))
            (let ((#{tmp 3252}#
                    ($sc-dispatch
                      #{tmp 3251}#
                      '(_ (any any . each-any)
                          .
                          #(each (any any . each-any))))))
              (if #{tmp 3252}#
                (@apply
                  (lambda (#{args 3259}#
                           #{e1 3260}#
                           #{e2 3261}#
                           #{args* 3262}#
                           #{e1* 3263}#
                           #{e2* 3264}#)
                    (call-with-values
                      (lambda ()
                        (#{chi-lambda-case 447}#
                          #{e 3241}#
                          #{r 3242}#
                          #{w 3243}#
                          #{s 3244}#
                          #{mod 3245}#
                          #{lambda-formals 441}#
                          (cons (cons #{args 3259}#
                                      (cons #{e1 3260}# #{e2 3261}#))
                                (map (lambda (#{tmp 3268}#
                                              #{tmp 3267}#
                                              #{tmp 3266}#)
                                       (cons #{tmp 3266}#
                                             (cons #{tmp 3267}# #{tmp 3268}#)))
                                     #{e2* 3264}#
                                     #{e1* 3263}#
                                     #{args* 3262}#))))
                      (lambda (#{meta 3270}# #{lcase 3271}#)
                        (#{build-case-lambda 287}#
                          #{s 3244}#
                          #{meta 3270}#
                          #{lcase 3271}#))))
                  #{tmp 3252}#)
                (let ((#{_ 3275}# #{tmp 3251}#))
                  (syntax-violation
                    'case-lambda
                    "bad case-lambda"
                    #{e 3241}#)))))))
      (#{global-extend 339}#
        'core
        'case-lambda*
        (lambda (#{e 3276}#
                 #{r 3277}#
                 #{w 3278}#
                 #{s 3279}#
                 #{mod 3280}#)
          (let ((#{tmp 3286}# #{e 3276}#))
            (let ((#{tmp 3287}#
                    ($sc-dispatch
                      #{tmp 3286}#
                      '(_ (any any . each-any)
                          .
                          #(each (any any . each-any))))))
              (if #{tmp 3287}#
                (@apply
                  (lambda (#{args 3294}#
                           #{e1 3295}#
                           #{e2 3296}#
                           #{args* 3297}#
                           #{e1* 3298}#
                           #{e2* 3299}#)
                    (call-with-values
                      (lambda ()
                        (#{chi-lambda-case 447}#
                          #{e 3276}#
                          #{r 3277}#
                          #{w 3278}#
                          #{s 3279}#
                          #{mod 3280}#
                          #{lambda*-formals 445}#
                          (cons (cons #{args 3294}#
                                      (cons #{e1 3295}# #{e2 3296}#))
                                (map (lambda (#{tmp 3303}#
                                              #{tmp 3302}#
                                              #{tmp 3301}#)
                                       (cons #{tmp 3301}#
                                             (cons #{tmp 3302}# #{tmp 3303}#)))
                                     #{e2* 3299}#
                                     #{e1* 3298}#
                                     #{args* 3297}#))))
                      (lambda (#{meta 3305}# #{lcase 3306}#)
                        (#{build-case-lambda 287}#
                          #{s 3279}#
                          #{meta 3305}#
                          #{lcase 3306}#))))
                  #{tmp 3287}#)
                (let ((#{_ 3310}# #{tmp 3286}#))
                  (syntax-violation
                    'case-lambda
                    "bad case-lambda*"
                    #{e 3276}#)))))))
      (#{global-extend 339}#
        'core
        'let
        (letrec*
          ((#{chi-let 3312}#
             (lambda (#{e 3313}#
                      #{r 3314}#
                      #{w 3315}#
                      #{s 3316}#
                      #{mod 3317}#
                      #{constructor 3318}#
                      #{ids 3319}#
                      #{vals 3320}#
                      #{exps 3321}#)
               (if (not (#{valid-bound-ids? 403}# #{ids 3319}#))
                 (syntax-violation
                   'let
                   "duplicate bound variable"
                   #{e 3313}#)
                 (begin
                   (let ((#{labels 3333}#
                           (#{gen-labels 358}# #{ids 3319}#))
                         (#{new-vars 3334}#
                           (map #{gen-var 451}# #{ids 3319}#)))
                     (begin
                       (let ((#{nw 3337}#
                               (#{make-binding-wrap 387}#
                                 #{ids 3319}#
                                 #{labels 3333}#
                                 #{w 3315}#))
                             (#{nr 3338}#
                               (#{extend-var-env 333}#
                                 #{labels 3333}#
                                 #{new-vars 3334}#
                                 #{r 3314}#)))
                         (#{constructor 3318}#
                           #{s 3316}#
                           (map syntax->datum #{ids 3319}#)
                           #{new-vars 3334}#
                           (map (lambda (#{x 3339}#)
                                  (#{chi 423}#
                                    #{x 3339}#
                                    #{r 3314}#
                                    #{w 3315}#
                                    #{mod 3317}#))
                                #{vals 3320}#)
                           (#{chi-body 431}#
                             #{exps 3321}#
                             (#{source-wrap 411}#
                               #{e 3313}#
                               #{nw 3337}#
                               #{s 3316}#
                               #{mod 3317}#)
                             #{nr 3338}#
                             #{nw 3337}#
                             #{mod 3317}#))))))))))
          (begin
            (lambda (#{e 3341}#
                     #{r 3342}#
                     #{w 3343}#
                     #{s 3344}#
                     #{mod 3345}#)
              (let ((#{tmp 3351}# #{e 3341}#))
                (let ((#{tmp 3352}#
                        ($sc-dispatch
                          #{tmp 3351}#
                          '(_ #(each (any any)) any . each-any))))
                  (if (if #{tmp 3352}#
                        (@apply
                          (lambda (#{id 3357}#
                                   #{val 3358}#
                                   #{e1 3359}#
                                   #{e2 3360}#)
                            (and-map #{id? 343}# #{id 3357}#))
                          #{tmp 3352}#)
                        #f)
                    (@apply
                      (lambda (#{id 3366}#
                               #{val 3367}#
                               #{e1 3368}#
                               #{e2 3369}#)
                        (#{chi-let 3312}#
                          #{e 3341}#
                          #{r 3342}#
                          #{w 3343}#
                          #{s 3344}#
                          #{mod 3345}#
                          #{build-let 299}#
                          #{id 3366}#
                          #{val 3367}#
                          (cons #{e1 3368}# #{e2 3369}#)))
                      #{tmp 3352}#)
                    (let ((#{tmp 3373}#
                            ($sc-dispatch
                              #{tmp 3351}#
                              '(_ any #(each (any any)) any . each-any))))
                      (if (if #{tmp 3373}#
                            (@apply
                              (lambda (#{f 3379}#
                                       #{id 3380}#
                                       #{val 3381}#
                                       #{e1 3382}#
                                       #{e2 3383}#)
                                (if (#{id? 343}# #{f 3379}#)
                                  (and-map #{id? 343}# #{id 3380}#)
                                  #f))
                              #{tmp 3373}#)
                            #f)
                        (@apply
                          (lambda (#{f 3392}#
                                   #{id 3393}#
                                   #{val 3394}#
                                   #{e1 3395}#
                                   #{e2 3396}#)
                            (#{chi-let 3312}#
                              #{e 3341}#
                              #{r 3342}#
                              #{w 3343}#
                              #{s 3344}#
                              #{mod 3345}#
                              #{build-named-let 301}#
                              (cons #{f 3392}# #{id 3393}#)
                              #{val 3394}#
                              (cons #{e1 3395}# #{e2 3396}#)))
                          #{tmp 3373}#)
                        (let ((#{_ 3401}# #{tmp 3351}#))
                          (syntax-violation
                            'let
                            "bad let"
                            (#{source-wrap 411}#
                              #{e 3341}#
                              #{w 3343}#
                              #{s 3344}#
                              #{mod 3345}#))))))))))))
      (#{global-extend 339}#
        'core
        'letrec
        (lambda (#{e 3402}#
                 #{r 3403}#
                 #{w 3404}#
                 #{s 3405}#
                 #{mod 3406}#)
          (let ((#{tmp 3412}# #{e 3402}#))
            (let ((#{tmp 3413}#
                    ($sc-dispatch
                      #{tmp 3412}#
                      '(_ #(each (any any)) any . each-any))))
              (if (if #{tmp 3413}#
                    (@apply
                      (lambda (#{id 3418}#
                               #{val 3419}#
                               #{e1 3420}#
                               #{e2 3421}#)
                        (and-map #{id? 343}# #{id 3418}#))
                      #{tmp 3413}#)
                    #f)
                (@apply
                  (lambda (#{id 3427}#
                           #{val 3428}#
                           #{e1 3429}#
                           #{e2 3430}#)
                    (begin
                      (let ((#{ids 3432}# #{id 3427}#))
                        (if (not (#{valid-bound-ids? 403}# #{ids 3432}#))
                          (syntax-violation
                            'letrec
                            "duplicate bound variable"
                            #{e 3402}#)
                          (begin
                            (let ((#{labels 3436}#
                                    (#{gen-labels 358}# #{ids 3432}#))
                                  (#{new-vars 3437}#
                                    (map #{gen-var 451}# #{ids 3432}#)))
                              (begin
                                (let ((#{w 3440}#
                                        (#{make-binding-wrap 387}#
                                          #{ids 3432}#
                                          #{labels 3436}#
                                          #{w 3404}#))
                                      (#{r 3441}#
                                        (#{extend-var-env 333}#
                                          #{labels 3436}#
                                          #{new-vars 3437}#
                                          #{r 3403}#)))
                                  (#{build-letrec 303}#
                                    #{s 3405}#
                                    #f
                                    (map syntax->datum #{ids 3432}#)
                                    #{new-vars 3437}#
                                    (map (lambda (#{x 3442}#)
                                           (#{chi 423}#
                                             #{x 3442}#
                                             #{r 3441}#
                                             #{w 3440}#
                                             #{mod 3406}#))
                                         #{val 3428}#)
                                    (#{chi-body 431}#
                                      (cons #{e1 3429}# #{e2 3430}#)
                                      (#{source-wrap 411}#
                                        #{e 3402}#
                                        #{w 3440}#
                                        #{s 3405}#
                                        #{mod 3406}#)
                                      #{r 3441}#
                                      #{w 3440}#
                                      #{mod 3406}#))))))))))
                  #{tmp 3413}#)
                (let ((#{_ 3447}# #{tmp 3412}#))
                  (syntax-violation
                    'letrec
                    "bad letrec"
                    (#{source-wrap 411}#
                      #{e 3402}#
                      #{w 3404}#
                      #{s 3405}#
                      #{mod 3406}#))))))))
      (#{global-extend 339}#
        'core
        'letrec*
        (lambda (#{e 3448}#
                 #{r 3449}#
                 #{w 3450}#
                 #{s 3451}#
                 #{mod 3452}#)
          (let ((#{tmp 3458}# #{e 3448}#))
            (let ((#{tmp 3459}#
                    ($sc-dispatch
                      #{tmp 3458}#
                      '(_ #(each (any any)) any . each-any))))
              (if (if #{tmp 3459}#
                    (@apply
                      (lambda (#{id 3464}#
                               #{val 3465}#
                               #{e1 3466}#
                               #{e2 3467}#)
                        (and-map #{id? 343}# #{id 3464}#))
                      #{tmp 3459}#)
                    #f)
                (@apply
                  (lambda (#{id 3473}#
                           #{val 3474}#
                           #{e1 3475}#
                           #{e2 3476}#)
                    (begin
                      (let ((#{ids 3478}# #{id 3473}#))
                        (if (not (#{valid-bound-ids? 403}# #{ids 3478}#))
                          (syntax-violation
                            'letrec*
                            "duplicate bound variable"
                            #{e 3448}#)
                          (begin
                            (let ((#{labels 3482}#
                                    (#{gen-labels 358}# #{ids 3478}#))
                                  (#{new-vars 3483}#
                                    (map #{gen-var 451}# #{ids 3478}#)))
                              (begin
                                (let ((#{w 3486}#
                                        (#{make-binding-wrap 387}#
                                          #{ids 3478}#
                                          #{labels 3482}#
                                          #{w 3450}#))
                                      (#{r 3487}#
                                        (#{extend-var-env 333}#
                                          #{labels 3482}#
                                          #{new-vars 3483}#
                                          #{r 3449}#)))
                                  (#{build-letrec 303}#
                                    #{s 3451}#
                                    #t
                                    (map syntax->datum #{ids 3478}#)
                                    #{new-vars 3483}#
                                    (map (lambda (#{x 3488}#)
                                           (#{chi 423}#
                                             #{x 3488}#
                                             #{r 3487}#
                                             #{w 3486}#
                                             #{mod 3452}#))
                                         #{val 3474}#)
                                    (#{chi-body 431}#
                                      (cons #{e1 3475}# #{e2 3476}#)
                                      (#{source-wrap 411}#
                                        #{e 3448}#
                                        #{w 3486}#
                                        #{s 3451}#
                                        #{mod 3452}#)
                                      #{r 3487}#
                                      #{w 3486}#
                                      #{mod 3452}#))))))))))
                  #{tmp 3459}#)
                (let ((#{_ 3493}# #{tmp 3458}#))
                  (syntax-violation
                    'letrec*
                    "bad letrec*"
                    (#{source-wrap 411}#
                      #{e 3448}#
                      #{w 3450}#
                      #{s 3451}#
                      #{mod 3452}#))))))))
      (#{global-extend 339}#
        'core
        'set!
        (lambda (#{e 3494}#
                 #{r 3495}#
                 #{w 3496}#
                 #{s 3497}#
                 #{mod 3498}#)
          (let ((#{tmp 3504}# #{e 3494}#))
            (let ((#{tmp 3505}#
                    ($sc-dispatch #{tmp 3504}# '(_ any any))))
              (if (if #{tmp 3505}#
                    (@apply
                      (lambda (#{id 3508}# #{val 3509}#)
                        (#{id? 343}# #{id 3508}#))
                      #{tmp 3505}#)
                    #f)
                (@apply
                  (lambda (#{id 3512}# #{val 3513}#)
                    (begin
                      (let ((#{n 3516}#
                              (#{id-var-name 397}# #{id 3512}# #{w 3496}#))
                            (#{id-mod 3517}#
                              (if (#{syntax-object? 309}# #{id 3512}#)
                                (#{syntax-object-module 315}# #{id 3512}#)
                                #{mod 3498}#)))
                        (begin
                          (let ((#{b 3519}#
                                  (#{lookup 337}#
                                    #{n 3516}#
                                    #{r 3495}#
                                    #{id-mod 3517}#)))
                            (begin
                              (let ((#{atom-key 3522}# (car #{b 3519}#)))
                                (if (memv #{atom-key 3522}# '(lexical))
                                  (#{build-lexical-assignment 275}#
                                    #{s 3497}#
                                    (syntax->datum #{id 3512}#)
                                    (cdr #{b 3519}#)
                                    (#{chi 423}#
                                      #{val 3513}#
                                      #{r 3495}#
                                      #{w 3496}#
                                      #{mod 3498}#))
                                  (if (memv #{atom-key 3522}# '(global))
                                    (#{build-global-assignment 281}#
                                      #{s 3497}#
                                      #{n 3516}#
                                      (#{chi 423}#
                                        #{val 3513}#
                                        #{r 3495}#
                                        #{w 3496}#
                                        #{mod 3498}#)
                                      #{id-mod 3517}#)
                                    (if (memv #{atom-key 3522}# '(macro))
                                      (begin
                                        (let ((#{p 3529}# (cdr #{b 3519}#)))
                                          (if (procedure-property
                                                #{p 3529}#
                                                'variable-transformer)
                                            (#{chi 423}#
                                              (#{chi-macro 429}#
                                                #{p 3529}#
                                                #{e 3494}#
                                                #{r 3495}#
                                                #{w 3496}#
                                                #{s 3497}#
                                                #f
                                                #{mod 3498}#)
                                              #{r 3495}#
                                              '(())
                                              #{mod 3498}#)
                                            (syntax-violation
                                              'set!
                                              "not a variable transformer"
                                              (#{wrap 409}#
                                                #{e 3494}#
                                                #{w 3496}#
                                                #{mod 3498}#)
                                              (#{wrap 409}#
                                                #{id 3512}#
                                                #{w 3496}#
                                                #{id-mod 3517}#)))))
                                      (if (memv #{atom-key 3522}#
                                                '(displaced-lexical))
                                        (syntax-violation
                                          'set!
                                          "identifier out of context"
                                          (#{wrap 409}#
                                            #{id 3512}#
                                            #{w 3496}#
                                            #{mod 3498}#))
                                        (syntax-violation
                                          'set!
                                          "bad set!"
                                          (#{source-wrap 411}#
                                            #{e 3494}#
                                            #{w 3496}#
                                            #{s 3497}#
                                            #{mod 3498}#)))))))))))))
                  #{tmp 3505}#)
                (let ((#{tmp 3534}#
                        ($sc-dispatch
                          #{tmp 3504}#
                          '(_ (any . each-any) any))))
                  (if #{tmp 3534}#
                    (@apply
                      (lambda (#{head 3538}# #{tail 3539}# #{val 3540}#)
                        (call-with-values
                          (lambda ()
                            (#{syntax-type 421}#
                              #{head 3538}#
                              #{r 3495}#
                              '(())
                              #f
                              #f
                              #{mod 3498}#
                              #t))
                          (lambda (#{type 3543}#
                                   #{value 3544}#
                                   #{ee 3545}#
                                   #{ww 3546}#
                                   #{ss 3547}#
                                   #{modmod 3548}#)
                            (if (memv #{type 3543}# '(module-ref))
                              (begin
                                (let ((#{val 3557}#
                                        (#{chi 423}#
                                          #{val 3540}#
                                          #{r 3495}#
                                          #{w 3496}#
                                          #{mod 3498}#)))
                                  (call-with-values
                                    (lambda ()
                                      (#{value 3544}#
                                        (cons #{head 3538}# #{tail 3539}#)
                                        #{r 3495}#
                                        #{w 3496}#))
                                    (lambda (#{e 3559}#
                                             #{r 3560}#
                                             #{w 3561}#
                                             #{s* 3562}#
                                             #{mod 3563}#)
                                      (let ((#{tmp 3569}# #{e 3559}#))
                                        (let ((#{tmp 3570}#
                                                (list #{tmp 3569}#)))
                                          (if (if #{tmp 3570}#
                                                (@apply
                                                  (lambda (#{e 3572}#)
                                                    (#{id? 343}# #{e 3572}#))
                                                  #{tmp 3570}#)
                                                #f)
                                            (@apply
                                              (lambda (#{e 3574}#)
                                                (#{build-global-assignment 281}#
                                                  #{s 3497}#
                                                  (syntax->datum #{e 3574}#)
                                                  #{val 3557}#
                                                  #{mod 3563}#))
                                              #{tmp 3570}#)
                                            (syntax-violation
                                              #f
                                              "source expression failed to match any pattern"
                                              #{tmp 3569}#))))))))
                              (#{build-call 267}#
                                #{s 3497}#
                                (#{chi 423}#
                                  (list '#(syntax-object
                                           setter
                                           ((top)
                                            #(ribcage () () ())
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(type value ee ww ss modmod)
                                              #((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                              #("i3549"
                                                "i3550"
                                                "i3551"
                                                "i3552"
                                                "i3553"
                                                "i3554"))
                                            #(ribcage
                                              #(head tail val)
                                              #((top) (top) (top))
                                              #("i3535" "i3536" "i3537"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(e r w s mod)
                                              #((top) (top) (top) (top) (top))
                                              #("i3499"
                                                "i3500"
                                                "i3501"
                                                "i3502"
                                                "i3503"))
                                            #(ribcage
                                              (lambda-var-list
                                                gen-var
                                                strip
                                                chi-lambda-case
                                                lambda*-formals
                                                chi-simple-lambda
                                                lambda-formals
                                                ellipsis?
                                                chi-void
                                                eval-local-transformer
                                                chi-local-syntax
                                                chi-body
                                                chi-macro
                                                chi-call
                                                chi-expr
                                                chi
                                                syntax-type
                                                chi-when-list
                                                chi-install-global
                                                chi-top-sequence
                                                chi-sequence
                                                source-wrap
                                                wrap
                                                bound-id-member?
                                                distinct-bound-ids?
                                                valid-bound-ids?
                                                bound-id=?
                                                free-id=?
                                                id-var-name
                                                same-marks?
                                                join-marks
                                                join-wraps
                                                smart-append
                                                make-binding-wrap
                                                extend-ribcage!
                                                make-empty-ribcage
                                                new-mark
                                                anti-mark
                                                the-anti-mark
                                                top-marked?
                                                top-wrap
                                                empty-wrap
                                                set-ribcage-labels!
                                                set-ribcage-marks!
                                                set-ribcage-symnames!
                                                ribcage-labels
                                                ribcage-marks
                                                ribcage-symnames
                                                ribcage?
                                                make-ribcage
                                                gen-labels
                                                gen-label
                                                make-rename
                                                rename-marks
                                                rename-new
                                                rename-old
                                                subst-rename?
                                                wrap-subst
                                                wrap-marks
                                                make-wrap
                                                id-sym-name&marks
                                                id-sym-name
                                                id?
                                                nonsymbol-id?
                                                global-extend
                                                lookup
                                                macros-only-env
                                                extend-var-env
                                                extend-env
                                                null-env
                                                binding-value
                                                binding-type
                                                make-binding
                                                arg-check
                                                source-annotation
                                                no-source
                                                set-syntax-object-module!
                                                set-syntax-object-wrap!
                                                set-syntax-object-expression!
                                                syntax-object-module
                                                syntax-object-wrap
                                                syntax-object-expression
                                                syntax-object?
                                                make-syntax-object
                                                build-lexical-var
                                                build-letrec
                                                build-named-let
                                                build-let
                                                build-sequence
                                                build-data
                                                build-primref
                                                build-primcall
                                                build-lambda-case
                                                build-case-lambda
                                                build-simple-lambda
                                                build-global-definition
                                                build-global-assignment
                                                build-global-reference
                                                analyze-variable
                                                build-lexical-assignment
                                                build-lexical-reference
                                                build-dynlet
                                                build-conditional
                                                build-call
                                                build-void
                                                maybe-name-value!
                                                decorate-source
                                                get-global-definition-hook
                                                put-global-definition-hook
                                                gensym-hook
                                                local-eval-hook
                                                top-level-eval-hook
                                                fx<
                                                fx=
                                                fx-
                                                fx+
                                                set-lambda-meta!
                                                lambda-meta
                                                lambda?
                                                make-dynlet
                                                make-letrec
                                                make-let
                                                make-lambda-case
                                                make-lambda
                                                make-sequence
                                                make-primcall
                                                make-call
                                                make-conditional
                                                make-toplevel-define
                                                make-toplevel-set
                                                make-toplevel-ref
                                                make-module-set
                                                make-module-ref
                                                make-lexical-set
                                                make-lexical-ref
                                                make-primitive-ref
                                                make-const
                                                make-void)
                                              ((top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top))
                                              ("i452"
                                               "i450"
                                               "i448"
                                               "i446"
                                               "i444"
                                               "i442"
                                               "i440"
                                               "i438"
                                               "i436"
                                               "i434"
                                               "i432"
                                               "i430"
                                               "i428"
                                               "i426"
                                               "i424"
                                               "i422"
                                               "i420"
                                               "i418"
                                               "i416"
                                               "i414"
                                               "i412"
                                               "i410"
                                               "i408"
                                               "i406"
                                               "i404"
                                               "i402"
                                               "i400"
                                               "i398"
                                               "i396"
                                               "i394"
                                               "i392"
                                               "i390"
                                               "i388"
                                               "i386"
                                               "i384"
                                               "i383"
                                               "i382"
                                               "i380"
                                               "i379"
                                               "i378"
                                               "i377"
                                               "i376"
                                               "i374"
                                               "i372"
                                               "i370"
                                               "i368"
                                               "i366"
                                               "i364"
                                               "i362"
                                               "i360"
                                               "i357"
                                               "i355"
                                               "i354"
                                               "i353"
                                               "i352"
                                               "i351"
                                               "i350"
                                               "i349"
                                               "i348"
                                               "i347"
                                               "i345"
                                               "i344"
                                               "i342"
                                               "i340"
                                               "i338"
                                               "i336"
                                               "i334"
                                               "i332"
                                               "i330"
                                               "i329"
                                               "i328"
                                               "i327"
                                               "i326"
                                               "i325"
                                               "i323"
                                               "i322"
                                               "i320"
                                               "i318"
                                               "i316"
                                               "i314"
                                               "i312"
                                               "i310"
                                               "i308"
                                               "i306"
                                               "i304"
                                               "i302"
                                               "i300"
                                               "i298"
                                               "i296"
                                               "i294"
                                               "i292"
                                               "i290"
                                               "i288"
                                               "i286"
                                               "i284"
                                               "i282"
                                               "i280"
                                               "i278"
                                               "i276"
                                               "i274"
                                               "i272"
                                               "i270"
                                               "i268"
                                               "i266"
                                               "i264"
                                               "i262"
                                               "i260"
                                               "i258"
                                               "i256"
                                               "i255"
                                               "i253"
                                               "i251"
                                               "i250"
                                               "i249"
                                               "i248"
                                               "i247"
                                               "i245"
                                               "i243"
                                               "i241"
                                               "i238"
                                               "i236"
                                               "i234"
                                               "i232"
                                               "i230"
                                               "i228"
                                               "i226"
                                               "i224"
                                               "i222"
                                               "i220"
                                               "i218"
                                               "i216"
                                               "i214"
                                               "i212"
                                               "i210"
                                               "i208"
                                               "i206"
                                               "i204"
                                               "i202"))
                                            #(ribcage
                                              (define-structure
                                                define-expansion-accessors
                                                define-expansion-constructors)
                                              ((top) (top) (top))
                                              ("i40" "i39" "i38")))
                                           (hygiene guile))
                                        #{head 3538}#)
                                  #{r 3495}#
                                  #{w 3496}#
                                  #{mod 3498}#)
                                (map (lambda (#{e 3576}#)
                                       (#{chi 423}#
                                         #{e 3576}#
                                         #{r 3495}#
                                         #{w 3496}#
                                         #{mod 3498}#))
                                     (append
                                       #{tail 3539}#
                                       (list #{val 3540}#))))))))
                      #{tmp 3534}#)
                    (let ((#{_ 3580}# #{tmp 3504}#))
                      (syntax-violation
                        'set!
                        "bad set!"
                        (#{source-wrap 411}#
                          #{e 3494}#
                          #{w 3496}#
                          #{s 3497}#
                          #{mod 3498}#))))))))))
      (#{global-extend 339}#
        'module-ref
        '@
        (lambda (#{e 3581}# #{r 3582}# #{w 3583}#)
          (let ((#{tmp 3587}# #{e 3581}#))
            (let ((#{tmp 3588}#
                    ($sc-dispatch #{tmp 3587}# '(_ each-any any))))
              (if (if #{tmp 3588}#
                    (@apply
                      (lambda (#{mod 3591}# #{id 3592}#)
                        (if (and-map #{id? 343}# #{mod 3591}#)
                          (#{id? 343}# #{id 3592}#)
                          #f))
                      #{tmp 3588}#)
                    #f)
                (@apply
                  (lambda (#{mod 3598}# #{id 3599}#)
                    (values
                      (syntax->datum #{id 3599}#)
                      #{r 3582}#
                      #{w 3583}#
                      #f
                      (syntax->datum
                        (cons '#(syntax-object
                                 public
                                 ((top)
                                  #(ribcage
                                    #(mod id)
                                    #((top) (top))
                                    #("i3596" "i3597"))
                                  #(ribcage () () ())
                                  #(ribcage
                                    #(e r w)
                                    #((top) (top) (top))
                                    #("i3584" "i3585" "i3586"))
                                  #(ribcage
                                    (lambda-var-list
                                      gen-var
                                      strip
                                      chi-lambda-case
                                      lambda*-formals
                                      chi-simple-lambda
                                      lambda-formals
                                      ellipsis?
                                      chi-void
                                      eval-local-transformer
                                      chi-local-syntax
                                      chi-body
                                      chi-macro
                                      chi-call
                                      chi-expr
                                      chi
                                      syntax-type
                                      chi-when-list
                                      chi-install-global
                                      chi-top-sequence
                                      chi-sequence
                                      source-wrap
                                      wrap
                                      bound-id-member?
                                      distinct-bound-ids?
                                      valid-bound-ids?
                                      bound-id=?
                                      free-id=?
                                      id-var-name
                                      same-marks?
                                      join-marks
                                      join-wraps
                                      smart-append
                                      make-binding-wrap
                                      extend-ribcage!
                                      make-empty-ribcage
                                      new-mark
                                      anti-mark
                                      the-anti-mark
                                      top-marked?
                                      top-wrap
                                      empty-wrap
                                      set-ribcage-labels!
                                      set-ribcage-marks!
                                      set-ribcage-symnames!
                                      ribcage-labels
                                      ribcage-marks
                                      ribcage-symnames
                                      ribcage?
                                      make-ribcage
                                      gen-labels
                                      gen-label
                                      make-rename
                                      rename-marks
                                      rename-new
                                      rename-old
                                      subst-rename?
                                      wrap-subst
                                      wrap-marks
                                      make-wrap
                                      id-sym-name&marks
                                      id-sym-name
                                      id?
                                      nonsymbol-id?
                                      global-extend
                                      lookup
                                      macros-only-env
                                      extend-var-env
                                      extend-env
                                      null-env
                                      binding-value
                                      binding-type
                                      make-binding
                                      arg-check
                                      source-annotation
                                      no-source
                                      set-syntax-object-module!
                                      set-syntax-object-wrap!
                                      set-syntax-object-expression!
                                      syntax-object-module
                                      syntax-object-wrap
                                      syntax-object-expression
                                      syntax-object?
                                      make-syntax-object
                                      build-lexical-var
                                      build-letrec
                                      build-named-let
                                      build-let
                                      build-sequence
                                      build-data
                                      build-primref
                                      build-primcall
                                      build-lambda-case
                                      build-case-lambda
                                      build-simple-lambda
                                      build-global-definition
                                      build-global-assignment
                                      build-global-reference
                                      analyze-variable
                                      build-lexical-assignment
                                      build-lexical-reference
                                      build-dynlet
                                      build-conditional
                                      build-call
                                      build-void
                                      maybe-name-value!
                                      decorate-source
                                      get-global-definition-hook
                                      put-global-definition-hook
                                      gensym-hook
                                      local-eval-hook
                                      top-level-eval-hook
                                      fx<
                                      fx=
                                      fx-
                                      fx+
                                      set-lambda-meta!
                                      lambda-meta
                                      lambda?
                                      make-dynlet
                                      make-letrec
                                      make-let
                                      make-lambda-case
                                      make-lambda
                                      make-sequence
                                      make-primcall
                                      make-call
                                      make-conditional
                                      make-toplevel-define
                                      make-toplevel-set
                                      make-toplevel-ref
                                      make-module-set
                                      make-module-ref
                                      make-lexical-set
                                      make-lexical-ref
                                      make-primitive-ref
                                      make-const
                                      make-void)
                                    ((top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top))
                                    ("i452"
                                     "i450"
                                     "i448"
                                     "i446"
                                     "i444"
                                     "i442"
                                     "i440"
                                     "i438"
                                     "i436"
                                     "i434"
                                     "i432"
                                     "i430"
                                     "i428"
                                     "i426"
                                     "i424"
                                     "i422"
                                     "i420"
                                     "i418"
                                     "i416"
                                     "i414"
                                     "i412"
                                     "i410"
                                     "i408"
                                     "i406"
                                     "i404"
                                     "i402"
                                     "i400"
                                     "i398"
                                     "i396"
                                     "i394"
                                     "i392"
                                     "i390"
                                     "i388"
                                     "i386"
                                     "i384"
                                     "i383"
                                     "i382"
                                     "i380"
                                     "i379"
                                     "i378"
                                     "i377"
                                     "i376"
                                     "i374"
                                     "i372"
                                     "i370"
                                     "i368"
                                     "i366"
                                     "i364"
                                     "i362"
                                     "i360"
                                     "i357"
                                     "i355"
                                     "i354"
                                     "i353"
                                     "i352"
                                     "i351"
                                     "i350"
                                     "i349"
                                     "i348"
                                     "i347"
                                     "i345"
                                     "i344"
                                     "i342"
                                     "i340"
                                     "i338"
                                     "i336"
                                     "i334"
                                     "i332"
                                     "i330"
                                     "i329"
                                     "i328"
                                     "i327"
                                     "i326"
                                     "i325"
                                     "i323"
                                     "i322"
                                     "i320"
                                     "i318"
                                     "i316"
                                     "i314"
                                     "i312"
                                     "i310"
                                     "i308"
                                     "i306"
                                     "i304"
                                     "i302"
                                     "i300"
                                     "i298"
                                     "i296"
                                     "i294"
                                     "i292"
                                     "i290"
                                     "i288"
                                     "i286"
                                     "i284"
                                     "i282"
                                     "i280"
                                     "i278"
                                     "i276"
                                     "i274"
                                     "i272"
                                     "i270"
                                     "i268"
                                     "i266"
                                     "i264"
                                     "i262"
                                     "i260"
                                     "i258"
                                     "i256"
                                     "i255"
                                     "i253"
                                     "i251"
                                     "i250"
                                     "i249"
                                     "i248"
                                     "i247"
                                     "i245"
                                     "i243"
                                     "i241"
                                     "i238"
                                     "i236"
                                     "i234"
                                     "i232"
                                     "i230"
                                     "i228"
                                     "i226"
                                     "i224"
                                     "i222"
                                     "i220"
                                     "i218"
                                     "i216"
                                     "i214"
                                     "i212"
                                     "i210"
                                     "i208"
                                     "i206"
                                     "i204"
                                     "i202"))
                                  #(ribcage
                                    (define-structure
                                      define-expansion-accessors
                                      define-expansion-constructors)
                                    ((top) (top) (top))
                                    ("i40" "i39" "i38")))
                                 (hygiene guile))
                              #{mod 3598}#))))
                  #{tmp 3588}#)
                (syntax-violation
                  #f
                  "source expression failed to match any pattern"
                  #{tmp 3587}#))))))
      (#{global-extend 339}#
        'module-ref
        '@@
        (lambda (#{e 3601}# #{r 3602}# #{w 3603}#)
          (letrec*
            ((#{remodulate 3608}#
               (lambda (#{x 3609}# #{mod 3610}#)
                 (if (pair? #{x 3609}#)
                   (cons (#{remodulate 3608}#
                           (car #{x 3609}#)
                           #{mod 3610}#)
                         (#{remodulate 3608}#
                           (cdr #{x 3609}#)
                           #{mod 3610}#))
                   (if (#{syntax-object? 309}# #{x 3609}#)
                     (#{make-syntax-object 307}#
                       (#{remodulate 3608}#
                         (#{syntax-object-expression 311}# #{x 3609}#)
                         #{mod 3610}#)
                       (#{syntax-object-wrap 313}# #{x 3609}#)
                       #{mod 3610}#)
                     (if (vector? #{x 3609}#)
                       (begin
                         (let ((#{n 3621}# (vector-length #{x 3609}#)))
                           (begin
                             (let ((#{v 3623}# (make-vector #{n 3621}#)))
                               (letrec*
                                 ((#{loop 3626}#
                                    (lambda (#{i 3627}#)
                                      (if (= #{i 3627}# #{n 3621}#)
                                        (begin (if #f #f) #{v 3623}#)
                                        (begin
                                          (vector-set!
                                            #{v 3623}#
                                            #{i 3627}#
                                            (#{remodulate 3608}#
                                              (vector-ref
                                                #{x 3609}#
                                                #{i 3627}#)
                                              #{mod 3610}#))
                                          (#{loop 3626}#
                                            (#{1+}# #{i 3627}#)))))))
                                 (begin (#{loop 3626}# 0)))))))
                       #{x 3609}#))))))
            (begin
              (let ((#{tmp 3633}# #{e 3601}#))
                (let ((#{tmp 3634}#
                        ($sc-dispatch #{tmp 3633}# '(_ each-any any))))
                  (if (if #{tmp 3634}#
                        (@apply
                          (lambda (#{mod 3637}# #{exp 3638}#)
                            (and-map #{id? 343}# #{mod 3637}#))
                          #{tmp 3634}#)
                        #f)
                    (@apply
                      (lambda (#{mod 3642}# #{exp 3643}#)
                        (begin
                          (let ((#{mod 3645}#
                                  (syntax->datum
                                    (cons '#(syntax-object
                                             private
                                             ((top)
                                              #(ribcage
                                                #(mod exp)
                                                #((top) (top))
                                                #("i3640" "i3641"))
                                              #(ribcage
                                                (remodulate)
                                                ((top))
                                                ("i3607"))
                                              #(ribcage
                                                #(e r w)
                                                #((top) (top) (top))
                                                #("i3604" "i3605" "i3606"))
                                              #(ribcage
                                                (lambda-var-list
                                                  gen-var
                                                  strip
                                                  chi-lambda-case
                                                  lambda*-formals
                                                  chi-simple-lambda
                                                  lambda-formals
                                                  ellipsis?
                                                  chi-void
                                                  eval-local-transformer
                                                  chi-local-syntax
                                                  chi-body
                                                  chi-macro
                                                  chi-call
                                                  chi-expr
                                                  chi
                                                  syntax-type
                                                  chi-when-list
                                                  chi-install-global
                                                  chi-top-sequence
                                                  chi-sequence
                                                  source-wrap
                                                  wrap
                                                  bound-id-member?
                                                  distinct-bound-ids?
                                                  valid-bound-ids?
                                                  bound-id=?
                                                  free-id=?
                                                  id-var-name
                                                  same-marks?
                                                  join-marks
                                                  join-wraps
                                                  smart-append
                                                  make-binding-wrap
                                                  extend-ribcage!
                                                  make-empty-ribcage
                                                  new-mark
                                                  anti-mark
                                                  the-anti-mark
                                                  top-marked?
                                                  top-wrap
                                                  empty-wrap
                                                  set-ribcage-labels!
                                                  set-ribcage-marks!
                                                  set-ribcage-symnames!
                                                  ribcage-labels
                                                  ribcage-marks
                                                  ribcage-symnames
                                                  ribcage?
                                                  make-ribcage
                                                  gen-labels
                                                  gen-label
                                                  make-rename
                                                  rename-marks
                                                  rename-new
                                                  rename-old
                                                  subst-rename?
                                                  wrap-subst
                                                  wrap-marks
                                                  make-wrap
                                                  id-sym-name&marks
                                                  id-sym-name
                                                  id?
                                                  nonsymbol-id?
                                                  global-extend
                                                  lookup
                                                  macros-only-env
                                                  extend-var-env
                                                  extend-env
                                                  null-env
                                                  binding-value
                                                  binding-type
                                                  make-binding
                                                  arg-check
                                                  source-annotation
                                                  no-source
                                                  set-syntax-object-module!
                                                  set-syntax-object-wrap!
                                                  set-syntax-object-expression!
                                                  syntax-object-module
                                                  syntax-object-wrap
                                                  syntax-object-expression
                                                  syntax-object?
                                                  make-syntax-object
                                                  build-lexical-var
                                                  build-letrec
                                                  build-named-let
                                                  build-let
                                                  build-sequence
                                                  build-data
                                                  build-primref
                                                  build-primcall
                                                  build-lambda-case
                                                  build-case-lambda
                                                  build-simple-lambda
                                                  build-global-definition
                                                  build-global-assignment
                                                  build-global-reference
                                                  analyze-variable
                                                  build-lexical-assignment
                                                  build-lexical-reference
                                                  build-dynlet
                                                  build-conditional
                                                  build-call
                                                  build-void
                                                  maybe-name-value!
                                                  decorate-source
                                                  get-global-definition-hook
                                                  put-global-definition-hook
                                                  gensym-hook
                                                  local-eval-hook
                                                  top-level-eval-hook
                                                  fx<
                                                  fx=
                                                  fx-
                                                  fx+
                                                  set-lambda-meta!
                                                  lambda-meta
                                                  lambda?
                                                  make-dynlet
                                                  make-letrec
                                                  make-let
                                                  make-lambda-case
                                                  make-lambda
                                                  make-sequence
                                                  make-primcall
                                                  make-call
                                                  make-conditional
                                                  make-toplevel-define
                                                  make-toplevel-set
                                                  make-toplevel-ref
                                                  make-module-set
                                                  make-module-ref
                                                  make-lexical-set
                                                  make-lexical-ref
                                                  make-primitive-ref
                                                  make-const
                                                  make-void)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("i452"
                                                 "i450"
                                                 "i448"
                                                 "i446"
                                                 "i444"
                                                 "i442"
                                                 "i440"
                                                 "i438"
                                                 "i436"
                                                 "i434"
                                                 "i432"
                                                 "i430"
                                                 "i428"
                                                 "i426"
                                                 "i424"
                                                 "i422"
                                                 "i420"
                                                 "i418"
                                                 "i416"
                                                 "i414"
                                                 "i412"
                                                 "i410"
                                                 "i408"
                                                 "i406"
                                                 "i404"
                                                 "i402"
                                                 "i400"
                                                 "i398"
                                                 "i396"
                                                 "i394"
                                                 "i392"
                                                 "i390"
                                                 "i388"
                                                 "i386"
                                                 "i384"
                                                 "i383"
                                                 "i382"
                                                 "i380"
                                                 "i379"
                                                 "i378"
                                                 "i377"
                                                 "i376"
                                                 "i374"
                                                 "i372"
                                                 "i370"
                                                 "i368"
                                                 "i366"
                                                 "i364"
                                                 "i362"
                                                 "i360"
                                                 "i357"
                                                 "i355"
                                                 "i354"
                                                 "i353"
                                                 "i352"
                                                 "i351"
                                                 "i350"
                                                 "i349"
                                                 "i348"
                                                 "i347"
                                                 "i345"
                                                 "i344"
                                                 "i342"
                                                 "i340"
                                                 "i338"
                                                 "i336"
                                                 "i334"
                                                 "i332"
                                                 "i330"
                                                 "i329"
                                                 "i328"
                                                 "i327"
                                                 "i326"
                                                 "i325"
                                                 "i323"
                                                 "i322"
                                                 "i320"
                                                 "i318"
                                                 "i316"
                                                 "i314"
                                                 "i312"
                                                 "i310"
                                                 "i308"
                                                 "i306"
                                                 "i304"
                                                 "i302"
                                                 "i300"
                                                 "i298"
                                                 "i296"
                                                 "i294"
                                                 "i292"
                                                 "i290"
                                                 "i288"
                                                 "i286"
                                                 "i284"
                                                 "i282"
                                                 "i280"
                                                 "i278"
                                                 "i276"
                                                 "i274"
                                                 "i272"
                                                 "i270"
                                                 "i268"
                                                 "i266"
                                                 "i264"
                                                 "i262"
                                                 "i260"
                                                 "i258"
                                                 "i256"
                                                 "i255"
                                                 "i253"
                                                 "i251"
                                                 "i250"
                                                 "i249"
                                                 "i248"
                                                 "i247"
                                                 "i245"
                                                 "i243"
                                                 "i241"
                                                 "i238"
                                                 "i236"
                                                 "i234"
                                                 "i232"
                                                 "i230"
                                                 "i228"
                                                 "i226"
                                                 "i224"
                                                 "i222"
                                                 "i220"
                                                 "i218"
                                                 "i216"
                                                 "i214"
                                                 "i212"
                                                 "i210"
                                                 "i208"
                                                 "i206"
                                                 "i204"
                                                 "i202"))
                                              #(ribcage
                                                (define-structure
                                                  define-expansion-accessors
                                                  define-expansion-constructors)
                                                ((top) (top) (top))
                                                ("i40" "i39" "i38")))
                                             (hygiene guile))
                                          #{mod 3642}#))))
                            (values
                              (#{remodulate 3608}# #{exp 3643}# #{mod 3645}#)
                              #{r 3602}#
                              #{w 3603}#
                              (#{source-annotation 324}# #{exp 3643}#)
                              #{mod 3645}#))))
                      #{tmp 3634}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp 3633}#))))))))
      (#{global-extend 339}#
        'core
        'if
        (lambda (#{e 3647}#
                 #{r 3648}#
                 #{w 3649}#
                 #{s 3650}#
                 #{mod 3651}#)
          (let ((#{tmp 3657}# #{e 3647}#))
            (let ((#{tmp 3658}#
                    ($sc-dispatch #{tmp 3657}# '(_ any any))))
              (if #{tmp 3658}#
                (@apply
                  (lambda (#{test 3661}# #{then 3662}#)
                    (#{build-conditional 269}#
                      #{s 3650}#
                      (#{chi 423}#
                        #{test 3661}#
                        #{r 3648}#
                        #{w 3649}#
                        #{mod 3651}#)
                      (#{chi 423}#
                        #{then 3662}#
                        #{r 3648}#
                        #{w 3649}#
                        #{mod 3651}#)
                      (#{build-void 265}# #f)))
                  #{tmp 3658}#)
                (let ((#{tmp 3664}#
                        ($sc-dispatch #{tmp 3657}# '(_ any any any))))
                  (if #{tmp 3664}#
                    (@apply
                      (lambda (#{test 3668}# #{then 3669}# #{else 3670}#)
                        (#{build-conditional 269}#
                          #{s 3650}#
                          (#{chi 423}#
                            #{test 3668}#
                            #{r 3648}#
                            #{w 3649}#
                            #{mod 3651}#)
                          (#{chi 423}#
                            #{then 3669}#
                            #{r 3648}#
                            #{w 3649}#
                            #{mod 3651}#)
                          (#{chi 423}#
                            #{else 3670}#
                            #{r 3648}#
                            #{w 3649}#
                            #{mod 3651}#)))
                      #{tmp 3664}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp 3657}#))))))))
      (#{global-extend 339}#
        'core
        'with-fluids
        (lambda (#{e 3671}#
                 #{r 3672}#
                 #{w 3673}#
                 #{s 3674}#
                 #{mod 3675}#)
          (let ((#{tmp 3681}# #{e 3671}#))
            (let ((#{tmp 3682}#
                    ($sc-dispatch
                      #{tmp 3681}#
                      '(_ #(each (any any)) any . each-any))))
              (if #{tmp 3682}#
                (@apply
                  (lambda (#{fluid 3687}#
                           #{val 3688}#
                           #{b 3689}#
                           #{b* 3690}#)
                    (#{build-dynlet 271}#
                      #{s 3674}#
                      (map (lambda (#{x 3691}#)
                             (#{chi 423}#
                               #{x 3691}#
                               #{r 3672}#
                               #{w 3673}#
                               #{mod 3675}#))
                           #{fluid 3687}#)
                      (map (lambda (#{x 3694}#)
                             (#{chi 423}#
                               #{x 3694}#
                               #{r 3672}#
                               #{w 3673}#
                               #{mod 3675}#))
                           #{val 3688}#)
                      (#{chi-body 431}#
                        (cons #{b 3689}# #{b* 3690}#)
                        (#{source-wrap 411}#
                          #{e 3671}#
                          #{w 3673}#
                          #{s 3674}#
                          #{mod 3675}#)
                        #{r 3672}#
                        #{w 3673}#
                        #{mod 3675}#)))
                  #{tmp 3682}#)
                (syntax-violation
                  #f
                  "source expression failed to match any pattern"
                  #{tmp 3681}#))))))
      (#{global-extend 339}# 'begin 'begin '())
      (#{global-extend 339}# 'define 'define '())
      (#{global-extend 339}#
        'define-syntax
        'define-syntax
        '())
      (#{global-extend 339}# 'eval-when 'eval-when '())
      (#{global-extend 339}#
        'core
        'syntax-case
        (letrec*
          ((#{convert-pattern 3699}#
             (lambda (#{pattern 3706}# #{keys 3707}#)
               (letrec*
                 ((#{cvt* 3711}#
                    (lambda (#{p* 3714}# #{n 3715}# #{ids 3716}#)
                      (if (null? #{p* 3714}#)
                        (values '() #{ids 3716}#)
                        (call-with-values
                          (lambda ()
                            (#{cvt* 3711}#
                              (cdr #{p* 3714}#)
                              #{n 3715}#
                              #{ids 3716}#))
                          (lambda (#{y 3720}# #{ids 3721}#)
                            (call-with-values
                              (lambda ()
                                (#{cvt 3713}#
                                  (car #{p* 3714}#)
                                  #{n 3715}#
                                  #{ids 3721}#))
                              (lambda (#{x 3724}# #{ids 3725}#)
                                (values
                                  (cons #{x 3724}# #{y 3720}#)
                                  #{ids 3725}#))))))))
                  (#{cvt 3713}#
                    (lambda (#{p 3728}# #{n 3729}# #{ids 3730}#)
                      (if (#{id? 343}# #{p 3728}#)
                        (if (#{bound-id-member? 407}#
                              #{p 3728}#
                              #{keys 3707}#)
                          (values
                            (vector 'free-id #{p 3728}#)
                            #{ids 3730}#)
                          (if (#{free-id=? 399}#
                                #{p 3728}#
                                '#(syntax-object
                                   _
                                   ((top)
                                    #(ribcage () () ())
                                    #(ribcage
                                      #(p n ids)
                                      #((top) (top) (top))
                                      #("i3731" "i3732" "i3733"))
                                    #(ribcage
                                      (cvt cvt*)
                                      ((top) (top))
                                      ("i3712" "i3710"))
                                    #(ribcage
                                      #(pattern keys)
                                      #((top) (top))
                                      #("i3708" "i3709"))
                                    #(ribcage
                                      (gen-syntax-case
                                        gen-clause
                                        build-dispatch-call
                                        convert-pattern)
                                      ((top) (top) (top) (top))
                                      ("i3704" "i3702" "i3700" "i3698"))
                                    #(ribcage
                                      (lambda-var-list
                                        gen-var
                                        strip
                                        chi-lambda-case
                                        lambda*-formals
                                        chi-simple-lambda
                                        lambda-formals
                                        ellipsis?
                                        chi-void
                                        eval-local-transformer
                                        chi-local-syntax
                                        chi-body
                                        chi-macro
                                        chi-call
                                        chi-expr
                                        chi
                                        syntax-type
                                        chi-when-list
                                        chi-install-global
                                        chi-top-sequence
                                        chi-sequence
                                        source-wrap
                                        wrap
                                        bound-id-member?
                                        distinct-bound-ids?
                                        valid-bound-ids?
                                        bound-id=?
                                        free-id=?
                                        id-var-name
                                        same-marks?
                                        join-marks
                                        join-wraps
                                        smart-append
                                        make-binding-wrap
                                        extend-ribcage!
                                        make-empty-ribcage
                                        new-mark
                                        anti-mark
                                        the-anti-mark
                                        top-marked?
                                        top-wrap
                                        empty-wrap
                                        set-ribcage-labels!
                                        set-ribcage-marks!
                                        set-ribcage-symnames!
                                        ribcage-labels
                                        ribcage-marks
                                        ribcage-symnames
                                        ribcage?
                                        make-ribcage
                                        gen-labels
                                        gen-label
                                        make-rename
                                        rename-marks
                                        rename-new
                                        rename-old
                                        subst-rename?
                                        wrap-subst
                                        wrap-marks
                                        make-wrap
                                        id-sym-name&marks
                                        id-sym-name
                                        id?
                                        nonsymbol-id?
                                        global-extend
                                        lookup
                                        macros-only-env
                                        extend-var-env
                                        extend-env
                                        null-env
                                        binding-value
                                        binding-type
                                        make-binding
                                        arg-check
                                        source-annotation
                                        no-source
                                        set-syntax-object-module!
                                        set-syntax-object-wrap!
                                        set-syntax-object-expression!
                                        syntax-object-module
                                        syntax-object-wrap
                                        syntax-object-expression
                                        syntax-object?
                                        make-syntax-object
                                        build-lexical-var
                                        build-letrec
                                        build-named-let
                                        build-let
                                        build-sequence
                                        build-data
                                        build-primref
                                        build-primcall
                                        build-lambda-case
                                        build-case-lambda
                                        build-simple-lambda
                                        build-global-definition
                                        build-global-assignment
                                        build-global-reference
                                        analyze-variable
                                        build-lexical-assignment
                                        build-lexical-reference
                                        build-dynlet
                                        build-conditional
                                        build-call
                                        build-void
                                        maybe-name-value!
                                        decorate-source
                                        get-global-definition-hook
                                        put-global-definition-hook
                                        gensym-hook
                                        local-eval-hook
                                        top-level-eval-hook
                                        fx<
                                        fx=
                                        fx-
                                        fx+
                                        set-lambda-meta!
                                        lambda-meta
                                        lambda?
                                        make-dynlet
                                        make-letrec
                                        make-let
                                        make-lambda-case
                                        make-lambda
                                        make-sequence
                                        make-primcall
                                        make-call
                                        make-conditional
                                        make-toplevel-define
                                        make-toplevel-set
                                        make-toplevel-ref
                                        make-module-set
                                        make-module-ref
                                        make-lexical-set
                                        make-lexical-ref
                                        make-primitive-ref
                                        make-const
                                        make-void)
                                      ((top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top))
                                      ("i452"
                                       "i450"
                                       "i448"
                                       "i446"
                                       "i444"
                                       "i442"
                                       "i440"
                                       "i438"
                                       "i436"
                                       "i434"
                                       "i432"
                                       "i430"
                                       "i428"
                                       "i426"
                                       "i424"
                                       "i422"
                                       "i420"
                                       "i418"
                                       "i416"
                                       "i414"
                                       "i412"
                                       "i410"
                                       "i408"
                                       "i406"
                                       "i404"
                                       "i402"
                                       "i400"
                                       "i398"
                                       "i396"
                                       "i394"
                                       "i392"
                                       "i390"
                                       "i388"
                                       "i386"
                                       "i384"
                                       "i383"
                                       "i382"
                                       "i380"
                                       "i379"
                                       "i378"
                                       "i377"
                                       "i376"
                                       "i374"
                                       "i372"
                                       "i370"
                                       "i368"
                                       "i366"
                                       "i364"
                                       "i362"
                                       "i360"
                                       "i357"
                                       "i355"
                                       "i354"
                                       "i353"
                                       "i352"
                                       "i351"
                                       "i350"
                                       "i349"
                                       "i348"
                                       "i347"
                                       "i345"
                                       "i344"
                                       "i342"
                                       "i340"
                                       "i338"
                                       "i336"
                                       "i334"
                                       "i332"
                                       "i330"
                                       "i329"
                                       "i328"
                                       "i327"
                                       "i326"
                                       "i325"
                                       "i323"
                                       "i322"
                                       "i320"
                                       "i318"
                                       "i316"
                                       "i314"
                                       "i312"
                                       "i310"
                                       "i308"
                                       "i306"
                                       "i304"
                                       "i302"
                                       "i300"
                                       "i298"
                                       "i296"
                                       "i294"
                                       "i292"
                                       "i290"
                                       "i288"
                                       "i286"
                                       "i284"
                                       "i282"
                                       "i280"
                                       "i278"
                                       "i276"
                                       "i274"
                                       "i272"
                                       "i270"
                                       "i268"
                                       "i266"
                                       "i264"
                                       "i262"
                                       "i260"
                                       "i258"
                                       "i256"
                                       "i255"
                                       "i253"
                                       "i251"
                                       "i250"
                                       "i249"
                                       "i248"
                                       "i247"
                                       "i245"
                                       "i243"
                                       "i241"
                                       "i238"
                                       "i236"
                                       "i234"
                                       "i232"
                                       "i230"
                                       "i228"
                                       "i226"
                                       "i224"
                                       "i222"
                                       "i220"
                                       "i218"
                                       "i216"
                                       "i214"
                                       "i212"
                                       "i210"
                                       "i208"
                                       "i206"
                                       "i204"
                                       "i202"))
                                    #(ribcage
                                      (define-structure
                                        define-expansion-accessors
                                        define-expansion-constructors)
                                      ((top) (top) (top))
                                      ("i40" "i39" "i38")))
                                   (hygiene guile)))
                            (values '_ #{ids 3730}#)
                            (values
                              'any
                              (cons (cons #{p 3728}# #{n 3729}#)
                                    #{ids 3730}#))))
                        (let ((#{tmp 3739}# #{p 3728}#))
                          (let ((#{tmp 3740}#
                                  ($sc-dispatch #{tmp 3739}# '(any any))))
                            (if (if #{tmp 3740}#
                                  (@apply
                                    (lambda (#{x 3743}# #{dots 3744}#)
                                      (#{ellipsis? 439}# #{dots 3744}#))
                                    #{tmp 3740}#)
                                  #f)
                              (@apply
                                (lambda (#{x 3747}# #{dots 3748}#)
                                  (call-with-values
                                    (lambda ()
                                      (#{cvt 3713}#
                                        #{x 3747}#
                                        (#{1+}# #{n 3729}#)
                                        #{ids 3730}#))
                                    (lambda (#{p 3750}# #{ids 3751}#)
                                      (values
                                        (if (eq? #{p 3750}# 'any)
                                          'each-any
                                          (vector 'each #{p 3750}#))
                                        #{ids 3751}#))))
                                #{tmp 3740}#)
                              (let ((#{tmp 3754}#
                                      ($sc-dispatch
                                        #{tmp 3739}#
                                        '(any any . each-any))))
                                (if (if #{tmp 3754}#
                                      (@apply
                                        (lambda (#{x 3758}#
                                                 #{dots 3759}#
                                                 #{ys 3760}#)
                                          (#{ellipsis? 439}# #{dots 3759}#))
                                        #{tmp 3754}#)
                                      #f)
                                  (@apply
                                    (lambda (#{x 3764}#
                                             #{dots 3765}#
                                             #{ys 3766}#)
                                      (call-with-values
                                        (lambda ()
                                          (#{cvt* 3711}#
                                            #{ys 3766}#
                                            #{n 3729}#
                                            #{ids 3730}#))
                                        (lambda (#{ys 3768}# #{ids 3769}#)
                                          (call-with-values
                                            (lambda ()
                                              (#{cvt 3713}#
                                                #{x 3764}#
                                                (#{1+}# #{n 3729}#)
                                                #{ids 3769}#))
                                            (lambda (#{x 3772}# #{ids 3773}#)
                                              (values
                                                (vector
                                                  'each+
                                                  #{x 3772}#
                                                  (reverse #{ys 3768}#)
                                                  '())
                                                #{ids 3773}#))))))
                                    #{tmp 3754}#)
                                  (let ((#{tmp 3777}#
                                          ($sc-dispatch
                                            #{tmp 3739}#
                                            '(any . any))))
                                    (if #{tmp 3777}#
                                      (@apply
                                        (lambda (#{x 3780}# #{y 3781}#)
                                          (call-with-values
                                            (lambda ()
                                              (#{cvt 3713}#
                                                #{y 3781}#
                                                #{n 3729}#
                                                #{ids 3730}#))
                                            (lambda (#{y 3782}# #{ids 3783}#)
                                              (call-with-values
                                                (lambda ()
                                                  (#{cvt 3713}#
                                                    #{x 3780}#
                                                    #{n 3729}#
                                                    #{ids 3783}#))
                                                (lambda (#{x 3786}#
                                                         #{ids 3787}#)
                                                  (values
                                                    (cons #{x 3786}#
                                                          #{y 3782}#)
                                                    #{ids 3787}#))))))
                                        #{tmp 3777}#)
                                      (let ((#{tmp 3790}#
                                              ($sc-dispatch #{tmp 3739}# '())))
                                        (if #{tmp 3790}#
                                          (@apply
                                            (lambda ()
                                              (values '() #{ids 3730}#))
                                            #{tmp 3790}#)
                                          (let ((#{tmp 3791}#
                                                  ($sc-dispatch
                                                    #{tmp 3739}#
                                                    '#(vector each-any))))
                                            (if #{tmp 3791}#
                                              (@apply
                                                (lambda (#{x 3793}#)
                                                  (call-with-values
                                                    (lambda ()
                                                      (#{cvt 3713}#
                                                        #{x 3793}#
                                                        #{n 3729}#
                                                        #{ids 3730}#))
                                                    (lambda (#{p 3795}#
                                                             #{ids 3796}#)
                                                      (values
                                                        (vector
                                                          'vector
                                                          #{p 3795}#)
                                                        #{ids 3796}#))))
                                                #{tmp 3791}#)
                                              (let ((#{x 3800}# #{tmp 3739}#))
                                                (values
                                                  (vector
                                                    'atom
                                                    (#{strip 449}#
                                                      #{p 3728}#
                                                      '(())))
                                                  #{ids 3730}#)))))))))))))))))
                 (begin (#{cvt 3713}# #{pattern 3706}# 0 '())))))
           (#{build-dispatch-call 3701}#
             (lambda (#{pvars 3802}#
                      #{exp 3803}#
                      #{y 3804}#
                      #{r 3805}#
                      #{mod 3806}#)
               (begin
                 (map cdr #{pvars 3802}#)
                 (let ((#{ids 3814}# (map car #{pvars 3802}#)))
                   (begin
                     (let ((#{labels 3818}#
                             (#{gen-labels 358}# #{ids 3814}#))
                           (#{new-vars 3819}#
                             (map #{gen-var 451}# #{ids 3814}#)))
                       (#{build-primcall 291}#
                         #f
                         'apply
                         (list (#{build-simple-lambda 285}#
                                 #f
                                 (map syntax->datum #{ids 3814}#)
                                 #f
                                 #{new-vars 3819}#
                                 '()
                                 (#{chi 423}#
                                   #{exp 3803}#
                                   (#{extend-env 331}#
                                     #{labels 3818}#
                                     (map (lambda (#{var 3822}# #{level 3823}#)
                                            (cons 'syntax
                                                  (cons #{var 3822}#
                                                        #{level 3823}#)))
                                          #{new-vars 3819}#
                                          (map cdr #{pvars 3802}#))
                                     #{r 3805}#)
                                   (#{make-binding-wrap 387}#
                                     #{ids 3814}#
                                     #{labels 3818}#
                                     '(()))
                                   #{mod 3806}#))
                               #{y 3804}#))))))))
           (#{gen-clause 3703}#
             (lambda (#{x 3829}#
                      #{keys 3830}#
                      #{clauses 3831}#
                      #{r 3832}#
                      #{pat 3833}#
                      #{fender 3834}#
                      #{exp 3835}#
                      #{mod 3836}#)
               (call-with-values
                 (lambda ()
                   (#{convert-pattern 3699}#
                     #{pat 3833}#
                     #{keys 3830}#))
                 (lambda (#{p 3845}# #{pvars 3846}#)
                   (if (not (#{distinct-bound-ids? 405}#
                              (map car #{pvars 3846}#)))
                     (syntax-violation
                       'syntax-case
                       "duplicate pattern variable"
                       #{pat 3833}#)
                     (if (not (and-map
                                (lambda (#{x 3853}#)
                                  (not (#{ellipsis? 439}# (car #{x 3853}#))))
                                #{pvars 3846}#))
                       (syntax-violation
                         'syntax-case
                         "misplaced ellipsis"
                         #{pat 3833}#)
                       (begin
                         (let ((#{y 3857}# (#{gen-var 451}# 'tmp)))
                           (#{build-call 267}#
                             #f
                             (#{build-simple-lambda 285}#
                               #f
                               (list 'tmp)
                               #f
                               (list #{y 3857}#)
                               '()
                               (begin
                                 (let ((#{y 3861}#
                                         (#{build-lexical-reference 273}#
                                           'value
                                           #f
                                           'tmp
                                           #{y 3857}#)))
                                   (#{build-conditional 269}#
                                     #f
                                     (let ((#{tmp 3864}# #{fender 3834}#))
                                       (let ((#{tmp 3865}#
                                               ($sc-dispatch
                                                 #{tmp 3864}#
                                                 '#(atom #t))))
                                         (if #{tmp 3865}#
                                           (@apply
                                             (lambda () #{y 3861}#)
                                             #{tmp 3865}#)
                                           (let ((#{_ 3867}# #{tmp 3864}#))
                                             (#{build-conditional 269}#
                                               #f
                                               #{y 3861}#
                                               (#{build-dispatch-call 3701}#
                                                 #{pvars 3846}#
                                                 #{fender 3834}#
                                                 #{y 3861}#
                                                 #{r 3832}#
                                                 #{mod 3836}#)
                                               (#{build-data 295}# #f #f))))))
                                     (#{build-dispatch-call 3701}#
                                       #{pvars 3846}#
                                       #{exp 3835}#
                                       #{y 3861}#
                                       #{r 3832}#
                                       #{mod 3836}#)
                                     (#{gen-syntax-case 3705}#
                                       #{x 3829}#
                                       #{keys 3830}#
                                       #{clauses 3831}#
                                       #{r 3832}#
                                       #{mod 3836}#)))))
                             (list (if (eq? #{p 3845}# 'any)
                                     (#{build-primcall 291}#
                                       #f
                                       'list
                                       (list #{x 3829}#))
                                     (#{build-primcall 291}#
                                       #f
                                       '$sc-dispatch
                                       (list #{x 3829}#
                                             (#{build-data 295}#
                                               #f
                                               #{p 3845}#))))))))))))))
           (#{gen-syntax-case 3705}#
             (lambda (#{x 3873}#
                      #{keys 3874}#
                      #{clauses 3875}#
                      #{r 3876}#
                      #{mod 3877}#)
               (if (null? #{clauses 3875}#)
                 (#{build-primcall 291}#
                   #f
                   'syntax-violation
                   (list (#{build-data 295}# #f #f)
                         (#{build-data 295}#
                           #f
                           "source expression failed to match any pattern")
                         #{x 3873}#))
                 (let ((#{tmp 3886}# (car #{clauses 3875}#)))
                   (let ((#{tmp 3887}#
                           ($sc-dispatch #{tmp 3886}# '(any any))))
                     (if #{tmp 3887}#
                       (@apply
                         (lambda (#{pat 3890}# #{exp 3891}#)
                           (if (if (#{id? 343}# #{pat 3890}#)
                                 (and-map
                                   (lambda (#{x 3894}#)
                                     (not (#{free-id=? 399}#
                                            #{pat 3890}#
                                            #{x 3894}#)))
                                   (cons '#(syntax-object
                                            ...
                                            ((top)
                                             #(ribcage
                                               #(pat exp)
                                               #((top) (top))
                                               #("i3888" "i3889"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x keys clauses r mod)
                                               #((top) (top) (top) (top) (top))
                                               #("i3878"
                                                 "i3879"
                                                 "i3880"
                                                 "i3881"
                                                 "i3882"))
                                             #(ribcage
                                               (gen-syntax-case
                                                 gen-clause
                                                 build-dispatch-call
                                                 convert-pattern)
                                               ((top) (top) (top) (top))
                                               ("i3704"
                                                "i3702"
                                                "i3700"
                                                "i3698"))
                                             #(ribcage
                                               (lambda-var-list
                                                 gen-var
                                                 strip
                                                 chi-lambda-case
                                                 lambda*-formals
                                                 chi-simple-lambda
                                                 lambda-formals
                                                 ellipsis?
                                                 chi-void
                                                 eval-local-transformer
                                                 chi-local-syntax
                                                 chi-body
                                                 chi-macro
                                                 chi-call
                                                 chi-expr
                                                 chi
                                                 syntax-type
                                                 chi-when-list
                                                 chi-install-global
                                                 chi-top-sequence
                                                 chi-sequence
                                                 source-wrap
                                                 wrap
                                                 bound-id-member?
                                                 distinct-bound-ids?
                                                 valid-bound-ids?
                                                 bound-id=?
                                                 free-id=?
                                                 id-var-name
                                                 same-marks?
                                                 join-marks
                                                 join-wraps
                                                 smart-append
                                                 make-binding-wrap
                                                 extend-ribcage!
                                                 make-empty-ribcage
                                                 new-mark
                                                 anti-mark
                                                 the-anti-mark
                                                 top-marked?
                                                 top-wrap
                                                 empty-wrap
                                                 set-ribcage-labels!
                                                 set-ribcage-marks!
                                                 set-ribcage-symnames!
                                                 ribcage-labels
                                                 ribcage-marks
                                                 ribcage-symnames
                                                 ribcage?
                                                 make-ribcage
                                                 gen-labels
                                                 gen-label
                                                 make-rename
                                                 rename-marks
                                                 rename-new
                                                 rename-old
                                                 subst-rename?
                                                 wrap-subst
                                                 wrap-marks
                                                 make-wrap
                                                 id-sym-name&marks
                                                 id-sym-name
                                                 id?
                                                 nonsymbol-id?
                                                 global-extend
                                                 lookup
                                                 macros-only-env
                                                 extend-var-env
                                                 extend-env
                                                 null-env
                                                 binding-value
                                                 binding-type
                                                 make-binding
                                                 arg-check
                                                 source-annotation
                                                 no-source
                                                 set-syntax-object-module!
                                                 set-syntax-object-wrap!
                                                 set-syntax-object-expression!
                                                 syntax-object-module
                                                 syntax-object-wrap
                                                 syntax-object-expression
                                                 syntax-object?
                                                 make-syntax-object
                                                 build-lexical-var
                                                 build-letrec
                                                 build-named-let
                                                 build-let
                                                 build-sequence
                                                 build-data
                                                 build-primref
                                                 build-primcall
                                                 build-lambda-case
                                                 build-case-lambda
                                                 build-simple-lambda
                                                 build-global-definition
                                                 build-global-assignment
                                                 build-global-reference
                                                 analyze-variable
                                                 build-lexical-assignment
                                                 build-lexical-reference
                                                 build-dynlet
                                                 build-conditional
                                                 build-call
                                                 build-void
                                                 maybe-name-value!
                                                 decorate-source
                                                 get-global-definition-hook
                                                 put-global-definition-hook
                                                 gensym-hook
                                                 local-eval-hook
                                                 top-level-eval-hook
                                                 fx<
                                                 fx=
                                                 fx-
                                                 fx+
                                                 set-lambda-meta!
                                                 lambda-meta
                                                 lambda?
                                                 make-dynlet
                                                 make-letrec
                                                 make-let
                                                 make-lambda-case
                                                 make-lambda
                                                 make-sequence
                                                 make-primcall
                                                 make-call
                                                 make-conditional
                                                 make-toplevel-define
                                                 make-toplevel-set
                                                 make-toplevel-ref
                                                 make-module-set
                                                 make-module-ref
                                                 make-lexical-set
                                                 make-lexical-ref
                                                 make-primitive-ref
                                                 make-const
                                                 make-void)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("i452"
                                                "i450"
                                                "i448"
                                                "i446"
                                                "i444"
                                                "i442"
                                                "i440"
                                                "i438"
                                                "i436"
                                                "i434"
                                                "i432"
                                                "i430"
                                                "i428"
                                                "i426"
                                                "i424"
                                                "i422"
                                                "i420"
                                                "i418"
                                                "i416"
                                                "i414"
                                                "i412"
                                                "i410"
                                                "i408"
                                                "i406"
                                                "i404"
                                                "i402"
                                                "i400"
                                                "i398"
                                                "i396"
                                                "i394"
                                                "i392"
                                                "i390"
                                                "i388"
                                                "i386"
                                                "i384"
                                                "i383"
                                                "i382"
                                                "i380"
                                                "i379"
                                                "i378"
                                                "i377"
                                                "i376"
                                                "i374"
                                                "i372"
                                                "i370"
                                                "i368"
                                                "i366"
                                                "i364"
                                                "i362"
                                                "i360"
                                                "i357"
                                                "i355"
                                                "i354"
                                                "i353"
                                                "i352"
                                                "i351"
                                                "i350"
                                                "i349"
                                                "i348"
                                                "i347"
                                                "i345"
                                                "i344"
                                                "i342"
                                                "i340"
                                                "i338"
                                                "i336"
                                                "i334"
                                                "i332"
                                                "i330"
                                                "i329"
                                                "i328"
                                                "i327"
                                                "i326"
                                                "i325"
                                                "i323"
                                                "i322"
                                                "i320"
                                                "i318"
                                                "i316"
                                                "i314"
                                                "i312"
                                                "i310"
                                                "i308"
                                                "i306"
                                                "i304"
                                                "i302"
                                                "i300"
                                                "i298"
                                                "i296"
                                                "i294"
                                                "i292"
                                                "i290"
                                                "i288"
                                                "i286"
                                                "i284"
                                                "i282"
                                                "i280"
                                                "i278"
                                                "i276"
                                                "i274"
                                                "i272"
                                                "i270"
                                                "i268"
                                                "i266"
                                                "i264"
                                                "i262"
                                                "i260"
                                                "i258"
                                                "i256"
                                                "i255"
                                                "i253"
                                                "i251"
                                                "i250"
                                                "i249"
                                                "i248"
                                                "i247"
                                                "i245"
                                                "i243"
                                                "i241"
                                                "i238"
                                                "i236"
                                                "i234"
                                                "i232"
                                                "i230"
                                                "i228"
                                                "i226"
                                                "i224"
                                                "i222"
                                                "i220"
                                                "i218"
                                                "i216"
                                                "i214"
                                                "i212"
                                                "i210"
                                                "i208"
                                                "i206"
                                                "i204"
                                                "i202"))
                                             #(ribcage
                                               (define-structure
                                                 define-expansion-accessors
                                                 define-expansion-constructors)
                                               ((top) (top) (top))
                                               ("i40" "i39" "i38")))
                                            (hygiene guile))
                                         #{keys 3874}#))
                                 #f)
                             (if (#{free-id=? 399}#
                                   '#(syntax-object
                                      pad
                                      ((top)
                                       #(ribcage
                                         #(pat exp)
                                         #((top) (top))
                                         #("i3888" "i3889"))
                                       #(ribcage () () ())
                                       #(ribcage
                                         #(x keys clauses r mod)
                                         #((top) (top) (top) (top) (top))
                                         #("i3878"
                                           "i3879"
                                           "i3880"
                                           "i3881"
                                           "i3882"))
                                       #(ribcage
                                         (gen-syntax-case
                                           gen-clause
                                           build-dispatch-call
                                           convert-pattern)
                                         ((top) (top) (top) (top))
                                         ("i3704" "i3702" "i3700" "i3698"))
                                       #(ribcage
                                         (lambda-var-list
                                           gen-var
                                           strip
                                           chi-lambda-case
                                           lambda*-formals
                                           chi-simple-lambda
                                           lambda-formals
                                           ellipsis?
                                           chi-void
                                           eval-local-transformer
                                           chi-local-syntax
                                           chi-body
                                           chi-macro
                                           chi-call
                                           chi-expr
                                           chi
                                           syntax-type
                                           chi-when-list
                                           chi-install-global
                                           chi-top-sequence
                                           chi-sequence
                                           source-wrap
                                           wrap
                                           bound-id-member?
                                           distinct-bound-ids?
                                           valid-bound-ids?
                                           bound-id=?
                                           free-id=?
                                           id-var-name
                                           same-marks?
                                           join-marks
                                           join-wraps
                                           smart-append
                                           make-binding-wrap
                                           extend-ribcage!
                                           make-empty-ribcage
                                           new-mark
                                           anti-mark
                                           the-anti-mark
                                           top-marked?
                                           top-wrap
                                           empty-wrap
                                           set-ribcage-labels!
                                           set-ribcage-marks!
                                           set-ribcage-symnames!
                                           ribcage-labels
                                           ribcage-marks
                                           ribcage-symnames
                                           ribcage?
                                           make-ribcage
                                           gen-labels
                                           gen-label
                                           make-rename
                                           rename-marks
                                           rename-new
                                           rename-old
                                           subst-rename?
                                           wrap-subst
                                           wrap-marks
                                           make-wrap
                                           id-sym-name&marks
                                           id-sym-name
                                           id?
                                           nonsymbol-id?
                                           global-extend
                                           lookup
                                           macros-only-env
                                           extend-var-env
                                           extend-env
                                           null-env
                                           binding-value
                                           binding-type
                                           make-binding
                                           arg-check
                                           source-annotation
                                           no-source
                                           set-syntax-object-module!
                                           set-syntax-object-wrap!
                                           set-syntax-object-expression!
                                           syntax-object-module
                                           syntax-object-wrap
                                           syntax-object-expression
                                           syntax-object?
                                           make-syntax-object
                                           build-lexical-var
                                           build-letrec
                                           build-named-let
                                           build-let
                                           build-sequence
                                           build-data
                                           build-primref
                                           build-primcall
                                           build-lambda-case
                                           build-case-lambda
                                           build-simple-lambda
                                           build-global-definition
                                           build-global-assignment
                                           build-global-reference
                                           analyze-variable
                                           build-lexical-assignment
                                           build-lexical-reference
                                           build-dynlet
                                           build-conditional
                                           build-call
                                           build-void
                                           maybe-name-value!
                                           decorate-source
                                           get-global-definition-hook
                                           put-global-definition-hook
                                           gensym-hook
                                           local-eval-hook
                                           top-level-eval-hook
                                           fx<
                                           fx=
                                           fx-
                                           fx+
                                           set-lambda-meta!
                                           lambda-meta
                                           lambda?
                                           make-dynlet
                                           make-letrec
                                           make-let
                                           make-lambda-case
                                           make-lambda
                                           make-sequence
                                           make-primcall
                                           make-call
                                           make-conditional
                                           make-toplevel-define
                                           make-toplevel-set
                                           make-toplevel-ref
                                           make-module-set
                                           make-module-ref
                                           make-lexical-set
                                           make-lexical-ref
                                           make-primitive-ref
                                           make-const
                                           make-void)
                                         ((top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top))
                                         ("i452"
                                          "i450"
                                          "i448"
                                          "i446"
                                          "i444"
                                          "i442"
                                          "i440"
                                          "i438"
                                          "i436"
                                          "i434"
                                          "i432"
                                          "i430"
                                          "i428"
                                          "i426"
                                          "i424"
                                          "i422"
                                          "i420"
                                          "i418"
                                          "i416"
                                          "i414"
                                          "i412"
                                          "i410"
                                          "i408"
                                          "i406"
                                          "i404"
                                          "i402"
                                          "i400"
                                          "i398"
                                          "i396"
                                          "i394"
                                          "i392"
                                          "i390"
                                          "i388"
                                          "i386"
                                          "i384"
                                          "i383"
                                          "i382"
                                          "i380"
                                          "i379"
                                          "i378"
                                          "i377"
                                          "i376"
                                          "i374"
                                          "i372"
                                          "i370"
                                          "i368"
                                          "i366"
                                          "i364"
                                          "i362"
                                          "i360"
                                          "i357"
                                          "i355"
                                          "i354"
                                          "i353"
                                          "i352"
                                          "i351"
                                          "i350"
                                          "i349"
                                          "i348"
                                          "i347"
                                          "i345"
                                          "i344"
                                          "i342"
                                          "i340"
                                          "i338"
                                          "i336"
                                          "i334"
                                          "i332"
                                          "i330"
                                          "i329"
                                          "i328"
                                          "i327"
                                          "i326"
                                          "i325"
                                          "i323"
                                          "i322"
                                          "i320"
                                          "i318"
                                          "i316"
                                          "i314"
                                          "i312"
                                          "i310"
                                          "i308"
                                          "i306"
                                          "i304"
                                          "i302"
                                          "i300"
                                          "i298"
                                          "i296"
                                          "i294"
                                          "i292"
                                          "i290"
                                          "i288"
                                          "i286"
                                          "i284"
                                          "i282"
                                          "i280"
                                          "i278"
                                          "i276"
                                          "i274"
                                          "i272"
                                          "i270"
                                          "i268"
                                          "i266"
                                          "i264"
                                          "i262"
                                          "i260"
                                          "i258"
                                          "i256"
                                          "i255"
                                          "i253"
                                          "i251"
                                          "i250"
                                          "i249"
                                          "i248"
                                          "i247"
                                          "i245"
                                          "i243"
                                          "i241"
                                          "i238"
                                          "i236"
                                          "i234"
                                          "i232"
                                          "i230"
                                          "i228"
                                          "i226"
                                          "i224"
                                          "i222"
                                          "i220"
                                          "i218"
                                          "i216"
                                          "i214"
                                          "i212"
                                          "i210"
                                          "i208"
                                          "i206"
                                          "i204"
                                          "i202"))
                                       #(ribcage
                                         (define-structure
                                           define-expansion-accessors
                                           define-expansion-constructors)
                                         ((top) (top) (top))
                                         ("i40" "i39" "i38")))
                                      (hygiene guile))
                                   '#(syntax-object
                                      _
                                      ((top)
                                       #(ribcage
                                         #(pat exp)
                                         #((top) (top))
                                         #("i3888" "i3889"))
                                       #(ribcage () () ())
                                       #(ribcage
                                         #(x keys clauses r mod)
                                         #((top) (top) (top) (top) (top))
                                         #("i3878"
                                           "i3879"
                                           "i3880"
                                           "i3881"
                                           "i3882"))
                                       #(ribcage
                                         (gen-syntax-case
                                           gen-clause
                                           build-dispatch-call
                                           convert-pattern)
                                         ((top) (top) (top) (top))
                                         ("i3704" "i3702" "i3700" "i3698"))
                                       #(ribcage
                                         (lambda-var-list
                                           gen-var
                                           strip
                                           chi-lambda-case
                                           lambda*-formals
                                           chi-simple-lambda
                                           lambda-formals
                                           ellipsis?
                                           chi-void
                                           eval-local-transformer
                                           chi-local-syntax
                                           chi-body
                                           chi-macro
                                           chi-call
                                           chi-expr
                                           chi
                                           syntax-type
                                           chi-when-list
                                           chi-install-global
                                           chi-top-sequence
                                           chi-sequence
                                           source-wrap
                                           wrap
                                           bound-id-member?
                                           distinct-bound-ids?
                                           valid-bound-ids?
                                           bound-id=?
                                           free-id=?
                                           id-var-name
                                           same-marks?
                                           join-marks
                                           join-wraps
                                           smart-append
                                           make-binding-wrap
                                           extend-ribcage!
                                           make-empty-ribcage
                                           new-mark
                                           anti-mark
                                           the-anti-mark
                                           top-marked?
                                           top-wrap
                                           empty-wrap
                                           set-ribcage-labels!
                                           set-ribcage-marks!
                                           set-ribcage-symnames!
                                           ribcage-labels
                                           ribcage-marks
                                           ribcage-symnames
                                           ribcage?
                                           make-ribcage
                                           gen-labels
                                           gen-label
                                           make-rename
                                           rename-marks
                                           rename-new
                                           rename-old
                                           subst-rename?
                                           wrap-subst
                                           wrap-marks
                                           make-wrap
                                           id-sym-name&marks
                                           id-sym-name
                                           id?
                                           nonsymbol-id?
                                           global-extend
                                           lookup
                                           macros-only-env
                                           extend-var-env
                                           extend-env
                                           null-env
                                           binding-value
                                           binding-type
                                           make-binding
                                           arg-check
                                           source-annotation
                                           no-source
                                           set-syntax-object-module!
                                           set-syntax-object-wrap!
                                           set-syntax-object-expression!
                                           syntax-object-module
                                           syntax-object-wrap
                                           syntax-object-expression
                                           syntax-object?
                                           make-syntax-object
                                           build-lexical-var
                                           build-letrec
                                           build-named-let
                                           build-let
                                           build-sequence
                                           build-data
                                           build-primref
                                           build-primcall
                                           build-lambda-case
                                           build-case-lambda
                                           build-simple-lambda
                                           build-global-definition
                                           build-global-assignment
                                           build-global-reference
                                           analyze-variable
                                           build-lexical-assignment
                                           build-lexical-reference
                                           build-dynlet
                                           build-conditional
                                           build-call
                                           build-void
                                           maybe-name-value!
                                           decorate-source
                                           get-global-definition-hook
                                           put-global-definition-hook
                                           gensym-hook
                                           local-eval-hook
                                           top-level-eval-hook
                                           fx<
                                           fx=
                                           fx-
                                           fx+
                                           set-lambda-meta!
                                           lambda-meta
                                           lambda?
                                           make-dynlet
                                           make-letrec
                                           make-let
                                           make-lambda-case
                                           make-lambda
                                           make-sequence
                                           make-primcall
                                           make-call
                                           make-conditional
                                           make-toplevel-define
                                           make-toplevel-set
                                           make-toplevel-ref
                                           make-module-set
                                           make-module-ref
                                           make-lexical-set
                                           make-lexical-ref
                                           make-primitive-ref
                                           make-const
                                           make-void)
                                         ((top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top))
                                         ("i452"
                                          "i450"
                                          "i448"
                                          "i446"
                                          "i444"
                                          "i442"
                                          "i440"
                                          "i438"
                                          "i436"
                                          "i434"
                                          "i432"
                                          "i430"
                                          "i428"
                                          "i426"
                                          "i424"
                                          "i422"
                                          "i420"
                                          "i418"
                                          "i416"
                                          "i414"
                                          "i412"
                                          "i410"
                                          "i408"
                                          "i406"
                                          "i404"
                                          "i402"
                                          "i400"
                                          "i398"
                                          "i396"
                                          "i394"
                                          "i392"
                                          "i390"
                                          "i388"
                                          "i386"
                                          "i384"
                                          "i383"
                                          "i382"
                                          "i380"
                                          "i379"
                                          "i378"
                                          "i377"
                                          "i376"
                                          "i374"
                                          "i372"
                                          "i370"
                                          "i368"
                                          "i366"
                                          "i364"
                                          "i362"
                                          "i360"
                                          "i357"
                                          "i355"
                                          "i354"
                                          "i353"
                                          "i352"
                                          "i351"
                                          "i350"
                                          "i349"
                                          "i348"
                                          "i347"
                                          "i345"
                                          "i344"
                                          "i342"
                                          "i340"
                                          "i338"
                                          "i336"
                                          "i334"
                                          "i332"
                                          "i330"
                                          "i329"
                                          "i328"
                                          "i327"
                                          "i326"
                                          "i325"
                                          "i323"
                                          "i322"
                                          "i320"
                                          "i318"
                                          "i316"
                                          "i314"
                                          "i312"
                                          "i310"
                                          "i308"
                                          "i306"
                                          "i304"
                                          "i302"
                                          "i300"
                                          "i298"
                                          "i296"
                                          "i294"
                                          "i292"
                                          "i290"
                                          "i288"
                                          "i286"
                                          "i284"
                                          "i282"
                                          "i280"
                                          "i278"
                                          "i276"
                                          "i274"
                                          "i272"
                                          "i270"
                                          "i268"
                                          "i266"
                                          "i264"
                                          "i262"
                                          "i260"
                                          "i258"
                                          "i256"
                                          "i255"
                                          "i253"
                                          "i251"
                                          "i250"
                                          "i249"
                                          "i248"
                                          "i247"
                                          "i245"
                                          "i243"
                                          "i241"
                                          "i238"
                                          "i236"
                                          "i234"
                                          "i232"
                                          "i230"
                                          "i228"
                                          "i226"
                                          "i224"
                                          "i222"
                                          "i220"
                                          "i218"
                                          "i216"
                                          "i214"
                                          "i212"
                                          "i210"
                                          "i208"
                                          "i206"
                                          "i204"
                                          "i202"))
                                       #(ribcage
                                         (define-structure
                                           define-expansion-accessors
                                           define-expansion-constructors)
                                         ((top) (top) (top))
                                         ("i40" "i39" "i38")))
                                      (hygiene guile)))
                               (#{chi 423}#
                                 #{exp 3891}#
                                 #{r 3876}#
                                 '(())
                                 #{mod 3877}#)
                               (begin
                                 (let ((#{labels 3899}#
                                         (list (#{gen-label 356}#)))
                                       (#{var 3900}#
                                         (#{gen-var 451}# #{pat 3890}#)))
                                   (#{build-call 267}#
                                     #f
                                     (#{build-simple-lambda 285}#
                                       #f
                                       (list (syntax->datum #{pat 3890}#))
                                       #f
                                       (list #{var 3900}#)
                                       '()
                                       (#{chi 423}#
                                         #{exp 3891}#
                                         (#{extend-env 331}#
                                           #{labels 3899}#
                                           (list (cons 'syntax
                                                       (cons #{var 3900}# 0)))
                                           #{r 3876}#)
                                         (#{make-binding-wrap 387}#
                                           (list #{pat 3890}#)
                                           #{labels 3899}#
                                           '(()))
                                         #{mod 3877}#))
                                     (list #{x 3873}#)))))
                             (#{gen-clause 3703}#
                               #{x 3873}#
                               #{keys 3874}#
                               (cdr #{clauses 3875}#)
                               #{r 3876}#
                               #{pat 3890}#
                               #t
                               #{exp 3891}#
                               #{mod 3877}#)))
                         #{tmp 3887}#)
                       (let ((#{tmp 3906}#
                               ($sc-dispatch #{tmp 3886}# '(any any any))))
                         (if #{tmp 3906}#
                           (@apply
                             (lambda (#{pat 3910}#
                                      #{fender 3911}#
                                      #{exp 3912}#)
                               (#{gen-clause 3703}#
                                 #{x 3873}#
                                 #{keys 3874}#
                                 (cdr #{clauses 3875}#)
                                 #{r 3876}#
                                 #{pat 3910}#
                                 #{fender 3911}#
                                 #{exp 3912}#
                                 #{mod 3877}#))
                             #{tmp 3906}#)
                           (let ((#{_ 3914}# #{tmp 3886}#))
                             (syntax-violation
                               'syntax-case
                               "invalid clause"
                               (car #{clauses 3875}#))))))))))))
          (begin
            (lambda (#{e 3915}#
                     #{r 3916}#
                     #{w 3917}#
                     #{s 3918}#
                     #{mod 3919}#)
              (begin
                (let ((#{e 3926}#
                        (#{source-wrap 411}#
                          #{e 3915}#
                          #{w 3917}#
                          #{s 3918}#
                          #{mod 3919}#)))
                  (let ((#{tmp 3927}# #{e 3926}#))
                    (let ((#{tmp 3928}#
                            ($sc-dispatch
                              #{tmp 3927}#
                              '(_ any each-any . each-any))))
                      (if #{tmp 3928}#
                        (@apply
                          (lambda (#{val 3932}# #{key 3933}# #{m 3934}#)
                            (if (and-map
                                  (lambda (#{x 3935}#)
                                    (if (#{id? 343}# #{x 3935}#)
                                      (not (#{ellipsis? 439}# #{x 3935}#))
                                      #f))
                                  #{key 3933}#)
                              (begin
                                (let ((#{x 3941}# (#{gen-var 451}# 'tmp)))
                                  (#{build-call 267}#
                                    #{s 3918}#
                                    (#{build-simple-lambda 285}#
                                      #f
                                      (list 'tmp)
                                      #f
                                      (list #{x 3941}#)
                                      '()
                                      (#{gen-syntax-case 3705}#
                                        (#{build-lexical-reference 273}#
                                          'value
                                          #f
                                          'tmp
                                          #{x 3941}#)
                                        #{key 3933}#
                                        #{m 3934}#
                                        #{r 3916}#
                                        #{mod 3919}#))
                                    (list (#{chi 423}#
                                            #{val 3932}#
                                            #{r 3916}#
                                            '(())
                                            #{mod 3919}#)))))
                              (syntax-violation
                                'syntax-case
                                "invalid literals list"
                                #{e 3926}#)))
                          #{tmp 3928}#)
                        (syntax-violation
                          #f
                          "source expression failed to match any pattern"
                          #{tmp 3927}#))))))))))
      (set! macroexpand
        (lambda*
          (#{x 3947}#
            #:optional
            (#{m 3949}# 'e)
            (#{esew 3951}# '(eval)))
          (#{chi-top-sequence 415}#
            (list #{x 3947}#)
            '()
            '((top))
            #f
            #{m 3949}#
            #{esew 3951}#
            (cons 'hygiene (module-name (current-module))))))
      (set! identifier?
        (lambda (#{x 3955}#)
          (#{nonsymbol-id? 341}# #{x 3955}#)))
      (set! datum->syntax
        (lambda (#{id 3957}# #{datum 3958}#)
          (#{make-syntax-object 307}#
            #{datum 3958}#
            (#{syntax-object-wrap 313}# #{id 3957}#)
            (#{syntax-object-module 315}# #{id 3957}#))))
      (set! syntax->datum
        (lambda (#{x 3961}#)
          (#{strip 449}# #{x 3961}# '(()))))
      (set! syntax-source
        (lambda (#{x 3964}#)
          (#{source-annotation 324}# #{x 3964}#)))
      (set! generate-temporaries
        (lambda (#{ls 3966}#)
          (begin
            (begin
              (let ((#{x 3970}# #{ls 3966}#))
                (if (not (list? #{x 3970}#))
                  (syntax-violation
                    'generate-temporaries
                    "invalid argument"
                    #{x 3970}#))))
            (map (lambda (#{x 3971}#)
                   (#{wrap 409}# (gensym) '((top)) #f))
                 #{ls 3966}#))))
      (set! free-identifier=?
        (lambda (#{x 3975}# #{y 3976}#)
          (begin
            (begin
              (let ((#{x 3981}# #{x 3975}#))
                (if (not (#{nonsymbol-id? 341}# #{x 3981}#))
                  (syntax-violation
                    'free-identifier=?
                    "invalid argument"
                    #{x 3981}#))))
            (begin
              (let ((#{x 3984}# #{y 3976}#))
                (if (not (#{nonsymbol-id? 341}# #{x 3984}#))
                  (syntax-violation
                    'free-identifier=?
                    "invalid argument"
                    #{x 3984}#))))
            (#{free-id=? 399}# #{x 3975}# #{y 3976}#))))
      (set! bound-identifier=?
        (lambda (#{x 3985}# #{y 3986}#)
          (begin
            (begin
              (let ((#{x 3991}# #{x 3985}#))
                (if (not (#{nonsymbol-id? 341}# #{x 3991}#))
                  (syntax-violation
                    'bound-identifier=?
                    "invalid argument"
                    #{x 3991}#))))
            (begin
              (let ((#{x 3994}# #{y 3986}#))
                (if (not (#{nonsymbol-id? 341}# #{x 3994}#))
                  (syntax-violation
                    'bound-identifier=?
                    "invalid argument"
                    #{x 3994}#))))
            (#{bound-id=? 401}# #{x 3985}# #{y 3986}#))))
      (set! syntax-violation
        (lambda*
          (#{who 3995}#
            #{message 3996}#
            #{form 3997}#
            #:optional
            (#{subform 4001}# #f))
          (begin
            (begin
              (let ((#{x 4005}# #{who 3995}#))
                (if (not (let ((#{x 4006}# #{x 4005}#))
                           (begin
                             (let ((#{t 4010}# (not #{x 4006}#)))
                               (if #{t 4010}#
                                 #{t 4010}#
                                 (begin
                                   (let ((#{t 4013}# (string? #{x 4006}#)))
                                     (if #{t 4013}#
                                       #{t 4013}#
                                       (symbol? #{x 4006}#)))))))))
                  (syntax-violation
                    'syntax-violation
                    "invalid argument"
                    #{x 4005}#))))
            (begin
              (let ((#{x 4017}# #{message 3996}#))
                (if (not (string? #{x 4017}#))
                  (syntax-violation
                    'syntax-violation
                    "invalid argument"
                    #{x 4017}#))))
            (throw 'syntax-error
                   #{who 3995}#
                   #{message 3996}#
                   (#{source-annotation 324}#
                     (begin
                       (let ((#{t 4020}# #{form 3997}#))
                         (if #{t 4020}# #{t 4020}# #{subform 4001}#))))
                   (#{strip 449}# #{form 3997}# '(()))
                   (if #{subform 4001}#
                     (#{strip 449}# #{subform 4001}# '(()))
                     #f)))))
      (letrec*
        ((#{match-each 4027}#
           (lambda (#{e 4040}# #{p 4041}# #{w 4042}# #{mod 4043}#)
             (if (pair? #{e 4040}#)
               (begin
                 (let ((#{first 4051}#
                         (#{match 4039}#
                           (car #{e 4040}#)
                           #{p 4041}#
                           #{w 4042}#
                           '()
                           #{mod 4043}#)))
                   (if #{first 4051}#
                     (begin
                       (let ((#{rest 4055}#
                               (#{match-each 4027}#
                                 (cdr #{e 4040}#)
                                 #{p 4041}#
                                 #{w 4042}#
                                 #{mod 4043}#)))
                         (if #{rest 4055}#
                           (cons #{first 4051}# #{rest 4055}#)
                           #f)))
                     #f)))
               (if (null? #{e 4040}#)
                 '()
                 (if (#{syntax-object? 309}# #{e 4040}#)
                   (#{match-each 4027}#
                     (#{syntax-object-expression 311}# #{e 4040}#)
                     #{p 4041}#
                     (#{join-wraps 391}#
                       #{w 4042}#
                       (#{syntax-object-wrap 313}# #{e 4040}#))
                     (#{syntax-object-module 315}# #{e 4040}#))
                   #f)))))
         (#{match-each+ 4029}#
           (lambda (#{e 4063}#
                    #{x-pat 4064}#
                    #{y-pat 4065}#
                    #{z-pat 4066}#
                    #{w 4067}#
                    #{r 4068}#
                    #{mod 4069}#)
             (letrec*
               ((#{f 4080}#
                  (lambda (#{e 4081}# #{w 4082}#)
                    (if (pair? #{e 4081}#)
                      (call-with-values
                        (lambda ()
                          (#{f 4080}# (cdr #{e 4081}#) #{w 4082}#))
                        (lambda (#{xr* 4085}# #{y-pat 4086}# #{r 4087}#)
                          (if #{r 4087}#
                            (if (null? #{y-pat 4086}#)
                              (begin
                                (let ((#{xr 4092}#
                                        (#{match 4039}#
                                          (car #{e 4081}#)
                                          #{x-pat 4064}#
                                          #{w 4082}#
                                          '()
                                          #{mod 4069}#)))
                                  (if #{xr 4092}#
                                    (values
                                      (cons #{xr 4092}# #{xr* 4085}#)
                                      #{y-pat 4086}#
                                      #{r 4087}#)
                                    (values #f #f #f))))
                              (values
                                '()
                                (cdr #{y-pat 4086}#)
                                (#{match 4039}#
                                  (car #{e 4081}#)
                                  (car #{y-pat 4086}#)
                                  #{w 4082}#
                                  #{r 4087}#
                                  #{mod 4069}#)))
                            (values #f #f #f))))
                      (if (#{syntax-object? 309}# #{e 4081}#)
                        (#{f 4080}#
                          (#{syntax-object-expression 311}# #{e 4081}#)
                          (#{join-wraps 391}# #{w 4082}# #{e 4081}#))
                        (values
                          '()
                          #{y-pat 4065}#
                          (#{match 4039}#
                            #{e 4081}#
                            #{z-pat 4066}#
                            #{w 4082}#
                            #{r 4068}#
                            #{mod 4069}#)))))))
               (begin (#{f 4080}# #{e 4063}# #{w 4067}#)))))
         (#{match-each-any 4031}#
           (lambda (#{e 4096}# #{w 4097}# #{mod 4098}#)
             (if (pair? #{e 4096}#)
               (begin
                 (let ((#{l 4105}#
                         (#{match-each-any 4031}#
                           (cdr #{e 4096}#)
                           #{w 4097}#
                           #{mod 4098}#)))
                   (if #{l 4105}#
                     (cons (#{wrap 409}#
                             (car #{e 4096}#)
                             #{w 4097}#
                             #{mod 4098}#)
                           #{l 4105}#)
                     #f)))
               (if (null? #{e 4096}#)
                 '()
                 (if (#{syntax-object? 309}# #{e 4096}#)
                   (#{match-each-any 4031}#
                     (#{syntax-object-expression 311}# #{e 4096}#)
                     (#{join-wraps 391}#
                       #{w 4097}#
                       (#{syntax-object-wrap 313}# #{e 4096}#))
                     #{mod 4098}#)
                   #f)))))
         (#{match-empty 4033}#
           (lambda (#{p 4113}# #{r 4114}#)
             (if (null? #{p 4113}#)
               #{r 4114}#
               (if (eq? #{p 4113}# '_)
                 #{r 4114}#
                 (if (eq? #{p 4113}# 'any)
                   (cons '() #{r 4114}#)
                   (if (pair? #{p 4113}#)
                     (#{match-empty 4033}#
                       (car #{p 4113}#)
                       (#{match-empty 4033}#
                         (cdr #{p 4113}#)
                         #{r 4114}#))
                     (if (eq? #{p 4113}# 'each-any)
                       (cons '() #{r 4114}#)
                       (begin
                         (let ((#{atom-key 4130}# (vector-ref #{p 4113}# 0)))
                           (if (memv #{atom-key 4130}# '(each))
                             (#{match-empty 4033}#
                               (vector-ref #{p 4113}# 1)
                               #{r 4114}#)
                             (if (memv #{atom-key 4130}# '(each+))
                               (#{match-empty 4033}#
                                 (vector-ref #{p 4113}# 1)
                                 (#{match-empty 4033}#
                                   (reverse (vector-ref #{p 4113}# 2))
                                   (#{match-empty 4033}#
                                     (vector-ref #{p 4113}# 3)
                                     #{r 4114}#)))
                               (if (memv #{atom-key 4130}# '(free-id atom))
                                 #{r 4114}#
                                 (if (memv #{atom-key 4130}# '(vector))
                                   (#{match-empty 4033}#
                                     (vector-ref #{p 4113}# 1)
                                     #{r 4114}#))))))))))))))
         (#{combine 4035}#
           (lambda (#{r* 4135}# #{r 4136}#)
             (if (null? (car #{r* 4135}#))
               #{r 4136}#
               (cons (map car #{r* 4135}#)
                     (#{combine 4035}#
                       (map cdr #{r* 4135}#)
                       #{r 4136}#)))))
         (#{match* 4037}#
           (lambda (#{e 4139}#
                    #{p 4140}#
                    #{w 4141}#
                    #{r 4142}#
                    #{mod 4143}#)
             (if (null? #{p 4140}#)
               (if (null? #{e 4139}#) #{r 4142}# #f)
               (if (pair? #{p 4140}#)
                 (if (pair? #{e 4139}#)
                   (#{match 4039}#
                     (car #{e 4139}#)
                     (car #{p 4140}#)
                     #{w 4141}#
                     (#{match 4039}#
                       (cdr #{e 4139}#)
                       (cdr #{p 4140}#)
                       #{w 4141}#
                       #{r 4142}#
                       #{mod 4143}#)
                     #{mod 4143}#)
                   #f)
                 (if (eq? #{p 4140}# 'each-any)
                   (begin
                     (let ((#{l 4160}#
                             (#{match-each-any 4031}#
                               #{e 4139}#
                               #{w 4141}#
                               #{mod 4143}#)))
                       (if #{l 4160}# (cons #{l 4160}# #{r 4142}#) #f)))
                   (begin
                     (let ((#{atom-key 4166}# (vector-ref #{p 4140}# 0)))
                       (if (memv #{atom-key 4166}# '(each))
                         (if (null? #{e 4139}#)
                           (#{match-empty 4033}#
                             (vector-ref #{p 4140}# 1)
                             #{r 4142}#)
                           (begin
                             (let ((#{l 4169}#
                                     (#{match-each 4027}#
                                       #{e 4139}#
                                       (vector-ref #{p 4140}# 1)
                                       #{w 4141}#
                                       #{mod 4143}#)))
                               (if #{l 4169}#
                                 (letrec*
                                   ((#{collect 4174}#
                                      (lambda (#{l 4175}#)
                                        (if (null? (car #{l 4175}#))
                                          #{r 4142}#
                                          (cons (map car #{l 4175}#)
                                                (#{collect 4174}#
                                                  (map cdr #{l 4175}#)))))))
                                   (begin (#{collect 4174}# #{l 4169}#)))
                                 #f))))
                         (if (memv #{atom-key 4166}# '(each+))
                           (call-with-values
                             (lambda ()
                               (#{match-each+ 4029}#
                                 #{e 4139}#
                                 (vector-ref #{p 4140}# 1)
                                 (vector-ref #{p 4140}# 2)
                                 (vector-ref #{p 4140}# 3)
                                 #{w 4141}#
                                 #{r 4142}#
                                 #{mod 4143}#))
                             (lambda (#{xr* 4177}# #{y-pat 4178}# #{r 4179}#)
                               (if #{r 4179}#
                                 (if (null? #{y-pat 4178}#)
                                   (if (null? #{xr* 4177}#)
                                     (#{match-empty 4033}#
                                       (vector-ref #{p 4140}# 1)
                                       #{r 4179}#)
                                     (#{combine 4035}#
                                       #{xr* 4177}#
                                       #{r 4179}#))
                                   #f)
                                 #f)))
                           (if (memv #{atom-key 4166}# '(free-id))
                             (if (#{id? 343}# #{e 4139}#)
                               (if (#{free-id=? 399}#
                                     (#{wrap 409}#
                                       #{e 4139}#
                                       #{w 4141}#
                                       #{mod 4143}#)
                                     (vector-ref #{p 4140}# 1))
                                 #{r 4142}#
                                 #f)
                               #f)
                             (if (memv #{atom-key 4166}# '(atom))
                               (if (equal?
                                     (vector-ref #{p 4140}# 1)
                                     (#{strip 449}# #{e 4139}# #{w 4141}#))
                                 #{r 4142}#
                                 #f)
                               (if (memv #{atom-key 4166}# '(vector))
                                 (if (vector? #{e 4139}#)
                                   (#{match 4039}#
                                     (vector->list #{e 4139}#)
                                     (vector-ref #{p 4140}# 1)
                                     #{w 4141}#
                                     #{r 4142}#
                                     #{mod 4143}#)
                                   #f)))))))))))))
         (#{match 4039}#
           (lambda (#{e 4196}#
                    #{p 4197}#
                    #{w 4198}#
                    #{r 4199}#
                    #{mod 4200}#)
             (if (not #{r 4199}#)
               #f
               (if (eq? #{p 4197}# '_)
                 #{r 4199}#
                 (if (eq? #{p 4197}# 'any)
                   (cons (#{wrap 409}# #{e 4196}# #{w 4198}# #{mod 4200}#)
                         #{r 4199}#)
                   (if (#{syntax-object? 309}# #{e 4196}#)
                     (#{match* 4037}#
                       (#{syntax-object-expression 311}# #{e 4196}#)
                       #{p 4197}#
                       (#{join-wraps 391}#
                         #{w 4198}#
                         (#{syntax-object-wrap 313}# #{e 4196}#))
                       #{r 4199}#
                       (#{syntax-object-module 315}# #{e 4196}#))
                     (#{match* 4037}#
                       #{e 4196}#
                       #{p 4197}#
                       #{w 4198}#
                       #{r 4199}#
                       #{mod 4200}#))))))))
        (begin
          (set! $sc-dispatch
            (lambda (#{e 4215}# #{p 4216}#)
              (if (eq? #{p 4216}# 'any)
                (list #{e 4215}#)
                (if (eq? #{p 4216}# '_)
                  '()
                  (if (#{syntax-object? 309}# #{e 4215}#)
                    (#{match* 4037}#
                      (#{syntax-object-expression 311}# #{e 4215}#)
                      #{p 4216}#
                      (#{syntax-object-wrap 313}# #{e 4215}#)
                      '()
                      (#{syntax-object-module 315}# #{e 4215}#))
                    (#{match* 4037}#
                      #{e 4215}#
                      #{p 4216}#
                      '(())
                      '()
                      #f)))))))))))

(define with-syntax
  (make-syntax-transformer
    'with-syntax
    'macro
    (lambda (#{x 4227}#)
      (let ((#{tmp 4229}# #{x 4227}#))
        (let ((#{tmp 4230}#
                ($sc-dispatch
                  #{tmp 4229}#
                  '(_ () any . each-any))))
          (if #{tmp 4230}#
            (@apply
              (lambda (#{e1 4233}# #{e2 4234}#)
                (cons '#(syntax-object
                         let
                         ((top)
                          #(ribcage
                            #(e1 e2)
                            #((top) (top))
                            #("i4231" "i4232"))
                          #(ribcage () () ())
                          #(ribcage #(x) #((top)) #("i4228")))
                         (hygiene guile))
                      (cons '() (cons #{e1 4233}# #{e2 4234}#))))
              #{tmp 4230}#)
            (let ((#{tmp 4236}#
                    ($sc-dispatch
                      #{tmp 4229}#
                      '(_ ((any any)) any . each-any))))
              (if #{tmp 4236}#
                (@apply
                  (lambda (#{out 4241}#
                           #{in 4242}#
                           #{e1 4243}#
                           #{e2 4244}#)
                    (list '#(syntax-object
                             syntax-case
                             ((top)
                              #(ribcage
                                #(out in e1 e2)
                                #((top) (top) (top) (top))
                                #("i4237" "i4238" "i4239" "i4240"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i4228")))
                             (hygiene guile))
                          #{in 4242}#
                          '()
                          (list #{out 4241}#
                                (cons '#(syntax-object
                                         let
                                         ((top)
                                          #(ribcage
                                            #(out in e1 e2)
                                            #((top) (top) (top) (top))
                                            #("i4237" "i4238" "i4239" "i4240"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i4228")))
                                         (hygiene guile))
                                      (cons '()
                                            (cons #{e1 4243}# #{e2 4244}#))))))
                  #{tmp 4236}#)
                (let ((#{tmp 4246}#
                        ($sc-dispatch
                          #{tmp 4229}#
                          '(_ #(each (any any)) any . each-any))))
                  (if #{tmp 4246}#
                    (@apply
                      (lambda (#{out 4251}#
                               #{in 4252}#
                               #{e1 4253}#
                               #{e2 4254}#)
                        (list '#(syntax-object
                                 syntax-case
                                 ((top)
                                  #(ribcage
                                    #(out in e1 e2)
                                    #((top) (top) (top) (top))
                                    #("i4247" "i4248" "i4249" "i4250"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("i4228")))
                                 (hygiene guile))
                              (cons '#(syntax-object
                                       list
                                       ((top)
                                        #(ribcage
                                          #(out in e1 e2)
                                          #((top) (top) (top) (top))
                                          #("i4247" "i4248" "i4249" "i4250"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i4228")))
                                       (hygiene guile))
                                    #{in 4252}#)
                              '()
                              (list #{out 4251}#
                                    (cons '#(syntax-object
                                             let
                                             ((top)
                                              #(ribcage
                                                #(out in e1 e2)
                                                #((top) (top) (top) (top))
                                                #("i4247"
                                                  "i4248"
                                                  "i4249"
                                                  "i4250"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(x)
                                                #((top))
                                                #("i4228")))
                                             (hygiene guile))
                                          (cons '()
                                                (cons #{e1 4253}#
                                                      #{e2 4254}#))))))
                      #{tmp 4246}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp 4229}#)))))))))))

(define syntax-rules
  (make-syntax-transformer
    'syntax-rules
    'macro
    (lambda (#{x 4258}#)
      (let ((#{tmp 4260}# #{x 4258}#))
        (let ((#{tmp 4261}#
                ($sc-dispatch
                  #{tmp 4260}#
                  '(_ each-any . #(each ((any . any) any))))))
          (if #{tmp 4261}#
            (@apply
              (lambda (#{k 4266}#
                       #{keyword 4267}#
                       #{pattern 4268}#
                       #{template 4269}#)
                (list '#(syntax-object
                         lambda
                         ((top)
                          #(ribcage
                            #(k keyword pattern template)
                            #((top) (top) (top) (top))
                            #("i4262" "i4263" "i4264" "i4265"))
                          #(ribcage () () ())
                          #(ribcage #(x) #((top)) #("i4259")))
                         (hygiene guile))
                      '(#(syntax-object
                          x
                          ((top)
                           #(ribcage
                             #(k keyword pattern template)
                             #((top) (top) (top) (top))
                             #("i4262" "i4263" "i4264" "i4265"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("i4259")))
                          (hygiene guile)))
                      (vector
                        '(#(syntax-object
                            macro-type
                            ((top)
                             #(ribcage
                               #(k keyword pattern template)
                               #((top) (top) (top) (top))
                               #("i4262" "i4263" "i4264" "i4265"))
                             #(ribcage () () ())
                             #(ribcage #(x) #((top)) #("i4259")))
                            (hygiene guile))
                          .
                          #(syntax-object
                            syntax-rules
                            ((top)
                             #(ribcage
                               #(k keyword pattern template)
                               #((top) (top) (top) (top))
                               #("i4262" "i4263" "i4264" "i4265"))
                             #(ribcage () () ())
                             #(ribcage #(x) #((top)) #("i4259")))
                            (hygiene guile)))
                        (cons '#(syntax-object
                                 patterns
                                 ((top)
                                  #(ribcage
                                    #(k keyword pattern template)
                                    #((top) (top) (top) (top))
                                    #("i4262" "i4263" "i4264" "i4265"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("i4259")))
                                 (hygiene guile))
                              #{pattern 4268}#))
                      (cons '#(syntax-object
                               syntax-case
                               ((top)
                                #(ribcage
                                  #(k keyword pattern template)
                                  #((top) (top) (top) (top))
                                  #("i4262" "i4263" "i4264" "i4265"))
                                #(ribcage () () ())
                                #(ribcage #(x) #((top)) #("i4259")))
                               (hygiene guile))
                            (cons '#(syntax-object
                                     x
                                     ((top)
                                      #(ribcage
                                        #(k keyword pattern template)
                                        #((top) (top) (top) (top))
                                        #("i4262" "i4263" "i4264" "i4265"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("i4259")))
                                     (hygiene guile))
                                  (cons #{k 4266}#
                                        (map (lambda (#{tmp 4273}#
                                                      #{tmp 4272}#)
                                               (list (cons '#(syntax-object
                                                              dummy
                                                              ((top)
                                                               #(ribcage
                                                                 #(k
                                                                   keyword
                                                                   pattern
                                                                   template)
                                                                 #((top)
                                                                   (top)
                                                                   (top)
                                                                   (top))
                                                                 #("i4262"
                                                                   "i4263"
                                                                   "i4264"
                                                                   "i4265"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(x)
                                                                 #((top))
                                                                 #("i4259")))
                                                              (hygiene guile))
                                                           #{tmp 4272}#)
                                                     (list '#(syntax-object
                                                              syntax
                                                              ((top)
                                                               #(ribcage
                                                                 #(k
                                                                   keyword
                                                                   pattern
                                                                   template)
                                                                 #((top)
                                                                   (top)
                                                                   (top)
                                                                   (top))
                                                                 #("i4262"
                                                                   "i4263"
                                                                   "i4264"
                                                                   "i4265"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(x)
                                                                 #((top))
                                                                 #("i4259")))
                                                              (hygiene guile))
                                                           #{tmp 4273}#)))
                                             #{template 4269}#
                                             #{pattern 4268}#))))))
              #{tmp 4261}#)
            (let ((#{tmp 4274}#
                    ($sc-dispatch
                      #{tmp 4260}#
                      '(_ each-any any . #(each ((any . any) any))))))
              (if (if #{tmp 4274}#
                    (@apply
                      (lambda (#{k 4280}#
                               #{docstring 4281}#
                               #{keyword 4282}#
                               #{pattern 4283}#
                               #{template 4284}#)
                        (string? (syntax->datum #{docstring 4281}#)))
                      #{tmp 4274}#)
                    #f)
                (@apply
                  (lambda (#{k 4290}#
                           #{docstring 4291}#
                           #{keyword 4292}#
                           #{pattern 4293}#
                           #{template 4294}#)
                    (list '#(syntax-object
                             lambda
                             ((top)
                              #(ribcage
                                #(k docstring keyword pattern template)
                                #((top) (top) (top) (top) (top))
                                #("i4285" "i4286" "i4287" "i4288" "i4289"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i4259")))
                             (hygiene guile))
                          '(#(syntax-object
                              x
                              ((top)
                               #(ribcage
                                 #(k docstring keyword pattern template)
                                 #((top) (top) (top) (top) (top))
                                 #("i4285" "i4286" "i4287" "i4288" "i4289"))
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("i4259")))
                              (hygiene guile)))
                          #{docstring 4291}#
                          (vector
                            '(#(syntax-object
                                macro-type
                                ((top)
                                 #(ribcage
                                   #(k docstring keyword pattern template)
                                   #((top) (top) (top) (top) (top))
                                   #("i4285" "i4286" "i4287" "i4288" "i4289"))
                                 #(ribcage () () ())
                                 #(ribcage #(x) #((top)) #("i4259")))
                                (hygiene guile))
                              .
                              #(syntax-object
                                syntax-rules
                                ((top)
                                 #(ribcage
                                   #(k docstring keyword pattern template)
                                   #((top) (top) (top) (top) (top))
                                   #("i4285" "i4286" "i4287" "i4288" "i4289"))
                                 #(ribcage () () ())
                                 #(ribcage #(x) #((top)) #("i4259")))
                                (hygiene guile)))
                            (cons '#(syntax-object
                                     patterns
                                     ((top)
                                      #(ribcage
                                        #(k docstring keyword pattern template)
                                        #((top) (top) (top) (top) (top))
                                        #("i4285"
                                          "i4286"
                                          "i4287"
                                          "i4288"
                                          "i4289"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("i4259")))
                                     (hygiene guile))
                                  #{pattern 4293}#))
                          (cons '#(syntax-object
                                   syntax-case
                                   ((top)
                                    #(ribcage
                                      #(k docstring keyword pattern template)
                                      #((top) (top) (top) (top) (top))
                                      #("i4285"
                                        "i4286"
                                        "i4287"
                                        "i4288"
                                        "i4289"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("i4259")))
                                   (hygiene guile))
                                (cons '#(syntax-object
                                         x
                                         ((top)
                                          #(ribcage
                                            #(k
                                              docstring
                                              keyword
                                              pattern
                                              template)
                                            #((top) (top) (top) (top) (top))
                                            #("i4285"
                                              "i4286"
                                              "i4287"
                                              "i4288"
                                              "i4289"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i4259")))
                                         (hygiene guile))
                                      (cons #{k 4290}#
                                            (map (lambda (#{tmp 4298}#
                                                          #{tmp 4297}#)
                                                   (list (cons '#(syntax-object
                                                                  dummy
                                                                  ((top)
                                                                   #(ribcage
                                                                     #(k
                                                                       docstring
                                                                       keyword
                                                                       pattern
                                                                       template)
                                                                     #((top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                     #("i4285"
                                                                       "i4286"
                                                                       "i4287"
                                                                       "i4288"
                                                                       "i4289"))
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     #(x)
                                                                     #((top))
                                                                     #("i4259")))
                                                                  (hygiene
                                                                    guile))
                                                               #{tmp 4297}#)
                                                         (list '#(syntax-object
                                                                  syntax
                                                                  ((top)
                                                                   #(ribcage
                                                                     #(k
                                                                       docstring
                                                                       keyword
                                                                       pattern
                                                                       template)
                                                                     #((top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                     #("i4285"
                                                                       "i4286"
                                                                       "i4287"
                                                                       "i4288"
                                                                       "i4289"))
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     #(x)
                                                                     #((top))
                                                                     #("i4259")))
                                                                  (hygiene
                                                                    guile))
                                                               #{tmp 4298}#)))
                                                 #{template 4294}#
                                                 #{pattern 4293}#))))))
                  #{tmp 4274}#)
                (syntax-violation
                  #f
                  "source expression failed to match any pattern"
                  #{tmp 4260}#)))))))))

(define let*
  (make-syntax-transformer
    'let*
    'macro
    (lambda (#{x 4299}#)
      (let ((#{tmp 4301}# #{x 4299}#))
        (let ((#{tmp 4302}#
                ($sc-dispatch
                  #{tmp 4301}#
                  '(any #(each (any any)) any . each-any))))
          (if (if #{tmp 4302}#
                (@apply
                  (lambda (#{let* 4308}#
                           #{x 4309}#
                           #{v 4310}#
                           #{e1 4311}#
                           #{e2 4312}#)
                    (and-map identifier? #{x 4309}#))
                  #{tmp 4302}#)
                #f)
            (@apply
              (lambda (#{let* 4319}#
                       #{x 4320}#
                       #{v 4321}#
                       #{e1 4322}#
                       #{e2 4323}#)
                (letrec*
                  ((#{f 4326}#
                     (lambda (#{bindings 4327}#)
                       (if (null? #{bindings 4327}#)
                         (cons '#(syntax-object
                                  let
                                  ((top)
                                   #(ribcage () () ())
                                   #(ribcage
                                     #(f bindings)
                                     #((top) (top))
                                     #("i4324" "i4325"))
                                   #(ribcage
                                     #(let* x v e1 e2)
                                     #((top) (top) (top) (top) (top))
                                     #("i4314"
                                       "i4315"
                                       "i4316"
                                       "i4317"
                                       "i4318"))
                                   #(ribcage () () ())
                                   #(ribcage #(x) #((top)) #("i4300")))
                                  (hygiene guile))
                               (cons '() (cons #{e1 4322}# #{e2 4323}#)))
                         (let ((#{tmp 4332}#
                                 (list (#{f 4326}# (cdr #{bindings 4327}#))
                                       (car #{bindings 4327}#))))
                           (let ((#{tmp 4333}#
                                   ($sc-dispatch #{tmp 4332}# '(any any))))
                             (if #{tmp 4333}#
                               (@apply
                                 (lambda (#{body 4336}# #{binding 4337}#)
                                   (list '#(syntax-object
                                            let
                                            ((top)
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(body binding)
                                               #((top) (top))
                                               #("i4334" "i4335"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(f bindings)
                                               #((top) (top))
                                               #("i4324" "i4325"))
                                             #(ribcage
                                               #(let* x v e1 e2)
                                               #((top) (top) (top) (top) (top))
                                               #("i4314"
                                                 "i4315"
                                                 "i4316"
                                                 "i4317"
                                                 "i4318"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x)
                                               #((top))
                                               #("i4300")))
                                            (hygiene guile))
                                         (list #{binding 4337}#)
                                         #{body 4336}#))
                                 #{tmp 4333}#)
                               (syntax-violation
                                 #f
                                 "source expression failed to match any pattern"
                                 #{tmp 4332}#))))))))
                  (begin
                    (#{f 4326}# (map list #{x 4320}# #{v 4321}#)))))
              #{tmp 4302}#)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              #{tmp 4301}#)))))))

(define do
  (make-syntax-transformer
    'do
    'macro
    (lambda (#{orig-x 4338}#)
      (let ((#{tmp 4340}# #{orig-x 4338}#))
        (let ((#{tmp 4341}#
                ($sc-dispatch
                  #{tmp 4340}#
                  '(_ #(each (any any . any))
                      (any . each-any)
                      .
                      each-any))))
          (if #{tmp 4341}#
            (@apply
              (lambda (#{var 4348}#
                       #{init 4349}#
                       #{step 4350}#
                       #{e0 4351}#
                       #{e1 4352}#
                       #{c 4353}#)
                (let ((#{tmp 4355}#
                        (map (lambda (#{v 4376}# #{s 4377}#)
                               (let ((#{tmp 4380}# #{s 4377}#))
                                 (let ((#{tmp 4381}#
                                         ($sc-dispatch #{tmp 4380}# '())))
                                   (if #{tmp 4381}#
                                     (@apply
                                       (lambda () #{v 4376}#)
                                       #{tmp 4381}#)
                                     (let ((#{tmp 4382}#
                                             ($sc-dispatch
                                               #{tmp 4380}#
                                               '(any))))
                                       (if #{tmp 4382}#
                                         (@apply
                                           (lambda (#{e 4384}#) #{e 4384}#)
                                           #{tmp 4382}#)
                                         (let ((#{_ 4386}# #{tmp 4380}#))
                                           (syntax-violation
                                             'do
                                             "bad step expression"
                                             #{orig-x 4338}#
                                             #{s 4377}#))))))))
                             #{var 4348}#
                             #{step 4350}#)))
                  (let ((#{tmp 4356}#
                          ($sc-dispatch #{tmp 4355}# 'each-any)))
                    (if #{tmp 4356}#
                      (@apply
                        (lambda (#{step 4358}#)
                          (let ((#{tmp 4359}# #{e1 4352}#))
                            (let ((#{tmp 4360}#
                                    ($sc-dispatch #{tmp 4359}# '())))
                              (if #{tmp 4360}#
                                (@apply
                                  (lambda ()
                                    (list '#(syntax-object
                                             let
                                             ((top)
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(step)
                                                #((top))
                                                #("i4357"))
                                              #(ribcage
                                                #(var init step e0 e1 c)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("i4342"
                                                  "i4343"
                                                  "i4344"
                                                  "i4345"
                                                  "i4346"
                                                  "i4347"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(orig-x)
                                                #((top))
                                                #("i4339")))
                                             (hygiene guile))
                                          '#(syntax-object
                                             doloop
                                             ((top)
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(step)
                                                #((top))
                                                #("i4357"))
                                              #(ribcage
                                                #(var init step e0 e1 c)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("i4342"
                                                  "i4343"
                                                  "i4344"
                                                  "i4345"
                                                  "i4346"
                                                  "i4347"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(orig-x)
                                                #((top))
                                                #("i4339")))
                                             (hygiene guile))
                                          (map list #{var 4348}# #{init 4349}#)
                                          (list '#(syntax-object
                                                   if
                                                   ((top)
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(step)
                                                      #((top))
                                                      #("i4357"))
                                                    #(ribcage
                                                      #(var init step e0 e1 c)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i4342"
                                                        "i4343"
                                                        "i4344"
                                                        "i4345"
                                                        "i4346"
                                                        "i4347"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(orig-x)
                                                      #((top))
                                                      #("i4339")))
                                                   (hygiene guile))
                                                (list '#(syntax-object
                                                         not
                                                         ((top)
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(step)
                                                            #((top))
                                                            #("i4357"))
                                                          #(ribcage
                                                            #(var
                                                              init
                                                              step
                                                              e0
                                                              e1
                                                              c)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i4342"
                                                              "i4343"
                                                              "i4344"
                                                              "i4345"
                                                              "i4346"
                                                              "i4347"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(orig-x)
                                                            #((top))
                                                            #("i4339")))
                                                         (hygiene guile))
                                                      #{e0 4351}#)
                                                (cons '#(syntax-object
                                                         begin
                                                         ((top)
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(step)
                                                            #((top))
                                                            #("i4357"))
                                                          #(ribcage
                                                            #(var
                                                              init
                                                              step
                                                              e0
                                                              e1
                                                              c)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i4342"
                                                              "i4343"
                                                              "i4344"
                                                              "i4345"
                                                              "i4346"
                                                              "i4347"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(orig-x)
                                                            #((top))
                                                            #("i4339")))
                                                         (hygiene guile))
                                                      (append
                                                        #{c 4353}#
                                                        (list (cons '#(syntax-object
                                                                       doloop
                                                                       ((top)
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(step)
                                                                          #((top))
                                                                          #("i4357"))
                                                                        #(ribcage
                                                                          #(var
                                                                            init
                                                                            step
                                                                            e0
                                                                            e1
                                                                            c)
                                                                          #((top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top))
                                                                          #("i4342"
                                                                            "i4343"
                                                                            "i4344"
                                                                            "i4345"
                                                                            "i4346"
                                                                            "i4347"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(orig-x)
                                                                          #((top))
                                                                          #("i4339")))
                                                                       (hygiene
                                                                         guile))
                                                                    #{step 4358}#)))))))
                                  #{tmp 4360}#)
                                (let ((#{tmp 4365}#
                                        ($sc-dispatch
                                          #{tmp 4359}#
                                          '(any . each-any))))
                                  (if #{tmp 4365}#
                                    (@apply
                                      (lambda (#{e1 4368}# #{e2 4369}#)
                                        (list '#(syntax-object
                                                 let
                                                 ((top)
                                                  #(ribcage
                                                    #(e1 e2)
                                                    #((top) (top))
                                                    #("i4366" "i4367"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(step)
                                                    #((top))
                                                    #("i4357"))
                                                  #(ribcage
                                                    #(var init step e0 e1 c)
                                                    #((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                    #("i4342"
                                                      "i4343"
                                                      "i4344"
                                                      "i4345"
                                                      "i4346"
                                                      "i4347"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(orig-x)
                                                    #((top))
                                                    #("i4339")))
                                                 (hygiene guile))
                                              '#(syntax-object
                                                 doloop
                                                 ((top)
                                                  #(ribcage
                                                    #(e1 e2)
                                                    #((top) (top))
                                                    #("i4366" "i4367"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(step)
                                                    #((top))
                                                    #("i4357"))
                                                  #(ribcage
                                                    #(var init step e0 e1 c)
                                                    #((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                    #("i4342"
                                                      "i4343"
                                                      "i4344"
                                                      "i4345"
                                                      "i4346"
                                                      "i4347"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(orig-x)
                                                    #((top))
                                                    #("i4339")))
                                                 (hygiene guile))
                                              (map list
                                                   #{var 4348}#
                                                   #{init 4349}#)
                                              (list '#(syntax-object
                                                       if
                                                       ((top)
                                                        #(ribcage
                                                          #(e1 e2)
                                                          #((top) (top))
                                                          #("i4366" "i4367"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(step)
                                                          #((top))
                                                          #("i4357"))
                                                        #(ribcage
                                                          #(var
                                                            init
                                                            step
                                                            e0
                                                            e1
                                                            c)
                                                          #((top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top))
                                                          #("i4342"
                                                            "i4343"
                                                            "i4344"
                                                            "i4345"
                                                            "i4346"
                                                            "i4347"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(orig-x)
                                                          #((top))
                                                          #("i4339")))
                                                       (hygiene guile))
                                                    #{e0 4351}#
                                                    (cons '#(syntax-object
                                                             begin
                                                             ((top)
                                                              #(ribcage
                                                                #(e1 e2)
                                                                #((top) (top))
                                                                #("i4366"
                                                                  "i4367"))
                                                              #(ribcage
                                                                ()
                                                                ()
                                                                ())
                                                              #(ribcage
                                                                #(step)
                                                                #((top))
                                                                #("i4357"))
                                                              #(ribcage
                                                                #(var
                                                                  init
                                                                  step
                                                                  e0
                                                                  e1
                                                                  c)
                                                                #((top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top))
                                                                #("i4342"
                                                                  "i4343"
                                                                  "i4344"
                                                                  "i4345"
                                                                  "i4346"
                                                                  "i4347"))
                                                              #(ribcage
                                                                ()
                                                                ()
                                                                ())
                                                              #(ribcage
                                                                #(orig-x)
                                                                #((top))
                                                                #("i4339")))
                                                             (hygiene guile))
                                                          (cons #{e1 4368}#
                                                                #{e2 4369}#))
                                                    (cons '#(syntax-object
                                                             begin
                                                             ((top)
                                                              #(ribcage
                                                                #(e1 e2)
                                                                #((top) (top))
                                                                #("i4366"
                                                                  "i4367"))
                                                              #(ribcage
                                                                ()
                                                                ()
                                                                ())
                                                              #(ribcage
                                                                #(step)
                                                                #((top))
                                                                #("i4357"))
                                                              #(ribcage
                                                                #(var
                                                                  init
                                                                  step
                                                                  e0
                                                                  e1
                                                                  c)
                                                                #((top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top))
                                                                #("i4342"
                                                                  "i4343"
                                                                  "i4344"
                                                                  "i4345"
                                                                  "i4346"
                                                                  "i4347"))
                                                              #(ribcage
                                                                ()
                                                                ()
                                                                ())
                                                              #(ribcage
                                                                #(orig-x)
                                                                #((top))
                                                                #("i4339")))
                                                             (hygiene guile))
                                                          (append
                                                            #{c 4353}#
                                                            (list (cons '#(syntax-object
                                                                           doloop
                                                                           ((top)
                                                                            #(ribcage
                                                                              #(e1
                                                                                e2)
                                                                              #((top)
                                                                                (top))
                                                                              #("i4366"
                                                                                "i4367"))
                                                                            #(ribcage
                                                                              ()
                                                                              ()
                                                                              ())
                                                                            #(ribcage
                                                                              #(step)
                                                                              #((top))
                                                                              #("i4357"))
                                                                            #(ribcage
                                                                              #(var
                                                                                init
                                                                                step
                                                                                e0
                                                                                e1
                                                                                c)
                                                                              #((top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top))
                                                                              #("i4342"
                                                                                "i4343"
                                                                                "i4344"
                                                                                "i4345"
                                                                                "i4346"
                                                                                "i4347"))
                                                                            #(ribcage
                                                                              ()
                                                                              ()
                                                                              ())
                                                                            #(ribcage
                                                                              #(orig-x)
                                                                              #((top))
                                                                              #("i4339")))
                                                                           (hygiene
                                                                             guile))
                                                                        #{step 4358}#)))))))
                                      #{tmp 4365}#)
                                    (syntax-violation
                                      #f
                                      "source expression failed to match any pattern"
                                      #{tmp 4359}#)))))))
                        #{tmp 4356}#)
                      (syntax-violation
                        #f
                        "source expression failed to match any pattern"
                        #{tmp 4355}#)))))
              #{tmp 4341}#)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              #{tmp 4340}#)))))))

(define quasiquote
  (make-syntax-transformer
    'quasiquote
    'macro
    (letrec*
      ((#{quasi 4390}#
         (lambda (#{p 4403}# #{lev 4404}#)
           (let ((#{tmp 4407}# #{p 4403}#))
             (let ((#{tmp 4408}#
                     ($sc-dispatch
                       #{tmp 4407}#
                       '(#(free-id
                           #(syntax-object
                             unquote
                             ((top)
                              #(ribcage () () ())
                              #(ribcage
                                #(p lev)
                                #((top) (top))
                                #("i4405" "i4406"))
                              #(ribcage
                                (emit quasivector
                                      quasilist*
                                      quasiappend
                                      quasicons
                                      vquasi
                                      quasi)
                                ((top) (top) (top) (top) (top) (top) (top))
                                ("i4401"
                                 "i4399"
                                 "i4397"
                                 "i4395"
                                 "i4393"
                                 "i4391"
                                 "i4389")))
                             (hygiene guile)))
                         any))))
               (if #{tmp 4408}#
                 (@apply
                   (lambda (#{p 4410}#)
                     (if (= #{lev 4404}# 0)
                       (list '#(syntax-object
                                "value"
                                ((top)
                                 #(ribcage #(p) #((top)) #("i4409"))
                                 #(ribcage () () ())
                                 #(ribcage
                                   #(p lev)
                                   #((top) (top))
                                   #("i4405" "i4406"))
                                 #(ribcage
                                   (emit quasivector
                                         quasilist*
                                         quasiappend
                                         quasicons
                                         vquasi
                                         quasi)
                                   ((top) (top) (top) (top) (top) (top) (top))
                                   ("i4401"
                                    "i4399"
                                    "i4397"
                                    "i4395"
                                    "i4393"
                                    "i4391"
                                    "i4389")))
                                (hygiene guile))
                             #{p 4410}#)
                       (#{quasicons 4394}#
                         '(#(syntax-object
                             "quote"
                             ((top)
                              #(ribcage #(p) #((top)) #("i4409"))
                              #(ribcage () () ())
                              #(ribcage
                                #(p lev)
                                #((top) (top))
                                #("i4405" "i4406"))
                              #(ribcage
                                (emit quasivector
                                      quasilist*
                                      quasiappend
                                      quasicons
                                      vquasi
                                      quasi)
                                ((top) (top) (top) (top) (top) (top) (top))
                                ("i4401"
                                 "i4399"
                                 "i4397"
                                 "i4395"
                                 "i4393"
                                 "i4391"
                                 "i4389")))
                             (hygiene guile))
                           #(syntax-object
                             unquote
                             ((top)
                              #(ribcage #(p) #((top)) #("i4409"))
                              #(ribcage () () ())
                              #(ribcage
                                #(p lev)
                                #((top) (top))
                                #("i4405" "i4406"))
                              #(ribcage
                                (emit quasivector
                                      quasilist*
                                      quasiappend
                                      quasicons
                                      vquasi
                                      quasi)
                                ((top) (top) (top) (top) (top) (top) (top))
                                ("i4401"
                                 "i4399"
                                 "i4397"
                                 "i4395"
                                 "i4393"
                                 "i4391"
                                 "i4389")))
                             (hygiene guile)))
                         (#{quasi 4390}#
                           (list #{p 4410}#)
                           (#{1-}# #{lev 4404}#)))))
                   #{tmp 4408}#)
                 (let ((#{tmp 4411}#
                         ($sc-dispatch
                           #{tmp 4407}#
                           '(#(free-id
                               #(syntax-object
                                 quasiquote
                                 ((top)
                                  #(ribcage () () ())
                                  #(ribcage
                                    #(p lev)
                                    #((top) (top))
                                    #("i4405" "i4406"))
                                  #(ribcage
                                    (emit quasivector
                                          quasilist*
                                          quasiappend
                                          quasicons
                                          vquasi
                                          quasi)
                                    ((top) (top) (top) (top) (top) (top) (top))
                                    ("i4401"
                                     "i4399"
                                     "i4397"
                                     "i4395"
                                     "i4393"
                                     "i4391"
                                     "i4389")))
                                 (hygiene guile)))
                             any))))
                   (if #{tmp 4411}#
                     (@apply
                       (lambda (#{p 4413}#)
                         (#{quasicons 4394}#
                           '(#(syntax-object
                               "quote"
                               ((top)
                                #(ribcage #(p) #((top)) #("i4412"))
                                #(ribcage () () ())
                                #(ribcage
                                  #(p lev)
                                  #((top) (top))
                                  #("i4405" "i4406"))
                                #(ribcage
                                  (emit quasivector
                                        quasilist*
                                        quasiappend
                                        quasicons
                                        vquasi
                                        quasi)
                                  ((top) (top) (top) (top) (top) (top) (top))
                                  ("i4401"
                                   "i4399"
                                   "i4397"
                                   "i4395"
                                   "i4393"
                                   "i4391"
                                   "i4389")))
                               (hygiene guile))
                             #(syntax-object
                               quasiquote
                               ((top)
                                #(ribcage #(p) #((top)) #("i4412"))
                                #(ribcage () () ())
                                #(ribcage
                                  #(p lev)
                                  #((top) (top))
                                  #("i4405" "i4406"))
                                #(ribcage
                                  (emit quasivector
                                        quasilist*
                                        quasiappend
                                        quasicons
                                        vquasi
                                        quasi)
                                  ((top) (top) (top) (top) (top) (top) (top))
                                  ("i4401"
                                   "i4399"
                                   "i4397"
                                   "i4395"
                                   "i4393"
                                   "i4391"
                                   "i4389")))
                               (hygiene guile)))
                           (#{quasi 4390}#
                             (list #{p 4413}#)
                             (#{1+}# #{lev 4404}#))))
                       #{tmp 4411}#)
                     (let ((#{tmp 4414}#
                             ($sc-dispatch #{tmp 4407}# '(any . any))))
                       (if #{tmp 4414}#
                         (@apply
                           (lambda (#{p 4417}# #{q 4418}#)
                             (let ((#{tmp 4419}# #{p 4417}#))
                               (let ((#{tmp 4420}#
                                       ($sc-dispatch
                                         #{tmp 4419}#
                                         '(#(free-id
                                             #(syntax-object
                                               unquote
                                               ((top)
                                                #(ribcage
                                                  #(p q)
                                                  #((top) (top))
                                                  #("i4415" "i4416"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(p lev)
                                                  #((top) (top))
                                                  #("i4405" "i4406"))
                                                #(ribcage
                                                  (emit quasivector
                                                        quasilist*
                                                        quasiappend
                                                        quasicons
                                                        vquasi
                                                        quasi)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("i4401"
                                                   "i4399"
                                                   "i4397"
                                                   "i4395"
                                                   "i4393"
                                                   "i4391"
                                                   "i4389")))
                                               (hygiene guile)))
                                           .
                                           each-any))))
                                 (if #{tmp 4420}#
                                   (@apply
                                     (lambda (#{p 4422}#)
                                       (if (= #{lev 4404}# 0)
                                         (#{quasilist* 4398}#
                                           (map (lambda (#{tmp 4423}#)
                                                  (list '#(syntax-object
                                                           "value"
                                                           ((top)
                                                            #(ribcage
                                                              #(p)
                                                              #((top))
                                                              #("i4421"))
                                                            #(ribcage
                                                              #(p q)
                                                              #((top) (top))
                                                              #("i4415"
                                                                "i4416"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(p lev)
                                                              #((top) (top))
                                                              #("i4405"
                                                                "i4406"))
                                                            #(ribcage
                                                              (emit quasivector
                                                                    quasilist*
                                                                    quasiappend
                                                                    quasicons
                                                                    vquasi
                                                                    quasi)
                                                              ((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                              ("i4401"
                                                               "i4399"
                                                               "i4397"
                                                               "i4395"
                                                               "i4393"
                                                               "i4391"
                                                               "i4389")))
                                                           (hygiene guile))
                                                        #{tmp 4423}#))
                                                #{p 4422}#)
                                           (#{quasi 4390}#
                                             #{q 4418}#
                                             #{lev 4404}#))
                                         (#{quasicons 4394}#
                                           (#{quasicons 4394}#
                                             '(#(syntax-object
                                                 "quote"
                                                 ((top)
                                                  #(ribcage
                                                    #(p)
                                                    #((top))
                                                    #("i4421"))
                                                  #(ribcage
                                                    #(p q)
                                                    #((top) (top))
                                                    #("i4415" "i4416"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(p lev)
                                                    #((top) (top))
                                                    #("i4405" "i4406"))
                                                  #(ribcage
                                                    (emit quasivector
                                                          quasilist*
                                                          quasiappend
                                                          quasicons
                                                          vquasi
                                                          quasi)
                                                    ((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                    ("i4401"
                                                     "i4399"
                                                     "i4397"
                                                     "i4395"
                                                     "i4393"
                                                     "i4391"
                                                     "i4389")))
                                                 (hygiene guile))
                                               #(syntax-object
                                                 unquote
                                                 ((top)
                                                  #(ribcage
                                                    #(p)
                                                    #((top))
                                                    #("i4421"))
                                                  #(ribcage
                                                    #(p q)
                                                    #((top) (top))
                                                    #("i4415" "i4416"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(p lev)
                                                    #((top) (top))
                                                    #("i4405" "i4406"))
                                                  #(ribcage
                                                    (emit quasivector
                                                          quasilist*
                                                          quasiappend
                                                          quasicons
                                                          vquasi
                                                          quasi)
                                                    ((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                    ("i4401"
                                                     "i4399"
                                                     "i4397"
                                                     "i4395"
                                                     "i4393"
                                                     "i4391"
                                                     "i4389")))
                                                 (hygiene guile)))
                                             (#{quasi 4390}#
                                               #{p 4422}#
                                               (#{1-}# #{lev 4404}#)))
                                           (#{quasi 4390}#
                                             #{q 4418}#
                                             #{lev 4404}#))))
                                     #{tmp 4420}#)
                                   (let ((#{tmp 4425}#
                                           ($sc-dispatch
                                             #{tmp 4419}#
                                             '(#(free-id
                                                 #(syntax-object
                                                   unquote-splicing
                                                   ((top)
                                                    #(ribcage
                                                      #(p q)
                                                      #((top) (top))
                                                      #("i4415" "i4416"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(p lev)
                                                      #((top) (top))
                                                      #("i4405" "i4406"))
                                                    #(ribcage
                                                      (emit quasivector
                                                            quasilist*
                                                            quasiappend
                                                            quasicons
                                                            vquasi
                                                            quasi)
                                                      ((top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top))
                                                      ("i4401"
                                                       "i4399"
                                                       "i4397"
                                                       "i4395"
                                                       "i4393"
                                                       "i4391"
                                                       "i4389")))
                                                   (hygiene guile)))
                                               .
                                               each-any))))
                                     (if #{tmp 4425}#
                                       (@apply
                                         (lambda (#{p 4427}#)
                                           (if (= #{lev 4404}# 0)
                                             (#{quasiappend 4396}#
                                               (map (lambda (#{tmp 4428}#)
                                                      (list '#(syntax-object
                                                               "value"
                                                               ((top)
                                                                #(ribcage
                                                                  #(p)
                                                                  #((top))
                                                                  #("i4426"))
                                                                #(ribcage
                                                                  #(p q)
                                                                  #((top)
                                                                    (top))
                                                                  #("i4415"
                                                                    "i4416"))
                                                                #(ribcage
                                                                  ()
                                                                  ()
                                                                  ())
                                                                #(ribcage
                                                                  #(p lev)
                                                                  #((top)
                                                                    (top))
                                                                  #("i4405"
                                                                    "i4406"))
                                                                #(ribcage
                                                                  (emit quasivector
                                                                        quasilist*
                                                                        quasiappend
                                                                        quasicons
                                                                        vquasi
                                                                        quasi)
                                                                  ((top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top))
                                                                  ("i4401"
                                                                   "i4399"
                                                                   "i4397"
                                                                   "i4395"
                                                                   "i4393"
                                                                   "i4391"
                                                                   "i4389")))
                                                               (hygiene guile))
                                                            #{tmp 4428}#))
                                                    #{p 4427}#)
                                               (#{quasi 4390}#
                                                 #{q 4418}#
                                                 #{lev 4404}#))
                                             (#{quasicons 4394}#
                                               (#{quasicons 4394}#
                                                 '(#(syntax-object
                                                     "quote"
                                                     ((top)
                                                      #(ribcage
                                                        #(p)
                                                        #((top))
                                                        #("i4426"))
                                                      #(ribcage
                                                        #(p q)
                                                        #((top) (top))
                                                        #("i4415" "i4416"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(p lev)
                                                        #((top) (top))
                                                        #("i4405" "i4406"))
                                                      #(ribcage
                                                        (emit quasivector
                                                              quasilist*
                                                              quasiappend
                                                              quasicons
                                                              vquasi
                                                              quasi)
                                                        ((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                        ("i4401"
                                                         "i4399"
                                                         "i4397"
                                                         "i4395"
                                                         "i4393"
                                                         "i4391"
                                                         "i4389")))
                                                     (hygiene guile))
                                                   #(syntax-object
                                                     unquote-splicing
                                                     ((top)
                                                      #(ribcage
                                                        #(p)
                                                        #((top))
                                                        #("i4426"))
                                                      #(ribcage
                                                        #(p q)
                                                        #((top) (top))
                                                        #("i4415" "i4416"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(p lev)
                                                        #((top) (top))
                                                        #("i4405" "i4406"))
                                                      #(ribcage
                                                        (emit quasivector
                                                              quasilist*
                                                              quasiappend
                                                              quasicons
                                                              vquasi
                                                              quasi)
                                                        ((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                        ("i4401"
                                                         "i4399"
                                                         "i4397"
                                                         "i4395"
                                                         "i4393"
                                                         "i4391"
                                                         "i4389")))
                                                     (hygiene guile)))
                                                 (#{quasi 4390}#
                                                   #{p 4427}#
                                                   (#{1-}# #{lev 4404}#)))
                                               (#{quasi 4390}#
                                                 #{q 4418}#
                                                 #{lev 4404}#))))
                                         #{tmp 4425}#)
                                       (let ((#{_ 4431}# #{tmp 4419}#))
                                         (#{quasicons 4394}#
                                           (#{quasi 4390}#
                                             #{p 4417}#
                                             #{lev 4404}#)
                                           (#{quasi 4390}#
                                             #{q 4418}#
                                             #{lev 4404}#)))))))))
                           #{tmp 4414}#)
                         (let ((#{tmp 4432}#
                                 ($sc-dispatch
                                   #{tmp 4407}#
                                   '#(vector each-any))))
                           (if #{tmp 4432}#
                             (@apply
                               (lambda (#{x 4434}#)
                                 (#{quasivector 4400}#
                                   (#{vquasi 4392}# #{x 4434}# #{lev 4404}#)))
                               #{tmp 4432}#)
                             (let ((#{p 4437}# #{tmp 4407}#))
                               (list '#(syntax-object
                                        "quote"
                                        ((top)
                                         #(ribcage #(p) #((top)) #("i4436"))
                                         #(ribcage () () ())
                                         #(ribcage
                                           #(p lev)
                                           #((top) (top))
                                           #("i4405" "i4406"))
                                         #(ribcage
                                           (emit quasivector
                                                 quasilist*
                                                 quasiappend
                                                 quasicons
                                                 vquasi
                                                 quasi)
                                           ((top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top))
                                           ("i4401"
                                            "i4399"
                                            "i4397"
                                            "i4395"
                                            "i4393"
                                            "i4391"
                                            "i4389")))
                                        (hygiene guile))
                                     #{p 4437}#)))))))))))))
       (#{vquasi 4392}#
         (lambda (#{p 4438}# #{lev 4439}#)
           (let ((#{tmp 4442}# #{p 4438}#))
             (let ((#{tmp 4443}#
                     ($sc-dispatch #{tmp 4442}# '(any . any))))
               (if #{tmp 4443}#
                 (@apply
                   (lambda (#{p 4446}# #{q 4447}#)
                     (let ((#{tmp 4448}# #{p 4446}#))
                       (let ((#{tmp 4449}#
                               ($sc-dispatch
                                 #{tmp 4448}#
                                 '(#(free-id
                                     #(syntax-object
                                       unquote
                                       ((top)
                                        #(ribcage
                                          #(p q)
                                          #((top) (top))
                                          #("i4444" "i4445"))
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(p lev)
                                          #((top) (top))
                                          #("i4440" "i4441"))
                                        #(ribcage
                                          (emit quasivector
                                                quasilist*
                                                quasiappend
                                                quasicons
                                                vquasi
                                                quasi)
                                          ((top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top))
                                          ("i4401"
                                           "i4399"
                                           "i4397"
                                           "i4395"
                                           "i4393"
                                           "i4391"
                                           "i4389")))
                                       (hygiene guile)))
                                   .
                                   each-any))))
                         (if #{tmp 4449}#
                           (@apply
                             (lambda (#{p 4451}#)
                               (if (= #{lev 4439}# 0)
                                 (#{quasilist* 4398}#
                                   (map (lambda (#{tmp 4452}#)
                                          (list '#(syntax-object
                                                   "value"
                                                   ((top)
                                                    #(ribcage
                                                      #(p)
                                                      #((top))
                                                      #("i4450"))
                                                    #(ribcage
                                                      #(p q)
                                                      #((top) (top))
                                                      #("i4444" "i4445"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(p lev)
                                                      #((top) (top))
                                                      #("i4440" "i4441"))
                                                    #(ribcage
                                                      (emit quasivector
                                                            quasilist*
                                                            quasiappend
                                                            quasicons
                                                            vquasi
                                                            quasi)
                                                      ((top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top))
                                                      ("i4401"
                                                       "i4399"
                                                       "i4397"
                                                       "i4395"
                                                       "i4393"
                                                       "i4391"
                                                       "i4389")))
                                                   (hygiene guile))
                                                #{tmp 4452}#))
                                        #{p 4451}#)
                                   (#{vquasi 4392}# #{q 4447}# #{lev 4439}#))
                                 (#{quasicons 4394}#
                                   (#{quasicons 4394}#
                                     '(#(syntax-object
                                         "quote"
                                         ((top)
                                          #(ribcage #(p) #((top)) #("i4450"))
                                          #(ribcage
                                            #(p q)
                                            #((top) (top))
                                            #("i4444" "i4445"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(p lev)
                                            #((top) (top))
                                            #("i4440" "i4441"))
                                          #(ribcage
                                            (emit quasivector
                                                  quasilist*
                                                  quasiappend
                                                  quasicons
                                                  vquasi
                                                  quasi)
                                            ((top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top))
                                            ("i4401"
                                             "i4399"
                                             "i4397"
                                             "i4395"
                                             "i4393"
                                             "i4391"
                                             "i4389")))
                                         (hygiene guile))
                                       #(syntax-object
                                         unquote
                                         ((top)
                                          #(ribcage #(p) #((top)) #("i4450"))
                                          #(ribcage
                                            #(p q)
                                            #((top) (top))
                                            #("i4444" "i4445"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(p lev)
                                            #((top) (top))
                                            #("i4440" "i4441"))
                                          #(ribcage
                                            (emit quasivector
                                                  quasilist*
                                                  quasiappend
                                                  quasicons
                                                  vquasi
                                                  quasi)
                                            ((top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top))
                                            ("i4401"
                                             "i4399"
                                             "i4397"
                                             "i4395"
                                             "i4393"
                                             "i4391"
                                             "i4389")))
                                         (hygiene guile)))
                                     (#{quasi 4390}#
                                       #{p 4451}#
                                       (#{1-}# #{lev 4439}#)))
                                   (#{vquasi 4392}# #{q 4447}# #{lev 4439}#))))
                             #{tmp 4449}#)
                           (let ((#{tmp 4454}#
                                   ($sc-dispatch
                                     #{tmp 4448}#
                                     '(#(free-id
                                         #(syntax-object
                                           unquote-splicing
                                           ((top)
                                            #(ribcage
                                              #(p q)
                                              #((top) (top))
                                              #("i4444" "i4445"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(p lev)
                                              #((top) (top))
                                              #("i4440" "i4441"))
                                            #(ribcage
                                              (emit quasivector
                                                    quasilist*
                                                    quasiappend
                                                    quasicons
                                                    vquasi
                                                    quasi)
                                              ((top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top))
                                              ("i4401"
                                               "i4399"
                                               "i4397"
                                               "i4395"
                                               "i4393"
                                               "i4391"
                                               "i4389")))
                                           (hygiene guile)))
                                       .
                                       each-any))))
                             (if #{tmp 4454}#
                               (@apply
                                 (lambda (#{p 4456}#)
                                   (if (= #{lev 4439}# 0)
                                     (#{quasiappend 4396}#
                                       (map (lambda (#{tmp 4457}#)
                                              (list '#(syntax-object
                                                       "value"
                                                       ((top)
                                                        #(ribcage
                                                          #(p)
                                                          #((top))
                                                          #("i4455"))
                                                        #(ribcage
                                                          #(p q)
                                                          #((top) (top))
                                                          #("i4444" "i4445"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(p lev)
                                                          #((top) (top))
                                                          #("i4440" "i4441"))
                                                        #(ribcage
                                                          (emit quasivector
                                                                quasilist*
                                                                quasiappend
                                                                quasicons
                                                                vquasi
                                                                quasi)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("i4401"
                                                           "i4399"
                                                           "i4397"
                                                           "i4395"
                                                           "i4393"
                                                           "i4391"
                                                           "i4389")))
                                                       (hygiene guile))
                                                    #{tmp 4457}#))
                                            #{p 4456}#)
                                       (#{vquasi 4392}#
                                         #{q 4447}#
                                         #{lev 4439}#))
                                     (#{quasicons 4394}#
                                       (#{quasicons 4394}#
                                         '(#(syntax-object
                                             "quote"
                                             ((top)
                                              #(ribcage
                                                #(p)
                                                #((top))
                                                #("i4455"))
                                              #(ribcage
                                                #(p q)
                                                #((top) (top))
                                                #("i4444" "i4445"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(p lev)
                                                #((top) (top))
                                                #("i4440" "i4441"))
                                              #(ribcage
                                                (emit quasivector
                                                      quasilist*
                                                      quasiappend
                                                      quasicons
                                                      vquasi
                                                      quasi)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("i4401"
                                                 "i4399"
                                                 "i4397"
                                                 "i4395"
                                                 "i4393"
                                                 "i4391"
                                                 "i4389")))
                                             (hygiene guile))
                                           #(syntax-object
                                             unquote-splicing
                                             ((top)
                                              #(ribcage
                                                #(p)
                                                #((top))
                                                #("i4455"))
                                              #(ribcage
                                                #(p q)
                                                #((top) (top))
                                                #("i4444" "i4445"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(p lev)
                                                #((top) (top))
                                                #("i4440" "i4441"))
                                              #(ribcage
                                                (emit quasivector
                                                      quasilist*
                                                      quasiappend
                                                      quasicons
                                                      vquasi
                                                      quasi)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("i4401"
                                                 "i4399"
                                                 "i4397"
                                                 "i4395"
                                                 "i4393"
                                                 "i4391"
                                                 "i4389")))
                                             (hygiene guile)))
                                         (#{quasi 4390}#
                                           #{p 4456}#
                                           (#{1-}# #{lev 4439}#)))
                                       (#{vquasi 4392}#
                                         #{q 4447}#
                                         #{lev 4439}#))))
                                 #{tmp 4454}#)
                               (let ((#{_ 4460}# #{tmp 4448}#))
                                 (#{quasicons 4394}#
                                   (#{quasi 4390}# #{p 4446}# #{lev 4439}#)
                                   (#{vquasi 4392}#
                                     #{q 4447}#
                                     #{lev 4439}#)))))))))
                   #{tmp 4443}#)
                 (let ((#{tmp 4461}# ($sc-dispatch #{tmp 4442}# '())))
                   (if #{tmp 4461}#
                     (@apply
                       (lambda ()
                         '(#(syntax-object
                             "quote"
                             ((top)
                              #(ribcage () () ())
                              #(ribcage
                                #(p lev)
                                #((top) (top))
                                #("i4440" "i4441"))
                              #(ribcage
                                (emit quasivector
                                      quasilist*
                                      quasiappend
                                      quasicons
                                      vquasi
                                      quasi)
                                ((top) (top) (top) (top) (top) (top) (top))
                                ("i4401"
                                 "i4399"
                                 "i4397"
                                 "i4395"
                                 "i4393"
                                 "i4391"
                                 "i4389")))
                             (hygiene guile))
                           ()))
                       #{tmp 4461}#)
                     (syntax-violation
                       #f
                       "source expression failed to match any pattern"
                       #{tmp 4442}#))))))))
       (#{quasicons 4394}#
         (lambda (#{x 4462}# #{y 4463}#)
           (let ((#{tmp 4467}# (list #{x 4462}# #{y 4463}#)))
             (let ((#{tmp 4468}#
                     ($sc-dispatch #{tmp 4467}# '(any any))))
               (if #{tmp 4468}#
                 (@apply
                   (lambda (#{x 4471}# #{y 4472}#)
                     (let ((#{tmp 4473}# #{y 4472}#))
                       (let ((#{tmp 4474}#
                               ($sc-dispatch
                                 #{tmp 4473}#
                                 '(#(atom "quote") any))))
                         (if #{tmp 4474}#
                           (@apply
                             (lambda (#{dy 4476}#)
                               (let ((#{tmp 4477}# #{x 4471}#))
                                 (let ((#{tmp 4478}#
                                         ($sc-dispatch
                                           #{tmp 4477}#
                                           '(#(atom "quote") any))))
                                   (if #{tmp 4478}#
                                     (@apply
                                       (lambda (#{dx 4480}#)
                                         (list '#(syntax-object
                                                  "quote"
                                                  ((top)
                                                   #(ribcage
                                                     #(dx)
                                                     #((top))
                                                     #("i4479"))
                                                   #(ribcage
                                                     #(dy)
                                                     #((top))
                                                     #("i4475"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x y)
                                                     #((top) (top))
                                                     #("i4469" "i4470"))
                                                   #(ribcage () () ())
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x y)
                                                     #((top) (top))
                                                     #("i4464" "i4465"))
                                                   #(ribcage
                                                     (emit quasivector
                                                           quasilist*
                                                           quasiappend
                                                           quasicons
                                                           vquasi
                                                           quasi)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("i4401"
                                                      "i4399"
                                                      "i4397"
                                                      "i4395"
                                                      "i4393"
                                                      "i4391"
                                                      "i4389")))
                                                  (hygiene guile))
                                               (cons #{dx 4480}# #{dy 4476}#)))
                                       #{tmp 4478}#)
                                     (let ((#{_ 4482}# #{tmp 4477}#))
                                       (if (null? #{dy 4476}#)
                                         (list '#(syntax-object
                                                  "list"
                                                  ((top)
                                                   #(ribcage
                                                     #(_)
                                                     #((top))
                                                     #("i4481"))
                                                   #(ribcage
                                                     #(dy)
                                                     #((top))
                                                     #("i4475"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x y)
                                                     #((top) (top))
                                                     #("i4469" "i4470"))
                                                   #(ribcage () () ())
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x y)
                                                     #((top) (top))
                                                     #("i4464" "i4465"))
                                                   #(ribcage
                                                     (emit quasivector
                                                           quasilist*
                                                           quasiappend
                                                           quasicons
                                                           vquasi
                                                           quasi)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("i4401"
                                                      "i4399"
                                                      "i4397"
                                                      "i4395"
                                                      "i4393"
                                                      "i4391"
                                                      "i4389")))
                                                  (hygiene guile))
                                               #{x 4471}#)
                                         (list '#(syntax-object
                                                  "list*"
                                                  ((top)
                                                   #(ribcage
                                                     #(_)
                                                     #((top))
                                                     #("i4481"))
                                                   #(ribcage
                                                     #(dy)
                                                     #((top))
                                                     #("i4475"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x y)
                                                     #((top) (top))
                                                     #("i4469" "i4470"))
                                                   #(ribcage () () ())
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x y)
                                                     #((top) (top))
                                                     #("i4464" "i4465"))
                                                   #(ribcage
                                                     (emit quasivector
                                                           quasilist*
                                                           quasiappend
                                                           quasicons
                                                           vquasi
                                                           quasi)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("i4401"
                                                      "i4399"
                                                      "i4397"
                                                      "i4395"
                                                      "i4393"
                                                      "i4391"
                                                      "i4389")))
                                                  (hygiene guile))
                                               #{x 4471}#
                                               #{y 4472}#)))))))
                             #{tmp 4474}#)
                           (let ((#{tmp 4483}#
                                   ($sc-dispatch
                                     #{tmp 4473}#
                                     '(#(atom "list") . any))))
                             (if #{tmp 4483}#
                               (@apply
                                 (lambda (#{stuff 4485}#)
                                   (cons '#(syntax-object
                                            "list"
                                            ((top)
                                             #(ribcage
                                               #(stuff)
                                               #((top))
                                               #("i4484"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("i4469" "i4470"))
                                             #(ribcage () () ())
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("i4464" "i4465"))
                                             #(ribcage
                                               (emit quasivector
                                                     quasilist*
                                                     quasiappend
                                                     quasicons
                                                     vquasi
                                                     quasi)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("i4401"
                                                "i4399"
                                                "i4397"
                                                "i4395"
                                                "i4393"
                                                "i4391"
                                                "i4389")))
                                            (hygiene guile))
                                         (cons #{x 4471}# #{stuff 4485}#)))
                                 #{tmp 4483}#)
                               (let ((#{tmp 4486}#
                                       ($sc-dispatch
                                         #{tmp 4473}#
                                         '(#(atom "list*") . any))))
                                 (if #{tmp 4486}#
                                   (@apply
                                     (lambda (#{stuff 4488}#)
                                       (cons '#(syntax-object
                                                "list*"
                                                ((top)
                                                 #(ribcage
                                                   #(stuff)
                                                   #((top))
                                                   #("i4487"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x y)
                                                   #((top) (top))
                                                   #("i4469" "i4470"))
                                                 #(ribcage () () ())
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x y)
                                                   #((top) (top))
                                                   #("i4464" "i4465"))
                                                 #(ribcage
                                                   (emit quasivector
                                                         quasilist*
                                                         quasiappend
                                                         quasicons
                                                         vquasi
                                                         quasi)
                                                   ((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                   ("i4401"
                                                    "i4399"
                                                    "i4397"
                                                    "i4395"
                                                    "i4393"
                                                    "i4391"
                                                    "i4389")))
                                                (hygiene guile))
                                             (cons #{x 4471}# #{stuff 4488}#)))
                                     #{tmp 4486}#)
                                   (let ((#{_ 4490}# #{tmp 4473}#))
                                     (list '#(syntax-object
                                              "list*"
                                              ((top)
                                               #(ribcage
                                                 #(_)
                                                 #((top))
                                                 #("i4489"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("i4469" "i4470"))
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("i4464" "i4465"))
                                               #(ribcage
                                                 (emit quasivector
                                                       quasilist*
                                                       quasiappend
                                                       quasicons
                                                       vquasi
                                                       quasi)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("i4401"
                                                  "i4399"
                                                  "i4397"
                                                  "i4395"
                                                  "i4393"
                                                  "i4391"
                                                  "i4389")))
                                              (hygiene guile))
                                           #{x 4471}#
                                           #{y 4472}#))))))))))
                   #{tmp 4468}#)
                 (syntax-violation
                   #f
                   "source expression failed to match any pattern"
                   #{tmp 4467}#))))))
       (#{quasiappend 4396}#
         (lambda (#{x 4491}# #{y 4492}#)
           (let ((#{tmp 4495}# #{y 4492}#))
             (let ((#{tmp 4496}#
                     ($sc-dispatch #{tmp 4495}# '(#(atom "quote") ()))))
               (if #{tmp 4496}#
                 (@apply
                   (lambda ()
                     (if (null? #{x 4491}#)
                       '(#(syntax-object
                           "quote"
                           ((top)
                            #(ribcage () () ())
                            #(ribcage
                              #(x y)
                              #((top) (top))
                              #("i4493" "i4494"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("i4401"
                               "i4399"
                               "i4397"
                               "i4395"
                               "i4393"
                               "i4391"
                               "i4389")))
                           (hygiene guile))
                         ())
                       (if (null? (cdr #{x 4491}#))
                         (car #{x 4491}#)
                         (let ((#{tmp 4503}# #{x 4491}#))
                           (let ((#{tmp 4504}#
                                   ($sc-dispatch #{tmp 4503}# 'each-any)))
                             (if #{tmp 4504}#
                               (@apply
                                 (lambda (#{p 4506}#)
                                   (cons '#(syntax-object
                                            "append"
                                            ((top)
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(p)
                                               #((top))
                                               #("i4505"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("i4493" "i4494"))
                                             #(ribcage
                                               (emit quasivector
                                                     quasilist*
                                                     quasiappend
                                                     quasicons
                                                     vquasi
                                                     quasi)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("i4401"
                                                "i4399"
                                                "i4397"
                                                "i4395"
                                                "i4393"
                                                "i4391"
                                                "i4389")))
                                            (hygiene guile))
                                         #{p 4506}#))
                                 #{tmp 4504}#)
                               (syntax-violation
                                 #f
                                 "source expression failed to match any pattern"
                                 #{tmp 4503}#)))))))
                   #{tmp 4496}#)
                 (let ((#{_ 4509}# #{tmp 4495}#))
                   (if (null? #{x 4491}#)
                     #{y 4492}#
                     (let ((#{tmp 4514}# (list #{x 4491}# #{y 4492}#)))
                       (let ((#{tmp 4515}#
                               ($sc-dispatch #{tmp 4514}# '(each-any any))))
                         (if #{tmp 4515}#
                           (@apply
                             (lambda (#{p 4518}# #{y 4519}#)
                               (cons '#(syntax-object
                                        "append"
                                        ((top)
                                         #(ribcage () () ())
                                         #(ribcage
                                           #(p y)
                                           #((top) (top))
                                           #("i4516" "i4517"))
                                         #(ribcage #(_) #((top)) #("i4508"))
                                         #(ribcage () () ())
                                         #(ribcage
                                           #(x y)
                                           #((top) (top))
                                           #("i4493" "i4494"))
                                         #(ribcage
                                           (emit quasivector
                                                 quasilist*
                                                 quasiappend
                                                 quasicons
                                                 vquasi
                                                 quasi)
                                           ((top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top))
                                           ("i4401"
                                            "i4399"
                                            "i4397"
                                            "i4395"
                                            "i4393"
                                            "i4391"
                                            "i4389")))
                                        (hygiene guile))
                                     (append #{p 4518}# (list #{y 4519}#))))
                             #{tmp 4515}#)
                           (syntax-violation
                             #f
                             "source expression failed to match any pattern"
                             #{tmp 4514}#)))))))))))
       (#{quasilist* 4398}#
         (lambda (#{x 4521}# #{y 4522}#)
           (letrec*
             ((#{f 4527}#
                (lambda (#{x 4528}#)
                  (if (null? #{x 4528}#)
                    #{y 4522}#
                    (#{quasicons 4394}#
                      (car #{x 4528}#)
                      (#{f 4527}# (cdr #{x 4528}#)))))))
             (begin (#{f 4527}# #{x 4521}#)))))
       (#{quasivector 4400}#
         (lambda (#{x 4529}#)
           (let ((#{tmp 4531}# #{x 4529}#))
             (let ((#{tmp 4532}#
                     ($sc-dispatch
                       #{tmp 4531}#
                       '(#(atom "quote") each-any))))
               (if #{tmp 4532}#
                 (@apply
                   (lambda (#{x 4534}#)
                     (list '#(syntax-object
                              "quote"
                              ((top)
                               #(ribcage #(x) #((top)) #("i4533"))
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("i4530"))
                               #(ribcage
                                 (emit quasivector
                                       quasilist*
                                       quasiappend
                                       quasicons
                                       vquasi
                                       quasi)
                                 ((top) (top) (top) (top) (top) (top) (top))
                                 ("i4401"
                                  "i4399"
                                  "i4397"
                                  "i4395"
                                  "i4393"
                                  "i4391"
                                  "i4389")))
                              (hygiene guile))
                           (list->vector #{x 4534}#)))
                   #{tmp 4532}#)
                 (let ((#{_ 4537}# #{tmp 4531}#))
                   (letrec*
                     ((#{f 4541}#
                        (lambda (#{y 4542}# #{k 4543}#)
                          (let ((#{tmp 4554}# #{y 4542}#))
                            (let ((#{tmp 4555}#
                                    ($sc-dispatch
                                      #{tmp 4554}#
                                      '(#(atom "quote") each-any))))
                              (if #{tmp 4555}#
                                (@apply
                                  (lambda (#{y 4557}#)
                                    (#{k 4543}#
                                      (map (lambda (#{tmp 4558}#)
                                             (list '#(syntax-object
                                                      "quote"
                                                      ((top)
                                                       #(ribcage
                                                         #(y)
                                                         #((top))
                                                         #("i4556"))
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(f y k)
                                                         #((top) (top) (top))
                                                         #("i4538"
                                                           "i4539"
                                                           "i4540"))
                                                       #(ribcage
                                                         #(_)
                                                         #((top))
                                                         #("i4536"))
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i4530"))
                                                       #(ribcage
                                                         (emit quasivector
                                                               quasilist*
                                                               quasiappend
                                                               quasicons
                                                               vquasi
                                                               quasi)
                                                         ((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                         ("i4401"
                                                          "i4399"
                                                          "i4397"
                                                          "i4395"
                                                          "i4393"
                                                          "i4391"
                                                          "i4389")))
                                                      (hygiene guile))
                                                   #{tmp 4558}#))
                                           #{y 4557}#)))
                                  #{tmp 4555}#)
                                (let ((#{tmp 4559}#
                                        ($sc-dispatch
                                          #{tmp 4554}#
                                          '(#(atom "list") . each-any))))
                                  (if #{tmp 4559}#
                                    (@apply
                                      (lambda (#{y 4561}#)
                                        (#{k 4543}# #{y 4561}#))
                                      #{tmp 4559}#)
                                    (let ((#{tmp 4563}#
                                            ($sc-dispatch
                                              #{tmp 4554}#
                                              '(#(atom "list*")
                                                .
                                                #(each+ any (any) ())))))
                                      (if #{tmp 4563}#
                                        (@apply
                                          (lambda (#{y 4566}# #{z 4567}#)
                                            (#{f 4541}#
                                              #{z 4567}#
                                              (lambda (#{ls 4568}#)
                                                (#{k 4543}#
                                                  (append
                                                    #{y 4566}#
                                                    #{ls 4568}#)))))
                                          #{tmp 4563}#)
                                        (let ((#{else 4572}# #{tmp 4554}#))
                                          (let ((#{tmp 4576}# #{x 4529}#))
                                            (let ((#{ g4573 4578}#
                                                    #{tmp 4576}#))
                                              (list '#(syntax-object
                                                       "list->vector"
                                                       ((top)
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(#{ g4573}#)
                                                          #((m4574 top))
                                                          #("i4577"))
                                                        #(ribcage
                                                          #(else)
                                                          #((top))
                                                          #("i4571"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(f y k)
                                                          #((top) (top) (top))
                                                          #("i4538"
                                                            "i4539"
                                                            "i4540"))
                                                        #(ribcage
                                                          #(_)
                                                          #((top))
                                                          #("i4536"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(x)
                                                          #((top))
                                                          #("i4530"))
                                                        #(ribcage
                                                          (emit quasivector
                                                                quasilist*
                                                                quasiappend
                                                                quasicons
                                                                vquasi
                                                                quasi)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("i4401"
                                                           "i4399"
                                                           "i4397"
                                                           "i4395"
                                                           "i4393"
                                                           "i4391"
                                                           "i4389")))
                                                       (hygiene guile))
                                                    #{ g4573 4578}#))))))))))))))
                     (begin
                       (#{f 4541}#
                         #{x 4529}#
                         (lambda (#{ls 4544}#)
                           (let ((#{tmp 4549}# #{ls 4544}#))
                             (let ((#{tmp 4550}#
                                     ($sc-dispatch #{tmp 4549}# 'each-any)))
                               (if #{tmp 4550}#
                                 (@apply
                                   (lambda (#{ g4546 4552}#)
                                     (cons '#(syntax-object
                                              "vector"
                                              ((top)
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(#{ g4546}#)
                                                 #((m4547 top))
                                                 #("i4551"))
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(ls)
                                                 #((top))
                                                 #("i4545"))
                                               #(ribcage
                                                 #(_)
                                                 #((top))
                                                 #("i4536"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x)
                                                 #((top))
                                                 #("i4530"))
                                               #(ribcage
                                                 (emit quasivector
                                                       quasilist*
                                                       quasiappend
                                                       quasicons
                                                       vquasi
                                                       quasi)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("i4401"
                                                  "i4399"
                                                  "i4397"
                                                  "i4395"
                                                  "i4393"
                                                  "i4391"
                                                  "i4389")))
                                              (hygiene guile))
                                           #{ g4546 4552}#))
                                   #{tmp 4550}#)
                                 (syntax-violation
                                   #f
                                   "source expression failed to match any pattern"
                                   #{tmp 4549}#))))))))))))))
       (#{emit 4402}#
         (lambda (#{x 4579}#)
           (let ((#{tmp 4581}# #{x 4579}#))
             (let ((#{tmp 4582}#
                     ($sc-dispatch
                       #{tmp 4581}#
                       '(#(atom "quote") any))))
               (if #{tmp 4582}#
                 (@apply
                   (lambda (#{x 4584}#)
                     (list '#(syntax-object
                              quote
                              ((top)
                               #(ribcage #(x) #((top)) #("i4583"))
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("i4580"))
                               #(ribcage
                                 (emit quasivector
                                       quasilist*
                                       quasiappend
                                       quasicons
                                       vquasi
                                       quasi)
                                 ((top) (top) (top) (top) (top) (top) (top))
                                 ("i4401"
                                  "i4399"
                                  "i4397"
                                  "i4395"
                                  "i4393"
                                  "i4391"
                                  "i4389")))
                              (hygiene guile))
                           #{x 4584}#))
                   #{tmp 4582}#)
                 (let ((#{tmp 4585}#
                         ($sc-dispatch
                           #{tmp 4581}#
                           '(#(atom "list") . each-any))))
                   (if #{tmp 4585}#
                     (@apply
                       (lambda (#{x 4587}#)
                         (let ((#{tmp 4591}# (map #{emit 4402}# #{x 4587}#)))
                           (let ((#{tmp 4592}#
                                   ($sc-dispatch #{tmp 4591}# 'each-any)))
                             (if #{tmp 4592}#
                               (@apply
                                 (lambda (#{ g4588 4594}#)
                                   (cons '#(syntax-object
                                            list
                                            ((top)
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(#{ g4588}#)
                                               #((m4589 top))
                                               #("i4593"))
                                             #(ribcage
                                               #(x)
                                               #((top))
                                               #("i4586"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x)
                                               #((top))
                                               #("i4580"))
                                             #(ribcage
                                               (emit quasivector
                                                     quasilist*
                                                     quasiappend
                                                     quasicons
                                                     vquasi
                                                     quasi)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("i4401"
                                                "i4399"
                                                "i4397"
                                                "i4395"
                                                "i4393"
                                                "i4391"
                                                "i4389")))
                                            (hygiene guile))
                                         #{ g4588 4594}#))
                                 #{tmp 4592}#)
                               (syntax-violation
                                 #f
                                 "source expression failed to match any pattern"
                                 #{tmp 4591}#)))))
                       #{tmp 4585}#)
                     (let ((#{tmp 4597}#
                             ($sc-dispatch
                               #{tmp 4581}#
                               '(#(atom "list*") . #(each+ any (any) ())))))
                       (if #{tmp 4597}#
                         (@apply
                           (lambda (#{x 4600}# #{y 4601}#)
                             (letrec*
                               ((#{f 4604}#
                                  (lambda (#{x* 4605}#)
                                    (if (null? #{x* 4605}#)
                                      (#{emit 4402}# #{y 4601}#)
                                      (let ((#{tmp 4611}#
                                              (list (#{emit 4402}#
                                                      (car #{x* 4605}#))
                                                    (#{f 4604}#
                                                      (cdr #{x* 4605}#)))))
                                        (let ((#{tmp 4612}#
                                                ($sc-dispatch
                                                  #{tmp 4611}#
                                                  '(any any))))
                                          (if #{tmp 4612}#
                                            (@apply
                                              (lambda (#{ g4608 4615}#
                                                       #{ g4607 4616}#)
                                                (list '#(syntax-object
                                                         cons
                                                         ((top)
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(#{ g4608}#
                                                              #{ g4607}#)
                                                            #((m4609 top)
                                                              (m4609 top))
                                                            #("i4613" "i4614"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(f x*)
                                                            #((top) (top))
                                                            #("i4602" "i4603"))
                                                          #(ribcage
                                                            #(x y)
                                                            #((top) (top))
                                                            #("i4598" "i4599"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(x)
                                                            #((top))
                                                            #("i4580"))
                                                          #(ribcage
                                                            (emit quasivector
                                                                  quasilist*
                                                                  quasiappend
                                                                  quasicons
                                                                  vquasi
                                                                  quasi)
                                                            ((top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                            ("i4401"
                                                             "i4399"
                                                             "i4397"
                                                             "i4395"
                                                             "i4393"
                                                             "i4391"
                                                             "i4389")))
                                                         (hygiene guile))
                                                      #{ g4608 4615}#
                                                      #{ g4607 4616}#))
                                              #{tmp 4612}#)
                                            (syntax-violation
                                              #f
                                              "source expression failed to match any pattern"
                                              #{tmp 4611}#))))))))
                               (begin (#{f 4604}# #{x 4600}#))))
                           #{tmp 4597}#)
                         (let ((#{tmp 4617}#
                                 ($sc-dispatch
                                   #{tmp 4581}#
                                   '(#(atom "append") . each-any))))
                           (if #{tmp 4617}#
                             (@apply
                               (lambda (#{x 4619}#)
                                 (let ((#{tmp 4623}#
                                         (map #{emit 4402}# #{x 4619}#)))
                                   (let ((#{tmp 4624}#
                                           ($sc-dispatch
                                             #{tmp 4623}#
                                             'each-any)))
                                     (if #{tmp 4624}#
                                       (@apply
                                         (lambda (#{ g4620 4626}#)
                                           (cons '#(syntax-object
                                                    append
                                                    ((top)
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(#{ g4620}#)
                                                       #((m4621 top))
                                                       #("i4625"))
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("i4618"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("i4580"))
                                                     #(ribcage
                                                       (emit quasivector
                                                             quasilist*
                                                             quasiappend
                                                             quasicons
                                                             vquasi
                                                             quasi)
                                                       ((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                       ("i4401"
                                                        "i4399"
                                                        "i4397"
                                                        "i4395"
                                                        "i4393"
                                                        "i4391"
                                                        "i4389")))
                                                    (hygiene guile))
                                                 #{ g4620 4626}#))
                                         #{tmp 4624}#)
                                       (syntax-violation
                                         #f
                                         "source expression failed to match any pattern"
                                         #{tmp 4623}#)))))
                               #{tmp 4617}#)
                             (let ((#{tmp 4629}#
                                     ($sc-dispatch
                                       #{tmp 4581}#
                                       '(#(atom "vector") . each-any))))
                               (if #{tmp 4629}#
                                 (@apply
                                   (lambda (#{x 4631}#)
                                     (let ((#{tmp 4635}#
                                             (map #{emit 4402}# #{x 4631}#)))
                                       (let ((#{tmp 4636}#
                                               ($sc-dispatch
                                                 #{tmp 4635}#
                                                 'each-any)))
                                         (if #{tmp 4636}#
                                           (@apply
                                             (lambda (#{ g4632 4638}#)
                                               (cons '#(syntax-object
                                                        vector
                                                        ((top)
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(#{ g4632}#)
                                                           #((m4633 top))
                                                           #("i4637"))
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("i4630"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("i4580"))
                                                         #(ribcage
                                                           (emit quasivector
                                                                 quasilist*
                                                                 quasiappend
                                                                 quasicons
                                                                 vquasi
                                                                 quasi)
                                                           ((top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top))
                                                           ("i4401"
                                                            "i4399"
                                                            "i4397"
                                                            "i4395"
                                                            "i4393"
                                                            "i4391"
                                                            "i4389")))
                                                        (hygiene guile))
                                                     #{ g4632 4638}#))
                                             #{tmp 4636}#)
                                           (syntax-violation
                                             #f
                                             "source expression failed to match any pattern"
                                             #{tmp 4635}#)))))
                                   #{tmp 4629}#)
                                 (let ((#{tmp 4641}#
                                         ($sc-dispatch
                                           #{tmp 4581}#
                                           '(#(atom "list->vector") any))))
                                   (if #{tmp 4641}#
                                     (@apply
                                       (lambda (#{x 4643}#)
                                         (let ((#{tmp 4647}#
                                                 (#{emit 4402}# #{x 4643}#)))
                                           (let ((#{ g4644 4649}#
                                                   #{tmp 4647}#))
                                             (list '#(syntax-object
                                                      list->vector
                                                      ((top)
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(#{ g4644}#)
                                                         #((m4645 top))
                                                         #("i4648"))
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i4642"))
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i4580"))
                                                       #(ribcage
                                                         (emit quasivector
                                                               quasilist*
                                                               quasiappend
                                                               quasicons
                                                               vquasi
                                                               quasi)
                                                         ((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                         ("i4401"
                                                          "i4399"
                                                          "i4397"
                                                          "i4395"
                                                          "i4393"
                                                          "i4391"
                                                          "i4389")))
                                                      (hygiene guile))
                                                   #{ g4644 4649}#))))
                                       #{tmp 4641}#)
                                     (let ((#{tmp 4650}#
                                             ($sc-dispatch
                                               #{tmp 4581}#
                                               '(#(atom "value") any))))
                                       (if #{tmp 4650}#
                                         (@apply
                                           (lambda (#{x 4652}#) #{x 4652}#)
                                           #{tmp 4650}#)
                                         (syntax-violation
                                           #f
                                           "source expression failed to match any pattern"
                                           #{tmp 4581}#)))))))))))))))))))
      (begin
        (lambda (#{x 4653}#)
          (let ((#{tmp 4655}# #{x 4653}#))
            (let ((#{tmp 4656}#
                    ($sc-dispatch #{tmp 4655}# '(_ any))))
              (if #{tmp 4656}#
                (@apply
                  (lambda (#{e 4658}#)
                    (#{emit 4402}# (#{quasi 4390}# #{e 4658}# 0)))
                  #{tmp 4656}#)
                (syntax-violation
                  #f
                  "source expression failed to match any pattern"
                  #{tmp 4655}#)))))))))

(define include
  (make-syntax-transformer
    'include
    'macro
    (lambda (#{x 4659}#)
      (letrec*
        ((#{read-file 4662}#
           (lambda (#{fn 4663}# #{k 4664}#)
             (begin
               (let ((#{p 4668}# (open-input-file #{fn 4663}#)))
                 (letrec*
                   ((#{f 4672}#
                      (lambda (#{x 4673}# #{result 4674}#)
                        (if (eof-object? #{x 4673}#)
                          (begin
                            (close-input-port #{p 4668}#)
                            (reverse #{result 4674}#))
                          (#{f 4672}#
                            (read #{p 4668}#)
                            (cons (datum->syntax #{k 4664}# #{x 4673}#)
                                  #{result 4674}#))))))
                   (begin (#{f 4672}# (read #{p 4668}#) '()))))))))
        (begin
          (let ((#{tmp 4675}# #{x 4659}#))
            (let ((#{tmp 4676}#
                    ($sc-dispatch #{tmp 4675}# '(any any))))
              (if #{tmp 4676}#
                (@apply
                  (lambda (#{k 4679}# #{filename 4680}#)
                    (begin
                      (let ((#{fn 4682}# (syntax->datum #{filename 4680}#)))
                        (let ((#{tmp 4684}#
                                (#{read-file 4662}#
                                  #{fn 4682}#
                                  #{filename 4680}#)))
                          (let ((#{tmp 4685}#
                                  ($sc-dispatch #{tmp 4684}# 'each-any)))
                            (if #{tmp 4685}#
                              (@apply
                                (lambda (#{exp 4687}#)
                                  (cons '#(syntax-object
                                           begin
                                           ((top)
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(exp)
                                              #((top))
                                              #("i4686"))
                                            #(ribcage () () ())
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(fn)
                                              #((top))
                                              #("i4681"))
                                            #(ribcage
                                              #(k filename)
                                              #((top) (top))
                                              #("i4677" "i4678"))
                                            #(ribcage
                                              (read-file)
                                              ((top))
                                              ("i4661"))
                                            #(ribcage
                                              #(x)
                                              #((top))
                                              #("i4660")))
                                           (hygiene guile))
                                        #{exp 4687}#))
                                #{tmp 4685}#)
                              (syntax-violation
                                #f
                                "source expression failed to match any pattern"
                                #{tmp 4684}#)))))))
                  #{tmp 4676}#)
                (syntax-violation
                  #f
                  "source expression failed to match any pattern"
                  #{tmp 4675}#)))))))))

(define include-from-path
  (make-syntax-transformer
    'include-from-path
    'macro
    (lambda (#{x 4689}#)
      (let ((#{tmp 4691}# #{x 4689}#))
        (let ((#{tmp 4692}#
                ($sc-dispatch #{tmp 4691}# '(any any))))
          (if #{tmp 4692}#
            (@apply
              (lambda (#{k 4695}# #{filename 4696}#)
                (begin
                  (let ((#{fn 4698}# (syntax->datum #{filename 4696}#)))
                    (let ((#{tmp 4700}#
                            (datum->syntax
                              #{filename 4696}#
                              (begin
                                (let ((#{t 4705}#
                                        (%search-load-path #{fn 4698}#)))
                                  (if #{t 4705}#
                                    #{t 4705}#
                                    (syntax-violation
                                      'include-from-path
                                      "file not found in path"
                                      #{x 4689}#
                                      #{filename 4696}#)))))))
                      (let ((#{fn 4702}# #{tmp 4700}#))
                        (list '#(syntax-object
                                 include
                                 ((top)
                                  #(ribcage () () ())
                                  #(ribcage #(fn) #((top)) #("i4701"))
                                  #(ribcage () () ())
                                  #(ribcage () () ())
                                  #(ribcage #(fn) #((top)) #("i4697"))
                                  #(ribcage
                                    #(k filename)
                                    #((top) (top))
                                    #("i4693" "i4694"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("i4690")))
                                 (hygiene guile))
                              #{fn 4702}#))))))
              #{tmp 4692}#)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              #{tmp 4691}#)))))))

(define unquote
  (make-syntax-transformer
    'unquote
    'macro
    (lambda (#{x 4707}#)
      (syntax-violation
        'unquote
        "expression not valid outside of quasiquote"
        #{x 4707}#))))

(define unquote-splicing
  (make-syntax-transformer
    'unquote-splicing
    'macro
    (lambda (#{x 4709}#)
      (syntax-violation
        'unquote-splicing
        "expression not valid outside of quasiquote"
        #{x 4709}#))))

(define case
  (make-syntax-transformer
    'case
    'macro
    (lambda (#{x 4711}#)
      (let ((#{tmp 4713}# #{x 4711}#))
        (let ((#{tmp 4714}#
                ($sc-dispatch
                  #{tmp 4713}#
                  '(_ any any . each-any))))
          (if #{tmp 4714}#
            (@apply
              (lambda (#{e 4718}# #{m1 4719}# #{m2 4720}#)
                (let ((#{tmp 4722}#
                        (letrec*
                          ((#{f 4728}#
                             (lambda (#{clause 4729}# #{clauses 4730}#)
                               (if (null? #{clauses 4730}#)
                                 (let ((#{tmp 4732}# #{clause 4729}#))
                                   (let ((#{tmp 4733}#
                                           ($sc-dispatch
                                             #{tmp 4732}#
                                             '(#(free-id
                                                 #(syntax-object
                                                   else
                                                   ((top)
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(f clause clauses)
                                                      #((top) (top) (top))
                                                      #("i4725"
                                                        "i4726"
                                                        "i4727"))
                                                    #(ribcage
                                                      #(e m1 m2)
                                                      #((top) (top) (top))
                                                      #("i4715"
                                                        "i4716"
                                                        "i4717"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i4712")))
                                                   (hygiene guile)))
                                               any
                                               .
                                               each-any))))
                                     (if #{tmp 4733}#
                                       (@apply
                                         (lambda (#{e1 4736}# #{e2 4737}#)
                                           (cons '#(syntax-object
                                                    begin
                                                    ((top)
                                                     #(ribcage
                                                       #(e1 e2)
                                                       #((top) (top))
                                                       #("i4734" "i4735"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(f clause clauses)
                                                       #((top) (top) (top))
                                                       #("i4725"
                                                         "i4726"
                                                         "i4727"))
                                                     #(ribcage
                                                       #(e m1 m2)
                                                       #((top) (top) (top))
                                                       #("i4715"
                                                         "i4716"
                                                         "i4717"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("i4712")))
                                                    (hygiene guile))
                                                 (cons #{e1 4736}#
                                                       #{e2 4737}#)))
                                         #{tmp 4733}#)
                                       (let ((#{tmp 4739}#
                                               ($sc-dispatch
                                                 #{tmp 4732}#
                                                 '(each-any any . each-any))))
                                         (if #{tmp 4739}#
                                           (@apply
                                             (lambda (#{k 4743}#
                                                      #{e1 4744}#
                                                      #{e2 4745}#)
                                               (list '#(syntax-object
                                                        if
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("i4740"
                                                             "i4741"
                                                             "i4742"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("i4725"
                                                             "i4726"
                                                             "i4727"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("i4715"
                                                             "i4716"
                                                             "i4717"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("i4712")))
                                                        (hygiene guile))
                                                     (list '#(syntax-object
                                                              memv
                                                              ((top)
                                                               #(ribcage
                                                                 #(k e1 e2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i4740"
                                                                   "i4741"
                                                                   "i4742"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(f
                                                                   clause
                                                                   clauses)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i4725"
                                                                   "i4726"
                                                                   "i4727"))
                                                               #(ribcage
                                                                 #(e m1 m2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i4715"
                                                                   "i4716"
                                                                   "i4717"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(x)
                                                                 #((top))
                                                                 #("i4712")))
                                                              (hygiene guile))
                                                           '#(syntax-object
                                                              t
                                                              ((top)
                                                               #(ribcage
                                                                 #(k e1 e2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i4740"
                                                                   "i4741"
                                                                   "i4742"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(f
                                                                   clause
                                                                   clauses)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i4725"
                                                                   "i4726"
                                                                   "i4727"))
                                                               #(ribcage
                                                                 #(e m1 m2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i4715"
                                                                   "i4716"
                                                                   "i4717"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(x)
                                                                 #((top))
                                                                 #("i4712")))
                                                              (hygiene guile))
                                                           (list '#(syntax-object
                                                                    quote
                                                                    ((top)
                                                                     #(ribcage
                                                                       #(k
                                                                         e1
                                                                         e2)
                                                                       #((top)
                                                                         (top)
                                                                         (top))
                                                                       #("i4740"
                                                                         "i4741"
                                                                         "i4742"))
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       #(f
                                                                         clause
                                                                         clauses)
                                                                       #((top)
                                                                         (top)
                                                                         (top))
                                                                       #("i4725"
                                                                         "i4726"
                                                                         "i4727"))
                                                                     #(ribcage
                                                                       #(e
                                                                         m1
                                                                         m2)
                                                                       #((top)
                                                                         (top)
                                                                         (top))
                                                                       #("i4715"
                                                                         "i4716"
                                                                         "i4717"))
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       #(x)
                                                                       #((top))
                                                                       #("i4712")))
                                                                    (hygiene
                                                                      guile))
                                                                 #{k 4743}#))
                                                     (cons '#(syntax-object
                                                              begin
                                                              ((top)
                                                               #(ribcage
                                                                 #(k e1 e2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i4740"
                                                                   "i4741"
                                                                   "i4742"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(f
                                                                   clause
                                                                   clauses)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i4725"
                                                                   "i4726"
                                                                   "i4727"))
                                                               #(ribcage
                                                                 #(e m1 m2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i4715"
                                                                   "i4716"
                                                                   "i4717"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(x)
                                                                 #((top))
                                                                 #("i4712")))
                                                              (hygiene guile))
                                                           (cons #{e1 4744}#
                                                                 #{e2 4745}#))))
                                             #{tmp 4739}#)
                                           (let ((#{_ 4749}# #{tmp 4732}#))
                                             (syntax-violation
                                               'case
                                               "bad clause"
                                               #{x 4711}#
                                               #{clause 4729}#)))))))
                                 (let ((#{tmp 4751}#
                                         (#{f 4728}#
                                           (car #{clauses 4730}#)
                                           (cdr #{clauses 4730}#))))
                                   (let ((#{rest 4753}# #{tmp 4751}#))
                                     (let ((#{tmp 4754}# #{clause 4729}#))
                                       (let ((#{tmp 4755}#
                                               ($sc-dispatch
                                                 #{tmp 4754}#
                                                 '(each-any any . each-any))))
                                         (if #{tmp 4755}#
                                           (@apply
                                             (lambda (#{k 4759}#
                                                      #{e1 4760}#
                                                      #{e2 4761}#)
                                               (list '#(syntax-object
                                                        if
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("i4756"
                                                             "i4757"
                                                             "i4758"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(rest)
                                                           #((top))
                                                           #("i4752"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("i4725"
                                                             "i4726"
                                                             "i4727"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("i4715"
                                                             "i4716"
                                                             "i4717"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("i4712")))
                                                        (hygiene guile))
                                                     (list '#(syntax-object
                                                              memv
                                                              ((top)
                                                               #(ribcage
                                                                 #(k e1 e2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i4756"
                                                                   "i4757"
                                                                   "i4758"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(rest)
                                                                 #((top))
                                                                 #("i4752"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(f
                                                                   clause
                                                                   clauses)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i4725"
                                                                   "i4726"
                                                                   "i4727"))
                                                               #(ribcage
                                                                 #(e m1 m2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i4715"
                                                                   "i4716"
                                                                   "i4717"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(x)
                                                                 #((top))
                                                                 #("i4712")))
                                                              (hygiene guile))
                                                           '#(syntax-object
                                                              t
                                                              ((top)
                                                               #(ribcage
                                                                 #(k e1 e2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i4756"
                                                                   "i4757"
                                                                   "i4758"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(rest)
                                                                 #((top))
                                                                 #("i4752"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(f
                                                                   clause
                                                                   clauses)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i4725"
                                                                   "i4726"
                                                                   "i4727"))
                                                               #(ribcage
                                                                 #(e m1 m2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i4715"
                                                                   "i4716"
                                                                   "i4717"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(x)
                                                                 #((top))
                                                                 #("i4712")))
                                                              (hygiene guile))
                                                           (list '#(syntax-object
                                                                    quote
                                                                    ((top)
                                                                     #(ribcage
                                                                       #(k
                                                                         e1
                                                                         e2)
                                                                       #((top)
                                                                         (top)
                                                                         (top))
                                                                       #("i4756"
                                                                         "i4757"
                                                                         "i4758"))
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       #(rest)
                                                                       #((top))
                                                                       #("i4752"))
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       #(f
                                                                         clause
                                                                         clauses)
                                                                       #((top)
                                                                         (top)
                                                                         (top))
                                                                       #("i4725"
                                                                         "i4726"
                                                                         "i4727"))
                                                                     #(ribcage
                                                                       #(e
                                                                         m1
                                                                         m2)
                                                                       #((top)
                                                                         (top)
                                                                         (top))
                                                                       #("i4715"
                                                                         "i4716"
                                                                         "i4717"))
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       #(x)
                                                                       #((top))
                                                                       #("i4712")))
                                                                    (hygiene
                                                                      guile))
                                                                 #{k 4759}#))
                                                     (cons '#(syntax-object
                                                              begin
                                                              ((top)
                                                               #(ribcage
                                                                 #(k e1 e2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i4756"
                                                                   "i4757"
                                                                   "i4758"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(rest)
                                                                 #((top))
                                                                 #("i4752"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(f
                                                                   clause
                                                                   clauses)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i4725"
                                                                   "i4726"
                                                                   "i4727"))
                                                               #(ribcage
                                                                 #(e m1 m2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i4715"
                                                                   "i4716"
                                                                   "i4717"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(x)
                                                                 #((top))
                                                                 #("i4712")))
                                                              (hygiene guile))
                                                           (cons #{e1 4760}#
                                                                 #{e2 4761}#))
                                                     #{rest 4753}#))
                                             #{tmp 4755}#)
                                           (let ((#{_ 4765}# #{tmp 4754}#))
                                             (syntax-violation
                                               'case
                                               "bad clause"
                                               #{x 4711}#
                                               #{clause 4729}#)))))))))))
                          (begin (#{f 4728}# #{m1 4719}# #{m2 4720}#)))))
                  (let ((#{body 4724}# #{tmp 4722}#))
                    (list '#(syntax-object
                             let
                             ((top)
                              #(ribcage () () ())
                              #(ribcage #(body) #((top)) #("i4723"))
                              #(ribcage
                                #(e m1 m2)
                                #((top) (top) (top))
                                #("i4715" "i4716" "i4717"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i4712")))
                             (hygiene guile))
                          (list (list '#(syntax-object
                                         t
                                         ((top)
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(body)
                                            #((top))
                                            #("i4723"))
                                          #(ribcage
                                            #(e m1 m2)
                                            #((top) (top) (top))
                                            #("i4715" "i4716" "i4717"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i4712")))
                                         (hygiene guile))
                                      #{e 4718}#))
                          #{body 4724}#))))
              #{tmp 4714}#)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              #{tmp 4713}#)))))))

(define make-variable-transformer
  (lambda (#{proc 4766}#)
    (if (procedure? #{proc 4766}#)
      (begin
        (letrec*
          ((#{trans 4769}#
             (lambda (#{x 4770}#) (#{proc 4766}# #{x 4770}#))))
          (begin
            (set-procedure-property!
              #{trans 4769}#
              'variable-transformer
              #t)
            #{trans 4769}#)))
      (error "variable transformer not a procedure"
             #{proc 4766}#))))

(define identifier-syntax
  (make-syntax-transformer
    'identifier-syntax
    'macro
    (lambda (#{x 4772}#)
      (let ((#{tmp 4774}# #{x 4772}#))
        (let ((#{tmp 4775}#
                ($sc-dispatch #{tmp 4774}# '(_ any))))
          (if #{tmp 4775}#
            (@apply
              (lambda (#{e 4777}#)
                (list '#(syntax-object
                         lambda
                         ((top)
                          #(ribcage #(e) #((top)) #("i4776"))
                          #(ribcage () () ())
                          #(ribcage #(x) #((top)) #("i4773")))
                         (hygiene guile))
                      '(#(syntax-object
                          x
                          ((top)
                           #(ribcage #(e) #((top)) #("i4776"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("i4773")))
                          (hygiene guile)))
                      '#((#(syntax-object
                            macro-type
                            ((top)
                             #(ribcage #(e) #((top)) #("i4776"))
                             #(ribcage () () ())
                             #(ribcage #(x) #((top)) #("i4773")))
                            (hygiene guile))
                          .
                          #(syntax-object
                            identifier-syntax
                            ((top)
                             #(ribcage #(e) #((top)) #("i4776"))
                             #(ribcage () () ())
                             #(ribcage #(x) #((top)) #("i4773")))
                            (hygiene guile))))
                      (list '#(syntax-object
                               syntax-case
                               ((top)
                                #(ribcage #(e) #((top)) #("i4776"))
                                #(ribcage () () ())
                                #(ribcage #(x) #((top)) #("i4773")))
                               (hygiene guile))
                            '#(syntax-object
                               x
                               ((top)
                                #(ribcage #(e) #((top)) #("i4776"))
                                #(ribcage () () ())
                                #(ribcage #(x) #((top)) #("i4773")))
                               (hygiene guile))
                            '()
                            (list '#(syntax-object
                                     id
                                     ((top)
                                      #(ribcage #(e) #((top)) #("i4776"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("i4773")))
                                     (hygiene guile))
                                  '(#(syntax-object
                                      identifier?
                                      ((top)
                                       #(ribcage #(e) #((top)) #("i4776"))
                                       #(ribcage () () ())
                                       #(ribcage #(x) #((top)) #("i4773")))
                                      (hygiene guile))
                                    (#(syntax-object
                                       syntax
                                       ((top)
                                        #(ribcage #(e) #((top)) #("i4776"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i4773")))
                                       (hygiene guile))
                                     #(syntax-object
                                       id
                                       ((top)
                                        #(ribcage #(e) #((top)) #("i4776"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i4773")))
                                       (hygiene guile))))
                                  (list '#(syntax-object
                                           syntax
                                           ((top)
                                            #(ribcage #(e) #((top)) #("i4776"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(x)
                                              #((top))
                                              #("i4773")))
                                           (hygiene guile))
                                        #{e 4777}#))
                            (list '(#(syntax-object
                                      _
                                      ((top)
                                       #(ribcage #(e) #((top)) #("i4776"))
                                       #(ribcage () () ())
                                       #(ribcage #(x) #((top)) #("i4773")))
                                      (hygiene guile))
                                    #(syntax-object
                                      x
                                      ((top)
                                       #(ribcage #(e) #((top)) #("i4776"))
                                       #(ribcage () () ())
                                       #(ribcage #(x) #((top)) #("i4773")))
                                      (hygiene guile))
                                    #(syntax-object
                                      ...
                                      ((top)
                                       #(ribcage #(e) #((top)) #("i4776"))
                                       #(ribcage () () ())
                                       #(ribcage #(x) #((top)) #("i4773")))
                                      (hygiene guile)))
                                  (list '#(syntax-object
                                           syntax
                                           ((top)
                                            #(ribcage #(e) #((top)) #("i4776"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(x)
                                              #((top))
                                              #("i4773")))
                                           (hygiene guile))
                                        (cons #{e 4777}#
                                              '(#(syntax-object
                                                  x
                                                  ((top)
                                                   #(ribcage
                                                     #(e)
                                                     #((top))
                                                     #("i4776"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i4773")))
                                                  (hygiene guile))
                                                #(syntax-object
                                                  ...
                                                  ((top)
                                                   #(ribcage
                                                     #(e)
                                                     #((top))
                                                     #("i4776"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i4773")))
                                                  (hygiene guile)))))))))
              #{tmp 4775}#)
            (let ((#{tmp 4778}#
                    ($sc-dispatch
                      #{tmp 4774}#
                      '(_ (any any)
                          ((#(free-id
                              #(syntax-object
                                set!
                                ((top)
                                 #(ribcage () () ())
                                 #(ribcage #(x) #((top)) #("i4773")))
                                (hygiene guile)))
                            any
                            any)
                           any)))))
              (if (if #{tmp 4778}#
                    (@apply
                      (lambda (#{id 4784}#
                               #{exp1 4785}#
                               #{var 4786}#
                               #{val 4787}#
                               #{exp2 4788}#)
                        (if (identifier? #{id 4784}#)
                          (identifier? #{var 4786}#)
                          #f))
                      #{tmp 4778}#)
                    #f)
                (@apply
                  (lambda (#{id 4796}#
                           #{exp1 4797}#
                           #{var 4798}#
                           #{val 4799}#
                           #{exp2 4800}#)
                    (list '#(syntax-object
                             make-variable-transformer
                             ((top)
                              #(ribcage
                                #(id exp1 var val exp2)
                                #((top) (top) (top) (top) (top))
                                #("i4791" "i4792" "i4793" "i4794" "i4795"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i4773")))
                             (hygiene guile))
                          (list '#(syntax-object
                                   lambda
                                   ((top)
                                    #(ribcage
                                      #(id exp1 var val exp2)
                                      #((top) (top) (top) (top) (top))
                                      #("i4791"
                                        "i4792"
                                        "i4793"
                                        "i4794"
                                        "i4795"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("i4773")))
                                   (hygiene guile))
                                '(#(syntax-object
                                    x
                                    ((top)
                                     #(ribcage
                                       #(id exp1 var val exp2)
                                       #((top) (top) (top) (top) (top))
                                       #("i4791"
                                         "i4792"
                                         "i4793"
                                         "i4794"
                                         "i4795"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i4773")))
                                    (hygiene guile)))
                                '#((#(syntax-object
                                      macro-type
                                      ((top)
                                       #(ribcage
                                         #(id exp1 var val exp2)
                                         #((top) (top) (top) (top) (top))
                                         #("i4791"
                                           "i4792"
                                           "i4793"
                                           "i4794"
                                           "i4795"))
                                       #(ribcage () () ())
                                       #(ribcage #(x) #((top)) #("i4773")))
                                      (hygiene guile))
                                    .
                                    #(syntax-object
                                      variable-transformer
                                      ((top)
                                       #(ribcage
                                         #(id exp1 var val exp2)
                                         #((top) (top) (top) (top) (top))
                                         #("i4791"
                                           "i4792"
                                           "i4793"
                                           "i4794"
                                           "i4795"))
                                       #(ribcage () () ())
                                       #(ribcage #(x) #((top)) #("i4773")))
                                      (hygiene guile))))
                                (list '#(syntax-object
                                         syntax-case
                                         ((top)
                                          #(ribcage
                                            #(id exp1 var val exp2)
                                            #((top) (top) (top) (top) (top))
                                            #("i4791"
                                              "i4792"
                                              "i4793"
                                              "i4794"
                                              "i4795"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i4773")))
                                         (hygiene guile))
                                      '#(syntax-object
                                         x
                                         ((top)
                                          #(ribcage
                                            #(id exp1 var val exp2)
                                            #((top) (top) (top) (top) (top))
                                            #("i4791"
                                              "i4792"
                                              "i4793"
                                              "i4794"
                                              "i4795"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i4773")))
                                         (hygiene guile))
                                      '(#(syntax-object
                                          set!
                                          ((top)
                                           #(ribcage
                                             #(id exp1 var val exp2)
                                             #((top) (top) (top) (top) (top))
                                             #("i4791"
                                               "i4792"
                                               "i4793"
                                               "i4794"
                                               "i4795"))
                                           #(ribcage () () ())
                                           #(ribcage #(x) #((top)) #("i4773")))
                                          (hygiene guile)))
                                      (list (list '#(syntax-object
                                                     set!
                                                     ((top)
                                                      #(ribcage
                                                        #(id exp1 var val exp2)
                                                        #((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                        #("i4791"
                                                          "i4792"
                                                          "i4793"
                                                          "i4794"
                                                          "i4795"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(x)
                                                        #((top))
                                                        #("i4773")))
                                                     (hygiene guile))
                                                  #{var 4798}#
                                                  #{val 4799}#)
                                            (list '#(syntax-object
                                                     syntax
                                                     ((top)
                                                      #(ribcage
                                                        #(id exp1 var val exp2)
                                                        #((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                        #("i4791"
                                                          "i4792"
                                                          "i4793"
                                                          "i4794"
                                                          "i4795"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(x)
                                                        #((top))
                                                        #("i4773")))
                                                     (hygiene guile))
                                                  #{exp2 4800}#))
                                      (list (cons #{id 4796}#
                                                  '(#(syntax-object
                                                      x
                                                      ((top)
                                                       #(ribcage
                                                         #(id
                                                           exp1
                                                           var
                                                           val
                                                           exp2)
                                                         #((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                         #("i4791"
                                                           "i4792"
                                                           "i4793"
                                                           "i4794"
                                                           "i4795"))
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i4773")))
                                                      (hygiene guile))
                                                    #(syntax-object
                                                      ...
                                                      ((top)
                                                       #(ribcage
                                                         #(id
                                                           exp1
                                                           var
                                                           val
                                                           exp2)
                                                         #((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                         #("i4791"
                                                           "i4792"
                                                           "i4793"
                                                           "i4794"
                                                           "i4795"))
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i4773")))
                                                      (hygiene guile))))
                                            (list '#(syntax-object
                                                     syntax
                                                     ((top)
                                                      #(ribcage
                                                        #(id exp1 var val exp2)
                                                        #((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                        #("i4791"
                                                          "i4792"
                                                          "i4793"
                                                          "i4794"
                                                          "i4795"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(x)
                                                        #((top))
                                                        #("i4773")))
                                                     (hygiene guile))
                                                  (cons #{exp1 4797}#
                                                        '(#(syntax-object
                                                            x
                                                            ((top)
                                                             #(ribcage
                                                               #(id
                                                                 exp1
                                                                 var
                                                                 val
                                                                 exp2)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i4791"
                                                                 "i4792"
                                                                 "i4793"
                                                                 "i4794"
                                                                 "i4795"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("i4773")))
                                                            (hygiene guile))
                                                          #(syntax-object
                                                            ...
                                                            ((top)
                                                             #(ribcage
                                                               #(id
                                                                 exp1
                                                                 var
                                                                 val
                                                                 exp2)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i4791"
                                                                 "i4792"
                                                                 "i4793"
                                                                 "i4794"
                                                                 "i4795"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("i4773")))
                                                            (hygiene
                                                              guile))))))
                                      (list #{id 4796}#
                                            (list '#(syntax-object
                                                     identifier?
                                                     ((top)
                                                      #(ribcage
                                                        #(id exp1 var val exp2)
                                                        #((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                        #("i4791"
                                                          "i4792"
                                                          "i4793"
                                                          "i4794"
                                                          "i4795"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(x)
                                                        #((top))
                                                        #("i4773")))
                                                     (hygiene guile))
                                                  (list '#(syntax-object
                                                           syntax
                                                           ((top)
                                                            #(ribcage
                                                              #(id
                                                                exp1
                                                                var
                                                                val
                                                                exp2)
                                                              #((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                              #("i4791"
                                                                "i4792"
                                                                "i4793"
                                                                "i4794"
                                                                "i4795"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(x)
                                                              #((top))
                                                              #("i4773")))
                                                           (hygiene guile))
                                                        #{id 4796}#))
                                            (list '#(syntax-object
                                                     syntax
                                                     ((top)
                                                      #(ribcage
                                                        #(id exp1 var val exp2)
                                                        #((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                        #("i4791"
                                                          "i4792"
                                                          "i4793"
                                                          "i4794"
                                                          "i4795"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(x)
                                                        #((top))
                                                        #("i4773")))
                                                     (hygiene guile))
                                                  #{exp1 4797}#))))))
                  #{tmp 4778}#)
                (syntax-violation
                  #f
                  "source expression failed to match any pattern"
                  #{tmp 4774}#)))))))))

(define define*
  (make-syntax-transformer
    'define*
    'macro
    (lambda (#{x 4801}#)
      (let ((#{tmp 4803}# #{x 4801}#))
        (let ((#{tmp 4804}#
                ($sc-dispatch
                  #{tmp 4803}#
                  '(_ (any . any) any . each-any))))
          (if #{tmp 4804}#
            (@apply
              (lambda (#{id 4809}#
                       #{args 4810}#
                       #{b0 4811}#
                       #{b1 4812}#)
                (list '#(syntax-object
                         define
                         ((top)
                          #(ribcage
                            #(id args b0 b1)
                            #((top) (top) (top) (top))
                            #("i4805" "i4806" "i4807" "i4808"))
                          #(ribcage () () ())
                          #(ribcage #(x) #((top)) #("i4802")))
                         (hygiene guile))
                      #{id 4809}#
                      (cons '#(syntax-object
                               lambda*
                               ((top)
                                #(ribcage
                                  #(id args b0 b1)
                                  #((top) (top) (top) (top))
                                  #("i4805" "i4806" "i4807" "i4808"))
                                #(ribcage () () ())
                                #(ribcage #(x) #((top)) #("i4802")))
                               (hygiene guile))
                            (cons #{args 4810}#
                                  (cons #{b0 4811}# #{b1 4812}#)))))
              #{tmp 4804}#)
            (let ((#{tmp 4814}#
                    ($sc-dispatch #{tmp 4803}# '(_ any any))))
              (if (if #{tmp 4814}#
                    (@apply
                      (lambda (#{id 4817}# #{val 4818}#)
                        (identifier?
                          '#(syntax-object
                             x
                             ((top)
                              #(ribcage
                                #(id val)
                                #((top) (top))
                                #("i4815" "i4816"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i4802")))
                             (hygiene guile))))
                      #{tmp 4814}#)
                    #f)
                (@apply
                  (lambda (#{id 4821}# #{val 4822}#)
                    (list '#(syntax-object
                             define
                             ((top)
                              #(ribcage
                                #(id val)
                                #((top) (top))
                                #("i4819" "i4820"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i4802")))
                             (hygiene guile))
                          #{id 4821}#
                          #{val 4822}#))
                  #{tmp 4814}#)
                (syntax-violation
                  #f
                  "source expression failed to match any pattern"
                  #{tmp 4803}#)))))))))

