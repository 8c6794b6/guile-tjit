(eval-when (compile) (set-current-module (resolve-module (quote (guile)))))
(if #f #f)

(letrec ((#{and-map*\ 2064}#
           (lambda (#{f\ 2178}# #{first\ 2179}# . #{rest\ 2180}#)
             (let ((#{t\ 2186}# (null? #{first\ 2179}#)))
               (if #{t\ 2186}#
                 #{t\ 2186}#
                 (if (null? #{rest\ 2180}#)
                   (letrec ((#{andmap\ 2190}#
                              (lambda (#{first\ 2191}#)
                                (let ((#{x\ 2194}# (car #{first\ 2191}#))
                                      (#{first\ 2195}# (cdr #{first\ 2191}#)))
                                  (if (null? #{first\ 2195}#)
                                    (#{f\ 2178}# #{x\ 2194}#)
                                    (if (#{f\ 2178}# #{x\ 2194}#)
                                      (#{andmap\ 2190}# #{first\ 2195}#)
                                      #f))))))
                     (#{andmap\ 2190}# #{first\ 2179}#))
                   (letrec ((#{andmap\ 2201}#
                              (lambda (#{first\ 2202}# #{rest\ 2203}#)
                                (let ((#{x\ 2208}# (car #{first\ 2202}#))
                                      (#{xr\ 2209}# (map car #{rest\ 2203}#))
                                      (#{first\ 2210}# (cdr #{first\ 2202}#))
                                      (#{rest\ 2211}#
                                        (map cdr #{rest\ 2203}#)))
                                  (if (null? #{first\ 2210}#)
                                    (apply #{f\ 2178}#
                                           (cons #{x\ 2208}# #{xr\ 2209}#))
                                    (if (apply #{f\ 2178}#
                                               (cons #{x\ 2208}# #{xr\ 2209}#))
                                      (#{andmap\ 2201}#
                                        #{first\ 2210}#
                                        #{rest\ 2211}#)
                                      #f))))))
                     (#{andmap\ 2201}# #{first\ 2179}# #{rest\ 2180}#))))))))
  (letrec ((#{lambda-var-list\ 2468}#
             (lambda (#{vars\ 2683}#)
               (letrec ((#{lvl\ 2689}#
                          (lambda (#{vars\ 2690}# #{ls\ 2691}# #{w\ 2692}#)
                            (if (pair? #{vars\ 2690}#)
                              (#{lvl\ 2689}#
                                (cdr #{vars\ 2690}#)
                                (cons (#{wrap\ 2422}#
                                        (car #{vars\ 2690}#)
                                        #{w\ 2692}#
                                        #f)
                                      #{ls\ 2691}#)
                                #{w\ 2692}#)
                              (if (#{id?\ 2353}# #{vars\ 2690}#)
                                (cons (#{wrap\ 2422}#
                                        #{vars\ 2690}#
                                        #{w\ 2692}#
                                        #f)
                                      #{ls\ 2691}#)
                                (if (null? #{vars\ 2690}#)
                                  #{ls\ 2691}#
                                  (if (#{syntax-object?\ 2317}# #{vars\ 2690}#)
                                    (#{lvl\ 2689}#
                                      (#{syntax-object-expression\ 2319}#
                                        #{vars\ 2690}#)
                                      #{ls\ 2691}#
                                      (#{join-wraps\ 2404}#
                                        #{w\ 2692}#
                                        (#{syntax-object-wrap\ 2321}#
                                          #{vars\ 2690}#)))
                                    (cons #{vars\ 2690}# #{ls\ 2691}#))))))))
                 (#{lvl\ 2689}#
                   #{vars\ 2683}#
                   '()
                   '(())))))
           (#{gen-var\ 2466}#
             (lambda (#{id\ 2703}#)
               (let ((#{id\ 2706}#
                       (if (#{syntax-object?\ 2317}# #{id\ 2703}#)
                         (#{syntax-object-expression\ 2319}# #{id\ 2703}#)
                         #{id\ 2703}#)))
                 (gensym
                   (string-append (symbol->string #{id\ 2706}#) " ")))))
           (#{strip\ 2464}#
             (lambda (#{x\ 2708}# #{w\ 2709}#)
               (if (memq 'top
                         (#{wrap-marks\ 2360}# #{w\ 2709}#))
                 #{x\ 2708}#
                 (letrec ((#{f\ 2715}#
                            (lambda (#{x\ 2716}#)
                              (if (#{syntax-object?\ 2317}# #{x\ 2716}#)
                                (#{strip\ 2464}#
                                  (#{syntax-object-expression\ 2319}#
                                    #{x\ 2716}#)
                                  (#{syntax-object-wrap\ 2321}# #{x\ 2716}#))
                                (if (pair? #{x\ 2716}#)
                                  (let ((#{a\ 2723}#
                                          (#{f\ 2715}# (car #{x\ 2716}#)))
                                        (#{d\ 2724}#
                                          (#{f\ 2715}# (cdr #{x\ 2716}#))))
                                    (if (if (eq? #{a\ 2723}# (car #{x\ 2716}#))
                                          (eq? #{d\ 2724}# (cdr #{x\ 2716}#))
                                          #f)
                                      #{x\ 2716}#
                                      (cons #{a\ 2723}# #{d\ 2724}#)))
                                  (if (vector? #{x\ 2716}#)
                                    (let ((#{old\ 2730}#
                                            (vector->list #{x\ 2716}#)))
                                      (let ((#{new\ 2732}#
                                              (map #{f\ 2715}# #{old\ 2730}#)))
                                        (if (#{and-map*\ 2064}#
                                              eq?
                                              #{old\ 2730}#
                                              #{new\ 2732}#)
                                          #{x\ 2716}#
                                          (list->vector #{new\ 2732}#))))
                                    #{x\ 2716}#))))))
                   (#{f\ 2715}# #{x\ 2708}#)))))
           (#{chi-lambda-case\ 2462}#
             (lambda (#{e\ 2734}#
                      #{r\ 2735}#
                      #{w\ 2736}#
                      #{s\ 2737}#
                      #{mod\ 2738}#
                      #{get-formals\ 2739}#
                      #{clauses\ 2740}#)
               (letrec ((#{expand-body\ 2755}#
                          (lambda (#{req\ 2756}#
                                   #{opt\ 2757}#
                                   #{rest\ 2758}#
                                   #{kw\ 2759}#
                                   #{body\ 2760}#
                                   #{vars\ 2761}#
                                   #{r*\ 2762}#
                                   #{w*\ 2763}#
                                   #{inits\ 2764}#
                                   #{meta\ 2765}#)
                            ((lambda (#{tmp\ 2776}#)
                               ((lambda (#{tmp\ 2777}#)
                                  (if (if #{tmp\ 2777}#
                                        (apply (lambda (#{docstring\ 2781}#
                                                        #{e1\ 2782}#
                                                        #{e2\ 2783}#)
                                                 (string?
                                                   (syntax->datum
                                                     #{docstring\ 2781}#)))
                                               #{tmp\ 2777}#)
                                        #f)
                                    (apply (lambda (#{docstring\ 2787}#
                                                    #{e1\ 2788}#
                                                    #{e2\ 2789}#)
                                             (#{expand-body\ 2755}#
                                               #{req\ 2756}#
                                               #{opt\ 2757}#
                                               #{rest\ 2758}#
                                               #{kw\ 2759}#
                                               (cons #{e1\ 2788}# #{e2\ 2789}#)
                                               #{vars\ 2761}#
                                               #{r*\ 2762}#
                                               #{w*\ 2763}#
                                               #{inits\ 2764}#
                                               (append
                                                 #{meta\ 2765}#
                                                 (list (cons 'documentation
                                                             (syntax->datum
                                                               #{docstring\ 2787}#))))))
                                           #{tmp\ 2777}#)
                                    ((lambda (#{tmp\ 2792}#)
                                       (if #{tmp\ 2792}#
                                         (apply (lambda (#{k\ 2797}#
                                                         #{v\ 2798}#
                                                         #{e1\ 2799}#
                                                         #{e2\ 2800}#)
                                                  (#{expand-body\ 2755}#
                                                    #{req\ 2756}#
                                                    #{opt\ 2757}#
                                                    #{rest\ 2758}#
                                                    #{kw\ 2759}#
                                                    (cons #{e1\ 2799}#
                                                          #{e2\ 2800}#)
                                                    #{vars\ 2761}#
                                                    #{r*\ 2762}#
                                                    #{w*\ 2763}#
                                                    #{inits\ 2764}#
                                                    (append
                                                      #{meta\ 2765}#
                                                      (syntax->datum
                                                        (map cons
                                                             #{k\ 2797}#
                                                             #{v\ 2798}#)))))
                                                #{tmp\ 2792}#)
                                         ((lambda (#{tmp\ 2804}#)
                                            (if #{tmp\ 2804}#
                                              (apply (lambda (#{e1\ 2807}#
                                                              #{e2\ 2808}#)
                                                       (values
                                                         #{meta\ 2765}#
                                                         #{req\ 2756}#
                                                         #{opt\ 2757}#
                                                         #{rest\ 2758}#
                                                         #{kw\ 2759}#
                                                         #{inits\ 2764}#
                                                         #{vars\ 2761}#
                                                         (#{chi-body\ 2446}#
                                                           (cons #{e1\ 2807}#
                                                                 #{e2\ 2808}#)
                                                           (#{source-wrap\ 2424}#
                                                             #{e\ 2734}#
                                                             #{w\ 2736}#
                                                             #{s\ 2737}#
                                                             #{mod\ 2738}#)
                                                           #{r*\ 2762}#
                                                           #{w*\ 2763}#
                                                           #{mod\ 2738}#)))
                                                     #{tmp\ 2804}#)
                                              (syntax-violation
                                                #f
                                                "source expression failed to match any pattern"
                                                #{tmp\ 2776}#)))
                                          ($sc-dispatch
                                            #{tmp\ 2776}#
                                            '(any . each-any)))))
                                     ($sc-dispatch
                                       #{tmp\ 2776}#
                                       '(#(vector #(each (any . any)))
                                         any
                                         .
                                         each-any)))))
                                ($sc-dispatch
                                  #{tmp\ 2776}#
                                  '(any any . each-any))))
                             #{body\ 2760}#)))
                        (#{expand-kw\ 2753}#
                          (lambda (#{req\ 2810}#
                                   #{opt\ 2811}#
                                   #{rest\ 2812}#
                                   #{kw\ 2813}#
                                   #{body\ 2814}#
                                   #{vars\ 2815}#
                                   #{r*\ 2816}#
                                   #{w*\ 2817}#
                                   #{aok\ 2818}#
                                   #{out\ 2819}#
                                   #{inits\ 2820}#)
                            (if (pair? #{kw\ 2813}#)
                              ((lambda (#{tmp\ 2834}#)
                                 ((lambda (#{tmp\ 2835}#)
                                    (if #{tmp\ 2835}#
                                      (apply (lambda (#{k\ 2839}#
                                                      #{id\ 2840}#
                                                      #{i\ 2841}#)
                                               (let ((#{v\ 2844}#
                                                       (#{gen-var\ 2466}#
                                                         #{id\ 2840}#)))
                                                 (let ((#{l\ 2846}#
                                                         (#{gen-labels\ 2371}#
                                                           (list #{v\ 2844}#))))
                                                   (let ((#{r**\ 2848}#
                                                           (#{extend-var-env\ 2343}#
                                                             #{l\ 2846}#
                                                             (list #{v\ 2844}#)
                                                             #{r*\ 2816}#)))
                                                     (let ((#{w**\ 2850}#
                                                             (#{make-binding-wrap\ 2400}#
                                                               (list #{id\ 2840}#)
                                                               #{l\ 2846}#
                                                               #{w*\ 2817}#)))
                                                       (#{expand-kw\ 2753}#
                                                         #{req\ 2810}#
                                                         #{opt\ 2811}#
                                                         #{rest\ 2812}#
                                                         (cdr #{kw\ 2813}#)
                                                         #{body\ 2814}#
                                                         (cons #{v\ 2844}#
                                                               #{vars\ 2815}#)
                                                         #{r**\ 2848}#
                                                         #{w**\ 2850}#
                                                         #{aok\ 2818}#
                                                         (cons (list (syntax->datum
                                                                       #{k\ 2839}#)
                                                                     (syntax->datum
                                                                       #{id\ 2840}#)
                                                                     #{v\ 2844}#)
                                                               #{out\ 2819}#)
                                                         (cons (#{chi\ 2438}#
                                                                 #{i\ 2841}#
                                                                 #{r*\ 2816}#
                                                                 #{w*\ 2817}#
                                                                 #{mod\ 2738}#)
                                                               #{inits\ 2820}#)))))))
                                             #{tmp\ 2835}#)
                                      (syntax-violation
                                        #f
                                        "source expression failed to match any pattern"
                                        #{tmp\ 2834}#)))
                                  ($sc-dispatch
                                    #{tmp\ 2834}#
                                    '(any any any))))
                               (car #{kw\ 2813}#))
                              (#{expand-body\ 2755}#
                                #{req\ 2810}#
                                #{opt\ 2811}#
                                #{rest\ 2812}#
                                (if (let ((#{t\ 2854}# #{aok\ 2818}#))
                                      (if #{t\ 2854}#
                                        #{t\ 2854}#
                                        (pair? #{out\ 2819}#)))
                                  (cons #{aok\ 2818}# (reverse #{out\ 2819}#))
                                  #f)
                                #{body\ 2814}#
                                (reverse #{vars\ 2815}#)
                                #{r*\ 2816}#
                                #{w*\ 2817}#
                                (reverse #{inits\ 2820}#)
                                '()))))
                        (#{expand-opt\ 2751}#
                          (lambda (#{req\ 2856}#
                                   #{opt\ 2857}#
                                   #{rest\ 2858}#
                                   #{kw\ 2859}#
                                   #{body\ 2860}#
                                   #{vars\ 2861}#
                                   #{r*\ 2862}#
                                   #{w*\ 2863}#
                                   #{out\ 2864}#
                                   #{inits\ 2865}#)
                            (if (pair? #{opt\ 2857}#)
                              ((lambda (#{tmp\ 2878}#)
                                 ((lambda (#{tmp\ 2879}#)
                                    (if #{tmp\ 2879}#
                                      (apply (lambda (#{id\ 2882}# #{i\ 2883}#)
                                               (let ((#{v\ 2886}#
                                                       (#{gen-var\ 2466}#
                                                         #{id\ 2882}#)))
                                                 (let ((#{l\ 2888}#
                                                         (#{gen-labels\ 2371}#
                                                           (list #{v\ 2886}#))))
                                                   (let ((#{r**\ 2890}#
                                                           (#{extend-var-env\ 2343}#
                                                             #{l\ 2888}#
                                                             (list #{v\ 2886}#)
                                                             #{r*\ 2862}#)))
                                                     (let ((#{w**\ 2892}#
                                                             (#{make-binding-wrap\ 2400}#
                                                               (list #{id\ 2882}#)
                                                               #{l\ 2888}#
                                                               #{w*\ 2863}#)))
                                                       (#{expand-opt\ 2751}#
                                                         #{req\ 2856}#
                                                         (cdr #{opt\ 2857}#)
                                                         #{rest\ 2858}#
                                                         #{kw\ 2859}#
                                                         #{body\ 2860}#
                                                         (cons #{v\ 2886}#
                                                               #{vars\ 2861}#)
                                                         #{r**\ 2890}#
                                                         #{w**\ 2892}#
                                                         (cons (syntax->datum
                                                                 #{id\ 2882}#)
                                                               #{out\ 2864}#)
                                                         (cons (#{chi\ 2438}#
                                                                 #{i\ 2883}#
                                                                 #{r*\ 2862}#
                                                                 #{w*\ 2863}#
                                                                 #{mod\ 2738}#)
                                                               #{inits\ 2865}#)))))))
                                             #{tmp\ 2879}#)
                                      (syntax-violation
                                        #f
                                        "source expression failed to match any pattern"
                                        #{tmp\ 2878}#)))
                                  ($sc-dispatch
                                    #{tmp\ 2878}#
                                    '(any any))))
                               (car #{opt\ 2857}#))
                              (if #{rest\ 2858}#
                                (let ((#{v\ 2897}#
                                        (#{gen-var\ 2466}# #{rest\ 2858}#)))
                                  (let ((#{l\ 2899}#
                                          (#{gen-labels\ 2371}#
                                            (list #{v\ 2897}#))))
                                    (let ((#{r*\ 2901}#
                                            (#{extend-var-env\ 2343}#
                                              #{l\ 2899}#
                                              (list #{v\ 2897}#)
                                              #{r*\ 2862}#)))
                                      (let ((#{w*\ 2903}#
                                              (#{make-binding-wrap\ 2400}#
                                                (list #{rest\ 2858}#)
                                                #{l\ 2899}#
                                                #{w*\ 2863}#)))
                                        (#{expand-kw\ 2753}#
                                          #{req\ 2856}#
                                          (if (pair? #{out\ 2864}#)
                                            (reverse #{out\ 2864}#)
                                            #f)
                                          (syntax->datum #{rest\ 2858}#)
                                          (if (pair? #{kw\ 2859}#)
                                            (cdr #{kw\ 2859}#)
                                            #{kw\ 2859}#)
                                          #{body\ 2860}#
                                          (cons #{v\ 2897}# #{vars\ 2861}#)
                                          #{r*\ 2901}#
                                          #{w*\ 2903}#
                                          (if (pair? #{kw\ 2859}#)
                                            (car #{kw\ 2859}#)
                                            #f)
                                          '()
                                          #{inits\ 2865}#)))))
                                (#{expand-kw\ 2753}#
                                  #{req\ 2856}#
                                  (if (pair? #{out\ 2864}#)
                                    (reverse #{out\ 2864}#)
                                    #f)
                                  #f
                                  (if (pair? #{kw\ 2859}#)
                                    (cdr #{kw\ 2859}#)
                                    #{kw\ 2859}#)
                                  #{body\ 2860}#
                                  #{vars\ 2861}#
                                  #{r*\ 2862}#
                                  #{w*\ 2863}#
                                  (if (pair? #{kw\ 2859}#)
                                    (car #{kw\ 2859}#)
                                    #f)
                                  '()
                                  #{inits\ 2865}#)))))
                        (#{expand-req\ 2749}#
                          (lambda (#{req\ 2905}#
                                   #{opt\ 2906}#
                                   #{rest\ 2907}#
                                   #{kw\ 2908}#
                                   #{body\ 2909}#)
                            (let ((#{vars\ 2917}#
                                    (map #{gen-var\ 2466}# #{req\ 2905}#))
                                  (#{labels\ 2918}#
                                    (#{gen-labels\ 2371}# #{req\ 2905}#)))
                              (let ((#{r*\ 2921}#
                                      (#{extend-var-env\ 2343}#
                                        #{labels\ 2918}#
                                        #{vars\ 2917}#
                                        #{r\ 2735}#))
                                    (#{w*\ 2922}#
                                      (#{make-binding-wrap\ 2400}#
                                        #{req\ 2905}#
                                        #{labels\ 2918}#
                                        #{w\ 2736}#)))
                                (#{expand-opt\ 2751}#
                                  (map syntax->datum #{req\ 2905}#)
                                  #{opt\ 2906}#
                                  #{rest\ 2907}#
                                  #{kw\ 2908}#
                                  #{body\ 2909}#
                                  (reverse #{vars\ 2917}#)
                                  #{r*\ 2921}#
                                  #{w*\ 2922}#
                                  '()
                                  '()))))))
                 ((lambda (#{tmp\ 2923}#)
                    ((lambda (#{tmp\ 2924}#)
                       (if #{tmp\ 2924}#
                         (apply (lambda () (values (quote ()) #f))
                                #{tmp\ 2924}#)
                         ((lambda (#{tmp\ 2925}#)
                            (if #{tmp\ 2925}#
                              (apply (lambda (#{args\ 2932}#
                                              #{e1\ 2933}#
                                              #{e2\ 2934}#
                                              #{args*\ 2935}#
                                              #{e1*\ 2936}#
                                              #{e2*\ 2937}#)
                                       (call-with-values
                                         (lambda ()
                                           (#{get-formals\ 2739}#
                                             #{args\ 2932}#))
                                         (lambda (#{req\ 2938}#
                                                  #{opt\ 2939}#
                                                  #{rest\ 2940}#
                                                  #{kw\ 2941}#)
                                           (call-with-values
                                             (lambda ()
                                               (#{expand-req\ 2749}#
                                                 #{req\ 2938}#
                                                 #{opt\ 2939}#
                                                 #{rest\ 2940}#
                                                 #{kw\ 2941}#
                                                 (cons #{e1\ 2933}#
                                                       #{e2\ 2934}#)))
                                             (lambda (#{meta\ 2947}#
                                                      #{req\ 2948}#
                                                      #{opt\ 2949}#
                                                      #{rest\ 2950}#
                                                      #{kw\ 2951}#
                                                      #{inits\ 2952}#
                                                      #{vars\ 2953}#
                                                      #{body\ 2954}#)
                                               (call-with-values
                                                 (lambda ()
                                                   (#{chi-lambda-case\ 2462}#
                                                     #{e\ 2734}#
                                                     #{r\ 2735}#
                                                     #{w\ 2736}#
                                                     #{s\ 2737}#
                                                     #{mod\ 2738}#
                                                     #{get-formals\ 2739}#
                                                     (map (lambda (#{tmp\ 2965}#
                                                                   #{tmp\ 2964}#
                                                                   #{tmp\ 2963}#)
                                                            (cons #{tmp\ 2963}#
                                                                  (cons #{tmp\ 2964}#
                                                                        #{tmp\ 2965}#)))
                                                          #{e2*\ 2937}#
                                                          #{e1*\ 2936}#
                                                          #{args*\ 2935}#)))
                                                 (lambda (#{meta*\ 2967}#
                                                          #{else*\ 2968}#)
                                                   (values
                                                     (append
                                                       #{meta\ 2947}#
                                                       #{meta*\ 2967}#)
                                                     (#{build-lambda-case\ 2299}#
                                                       #{s\ 2737}#
                                                       #{req\ 2948}#
                                                       #{opt\ 2949}#
                                                       #{rest\ 2950}#
                                                       #{kw\ 2951}#
                                                       #{inits\ 2952}#
                                                       #{vars\ 2953}#
                                                       #{body\ 2954}#
                                                       #{else*\ 2968}#)))))))))
                                     #{tmp\ 2925}#)
                              (syntax-violation
                                #f
                                "source expression failed to match any pattern"
                                #{tmp\ 2923}#)))
                          ($sc-dispatch
                            #{tmp\ 2923}#
                            '((any any . each-any)
                              .
                              #(each (any any . each-any)))))))
                     ($sc-dispatch #{tmp\ 2923}# (quote ()))))
                  #{clauses\ 2740}#))))
           (#{lambda*-formals\ 2460}#
             (lambda (#{orig-args\ 2971}#)
               (letrec ((#{check\ 2982}#
                          (lambda (#{req\ 2983}#
                                   #{opt\ 2984}#
                                   #{rest\ 2985}#
                                   #{kw\ 2986}#)
                            (if (#{distinct-bound-ids?\ 2418}#
                                  (append
                                    #{req\ 2983}#
                                    (map car #{opt\ 2984}#)
                                    (if #{rest\ 2985}#
                                      (list #{rest\ 2985}#)
                                      '())
                                    (if (pair? #{kw\ 2986}#)
                                      (map cadr (cdr #{kw\ 2986}#))
                                      '())))
                              (values
                                #{req\ 2983}#
                                #{opt\ 2984}#
                                #{rest\ 2985}#
                                #{kw\ 2986}#)
                              (syntax-violation
                                'lambda*
                                "duplicate identifier in argument list"
                                #{orig-args\ 2971}#))))
                        (#{rest\ 2980}#
                          (lambda (#{args\ 2994}#
                                   #{req\ 2995}#
                                   #{opt\ 2996}#
                                   #{kw\ 2997}#)
                            ((lambda (#{tmp\ 3002}#)
                               ((lambda (#{tmp\ 3003}#)
                                  (if (if #{tmp\ 3003}#
                                        (apply (lambda (#{r\ 3005}#)
                                                 (#{id?\ 2353}# #{r\ 3005}#))
                                               #{tmp\ 3003}#)
                                        #f)
                                    (apply (lambda (#{r\ 3007}#)
                                             (#{check\ 2982}#
                                               #{req\ 2995}#
                                               #{opt\ 2996}#
                                               #{r\ 3007}#
                                               #{kw\ 2997}#))
                                           #{tmp\ 3003}#)
                                    ((lambda (#{else\ 3009}#)
                                       (syntax-violation
                                         'lambda*
                                         "invalid rest argument"
                                         #{orig-args\ 2971}#
                                         #{args\ 2994}#))
                                     #{tmp\ 3002}#)))
                                (list #{tmp\ 3002}#)))
                             #{args\ 2994}#)))
                        (#{key\ 2978}#
                          (lambda (#{args\ 3010}#
                                   #{req\ 3011}#
                                   #{opt\ 3012}#
                                   #{rkey\ 3013}#)
                            ((lambda (#{tmp\ 3018}#)
                               ((lambda (#{tmp\ 3019}#)
                                  (if #{tmp\ 3019}#
                                    (apply (lambda ()
                                             (#{check\ 2982}#
                                               #{req\ 3011}#
                                               #{opt\ 3012}#
                                               #f
                                               (cons #f
                                                     (reverse
                                                       #{rkey\ 3013}#))))
                                           #{tmp\ 3019}#)
                                    ((lambda (#{tmp\ 3020}#)
                                       (if (if #{tmp\ 3020}#
                                             (apply (lambda (#{a\ 3023}#
                                                             #{b\ 3024}#)
                                                      (#{id?\ 2353}#
                                                        #{a\ 3023}#))
                                                    #{tmp\ 3020}#)
                                             #f)
                                         (apply (lambda (#{a\ 3027}#
                                                         #{b\ 3028}#)
                                                  ((lambda (#{tmp\ 3030}#)
                                                     ((lambda (#{k\ 3032}#)
                                                        (#{key\ 2978}#
                                                          #{b\ 3028}#
                                                          #{req\ 3011}#
                                                          #{opt\ 3012}#
                                                          (cons (cons #{k\ 3032}#
                                                                      (cons #{a\ 3027}#
                                                                            '(#(syntax-object
                                                                                #f
                                                                                ((top)
                                                                                 #(ribcage
                                                                                   #(k)
                                                                                   #((top))
                                                                                   #("i3031"))
                                                                                 #(ribcage
                                                                                   #(a
                                                                                     b)
                                                                                   #((top)
                                                                                     (top))
                                                                                   #("i3025"
                                                                                     "i3026"))
                                                                                 #(ribcage
                                                                                   ()
                                                                                   ()
                                                                                   ())
                                                                                 #(ribcage
                                                                                   #(args
                                                                                     req
                                                                                     opt
                                                                                     rkey)
                                                                                   #((top)
                                                                                     (top)
                                                                                     (top)
                                                                                     (top))
                                                                                   #("i3014"
                                                                                     "i3015"
                                                                                     "i3016"
                                                                                     "i3017"))
                                                                                 #(ribcage
                                                                                   (check rest
                                                                                          key
                                                                                          opt
                                                                                          req)
                                                                                   ((top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top))
                                                                                   ("i2981"
                                                                                    "i2979"
                                                                                    "i2977"
                                                                                    "i2975"
                                                                                    "i2973"))
                                                                                 #(ribcage
                                                                                   #(orig-args)
                                                                                   #((top))
                                                                                   #("i2972"))
                                                                                 #(ribcage
                                                                                   (lambda-var-list
                                                                                     gen-var
                                                                                     strip
                                                                                     chi-lambda-case
                                                                                     lambda*-formals
                                                                                     chi-simple-lambda
                                                                                     lambda-formals
                                                                                     ellipsis?
                                                                                     chi-void
                                                                                     eval-local-transformer
                                                                                     chi-local-syntax
                                                                                     chi-body
                                                                                     chi-macro
                                                                                     chi-application
                                                                                     chi-expr
                                                                                     chi
                                                                                     chi-top
                                                                                     syntax-type
                                                                                     chi-when-list
                                                                                     chi-install-global
                                                                                     chi-top-sequence
                                                                                     chi-sequence
                                                                                     source-wrap
                                                                                     wrap
                                                                                     bound-id-member?
                                                                                     distinct-bound-ids?
                                                                                     valid-bound-ids?
                                                                                     bound-id=?
                                                                                     free-id=?
                                                                                     id-var-name
                                                                                     same-marks?
                                                                                     join-marks
                                                                                     join-wraps
                                                                                     smart-append
                                                                                     make-binding-wrap
                                                                                     extend-ribcage!
                                                                                     make-empty-ribcage
                                                                                     new-mark
                                                                                     anti-mark
                                                                                     the-anti-mark
                                                                                     top-marked?
                                                                                     top-wrap
                                                                                     empty-wrap
                                                                                     set-ribcage-labels!
                                                                                     set-ribcage-marks!
                                                                                     set-ribcage-symnames!
                                                                                     ribcage-labels
                                                                                     ribcage-marks
                                                                                     ribcage-symnames
                                                                                     ribcage?
                                                                                     make-ribcage
                                                                                     gen-labels
                                                                                     gen-label
                                                                                     make-rename
                                                                                     rename-marks
                                                                                     rename-new
                                                                                     rename-old
                                                                                     subst-rename?
                                                                                     wrap-subst
                                                                                     wrap-marks
                                                                                     make-wrap
                                                                                     id-sym-name&marks
                                                                                     id-sym-name
                                                                                     id?
                                                                                     nonsymbol-id?
                                                                                     global-extend
                                                                                     lookup
                                                                                     macros-only-env
                                                                                     extend-var-env
                                                                                     extend-env
                                                                                     null-env
                                                                                     binding-value
                                                                                     binding-type
                                                                                     make-binding
                                                                                     arg-check
                                                                                     source-annotation
                                                                                     no-source
                                                                                     set-syntax-object-module!
                                                                                     set-syntax-object-wrap!
                                                                                     set-syntax-object-expression!
                                                                                     syntax-object-module
                                                                                     syntax-object-wrap
                                                                                     syntax-object-expression
                                                                                     syntax-object?
                                                                                     make-syntax-object
                                                                                     build-lexical-var
                                                                                     build-letrec
                                                                                     build-named-let
                                                                                     build-let
                                                                                     build-sequence
                                                                                     build-data
                                                                                     build-primref
                                                                                     build-lambda-case
                                                                                     build-case-lambda
                                                                                     build-simple-lambda
                                                                                     build-global-definition
                                                                                     maybe-name-value!
                                                                                     build-global-assignment
                                                                                     build-global-reference
                                                                                     analyze-variable
                                                                                     build-lexical-assignment
                                                                                     build-lexical-reference
                                                                                     build-dynlet
                                                                                     build-conditional
                                                                                     build-application
                                                                                     build-void
                                                                                     decorate-source
                                                                                     get-global-definition-hook
                                                                                     put-global-definition-hook
                                                                                     gensym-hook
                                                                                     local-eval-hook
                                                                                     top-level-eval-hook
                                                                                     fx<
                                                                                     fx=
                                                                                     fx-
                                                                                     fx+
                                                                                     make-dynlet
                                                                                     make-letrec
                                                                                     make-let
                                                                                     make-lambda-case
                                                                                     make-lambda
                                                                                     make-sequence
                                                                                     make-application
                                                                                     make-conditional
                                                                                     make-toplevel-define
                                                                                     make-toplevel-set
                                                                                     make-toplevel-ref
                                                                                     make-module-set
                                                                                     make-module-ref
                                                                                     make-lexical-set
                                                                                     make-lexical-ref
                                                                                     make-primitive-ref
                                                                                     make-const
                                                                                     make-void
                                                                                     *mode*)
                                                                                   ((top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top))
                                                                                   ("i2467"
                                                                                    "i2465"
                                                                                    "i2463"
                                                                                    "i2461"
                                                                                    "i2459"
                                                                                    "i2457"
                                                                                    "i2455"
                                                                                    "i2453"
                                                                                    "i2451"
                                                                                    "i2449"
                                                                                    "i2447"
                                                                                    "i2445"
                                                                                    "i2443"
                                                                                    "i2441"
                                                                                    "i2439"
                                                                                    "i2437"
                                                                                    "i2435"
                                                                                    "i2433"
                                                                                    "i2431"
                                                                                    "i2429"
                                                                                    "i2427"
                                                                                    "i2425"
                                                                                    "i2423"
                                                                                    "i2421"
                                                                                    "i2419"
                                                                                    "i2417"
                                                                                    "i2415"
                                                                                    "i2413"
                                                                                    "i2411"
                                                                                    "i2409"
                                                                                    "i2407"
                                                                                    "i2405"
                                                                                    "i2403"
                                                                                    "i2401"
                                                                                    "i2399"
                                                                                    "i2397"
                                                                                    "i2396"
                                                                                    "i2395"
                                                                                    "i2393"
                                                                                    "i2392"
                                                                                    "i2391"
                                                                                    "i2390"
                                                                                    "i2389"
                                                                                    "i2387"
                                                                                    "i2385"
                                                                                    "i2383"
                                                                                    "i2381"
                                                                                    "i2379"
                                                                                    "i2377"
                                                                                    "i2375"
                                                                                    "i2373"
                                                                                    "i2370"
                                                                                    "i2368"
                                                                                    "i2367"
                                                                                    "i2366"
                                                                                    "i2365"
                                                                                    "i2364"
                                                                                    "i2363"
                                                                                    "i2361"
                                                                                    "i2359"
                                                                                    "i2357"
                                                                                    "i2355"
                                                                                    "i2354"
                                                                                    "i2352"
                                                                                    "i2350"
                                                                                    "i2348"
                                                                                    "i2346"
                                                                                    "i2344"
                                                                                    "i2342"
                                                                                    "i2340"
                                                                                    "i2339"
                                                                                    "i2337"
                                                                                    "i2335"
                                                                                    "i2334"
                                                                                    "i2333"
                                                                                    "i2331"
                                                                                    "i2330"
                                                                                    "i2328"
                                                                                    "i2326"
                                                                                    "i2324"
                                                                                    "i2322"
                                                                                    "i2320"
                                                                                    "i2318"
                                                                                    "i2316"
                                                                                    "i2314"
                                                                                    "i2312"
                                                                                    "i2310"
                                                                                    "i2308"
                                                                                    "i2306"
                                                                                    "i2304"
                                                                                    "i2302"
                                                                                    "i2300"
                                                                                    "i2298"
                                                                                    "i2296"
                                                                                    "i2294"
                                                                                    "i2292"
                                                                                    "i2290"
                                                                                    "i2288"
                                                                                    "i2286"
                                                                                    "i2284"
                                                                                    "i2282"
                                                                                    "i2280"
                                                                                    "i2278"
                                                                                    "i2276"
                                                                                    "i2274"
                                                                                    "i2272"
                                                                                    "i2270"
                                                                                    "i2268"
                                                                                    "i2266"
                                                                                    "i2265"
                                                                                    "i2263"
                                                                                    "i2261"
                                                                                    "i2259"
                                                                                    "i2257"
                                                                                    "i2255"
                                                                                    "i2253"
                                                                                    "i2251"
                                                                                    "i2249"
                                                                                    "i2247"
                                                                                    "i2245"
                                                                                    "i2243"
                                                                                    "i2241"
                                                                                    "i2239"
                                                                                    "i2237"
                                                                                    "i2235"
                                                                                    "i2233"
                                                                                    "i2231"
                                                                                    "i2229"
                                                                                    "i2227"
                                                                                    "i2225"
                                                                                    "i2223"
                                                                                    "i2221"
                                                                                    "i2219"
                                                                                    "i2217"
                                                                                    "i2214"))
                                                                                 #(ribcage
                                                                                   (define-structure
                                                                                     define-expansion-constructors
                                                                                     and-map*)
                                                                                   ((top)
                                                                                    (top)
                                                                                    (top))
                                                                                   ("i2066"
                                                                                    "i2065"
                                                                                    "i2063")))
                                                                                (hygiene
                                                                                  guile)))))
                                                                #{rkey\ 3013}#)))
                                                      #{tmp\ 3030}#))
                                                   (symbol->keyword
                                                     (syntax->datum
                                                       #{a\ 3027}#))))
                                                #{tmp\ 3020}#)
                                         ((lambda (#{tmp\ 3033}#)
                                            (if (if #{tmp\ 3033}#
                                                  (apply (lambda (#{a\ 3037}#
                                                                  #{init\ 3038}#
                                                                  #{b\ 3039}#)
                                                           (#{id?\ 2353}#
                                                             #{a\ 3037}#))
                                                         #{tmp\ 3033}#)
                                                  #f)
                                              (apply (lambda (#{a\ 3043}#
                                                              #{init\ 3044}#
                                                              #{b\ 3045}#)
                                                       ((lambda (#{tmp\ 3047}#)
                                                          ((lambda (#{k\ 3049}#)
                                                             (#{key\ 2978}#
                                                               #{b\ 3045}#
                                                               #{req\ 3011}#
                                                               #{opt\ 3012}#
                                                               (cons (list #{k\ 3049}#
                                                                           #{a\ 3043}#
                                                                           #{init\ 3044}#)
                                                                     #{rkey\ 3013}#)))
                                                           #{tmp\ 3047}#))
                                                        (symbol->keyword
                                                          (syntax->datum
                                                            #{a\ 3043}#))))
                                                     #{tmp\ 3033}#)
                                              ((lambda (#{tmp\ 3050}#)
                                                 (if (if #{tmp\ 3050}#
                                                       (apply (lambda (#{a\ 3055}#
                                                                       #{init\ 3056}#
                                                                       #{k\ 3057}#
                                                                       #{b\ 3058}#)
                                                                (if (#{id?\ 2353}#
                                                                      #{a\ 3055}#)
                                                                  (keyword?
                                                                    (syntax->datum
                                                                      #{k\ 3057}#))
                                                                  #f))
                                                              #{tmp\ 3050}#)
                                                       #f)
                                                   (apply (lambda (#{a\ 3065}#
                                                                   #{init\ 3066}#
                                                                   #{k\ 3067}#
                                                                   #{b\ 3068}#)
                                                            (#{key\ 2978}#
                                                              #{b\ 3068}#
                                                              #{req\ 3011}#
                                                              #{opt\ 3012}#
                                                              (cons (list #{k\ 3067}#
                                                                          #{a\ 3065}#
                                                                          #{init\ 3066}#)
                                                                    #{rkey\ 3013}#)))
                                                          #{tmp\ 3050}#)
                                                   ((lambda (#{tmp\ 3069}#)
                                                      (if (if #{tmp\ 3069}#
                                                            (apply (lambda (#{aok\ 3071}#)
                                                                     (eq? (syntax->datum
                                                                            #{aok\ 3071}#)
                                                                          #:allow-other-keys))
                                                                   #{tmp\ 3069}#)
                                                            #f)
                                                        (apply (lambda (#{aok\ 3073}#)
                                                                 (#{check\ 2982}#
                                                                   #{req\ 3011}#
                                                                   #{opt\ 3012}#
                                                                   #f
                                                                   (cons #t
                                                                         (reverse
                                                                           #{rkey\ 3013}#))))
                                                               #{tmp\ 3069}#)
                                                        ((lambda (#{tmp\ 3074}#)
                                                           (if (if #{tmp\ 3074}#
                                                                 (apply (lambda (#{aok\ 3078}#
                                                                                 #{a\ 3079}#
                                                                                 #{b\ 3080}#)
                                                                          (if (eq? (syntax->datum
                                                                                     #{aok\ 3078}#)
                                                                                   #:allow-other-keys)
                                                                            (eq? (syntax->datum
                                                                                   #{a\ 3079}#)
                                                                                 #:rest)
                                                                            #f))
                                                                        #{tmp\ 3074}#)
                                                                 #f)
                                                             (apply (lambda (#{aok\ 3086}#
                                                                             #{a\ 3087}#
                                                                             #{b\ 3088}#)
                                                                      (#{rest\ 2980}#
                                                                        #{b\ 3088}#
                                                                        #{req\ 3011}#
                                                                        #{opt\ 3012}#
                                                                        (cons #t
                                                                              (reverse
                                                                                #{rkey\ 3013}#))))
                                                                    #{tmp\ 3074}#)
                                                             ((lambda (#{tmp\ 3089}#)
                                                                (if (if #{tmp\ 3089}#
                                                                      (apply (lambda (#{aok\ 3092}#
                                                                                      #{r\ 3093}#)
                                                                               (if (eq? (syntax->datum
                                                                                          #{aok\ 3092}#)
                                                                                        #:allow-other-keys)
                                                                                 (#{id?\ 2353}#
                                                                                   #{r\ 3093}#)
                                                                                 #f))
                                                                             #{tmp\ 3089}#)
                                                                      #f)
                                                                  (apply (lambda (#{aok\ 3098}#
                                                                                  #{r\ 3099}#)
                                                                           (#{rest\ 2980}#
                                                                             #{r\ 3099}#
                                                                             #{req\ 3011}#
                                                                             #{opt\ 3012}#
                                                                             (cons #t
                                                                                   (reverse
                                                                                     #{rkey\ 3013}#))))
                                                                         #{tmp\ 3089}#)
                                                                  ((lambda (#{tmp\ 3100}#)
                                                                     (if (if #{tmp\ 3100}#
                                                                           (apply (lambda (#{a\ 3103}#
                                                                                           #{b\ 3104}#)
                                                                                    (eq? (syntax->datum
                                                                                           #{a\ 3103}#)
                                                                                         #:rest))
                                                                                  #{tmp\ 3100}#)
                                                                           #f)
                                                                       (apply (lambda (#{a\ 3107}#
                                                                                       #{b\ 3108}#)
                                                                                (#{rest\ 2980}#
                                                                                  #{b\ 3108}#
                                                                                  #{req\ 3011}#
                                                                                  #{opt\ 3012}#
                                                                                  (cons #f
                                                                                        (reverse
                                                                                          #{rkey\ 3013}#))))
                                                                              #{tmp\ 3100}#)
                                                                       ((lambda (#{tmp\ 3109}#)
                                                                          (if (if #{tmp\ 3109}#
                                                                                (apply (lambda (#{r\ 3111}#)
                                                                                         (#{id?\ 2353}#
                                                                                           #{r\ 3111}#))
                                                                                       #{tmp\ 3109}#)
                                                                                #f)
                                                                            (apply (lambda (#{r\ 3113}#)
                                                                                     (#{rest\ 2980}#
                                                                                       #{r\ 3113}#
                                                                                       #{req\ 3011}#
                                                                                       #{opt\ 3012}#
                                                                                       (cons #f
                                                                                             (reverse
                                                                                               #{rkey\ 3013}#))))
                                                                                   #{tmp\ 3109}#)
                                                                            ((lambda (#{else\ 3115}#)
                                                                               (syntax-violation
                                                                                 'lambda*
                                                                                 "invalid keyword argument list"
                                                                                 #{orig-args\ 2971}#
                                                                                 #{args\ 3010}#))
                                                                             #{tmp\ 3018}#)))
                                                                        (list #{tmp\ 3018}#))))
                                                                   ($sc-dispatch
                                                                     #{tmp\ 3018}#
                                                                     '(any any)))))
                                                              ($sc-dispatch
                                                                #{tmp\ 3018}#
                                                                '(any .
                                                                      any)))))
                                                         ($sc-dispatch
                                                           #{tmp\ 3018}#
                                                           '(any any any)))))
                                                    ($sc-dispatch
                                                      #{tmp\ 3018}#
                                                      '(any)))))
                                               ($sc-dispatch
                                                 #{tmp\ 3018}#
                                                 '((any any any) . any)))))
                                          ($sc-dispatch
                                            #{tmp\ 3018}#
                                            '((any any) . any)))))
                                     ($sc-dispatch
                                       #{tmp\ 3018}#
                                       '(any . any)))))
                                ($sc-dispatch #{tmp\ 3018}# (quote ()))))
                             #{args\ 3010}#)))
                        (#{opt\ 2976}#
                          (lambda (#{args\ 3116}# #{req\ 3117}# #{ropt\ 3118}#)
                            ((lambda (#{tmp\ 3122}#)
                               ((lambda (#{tmp\ 3123}#)
                                  (if #{tmp\ 3123}#
                                    (apply (lambda ()
                                             (#{check\ 2982}#
                                               #{req\ 3117}#
                                               (reverse #{ropt\ 3118}#)
                                               #f
                                               '()))
                                           #{tmp\ 3123}#)
                                    ((lambda (#{tmp\ 3124}#)
                                       (if (if #{tmp\ 3124}#
                                             (apply (lambda (#{a\ 3127}#
                                                             #{b\ 3128}#)
                                                      (#{id?\ 2353}#
                                                        #{a\ 3127}#))
                                                    #{tmp\ 3124}#)
                                             #f)
                                         (apply (lambda (#{a\ 3131}#
                                                         #{b\ 3132}#)
                                                  (#{opt\ 2976}#
                                                    #{b\ 3132}#
                                                    #{req\ 3117}#
                                                    (cons (cons #{a\ 3131}#
                                                                '(#(syntax-object
                                                                    #f
                                                                    ((top)
                                                                     #(ribcage
                                                                       #(a b)
                                                                       #((top)
                                                                         (top))
                                                                       #("i3129"
                                                                         "i3130"))
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       #(args
                                                                         req
                                                                         ropt)
                                                                       #((top)
                                                                         (top)
                                                                         (top))
                                                                       #("i3119"
                                                                         "i3120"
                                                                         "i3121"))
                                                                     #(ribcage
                                                                       (check rest
                                                                              key
                                                                              opt
                                                                              req)
                                                                       ((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                       ("i2981"
                                                                        "i2979"
                                                                        "i2977"
                                                                        "i2975"
                                                                        "i2973"))
                                                                     #(ribcage
                                                                       #(orig-args)
                                                                       #((top))
                                                                       #("i2972"))
                                                                     #(ribcage
                                                                       (lambda-var-list
                                                                         gen-var
                                                                         strip
                                                                         chi-lambda-case
                                                                         lambda*-formals
                                                                         chi-simple-lambda
                                                                         lambda-formals
                                                                         ellipsis?
                                                                         chi-void
                                                                         eval-local-transformer
                                                                         chi-local-syntax
                                                                         chi-body
                                                                         chi-macro
                                                                         chi-application
                                                                         chi-expr
                                                                         chi
                                                                         chi-top
                                                                         syntax-type
                                                                         chi-when-list
                                                                         chi-install-global
                                                                         chi-top-sequence
                                                                         chi-sequence
                                                                         source-wrap
                                                                         wrap
                                                                         bound-id-member?
                                                                         distinct-bound-ids?
                                                                         valid-bound-ids?
                                                                         bound-id=?
                                                                         free-id=?
                                                                         id-var-name
                                                                         same-marks?
                                                                         join-marks
                                                                         join-wraps
                                                                         smart-append
                                                                         make-binding-wrap
                                                                         extend-ribcage!
                                                                         make-empty-ribcage
                                                                         new-mark
                                                                         anti-mark
                                                                         the-anti-mark
                                                                         top-marked?
                                                                         top-wrap
                                                                         empty-wrap
                                                                         set-ribcage-labels!
                                                                         set-ribcage-marks!
                                                                         set-ribcage-symnames!
                                                                         ribcage-labels
                                                                         ribcage-marks
                                                                         ribcage-symnames
                                                                         ribcage?
                                                                         make-ribcage
                                                                         gen-labels
                                                                         gen-label
                                                                         make-rename
                                                                         rename-marks
                                                                         rename-new
                                                                         rename-old
                                                                         subst-rename?
                                                                         wrap-subst
                                                                         wrap-marks
                                                                         make-wrap
                                                                         id-sym-name&marks
                                                                         id-sym-name
                                                                         id?
                                                                         nonsymbol-id?
                                                                         global-extend
                                                                         lookup
                                                                         macros-only-env
                                                                         extend-var-env
                                                                         extend-env
                                                                         null-env
                                                                         binding-value
                                                                         binding-type
                                                                         make-binding
                                                                         arg-check
                                                                         source-annotation
                                                                         no-source
                                                                         set-syntax-object-module!
                                                                         set-syntax-object-wrap!
                                                                         set-syntax-object-expression!
                                                                         syntax-object-module
                                                                         syntax-object-wrap
                                                                         syntax-object-expression
                                                                         syntax-object?
                                                                         make-syntax-object
                                                                         build-lexical-var
                                                                         build-letrec
                                                                         build-named-let
                                                                         build-let
                                                                         build-sequence
                                                                         build-data
                                                                         build-primref
                                                                         build-lambda-case
                                                                         build-case-lambda
                                                                         build-simple-lambda
                                                                         build-global-definition
                                                                         maybe-name-value!
                                                                         build-global-assignment
                                                                         build-global-reference
                                                                         analyze-variable
                                                                         build-lexical-assignment
                                                                         build-lexical-reference
                                                                         build-dynlet
                                                                         build-conditional
                                                                         build-application
                                                                         build-void
                                                                         decorate-source
                                                                         get-global-definition-hook
                                                                         put-global-definition-hook
                                                                         gensym-hook
                                                                         local-eval-hook
                                                                         top-level-eval-hook
                                                                         fx<
                                                                         fx=
                                                                         fx-
                                                                         fx+
                                                                         make-dynlet
                                                                         make-letrec
                                                                         make-let
                                                                         make-lambda-case
                                                                         make-lambda
                                                                         make-sequence
                                                                         make-application
                                                                         make-conditional
                                                                         make-toplevel-define
                                                                         make-toplevel-set
                                                                         make-toplevel-ref
                                                                         make-module-set
                                                                         make-module-ref
                                                                         make-lexical-set
                                                                         make-lexical-ref
                                                                         make-primitive-ref
                                                                         make-const
                                                                         make-void
                                                                         *mode*)
                                                                       ((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                       ("i2467"
                                                                        "i2465"
                                                                        "i2463"
                                                                        "i2461"
                                                                        "i2459"
                                                                        "i2457"
                                                                        "i2455"
                                                                        "i2453"
                                                                        "i2451"
                                                                        "i2449"
                                                                        "i2447"
                                                                        "i2445"
                                                                        "i2443"
                                                                        "i2441"
                                                                        "i2439"
                                                                        "i2437"
                                                                        "i2435"
                                                                        "i2433"
                                                                        "i2431"
                                                                        "i2429"
                                                                        "i2427"
                                                                        "i2425"
                                                                        "i2423"
                                                                        "i2421"
                                                                        "i2419"
                                                                        "i2417"
                                                                        "i2415"
                                                                        "i2413"
                                                                        "i2411"
                                                                        "i2409"
                                                                        "i2407"
                                                                        "i2405"
                                                                        "i2403"
                                                                        "i2401"
                                                                        "i2399"
                                                                        "i2397"
                                                                        "i2396"
                                                                        "i2395"
                                                                        "i2393"
                                                                        "i2392"
                                                                        "i2391"
                                                                        "i2390"
                                                                        "i2389"
                                                                        "i2387"
                                                                        "i2385"
                                                                        "i2383"
                                                                        "i2381"
                                                                        "i2379"
                                                                        "i2377"
                                                                        "i2375"
                                                                        "i2373"
                                                                        "i2370"
                                                                        "i2368"
                                                                        "i2367"
                                                                        "i2366"
                                                                        "i2365"
                                                                        "i2364"
                                                                        "i2363"
                                                                        "i2361"
                                                                        "i2359"
                                                                        "i2357"
                                                                        "i2355"
                                                                        "i2354"
                                                                        "i2352"
                                                                        "i2350"
                                                                        "i2348"
                                                                        "i2346"
                                                                        "i2344"
                                                                        "i2342"
                                                                        "i2340"
                                                                        "i2339"
                                                                        "i2337"
                                                                        "i2335"
                                                                        "i2334"
                                                                        "i2333"
                                                                        "i2331"
                                                                        "i2330"
                                                                        "i2328"
                                                                        "i2326"
                                                                        "i2324"
                                                                        "i2322"
                                                                        "i2320"
                                                                        "i2318"
                                                                        "i2316"
                                                                        "i2314"
                                                                        "i2312"
                                                                        "i2310"
                                                                        "i2308"
                                                                        "i2306"
                                                                        "i2304"
                                                                        "i2302"
                                                                        "i2300"
                                                                        "i2298"
                                                                        "i2296"
                                                                        "i2294"
                                                                        "i2292"
                                                                        "i2290"
                                                                        "i2288"
                                                                        "i2286"
                                                                        "i2284"
                                                                        "i2282"
                                                                        "i2280"
                                                                        "i2278"
                                                                        "i2276"
                                                                        "i2274"
                                                                        "i2272"
                                                                        "i2270"
                                                                        "i2268"
                                                                        "i2266"
                                                                        "i2265"
                                                                        "i2263"
                                                                        "i2261"
                                                                        "i2259"
                                                                        "i2257"
                                                                        "i2255"
                                                                        "i2253"
                                                                        "i2251"
                                                                        "i2249"
                                                                        "i2247"
                                                                        "i2245"
                                                                        "i2243"
                                                                        "i2241"
                                                                        "i2239"
                                                                        "i2237"
                                                                        "i2235"
                                                                        "i2233"
                                                                        "i2231"
                                                                        "i2229"
                                                                        "i2227"
                                                                        "i2225"
                                                                        "i2223"
                                                                        "i2221"
                                                                        "i2219"
                                                                        "i2217"
                                                                        "i2214"))
                                                                     #(ribcage
                                                                       (define-structure
                                                                         define-expansion-constructors
                                                                         and-map*)
                                                                       ((top)
                                                                        (top)
                                                                        (top))
                                                                       ("i2066"
                                                                        "i2065"
                                                                        "i2063")))
                                                                    (hygiene
                                                                      guile))))
                                                          #{ropt\ 3118}#)))
                                                #{tmp\ 3124}#)
                                         ((lambda (#{tmp\ 3133}#)
                                            (if (if #{tmp\ 3133}#
                                                  (apply (lambda (#{a\ 3137}#
                                                                  #{init\ 3138}#
                                                                  #{b\ 3139}#)
                                                           (#{id?\ 2353}#
                                                             #{a\ 3137}#))
                                                         #{tmp\ 3133}#)
                                                  #f)
                                              (apply (lambda (#{a\ 3143}#
                                                              #{init\ 3144}#
                                                              #{b\ 3145}#)
                                                       (#{opt\ 2976}#
                                                         #{b\ 3145}#
                                                         #{req\ 3117}#
                                                         (cons (list #{a\ 3143}#
                                                                     #{init\ 3144}#)
                                                               #{ropt\ 3118}#)))
                                                     #{tmp\ 3133}#)
                                              ((lambda (#{tmp\ 3146}#)
                                                 (if (if #{tmp\ 3146}#
                                                       (apply (lambda (#{a\ 3149}#
                                                                       #{b\ 3150}#)
                                                                (eq? (syntax->datum
                                                                       #{a\ 3149}#)
                                                                     #:key))
                                                              #{tmp\ 3146}#)
                                                       #f)
                                                   (apply (lambda (#{a\ 3153}#
                                                                   #{b\ 3154}#)
                                                            (#{key\ 2978}#
                                                              #{b\ 3154}#
                                                              #{req\ 3117}#
                                                              (reverse
                                                                #{ropt\ 3118}#)
                                                              '()))
                                                          #{tmp\ 3146}#)
                                                   ((lambda (#{tmp\ 3155}#)
                                                      (if (if #{tmp\ 3155}#
                                                            (apply (lambda (#{a\ 3158}#
                                                                            #{b\ 3159}#)
                                                                     (eq? (syntax->datum
                                                                            #{a\ 3158}#)
                                                                          #:rest))
                                                                   #{tmp\ 3155}#)
                                                            #f)
                                                        (apply (lambda (#{a\ 3162}#
                                                                        #{b\ 3163}#)
                                                                 (#{rest\ 2980}#
                                                                   #{b\ 3163}#
                                                                   #{req\ 3117}#
                                                                   (reverse
                                                                     #{ropt\ 3118}#)
                                                                   '()))
                                                               #{tmp\ 3155}#)
                                                        ((lambda (#{tmp\ 3164}#)
                                                           (if (if #{tmp\ 3164}#
                                                                 (apply (lambda (#{r\ 3166}#)
                                                                          (#{id?\ 2353}#
                                                                            #{r\ 3166}#))
                                                                        #{tmp\ 3164}#)
                                                                 #f)
                                                             (apply (lambda (#{r\ 3168}#)
                                                                      (#{rest\ 2980}#
                                                                        #{r\ 3168}#
                                                                        #{req\ 3117}#
                                                                        (reverse
                                                                          #{ropt\ 3118}#)
                                                                        '()))
                                                                    #{tmp\ 3164}#)
                                                             ((lambda (#{else\ 3170}#)
                                                                (syntax-violation
                                                                  'lambda*
                                                                  "invalid optional argument list"
                                                                  #{orig-args\ 2971}#
                                                                  #{args\ 3116}#))
                                                              #{tmp\ 3122}#)))
                                                         (list #{tmp\ 3122}#))))
                                                    ($sc-dispatch
                                                      #{tmp\ 3122}#
                                                      '(any any)))))
                                               ($sc-dispatch
                                                 #{tmp\ 3122}#
                                                 '(any . any)))))
                                          ($sc-dispatch
                                            #{tmp\ 3122}#
                                            '((any any) . any)))))
                                     ($sc-dispatch
                                       #{tmp\ 3122}#
                                       '(any . any)))))
                                ($sc-dispatch #{tmp\ 3122}# (quote ()))))
                             #{args\ 3116}#)))
                        (#{req\ 2974}#
                          (lambda (#{args\ 3171}# #{rreq\ 3172}#)
                            ((lambda (#{tmp\ 3175}#)
                               ((lambda (#{tmp\ 3176}#)
                                  (if #{tmp\ 3176}#
                                    (apply (lambda ()
                                             (#{check\ 2982}#
                                               (reverse #{rreq\ 3172}#)
                                               '()
                                               #f
                                               '()))
                                           #{tmp\ 3176}#)
                                    ((lambda (#{tmp\ 3177}#)
                                       (if (if #{tmp\ 3177}#
                                             (apply (lambda (#{a\ 3180}#
                                                             #{b\ 3181}#)
                                                      (#{id?\ 2353}#
                                                        #{a\ 3180}#))
                                                    #{tmp\ 3177}#)
                                             #f)
                                         (apply (lambda (#{a\ 3184}#
                                                         #{b\ 3185}#)
                                                  (#{req\ 2974}#
                                                    #{b\ 3185}#
                                                    (cons #{a\ 3184}#
                                                          #{rreq\ 3172}#)))
                                                #{tmp\ 3177}#)
                                         ((lambda (#{tmp\ 3186}#)
                                            (if (if #{tmp\ 3186}#
                                                  (apply (lambda (#{a\ 3189}#
                                                                  #{b\ 3190}#)
                                                           (eq? (syntax->datum
                                                                  #{a\ 3189}#)
                                                                #:optional))
                                                         #{tmp\ 3186}#)
                                                  #f)
                                              (apply (lambda (#{a\ 3193}#
                                                              #{b\ 3194}#)
                                                       (#{opt\ 2976}#
                                                         #{b\ 3194}#
                                                         (reverse
                                                           #{rreq\ 3172}#)
                                                         '()))
                                                     #{tmp\ 3186}#)
                                              ((lambda (#{tmp\ 3195}#)
                                                 (if (if #{tmp\ 3195}#
                                                       (apply (lambda (#{a\ 3198}#
                                                                       #{b\ 3199}#)
                                                                (eq? (syntax->datum
                                                                       #{a\ 3198}#)
                                                                     #:key))
                                                              #{tmp\ 3195}#)
                                                       #f)
                                                   (apply (lambda (#{a\ 3202}#
                                                                   #{b\ 3203}#)
                                                            (#{key\ 2978}#
                                                              #{b\ 3203}#
                                                              (reverse
                                                                #{rreq\ 3172}#)
                                                              '()
                                                              '()))
                                                          #{tmp\ 3195}#)
                                                   ((lambda (#{tmp\ 3204}#)
                                                      (if (if #{tmp\ 3204}#
                                                            (apply (lambda (#{a\ 3207}#
                                                                            #{b\ 3208}#)
                                                                     (eq? (syntax->datum
                                                                            #{a\ 3207}#)
                                                                          #:rest))
                                                                   #{tmp\ 3204}#)
                                                            #f)
                                                        (apply (lambda (#{a\ 3211}#
                                                                        #{b\ 3212}#)
                                                                 (#{rest\ 2980}#
                                                                   #{b\ 3212}#
                                                                   (reverse
                                                                     #{rreq\ 3172}#)
                                                                   '()
                                                                   '()))
                                                               #{tmp\ 3204}#)
                                                        ((lambda (#{tmp\ 3213}#)
                                                           (if (if #{tmp\ 3213}#
                                                                 (apply (lambda (#{r\ 3215}#)
                                                                          (#{id?\ 2353}#
                                                                            #{r\ 3215}#))
                                                                        #{tmp\ 3213}#)
                                                                 #f)
                                                             (apply (lambda (#{r\ 3217}#)
                                                                      (#{rest\ 2980}#
                                                                        #{r\ 3217}#
                                                                        (reverse
                                                                          #{rreq\ 3172}#)
                                                                        '()
                                                                        '()))
                                                                    #{tmp\ 3213}#)
                                                             ((lambda (#{else\ 3219}#)
                                                                (syntax-violation
                                                                  'lambda*
                                                                  "invalid argument list"
                                                                  #{orig-args\ 2971}#
                                                                  #{args\ 3171}#))
                                                              #{tmp\ 3175}#)))
                                                         (list #{tmp\ 3175}#))))
                                                    ($sc-dispatch
                                                      #{tmp\ 3175}#
                                                      '(any any)))))
                                               ($sc-dispatch
                                                 #{tmp\ 3175}#
                                                 '(any . any)))))
                                          ($sc-dispatch
                                            #{tmp\ 3175}#
                                            '(any . any)))))
                                     ($sc-dispatch
                                       #{tmp\ 3175}#
                                       '(any . any)))))
                                ($sc-dispatch #{tmp\ 3175}# (quote ()))))
                             #{args\ 3171}#))))
                 (#{req\ 2974}# #{orig-args\ 2971}# (quote ())))))
           (#{chi-simple-lambda\ 2458}#
             (lambda (#{e\ 3220}#
                      #{r\ 3221}#
                      #{w\ 3222}#
                      #{s\ 3223}#
                      #{mod\ 3224}#
                      #{req\ 3225}#
                      #{rest\ 3226}#
                      #{meta\ 3227}#
                      #{body\ 3228}#)
               (let ((#{ids\ 3240}#
                       (if #{rest\ 3226}#
                         (append #{req\ 3225}# (list #{rest\ 3226}#))
                         #{req\ 3225}#)))
                 (let ((#{vars\ 3242}#
                         (map #{gen-var\ 2466}# #{ids\ 3240}#)))
                   (let ((#{labels\ 3244}#
                           (#{gen-labels\ 2371}# #{ids\ 3240}#)))
                     (#{build-simple-lambda\ 2295}#
                       #{s\ 3223}#
                       (map syntax->datum #{req\ 3225}#)
                       (if #{rest\ 3226}#
                         (syntax->datum #{rest\ 3226}#)
                         #f)
                       #{vars\ 3242}#
                       #{meta\ 3227}#
                       (#{chi-body\ 2446}#
                         #{body\ 3228}#
                         (#{source-wrap\ 2424}#
                           #{e\ 3220}#
                           #{w\ 3222}#
                           #{s\ 3223}#
                           #{mod\ 3224}#)
                         (#{extend-var-env\ 2343}#
                           #{labels\ 3244}#
                           #{vars\ 3242}#
                           #{r\ 3221}#)
                         (#{make-binding-wrap\ 2400}#
                           #{ids\ 3240}#
                           #{labels\ 3244}#
                           #{w\ 3222}#)
                         #{mod\ 3224}#)))))))
           (#{lambda-formals\ 2456}#
             (lambda (#{orig-args\ 3247}#)
               (letrec ((#{check\ 3252}#
                          (lambda (#{req\ 3253}# #{rest\ 3254}#)
                            (if (#{distinct-bound-ids?\ 2418}#
                                  (if #{rest\ 3254}#
                                    (cons #{rest\ 3254}# #{req\ 3253}#)
                                    #{req\ 3253}#))
                              (values #{req\ 3253}# #f #{rest\ 3254}# #f)
                              (syntax-violation
                                'lambda
                                "duplicate identifier in argument list"
                                #{orig-args\ 3247}#))))
                        (#{req\ 3250}#
                          (lambda (#{args\ 3260}# #{rreq\ 3261}#)
                            ((lambda (#{tmp\ 3264}#)
                               ((lambda (#{tmp\ 3265}#)
                                  (if #{tmp\ 3265}#
                                    (apply (lambda ()
                                             (#{check\ 3252}#
                                               (reverse #{rreq\ 3261}#)
                                               #f))
                                           #{tmp\ 3265}#)
                                    ((lambda (#{tmp\ 3266}#)
                                       (if (if #{tmp\ 3266}#
                                             (apply (lambda (#{a\ 3269}#
                                                             #{b\ 3270}#)
                                                      (#{id?\ 2353}#
                                                        #{a\ 3269}#))
                                                    #{tmp\ 3266}#)
                                             #f)
                                         (apply (lambda (#{a\ 3273}#
                                                         #{b\ 3274}#)
                                                  (#{req\ 3250}#
                                                    #{b\ 3274}#
                                                    (cons #{a\ 3273}#
                                                          #{rreq\ 3261}#)))
                                                #{tmp\ 3266}#)
                                         ((lambda (#{tmp\ 3275}#)
                                            (if (if #{tmp\ 3275}#
                                                  (apply (lambda (#{r\ 3277}#)
                                                           (#{id?\ 2353}#
                                                             #{r\ 3277}#))
                                                         #{tmp\ 3275}#)
                                                  #f)
                                              (apply (lambda (#{r\ 3279}#)
                                                       (#{check\ 3252}#
                                                         (reverse
                                                           #{rreq\ 3261}#)
                                                         #{r\ 3279}#))
                                                     #{tmp\ 3275}#)
                                              ((lambda (#{else\ 3281}#)
                                                 (syntax-violation
                                                   'lambda
                                                   "invalid argument list"
                                                   #{orig-args\ 3247}#
                                                   #{args\ 3260}#))
                                               #{tmp\ 3264}#)))
                                          (list #{tmp\ 3264}#))))
                                     ($sc-dispatch
                                       #{tmp\ 3264}#
                                       '(any . any)))))
                                ($sc-dispatch #{tmp\ 3264}# (quote ()))))
                             #{args\ 3260}#))))
                 (#{req\ 3250}# #{orig-args\ 3247}# (quote ())))))
           (#{ellipsis?\ 2454}#
             (lambda (#{x\ 3282}#)
               (if (#{nonsymbol-id?\ 2351}# #{x\ 3282}#)
                 (#{free-id=?\ 2412}#
                   #{x\ 3282}#
                   '#(syntax-object
                      ...
                      ((top)
                       #(ribcage () () ())
                       #(ribcage () () ())
                       #(ribcage #(x) #((top)) #("i3283"))
                       #(ribcage
                         (lambda-var-list
                           gen-var
                           strip
                           chi-lambda-case
                           lambda*-formals
                           chi-simple-lambda
                           lambda-formals
                           ellipsis?
                           chi-void
                           eval-local-transformer
                           chi-local-syntax
                           chi-body
                           chi-macro
                           chi-application
                           chi-expr
                           chi
                           chi-top
                           syntax-type
                           chi-when-list
                           chi-install-global
                           chi-top-sequence
                           chi-sequence
                           source-wrap
                           wrap
                           bound-id-member?
                           distinct-bound-ids?
                           valid-bound-ids?
                           bound-id=?
                           free-id=?
                           id-var-name
                           same-marks?
                           join-marks
                           join-wraps
                           smart-append
                           make-binding-wrap
                           extend-ribcage!
                           make-empty-ribcage
                           new-mark
                           anti-mark
                           the-anti-mark
                           top-marked?
                           top-wrap
                           empty-wrap
                           set-ribcage-labels!
                           set-ribcage-marks!
                           set-ribcage-symnames!
                           ribcage-labels
                           ribcage-marks
                           ribcage-symnames
                           ribcage?
                           make-ribcage
                           gen-labels
                           gen-label
                           make-rename
                           rename-marks
                           rename-new
                           rename-old
                           subst-rename?
                           wrap-subst
                           wrap-marks
                           make-wrap
                           id-sym-name&marks
                           id-sym-name
                           id?
                           nonsymbol-id?
                           global-extend
                           lookup
                           macros-only-env
                           extend-var-env
                           extend-env
                           null-env
                           binding-value
                           binding-type
                           make-binding
                           arg-check
                           source-annotation
                           no-source
                           set-syntax-object-module!
                           set-syntax-object-wrap!
                           set-syntax-object-expression!
                           syntax-object-module
                           syntax-object-wrap
                           syntax-object-expression
                           syntax-object?
                           make-syntax-object
                           build-lexical-var
                           build-letrec
                           build-named-let
                           build-let
                           build-sequence
                           build-data
                           build-primref
                           build-lambda-case
                           build-case-lambda
                           build-simple-lambda
                           build-global-definition
                           maybe-name-value!
                           build-global-assignment
                           build-global-reference
                           analyze-variable
                           build-lexical-assignment
                           build-lexical-reference
                           build-dynlet
                           build-conditional
                           build-application
                           build-void
                           decorate-source
                           get-global-definition-hook
                           put-global-definition-hook
                           gensym-hook
                           local-eval-hook
                           top-level-eval-hook
                           fx<
                           fx=
                           fx-
                           fx+
                           make-dynlet
                           make-letrec
                           make-let
                           make-lambda-case
                           make-lambda
                           make-sequence
                           make-application
                           make-conditional
                           make-toplevel-define
                           make-toplevel-set
                           make-toplevel-ref
                           make-module-set
                           make-module-ref
                           make-lexical-set
                           make-lexical-ref
                           make-primitive-ref
                           make-const
                           make-void
                           *mode*)
                         ((top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top)
                          (top))
                         ("i2467"
                          "i2465"
                          "i2463"
                          "i2461"
                          "i2459"
                          "i2457"
                          "i2455"
                          "i2453"
                          "i2451"
                          "i2449"
                          "i2447"
                          "i2445"
                          "i2443"
                          "i2441"
                          "i2439"
                          "i2437"
                          "i2435"
                          "i2433"
                          "i2431"
                          "i2429"
                          "i2427"
                          "i2425"
                          "i2423"
                          "i2421"
                          "i2419"
                          "i2417"
                          "i2415"
                          "i2413"
                          "i2411"
                          "i2409"
                          "i2407"
                          "i2405"
                          "i2403"
                          "i2401"
                          "i2399"
                          "i2397"
                          "i2396"
                          "i2395"
                          "i2393"
                          "i2392"
                          "i2391"
                          "i2390"
                          "i2389"
                          "i2387"
                          "i2385"
                          "i2383"
                          "i2381"
                          "i2379"
                          "i2377"
                          "i2375"
                          "i2373"
                          "i2370"
                          "i2368"
                          "i2367"
                          "i2366"
                          "i2365"
                          "i2364"
                          "i2363"
                          "i2361"
                          "i2359"
                          "i2357"
                          "i2355"
                          "i2354"
                          "i2352"
                          "i2350"
                          "i2348"
                          "i2346"
                          "i2344"
                          "i2342"
                          "i2340"
                          "i2339"
                          "i2337"
                          "i2335"
                          "i2334"
                          "i2333"
                          "i2331"
                          "i2330"
                          "i2328"
                          "i2326"
                          "i2324"
                          "i2322"
                          "i2320"
                          "i2318"
                          "i2316"
                          "i2314"
                          "i2312"
                          "i2310"
                          "i2308"
                          "i2306"
                          "i2304"
                          "i2302"
                          "i2300"
                          "i2298"
                          "i2296"
                          "i2294"
                          "i2292"
                          "i2290"
                          "i2288"
                          "i2286"
                          "i2284"
                          "i2282"
                          "i2280"
                          "i2278"
                          "i2276"
                          "i2274"
                          "i2272"
                          "i2270"
                          "i2268"
                          "i2266"
                          "i2265"
                          "i2263"
                          "i2261"
                          "i2259"
                          "i2257"
                          "i2255"
                          "i2253"
                          "i2251"
                          "i2249"
                          "i2247"
                          "i2245"
                          "i2243"
                          "i2241"
                          "i2239"
                          "i2237"
                          "i2235"
                          "i2233"
                          "i2231"
                          "i2229"
                          "i2227"
                          "i2225"
                          "i2223"
                          "i2221"
                          "i2219"
                          "i2217"
                          "i2214"))
                       #(ribcage
                         (define-structure
                           define-expansion-constructors
                           and-map*)
                         ((top) (top) (top))
                         ("i2066" "i2065" "i2063")))
                      (hygiene guile)))
                 #f)))
           (#{chi-void\ 2452}#
             (lambda () (#{build-void\ 2273}# #f)))
           (#{eval-local-transformer\ 2450}#
             (lambda (#{expanded\ 3287}# #{mod\ 3288}#)
               (let ((#{p\ 3292}#
                       (#{local-eval-hook\ 2264}#
                         #{expanded\ 3287}#
                         #{mod\ 3288}#)))
                 (if (procedure? #{p\ 3292}#)
                   (cons #{p\ 3292}# (module-name (current-module)))
                   (syntax-violation
                     #f
                     "nonprocedure transformer"
                     #{p\ 3292}#)))))
           (#{chi-local-syntax\ 2448}#
             (lambda (#{rec?\ 3293}#
                      #{e\ 3294}#
                      #{r\ 3295}#
                      #{w\ 3296}#
                      #{s\ 3297}#
                      #{mod\ 3298}#
                      #{k\ 3299}#)
               ((lambda (#{tmp\ 3307}#)
                  ((lambda (#{tmp\ 3308}#)
                     (if #{tmp\ 3308}#
                       (apply (lambda (#{_\ 3314}#
                                       #{id\ 3315}#
                                       #{val\ 3316}#
                                       #{e1\ 3317}#
                                       #{e2\ 3318}#)
                                (let ((#{ids\ 3320}# #{id\ 3315}#))
                                  (if (not (#{valid-bound-ids?\ 2416}#
                                             #{ids\ 3320}#))
                                    (syntax-violation
                                      #f
                                      "duplicate bound keyword"
                                      #{e\ 3294}#)
                                    (let ((#{labels\ 3323}#
                                            (#{gen-labels\ 2371}#
                                              #{ids\ 3320}#)))
                                      (let ((#{new-w\ 3325}#
                                              (#{make-binding-wrap\ 2400}#
                                                #{ids\ 3320}#
                                                #{labels\ 3323}#
                                                #{w\ 3296}#)))
                                        (#{k\ 3299}#
                                          (cons #{e1\ 3317}# #{e2\ 3318}#)
                                          (#{extend-env\ 2341}#
                                            #{labels\ 3323}#
                                            (let ((#{w\ 3329}#
                                                    (if #{rec?\ 3293}#
                                                      #{new-w\ 3325}#
                                                      #{w\ 3296}#))
                                                  (#{trans-r\ 3330}#
                                                    (#{macros-only-env\ 2345}#
                                                      #{r\ 3295}#)))
                                              (map (lambda (#{x\ 3331}#)
                                                     (cons 'macro
                                                           (#{eval-local-transformer\ 2450}#
                                                             (#{chi\ 2438}#
                                                               #{x\ 3331}#
                                                               #{trans-r\ 3330}#
                                                               #{w\ 3329}#
                                                               #{mod\ 3298}#)
                                                             #{mod\ 3298}#)))
                                                   #{val\ 3316}#))
                                            #{r\ 3295}#)
                                          #{new-w\ 3325}#
                                          #{s\ 3297}#
                                          #{mod\ 3298}#))))))
                              #{tmp\ 3308}#)
                       ((lambda (#{_\ 3336}#)
                          (syntax-violation
                            #f
                            "bad local syntax definition"
                            (#{source-wrap\ 2424}#
                              #{e\ 3294}#
                              #{w\ 3296}#
                              #{s\ 3297}#
                              #{mod\ 3298}#)))
                        #{tmp\ 3307}#)))
                   ($sc-dispatch
                     #{tmp\ 3307}#
                     '(any #(each (any any)) any . each-any))))
                #{e\ 3294}#)))
           (#{chi-body\ 2446}#
             (lambda (#{body\ 3337}#
                      #{outer-form\ 3338}#
                      #{r\ 3339}#
                      #{w\ 3340}#
                      #{mod\ 3341}#)
               (let ((#{r\ 3349}#
                       (cons '("placeholder" placeholder)
                             #{r\ 3339}#)))
                 (let ((#{ribcage\ 3351}#
                         (#{make-ribcage\ 2374}#
                           '()
                           '()
                           '())))
                   (let ((#{w\ 3354}#
                           (#{make-wrap\ 2358}#
                             (#{wrap-marks\ 2360}# #{w\ 3340}#)
                             (cons #{ribcage\ 3351}#
                                   (#{wrap-subst\ 2362}# #{w\ 3340}#)))))
                     (letrec ((#{parse\ 3363}#
                                (lambda (#{body\ 3364}#
                                         #{ids\ 3365}#
                                         #{labels\ 3366}#
                                         #{var-ids\ 3367}#
                                         #{vars\ 3368}#
                                         #{vals\ 3369}#
                                         #{bindings\ 3370}#)
                                  (if (null? #{body\ 3364}#)
                                    (syntax-violation
                                      #f
                                      "no expressions in body"
                                      #{outer-form\ 3338}#)
                                    (let ((#{e\ 3375}# (cdar #{body\ 3364}#))
                                          (#{er\ 3376}# (caar #{body\ 3364}#)))
                                      (call-with-values
                                        (lambda ()
                                          (#{syntax-type\ 2434}#
                                            #{e\ 3375}#
                                            #{er\ 3376}#
                                            '(())
                                            (#{source-annotation\ 2332}#
                                              #{er\ 3376}#)
                                            #{ribcage\ 3351}#
                                            #{mod\ 3341}#
                                            #f))
                                        (lambda (#{type\ 3378}#
                                                 #{value\ 3379}#
                                                 #{e\ 3380}#
                                                 #{w\ 3381}#
                                                 #{s\ 3382}#
                                                 #{mod\ 3383}#)
                                          (if (memv #{type\ 3378}#
                                                    '(define-form))
                                            (let ((#{id\ 3393}#
                                                    (#{wrap\ 2422}#
                                                      #{value\ 3379}#
                                                      #{w\ 3381}#
                                                      #{mod\ 3383}#))
                                                  (#{label\ 3394}#
                                                    (#{gen-label\ 2369}#)))
                                              (let ((#{var\ 3396}#
                                                      (#{gen-var\ 2466}#
                                                        #{id\ 3393}#)))
                                                (begin
                                                  (#{extend-ribcage!\ 2398}#
                                                    #{ribcage\ 3351}#
                                                    #{id\ 3393}#
                                                    #{label\ 3394}#)
                                                  (#{parse\ 3363}#
                                                    (cdr #{body\ 3364}#)
                                                    (cons #{id\ 3393}#
                                                          #{ids\ 3365}#)
                                                    (cons #{label\ 3394}#
                                                          #{labels\ 3366}#)
                                                    (cons #{id\ 3393}#
                                                          #{var-ids\ 3367}#)
                                                    (cons #{var\ 3396}#
                                                          #{vars\ 3368}#)
                                                    (cons (cons #{er\ 3376}#
                                                                (#{wrap\ 2422}#
                                                                  #{e\ 3380}#
                                                                  #{w\ 3381}#
                                                                  #{mod\ 3383}#))
                                                          #{vals\ 3369}#)
                                                    (cons (cons 'lexical
                                                                #{var\ 3396}#)
                                                          #{bindings\ 3370}#)))))
                                            (if (memv #{type\ 3378}#
                                                      '(define-syntax-form))
                                              (let ((#{id\ 3401}#
                                                      (#{wrap\ 2422}#
                                                        #{value\ 3379}#
                                                        #{w\ 3381}#
                                                        #{mod\ 3383}#))
                                                    (#{label\ 3402}#
                                                      (#{gen-label\ 2369}#)))
                                                (begin
                                                  (#{extend-ribcage!\ 2398}#
                                                    #{ribcage\ 3351}#
                                                    #{id\ 3401}#
                                                    #{label\ 3402}#)
                                                  (#{parse\ 3363}#
                                                    (cdr #{body\ 3364}#)
                                                    (cons #{id\ 3401}#
                                                          #{ids\ 3365}#)
                                                    (cons #{label\ 3402}#
                                                          #{labels\ 3366}#)
                                                    #{var-ids\ 3367}#
                                                    #{vars\ 3368}#
                                                    #{vals\ 3369}#
                                                    (cons (cons 'macro
                                                                (cons #{er\ 3376}#
                                                                      (#{wrap\ 2422}#
                                                                        #{e\ 3380}#
                                                                        #{w\ 3381}#
                                                                        #{mod\ 3383}#)))
                                                          #{bindings\ 3370}#))))
                                              (if (memv #{type\ 3378}#
                                                        '(begin-form))
                                                ((lambda (#{tmp\ 3405}#)
                                                   ((lambda (#{tmp\ 3406}#)
                                                      (if #{tmp\ 3406}#
                                                        (apply (lambda (#{_\ 3409}#
                                                                        #{e1\ 3410}#)
                                                                 (#{parse\ 3363}#
                                                                   (letrec ((#{f\ 3413}#
                                                                              (lambda (#{forms\ 3414}#)
                                                                                (if (null? #{forms\ 3414}#)
                                                                                  (cdr #{body\ 3364}#)
                                                                                  (cons (cons #{er\ 3376}#
                                                                                              (#{wrap\ 2422}#
                                                                                                (car #{forms\ 3414}#)
                                                                                                #{w\ 3381}#
                                                                                                #{mod\ 3383}#))
                                                                                        (#{f\ 3413}#
                                                                                          (cdr #{forms\ 3414}#)))))))
                                                                     (#{f\ 3413}#
                                                                       #{e1\ 3410}#))
                                                                   #{ids\ 3365}#
                                                                   #{labels\ 3366}#
                                                                   #{var-ids\ 3367}#
                                                                   #{vars\ 3368}#
                                                                   #{vals\ 3369}#
                                                                   #{bindings\ 3370}#))
                                                               #{tmp\ 3406}#)
                                                        (syntax-violation
                                                          #f
                                                          "source expression failed to match any pattern"
                                                          #{tmp\ 3405}#)))
                                                    ($sc-dispatch
                                                      #{tmp\ 3405}#
                                                      '(any . each-any))))
                                                 #{e\ 3380}#)
                                                (if (memv #{type\ 3378}#
                                                          '(local-syntax-form))
                                                  (#{chi-local-syntax\ 2448}#
                                                    #{value\ 3379}#
                                                    #{e\ 3380}#
                                                    #{er\ 3376}#
                                                    #{w\ 3381}#
                                                    #{s\ 3382}#
                                                    #{mod\ 3383}#
                                                    (lambda (#{forms\ 3417}#
                                                             #{er\ 3418}#
                                                             #{w\ 3419}#
                                                             #{s\ 3420}#
                                                             #{mod\ 3421}#)
                                                      (#{parse\ 3363}#
                                                        (letrec ((#{f\ 3429}#
                                                                   (lambda (#{forms\ 3430}#)
                                                                     (if (null? #{forms\ 3430}#)
                                                                       (cdr #{body\ 3364}#)
                                                                       (cons (cons #{er\ 3418}#
                                                                                   (#{wrap\ 2422}#
                                                                                     (car #{forms\ 3430}#)
                                                                                     #{w\ 3419}#
                                                                                     #{mod\ 3421}#))
                                                                             (#{f\ 3429}#
                                                                               (cdr #{forms\ 3430}#)))))))
                                                          (#{f\ 3429}#
                                                            #{forms\ 3417}#))
                                                        #{ids\ 3365}#
                                                        #{labels\ 3366}#
                                                        #{var-ids\ 3367}#
                                                        #{vars\ 3368}#
                                                        #{vals\ 3369}#
                                                        #{bindings\ 3370}#)))
                                                  (if (null? #{ids\ 3365}#)
                                                    (#{build-sequence\ 2305}#
                                                      #f
                                                      (map (lambda (#{x\ 3433}#)
                                                             (#{chi\ 2438}#
                                                               (cdr #{x\ 3433}#)
                                                               (car #{x\ 3433}#)
                                                               '(())
                                                               #{mod\ 3383}#))
                                                           (cons (cons #{er\ 3376}#
                                                                       (#{source-wrap\ 2424}#
                                                                         #{e\ 3380}#
                                                                         #{w\ 3381}#
                                                                         #{s\ 3382}#
                                                                         #{mod\ 3383}#))
                                                                 (cdr #{body\ 3364}#))))
                                                    (begin
                                                      (if (not (#{valid-bound-ids?\ 2416}#
                                                                 #{ids\ 3365}#))
                                                        (syntax-violation
                                                          #f
                                                          "invalid or duplicate identifier in definition"
                                                          #{outer-form\ 3338}#))
                                                      (letrec ((#{loop\ 3440}#
                                                                 (lambda (#{bs\ 3441}#
                                                                          #{er-cache\ 3442}#
                                                                          #{r-cache\ 3443}#)
                                                                   (if (not (null? #{bs\ 3441}#))
                                                                     (let ((#{b\ 3446}#
                                                                             (car #{bs\ 3441}#)))
                                                                       (if (eq? (car #{b\ 3446}#)
                                                                                'macro)
                                                                         (let ((#{er\ 3449}#
                                                                                 (cadr #{b\ 3446}#)))
                                                                           (let ((#{r-cache\ 3451}#
                                                                                   (if (eq? #{er\ 3449}#
                                                                                            #{er-cache\ 3442}#)
                                                                                     #{r-cache\ 3443}#
                                                                                     (#{macros-only-env\ 2345}#
                                                                                       #{er\ 3449}#))))
                                                                             (begin
                                                                               (set-cdr!
                                                                                 #{b\ 3446}#
                                                                                 (#{eval-local-transformer\ 2450}#
                                                                                   (#{chi\ 2438}#
                                                                                     (cddr #{b\ 3446}#)
                                                                                     #{r-cache\ 3451}#
                                                                                     '(())
                                                                                     #{mod\ 3383}#)
                                                                                   #{mod\ 3383}#))
                                                                               (#{loop\ 3440}#
                                                                                 (cdr #{bs\ 3441}#)
                                                                                 #{er\ 3449}#
                                                                                 #{r-cache\ 3451}#))))
                                                                         (#{loop\ 3440}#
                                                                           (cdr #{bs\ 3441}#)
                                                                           #{er-cache\ 3442}#
                                                                           #{r-cache\ 3443}#)))))))
                                                        (#{loop\ 3440}#
                                                          #{bindings\ 3370}#
                                                          #f
                                                          #f))
                                                      (set-cdr!
                                                        #{r\ 3349}#
                                                        (#{extend-env\ 2341}#
                                                          #{labels\ 3366}#
                                                          #{bindings\ 3370}#
                                                          (cdr #{r\ 3349}#)))
                                                      (#{build-letrec\ 2311}#
                                                        #f
                                                        (map syntax->datum
                                                             #{var-ids\ 3367}#)
                                                        #{vars\ 3368}#
                                                        (map (lambda (#{x\ 3454}#)
                                                               (#{chi\ 2438}#
                                                                 (cdr #{x\ 3454}#)
                                                                 (car #{x\ 3454}#)
                                                                 '(())
                                                                 #{mod\ 3383}#))
                                                             #{vals\ 3369}#)
                                                        (#{build-sequence\ 2305}#
                                                          #f
                                                          (map (lambda (#{x\ 3458}#)
                                                                 (#{chi\ 2438}#
                                                                   (cdr #{x\ 3458}#)
                                                                   (car #{x\ 3458}#)
                                                                   '(())
                                                                   #{mod\ 3383}#))
                                                               (cons (cons #{er\ 3376}#
                                                                           (#{source-wrap\ 2424}#
                                                                             #{e\ 3380}#
                                                                             #{w\ 3381}#
                                                                             #{s\ 3382}#
                                                                             #{mod\ 3383}#))
                                                                     (cdr #{body\ 3364}#))))))))))))))))))
                       (#{parse\ 3363}#
                         (map (lambda (#{x\ 3371}#)
                                (cons #{r\ 3349}#
                                      (#{wrap\ 2422}#
                                        #{x\ 3371}#
                                        #{w\ 3354}#
                                        #{mod\ 3341}#)))
                              #{body\ 3337}#)
                         '()
                         '()
                         '()
                         '()
                         '()
                         '())))))))
           (#{chi-macro\ 2444}#
             (lambda (#{p\ 3461}#
                      #{e\ 3462}#
                      #{r\ 3463}#
                      #{w\ 3464}#
                      #{rib\ 3465}#
                      #{mod\ 3466}#)
               (letrec ((#{rebuild-macro-output\ 3474}#
                          (lambda (#{x\ 3475}# #{m\ 3476}#)
                            (if (pair? #{x\ 3475}#)
                              (cons (#{rebuild-macro-output\ 3474}#
                                      (car #{x\ 3475}#)
                                      #{m\ 3476}#)
                                    (#{rebuild-macro-output\ 3474}#
                                      (cdr #{x\ 3475}#)
                                      #{m\ 3476}#))
                              (if (#{syntax-object?\ 2317}# #{x\ 3475}#)
                                (let ((#{w\ 3484}#
                                        (#{syntax-object-wrap\ 2321}#
                                          #{x\ 3475}#)))
                                  (let ((#{ms\ 3487}#
                                          (#{wrap-marks\ 2360}# #{w\ 3484}#))
                                        (#{s\ 3488}#
                                          (#{wrap-subst\ 2362}# #{w\ 3484}#)))
                                    (if (if (pair? #{ms\ 3487}#)
                                          (eq? (car #{ms\ 3487}#) #f)
                                          #f)
                                      (#{make-syntax-object\ 2315}#
                                        (#{syntax-object-expression\ 2319}#
                                          #{x\ 3475}#)
                                        (#{make-wrap\ 2358}#
                                          (cdr #{ms\ 3487}#)
                                          (if #{rib\ 3465}#
                                            (cons #{rib\ 3465}#
                                                  (cdr #{s\ 3488}#))
                                            (cdr #{s\ 3488}#)))
                                        (#{syntax-object-module\ 2323}#
                                          #{x\ 3475}#))
                                      (#{make-syntax-object\ 2315}#
                                        (#{syntax-object-expression\ 2319}#
                                          #{x\ 3475}#)
                                        (#{make-wrap\ 2358}#
                                          (cons #{m\ 3476}# #{ms\ 3487}#)
                                          (if #{rib\ 3465}#
                                            (cons #{rib\ 3465}#
                                                  (cons 'shift
                                                        #{s\ 3488}#))
                                            (cons (quote shift) #{s\ 3488}#)))
                                        (cons 'hygiene
                                              (cdr #{p\ 3461}#))))))
                                (if (vector? #{x\ 3475}#)
                                  (let ((#{n\ 3496}#
                                          (vector-length #{x\ 3475}#)))
                                    (let ((#{v\ 3498}#
                                            (make-vector #{n\ 3496}#)))
                                      (letrec ((#{loop\ 3501}#
                                                 (lambda (#{i\ 3502}#)
                                                   (if (#{fx=\ 2258}#
                                                         #{i\ 3502}#
                                                         #{n\ 3496}#)
                                                     (begin
                                                       (if #f #f)
                                                       #{v\ 3498}#)
                                                     (begin
                                                       (vector-set!
                                                         #{v\ 3498}#
                                                         #{i\ 3502}#
                                                         (#{rebuild-macro-output\ 3474}#
                                                           (vector-ref
                                                             #{x\ 3475}#
                                                             #{i\ 3502}#)
                                                           #{m\ 3476}#))
                                                       (#{loop\ 3501}#
                                                         (#{fx+\ 2254}#
                                                           #{i\ 3502}#
                                                           1)))))))
                                        (#{loop\ 3501}# 0))))
                                  (if (symbol? #{x\ 3475}#)
                                    (syntax-violation
                                      #f
                                      "encountered raw symbol in macro output"
                                      (#{source-wrap\ 2424}#
                                        #{e\ 3462}#
                                        #{w\ 3464}#
                                        (#{wrap-subst\ 2362}# #{w\ 3464}#)
                                        #{mod\ 3466}#)
                                      #{x\ 3475}#)
                                    #{x\ 3475}#)))))))
                 (#{rebuild-macro-output\ 3474}#
                   ((car #{p\ 3461}#)
                    (#{wrap\ 2422}#
                      #{e\ 3462}#
                      (#{anti-mark\ 2394}# #{w\ 3464}#)
                      #{mod\ 3466}#))
                   (gensym "m")))))
           (#{chi-application\ 2442}#
             (lambda (#{x\ 3509}#
                      #{e\ 3510}#
                      #{r\ 3511}#
                      #{w\ 3512}#
                      #{s\ 3513}#
                      #{mod\ 3514}#)
               ((lambda (#{tmp\ 3521}#)
                  ((lambda (#{tmp\ 3522}#)
                     (if #{tmp\ 3522}#
                       (apply (lambda (#{e0\ 3525}# #{e1\ 3526}#)
                                (#{build-application\ 2275}#
                                  #{s\ 3513}#
                                  #{x\ 3509}#
                                  (map (lambda (#{e\ 3527}#)
                                         (#{chi\ 2438}#
                                           #{e\ 3527}#
                                           #{r\ 3511}#
                                           #{w\ 3512}#
                                           #{mod\ 3514}#))
                                       #{e1\ 3526}#)))
                              #{tmp\ 3522}#)
                       (syntax-violation
                         #f
                         "source expression failed to match any pattern"
                         #{tmp\ 3521}#)))
                   ($sc-dispatch
                     #{tmp\ 3521}#
                     '(any . each-any))))
                #{e\ 3510}#)))
           (#{chi-expr\ 2440}#
             (lambda (#{type\ 3530}#
                      #{value\ 3531}#
                      #{e\ 3532}#
                      #{r\ 3533}#
                      #{w\ 3534}#
                      #{s\ 3535}#
                      #{mod\ 3536}#)
               (if (memv #{type\ 3530}# (quote (lexical)))
                 (#{build-lexical-reference\ 2281}#
                   'value
                   #{s\ 3535}#
                   #{e\ 3532}#
                   #{value\ 3531}#)
                 (if (memv #{type\ 3530}# (quote (core core-form)))
                   (#{value\ 3531}#
                     #{e\ 3532}#
                     #{r\ 3533}#
                     #{w\ 3534}#
                     #{s\ 3535}#
                     #{mod\ 3536}#)
                   (if (memv #{type\ 3530}# (quote (module-ref)))
                     (call-with-values
                       (lambda ()
                         (#{value\ 3531}#
                           #{e\ 3532}#
                           #{r\ 3533}#
                           #{w\ 3534}#))
                       (lambda (#{e\ 3547}#
                                #{r\ 3548}#
                                #{w\ 3549}#
                                #{s\ 3550}#
                                #{mod\ 3551}#)
                         (#{chi\ 2438}#
                           #{e\ 3547}#
                           #{r\ 3548}#
                           #{w\ 3549}#
                           #{mod\ 3551}#)))
                     (if (memv #{type\ 3530}# (quote (lexical-call)))
                       (#{chi-application\ 2442}#
                         (#{build-lexical-reference\ 2281}#
                           'fun
                           (#{source-annotation\ 2332}# (car #{e\ 3532}#))
                           (car #{e\ 3532}#)
                           #{value\ 3531}#)
                         #{e\ 3532}#
                         #{r\ 3533}#
                         #{w\ 3534}#
                         #{s\ 3535}#
                         #{mod\ 3536}#)
                       (if (memv #{type\ 3530}# (quote (global-call)))
                         (#{chi-application\ 2442}#
                           (#{build-global-reference\ 2287}#
                             (#{source-annotation\ 2332}# (car #{e\ 3532}#))
                             (if (#{syntax-object?\ 2317}# #{value\ 3531}#)
                               (#{syntax-object-expression\ 2319}#
                                 #{value\ 3531}#)
                               #{value\ 3531}#)
                             (if (#{syntax-object?\ 2317}# #{value\ 3531}#)
                               (#{syntax-object-module\ 2323}# #{value\ 3531}#)
                               #{mod\ 3536}#))
                           #{e\ 3532}#
                           #{r\ 3533}#
                           #{w\ 3534}#
                           #{s\ 3535}#
                           #{mod\ 3536}#)
                         (if (memv #{type\ 3530}# (quote (constant)))
                           (#{build-data\ 2303}#
                             #{s\ 3535}#
                             (#{strip\ 2464}#
                               (#{source-wrap\ 2424}#
                                 #{e\ 3532}#
                                 #{w\ 3534}#
                                 #{s\ 3535}#
                                 #{mod\ 3536}#)
                               '(())))
                           (if (memv #{type\ 3530}# (quote (global)))
                             (#{build-global-reference\ 2287}#
                               #{s\ 3535}#
                               #{value\ 3531}#
                               #{mod\ 3536}#)
                             (if (memv #{type\ 3530}# (quote (call)))
                               (#{chi-application\ 2442}#
                                 (#{chi\ 2438}#
                                   (car #{e\ 3532}#)
                                   #{r\ 3533}#
                                   #{w\ 3534}#
                                   #{mod\ 3536}#)
                                 #{e\ 3532}#
                                 #{r\ 3533}#
                                 #{w\ 3534}#
                                 #{s\ 3535}#
                                 #{mod\ 3536}#)
                               (if (memv #{type\ 3530}# (quote (begin-form)))
                                 ((lambda (#{tmp\ 3564}#)
                                    ((lambda (#{tmp\ 3565}#)
                                       (if #{tmp\ 3565}#
                                         (apply (lambda (#{_\ 3569}#
                                                         #{e1\ 3570}#
                                                         #{e2\ 3571}#)
                                                  (#{chi-sequence\ 2426}#
                                                    (cons #{e1\ 3570}#
                                                          #{e2\ 3571}#)
                                                    #{r\ 3533}#
                                                    #{w\ 3534}#
                                                    #{s\ 3535}#
                                                    #{mod\ 3536}#))
                                                #{tmp\ 3565}#)
                                         (syntax-violation
                                           #f
                                           "source expression failed to match any pattern"
                                           #{tmp\ 3564}#)))
                                     ($sc-dispatch
                                       #{tmp\ 3564}#
                                       '(any any . each-any))))
                                  #{e\ 3532}#)
                                 (if (memv #{type\ 3530}#
                                           '(local-syntax-form))
                                   (#{chi-local-syntax\ 2448}#
                                     #{value\ 3531}#
                                     #{e\ 3532}#
                                     #{r\ 3533}#
                                     #{w\ 3534}#
                                     #{s\ 3535}#
                                     #{mod\ 3536}#
                                     #{chi-sequence\ 2426}#)
                                   (if (memv #{type\ 3530}#
                                             '(eval-when-form))
                                     ((lambda (#{tmp\ 3575}#)
                                        ((lambda (#{tmp\ 3576}#)
                                           (if #{tmp\ 3576}#
                                             (apply (lambda (#{_\ 3581}#
                                                             #{x\ 3582}#
                                                             #{e1\ 3583}#
                                                             #{e2\ 3584}#)
                                                      (let ((#{when-list\ 3586}#
                                                              (#{chi-when-list\ 2432}#
                                                                #{e\ 3532}#
                                                                #{x\ 3582}#
                                                                #{w\ 3534}#)))
                                                        (if (memq 'eval
                                                                  #{when-list\ 3586}#)
                                                          (#{chi-sequence\ 2426}#
                                                            (cons #{e1\ 3583}#
                                                                  #{e2\ 3584}#)
                                                            #{r\ 3533}#
                                                            #{w\ 3534}#
                                                            #{s\ 3535}#
                                                            #{mod\ 3536}#)
                                                          (#{chi-void\ 2452}#))))
                                                    #{tmp\ 3576}#)
                                             (syntax-violation
                                               #f
                                               "source expression failed to match any pattern"
                                               #{tmp\ 3575}#)))
                                         ($sc-dispatch
                                           #{tmp\ 3575}#
                                           '(any each-any any . each-any))))
                                      #{e\ 3532}#)
                                     (if (memv #{type\ 3530}#
                                               '(define-form
                                                  define-syntax-form))
                                       (syntax-violation
                                         #f
                                         "definition in expression context"
                                         #{e\ 3532}#
                                         (#{wrap\ 2422}#
                                           #{value\ 3531}#
                                           #{w\ 3534}#
                                           #{mod\ 3536}#))
                                       (if (memv #{type\ 3530}#
                                                 '(syntax))
                                         (syntax-violation
                                           #f
                                           "reference to pattern variable outside syntax form"
                                           (#{source-wrap\ 2424}#
                                             #{e\ 3532}#
                                             #{w\ 3534}#
                                             #{s\ 3535}#
                                             #{mod\ 3536}#))
                                         (if (memv #{type\ 3530}#
                                                   '(displaced-lexical))
                                           (syntax-violation
                                             #f
                                             "reference to identifier outside its scope"
                                             (#{source-wrap\ 2424}#
                                               #{e\ 3532}#
                                               #{w\ 3534}#
                                               #{s\ 3535}#
                                               #{mod\ 3536}#))
                                           (syntax-violation
                                             #f
                                             "unexpected syntax"
                                             (#{source-wrap\ 2424}#
                                               #{e\ 3532}#
                                               #{w\ 3534}#
                                               #{s\ 3535}#
                                               #{mod\ 3536}#))))))))))))))))))
           (#{chi\ 2438}#
             (lambda (#{e\ 3593}#
                      #{r\ 3594}#
                      #{w\ 3595}#
                      #{mod\ 3596}#)
               (call-with-values
                 (lambda ()
                   (#{syntax-type\ 2434}#
                     #{e\ 3593}#
                     #{r\ 3594}#
                     #{w\ 3595}#
                     (#{source-annotation\ 2332}# #{e\ 3593}#)
                     #f
                     #{mod\ 3596}#
                     #f))
                 (lambda (#{type\ 3601}#
                          #{value\ 3602}#
                          #{e\ 3603}#
                          #{w\ 3604}#
                          #{s\ 3605}#
                          #{mod\ 3606}#)
                   (#{chi-expr\ 2440}#
                     #{type\ 3601}#
                     #{value\ 3602}#
                     #{e\ 3603}#
                     #{r\ 3594}#
                     #{w\ 3604}#
                     #{s\ 3605}#
                     #{mod\ 3606}#)))))
           (#{chi-top\ 2436}#
             (lambda (#{e\ 3613}#
                      #{r\ 3614}#
                      #{w\ 3615}#
                      #{m\ 3616}#
                      #{esew\ 3617}#
                      #{mod\ 3618}#)
               (call-with-values
                 (lambda ()
                   (#{syntax-type\ 2434}#
                     #{e\ 3613}#
                     #{r\ 3614}#
                     #{w\ 3615}#
                     (#{source-annotation\ 2332}# #{e\ 3613}#)
                     #f
                     #{mod\ 3618}#
                     #f))
                 (lambda (#{type\ 3639}#
                          #{value\ 3640}#
                          #{e\ 3641}#
                          #{w\ 3642}#
                          #{s\ 3643}#
                          #{mod\ 3644}#)
                   (if (memv #{type\ 3639}# (quote (begin-form)))
                     ((lambda (#{tmp\ 3652}#)
                        ((lambda (#{tmp\ 3653}#)
                           (if #{tmp\ 3653}#
                             (apply (lambda (#{_\ 3655}#) (#{chi-void\ 2452}#))
                                    #{tmp\ 3653}#)
                             ((lambda (#{tmp\ 3656}#)
                                (if #{tmp\ 3656}#
                                  (apply (lambda (#{_\ 3660}#
                                                  #{e1\ 3661}#
                                                  #{e2\ 3662}#)
                                           (#{chi-top-sequence\ 2428}#
                                             (cons #{e1\ 3661}# #{e2\ 3662}#)
                                             #{r\ 3614}#
                                             #{w\ 3642}#
                                             #{s\ 3643}#
                                             #{m\ 3616}#
                                             #{esew\ 3617}#
                                             #{mod\ 3644}#))
                                         #{tmp\ 3656}#)
                                  (syntax-violation
                                    #f
                                    "source expression failed to match any pattern"
                                    #{tmp\ 3652}#)))
                              ($sc-dispatch
                                #{tmp\ 3652}#
                                '(any any . each-any)))))
                         ($sc-dispatch #{tmp\ 3652}# (quote (any)))))
                      #{e\ 3641}#)
                     (if (memv #{type\ 3639}# (quote (local-syntax-form)))
                       (#{chi-local-syntax\ 2448}#
                         #{value\ 3640}#
                         #{e\ 3641}#
                         #{r\ 3614}#
                         #{w\ 3642}#
                         #{s\ 3643}#
                         #{mod\ 3644}#
                         (lambda (#{body\ 3665}#
                                  #{r\ 3666}#
                                  #{w\ 3667}#
                                  #{s\ 3668}#
                                  #{mod\ 3669}#)
                           (#{chi-top-sequence\ 2428}#
                             #{body\ 3665}#
                             #{r\ 3666}#
                             #{w\ 3667}#
                             #{s\ 3668}#
                             #{m\ 3616}#
                             #{esew\ 3617}#
                             #{mod\ 3669}#)))
                       (if (memv #{type\ 3639}# (quote (eval-when-form)))
                         ((lambda (#{tmp\ 3676}#)
                            ((lambda (#{tmp\ 3677}#)
                               (if #{tmp\ 3677}#
                                 (apply (lambda (#{_\ 3682}#
                                                 #{x\ 3683}#
                                                 #{e1\ 3684}#
                                                 #{e2\ 3685}#)
                                          (let ((#{when-list\ 3688}#
                                                  (#{chi-when-list\ 2432}#
                                                    #{e\ 3641}#
                                                    #{x\ 3683}#
                                                    #{w\ 3642}#))
                                                (#{body\ 3689}#
                                                  (cons #{e1\ 3684}#
                                                        #{e2\ 3685}#)))
                                            (if (eq? #{m\ 3616}# (quote e))
                                              (if (memq 'eval
                                                        #{when-list\ 3688}#)
                                                (#{chi-top-sequence\ 2428}#
                                                  #{body\ 3689}#
                                                  #{r\ 3614}#
                                                  #{w\ 3642}#
                                                  #{s\ 3643}#
                                                  (if (memq 'expand
                                                            #{when-list\ 3688}#)
                                                    'c&e
                                                    'e)
                                                  '(eval)
                                                  #{mod\ 3644}#)
                                                (begin
                                                  (if (memq 'expand
                                                            #{when-list\ 3688}#)
                                                    (#{top-level-eval-hook\ 2262}#
                                                      (#{chi-top-sequence\ 2428}#
                                                        #{body\ 3689}#
                                                        #{r\ 3614}#
                                                        #{w\ 3642}#
                                                        #{s\ 3643}#
                                                        'e
                                                        '(eval)
                                                        #{mod\ 3644}#)
                                                      #{mod\ 3644}#))
                                                  (#{chi-void\ 2452}#)))
                                              (if (memq 'load
                                                        #{when-list\ 3688}#)
                                                (if (let ((#{t\ 3698}#
                                                            (memq 'compile
                                                                  #{when-list\ 3688}#)))
                                                      (if #{t\ 3698}#
                                                        #{t\ 3698}#
                                                        (let ((#{t\ 3701}#
                                                                (memq 'expand
                                                                      #{when-list\ 3688}#)))
                                                          (if #{t\ 3701}#
                                                            #{t\ 3701}#
                                                            (if (eq? #{m\ 3616}#
                                                                     'c&e)
                                                              (memq 'eval
                                                                    #{when-list\ 3688}#)
                                                              #f)))))
                                                  (#{chi-top-sequence\ 2428}#
                                                    #{body\ 3689}#
                                                    #{r\ 3614}#
                                                    #{w\ 3642}#
                                                    #{s\ 3643}#
                                                    'c&e
                                                    '(compile load)
                                                    #{mod\ 3644}#)
                                                  (if (memq #{m\ 3616}#
                                                            '(c c&e))
                                                    (#{chi-top-sequence\ 2428}#
                                                      #{body\ 3689}#
                                                      #{r\ 3614}#
                                                      #{w\ 3642}#
                                                      #{s\ 3643}#
                                                      'c
                                                      '(load)
                                                      #{mod\ 3644}#)
                                                    (#{chi-void\ 2452}#)))
                                                (if (let ((#{t\ 3709}#
                                                            (memq 'compile
                                                                  #{when-list\ 3688}#)))
                                                      (if #{t\ 3709}#
                                                        #{t\ 3709}#
                                                        (let ((#{t\ 3712}#
                                                                (memq 'expand
                                                                      #{when-list\ 3688}#)))
                                                          (if #{t\ 3712}#
                                                            #{t\ 3712}#
                                                            (if (eq? #{m\ 3616}#
                                                                     'c&e)
                                                              (memq 'eval
                                                                    #{when-list\ 3688}#)
                                                              #f)))))
                                                  (begin
                                                    (#{top-level-eval-hook\ 2262}#
                                                      (#{chi-top-sequence\ 2428}#
                                                        #{body\ 3689}#
                                                        #{r\ 3614}#
                                                        #{w\ 3642}#
                                                        #{s\ 3643}#
                                                        'e
                                                        '(eval)
                                                        #{mod\ 3644}#)
                                                      #{mod\ 3644}#)
                                                    (#{chi-void\ 2452}#))
                                                  (#{chi-void\ 2452}#))))))
                                        #{tmp\ 3677}#)
                                 (syntax-violation
                                   #f
                                   "source expression failed to match any pattern"
                                   #{tmp\ 3676}#)))
                             ($sc-dispatch
                               #{tmp\ 3676}#
                               '(any each-any any . each-any))))
                          #{e\ 3641}#)
                         (if (memv #{type\ 3639}#
                                   '(define-syntax-form))
                           (let ((#{n\ 3720}#
                                   (#{id-var-name\ 2410}#
                                     #{value\ 3640}#
                                     #{w\ 3642}#))
                                 (#{r\ 3721}#
                                   (#{macros-only-env\ 2345}# #{r\ 3614}#)))
                             (if (memv #{m\ 3616}# (quote (c)))
                               (if (memq (quote compile) #{esew\ 3617}#)
                                 (let ((#{e\ 3724}#
                                         (#{chi-install-global\ 2430}#
                                           #{n\ 3720}#
                                           (#{chi\ 2438}#
                                             #{e\ 3641}#
                                             #{r\ 3721}#
                                             #{w\ 3642}#
                                             #{mod\ 3644}#))))
                                   (begin
                                     (#{top-level-eval-hook\ 2262}#
                                       #{e\ 3724}#
                                       #{mod\ 3644}#)
                                     (if (memq (quote load) #{esew\ 3617}#)
                                       #{e\ 3724}#
                                       (#{chi-void\ 2452}#))))
                                 (if (memq (quote load) #{esew\ 3617}#)
                                   (#{chi-install-global\ 2430}#
                                     #{n\ 3720}#
                                     (#{chi\ 2438}#
                                       #{e\ 3641}#
                                       #{r\ 3721}#
                                       #{w\ 3642}#
                                       #{mod\ 3644}#))
                                   (#{chi-void\ 2452}#)))
                               (if (memv #{m\ 3616}# (quote (c&e)))
                                 (let ((#{e\ 3727}#
                                         (#{chi-install-global\ 2430}#
                                           #{n\ 3720}#
                                           (#{chi\ 2438}#
                                             #{e\ 3641}#
                                             #{r\ 3721}#
                                             #{w\ 3642}#
                                             #{mod\ 3644}#))))
                                   (begin
                                     (#{top-level-eval-hook\ 2262}#
                                       #{e\ 3727}#
                                       #{mod\ 3644}#)
                                     #{e\ 3727}#))
                                 (begin
                                   (if (memq (quote eval) #{esew\ 3617}#)
                                     (#{top-level-eval-hook\ 2262}#
                                       (#{chi-install-global\ 2430}#
                                         #{n\ 3720}#
                                         (#{chi\ 2438}#
                                           #{e\ 3641}#
                                           #{r\ 3721}#
                                           #{w\ 3642}#
                                           #{mod\ 3644}#))
                                       #{mod\ 3644}#))
                                   (#{chi-void\ 2452}#)))))
                           (if (memv #{type\ 3639}# (quote (define-form)))
                             (let ((#{n\ 3732}#
                                     (#{id-var-name\ 2410}#
                                       #{value\ 3640}#
                                       #{w\ 3642}#)))
                               (let ((#{type\ 3734}#
                                       (#{binding-type\ 2336}#
                                         (#{lookup\ 2347}#
                                           #{n\ 3732}#
                                           #{r\ 3614}#
                                           #{mod\ 3644}#))))
                                 (if (memv #{type\ 3734}#
                                           '(global core macro module-ref))
                                   (begin
                                     (if (if (memq #{m\ 3616}# (quote (c c&e)))
                                           (if (not (module-local-variable
                                                      (current-module)
                                                      #{n\ 3732}#))
                                             (current-module)
                                             #f)
                                           #f)
                                       (let ((#{old\ 3740}#
                                               (module-variable
                                                 (current-module)
                                                 #{n\ 3732}#)))
                                         (module-define!
                                           (current-module)
                                           #{n\ 3732}#
                                           (if (variable? #{old\ 3740}#)
                                             (variable-ref #{old\ 3740}#)
                                             #f))))
                                     (let ((#{x\ 3743}#
                                             (#{build-global-definition\ 2293}#
                                               #{s\ 3643}#
                                               #{n\ 3732}#
                                               (#{chi\ 2438}#
                                                 #{e\ 3641}#
                                                 #{r\ 3614}#
                                                 #{w\ 3642}#
                                                 #{mod\ 3644}#))))
                                       (begin
                                         (if (eq? #{m\ 3616}# (quote c&e))
                                           (#{top-level-eval-hook\ 2262}#
                                             #{x\ 3743}#
                                             #{mod\ 3644}#))
                                         #{x\ 3743}#)))
                                   (if (memv #{type\ 3734}#
                                             '(displaced-lexical))
                                     (syntax-violation
                                       #f
                                       "identifier out of context"
                                       #{e\ 3641}#
                                       (#{wrap\ 2422}#
                                         #{value\ 3640}#
                                         #{w\ 3642}#
                                         #{mod\ 3644}#))
                                     (syntax-violation
                                       #f
                                       "cannot define keyword at top level"
                                       #{e\ 3641}#
                                       (#{wrap\ 2422}#
                                         #{value\ 3640}#
                                         #{w\ 3642}#
                                         #{mod\ 3644}#))))))
                             (let ((#{x\ 3749}#
                                     (#{chi-expr\ 2440}#
                                       #{type\ 3639}#
                                       #{value\ 3640}#
                                       #{e\ 3641}#
                                       #{r\ 3614}#
                                       #{w\ 3642}#
                                       #{s\ 3643}#
                                       #{mod\ 3644}#)))
                               (begin
                                 (if (eq? #{m\ 3616}# (quote c&e))
                                   (#{top-level-eval-hook\ 2262}#
                                     #{x\ 3749}#
                                     #{mod\ 3644}#))
                                 #{x\ 3749}#)))))))))))
           (#{syntax-type\ 2434}#
             (lambda (#{e\ 3750}#
                      #{r\ 3751}#
                      #{w\ 3752}#
                      #{s\ 3753}#
                      #{rib\ 3754}#
                      #{mod\ 3755}#
                      #{for-car?\ 3756}#)
               (if (symbol? #{e\ 3750}#)
                 (let ((#{n\ 3768}#
                         (#{id-var-name\ 2410}# #{e\ 3750}# #{w\ 3752}#)))
                   (let ((#{b\ 3770}#
                           (#{lookup\ 2347}#
                             #{n\ 3768}#
                             #{r\ 3751}#
                             #{mod\ 3755}#)))
                     (let ((#{type\ 3772}#
                             (#{binding-type\ 2336}# #{b\ 3770}#)))
                       (if (memv #{type\ 3772}# (quote (lexical)))
                         (values
                           #{type\ 3772}#
                           (#{binding-value\ 2338}# #{b\ 3770}#)
                           #{e\ 3750}#
                           #{w\ 3752}#
                           #{s\ 3753}#
                           #{mod\ 3755}#)
                         (if (memv #{type\ 3772}# (quote (global)))
                           (values
                             #{type\ 3772}#
                             #{n\ 3768}#
                             #{e\ 3750}#
                             #{w\ 3752}#
                             #{s\ 3753}#
                             #{mod\ 3755}#)
                           (if (memv #{type\ 3772}# (quote (macro)))
                             (if #{for-car?\ 3756}#
                               (values
                                 #{type\ 3772}#
                                 (#{binding-value\ 2338}# #{b\ 3770}#)
                                 #{e\ 3750}#
                                 #{w\ 3752}#
                                 #{s\ 3753}#
                                 #{mod\ 3755}#)
                               (#{syntax-type\ 2434}#
                                 (#{chi-macro\ 2444}#
                                   (#{binding-value\ 2338}# #{b\ 3770}#)
                                   #{e\ 3750}#
                                   #{r\ 3751}#
                                   #{w\ 3752}#
                                   #{rib\ 3754}#
                                   #{mod\ 3755}#)
                                 #{r\ 3751}#
                                 '(())
                                 #{s\ 3753}#
                                 #{rib\ 3754}#
                                 #{mod\ 3755}#
                                 #f))
                             (values
                               #{type\ 3772}#
                               (#{binding-value\ 2338}# #{b\ 3770}#)
                               #{e\ 3750}#
                               #{w\ 3752}#
                               #{s\ 3753}#
                               #{mod\ 3755}#)))))))
                 (if (pair? #{e\ 3750}#)
                   (let ((#{first\ 3781}# (car #{e\ 3750}#)))
                     (call-with-values
                       (lambda ()
                         (#{syntax-type\ 2434}#
                           #{first\ 3781}#
                           #{r\ 3751}#
                           #{w\ 3752}#
                           #{s\ 3753}#
                           #{rib\ 3754}#
                           #{mod\ 3755}#
                           #t))
                       (lambda (#{ftype\ 3782}#
                                #{fval\ 3783}#
                                #{fe\ 3784}#
                                #{fw\ 3785}#
                                #{fs\ 3786}#
                                #{fmod\ 3787}#)
                         (if (memv #{ftype\ 3782}# (quote (lexical)))
                           (values
                             'lexical-call
                             #{fval\ 3783}#
                             #{e\ 3750}#
                             #{w\ 3752}#
                             #{s\ 3753}#
                             #{mod\ 3755}#)
                           (if (memv #{ftype\ 3782}# (quote (global)))
                             (values
                               'global-call
                               (#{make-syntax-object\ 2315}#
                                 #{fval\ 3783}#
                                 #{w\ 3752}#
                                 #{fmod\ 3787}#)
                               #{e\ 3750}#
                               #{w\ 3752}#
                               #{s\ 3753}#
                               #{mod\ 3755}#)
                             (if (memv #{ftype\ 3782}# (quote (macro)))
                               (#{syntax-type\ 2434}#
                                 (#{chi-macro\ 2444}#
                                   #{fval\ 3783}#
                                   #{e\ 3750}#
                                   #{r\ 3751}#
                                   #{w\ 3752}#
                                   #{rib\ 3754}#
                                   #{mod\ 3755}#)
                                 #{r\ 3751}#
                                 '(())
                                 #{s\ 3753}#
                                 #{rib\ 3754}#
                                 #{mod\ 3755}#
                                 #{for-car?\ 3756}#)
                               (if (memv #{ftype\ 3782}# (quote (module-ref)))
                                 (call-with-values
                                   (lambda ()
                                     (#{fval\ 3783}#
                                       #{e\ 3750}#
                                       #{r\ 3751}#
                                       #{w\ 3752}#))
                                   (lambda (#{e\ 3799}#
                                            #{r\ 3800}#
                                            #{w\ 3801}#
                                            #{s\ 3802}#
                                            #{mod\ 3803}#)
                                     (#{syntax-type\ 2434}#
                                       #{e\ 3799}#
                                       #{r\ 3800}#
                                       #{w\ 3801}#
                                       #{s\ 3802}#
                                       #{rib\ 3754}#
                                       #{mod\ 3803}#
                                       #{for-car?\ 3756}#)))
                                 (if (memv #{ftype\ 3782}# (quote (core)))
                                   (values
                                     'core-form
                                     #{fval\ 3783}#
                                     #{e\ 3750}#
                                     #{w\ 3752}#
                                     #{s\ 3753}#
                                     #{mod\ 3755}#)
                                   (if (memv #{ftype\ 3782}#
                                             '(local-syntax))
                                     (values
                                       'local-syntax-form
                                       #{fval\ 3783}#
                                       #{e\ 3750}#
                                       #{w\ 3752}#
                                       #{s\ 3753}#
                                       #{mod\ 3755}#)
                                     (if (memv #{ftype\ 3782}# (quote (begin)))
                                       (values
                                         'begin-form
                                         #f
                                         #{e\ 3750}#
                                         #{w\ 3752}#
                                         #{s\ 3753}#
                                         #{mod\ 3755}#)
                                       (if (memv #{ftype\ 3782}#
                                                 '(eval-when))
                                         (values
                                           'eval-when-form
                                           #f
                                           #{e\ 3750}#
                                           #{w\ 3752}#
                                           #{s\ 3753}#
                                           #{mod\ 3755}#)
                                         (if (memv #{ftype\ 3782}#
                                                   '(define))
                                           ((lambda (#{tmp\ 3814}#)
                                              ((lambda (#{tmp\ 3815}#)
                                                 (if (if #{tmp\ 3815}#
                                                       (apply (lambda (#{_\ 3819}#
                                                                       #{name\ 3820}#
                                                                       #{val\ 3821}#)
                                                                (#{id?\ 2353}#
                                                                  #{name\ 3820}#))
                                                              #{tmp\ 3815}#)
                                                       #f)
                                                   (apply (lambda (#{_\ 3825}#
                                                                   #{name\ 3826}#
                                                                   #{val\ 3827}#)
                                                            (values
                                                              'define-form
                                                              #{name\ 3826}#
                                                              #{val\ 3827}#
                                                              #{w\ 3752}#
                                                              #{s\ 3753}#
                                                              #{mod\ 3755}#))
                                                          #{tmp\ 3815}#)
                                                   ((lambda (#{tmp\ 3828}#)
                                                      (if (if #{tmp\ 3828}#
                                                            (apply (lambda (#{_\ 3834}#
                                                                            #{name\ 3835}#
                                                                            #{args\ 3836}#
                                                                            #{e1\ 3837}#
                                                                            #{e2\ 3838}#)
                                                                     (if (#{id?\ 2353}#
                                                                           #{name\ 3835}#)
                                                                       (#{valid-bound-ids?\ 2416}#
                                                                         (#{lambda-var-list\ 2468}#
                                                                           #{args\ 3836}#))
                                                                       #f))
                                                                   #{tmp\ 3828}#)
                                                            #f)
                                                        (apply (lambda (#{_\ 3846}#
                                                                        #{name\ 3847}#
                                                                        #{args\ 3848}#
                                                                        #{e1\ 3849}#
                                                                        #{e2\ 3850}#)
                                                                 (values
                                                                   'define-form
                                                                   (#{wrap\ 2422}#
                                                                     #{name\ 3847}#
                                                                     #{w\ 3752}#
                                                                     #{mod\ 3755}#)
                                                                   (#{decorate-source\ 2271}#
                                                                     (cons '#(syntax-object
                                                                              lambda
                                                                              ((top)
                                                                               #(ribcage
                                                                                 #(_
                                                                                   name
                                                                                   args
                                                                                   e1
                                                                                   e2)
                                                                                 #((top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top))
                                                                                 #("i3841"
                                                                                   "i3842"
                                                                                   "i3843"
                                                                                   "i3844"
                                                                                   "i3845"))
                                                                               #(ribcage
                                                                                 ()
                                                                                 ()
                                                                                 ())
                                                                               #(ribcage
                                                                                 ()
                                                                                 ()
                                                                                 ())
                                                                               #(ribcage
                                                                                 #(ftype
                                                                                   fval
                                                                                   fe
                                                                                   fw
                                                                                   fs
                                                                                   fmod)
                                                                                 #((top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top))
                                                                                 #("i3788"
                                                                                   "i3789"
                                                                                   "i3790"
                                                                                   "i3791"
                                                                                   "i3792"
                                                                                   "i3793"))
                                                                               #(ribcage
                                                                                 ()
                                                                                 ()
                                                                                 ())
                                                                               #(ribcage
                                                                                 #(first)
                                                                                 #((top))
                                                                                 #("i3780"))
                                                                               #(ribcage
                                                                                 ()
                                                                                 ()
                                                                                 ())
                                                                               #(ribcage
                                                                                 ()
                                                                                 ()
                                                                                 ())
                                                                               #(ribcage
                                                                                 ()
                                                                                 ()
                                                                                 ())
                                                                               #(ribcage
                                                                                 #(e
                                                                                   r
                                                                                   w
                                                                                   s
                                                                                   rib
                                                                                   mod
                                                                                   for-car?)
                                                                                 #((top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top))
                                                                                 #("i3757"
                                                                                   "i3758"
                                                                                   "i3759"
                                                                                   "i3760"
                                                                                   "i3761"
                                                                                   "i3762"
                                                                                   "i3763"))
                                                                               #(ribcage
                                                                                 (lambda-var-list
                                                                                   gen-var
                                                                                   strip
                                                                                   chi-lambda-case
                                                                                   lambda*-formals
                                                                                   chi-simple-lambda
                                                                                   lambda-formals
                                                                                   ellipsis?
                                                                                   chi-void
                                                                                   eval-local-transformer
                                                                                   chi-local-syntax
                                                                                   chi-body
                                                                                   chi-macro
                                                                                   chi-application
                                                                                   chi-expr
                                                                                   chi
                                                                                   chi-top
                                                                                   syntax-type
                                                                                   chi-when-list
                                                                                   chi-install-global
                                                                                   chi-top-sequence
                                                                                   chi-sequence
                                                                                   source-wrap
                                                                                   wrap
                                                                                   bound-id-member?
                                                                                   distinct-bound-ids?
                                                                                   valid-bound-ids?
                                                                                   bound-id=?
                                                                                   free-id=?
                                                                                   id-var-name
                                                                                   same-marks?
                                                                                   join-marks
                                                                                   join-wraps
                                                                                   smart-append
                                                                                   make-binding-wrap
                                                                                   extend-ribcage!
                                                                                   make-empty-ribcage
                                                                                   new-mark
                                                                                   anti-mark
                                                                                   the-anti-mark
                                                                                   top-marked?
                                                                                   top-wrap
                                                                                   empty-wrap
                                                                                   set-ribcage-labels!
                                                                                   set-ribcage-marks!
                                                                                   set-ribcage-symnames!
                                                                                   ribcage-labels
                                                                                   ribcage-marks
                                                                                   ribcage-symnames
                                                                                   ribcage?
                                                                                   make-ribcage
                                                                                   gen-labels
                                                                                   gen-label
                                                                                   make-rename
                                                                                   rename-marks
                                                                                   rename-new
                                                                                   rename-old
                                                                                   subst-rename?
                                                                                   wrap-subst
                                                                                   wrap-marks
                                                                                   make-wrap
                                                                                   id-sym-name&marks
                                                                                   id-sym-name
                                                                                   id?
                                                                                   nonsymbol-id?
                                                                                   global-extend
                                                                                   lookup
                                                                                   macros-only-env
                                                                                   extend-var-env
                                                                                   extend-env
                                                                                   null-env
                                                                                   binding-value
                                                                                   binding-type
                                                                                   make-binding
                                                                                   arg-check
                                                                                   source-annotation
                                                                                   no-source
                                                                                   set-syntax-object-module!
                                                                                   set-syntax-object-wrap!
                                                                                   set-syntax-object-expression!
                                                                                   syntax-object-module
                                                                                   syntax-object-wrap
                                                                                   syntax-object-expression
                                                                                   syntax-object?
                                                                                   make-syntax-object
                                                                                   build-lexical-var
                                                                                   build-letrec
                                                                                   build-named-let
                                                                                   build-let
                                                                                   build-sequence
                                                                                   build-data
                                                                                   build-primref
                                                                                   build-lambda-case
                                                                                   build-case-lambda
                                                                                   build-simple-lambda
                                                                                   build-global-definition
                                                                                   maybe-name-value!
                                                                                   build-global-assignment
                                                                                   build-global-reference
                                                                                   analyze-variable
                                                                                   build-lexical-assignment
                                                                                   build-lexical-reference
                                                                                   build-dynlet
                                                                                   build-conditional
                                                                                   build-application
                                                                                   build-void
                                                                                   decorate-source
                                                                                   get-global-definition-hook
                                                                                   put-global-definition-hook
                                                                                   gensym-hook
                                                                                   local-eval-hook
                                                                                   top-level-eval-hook
                                                                                   fx<
                                                                                   fx=
                                                                                   fx-
                                                                                   fx+
                                                                                   make-dynlet
                                                                                   make-letrec
                                                                                   make-let
                                                                                   make-lambda-case
                                                                                   make-lambda
                                                                                   make-sequence
                                                                                   make-application
                                                                                   make-conditional
                                                                                   make-toplevel-define
                                                                                   make-toplevel-set
                                                                                   make-toplevel-ref
                                                                                   make-module-set
                                                                                   make-module-ref
                                                                                   make-lexical-set
                                                                                   make-lexical-ref
                                                                                   make-primitive-ref
                                                                                   make-const
                                                                                   make-void
                                                                                   *mode*)
                                                                                 ((top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top))
                                                                                 ("i2467"
                                                                                  "i2465"
                                                                                  "i2463"
                                                                                  "i2461"
                                                                                  "i2459"
                                                                                  "i2457"
                                                                                  "i2455"
                                                                                  "i2453"
                                                                                  "i2451"
                                                                                  "i2449"
                                                                                  "i2447"
                                                                                  "i2445"
                                                                                  "i2443"
                                                                                  "i2441"
                                                                                  "i2439"
                                                                                  "i2437"
                                                                                  "i2435"
                                                                                  "i2433"
                                                                                  "i2431"
                                                                                  "i2429"
                                                                                  "i2427"
                                                                                  "i2425"
                                                                                  "i2423"
                                                                                  "i2421"
                                                                                  "i2419"
                                                                                  "i2417"
                                                                                  "i2415"
                                                                                  "i2413"
                                                                                  "i2411"
                                                                                  "i2409"
                                                                                  "i2407"
                                                                                  "i2405"
                                                                                  "i2403"
                                                                                  "i2401"
                                                                                  "i2399"
                                                                                  "i2397"
                                                                                  "i2396"
                                                                                  "i2395"
                                                                                  "i2393"
                                                                                  "i2392"
                                                                                  "i2391"
                                                                                  "i2390"
                                                                                  "i2389"
                                                                                  "i2387"
                                                                                  "i2385"
                                                                                  "i2383"
                                                                                  "i2381"
                                                                                  "i2379"
                                                                                  "i2377"
                                                                                  "i2375"
                                                                                  "i2373"
                                                                                  "i2370"
                                                                                  "i2368"
                                                                                  "i2367"
                                                                                  "i2366"
                                                                                  "i2365"
                                                                                  "i2364"
                                                                                  "i2363"
                                                                                  "i2361"
                                                                                  "i2359"
                                                                                  "i2357"
                                                                                  "i2355"
                                                                                  "i2354"
                                                                                  "i2352"
                                                                                  "i2350"
                                                                                  "i2348"
                                                                                  "i2346"
                                                                                  "i2344"
                                                                                  "i2342"
                                                                                  "i2340"
                                                                                  "i2339"
                                                                                  "i2337"
                                                                                  "i2335"
                                                                                  "i2334"
                                                                                  "i2333"
                                                                                  "i2331"
                                                                                  "i2330"
                                                                                  "i2328"
                                                                                  "i2326"
                                                                                  "i2324"
                                                                                  "i2322"
                                                                                  "i2320"
                                                                                  "i2318"
                                                                                  "i2316"
                                                                                  "i2314"
                                                                                  "i2312"
                                                                                  "i2310"
                                                                                  "i2308"
                                                                                  "i2306"
                                                                                  "i2304"
                                                                                  "i2302"
                                                                                  "i2300"
                                                                                  "i2298"
                                                                                  "i2296"
                                                                                  "i2294"
                                                                                  "i2292"
                                                                                  "i2290"
                                                                                  "i2288"
                                                                                  "i2286"
                                                                                  "i2284"
                                                                                  "i2282"
                                                                                  "i2280"
                                                                                  "i2278"
                                                                                  "i2276"
                                                                                  "i2274"
                                                                                  "i2272"
                                                                                  "i2270"
                                                                                  "i2268"
                                                                                  "i2266"
                                                                                  "i2265"
                                                                                  "i2263"
                                                                                  "i2261"
                                                                                  "i2259"
                                                                                  "i2257"
                                                                                  "i2255"
                                                                                  "i2253"
                                                                                  "i2251"
                                                                                  "i2249"
                                                                                  "i2247"
                                                                                  "i2245"
                                                                                  "i2243"
                                                                                  "i2241"
                                                                                  "i2239"
                                                                                  "i2237"
                                                                                  "i2235"
                                                                                  "i2233"
                                                                                  "i2231"
                                                                                  "i2229"
                                                                                  "i2227"
                                                                                  "i2225"
                                                                                  "i2223"
                                                                                  "i2221"
                                                                                  "i2219"
                                                                                  "i2217"
                                                                                  "i2214"))
                                                                               #(ribcage
                                                                                 (define-structure
                                                                                   define-expansion-constructors
                                                                                   and-map*)
                                                                                 ((top)
                                                                                  (top)
                                                                                  (top))
                                                                                 ("i2066"
                                                                                  "i2065"
                                                                                  "i2063")))
                                                                              (hygiene
                                                                                guile))
                                                                           (#{wrap\ 2422}#
                                                                             (cons #{args\ 3848}#
                                                                                   (cons #{e1\ 3849}#
                                                                                         #{e2\ 3850}#))
                                                                             #{w\ 3752}#
                                                                             #{mod\ 3755}#))
                                                                     #{s\ 3753}#)
                                                                   '(())
                                                                   #{s\ 3753}#
                                                                   #{mod\ 3755}#))
                                                               #{tmp\ 3828}#)
                                                        ((lambda (#{tmp\ 3853}#)
                                                           (if (if #{tmp\ 3853}#
                                                                 (apply (lambda (#{_\ 3856}#
                                                                                 #{name\ 3857}#)
                                                                          (#{id?\ 2353}#
                                                                            #{name\ 3857}#))
                                                                        #{tmp\ 3853}#)
                                                                 #f)
                                                             (apply (lambda (#{_\ 3860}#
                                                                             #{name\ 3861}#)
                                                                      (values
                                                                        'define-form
                                                                        (#{wrap\ 2422}#
                                                                          #{name\ 3861}#
                                                                          #{w\ 3752}#
                                                                          #{mod\ 3755}#)
                                                                        '(#(syntax-object
                                                                            if
                                                                            ((top)
                                                                             #(ribcage
                                                                               #(_
                                                                                 name)
                                                                               #((top)
                                                                                 (top))
                                                                               #("i3858"
                                                                                 "i3859"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(ftype
                                                                                 fval
                                                                                 fe
                                                                                 fw
                                                                                 fs
                                                                                 fmod)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i3788"
                                                                                 "i3789"
                                                                                 "i3790"
                                                                                 "i3791"
                                                                                 "i3792"
                                                                                 "i3793"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(first)
                                                                               #((top))
                                                                               #("i3780"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(e
                                                                                 r
                                                                                 w
                                                                                 s
                                                                                 rib
                                                                                 mod
                                                                                 for-car?)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i3757"
                                                                                 "i3758"
                                                                                 "i3759"
                                                                                 "i3760"
                                                                                 "i3761"
                                                                                 "i3762"
                                                                                 "i3763"))
                                                                             #(ribcage
                                                                               (lambda-var-list
                                                                                 gen-var
                                                                                 strip
                                                                                 chi-lambda-case
                                                                                 lambda*-formals
                                                                                 chi-simple-lambda
                                                                                 lambda-formals
                                                                                 ellipsis?
                                                                                 chi-void
                                                                                 eval-local-transformer
                                                                                 chi-local-syntax
                                                                                 chi-body
                                                                                 chi-macro
                                                                                 chi-application
                                                                                 chi-expr
                                                                                 chi
                                                                                 chi-top
                                                                                 syntax-type
                                                                                 chi-when-list
                                                                                 chi-install-global
                                                                                 chi-top-sequence
                                                                                 chi-sequence
                                                                                 source-wrap
                                                                                 wrap
                                                                                 bound-id-member?
                                                                                 distinct-bound-ids?
                                                                                 valid-bound-ids?
                                                                                 bound-id=?
                                                                                 free-id=?
                                                                                 id-var-name
                                                                                 same-marks?
                                                                                 join-marks
                                                                                 join-wraps
                                                                                 smart-append
                                                                                 make-binding-wrap
                                                                                 extend-ribcage!
                                                                                 make-empty-ribcage
                                                                                 new-mark
                                                                                 anti-mark
                                                                                 the-anti-mark
                                                                                 top-marked?
                                                                                 top-wrap
                                                                                 empty-wrap
                                                                                 set-ribcage-labels!
                                                                                 set-ribcage-marks!
                                                                                 set-ribcage-symnames!
                                                                                 ribcage-labels
                                                                                 ribcage-marks
                                                                                 ribcage-symnames
                                                                                 ribcage?
                                                                                 make-ribcage
                                                                                 gen-labels
                                                                                 gen-label
                                                                                 make-rename
                                                                                 rename-marks
                                                                                 rename-new
                                                                                 rename-old
                                                                                 subst-rename?
                                                                                 wrap-subst
                                                                                 wrap-marks
                                                                                 make-wrap
                                                                                 id-sym-name&marks
                                                                                 id-sym-name
                                                                                 id?
                                                                                 nonsymbol-id?
                                                                                 global-extend
                                                                                 lookup
                                                                                 macros-only-env
                                                                                 extend-var-env
                                                                                 extend-env
                                                                                 null-env
                                                                                 binding-value
                                                                                 binding-type
                                                                                 make-binding
                                                                                 arg-check
                                                                                 source-annotation
                                                                                 no-source
                                                                                 set-syntax-object-module!
                                                                                 set-syntax-object-wrap!
                                                                                 set-syntax-object-expression!
                                                                                 syntax-object-module
                                                                                 syntax-object-wrap
                                                                                 syntax-object-expression
                                                                                 syntax-object?
                                                                                 make-syntax-object
                                                                                 build-lexical-var
                                                                                 build-letrec
                                                                                 build-named-let
                                                                                 build-let
                                                                                 build-sequence
                                                                                 build-data
                                                                                 build-primref
                                                                                 build-lambda-case
                                                                                 build-case-lambda
                                                                                 build-simple-lambda
                                                                                 build-global-definition
                                                                                 maybe-name-value!
                                                                                 build-global-assignment
                                                                                 build-global-reference
                                                                                 analyze-variable
                                                                                 build-lexical-assignment
                                                                                 build-lexical-reference
                                                                                 build-dynlet
                                                                                 build-conditional
                                                                                 build-application
                                                                                 build-void
                                                                                 decorate-source
                                                                                 get-global-definition-hook
                                                                                 put-global-definition-hook
                                                                                 gensym-hook
                                                                                 local-eval-hook
                                                                                 top-level-eval-hook
                                                                                 fx<
                                                                                 fx=
                                                                                 fx-
                                                                                 fx+
                                                                                 make-dynlet
                                                                                 make-letrec
                                                                                 make-let
                                                                                 make-lambda-case
                                                                                 make-lambda
                                                                                 make-sequence
                                                                                 make-application
                                                                                 make-conditional
                                                                                 make-toplevel-define
                                                                                 make-toplevel-set
                                                                                 make-toplevel-ref
                                                                                 make-module-set
                                                                                 make-module-ref
                                                                                 make-lexical-set
                                                                                 make-lexical-ref
                                                                                 make-primitive-ref
                                                                                 make-const
                                                                                 make-void
                                                                                 *mode*)
                                                                               ((top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top))
                                                                               ("i2467"
                                                                                "i2465"
                                                                                "i2463"
                                                                                "i2461"
                                                                                "i2459"
                                                                                "i2457"
                                                                                "i2455"
                                                                                "i2453"
                                                                                "i2451"
                                                                                "i2449"
                                                                                "i2447"
                                                                                "i2445"
                                                                                "i2443"
                                                                                "i2441"
                                                                                "i2439"
                                                                                "i2437"
                                                                                "i2435"
                                                                                "i2433"
                                                                                "i2431"
                                                                                "i2429"
                                                                                "i2427"
                                                                                "i2425"
                                                                                "i2423"
                                                                                "i2421"
                                                                                "i2419"
                                                                                "i2417"
                                                                                "i2415"
                                                                                "i2413"
                                                                                "i2411"
                                                                                "i2409"
                                                                                "i2407"
                                                                                "i2405"
                                                                                "i2403"
                                                                                "i2401"
                                                                                "i2399"
                                                                                "i2397"
                                                                                "i2396"
                                                                                "i2395"
                                                                                "i2393"
                                                                                "i2392"
                                                                                "i2391"
                                                                                "i2390"
                                                                                "i2389"
                                                                                "i2387"
                                                                                "i2385"
                                                                                "i2383"
                                                                                "i2381"
                                                                                "i2379"
                                                                                "i2377"
                                                                                "i2375"
                                                                                "i2373"
                                                                                "i2370"
                                                                                "i2368"
                                                                                "i2367"
                                                                                "i2366"
                                                                                "i2365"
                                                                                "i2364"
                                                                                "i2363"
                                                                                "i2361"
                                                                                "i2359"
                                                                                "i2357"
                                                                                "i2355"
                                                                                "i2354"
                                                                                "i2352"
                                                                                "i2350"
                                                                                "i2348"
                                                                                "i2346"
                                                                                "i2344"
                                                                                "i2342"
                                                                                "i2340"
                                                                                "i2339"
                                                                                "i2337"
                                                                                "i2335"
                                                                                "i2334"
                                                                                "i2333"
                                                                                "i2331"
                                                                                "i2330"
                                                                                "i2328"
                                                                                "i2326"
                                                                                "i2324"
                                                                                "i2322"
                                                                                "i2320"
                                                                                "i2318"
                                                                                "i2316"
                                                                                "i2314"
                                                                                "i2312"
                                                                                "i2310"
                                                                                "i2308"
                                                                                "i2306"
                                                                                "i2304"
                                                                                "i2302"
                                                                                "i2300"
                                                                                "i2298"
                                                                                "i2296"
                                                                                "i2294"
                                                                                "i2292"
                                                                                "i2290"
                                                                                "i2288"
                                                                                "i2286"
                                                                                "i2284"
                                                                                "i2282"
                                                                                "i2280"
                                                                                "i2278"
                                                                                "i2276"
                                                                                "i2274"
                                                                                "i2272"
                                                                                "i2270"
                                                                                "i2268"
                                                                                "i2266"
                                                                                "i2265"
                                                                                "i2263"
                                                                                "i2261"
                                                                                "i2259"
                                                                                "i2257"
                                                                                "i2255"
                                                                                "i2253"
                                                                                "i2251"
                                                                                "i2249"
                                                                                "i2247"
                                                                                "i2245"
                                                                                "i2243"
                                                                                "i2241"
                                                                                "i2239"
                                                                                "i2237"
                                                                                "i2235"
                                                                                "i2233"
                                                                                "i2231"
                                                                                "i2229"
                                                                                "i2227"
                                                                                "i2225"
                                                                                "i2223"
                                                                                "i2221"
                                                                                "i2219"
                                                                                "i2217"
                                                                                "i2214"))
                                                                             #(ribcage
                                                                               (define-structure
                                                                                 define-expansion-constructors
                                                                                 and-map*)
                                                                               ((top)
                                                                                (top)
                                                                                (top))
                                                                               ("i2066"
                                                                                "i2065"
                                                                                "i2063")))
                                                                            (hygiene
                                                                              guile))
                                                                          #(syntax-object
                                                                            #f
                                                                            ((top)
                                                                             #(ribcage
                                                                               #(_
                                                                                 name)
                                                                               #((top)
                                                                                 (top))
                                                                               #("i3858"
                                                                                 "i3859"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(ftype
                                                                                 fval
                                                                                 fe
                                                                                 fw
                                                                                 fs
                                                                                 fmod)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i3788"
                                                                                 "i3789"
                                                                                 "i3790"
                                                                                 "i3791"
                                                                                 "i3792"
                                                                                 "i3793"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(first)
                                                                               #((top))
                                                                               #("i3780"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(e
                                                                                 r
                                                                                 w
                                                                                 s
                                                                                 rib
                                                                                 mod
                                                                                 for-car?)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i3757"
                                                                                 "i3758"
                                                                                 "i3759"
                                                                                 "i3760"
                                                                                 "i3761"
                                                                                 "i3762"
                                                                                 "i3763"))
                                                                             #(ribcage
                                                                               (lambda-var-list
                                                                                 gen-var
                                                                                 strip
                                                                                 chi-lambda-case
                                                                                 lambda*-formals
                                                                                 chi-simple-lambda
                                                                                 lambda-formals
                                                                                 ellipsis?
                                                                                 chi-void
                                                                                 eval-local-transformer
                                                                                 chi-local-syntax
                                                                                 chi-body
                                                                                 chi-macro
                                                                                 chi-application
                                                                                 chi-expr
                                                                                 chi
                                                                                 chi-top
                                                                                 syntax-type
                                                                                 chi-when-list
                                                                                 chi-install-global
                                                                                 chi-top-sequence
                                                                                 chi-sequence
                                                                                 source-wrap
                                                                                 wrap
                                                                                 bound-id-member?
                                                                                 distinct-bound-ids?
                                                                                 valid-bound-ids?
                                                                                 bound-id=?
                                                                                 free-id=?
                                                                                 id-var-name
                                                                                 same-marks?
                                                                                 join-marks
                                                                                 join-wraps
                                                                                 smart-append
                                                                                 make-binding-wrap
                                                                                 extend-ribcage!
                                                                                 make-empty-ribcage
                                                                                 new-mark
                                                                                 anti-mark
                                                                                 the-anti-mark
                                                                                 top-marked?
                                                                                 top-wrap
                                                                                 empty-wrap
                                                                                 set-ribcage-labels!
                                                                                 set-ribcage-marks!
                                                                                 set-ribcage-symnames!
                                                                                 ribcage-labels
                                                                                 ribcage-marks
                                                                                 ribcage-symnames
                                                                                 ribcage?
                                                                                 make-ribcage
                                                                                 gen-labels
                                                                                 gen-label
                                                                                 make-rename
                                                                                 rename-marks
                                                                                 rename-new
                                                                                 rename-old
                                                                                 subst-rename?
                                                                                 wrap-subst
                                                                                 wrap-marks
                                                                                 make-wrap
                                                                                 id-sym-name&marks
                                                                                 id-sym-name
                                                                                 id?
                                                                                 nonsymbol-id?
                                                                                 global-extend
                                                                                 lookup
                                                                                 macros-only-env
                                                                                 extend-var-env
                                                                                 extend-env
                                                                                 null-env
                                                                                 binding-value
                                                                                 binding-type
                                                                                 make-binding
                                                                                 arg-check
                                                                                 source-annotation
                                                                                 no-source
                                                                                 set-syntax-object-module!
                                                                                 set-syntax-object-wrap!
                                                                                 set-syntax-object-expression!
                                                                                 syntax-object-module
                                                                                 syntax-object-wrap
                                                                                 syntax-object-expression
                                                                                 syntax-object?
                                                                                 make-syntax-object
                                                                                 build-lexical-var
                                                                                 build-letrec
                                                                                 build-named-let
                                                                                 build-let
                                                                                 build-sequence
                                                                                 build-data
                                                                                 build-primref
                                                                                 build-lambda-case
                                                                                 build-case-lambda
                                                                                 build-simple-lambda
                                                                                 build-global-definition
                                                                                 maybe-name-value!
                                                                                 build-global-assignment
                                                                                 build-global-reference
                                                                                 analyze-variable
                                                                                 build-lexical-assignment
                                                                                 build-lexical-reference
                                                                                 build-dynlet
                                                                                 build-conditional
                                                                                 build-application
                                                                                 build-void
                                                                                 decorate-source
                                                                                 get-global-definition-hook
                                                                                 put-global-definition-hook
                                                                                 gensym-hook
                                                                                 local-eval-hook
                                                                                 top-level-eval-hook
                                                                                 fx<
                                                                                 fx=
                                                                                 fx-
                                                                                 fx+
                                                                                 make-dynlet
                                                                                 make-letrec
                                                                                 make-let
                                                                                 make-lambda-case
                                                                                 make-lambda
                                                                                 make-sequence
                                                                                 make-application
                                                                                 make-conditional
                                                                                 make-toplevel-define
                                                                                 make-toplevel-set
                                                                                 make-toplevel-ref
                                                                                 make-module-set
                                                                                 make-module-ref
                                                                                 make-lexical-set
                                                                                 make-lexical-ref
                                                                                 make-primitive-ref
                                                                                 make-const
                                                                                 make-void
                                                                                 *mode*)
                                                                               ((top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top))
                                                                               ("i2467"
                                                                                "i2465"
                                                                                "i2463"
                                                                                "i2461"
                                                                                "i2459"
                                                                                "i2457"
                                                                                "i2455"
                                                                                "i2453"
                                                                                "i2451"
                                                                                "i2449"
                                                                                "i2447"
                                                                                "i2445"
                                                                                "i2443"
                                                                                "i2441"
                                                                                "i2439"
                                                                                "i2437"
                                                                                "i2435"
                                                                                "i2433"
                                                                                "i2431"
                                                                                "i2429"
                                                                                "i2427"
                                                                                "i2425"
                                                                                "i2423"
                                                                                "i2421"
                                                                                "i2419"
                                                                                "i2417"
                                                                                "i2415"
                                                                                "i2413"
                                                                                "i2411"
                                                                                "i2409"
                                                                                "i2407"
                                                                                "i2405"
                                                                                "i2403"
                                                                                "i2401"
                                                                                "i2399"
                                                                                "i2397"
                                                                                "i2396"
                                                                                "i2395"
                                                                                "i2393"
                                                                                "i2392"
                                                                                "i2391"
                                                                                "i2390"
                                                                                "i2389"
                                                                                "i2387"
                                                                                "i2385"
                                                                                "i2383"
                                                                                "i2381"
                                                                                "i2379"
                                                                                "i2377"
                                                                                "i2375"
                                                                                "i2373"
                                                                                "i2370"
                                                                                "i2368"
                                                                                "i2367"
                                                                                "i2366"
                                                                                "i2365"
                                                                                "i2364"
                                                                                "i2363"
                                                                                "i2361"
                                                                                "i2359"
                                                                                "i2357"
                                                                                "i2355"
                                                                                "i2354"
                                                                                "i2352"
                                                                                "i2350"
                                                                                "i2348"
                                                                                "i2346"
                                                                                "i2344"
                                                                                "i2342"
                                                                                "i2340"
                                                                                "i2339"
                                                                                "i2337"
                                                                                "i2335"
                                                                                "i2334"
                                                                                "i2333"
                                                                                "i2331"
                                                                                "i2330"
                                                                                "i2328"
                                                                                "i2326"
                                                                                "i2324"
                                                                                "i2322"
                                                                                "i2320"
                                                                                "i2318"
                                                                                "i2316"
                                                                                "i2314"
                                                                                "i2312"
                                                                                "i2310"
                                                                                "i2308"
                                                                                "i2306"
                                                                                "i2304"
                                                                                "i2302"
                                                                                "i2300"
                                                                                "i2298"
                                                                                "i2296"
                                                                                "i2294"
                                                                                "i2292"
                                                                                "i2290"
                                                                                "i2288"
                                                                                "i2286"
                                                                                "i2284"
                                                                                "i2282"
                                                                                "i2280"
                                                                                "i2278"
                                                                                "i2276"
                                                                                "i2274"
                                                                                "i2272"
                                                                                "i2270"
                                                                                "i2268"
                                                                                "i2266"
                                                                                "i2265"
                                                                                "i2263"
                                                                                "i2261"
                                                                                "i2259"
                                                                                "i2257"
                                                                                "i2255"
                                                                                "i2253"
                                                                                "i2251"
                                                                                "i2249"
                                                                                "i2247"
                                                                                "i2245"
                                                                                "i2243"
                                                                                "i2241"
                                                                                "i2239"
                                                                                "i2237"
                                                                                "i2235"
                                                                                "i2233"
                                                                                "i2231"
                                                                                "i2229"
                                                                                "i2227"
                                                                                "i2225"
                                                                                "i2223"
                                                                                "i2221"
                                                                                "i2219"
                                                                                "i2217"
                                                                                "i2214"))
                                                                             #(ribcage
                                                                               (define-structure
                                                                                 define-expansion-constructors
                                                                                 and-map*)
                                                                               ((top)
                                                                                (top)
                                                                                (top))
                                                                               ("i2066"
                                                                                "i2065"
                                                                                "i2063")))
                                                                            (hygiene
                                                                              guile))
                                                                          #(syntax-object
                                                                            #f
                                                                            ((top)
                                                                             #(ribcage
                                                                               #(_
                                                                                 name)
                                                                               #((top)
                                                                                 (top))
                                                                               #("i3858"
                                                                                 "i3859"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(ftype
                                                                                 fval
                                                                                 fe
                                                                                 fw
                                                                                 fs
                                                                                 fmod)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i3788"
                                                                                 "i3789"
                                                                                 "i3790"
                                                                                 "i3791"
                                                                                 "i3792"
                                                                                 "i3793"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(first)
                                                                               #((top))
                                                                               #("i3780"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(e
                                                                                 r
                                                                                 w
                                                                                 s
                                                                                 rib
                                                                                 mod
                                                                                 for-car?)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i3757"
                                                                                 "i3758"
                                                                                 "i3759"
                                                                                 "i3760"
                                                                                 "i3761"
                                                                                 "i3762"
                                                                                 "i3763"))
                                                                             #(ribcage
                                                                               (lambda-var-list
                                                                                 gen-var
                                                                                 strip
                                                                                 chi-lambda-case
                                                                                 lambda*-formals
                                                                                 chi-simple-lambda
                                                                                 lambda-formals
                                                                                 ellipsis?
                                                                                 chi-void
                                                                                 eval-local-transformer
                                                                                 chi-local-syntax
                                                                                 chi-body
                                                                                 chi-macro
                                                                                 chi-application
                                                                                 chi-expr
                                                                                 chi
                                                                                 chi-top
                                                                                 syntax-type
                                                                                 chi-when-list
                                                                                 chi-install-global
                                                                                 chi-top-sequence
                                                                                 chi-sequence
                                                                                 source-wrap
                                                                                 wrap
                                                                                 bound-id-member?
                                                                                 distinct-bound-ids?
                                                                                 valid-bound-ids?
                                                                                 bound-id=?
                                                                                 free-id=?
                                                                                 id-var-name
                                                                                 same-marks?
                                                                                 join-marks
                                                                                 join-wraps
                                                                                 smart-append
                                                                                 make-binding-wrap
                                                                                 extend-ribcage!
                                                                                 make-empty-ribcage
                                                                                 new-mark
                                                                                 anti-mark
                                                                                 the-anti-mark
                                                                                 top-marked?
                                                                                 top-wrap
                                                                                 empty-wrap
                                                                                 set-ribcage-labels!
                                                                                 set-ribcage-marks!
                                                                                 set-ribcage-symnames!
                                                                                 ribcage-labels
                                                                                 ribcage-marks
                                                                                 ribcage-symnames
                                                                                 ribcage?
                                                                                 make-ribcage
                                                                                 gen-labels
                                                                                 gen-label
                                                                                 make-rename
                                                                                 rename-marks
                                                                                 rename-new
                                                                                 rename-old
                                                                                 subst-rename?
                                                                                 wrap-subst
                                                                                 wrap-marks
                                                                                 make-wrap
                                                                                 id-sym-name&marks
                                                                                 id-sym-name
                                                                                 id?
                                                                                 nonsymbol-id?
                                                                                 global-extend
                                                                                 lookup
                                                                                 macros-only-env
                                                                                 extend-var-env
                                                                                 extend-env
                                                                                 null-env
                                                                                 binding-value
                                                                                 binding-type
                                                                                 make-binding
                                                                                 arg-check
                                                                                 source-annotation
                                                                                 no-source
                                                                                 set-syntax-object-module!
                                                                                 set-syntax-object-wrap!
                                                                                 set-syntax-object-expression!
                                                                                 syntax-object-module
                                                                                 syntax-object-wrap
                                                                                 syntax-object-expression
                                                                                 syntax-object?
                                                                                 make-syntax-object
                                                                                 build-lexical-var
                                                                                 build-letrec
                                                                                 build-named-let
                                                                                 build-let
                                                                                 build-sequence
                                                                                 build-data
                                                                                 build-primref
                                                                                 build-lambda-case
                                                                                 build-case-lambda
                                                                                 build-simple-lambda
                                                                                 build-global-definition
                                                                                 maybe-name-value!
                                                                                 build-global-assignment
                                                                                 build-global-reference
                                                                                 analyze-variable
                                                                                 build-lexical-assignment
                                                                                 build-lexical-reference
                                                                                 build-dynlet
                                                                                 build-conditional
                                                                                 build-application
                                                                                 build-void
                                                                                 decorate-source
                                                                                 get-global-definition-hook
                                                                                 put-global-definition-hook
                                                                                 gensym-hook
                                                                                 local-eval-hook
                                                                                 top-level-eval-hook
                                                                                 fx<
                                                                                 fx=
                                                                                 fx-
                                                                                 fx+
                                                                                 make-dynlet
                                                                                 make-letrec
                                                                                 make-let
                                                                                 make-lambda-case
                                                                                 make-lambda
                                                                                 make-sequence
                                                                                 make-application
                                                                                 make-conditional
                                                                                 make-toplevel-define
                                                                                 make-toplevel-set
                                                                                 make-toplevel-ref
                                                                                 make-module-set
                                                                                 make-module-ref
                                                                                 make-lexical-set
                                                                                 make-lexical-ref
                                                                                 make-primitive-ref
                                                                                 make-const
                                                                                 make-void
                                                                                 *mode*)
                                                                               ((top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top))
                                                                               ("i2467"
                                                                                "i2465"
                                                                                "i2463"
                                                                                "i2461"
                                                                                "i2459"
                                                                                "i2457"
                                                                                "i2455"
                                                                                "i2453"
                                                                                "i2451"
                                                                                "i2449"
                                                                                "i2447"
                                                                                "i2445"
                                                                                "i2443"
                                                                                "i2441"
                                                                                "i2439"
                                                                                "i2437"
                                                                                "i2435"
                                                                                "i2433"
                                                                                "i2431"
                                                                                "i2429"
                                                                                "i2427"
                                                                                "i2425"
                                                                                "i2423"
                                                                                "i2421"
                                                                                "i2419"
                                                                                "i2417"
                                                                                "i2415"
                                                                                "i2413"
                                                                                "i2411"
                                                                                "i2409"
                                                                                "i2407"
                                                                                "i2405"
                                                                                "i2403"
                                                                                "i2401"
                                                                                "i2399"
                                                                                "i2397"
                                                                                "i2396"
                                                                                "i2395"
                                                                                "i2393"
                                                                                "i2392"
                                                                                "i2391"
                                                                                "i2390"
                                                                                "i2389"
                                                                                "i2387"
                                                                                "i2385"
                                                                                "i2383"
                                                                                "i2381"
                                                                                "i2379"
                                                                                "i2377"
                                                                                "i2375"
                                                                                "i2373"
                                                                                "i2370"
                                                                                "i2368"
                                                                                "i2367"
                                                                                "i2366"
                                                                                "i2365"
                                                                                "i2364"
                                                                                "i2363"
                                                                                "i2361"
                                                                                "i2359"
                                                                                "i2357"
                                                                                "i2355"
                                                                                "i2354"
                                                                                "i2352"
                                                                                "i2350"
                                                                                "i2348"
                                                                                "i2346"
                                                                                "i2344"
                                                                                "i2342"
                                                                                "i2340"
                                                                                "i2339"
                                                                                "i2337"
                                                                                "i2335"
                                                                                "i2334"
                                                                                "i2333"
                                                                                "i2331"
                                                                                "i2330"
                                                                                "i2328"
                                                                                "i2326"
                                                                                "i2324"
                                                                                "i2322"
                                                                                "i2320"
                                                                                "i2318"
                                                                                "i2316"
                                                                                "i2314"
                                                                                "i2312"
                                                                                "i2310"
                                                                                "i2308"
                                                                                "i2306"
                                                                                "i2304"
                                                                                "i2302"
                                                                                "i2300"
                                                                                "i2298"
                                                                                "i2296"
                                                                                "i2294"
                                                                                "i2292"
                                                                                "i2290"
                                                                                "i2288"
                                                                                "i2286"
                                                                                "i2284"
                                                                                "i2282"
                                                                                "i2280"
                                                                                "i2278"
                                                                                "i2276"
                                                                                "i2274"
                                                                                "i2272"
                                                                                "i2270"
                                                                                "i2268"
                                                                                "i2266"
                                                                                "i2265"
                                                                                "i2263"
                                                                                "i2261"
                                                                                "i2259"
                                                                                "i2257"
                                                                                "i2255"
                                                                                "i2253"
                                                                                "i2251"
                                                                                "i2249"
                                                                                "i2247"
                                                                                "i2245"
                                                                                "i2243"
                                                                                "i2241"
                                                                                "i2239"
                                                                                "i2237"
                                                                                "i2235"
                                                                                "i2233"
                                                                                "i2231"
                                                                                "i2229"
                                                                                "i2227"
                                                                                "i2225"
                                                                                "i2223"
                                                                                "i2221"
                                                                                "i2219"
                                                                                "i2217"
                                                                                "i2214"))
                                                                             #(ribcage
                                                                               (define-structure
                                                                                 define-expansion-constructors
                                                                                 and-map*)
                                                                               ((top)
                                                                                (top)
                                                                                (top))
                                                                               ("i2066"
                                                                                "i2065"
                                                                                "i2063")))
                                                                            (hygiene
                                                                              guile)))
                                                                        '(())
                                                                        #{s\ 3753}#
                                                                        #{mod\ 3755}#))
                                                                    #{tmp\ 3853}#)
                                                             (syntax-violation
                                                               #f
                                                               "source expression failed to match any pattern"
                                                               #{tmp\ 3814}#)))
                                                         ($sc-dispatch
                                                           #{tmp\ 3814}#
                                                           '(any any)))))
                                                    ($sc-dispatch
                                                      #{tmp\ 3814}#
                                                      '(any (any . any)
                                                            any
                                                            .
                                                            each-any)))))
                                               ($sc-dispatch
                                                 #{tmp\ 3814}#
                                                 '(any any any))))
                                            #{e\ 3750}#)
                                           (if (memv #{ftype\ 3782}#
                                                     '(define-syntax))
                                             ((lambda (#{tmp\ 3864}#)
                                                ((lambda (#{tmp\ 3865}#)
                                                   (if (if #{tmp\ 3865}#
                                                         (apply (lambda (#{_\ 3869}#
                                                                         #{name\ 3870}#
                                                                         #{val\ 3871}#)
                                                                  (#{id?\ 2353}#
                                                                    #{name\ 3870}#))
                                                                #{tmp\ 3865}#)
                                                         #f)
                                                     (apply (lambda (#{_\ 3875}#
                                                                     #{name\ 3876}#
                                                                     #{val\ 3877}#)
                                                              (values
                                                                'define-syntax-form
                                                                #{name\ 3876}#
                                                                #{val\ 3877}#
                                                                #{w\ 3752}#
                                                                #{s\ 3753}#
                                                                #{mod\ 3755}#))
                                                            #{tmp\ 3865}#)
                                                     (syntax-violation
                                                       #f
                                                       "source expression failed to match any pattern"
                                                       #{tmp\ 3864}#)))
                                                 ($sc-dispatch
                                                   #{tmp\ 3864}#
                                                   '(any any any))))
                                              #{e\ 3750}#)
                                             (values
                                               'call
                                               #f
                                               #{e\ 3750}#
                                               #{w\ 3752}#
                                               #{s\ 3753}#
                                               #{mod\ 3755}#))))))))))))))
                   (if (#{syntax-object?\ 2317}# #{e\ 3750}#)
                     (#{syntax-type\ 2434}#
                       (#{syntax-object-expression\ 2319}# #{e\ 3750}#)
                       #{r\ 3751}#
                       (#{join-wraps\ 2404}#
                         #{w\ 3752}#
                         (#{syntax-object-wrap\ 2321}# #{e\ 3750}#))
                       #{s\ 3753}#
                       #{rib\ 3754}#
                       (let ((#{t\ 3883}#
                               (#{syntax-object-module\ 2323}# #{e\ 3750}#)))
                         (if #{t\ 3883}# #{t\ 3883}# #{mod\ 3755}#))
                       #{for-car?\ 3756}#)
                     (if (self-evaluating? #{e\ 3750}#)
                       (values
                         'constant
                         #f
                         #{e\ 3750}#
                         #{w\ 3752}#
                         #{s\ 3753}#
                         #{mod\ 3755}#)
                       (values
                         'other
                         #f
                         #{e\ 3750}#
                         #{w\ 3752}#
                         #{s\ 3753}#
                         #{mod\ 3755}#)))))))
           (#{chi-when-list\ 2432}#
             (lambda (#{e\ 3888}# #{when-list\ 3889}# #{w\ 3890}#)
               (letrec ((#{f\ 3897}#
                          (lambda (#{when-list\ 3898}# #{situations\ 3899}#)
                            (if (null? #{when-list\ 3898}#)
                              #{situations\ 3899}#
                              (#{f\ 3897}#
                                (cdr #{when-list\ 3898}#)
                                (cons (let ((#{x\ 3901}#
                                              (car #{when-list\ 3898}#)))
                                        (if (#{free-id=?\ 2412}#
                                              #{x\ 3901}#
                                              '#(syntax-object
                                                 compile
                                                 ((top)
                                                  #(ribcage () () ())
                                                  #(ribcage () () ())
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(x)
                                                    #((top))
                                                    #("i3900"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(f when-list situations)
                                                    #((top) (top) (top))
                                                    #("i3894" "i3895" "i3896"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(e when-list w)
                                                    #((top) (top) (top))
                                                    #("i3891" "i3892" "i3893"))
                                                  #(ribcage
                                                    (lambda-var-list
                                                      gen-var
                                                      strip
                                                      chi-lambda-case
                                                      lambda*-formals
                                                      chi-simple-lambda
                                                      lambda-formals
                                                      ellipsis?
                                                      chi-void
                                                      eval-local-transformer
                                                      chi-local-syntax
                                                      chi-body
                                                      chi-macro
                                                      chi-application
                                                      chi-expr
                                                      chi
                                                      chi-top
                                                      syntax-type
                                                      chi-when-list
                                                      chi-install-global
                                                      chi-top-sequence
                                                      chi-sequence
                                                      source-wrap
                                                      wrap
                                                      bound-id-member?
                                                      distinct-bound-ids?
                                                      valid-bound-ids?
                                                      bound-id=?
                                                      free-id=?
                                                      id-var-name
                                                      same-marks?
                                                      join-marks
                                                      join-wraps
                                                      smart-append
                                                      make-binding-wrap
                                                      extend-ribcage!
                                                      make-empty-ribcage
                                                      new-mark
                                                      anti-mark
                                                      the-anti-mark
                                                      top-marked?
                                                      top-wrap
                                                      empty-wrap
                                                      set-ribcage-labels!
                                                      set-ribcage-marks!
                                                      set-ribcage-symnames!
                                                      ribcage-labels
                                                      ribcage-marks
                                                      ribcage-symnames
                                                      ribcage?
                                                      make-ribcage
                                                      gen-labels
                                                      gen-label
                                                      make-rename
                                                      rename-marks
                                                      rename-new
                                                      rename-old
                                                      subst-rename?
                                                      wrap-subst
                                                      wrap-marks
                                                      make-wrap
                                                      id-sym-name&marks
                                                      id-sym-name
                                                      id?
                                                      nonsymbol-id?
                                                      global-extend
                                                      lookup
                                                      macros-only-env
                                                      extend-var-env
                                                      extend-env
                                                      null-env
                                                      binding-value
                                                      binding-type
                                                      make-binding
                                                      arg-check
                                                      source-annotation
                                                      no-source
                                                      set-syntax-object-module!
                                                      set-syntax-object-wrap!
                                                      set-syntax-object-expression!
                                                      syntax-object-module
                                                      syntax-object-wrap
                                                      syntax-object-expression
                                                      syntax-object?
                                                      make-syntax-object
                                                      build-lexical-var
                                                      build-letrec
                                                      build-named-let
                                                      build-let
                                                      build-sequence
                                                      build-data
                                                      build-primref
                                                      build-lambda-case
                                                      build-case-lambda
                                                      build-simple-lambda
                                                      build-global-definition
                                                      maybe-name-value!
                                                      build-global-assignment
                                                      build-global-reference
                                                      analyze-variable
                                                      build-lexical-assignment
                                                      build-lexical-reference
                                                      build-dynlet
                                                      build-conditional
                                                      build-application
                                                      build-void
                                                      decorate-source
                                                      get-global-definition-hook
                                                      put-global-definition-hook
                                                      gensym-hook
                                                      local-eval-hook
                                                      top-level-eval-hook
                                                      fx<
                                                      fx=
                                                      fx-
                                                      fx+
                                                      make-dynlet
                                                      make-letrec
                                                      make-let
                                                      make-lambda-case
                                                      make-lambda
                                                      make-sequence
                                                      make-application
                                                      make-conditional
                                                      make-toplevel-define
                                                      make-toplevel-set
                                                      make-toplevel-ref
                                                      make-module-set
                                                      make-module-ref
                                                      make-lexical-set
                                                      make-lexical-ref
                                                      make-primitive-ref
                                                      make-const
                                                      make-void
                                                      *mode*)
                                                    ((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                    ("i2467"
                                                     "i2465"
                                                     "i2463"
                                                     "i2461"
                                                     "i2459"
                                                     "i2457"
                                                     "i2455"
                                                     "i2453"
                                                     "i2451"
                                                     "i2449"
                                                     "i2447"
                                                     "i2445"
                                                     "i2443"
                                                     "i2441"
                                                     "i2439"
                                                     "i2437"
                                                     "i2435"
                                                     "i2433"
                                                     "i2431"
                                                     "i2429"
                                                     "i2427"
                                                     "i2425"
                                                     "i2423"
                                                     "i2421"
                                                     "i2419"
                                                     "i2417"
                                                     "i2415"
                                                     "i2413"
                                                     "i2411"
                                                     "i2409"
                                                     "i2407"
                                                     "i2405"
                                                     "i2403"
                                                     "i2401"
                                                     "i2399"
                                                     "i2397"
                                                     "i2396"
                                                     "i2395"
                                                     "i2393"
                                                     "i2392"
                                                     "i2391"
                                                     "i2390"
                                                     "i2389"
                                                     "i2387"
                                                     "i2385"
                                                     "i2383"
                                                     "i2381"
                                                     "i2379"
                                                     "i2377"
                                                     "i2375"
                                                     "i2373"
                                                     "i2370"
                                                     "i2368"
                                                     "i2367"
                                                     "i2366"
                                                     "i2365"
                                                     "i2364"
                                                     "i2363"
                                                     "i2361"
                                                     "i2359"
                                                     "i2357"
                                                     "i2355"
                                                     "i2354"
                                                     "i2352"
                                                     "i2350"
                                                     "i2348"
                                                     "i2346"
                                                     "i2344"
                                                     "i2342"
                                                     "i2340"
                                                     "i2339"
                                                     "i2337"
                                                     "i2335"
                                                     "i2334"
                                                     "i2333"
                                                     "i2331"
                                                     "i2330"
                                                     "i2328"
                                                     "i2326"
                                                     "i2324"
                                                     "i2322"
                                                     "i2320"
                                                     "i2318"
                                                     "i2316"
                                                     "i2314"
                                                     "i2312"
                                                     "i2310"
                                                     "i2308"
                                                     "i2306"
                                                     "i2304"
                                                     "i2302"
                                                     "i2300"
                                                     "i2298"
                                                     "i2296"
                                                     "i2294"
                                                     "i2292"
                                                     "i2290"
                                                     "i2288"
                                                     "i2286"
                                                     "i2284"
                                                     "i2282"
                                                     "i2280"
                                                     "i2278"
                                                     "i2276"
                                                     "i2274"
                                                     "i2272"
                                                     "i2270"
                                                     "i2268"
                                                     "i2266"
                                                     "i2265"
                                                     "i2263"
                                                     "i2261"
                                                     "i2259"
                                                     "i2257"
                                                     "i2255"
                                                     "i2253"
                                                     "i2251"
                                                     "i2249"
                                                     "i2247"
                                                     "i2245"
                                                     "i2243"
                                                     "i2241"
                                                     "i2239"
                                                     "i2237"
                                                     "i2235"
                                                     "i2233"
                                                     "i2231"
                                                     "i2229"
                                                     "i2227"
                                                     "i2225"
                                                     "i2223"
                                                     "i2221"
                                                     "i2219"
                                                     "i2217"
                                                     "i2214"))
                                                  #(ribcage
                                                    (define-structure
                                                      define-expansion-constructors
                                                      and-map*)
                                                    ((top) (top) (top))
                                                    ("i2066" "i2065" "i2063")))
                                                 (hygiene guile)))
                                          'compile
                                          (if (#{free-id=?\ 2412}#
                                                #{x\ 3901}#
                                                '#(syntax-object
                                                   load
                                                   ((top)
                                                    #(ribcage () () ())
                                                    #(ribcage () () ())
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i3900"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(f when-list situations)
                                                      #((top) (top) (top))
                                                      #("i3894"
                                                        "i3895"
                                                        "i3896"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(e when-list w)
                                                      #((top) (top) (top))
                                                      #("i3891"
                                                        "i3892"
                                                        "i3893"))
                                                    #(ribcage
                                                      (lambda-var-list
                                                        gen-var
                                                        strip
                                                        chi-lambda-case
                                                        lambda*-formals
                                                        chi-simple-lambda
                                                        lambda-formals
                                                        ellipsis?
                                                        chi-void
                                                        eval-local-transformer
                                                        chi-local-syntax
                                                        chi-body
                                                        chi-macro
                                                        chi-application
                                                        chi-expr
                                                        chi
                                                        chi-top
                                                        syntax-type
                                                        chi-when-list
                                                        chi-install-global
                                                        chi-top-sequence
                                                        chi-sequence
                                                        source-wrap
                                                        wrap
                                                        bound-id-member?
                                                        distinct-bound-ids?
                                                        valid-bound-ids?
                                                        bound-id=?
                                                        free-id=?
                                                        id-var-name
                                                        same-marks?
                                                        join-marks
                                                        join-wraps
                                                        smart-append
                                                        make-binding-wrap
                                                        extend-ribcage!
                                                        make-empty-ribcage
                                                        new-mark
                                                        anti-mark
                                                        the-anti-mark
                                                        top-marked?
                                                        top-wrap
                                                        empty-wrap
                                                        set-ribcage-labels!
                                                        set-ribcage-marks!
                                                        set-ribcage-symnames!
                                                        ribcage-labels
                                                        ribcage-marks
                                                        ribcage-symnames
                                                        ribcage?
                                                        make-ribcage
                                                        gen-labels
                                                        gen-label
                                                        make-rename
                                                        rename-marks
                                                        rename-new
                                                        rename-old
                                                        subst-rename?
                                                        wrap-subst
                                                        wrap-marks
                                                        make-wrap
                                                        id-sym-name&marks
                                                        id-sym-name
                                                        id?
                                                        nonsymbol-id?
                                                        global-extend
                                                        lookup
                                                        macros-only-env
                                                        extend-var-env
                                                        extend-env
                                                        null-env
                                                        binding-value
                                                        binding-type
                                                        make-binding
                                                        arg-check
                                                        source-annotation
                                                        no-source
                                                        set-syntax-object-module!
                                                        set-syntax-object-wrap!
                                                        set-syntax-object-expression!
                                                        syntax-object-module
                                                        syntax-object-wrap
                                                        syntax-object-expression
                                                        syntax-object?
                                                        make-syntax-object
                                                        build-lexical-var
                                                        build-letrec
                                                        build-named-let
                                                        build-let
                                                        build-sequence
                                                        build-data
                                                        build-primref
                                                        build-lambda-case
                                                        build-case-lambda
                                                        build-simple-lambda
                                                        build-global-definition
                                                        maybe-name-value!
                                                        build-global-assignment
                                                        build-global-reference
                                                        analyze-variable
                                                        build-lexical-assignment
                                                        build-lexical-reference
                                                        build-dynlet
                                                        build-conditional
                                                        build-application
                                                        build-void
                                                        decorate-source
                                                        get-global-definition-hook
                                                        put-global-definition-hook
                                                        gensym-hook
                                                        local-eval-hook
                                                        top-level-eval-hook
                                                        fx<
                                                        fx=
                                                        fx-
                                                        fx+
                                                        make-dynlet
                                                        make-letrec
                                                        make-let
                                                        make-lambda-case
                                                        make-lambda
                                                        make-sequence
                                                        make-application
                                                        make-conditional
                                                        make-toplevel-define
                                                        make-toplevel-set
                                                        make-toplevel-ref
                                                        make-module-set
                                                        make-module-ref
                                                        make-lexical-set
                                                        make-lexical-ref
                                                        make-primitive-ref
                                                        make-const
                                                        make-void
                                                        *mode*)
                                                      ((top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top))
                                                      ("i2467"
                                                       "i2465"
                                                       "i2463"
                                                       "i2461"
                                                       "i2459"
                                                       "i2457"
                                                       "i2455"
                                                       "i2453"
                                                       "i2451"
                                                       "i2449"
                                                       "i2447"
                                                       "i2445"
                                                       "i2443"
                                                       "i2441"
                                                       "i2439"
                                                       "i2437"
                                                       "i2435"
                                                       "i2433"
                                                       "i2431"
                                                       "i2429"
                                                       "i2427"
                                                       "i2425"
                                                       "i2423"
                                                       "i2421"
                                                       "i2419"
                                                       "i2417"
                                                       "i2415"
                                                       "i2413"
                                                       "i2411"
                                                       "i2409"
                                                       "i2407"
                                                       "i2405"
                                                       "i2403"
                                                       "i2401"
                                                       "i2399"
                                                       "i2397"
                                                       "i2396"
                                                       "i2395"
                                                       "i2393"
                                                       "i2392"
                                                       "i2391"
                                                       "i2390"
                                                       "i2389"
                                                       "i2387"
                                                       "i2385"
                                                       "i2383"
                                                       "i2381"
                                                       "i2379"
                                                       "i2377"
                                                       "i2375"
                                                       "i2373"
                                                       "i2370"
                                                       "i2368"
                                                       "i2367"
                                                       "i2366"
                                                       "i2365"
                                                       "i2364"
                                                       "i2363"
                                                       "i2361"
                                                       "i2359"
                                                       "i2357"
                                                       "i2355"
                                                       "i2354"
                                                       "i2352"
                                                       "i2350"
                                                       "i2348"
                                                       "i2346"
                                                       "i2344"
                                                       "i2342"
                                                       "i2340"
                                                       "i2339"
                                                       "i2337"
                                                       "i2335"
                                                       "i2334"
                                                       "i2333"
                                                       "i2331"
                                                       "i2330"
                                                       "i2328"
                                                       "i2326"
                                                       "i2324"
                                                       "i2322"
                                                       "i2320"
                                                       "i2318"
                                                       "i2316"
                                                       "i2314"
                                                       "i2312"
                                                       "i2310"
                                                       "i2308"
                                                       "i2306"
                                                       "i2304"
                                                       "i2302"
                                                       "i2300"
                                                       "i2298"
                                                       "i2296"
                                                       "i2294"
                                                       "i2292"
                                                       "i2290"
                                                       "i2288"
                                                       "i2286"
                                                       "i2284"
                                                       "i2282"
                                                       "i2280"
                                                       "i2278"
                                                       "i2276"
                                                       "i2274"
                                                       "i2272"
                                                       "i2270"
                                                       "i2268"
                                                       "i2266"
                                                       "i2265"
                                                       "i2263"
                                                       "i2261"
                                                       "i2259"
                                                       "i2257"
                                                       "i2255"
                                                       "i2253"
                                                       "i2251"
                                                       "i2249"
                                                       "i2247"
                                                       "i2245"
                                                       "i2243"
                                                       "i2241"
                                                       "i2239"
                                                       "i2237"
                                                       "i2235"
                                                       "i2233"
                                                       "i2231"
                                                       "i2229"
                                                       "i2227"
                                                       "i2225"
                                                       "i2223"
                                                       "i2221"
                                                       "i2219"
                                                       "i2217"
                                                       "i2214"))
                                                    #(ribcage
                                                      (define-structure
                                                        define-expansion-constructors
                                                        and-map*)
                                                      ((top) (top) (top))
                                                      ("i2066"
                                                       "i2065"
                                                       "i2063")))
                                                   (hygiene guile)))
                                            'load
                                            (if (#{free-id=?\ 2412}#
                                                  #{x\ 3901}#
                                                  '#(syntax-object
                                                     eval
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage () () ())
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(x)
                                                        #((top))
                                                        #("i3900"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(f
                                                          when-list
                                                          situations)
                                                        #((top) (top) (top))
                                                        #("i3894"
                                                          "i3895"
                                                          "i3896"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(e when-list w)
                                                        #((top) (top) (top))
                                                        #("i3891"
                                                          "i3892"
                                                          "i3893"))
                                                      #(ribcage
                                                        (lambda-var-list
                                                          gen-var
                                                          strip
                                                          chi-lambda-case
                                                          lambda*-formals
                                                          chi-simple-lambda
                                                          lambda-formals
                                                          ellipsis?
                                                          chi-void
                                                          eval-local-transformer
                                                          chi-local-syntax
                                                          chi-body
                                                          chi-macro
                                                          chi-application
                                                          chi-expr
                                                          chi
                                                          chi-top
                                                          syntax-type
                                                          chi-when-list
                                                          chi-install-global
                                                          chi-top-sequence
                                                          chi-sequence
                                                          source-wrap
                                                          wrap
                                                          bound-id-member?
                                                          distinct-bound-ids?
                                                          valid-bound-ids?
                                                          bound-id=?
                                                          free-id=?
                                                          id-var-name
                                                          same-marks?
                                                          join-marks
                                                          join-wraps
                                                          smart-append
                                                          make-binding-wrap
                                                          extend-ribcage!
                                                          make-empty-ribcage
                                                          new-mark
                                                          anti-mark
                                                          the-anti-mark
                                                          top-marked?
                                                          top-wrap
                                                          empty-wrap
                                                          set-ribcage-labels!
                                                          set-ribcage-marks!
                                                          set-ribcage-symnames!
                                                          ribcage-labels
                                                          ribcage-marks
                                                          ribcage-symnames
                                                          ribcage?
                                                          make-ribcage
                                                          gen-labels
                                                          gen-label
                                                          make-rename
                                                          rename-marks
                                                          rename-new
                                                          rename-old
                                                          subst-rename?
                                                          wrap-subst
                                                          wrap-marks
                                                          make-wrap
                                                          id-sym-name&marks
                                                          id-sym-name
                                                          id?
                                                          nonsymbol-id?
                                                          global-extend
                                                          lookup
                                                          macros-only-env
                                                          extend-var-env
                                                          extend-env
                                                          null-env
                                                          binding-value
                                                          binding-type
                                                          make-binding
                                                          arg-check
                                                          source-annotation
                                                          no-source
                                                          set-syntax-object-module!
                                                          set-syntax-object-wrap!
                                                          set-syntax-object-expression!
                                                          syntax-object-module
                                                          syntax-object-wrap
                                                          syntax-object-expression
                                                          syntax-object?
                                                          make-syntax-object
                                                          build-lexical-var
                                                          build-letrec
                                                          build-named-let
                                                          build-let
                                                          build-sequence
                                                          build-data
                                                          build-primref
                                                          build-lambda-case
                                                          build-case-lambda
                                                          build-simple-lambda
                                                          build-global-definition
                                                          maybe-name-value!
                                                          build-global-assignment
                                                          build-global-reference
                                                          analyze-variable
                                                          build-lexical-assignment
                                                          build-lexical-reference
                                                          build-dynlet
                                                          build-conditional
                                                          build-application
                                                          build-void
                                                          decorate-source
                                                          get-global-definition-hook
                                                          put-global-definition-hook
                                                          gensym-hook
                                                          local-eval-hook
                                                          top-level-eval-hook
                                                          fx<
                                                          fx=
                                                          fx-
                                                          fx+
                                                          make-dynlet
                                                          make-letrec
                                                          make-let
                                                          make-lambda-case
                                                          make-lambda
                                                          make-sequence
                                                          make-application
                                                          make-conditional
                                                          make-toplevel-define
                                                          make-toplevel-set
                                                          make-toplevel-ref
                                                          make-module-set
                                                          make-module-ref
                                                          make-lexical-set
                                                          make-lexical-ref
                                                          make-primitive-ref
                                                          make-const
                                                          make-void
                                                          *mode*)
                                                        ((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                        ("i2467"
                                                         "i2465"
                                                         "i2463"
                                                         "i2461"
                                                         "i2459"
                                                         "i2457"
                                                         "i2455"
                                                         "i2453"
                                                         "i2451"
                                                         "i2449"
                                                         "i2447"
                                                         "i2445"
                                                         "i2443"
                                                         "i2441"
                                                         "i2439"
                                                         "i2437"
                                                         "i2435"
                                                         "i2433"
                                                         "i2431"
                                                         "i2429"
                                                         "i2427"
                                                         "i2425"
                                                         "i2423"
                                                         "i2421"
                                                         "i2419"
                                                         "i2417"
                                                         "i2415"
                                                         "i2413"
                                                         "i2411"
                                                         "i2409"
                                                         "i2407"
                                                         "i2405"
                                                         "i2403"
                                                         "i2401"
                                                         "i2399"
                                                         "i2397"
                                                         "i2396"
                                                         "i2395"
                                                         "i2393"
                                                         "i2392"
                                                         "i2391"
                                                         "i2390"
                                                         "i2389"
                                                         "i2387"
                                                         "i2385"
                                                         "i2383"
                                                         "i2381"
                                                         "i2379"
                                                         "i2377"
                                                         "i2375"
                                                         "i2373"
                                                         "i2370"
                                                         "i2368"
                                                         "i2367"
                                                         "i2366"
                                                         "i2365"
                                                         "i2364"
                                                         "i2363"
                                                         "i2361"
                                                         "i2359"
                                                         "i2357"
                                                         "i2355"
                                                         "i2354"
                                                         "i2352"
                                                         "i2350"
                                                         "i2348"
                                                         "i2346"
                                                         "i2344"
                                                         "i2342"
                                                         "i2340"
                                                         "i2339"
                                                         "i2337"
                                                         "i2335"
                                                         "i2334"
                                                         "i2333"
                                                         "i2331"
                                                         "i2330"
                                                         "i2328"
                                                         "i2326"
                                                         "i2324"
                                                         "i2322"
                                                         "i2320"
                                                         "i2318"
                                                         "i2316"
                                                         "i2314"
                                                         "i2312"
                                                         "i2310"
                                                         "i2308"
                                                         "i2306"
                                                         "i2304"
                                                         "i2302"
                                                         "i2300"
                                                         "i2298"
                                                         "i2296"
                                                         "i2294"
                                                         "i2292"
                                                         "i2290"
                                                         "i2288"
                                                         "i2286"
                                                         "i2284"
                                                         "i2282"
                                                         "i2280"
                                                         "i2278"
                                                         "i2276"
                                                         "i2274"
                                                         "i2272"
                                                         "i2270"
                                                         "i2268"
                                                         "i2266"
                                                         "i2265"
                                                         "i2263"
                                                         "i2261"
                                                         "i2259"
                                                         "i2257"
                                                         "i2255"
                                                         "i2253"
                                                         "i2251"
                                                         "i2249"
                                                         "i2247"
                                                         "i2245"
                                                         "i2243"
                                                         "i2241"
                                                         "i2239"
                                                         "i2237"
                                                         "i2235"
                                                         "i2233"
                                                         "i2231"
                                                         "i2229"
                                                         "i2227"
                                                         "i2225"
                                                         "i2223"
                                                         "i2221"
                                                         "i2219"
                                                         "i2217"
                                                         "i2214"))
                                                      #(ribcage
                                                        (define-structure
                                                          define-expansion-constructors
                                                          and-map*)
                                                        ((top) (top) (top))
                                                        ("i2066"
                                                         "i2065"
                                                         "i2063")))
                                                     (hygiene guile)))
                                              'eval
                                              (if (#{free-id=?\ 2412}#
                                                    #{x\ 3901}#
                                                    '#(syntax-object
                                                       expand
                                                       ((top)
                                                        #(ribcage () () ())
                                                        #(ribcage () () ())
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(x)
                                                          #((top))
                                                          #("i3900"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(f
                                                            when-list
                                                            situations)
                                                          #((top) (top) (top))
                                                          #("i3894"
                                                            "i3895"
                                                            "i3896"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(e when-list w)
                                                          #((top) (top) (top))
                                                          #("i3891"
                                                            "i3892"
                                                            "i3893"))
                                                        #(ribcage
                                                          (lambda-var-list
                                                            gen-var
                                                            strip
                                                            chi-lambda-case
                                                            lambda*-formals
                                                            chi-simple-lambda
                                                            lambda-formals
                                                            ellipsis?
                                                            chi-void
                                                            eval-local-transformer
                                                            chi-local-syntax
                                                            chi-body
                                                            chi-macro
                                                            chi-application
                                                            chi-expr
                                                            chi
                                                            chi-top
                                                            syntax-type
                                                            chi-when-list
                                                            chi-install-global
                                                            chi-top-sequence
                                                            chi-sequence
                                                            source-wrap
                                                            wrap
                                                            bound-id-member?
                                                            distinct-bound-ids?
                                                            valid-bound-ids?
                                                            bound-id=?
                                                            free-id=?
                                                            id-var-name
                                                            same-marks?
                                                            join-marks
                                                            join-wraps
                                                            smart-append
                                                            make-binding-wrap
                                                            extend-ribcage!
                                                            make-empty-ribcage
                                                            new-mark
                                                            anti-mark
                                                            the-anti-mark
                                                            top-marked?
                                                            top-wrap
                                                            empty-wrap
                                                            set-ribcage-labels!
                                                            set-ribcage-marks!
                                                            set-ribcage-symnames!
                                                            ribcage-labels
                                                            ribcage-marks
                                                            ribcage-symnames
                                                            ribcage?
                                                            make-ribcage
                                                            gen-labels
                                                            gen-label
                                                            make-rename
                                                            rename-marks
                                                            rename-new
                                                            rename-old
                                                            subst-rename?
                                                            wrap-subst
                                                            wrap-marks
                                                            make-wrap
                                                            id-sym-name&marks
                                                            id-sym-name
                                                            id?
                                                            nonsymbol-id?
                                                            global-extend
                                                            lookup
                                                            macros-only-env
                                                            extend-var-env
                                                            extend-env
                                                            null-env
                                                            binding-value
                                                            binding-type
                                                            make-binding
                                                            arg-check
                                                            source-annotation
                                                            no-source
                                                            set-syntax-object-module!
                                                            set-syntax-object-wrap!
                                                            set-syntax-object-expression!
                                                            syntax-object-module
                                                            syntax-object-wrap
                                                            syntax-object-expression
                                                            syntax-object?
                                                            make-syntax-object
                                                            build-lexical-var
                                                            build-letrec
                                                            build-named-let
                                                            build-let
                                                            build-sequence
                                                            build-data
                                                            build-primref
                                                            build-lambda-case
                                                            build-case-lambda
                                                            build-simple-lambda
                                                            build-global-definition
                                                            maybe-name-value!
                                                            build-global-assignment
                                                            build-global-reference
                                                            analyze-variable
                                                            build-lexical-assignment
                                                            build-lexical-reference
                                                            build-dynlet
                                                            build-conditional
                                                            build-application
                                                            build-void
                                                            decorate-source
                                                            get-global-definition-hook
                                                            put-global-definition-hook
                                                            gensym-hook
                                                            local-eval-hook
                                                            top-level-eval-hook
                                                            fx<
                                                            fx=
                                                            fx-
                                                            fx+
                                                            make-dynlet
                                                            make-letrec
                                                            make-let
                                                            make-lambda-case
                                                            make-lambda
                                                            make-sequence
                                                            make-application
                                                            make-conditional
                                                            make-toplevel-define
                                                            make-toplevel-set
                                                            make-toplevel-ref
                                                            make-module-set
                                                            make-module-ref
                                                            make-lexical-set
                                                            make-lexical-ref
                                                            make-primitive-ref
                                                            make-const
                                                            make-void
                                                            *mode*)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("i2467"
                                                           "i2465"
                                                           "i2463"
                                                           "i2461"
                                                           "i2459"
                                                           "i2457"
                                                           "i2455"
                                                           "i2453"
                                                           "i2451"
                                                           "i2449"
                                                           "i2447"
                                                           "i2445"
                                                           "i2443"
                                                           "i2441"
                                                           "i2439"
                                                           "i2437"
                                                           "i2435"
                                                           "i2433"
                                                           "i2431"
                                                           "i2429"
                                                           "i2427"
                                                           "i2425"
                                                           "i2423"
                                                           "i2421"
                                                           "i2419"
                                                           "i2417"
                                                           "i2415"
                                                           "i2413"
                                                           "i2411"
                                                           "i2409"
                                                           "i2407"
                                                           "i2405"
                                                           "i2403"
                                                           "i2401"
                                                           "i2399"
                                                           "i2397"
                                                           "i2396"
                                                           "i2395"
                                                           "i2393"
                                                           "i2392"
                                                           "i2391"
                                                           "i2390"
                                                           "i2389"
                                                           "i2387"
                                                           "i2385"
                                                           "i2383"
                                                           "i2381"
                                                           "i2379"
                                                           "i2377"
                                                           "i2375"
                                                           "i2373"
                                                           "i2370"
                                                           "i2368"
                                                           "i2367"
                                                           "i2366"
                                                           "i2365"
                                                           "i2364"
                                                           "i2363"
                                                           "i2361"
                                                           "i2359"
                                                           "i2357"
                                                           "i2355"
                                                           "i2354"
                                                           "i2352"
                                                           "i2350"
                                                           "i2348"
                                                           "i2346"
                                                           "i2344"
                                                           "i2342"
                                                           "i2340"
                                                           "i2339"
                                                           "i2337"
                                                           "i2335"
                                                           "i2334"
                                                           "i2333"
                                                           "i2331"
                                                           "i2330"
                                                           "i2328"
                                                           "i2326"
                                                           "i2324"
                                                           "i2322"
                                                           "i2320"
                                                           "i2318"
                                                           "i2316"
                                                           "i2314"
                                                           "i2312"
                                                           "i2310"
                                                           "i2308"
                                                           "i2306"
                                                           "i2304"
                                                           "i2302"
                                                           "i2300"
                                                           "i2298"
                                                           "i2296"
                                                           "i2294"
                                                           "i2292"
                                                           "i2290"
                                                           "i2288"
                                                           "i2286"
                                                           "i2284"
                                                           "i2282"
                                                           "i2280"
                                                           "i2278"
                                                           "i2276"
                                                           "i2274"
                                                           "i2272"
                                                           "i2270"
                                                           "i2268"
                                                           "i2266"
                                                           "i2265"
                                                           "i2263"
                                                           "i2261"
                                                           "i2259"
                                                           "i2257"
                                                           "i2255"
                                                           "i2253"
                                                           "i2251"
                                                           "i2249"
                                                           "i2247"
                                                           "i2245"
                                                           "i2243"
                                                           "i2241"
                                                           "i2239"
                                                           "i2237"
                                                           "i2235"
                                                           "i2233"
                                                           "i2231"
                                                           "i2229"
                                                           "i2227"
                                                           "i2225"
                                                           "i2223"
                                                           "i2221"
                                                           "i2219"
                                                           "i2217"
                                                           "i2214"))
                                                        #(ribcage
                                                          (define-structure
                                                            define-expansion-constructors
                                                            and-map*)
                                                          ((top) (top) (top))
                                                          ("i2066"
                                                           "i2065"
                                                           "i2063")))
                                                       (hygiene guile)))
                                                'expand
                                                (syntax-violation
                                                  'eval-when
                                                  "invalid situation"
                                                  #{e\ 3888}#
                                                  (#{wrap\ 2422}#
                                                    #{x\ 3901}#
                                                    #{w\ 3890}#
                                                    #f)))))))
                                      #{situations\ 3899}#))))))
                 (#{f\ 3897}# #{when-list\ 3889}# (quote ())))))
           (#{chi-install-global\ 2430}#
             (lambda (#{name\ 3911}# #{e\ 3912}#)
               (#{build-global-definition\ 2293}#
                 #f
                 #{name\ 3911}#
                 (#{build-application\ 2275}#
                   #f
                   (#{build-primref\ 2301}#
                     #f
                     'make-syntax-transformer)
                   (list (#{build-data\ 2303}# #f #{name\ 3911}#)
                         (#{build-data\ 2303}# #f (quote macro))
                         (#{build-application\ 2275}#
                           #f
                           (#{build-primref\ 2301}# #f (quote cons))
                           (list #{e\ 3912}#
                                 (#{build-application\ 2275}#
                                   #f
                                   (#{build-primref\ 2301}#
                                     #f
                                     'module-name)
                                   (list (#{build-application\ 2275}#
                                           #f
                                           (#{build-primref\ 2301}#
                                             #f
                                             'current-module)
                                           '()))))))))))
           (#{chi-top-sequence\ 2428}#
             (lambda (#{body\ 3926}#
                      #{r\ 3927}#
                      #{w\ 3928}#
                      #{s\ 3929}#
                      #{m\ 3930}#
                      #{esew\ 3931}#
                      #{mod\ 3932}#)
               (#{build-sequence\ 2305}#
                 #{s\ 3929}#
                 (letrec ((#{dobody\ 3948}#
                            (lambda (#{body\ 3949}#
                                     #{r\ 3950}#
                                     #{w\ 3951}#
                                     #{m\ 3952}#
                                     #{esew\ 3953}#
                                     #{mod\ 3954}#
                                     #{out\ 3955}#)
                              (if (null? #{body\ 3949}#)
                                (reverse #{out\ 3955}#)
                                (#{dobody\ 3948}#
                                  (cdr #{body\ 3949}#)
                                  #{r\ 3950}#
                                  #{w\ 3951}#
                                  #{m\ 3952}#
                                  #{esew\ 3953}#
                                  #{mod\ 3954}#
                                  (cons (#{chi-top\ 2436}#
                                          (car #{body\ 3949}#)
                                          #{r\ 3950}#
                                          #{w\ 3951}#
                                          #{m\ 3952}#
                                          #{esew\ 3953}#
                                          #{mod\ 3954}#)
                                        #{out\ 3955}#))))))
                   (#{dobody\ 3948}#
                     #{body\ 3926}#
                     #{r\ 3927}#
                     #{w\ 3928}#
                     #{m\ 3930}#
                     #{esew\ 3931}#
                     #{mod\ 3932}#
                     '())))))
           (#{chi-sequence\ 2426}#
             (lambda (#{body\ 3956}#
                      #{r\ 3957}#
                      #{w\ 3958}#
                      #{s\ 3959}#
                      #{mod\ 3960}#)
               (#{build-sequence\ 2305}#
                 #{s\ 3959}#
                 (letrec ((#{dobody\ 3971}#
                            (lambda (#{body\ 3972}#
                                     #{r\ 3973}#
                                     #{w\ 3974}#
                                     #{mod\ 3975}#)
                              (if (null? #{body\ 3972}#)
                                '()
                                (let ((#{first\ 3977}#
                                        (#{chi\ 2438}#
                                          (car #{body\ 3972}#)
                                          #{r\ 3973}#
                                          #{w\ 3974}#
                                          #{mod\ 3975}#)))
                                  (cons #{first\ 3977}#
                                        (#{dobody\ 3971}#
                                          (cdr #{body\ 3972}#)
                                          #{r\ 3973}#
                                          #{w\ 3974}#
                                          #{mod\ 3975}#)))))))
                   (#{dobody\ 3971}#
                     #{body\ 3956}#
                     #{r\ 3957}#
                     #{w\ 3958}#
                     #{mod\ 3960}#)))))
           (#{source-wrap\ 2424}#
             (lambda (#{x\ 3978}#
                      #{w\ 3979}#
                      #{s\ 3980}#
                      #{defmod\ 3981}#)
               (#{wrap\ 2422}#
                 (#{decorate-source\ 2271}#
                   #{x\ 3978}#
                   #{s\ 3980}#)
                 #{w\ 3979}#
                 #{defmod\ 3981}#)))
           (#{wrap\ 2422}#
             (lambda (#{x\ 3986}# #{w\ 3987}# #{defmod\ 3988}#)
               (if (if (null? (#{wrap-marks\ 2360}# #{w\ 3987}#))
                     (null? (#{wrap-subst\ 2362}# #{w\ 3987}#))
                     #f)
                 #{x\ 3986}#
                 (if (#{syntax-object?\ 2317}# #{x\ 3986}#)
                   (#{make-syntax-object\ 2315}#
                     (#{syntax-object-expression\ 2319}# #{x\ 3986}#)
                     (#{join-wraps\ 2404}#
                       #{w\ 3987}#
                       (#{syntax-object-wrap\ 2321}# #{x\ 3986}#))
                     (#{syntax-object-module\ 2323}# #{x\ 3986}#))
                   (if (null? #{x\ 3986}#)
                     #{x\ 3986}#
                     (#{make-syntax-object\ 2315}#
                       #{x\ 3986}#
                       #{w\ 3987}#
                       #{defmod\ 3988}#))))))
           (#{bound-id-member?\ 2420}#
             (lambda (#{x\ 4001}# #{list\ 4002}#)
               (if (not (null? #{list\ 4002}#))
                 (let ((#{t\ 4009}#
                         (#{bound-id=?\ 2414}#
                           #{x\ 4001}#
                           (car #{list\ 4002}#))))
                   (if #{t\ 4009}#
                     #{t\ 4009}#
                     (#{bound-id-member?\ 2420}#
                       #{x\ 4001}#
                       (cdr #{list\ 4002}#))))
                 #f)))
           (#{distinct-bound-ids?\ 2418}#
             (lambda (#{ids\ 4011}#)
               (letrec ((#{distinct?\ 4015}#
                          (lambda (#{ids\ 4016}#)
                            (let ((#{t\ 4019}# (null? #{ids\ 4016}#)))
                              (if #{t\ 4019}#
                                #{t\ 4019}#
                                (if (not (#{bound-id-member?\ 2420}#
                                           (car #{ids\ 4016}#)
                                           (cdr #{ids\ 4016}#)))
                                  (#{distinct?\ 4015}# (cdr #{ids\ 4016}#))
                                  #f))))))
                 (#{distinct?\ 4015}# #{ids\ 4011}#))))
           (#{valid-bound-ids?\ 2416}#
             (lambda (#{ids\ 4023}#)
               (if (letrec ((#{all-ids?\ 4028}#
                              (lambda (#{ids\ 4029}#)
                                (let ((#{t\ 4032}# (null? #{ids\ 4029}#)))
                                  (if #{t\ 4032}#
                                    #{t\ 4032}#
                                    (if (#{id?\ 2353}# (car #{ids\ 4029}#))
                                      (#{all-ids?\ 4028}# (cdr #{ids\ 4029}#))
                                      #f))))))
                     (#{all-ids?\ 4028}# #{ids\ 4023}#))
                 (#{distinct-bound-ids?\ 2418}# #{ids\ 4023}#)
                 #f)))
           (#{bound-id=?\ 2414}#
             (lambda (#{i\ 4037}# #{j\ 4038}#)
               (if (if (#{syntax-object?\ 2317}# #{i\ 4037}#)
                     (#{syntax-object?\ 2317}# #{j\ 4038}#)
                     #f)
                 (if (eq? (#{syntax-object-expression\ 2319}# #{i\ 4037}#)
                          (#{syntax-object-expression\ 2319}# #{j\ 4038}#))
                   (#{same-marks?\ 2408}#
                     (#{wrap-marks\ 2360}#
                       (#{syntax-object-wrap\ 2321}# #{i\ 4037}#))
                     (#{wrap-marks\ 2360}#
                       (#{syntax-object-wrap\ 2321}# #{j\ 4038}#)))
                   #f)
                 (eq? #{i\ 4037}# #{j\ 4038}#))))
           (#{free-id=?\ 2412}#
             (lambda (#{i\ 4045}# #{j\ 4046}#)
               (if (eq? (let ((#{x\ 4052}# #{i\ 4045}#))
                          (if (#{syntax-object?\ 2317}# #{x\ 4052}#)
                            (#{syntax-object-expression\ 2319}# #{x\ 4052}#)
                            #{x\ 4052}#))
                        (let ((#{x\ 4055}# #{j\ 4046}#))
                          (if (#{syntax-object?\ 2317}# #{x\ 4055}#)
                            (#{syntax-object-expression\ 2319}# #{x\ 4055}#)
                            #{x\ 4055}#)))
                 (eq? (#{id-var-name\ 2410}# #{i\ 4045}# (quote (())))
                      (#{id-var-name\ 2410}# #{j\ 4046}# (quote (()))))
                 #f)))
           (#{id-var-name\ 2410}#
             (lambda (#{id\ 4059}# #{w\ 4060}#)
               (letrec ((#{search-vector-rib\ 4069}#
                          (lambda (#{sym\ 4081}#
                                   #{subst\ 4082}#
                                   #{marks\ 4083}#
                                   #{symnames\ 4084}#
                                   #{ribcage\ 4085}#)
                            (let ((#{n\ 4092}#
                                    (vector-length #{symnames\ 4084}#)))
                              (letrec ((#{f\ 4095}#
                                         (lambda (#{i\ 4096}#)
                                           (if (#{fx=\ 2258}#
                                                 #{i\ 4096}#
                                                 #{n\ 4092}#)
                                             (#{search\ 4065}#
                                               #{sym\ 4081}#
                                               (cdr #{subst\ 4082}#)
                                               #{marks\ 4083}#)
                                             (if (if (eq? (vector-ref
                                                            #{symnames\ 4084}#
                                                            #{i\ 4096}#)
                                                          #{sym\ 4081}#)
                                                   (#{same-marks?\ 2408}#
                                                     #{marks\ 4083}#
                                                     (vector-ref
                                                       (#{ribcage-marks\ 2380}#
                                                         #{ribcage\ 4085}#)
                                                       #{i\ 4096}#))
                                                   #f)
                                               (values
                                                 (vector-ref
                                                   (#{ribcage-labels\ 2382}#
                                                     #{ribcage\ 4085}#)
                                                   #{i\ 4096}#)
                                                 #{marks\ 4083}#)
                                               (#{f\ 4095}#
                                                 (#{fx+\ 2254}#
                                                   #{i\ 4096}#
                                                   1)))))))
                                (#{f\ 4095}# 0)))))
                        (#{search-list-rib\ 4067}#
                          (lambda (#{sym\ 4104}#
                                   #{subst\ 4105}#
                                   #{marks\ 4106}#
                                   #{symnames\ 4107}#
                                   #{ribcage\ 4108}#)
                            (letrec ((#{f\ 4117}#
                                       (lambda (#{symnames\ 4118}# #{i\ 4119}#)
                                         (if (null? #{symnames\ 4118}#)
                                           (#{search\ 4065}#
                                             #{sym\ 4104}#
                                             (cdr #{subst\ 4105}#)
                                             #{marks\ 4106}#)
                                           (if (if (eq? (car #{symnames\ 4118}#)
                                                        #{sym\ 4104}#)
                                                 (#{same-marks?\ 2408}#
                                                   #{marks\ 4106}#
                                                   (list-ref
                                                     (#{ribcage-marks\ 2380}#
                                                       #{ribcage\ 4108}#)
                                                     #{i\ 4119}#))
                                                 #f)
                                             (values
                                               (list-ref
                                                 (#{ribcage-labels\ 2382}#
                                                   #{ribcage\ 4108}#)
                                                 #{i\ 4119}#)
                                               #{marks\ 4106}#)
                                             (#{f\ 4117}#
                                               (cdr #{symnames\ 4118}#)
                                               (#{fx+\ 2254}#
                                                 #{i\ 4119}#
                                                 1)))))))
                              (#{f\ 4117}# #{symnames\ 4107}# 0))))
                        (#{search\ 4065}#
                          (lambda (#{sym\ 4127}#
                                   #{subst\ 4128}#
                                   #{marks\ 4129}#)
                            (if (null? #{subst\ 4128}#)
                              (values #f #{marks\ 4129}#)
                              (let ((#{fst\ 4134}# (car #{subst\ 4128}#)))
                                (if (eq? #{fst\ 4134}# (quote shift))
                                  (#{search\ 4065}#
                                    #{sym\ 4127}#
                                    (cdr #{subst\ 4128}#)
                                    (cdr #{marks\ 4129}#))
                                  (let ((#{symnames\ 4136}#
                                          (#{ribcage-symnames\ 2378}#
                                            #{fst\ 4134}#)))
                                    (if (vector? #{symnames\ 4136}#)
                                      (#{search-vector-rib\ 4069}#
                                        #{sym\ 4127}#
                                        #{subst\ 4128}#
                                        #{marks\ 4129}#
                                        #{symnames\ 4136}#
                                        #{fst\ 4134}#)
                                      (#{search-list-rib\ 4067}#
                                        #{sym\ 4127}#
                                        #{subst\ 4128}#
                                        #{marks\ 4129}#
                                        #{symnames\ 4136}#
                                        #{fst\ 4134}#)))))))))
                 (if (symbol? #{id\ 4059}#)
                   (let ((#{t\ 4139}#
                           (call-with-values
                             (lambda ()
                               (#{search\ 4065}#
                                 #{id\ 4059}#
                                 (#{wrap-subst\ 2362}# #{w\ 4060}#)
                                 (#{wrap-marks\ 2360}# #{w\ 4060}#)))
                             (lambda (#{x\ 4141}# . #{ignore\ 4142}#)
                               #{x\ 4141}#))))
                     (if #{t\ 4139}# #{t\ 4139}# #{id\ 4059}#))
                   (if (#{syntax-object?\ 2317}# #{id\ 4059}#)
                     (let ((#{id\ 4150}#
                             (#{syntax-object-expression\ 2319}# #{id\ 4059}#))
                           (#{w1\ 4151}#
                             (#{syntax-object-wrap\ 2321}# #{id\ 4059}#)))
                       (let ((#{marks\ 4153}#
                               (#{join-marks\ 2406}#
                                 (#{wrap-marks\ 2360}# #{w\ 4060}#)
                                 (#{wrap-marks\ 2360}# #{w1\ 4151}#))))
                         (call-with-values
                           (lambda ()
                             (#{search\ 4065}#
                               #{id\ 4150}#
                               (#{wrap-subst\ 2362}# #{w\ 4060}#)
                               #{marks\ 4153}#))
                           (lambda (#{new-id\ 4154}# #{marks\ 4155}#)
                             (let ((#{t\ 4160}# #{new-id\ 4154}#))
                               (if #{t\ 4160}#
                                 #{t\ 4160}#
                                 (let ((#{t\ 4163}#
                                         (call-with-values
                                           (lambda ()
                                             (#{search\ 4065}#
                                               #{id\ 4150}#
                                               (#{wrap-subst\ 2362}#
                                                 #{w1\ 4151}#)
                                               #{marks\ 4155}#))
                                           (lambda (#{x\ 4165}#
                                                    .
                                                    #{ignore\ 4166}#)
                                             #{x\ 4165}#))))
                                   (if #{t\ 4163}#
                                     #{t\ 4163}#
                                     #{id\ 4150}#))))))))
                     (syntax-violation
                       'id-var-name
                       "invalid id"
                       #{id\ 4059}#))))))
           (#{same-marks?\ 2408}#
             (lambda (#{x\ 4171}# #{y\ 4172}#)
               (let ((#{t\ 4177}# (eq? #{x\ 4171}# #{y\ 4172}#)))
                 (if #{t\ 4177}#
                   #{t\ 4177}#
                   (if (not (null? #{x\ 4171}#))
                     (if (not (null? #{y\ 4172}#))
                       (if (eq? (car #{x\ 4171}#) (car #{y\ 4172}#))
                         (#{same-marks?\ 2408}#
                           (cdr #{x\ 4171}#)
                           (cdr #{y\ 4172}#))
                         #f)
                       #f)
                     #f)))))
           (#{join-marks\ 2406}#
             (lambda (#{m1\ 4183}# #{m2\ 4184}#)
               (#{smart-append\ 2402}#
                 #{m1\ 4183}#
                 #{m2\ 4184}#)))
           (#{join-wraps\ 2404}#
             (lambda (#{w1\ 4187}# #{w2\ 4188}#)
               (let ((#{m1\ 4193}#
                       (#{wrap-marks\ 2360}# #{w1\ 4187}#))
                     (#{s1\ 4194}#
                       (#{wrap-subst\ 2362}# #{w1\ 4187}#)))
                 (if (null? #{m1\ 4193}#)
                   (if (null? #{s1\ 4194}#)
                     #{w2\ 4188}#
                     (#{make-wrap\ 2358}#
                       (#{wrap-marks\ 2360}# #{w2\ 4188}#)
                       (#{smart-append\ 2402}#
                         #{s1\ 4194}#
                         (#{wrap-subst\ 2362}# #{w2\ 4188}#))))
                   (#{make-wrap\ 2358}#
                     (#{smart-append\ 2402}#
                       #{m1\ 4193}#
                       (#{wrap-marks\ 2360}# #{w2\ 4188}#))
                     (#{smart-append\ 2402}#
                       #{s1\ 4194}#
                       (#{wrap-subst\ 2362}# #{w2\ 4188}#)))))))
           (#{smart-append\ 2402}#
             (lambda (#{m1\ 4195}# #{m2\ 4196}#)
               (if (null? #{m2\ 4196}#)
                 #{m1\ 4195}#
                 (append #{m1\ 4195}# #{m2\ 4196}#))))
           (#{make-binding-wrap\ 2400}#
             (lambda (#{ids\ 4199}# #{labels\ 4200}# #{w\ 4201}#)
               (if (null? #{ids\ 4199}#)
                 #{w\ 4201}#
                 (#{make-wrap\ 2358}#
                   (#{wrap-marks\ 2360}# #{w\ 4201}#)
                   (cons (let ((#{labelvec\ 4206}#
                                 (list->vector #{labels\ 4200}#)))
                           (let ((#{n\ 4208}#
                                   (vector-length #{labelvec\ 4206}#)))
                             (let ((#{symnamevec\ 4211}#
                                     (make-vector #{n\ 4208}#))
                                   (#{marksvec\ 4212}#
                                     (make-vector #{n\ 4208}#)))
                               (begin
                                 (letrec ((#{f\ 4216}#
                                            (lambda (#{ids\ 4217}# #{i\ 4218}#)
                                              (if (not (null? #{ids\ 4217}#))
                                                (call-with-values
                                                  (lambda ()
                                                    (#{id-sym-name&marks\ 2356}#
                                                      (car #{ids\ 4217}#)
                                                      #{w\ 4201}#))
                                                  (lambda (#{symname\ 4219}#
                                                           #{marks\ 4220}#)
                                                    (begin
                                                      (vector-set!
                                                        #{symnamevec\ 4211}#
                                                        #{i\ 4218}#
                                                        #{symname\ 4219}#)
                                                      (vector-set!
                                                        #{marksvec\ 4212}#
                                                        #{i\ 4218}#
                                                        #{marks\ 4220}#)
                                                      (#{f\ 4216}#
                                                        (cdr #{ids\ 4217}#)
                                                        (#{fx+\ 2254}#
                                                          #{i\ 4218}#
                                                          1)))))))))
                                   (#{f\ 4216}# #{ids\ 4199}# 0))
                                 (#{make-ribcage\ 2374}#
                                   #{symnamevec\ 4211}#
                                   #{marksvec\ 4212}#
                                   #{labelvec\ 4206}#)))))
                         (#{wrap-subst\ 2362}# #{w\ 4201}#))))))
           (#{extend-ribcage!\ 2398}#
             (lambda (#{ribcage\ 4223}# #{id\ 4224}# #{label\ 4225}#)
               (begin
                 (#{set-ribcage-symnames!\ 2384}#
                   #{ribcage\ 4223}#
                   (cons (#{syntax-object-expression\ 2319}# #{id\ 4224}#)
                         (#{ribcage-symnames\ 2378}# #{ribcage\ 4223}#)))
                 (#{set-ribcage-marks!\ 2386}#
                   #{ribcage\ 4223}#
                   (cons (#{wrap-marks\ 2360}#
                           (#{syntax-object-wrap\ 2321}# #{id\ 4224}#))
                         (#{ribcage-marks\ 2380}# #{ribcage\ 4223}#)))
                 (#{set-ribcage-labels!\ 2388}#
                   #{ribcage\ 4223}#
                   (cons #{label\ 4225}#
                         (#{ribcage-labels\ 2382}# #{ribcage\ 4223}#))))))
           (#{anti-mark\ 2394}#
             (lambda (#{w\ 4229}#)
               (#{make-wrap\ 2358}#
                 (cons #f (#{wrap-marks\ 2360}# #{w\ 4229}#))
                 (cons 'shift
                       (#{wrap-subst\ 2362}# #{w\ 4229}#)))))
           (#{set-ribcage-labels!\ 2388}#
             (lambda (#{x\ 4232}# #{update\ 4233}#)
               (vector-set! #{x\ 4232}# 3 #{update\ 4233}#)))
           (#{set-ribcage-marks!\ 2386}#
             (lambda (#{x\ 4236}# #{update\ 4237}#)
               (vector-set! #{x\ 4236}# 2 #{update\ 4237}#)))
           (#{set-ribcage-symnames!\ 2384}#
             (lambda (#{x\ 4240}# #{update\ 4241}#)
               (vector-set! #{x\ 4240}# 1 #{update\ 4241}#)))
           (#{ribcage-labels\ 2382}#
             (lambda (#{x\ 4244}#) (vector-ref #{x\ 4244}# 3)))
           (#{ribcage-marks\ 2380}#
             (lambda (#{x\ 4246}#) (vector-ref #{x\ 4246}# 2)))
           (#{ribcage-symnames\ 2378}#
             (lambda (#{x\ 4248}#) (vector-ref #{x\ 4248}# 1)))
           (#{ribcage?\ 2376}#
             (lambda (#{x\ 4250}#)
               (if (vector? #{x\ 4250}#)
                 (if (= (vector-length #{x\ 4250}#) 4)
                   (eq? (vector-ref #{x\ 4250}# 0) (quote ribcage))
                   #f)
                 #f)))
           (#{make-ribcage\ 2374}#
             (lambda (#{symnames\ 4255}#
                      #{marks\ 4256}#
                      #{labels\ 4257}#)
               (vector
                 'ribcage
                 #{symnames\ 4255}#
                 #{marks\ 4256}#
                 #{labels\ 4257}#)))
           (#{gen-labels\ 2371}#
             (lambda (#{ls\ 4261}#)
               (if (null? #{ls\ 4261}#)
                 '()
                 (cons (#{gen-label\ 2369}#)
                       (#{gen-labels\ 2371}# (cdr #{ls\ 4261}#))))))
           (#{gen-label\ 2369}#
             (lambda () (symbol->string (gensym "i"))))
           (#{wrap-subst\ 2362}# cdr)
           (#{wrap-marks\ 2360}# car)
           (#{make-wrap\ 2358}# cons)
           (#{id-sym-name&marks\ 2356}#
             (lambda (#{x\ 4263}# #{w\ 4264}#)
               (if (#{syntax-object?\ 2317}# #{x\ 4263}#)
                 (values
                   (#{syntax-object-expression\ 2319}# #{x\ 4263}#)
                   (#{join-marks\ 2406}#
                     (#{wrap-marks\ 2360}# #{w\ 4264}#)
                     (#{wrap-marks\ 2360}#
                       (#{syntax-object-wrap\ 2321}# #{x\ 4263}#))))
                 (values
                   #{x\ 4263}#
                   (#{wrap-marks\ 2360}# #{w\ 4264}#)))))
           (#{id?\ 2353}#
             (lambda (#{x\ 4267}#)
               (if (symbol? #{x\ 4267}#)
                 #t
                 (if (#{syntax-object?\ 2317}# #{x\ 4267}#)
                   (symbol?
                     (#{syntax-object-expression\ 2319}# #{x\ 4267}#))
                   #f))))
           (#{nonsymbol-id?\ 2351}#
             (lambda (#{x\ 4274}#)
               (if (#{syntax-object?\ 2317}# #{x\ 4274}#)
                 (symbol?
                   (#{syntax-object-expression\ 2319}# #{x\ 4274}#))
                 #f)))
           (#{global-extend\ 2349}#
             (lambda (#{type\ 4278}# #{sym\ 4279}# #{val\ 4280}#)
               (#{put-global-definition-hook\ 2267}#
                 #{sym\ 4279}#
                 #{type\ 4278}#
                 #{val\ 4280}#)))
           (#{lookup\ 2347}#
             (lambda (#{x\ 4284}# #{r\ 4285}# #{mod\ 4286}#)
               (let ((#{t\ 4292}# (assq #{x\ 4284}# #{r\ 4285}#)))
                 (if #{t\ 4292}#
                   (cdr #{t\ 4292}#)
                   (if (symbol? #{x\ 4284}#)
                     (let ((#{t\ 4298}#
                             (#{get-global-definition-hook\ 2269}#
                               #{x\ 4284}#
                               #{mod\ 4286}#)))
                       (if #{t\ 4298}# #{t\ 4298}# (quote (global))))
                     '(displaced-lexical))))))
           (#{macros-only-env\ 2345}#
             (lambda (#{r\ 4303}#)
               (if (null? #{r\ 4303}#)
                 '()
                 (let ((#{a\ 4306}# (car #{r\ 4303}#)))
                   (if (eq? (cadr #{a\ 4306}#) (quote macro))
                     (cons #{a\ 4306}#
                           (#{macros-only-env\ 2345}# (cdr #{r\ 4303}#)))
                     (#{macros-only-env\ 2345}# (cdr #{r\ 4303}#)))))))
           (#{extend-var-env\ 2343}#
             (lambda (#{labels\ 4307}# #{vars\ 4308}# #{r\ 4309}#)
               (if (null? #{labels\ 4307}#)
                 #{r\ 4309}#
                 (#{extend-var-env\ 2343}#
                   (cdr #{labels\ 4307}#)
                   (cdr #{vars\ 4308}#)
                   (cons (cons (car #{labels\ 4307}#)
                               (cons (quote lexical) (car #{vars\ 4308}#)))
                         #{r\ 4309}#)))))
           (#{extend-env\ 2341}#
             (lambda (#{labels\ 4314}# #{bindings\ 4315}# #{r\ 4316}#)
               (if (null? #{labels\ 4314}#)
                 #{r\ 4316}#
                 (#{extend-env\ 2341}#
                   (cdr #{labels\ 4314}#)
                   (cdr #{bindings\ 4315}#)
                   (cons (cons (car #{labels\ 4314}#)
                               (car #{bindings\ 4315}#))
                         #{r\ 4316}#)))))
           (#{binding-value\ 2338}# cdr)
           (#{binding-type\ 2336}# car)
           (#{source-annotation\ 2332}#
             (lambda (#{x\ 4320}#)
               (if (#{syntax-object?\ 2317}# #{x\ 4320}#)
                 (#{source-annotation\ 2332}#
                   (#{syntax-object-expression\ 2319}# #{x\ 4320}#))
                 (if (pair? #{x\ 4320}#)
                   (let ((#{props\ 4327}# (source-properties #{x\ 4320}#)))
                     (if (pair? #{props\ 4327}#) #{props\ 4327}# #f))
                   #f))))
           (#{set-syntax-object-module!\ 2329}#
             (lambda (#{x\ 4329}# #{update\ 4330}#)
               (vector-set! #{x\ 4329}# 3 #{update\ 4330}#)))
           (#{set-syntax-object-wrap!\ 2327}#
             (lambda (#{x\ 4333}# #{update\ 4334}#)
               (vector-set! #{x\ 4333}# 2 #{update\ 4334}#)))
           (#{set-syntax-object-expression!\ 2325}#
             (lambda (#{x\ 4337}# #{update\ 4338}#)
               (vector-set! #{x\ 4337}# 1 #{update\ 4338}#)))
           (#{syntax-object-module\ 2323}#
             (lambda (#{x\ 4341}#) (vector-ref #{x\ 4341}# 3)))
           (#{syntax-object-wrap\ 2321}#
             (lambda (#{x\ 4343}#) (vector-ref #{x\ 4343}# 2)))
           (#{syntax-object-expression\ 2319}#
             (lambda (#{x\ 4345}#) (vector-ref #{x\ 4345}# 1)))
           (#{syntax-object?\ 2317}#
             (lambda (#{x\ 4347}#)
               (if (vector? #{x\ 4347}#)
                 (if (= (vector-length #{x\ 4347}#) 4)
                   (eq? (vector-ref #{x\ 4347}# 0)
                        'syntax-object)
                   #f)
                 #f)))
           (#{make-syntax-object\ 2315}#
             (lambda (#{expression\ 4352}#
                      #{wrap\ 4353}#
                      #{module\ 4354}#)
               (vector
                 'syntax-object
                 #{expression\ 4352}#
                 #{wrap\ 4353}#
                 #{module\ 4354}#)))
           (#{build-letrec\ 2311}#
             (lambda (#{src\ 4358}#
                      #{ids\ 4359}#
                      #{vars\ 4360}#
                      #{val-exps\ 4361}#
                      #{body-exp\ 4362}#)
               (if (null? #{vars\ 4360}#)
                 #{body-exp\ 4362}#
                 (#{make-letrec\ 2250}#
                   #{src\ 4358}#
                   #{ids\ 4359}#
                   #{vars\ 4360}#
                   #{val-exps\ 4361}#
                   #{body-exp\ 4362}#))))
           (#{build-named-let\ 2309}#
             (lambda (#{src\ 4368}#
                      #{ids\ 4369}#
                      #{vars\ 4370}#
                      #{val-exps\ 4371}#
                      #{body-exp\ 4372}#)
               (let ((#{f\ 4382}# (car #{vars\ 4370}#))
                     (#{f-name\ 4383}# (car #{ids\ 4369}#))
                     (#{vars\ 4384}# (cdr #{vars\ 4370}#))
                     (#{ids\ 4385}# (cdr #{ids\ 4369}#)))
                 (let ((#{proc\ 4387}#
                         (#{build-simple-lambda\ 2295}#
                           #{src\ 4368}#
                           #{ids\ 4385}#
                           #f
                           #{vars\ 4384}#
                           '()
                           #{body-exp\ 4372}#)))
                   (#{make-letrec\ 2250}#
                     #{src\ 4368}#
                     (list #{f-name\ 4383}#)
                     (list #{f\ 4382}#)
                     (list #{proc\ 4387}#)
                     (#{build-application\ 2275}#
                       #{src\ 4368}#
                       (#{build-lexical-reference\ 2281}#
                         'fun
                         #{src\ 4368}#
                         #{f-name\ 4383}#
                         #{f\ 4382}#)
                       #{val-exps\ 4371}#))))))
           (#{build-let\ 2307}#
             (lambda (#{src\ 4388}#
                      #{ids\ 4389}#
                      #{vars\ 4390}#
                      #{val-exps\ 4391}#
                      #{body-exp\ 4392}#)
               (if (null? #{vars\ 4390}#)
                 #{body-exp\ 4392}#
                 (#{make-let\ 2248}#
                   #{src\ 4388}#
                   #{ids\ 4389}#
                   #{vars\ 4390}#
                   #{val-exps\ 4391}#
                   #{body-exp\ 4392}#))))
           (#{build-sequence\ 2305}#
             (lambda (#{src\ 4398}# #{exps\ 4399}#)
               (if (null? (cdr #{exps\ 4399}#))
                 (car #{exps\ 4399}#)
                 (#{make-sequence\ 2242}#
                   #{src\ 4398}#
                   #{exps\ 4399}#))))
           (#{build-data\ 2303}#
             (lambda (#{src\ 4402}# #{exp\ 4403}#)
               (#{make-const\ 2220}#
                 #{src\ 4402}#
                 #{exp\ 4403}#)))
           (#{build-primref\ 2301}#
             (lambda (#{src\ 4406}# #{name\ 4407}#)
               (if (equal?
                     (module-name (current-module))
                     '(guile))
                 (#{make-toplevel-ref\ 2232}#
                   #{src\ 4406}#
                   #{name\ 4407}#)
                 (#{make-module-ref\ 2228}#
                   #{src\ 4406}#
                   '(guile)
                   #{name\ 4407}#
                   #f))))
           (#{build-lambda-case\ 2299}#
             (lambda (#{src\ 4410}#
                      #{req\ 4411}#
                      #{opt\ 4412}#
                      #{rest\ 4413}#
                      #{kw\ 4414}#
                      #{inits\ 4415}#
                      #{vars\ 4416}#
                      #{body\ 4417}#
                      #{else-case\ 4418}#)
               (#{make-lambda-case\ 2246}#
                 #{src\ 4410}#
                 #{req\ 4411}#
                 #{opt\ 4412}#
                 #{rest\ 4413}#
                 #{kw\ 4414}#
                 #{inits\ 4415}#
                 #{vars\ 4416}#
                 #{body\ 4417}#
                 #{else-case\ 4418}#)))
           (#{build-case-lambda\ 2297}#
             (lambda (#{src\ 4428}# #{meta\ 4429}# #{body\ 4430}#)
               (#{make-lambda\ 2244}#
                 #{src\ 4428}#
                 #{meta\ 4429}#
                 #{body\ 4430}#)))
           (#{build-simple-lambda\ 2295}#
             (lambda (#{src\ 4434}#
                      #{req\ 4435}#
                      #{rest\ 4436}#
                      #{vars\ 4437}#
                      #{meta\ 4438}#
                      #{exp\ 4439}#)
               (#{make-lambda\ 2244}#
                 #{src\ 4434}#
                 #{meta\ 4438}#
                 (#{make-lambda-case\ 2246}#
                   #{src\ 4434}#
                   #{req\ 4435}#
                   #f
                   #{rest\ 4436}#
                   #f
                   '()
                   #{vars\ 4437}#
                   #{exp\ 4439}#
                   #f))))
           (#{build-global-definition\ 2293}#
             (lambda (#{source\ 4446}# #{var\ 4447}# #{exp\ 4448}#)
               (#{make-toplevel-define\ 2236}#
                 #{source\ 4446}#
                 #{var\ 4447}#
                 #{exp\ 4448}#)))
           (#{maybe-name-value!\ 2291}#
             (lambda (#{name\ 4452}# #{val\ 4453}#)
               (if ((@ (language tree-il) lambda?) #{val\ 4453}#)
                 (let ((#{meta\ 4459}#
                         ((@ (language tree-il) lambda-meta)
                          #{val\ 4453}#)))
                   (if (not (assq (quote name) #{meta\ 4459}#))
                     ((setter (@ (language tree-il) lambda-meta))
                      #{val\ 4453}#
                      (acons 'name
                             #{name\ 4452}#
                             #{meta\ 4459}#)))))))
           (#{build-global-assignment\ 2289}#
             (lambda (#{source\ 4460}#
                      #{var\ 4461}#
                      #{exp\ 4462}#
                      #{mod\ 4463}#)
               (#{analyze-variable\ 2285}#
                 #{mod\ 4463}#
                 #{var\ 4461}#
                 (lambda (#{mod\ 4468}# #{var\ 4469}# #{public?\ 4470}#)
                   (#{make-module-set\ 2230}#
                     #{source\ 4460}#
                     #{mod\ 4468}#
                     #{var\ 4469}#
                     #{public?\ 4470}#
                     #{exp\ 4462}#))
                 (lambda (#{var\ 4474}#)
                   (#{make-toplevel-set\ 2234}#
                     #{source\ 4460}#
                     #{var\ 4474}#
                     #{exp\ 4462}#)))))
           (#{build-global-reference\ 2287}#
             (lambda (#{source\ 4476}# #{var\ 4477}# #{mod\ 4478}#)
               (#{analyze-variable\ 2285}#
                 #{mod\ 4478}#
                 #{var\ 4477}#
                 (lambda (#{mod\ 4482}# #{var\ 4483}# #{public?\ 4484}#)
                   (#{make-module-ref\ 2228}#
                     #{source\ 4476}#
                     #{mod\ 4482}#
                     #{var\ 4483}#
                     #{public?\ 4484}#))
                 (lambda (#{var\ 4488}#)
                   (#{make-toplevel-ref\ 2232}#
                     #{source\ 4476}#
                     #{var\ 4488}#)))))
           (#{analyze-variable\ 2285}#
             (lambda (#{mod\ 4490}#
                      #{var\ 4491}#
                      #{modref-cont\ 4492}#
                      #{bare-cont\ 4493}#)
               (if (not #{mod\ 4490}#)
                 (#{bare-cont\ 4493}# #{var\ 4491}#)
                 (let ((#{kind\ 4500}# (car #{mod\ 4490}#))
                       (#{mod\ 4501}# (cdr #{mod\ 4490}#)))
                   (if (memv #{kind\ 4500}# (quote (public)))
                     (#{modref-cont\ 4492}#
                       #{mod\ 4501}#
                       #{var\ 4491}#
                       #t)
                     (if (memv #{kind\ 4500}# (quote (private)))
                       (if (not (equal?
                                  #{mod\ 4501}#
                                  (module-name (current-module))))
                         (#{modref-cont\ 4492}#
                           #{mod\ 4501}#
                           #{var\ 4491}#
                           #f)
                         (#{bare-cont\ 4493}# #{var\ 4491}#))
                       (if (memv #{kind\ 4500}# (quote (bare)))
                         (#{bare-cont\ 4493}# #{var\ 4491}#)
                         (if (memv #{kind\ 4500}# (quote (hygiene)))
                           (if (if (not (equal?
                                          #{mod\ 4501}#
                                          (module-name (current-module))))
                                 (module-variable
                                   (resolve-module #{mod\ 4501}#)
                                   #{var\ 4491}#)
                                 #f)
                             (#{modref-cont\ 4492}#
                               #{mod\ 4501}#
                               #{var\ 4491}#
                               #f)
                             (#{bare-cont\ 4493}# #{var\ 4491}#))
                           (syntax-violation
                             #f
                             "bad module kind"
                             #{var\ 4491}#
                             #{mod\ 4501}#)))))))))
           (#{build-lexical-assignment\ 2283}#
             (lambda (#{source\ 4509}#
                      #{name\ 4510}#
                      #{var\ 4511}#
                      #{exp\ 4512}#)
               (#{make-lexical-set\ 2226}#
                 #{source\ 4509}#
                 #{name\ 4510}#
                 #{var\ 4511}#
                 #{exp\ 4512}#)))
           (#{build-lexical-reference\ 2281}#
             (lambda (#{type\ 4517}#
                      #{source\ 4518}#
                      #{name\ 4519}#
                      #{var\ 4520}#)
               (#{make-lexical-ref\ 2224}#
                 #{source\ 4518}#
                 #{name\ 4519}#
                 #{var\ 4520}#)))
           (#{build-dynlet\ 2279}#
             (lambda (#{source\ 4525}#
                      #{fluids\ 4526}#
                      #{vals\ 4527}#
                      #{body\ 4528}#)
               (#{make-dynlet\ 2252}#
                 #{source\ 4525}#
                 #{fluids\ 4526}#
                 #{vals\ 4527}#
                 #{body\ 4528}#)))
           (#{build-conditional\ 2277}#
             (lambda (#{source\ 4533}#
                      #{test-exp\ 4534}#
                      #{then-exp\ 4535}#
                      #{else-exp\ 4536}#)
               (#{make-conditional\ 2238}#
                 #{source\ 4533}#
                 #{test-exp\ 4534}#
                 #{then-exp\ 4535}#
                 #{else-exp\ 4536}#)))
           (#{build-application\ 2275}#
             (lambda (#{source\ 4541}#
                      #{fun-exp\ 4542}#
                      #{arg-exps\ 4543}#)
               (#{make-application\ 2240}#
                 #{source\ 4541}#
                 #{fun-exp\ 4542}#
                 #{arg-exps\ 4543}#)))
           (#{build-void\ 2273}#
             (lambda (#{source\ 4547}#)
               (#{make-void\ 2218}# #{source\ 4547}#)))
           (#{decorate-source\ 2271}#
             (lambda (#{e\ 4549}# #{s\ 4550}#)
               (begin
                 (if (if (pair? #{e\ 4549}#) #{s\ 4550}# #f)
                   (set-source-properties! #{e\ 4549}# #{s\ 4550}#))
                 #{e\ 4549}#)))
           (#{get-global-definition-hook\ 2269}#
             (lambda (#{symbol\ 4555}# #{module\ 4556}#)
               (begin
                 (if (if (not #{module\ 4556}#) (current-module) #f)
                   (warn "module system is booted, we should have a module"
                         #{symbol\ 4555}#))
                 (let ((#{v\ 4562}#
                         (module-variable
                           (if #{module\ 4556}#
                             (resolve-module (cdr #{module\ 4556}#))
                             (current-module))
                           #{symbol\ 4555}#)))
                   (if #{v\ 4562}#
                     (if (variable-bound? #{v\ 4562}#)
                       (let ((#{val\ 4567}# (variable-ref #{v\ 4562}#)))
                         (if (macro? #{val\ 4567}#)
                           (if (macro-type #{val\ 4567}#)
                             (cons (macro-type #{val\ 4567}#)
                                   (macro-binding #{val\ 4567}#))
                             #f)
                           #f))
                       #f)
                     #f)))))
           (#{put-global-definition-hook\ 2267}#
             (lambda (#{symbol\ 4571}# #{type\ 4572}# #{val\ 4573}#)
               (module-define!
                 (current-module)
                 #{symbol\ 4571}#
                 (make-syntax-transformer
                   #{symbol\ 4571}#
                   #{type\ 4572}#
                   #{val\ 4573}#))))
           (#{local-eval-hook\ 2264}#
             (lambda (#{x\ 4577}# #{mod\ 4578}#)
               (primitive-eval #{x\ 4577}#)))
           (#{top-level-eval-hook\ 2262}#
             (lambda (#{x\ 4581}# #{mod\ 4582}#)
               (primitive-eval #{x\ 4581}#)))
           (#{fx<\ 2260}# <)
           (#{fx=\ 2258}# =)
           (#{fx-\ 2256}# -)
           (#{fx+\ 2254}# +)
           (#{make-dynlet\ 2252}#
             (lambda (#{src\ 4585}#
                      #{fluids\ 4586}#
                      #{vals\ 4587}#
                      #{body\ 4588}#)
               (make-struct
                 (vector-ref %expanded-vtables 17)
                 0
                 #{src\ 4585}#
                 #{fluids\ 4586}#
                 #{vals\ 4587}#
                 #{body\ 4588}#)))
           (#{make-letrec\ 2250}#
             (lambda (#{src\ 4593}#
                      #{names\ 4594}#
                      #{gensyms\ 4595}#
                      #{vals\ 4596}#
                      #{body\ 4597}#)
               (make-struct
                 (vector-ref %expanded-vtables 16)
                 0
                 #{src\ 4593}#
                 #{names\ 4594}#
                 #{gensyms\ 4595}#
                 #{vals\ 4596}#
                 #{body\ 4597}#)))
           (#{make-let\ 2248}#
             (lambda (#{src\ 4603}#
                      #{names\ 4604}#
                      #{gensyms\ 4605}#
                      #{vals\ 4606}#
                      #{body\ 4607}#)
               (make-struct
                 (vector-ref %expanded-vtables 15)
                 0
                 #{src\ 4603}#
                 #{names\ 4604}#
                 #{gensyms\ 4605}#
                 #{vals\ 4606}#
                 #{body\ 4607}#)))
           (#{make-lambda-case\ 2246}#
             (lambda (#{src\ 4613}#
                      #{req\ 4614}#
                      #{opt\ 4615}#
                      #{rest\ 4616}#
                      #{kw\ 4617}#
                      #{inits\ 4618}#
                      #{gensyms\ 4619}#
                      #{body\ 4620}#
                      #{alternate\ 4621}#)
               (make-struct
                 (vector-ref %expanded-vtables 14)
                 0
                 #{src\ 4613}#
                 #{req\ 4614}#
                 #{opt\ 4615}#
                 #{rest\ 4616}#
                 #{kw\ 4617}#
                 #{inits\ 4618}#
                 #{gensyms\ 4619}#
                 #{body\ 4620}#
                 #{alternate\ 4621}#)))
           (#{make-lambda\ 2244}#
             (lambda (#{src\ 4631}# #{meta\ 4632}# #{body\ 4633}#)
               (make-struct
                 (vector-ref %expanded-vtables 13)
                 0
                 #{src\ 4631}#
                 #{meta\ 4632}#
                 #{body\ 4633}#)))
           (#{make-sequence\ 2242}#
             (lambda (#{src\ 4637}# #{exps\ 4638}#)
               (make-struct
                 (vector-ref %expanded-vtables 12)
                 0
                 #{src\ 4637}#
                 #{exps\ 4638}#)))
           (#{make-application\ 2240}#
             (lambda (#{src\ 4641}# #{proc\ 4642}# #{args\ 4643}#)
               (make-struct
                 (vector-ref %expanded-vtables 11)
                 0
                 #{src\ 4641}#
                 #{proc\ 4642}#
                 #{args\ 4643}#)))
           (#{make-conditional\ 2238}#
             (lambda (#{src\ 4647}#
                      #{test\ 4648}#
                      #{consequent\ 4649}#
                      #{alternate\ 4650}#)
               (make-struct
                 (vector-ref %expanded-vtables 10)
                 0
                 #{src\ 4647}#
                 #{test\ 4648}#
                 #{consequent\ 4649}#
                 #{alternate\ 4650}#)))
           (#{make-toplevel-define\ 2236}#
             (lambda (#{src\ 4655}# #{name\ 4656}# #{exp\ 4657}#)
               (make-struct
                 (vector-ref %expanded-vtables 9)
                 0
                 #{src\ 4655}#
                 #{name\ 4656}#
                 #{exp\ 4657}#)))
           (#{make-toplevel-set\ 2234}#
             (lambda (#{src\ 4661}# #{name\ 4662}# #{exp\ 4663}#)
               (make-struct
                 (vector-ref %expanded-vtables 8)
                 0
                 #{src\ 4661}#
                 #{name\ 4662}#
                 #{exp\ 4663}#)))
           (#{make-toplevel-ref\ 2232}#
             (lambda (#{src\ 4667}# #{name\ 4668}#)
               (make-struct
                 (vector-ref %expanded-vtables 7)
                 0
                 #{src\ 4667}#
                 #{name\ 4668}#)))
           (#{make-module-set\ 2230}#
             (lambda (#{src\ 4671}#
                      #{mod\ 4672}#
                      #{name\ 4673}#
                      #{public?\ 4674}#
                      #{exp\ 4675}#)
               (make-struct
                 (vector-ref %expanded-vtables 6)
                 0
                 #{src\ 4671}#
                 #{mod\ 4672}#
                 #{name\ 4673}#
                 #{public?\ 4674}#
                 #{exp\ 4675}#)))
           (#{make-module-ref\ 2228}#
             (lambda (#{src\ 4681}#
                      #{mod\ 4682}#
                      #{name\ 4683}#
                      #{public?\ 4684}#)
               (make-struct
                 (vector-ref %expanded-vtables 5)
                 0
                 #{src\ 4681}#
                 #{mod\ 4682}#
                 #{name\ 4683}#
                 #{public?\ 4684}#)))
           (#{make-lexical-set\ 2226}#
             (lambda (#{src\ 4689}#
                      #{name\ 4690}#
                      #{gensym\ 4691}#
                      #{exp\ 4692}#)
               (make-struct
                 (vector-ref %expanded-vtables 4)
                 0
                 #{src\ 4689}#
                 #{name\ 4690}#
                 #{gensym\ 4691}#
                 #{exp\ 4692}#)))
           (#{make-lexical-ref\ 2224}#
             (lambda (#{src\ 4697}# #{name\ 4698}# #{gensym\ 4699}#)
               (make-struct
                 (vector-ref %expanded-vtables 3)
                 0
                 #{src\ 4697}#
                 #{name\ 4698}#
                 #{gensym\ 4699}#)))
           (#{make-primitive-ref\ 2222}#
             (lambda (#{src\ 4703}# #{name\ 4704}#)
               (make-struct
                 (vector-ref %expanded-vtables 2)
                 0
                 #{src\ 4703}#
                 #{name\ 4704}#)))
           (#{make-const\ 2220}#
             (lambda (#{src\ 4707}# #{exp\ 4708}#)
               (make-struct
                 (vector-ref %expanded-vtables 1)
                 0
                 #{src\ 4707}#
                 #{exp\ 4708}#)))
           (#{make-void\ 2218}#
             (lambda (#{src\ 4711}#)
               (make-struct
                 (vector-ref %expanded-vtables 0)
                 0
                 #{src\ 4711}#)))
           (#{*mode*\ 2215}# (make-fluid)))
    (begin
      (#{global-extend\ 2349}#
        'local-syntax
        'letrec-syntax
        #t)
      (#{global-extend\ 2349}#
        'local-syntax
        'let-syntax
        #f)
      (#{global-extend\ 2349}#
        'core
        'fluid-let-syntax
        (lambda (#{e\ 4713}#
                 #{r\ 4714}#
                 #{w\ 4715}#
                 #{s\ 4716}#
                 #{mod\ 4717}#)
          ((lambda (#{tmp\ 4723}#)
             ((lambda (#{tmp\ 4724}#)
                (if (if #{tmp\ 4724}#
                      (apply (lambda (#{_\ 4730}#
                                      #{var\ 4731}#
                                      #{val\ 4732}#
                                      #{e1\ 4733}#
                                      #{e2\ 4734}#)
                               (#{valid-bound-ids?\ 2416}# #{var\ 4731}#))
                             #{tmp\ 4724}#)
                      #f)
                  (apply (lambda (#{_\ 4741}#
                                  #{var\ 4742}#
                                  #{val\ 4743}#
                                  #{e1\ 4744}#
                                  #{e2\ 4745}#)
                           (let ((#{names\ 4747}#
                                   (map (lambda (#{x\ 4748}#)
                                          (#{id-var-name\ 2410}#
                                            #{x\ 4748}#
                                            #{w\ 4715}#))
                                        #{var\ 4742}#)))
                             (begin
                               (for-each
                                 (lambda (#{id\ 4751}# #{n\ 4752}#)
                                   (let ((#{atom-key\ 4757}#
                                           (#{binding-type\ 2336}#
                                             (#{lookup\ 2347}#
                                               #{n\ 4752}#
                                               #{r\ 4714}#
                                               #{mod\ 4717}#))))
                                     (if (memv #{atom-key\ 4757}#
                                               '(displaced-lexical))
                                       (syntax-violation
                                         'fluid-let-syntax
                                         "identifier out of context"
                                         #{e\ 4713}#
                                         (#{source-wrap\ 2424}#
                                           #{id\ 4751}#
                                           #{w\ 4715}#
                                           #{s\ 4716}#
                                           #{mod\ 4717}#)))))
                                 #{var\ 4742}#
                                 #{names\ 4747}#)
                               (#{chi-body\ 2446}#
                                 (cons #{e1\ 4744}# #{e2\ 4745}#)
                                 (#{source-wrap\ 2424}#
                                   #{e\ 4713}#
                                   #{w\ 4715}#
                                   #{s\ 4716}#
                                   #{mod\ 4717}#)
                                 (#{extend-env\ 2341}#
                                   #{names\ 4747}#
                                   (let ((#{trans-r\ 4762}#
                                           (#{macros-only-env\ 2345}#
                                             #{r\ 4714}#)))
                                     (map (lambda (#{x\ 4763}#)
                                            (cons 'macro
                                                  (#{eval-local-transformer\ 2450}#
                                                    (#{chi\ 2438}#
                                                      #{x\ 4763}#
                                                      #{trans-r\ 4762}#
                                                      #{w\ 4715}#
                                                      #{mod\ 4717}#)
                                                    #{mod\ 4717}#)))
                                          #{val\ 4743}#))
                                   #{r\ 4714}#)
                                 #{w\ 4715}#
                                 #{mod\ 4717}#))))
                         #{tmp\ 4724}#)
                  ((lambda (#{_\ 4768}#)
                     (syntax-violation
                       'fluid-let-syntax
                       "bad syntax"
                       (#{source-wrap\ 2424}#
                         #{e\ 4713}#
                         #{w\ 4715}#
                         #{s\ 4716}#
                         #{mod\ 4717}#)))
                   #{tmp\ 4723}#)))
              ($sc-dispatch
                #{tmp\ 4723}#
                '(any #(each (any any)) any . each-any))))
           #{e\ 4713}#)))
      (#{global-extend\ 2349}#
        'core
        'quote
        (lambda (#{e\ 4769}#
                 #{r\ 4770}#
                 #{w\ 4771}#
                 #{s\ 4772}#
                 #{mod\ 4773}#)
          ((lambda (#{tmp\ 4779}#)
             ((lambda (#{tmp\ 4780}#)
                (if #{tmp\ 4780}#
                  (apply (lambda (#{_\ 4783}# #{e\ 4784}#)
                           (#{build-data\ 2303}#
                             #{s\ 4772}#
                             (#{strip\ 2464}# #{e\ 4784}# #{w\ 4771}#)))
                         #{tmp\ 4780}#)
                  ((lambda (#{_\ 4786}#)
                     (syntax-violation
                       'quote
                       "bad syntax"
                       (#{source-wrap\ 2424}#
                         #{e\ 4769}#
                         #{w\ 4771}#
                         #{s\ 4772}#
                         #{mod\ 4773}#)))
                   #{tmp\ 4779}#)))
              ($sc-dispatch #{tmp\ 4779}# (quote (any any)))))
           #{e\ 4769}#)))
      (#{global-extend\ 2349}#
        'core
        'syntax
        (letrec ((#{regen\ 4802}#
                   (lambda (#{x\ 4803}#)
                     (let ((#{atom-key\ 4807}# (car #{x\ 4803}#)))
                       (if (memv #{atom-key\ 4807}# (quote (ref)))
                         (#{build-lexical-reference\ 2281}#
                           'value
                           #f
                           (cadr #{x\ 4803}#)
                           (cadr #{x\ 4803}#))
                         (if (memv #{atom-key\ 4807}# (quote (primitive)))
                           (#{build-primref\ 2301}# #f (cadr #{x\ 4803}#))
                           (if (memv #{atom-key\ 4807}# (quote (quote)))
                             (#{build-data\ 2303}# #f (cadr #{x\ 4803}#))
                             (if (memv #{atom-key\ 4807}# (quote (lambda)))
                               (if (list? (cadr #{x\ 4803}#))
                                 (#{build-simple-lambda\ 2295}#
                                   #f
                                   (cadr #{x\ 4803}#)
                                   #f
                                   (cadr #{x\ 4803}#)
                                   '()
                                   (#{regen\ 4802}# (caddr #{x\ 4803}#)))
                                 (error "how did we get here" #{x\ 4803}#))
                               (#{build-application\ 2275}#
                                 #f
                                 (#{build-primref\ 2301}# #f (car #{x\ 4803}#))
                                 (map #{regen\ 4802}#
                                      (cdr #{x\ 4803}#))))))))))
                 (#{gen-vector\ 4800}#
                   (lambda (#{x\ 4819}#)
                     (if (eq? (car #{x\ 4819}#) (quote list))
                       (cons (quote vector) (cdr #{x\ 4819}#))
                       (if (eq? (car #{x\ 4819}#) (quote quote))
                         (list 'quote
                               (list->vector (cadr #{x\ 4819}#)))
                         (list (quote list->vector) #{x\ 4819}#)))))
                 (#{gen-append\ 4798}#
                   (lambda (#{x\ 4829}# #{y\ 4830}#)
                     (if (equal? #{y\ 4830}# (quote (quote ())))
                       #{x\ 4829}#
                       (list (quote append) #{x\ 4829}# #{y\ 4830}#))))
                 (#{gen-cons\ 4796}#
                   (lambda (#{x\ 4834}# #{y\ 4835}#)
                     (let ((#{atom-key\ 4840}# (car #{y\ 4835}#)))
                       (if (memv #{atom-key\ 4840}# (quote (quote)))
                         (if (eq? (car #{x\ 4834}#) (quote quote))
                           (list 'quote
                                 (cons (cadr #{x\ 4834}#) (cadr #{y\ 4835}#)))
                           (if (eq? (cadr #{y\ 4835}#) (quote ()))
                             (list (quote list) #{x\ 4834}#)
                             (list (quote cons) #{x\ 4834}# #{y\ 4835}#)))
                         (if (memv #{atom-key\ 4840}# (quote (list)))
                           (cons 'list
                                 (cons #{x\ 4834}# (cdr #{y\ 4835}#)))
                           (list (quote cons) #{x\ 4834}# #{y\ 4835}#))))))
                 (#{gen-map\ 4794}#
                   (lambda (#{e\ 4849}# #{map-env\ 4850}#)
                     (let ((#{formals\ 4855}# (map cdr #{map-env\ 4850}#))
                           (#{actuals\ 4856}#
                             (map (lambda (#{x\ 4857}#)
                                    (list (quote ref) (car #{x\ 4857}#)))
                                  #{map-env\ 4850}#)))
                       (if (eq? (car #{e\ 4849}#) (quote ref))
                         (car #{actuals\ 4856}#)
                         (if (and-map
                               (lambda (#{x\ 4864}#)
                                 (if (eq? (car #{x\ 4864}#) (quote ref))
                                   (memq (cadr #{x\ 4864}#) #{formals\ 4855}#)
                                   #f))
                               (cdr #{e\ 4849}#))
                           (cons 'map
                                 (cons (list 'primitive
                                             (car #{e\ 4849}#))
                                       (map (let ((#{r\ 4870}#
                                                    (map cons
                                                         #{formals\ 4855}#
                                                         #{actuals\ 4856}#)))
                                              (lambda (#{x\ 4871}#)
                                                (cdr (assq (cadr #{x\ 4871}#)
                                                           #{r\ 4870}#))))
                                            (cdr #{e\ 4849}#))))
                           (cons 'map
                                 (cons (list 'lambda
                                             #{formals\ 4855}#
                                             #{e\ 4849}#)
                                       #{actuals\ 4856}#)))))))
                 (#{gen-mappend\ 4792}#
                   (lambda (#{e\ 4875}# #{map-env\ 4876}#)
                     (list 'apply
                           '(primitive append)
                           (#{gen-map\ 4794}# #{e\ 4875}# #{map-env\ 4876}#))))
                 (#{gen-ref\ 4790}#
                   (lambda (#{src\ 4880}#
                            #{var\ 4881}#
                            #{level\ 4882}#
                            #{maps\ 4883}#)
                     (if (#{fx=\ 2258}# #{level\ 4882}# 0)
                       (values #{var\ 4881}# #{maps\ 4883}#)
                       (if (null? #{maps\ 4883}#)
                         (syntax-violation
                           'syntax
                           "missing ellipsis"
                           #{src\ 4880}#)
                         (call-with-values
                           (lambda ()
                             (#{gen-ref\ 4790}#
                               #{src\ 4880}#
                               #{var\ 4881}#
                               (#{fx-\ 2256}# #{level\ 4882}# 1)
                               (cdr #{maps\ 4883}#)))
                           (lambda (#{outer-var\ 4888}# #{outer-maps\ 4889}#)
                             (let ((#{b\ 4893}#
                                     (assq #{outer-var\ 4888}#
                                           (car #{maps\ 4883}#))))
                               (if #{b\ 4893}#
                                 (values (cdr #{b\ 4893}#) #{maps\ 4883}#)
                                 (let ((#{inner-var\ 4895}#
                                         (#{gen-var\ 2466}# (quote tmp))))
                                   (values
                                     #{inner-var\ 4895}#
                                     (cons (cons (cons #{outer-var\ 4888}#
                                                       #{inner-var\ 4895}#)
                                                 (car #{maps\ 4883}#))
                                           #{outer-maps\ 4889}#)))))))))))
                 (#{gen-syntax\ 4788}#
                   (lambda (#{src\ 4896}#
                            #{e\ 4897}#
                            #{r\ 4898}#
                            #{maps\ 4899}#
                            #{ellipsis?\ 4900}#
                            #{mod\ 4901}#)
                     (if (#{id?\ 2353}# #{e\ 4897}#)
                       (let ((#{label\ 4909}#
                               (#{id-var-name\ 2410}#
                                 #{e\ 4897}#
                                 '(()))))
                         (let ((#{b\ 4912}#
                                 (#{lookup\ 2347}#
                                   #{label\ 4909}#
                                   #{r\ 4898}#
                                   #{mod\ 4901}#)))
                           (if (eq? (#{binding-type\ 2336}# #{b\ 4912}#)
                                    'syntax)
                             (call-with-values
                               (lambda ()
                                 (let ((#{var.lev\ 4914}#
                                         (#{binding-value\ 2338}#
                                           #{b\ 4912}#)))
                                   (#{gen-ref\ 4790}#
                                     #{src\ 4896}#
                                     (car #{var.lev\ 4914}#)
                                     (cdr #{var.lev\ 4914}#)
                                     #{maps\ 4899}#)))
                               (lambda (#{var\ 4915}# #{maps\ 4916}#)
                                 (values
                                   (list (quote ref) #{var\ 4915}#)
                                   #{maps\ 4916}#)))
                             (if (#{ellipsis?\ 4900}# #{e\ 4897}#)
                               (syntax-violation
                                 'syntax
                                 "misplaced ellipsis"
                                 #{src\ 4896}#)
                               (values
                                 (list (quote quote) #{e\ 4897}#)
                                 #{maps\ 4899}#)))))
                       ((lambda (#{tmp\ 4921}#)
                          ((lambda (#{tmp\ 4922}#)
                             (if (if #{tmp\ 4922}#
                                   (apply (lambda (#{dots\ 4925}# #{e\ 4926}#)
                                            (#{ellipsis?\ 4900}#
                                              #{dots\ 4925}#))
                                          #{tmp\ 4922}#)
                                   #f)
                               (apply (lambda (#{dots\ 4929}# #{e\ 4930}#)
                                        (#{gen-syntax\ 4788}#
                                          #{src\ 4896}#
                                          #{e\ 4930}#
                                          #{r\ 4898}#
                                          #{maps\ 4899}#
                                          (lambda (#{x\ 4931}#) #f)
                                          #{mod\ 4901}#))
                                      #{tmp\ 4922}#)
                               ((lambda (#{tmp\ 4933}#)
                                  (if (if #{tmp\ 4933}#
                                        (apply (lambda (#{x\ 4937}#
                                                        #{dots\ 4938}#
                                                        #{y\ 4939}#)
                                                 (#{ellipsis?\ 4900}#
                                                   #{dots\ 4938}#))
                                               #{tmp\ 4933}#)
                                        #f)
                                    (apply (lambda (#{x\ 4943}#
                                                    #{dots\ 4944}#
                                                    #{y\ 4945}#)
                                             (letrec ((#{f\ 4949}#
                                                        (lambda (#{y\ 4950}#
                                                                 #{k\ 4951}#)
                                                          ((lambda (#{tmp\ 4958}#)
                                                             ((lambda (#{tmp\ 4959}#)
                                                                (if (if #{tmp\ 4959}#
                                                                      (apply (lambda (#{dots\ 4962}#
                                                                                      #{y\ 4963}#)
                                                                               (#{ellipsis?\ 4900}#
                                                                                 #{dots\ 4962}#))
                                                                             #{tmp\ 4959}#)
                                                                      #f)
                                                                  (apply (lambda (#{dots\ 4966}#
                                                                                  #{y\ 4967}#)
                                                                           (#{f\ 4949}#
                                                                             #{y\ 4967}#
                                                                             (lambda (#{maps\ 4968}#)
                                                                               (call-with-values
                                                                                 (lambda ()
                                                                                   (#{k\ 4951}#
                                                                                     (cons '()
                                                                                           #{maps\ 4968}#)))
                                                                                 (lambda (#{x\ 4970}#
                                                                                          #{maps\ 4971}#)
                                                                                   (if (null? (car #{maps\ 4971}#))
                                                                                     (syntax-violation
                                                                                       'syntax
                                                                                       "extra ellipsis"
                                                                                       #{src\ 4896}#)
                                                                                     (values
                                                                                       (#{gen-mappend\ 4792}#
                                                                                         #{x\ 4970}#
                                                                                         (car #{maps\ 4971}#))
                                                                                       (cdr #{maps\ 4971}#))))))))
                                                                         #{tmp\ 4959}#)
                                                                  ((lambda (#{_\ 4975}#)
                                                                     (call-with-values
                                                                       (lambda ()
                                                                         (#{gen-syntax\ 4788}#
                                                                           #{src\ 4896}#
                                                                           #{y\ 4950}#
                                                                           #{r\ 4898}#
                                                                           #{maps\ 4899}#
                                                                           #{ellipsis?\ 4900}#
                                                                           #{mod\ 4901}#))
                                                                       (lambda (#{y\ 4976}#
                                                                                #{maps\ 4977}#)
                                                                         (call-with-values
                                                                           (lambda ()
                                                                             (#{k\ 4951}#
                                                                               #{maps\ 4977}#))
                                                                           (lambda (#{x\ 4980}#
                                                                                    #{maps\ 4981}#)
                                                                             (values
                                                                               (#{gen-append\ 4798}#
                                                                                 #{x\ 4980}#
                                                                                 #{y\ 4976}#)
                                                                               #{maps\ 4981}#))))))
                                                                   #{tmp\ 4958}#)))
                                                              ($sc-dispatch
                                                                #{tmp\ 4958}#
                                                                '(any . any))))
                                                           #{y\ 4950}#))))
                                               (#{f\ 4949}#
                                                 #{y\ 4945}#
                                                 (lambda (#{maps\ 4952}#)
                                                   (call-with-values
                                                     (lambda ()
                                                       (#{gen-syntax\ 4788}#
                                                         #{src\ 4896}#
                                                         #{x\ 4943}#
                                                         #{r\ 4898}#
                                                         (cons '()
                                                               #{maps\ 4952}#)
                                                         #{ellipsis?\ 4900}#
                                                         #{mod\ 4901}#))
                                                     (lambda (#{x\ 4954}#
                                                              #{maps\ 4955}#)
                                                       (if (null? (car #{maps\ 4955}#))
                                                         (syntax-violation
                                                           'syntax
                                                           "extra ellipsis"
                                                           #{src\ 4896}#)
                                                         (values
                                                           (#{gen-map\ 4794}#
                                                             #{x\ 4954}#
                                                             (car #{maps\ 4955}#))
                                                           (cdr #{maps\ 4955}#)))))))))
                                           #{tmp\ 4933}#)
                                    ((lambda (#{tmp\ 4984}#)
                                       (if #{tmp\ 4984}#
                                         (apply (lambda (#{x\ 4987}#
                                                         #{y\ 4988}#)
                                                  (call-with-values
                                                    (lambda ()
                                                      (#{gen-syntax\ 4788}#
                                                        #{src\ 4896}#
                                                        #{x\ 4987}#
                                                        #{r\ 4898}#
                                                        #{maps\ 4899}#
                                                        #{ellipsis?\ 4900}#
                                                        #{mod\ 4901}#))
                                                    (lambda (#{x\ 4989}#
                                                             #{maps\ 4990}#)
                                                      (call-with-values
                                                        (lambda ()
                                                          (#{gen-syntax\ 4788}#
                                                            #{src\ 4896}#
                                                            #{y\ 4988}#
                                                            #{r\ 4898}#
                                                            #{maps\ 4990}#
                                                            #{ellipsis?\ 4900}#
                                                            #{mod\ 4901}#))
                                                        (lambda (#{y\ 4993}#
                                                                 #{maps\ 4994}#)
                                                          (values
                                                            (#{gen-cons\ 4796}#
                                                              #{x\ 4989}#
                                                              #{y\ 4993}#)
                                                            #{maps\ 4994}#))))))
                                                #{tmp\ 4984}#)
                                         ((lambda (#{tmp\ 4997}#)
                                            (if #{tmp\ 4997}#
                                              (apply (lambda (#{e1\ 5000}#
                                                              #{e2\ 5001}#)
                                                       (call-with-values
                                                         (lambda ()
                                                           (#{gen-syntax\ 4788}#
                                                             #{src\ 4896}#
                                                             (cons #{e1\ 5000}#
                                                                   #{e2\ 5001}#)
                                                             #{r\ 4898}#
                                                             #{maps\ 4899}#
                                                             #{ellipsis?\ 4900}#
                                                             #{mod\ 4901}#))
                                                         (lambda (#{e\ 5003}#
                                                                  #{maps\ 5004}#)
                                                           (values
                                                             (#{gen-vector\ 4800}#
                                                               #{e\ 5003}#)
                                                             #{maps\ 5004}#))))
                                                     #{tmp\ 4997}#)
                                              ((lambda (#{_\ 5008}#)
                                                 (values
                                                   (list 'quote
                                                         #{e\ 4897}#)
                                                   #{maps\ 4899}#))
                                               #{tmp\ 4921}#)))
                                          ($sc-dispatch
                                            #{tmp\ 4921}#
                                            '#(vector (any . each-any))))))
                                     ($sc-dispatch
                                       #{tmp\ 4921}#
                                       '(any . any)))))
                                ($sc-dispatch
                                  #{tmp\ 4921}#
                                  '(any any . any)))))
                           ($sc-dispatch #{tmp\ 4921}# (quote (any any)))))
                        #{e\ 4897}#)))))
          (lambda (#{e\ 5010}#
                   #{r\ 5011}#
                   #{w\ 5012}#
                   #{s\ 5013}#
                   #{mod\ 5014}#)
            (let ((#{e\ 5021}#
                    (#{source-wrap\ 2424}#
                      #{e\ 5010}#
                      #{w\ 5012}#
                      #{s\ 5013}#
                      #{mod\ 5014}#)))
              ((lambda (#{tmp\ 5022}#)
                 ((lambda (#{tmp\ 5023}#)
                    (if #{tmp\ 5023}#
                      (apply (lambda (#{_\ 5026}# #{x\ 5027}#)
                               (call-with-values
                                 (lambda ()
                                   (#{gen-syntax\ 4788}#
                                     #{e\ 5021}#
                                     #{x\ 5027}#
                                     #{r\ 5011}#
                                     '()
                                     #{ellipsis?\ 2454}#
                                     #{mod\ 5014}#))
                                 (lambda (#{e\ 5028}# #{maps\ 5029}#)
                                   (#{regen\ 4802}# #{e\ 5028}#))))
                             #{tmp\ 5023}#)
                      ((lambda (#{_\ 5033}#)
                         (syntax-violation
                           'syntax
                           "bad `syntax' form"
                           #{e\ 5021}#))
                       #{tmp\ 5022}#)))
                  ($sc-dispatch #{tmp\ 5022}# (quote (any any)))))
               #{e\ 5021}#)))))
      (#{global-extend\ 2349}#
        'core
        'lambda
        (lambda (#{e\ 5034}#
                 #{r\ 5035}#
                 #{w\ 5036}#
                 #{s\ 5037}#
                 #{mod\ 5038}#)
          ((lambda (#{tmp\ 5044}#)
             ((lambda (#{tmp\ 5045}#)
                (if #{tmp\ 5045}#
                  (apply (lambda (#{_\ 5050}#
                                  #{args\ 5051}#
                                  #{e1\ 5052}#
                                  #{e2\ 5053}#)
                           (call-with-values
                             (lambda ()
                               (#{lambda-formals\ 2456}# #{args\ 5051}#))
                             (lambda (#{req\ 5054}#
                                      #{opt\ 5055}#
                                      #{rest\ 5056}#
                                      #{kw\ 5057}#)
                               (letrec ((#{lp\ 5065}#
                                          (lambda (#{body\ 5066}#
                                                   #{meta\ 5067}#)
                                            ((lambda (#{tmp\ 5069}#)
                                               ((lambda (#{tmp\ 5070}#)
                                                  (if (if #{tmp\ 5070}#
                                                        (apply (lambda (#{docstring\ 5074}#
                                                                        #{e1\ 5075}#
                                                                        #{e2\ 5076}#)
                                                                 (string?
                                                                   (syntax->datum
                                                                     #{docstring\ 5074}#)))
                                                               #{tmp\ 5070}#)
                                                        #f)
                                                    (apply (lambda (#{docstring\ 5080}#
                                                                    #{e1\ 5081}#
                                                                    #{e2\ 5082}#)
                                                             (#{lp\ 5065}#
                                                               (cons #{e1\ 5081}#
                                                                     #{e2\ 5082}#)
                                                               (append
                                                                 #{meta\ 5067}#
                                                                 (list (cons 'documentation
                                                                             (syntax->datum
                                                                               #{docstring\ 5080}#))))))
                                                           #{tmp\ 5070}#)
                                                    ((lambda (#{tmp\ 5085}#)
                                                       (if #{tmp\ 5085}#
                                                         (apply (lambda (#{k\ 5090}#
                                                                         #{v\ 5091}#
                                                                         #{e1\ 5092}#
                                                                         #{e2\ 5093}#)
                                                                  (#{lp\ 5065}#
                                                                    (cons #{e1\ 5092}#
                                                                          #{e2\ 5093}#)
                                                                    (append
                                                                      #{meta\ 5067}#
                                                                      (syntax->datum
                                                                        (map cons
                                                                             #{k\ 5090}#
                                                                             #{v\ 5091}#)))))
                                                                #{tmp\ 5085}#)
                                                         ((lambda (#{_\ 5098}#)
                                                            (#{chi-simple-lambda\ 2458}#
                                                              #{e\ 5034}#
                                                              #{r\ 5035}#
                                                              #{w\ 5036}#
                                                              #{s\ 5037}#
                                                              #{mod\ 5038}#
                                                              #{req\ 5054}#
                                                              #{rest\ 5056}#
                                                              #{meta\ 5067}#
                                                              #{body\ 5066}#))
                                                          #{tmp\ 5069}#)))
                                                     ($sc-dispatch
                                                       #{tmp\ 5069}#
                                                       '(#(vector
                                                           #(each (any . any)))
                                                         any
                                                         .
                                                         each-any)))))
                                                ($sc-dispatch
                                                  #{tmp\ 5069}#
                                                  '(any any . each-any))))
                                             #{body\ 5066}#))))
                                 (#{lp\ 5065}#
                                   (cons #{e1\ 5052}# #{e2\ 5053}#)
                                   '())))))
                         #{tmp\ 5045}#)
                  ((lambda (#{_\ 5100}#)
                     (syntax-violation
                       'lambda
                       "bad lambda"
                       #{e\ 5034}#))
                   #{tmp\ 5044}#)))
              ($sc-dispatch
                #{tmp\ 5044}#
                '(any any any . each-any))))
           #{e\ 5034}#)))
      (#{global-extend\ 2349}#
        'core
        'lambda*
        (lambda (#{e\ 5101}#
                 #{r\ 5102}#
                 #{w\ 5103}#
                 #{s\ 5104}#
                 #{mod\ 5105}#)
          ((lambda (#{tmp\ 5111}#)
             ((lambda (#{tmp\ 5112}#)
                (if #{tmp\ 5112}#
                  (apply (lambda (#{_\ 5117}#
                                  #{args\ 5118}#
                                  #{e1\ 5119}#
                                  #{e2\ 5120}#)
                           (call-with-values
                             (lambda ()
                               (#{chi-lambda-case\ 2462}#
                                 #{e\ 5101}#
                                 #{r\ 5102}#
                                 #{w\ 5103}#
                                 #{s\ 5104}#
                                 #{mod\ 5105}#
                                 #{lambda*-formals\ 2460}#
                                 (list (cons #{args\ 5118}#
                                             (cons #{e1\ 5119}#
                                                   #{e2\ 5120}#)))))
                             (lambda (#{meta\ 5122}# #{lcase\ 5123}#)
                               (#{build-case-lambda\ 2297}#
                                 #{s\ 5104}#
                                 #{meta\ 5122}#
                                 #{lcase\ 5123}#))))
                         #{tmp\ 5112}#)
                  ((lambda (#{_\ 5127}#)
                     (syntax-violation
                       'lambda
                       "bad lambda*"
                       #{e\ 5101}#))
                   #{tmp\ 5111}#)))
              ($sc-dispatch
                #{tmp\ 5111}#
                '(any any any . each-any))))
           #{e\ 5101}#)))
      (#{global-extend\ 2349}#
        'core
        'case-lambda
        (lambda (#{e\ 5128}#
                 #{r\ 5129}#
                 #{w\ 5130}#
                 #{s\ 5131}#
                 #{mod\ 5132}#)
          ((lambda (#{tmp\ 5138}#)
             ((lambda (#{tmp\ 5139}#)
                (if #{tmp\ 5139}#
                  (apply (lambda (#{_\ 5147}#
                                  #{args\ 5148}#
                                  #{e1\ 5149}#
                                  #{e2\ 5150}#
                                  #{args*\ 5151}#
                                  #{e1*\ 5152}#
                                  #{e2*\ 5153}#)
                           (call-with-values
                             (lambda ()
                               (#{chi-lambda-case\ 2462}#
                                 #{e\ 5128}#
                                 #{r\ 5129}#
                                 #{w\ 5130}#
                                 #{s\ 5131}#
                                 #{mod\ 5132}#
                                 #{lambda-formals\ 2456}#
                                 (cons (cons #{args\ 5148}#
                                             (cons #{e1\ 5149}# #{e2\ 5150}#))
                                       (map (lambda (#{tmp\ 5157}#
                                                     #{tmp\ 5156}#
                                                     #{tmp\ 5155}#)
                                              (cons #{tmp\ 5155}#
                                                    (cons #{tmp\ 5156}#
                                                          #{tmp\ 5157}#)))
                                            #{e2*\ 5153}#
                                            #{e1*\ 5152}#
                                            #{args*\ 5151}#))))
                             (lambda (#{meta\ 5159}# #{lcase\ 5160}#)
                               (#{build-case-lambda\ 2297}#
                                 #{s\ 5131}#
                                 #{meta\ 5159}#
                                 #{lcase\ 5160}#))))
                         #{tmp\ 5139}#)
                  ((lambda (#{_\ 5164}#)
                     (syntax-violation
                       'case-lambda
                       "bad case-lambda"
                       #{e\ 5128}#))
                   #{tmp\ 5138}#)))
              ($sc-dispatch
                #{tmp\ 5138}#
                '(any (any any . each-any)
                      .
                      #(each (any any . each-any))))))
           #{e\ 5128}#)))
      (#{global-extend\ 2349}#
        'core
        'case-lambda*
        (lambda (#{e\ 5165}#
                 #{r\ 5166}#
                 #{w\ 5167}#
                 #{s\ 5168}#
                 #{mod\ 5169}#)
          ((lambda (#{tmp\ 5175}#)
             ((lambda (#{tmp\ 5176}#)
                (if #{tmp\ 5176}#
                  (apply (lambda (#{_\ 5184}#
                                  #{args\ 5185}#
                                  #{e1\ 5186}#
                                  #{e2\ 5187}#
                                  #{args*\ 5188}#
                                  #{e1*\ 5189}#
                                  #{e2*\ 5190}#)
                           (call-with-values
                             (lambda ()
                               (#{chi-lambda-case\ 2462}#
                                 #{e\ 5165}#
                                 #{r\ 5166}#
                                 #{w\ 5167}#
                                 #{s\ 5168}#
                                 #{mod\ 5169}#
                                 #{lambda*-formals\ 2460}#
                                 (cons (cons #{args\ 5185}#
                                             (cons #{e1\ 5186}# #{e2\ 5187}#))
                                       (map (lambda (#{tmp\ 5194}#
                                                     #{tmp\ 5193}#
                                                     #{tmp\ 5192}#)
                                              (cons #{tmp\ 5192}#
                                                    (cons #{tmp\ 5193}#
                                                          #{tmp\ 5194}#)))
                                            #{e2*\ 5190}#
                                            #{e1*\ 5189}#
                                            #{args*\ 5188}#))))
                             (lambda (#{meta\ 5196}# #{lcase\ 5197}#)
                               (#{build-case-lambda\ 2297}#
                                 #{s\ 5168}#
                                 #{meta\ 5196}#
                                 #{lcase\ 5197}#))))
                         #{tmp\ 5176}#)
                  ((lambda (#{_\ 5201}#)
                     (syntax-violation
                       'case-lambda
                       "bad case-lambda*"
                       #{e\ 5165}#))
                   #{tmp\ 5175}#)))
              ($sc-dispatch
                #{tmp\ 5175}#
                '(any (any any . each-any)
                      .
                      #(each (any any . each-any))))))
           #{e\ 5165}#)))
      (#{global-extend\ 2349}#
        'core
        'let
        (letrec ((#{chi-let\ 5203}#
                   (lambda (#{e\ 5204}#
                            #{r\ 5205}#
                            #{w\ 5206}#
                            #{s\ 5207}#
                            #{mod\ 5208}#
                            #{constructor\ 5209}#
                            #{ids\ 5210}#
                            #{vals\ 5211}#
                            #{exps\ 5212}#)
                     (if (not (#{valid-bound-ids?\ 2416}# #{ids\ 5210}#))
                       (syntax-violation
                         'let
                         "duplicate bound variable"
                         #{e\ 5204}#)
                       (let ((#{labels\ 5224}#
                               (#{gen-labels\ 2371}# #{ids\ 5210}#))
                             (#{new-vars\ 5225}#
                               (map #{gen-var\ 2466}# #{ids\ 5210}#)))
                         (let ((#{nw\ 5228}#
                                 (#{make-binding-wrap\ 2400}#
                                   #{ids\ 5210}#
                                   #{labels\ 5224}#
                                   #{w\ 5206}#))
                               (#{nr\ 5229}#
                                 (#{extend-var-env\ 2343}#
                                   #{labels\ 5224}#
                                   #{new-vars\ 5225}#
                                   #{r\ 5205}#)))
                           (#{constructor\ 5209}#
                             #{s\ 5207}#
                             (map syntax->datum #{ids\ 5210}#)
                             #{new-vars\ 5225}#
                             (map (lambda (#{x\ 5230}#)
                                    (#{chi\ 2438}#
                                      #{x\ 5230}#
                                      #{r\ 5205}#
                                      #{w\ 5206}#
                                      #{mod\ 5208}#))
                                  #{vals\ 5211}#)
                             (#{chi-body\ 2446}#
                               #{exps\ 5212}#
                               (#{source-wrap\ 2424}#
                                 #{e\ 5204}#
                                 #{nw\ 5228}#
                                 #{s\ 5207}#
                                 #{mod\ 5208}#)
                               #{nr\ 5229}#
                               #{nw\ 5228}#
                               #{mod\ 5208}#))))))))
          (lambda (#{e\ 5232}#
                   #{r\ 5233}#
                   #{w\ 5234}#
                   #{s\ 5235}#
                   #{mod\ 5236}#)
            ((lambda (#{tmp\ 5242}#)
               ((lambda (#{tmp\ 5243}#)
                  (if (if #{tmp\ 5243}#
                        (apply (lambda (#{_\ 5249}#
                                        #{id\ 5250}#
                                        #{val\ 5251}#
                                        #{e1\ 5252}#
                                        #{e2\ 5253}#)
                                 (and-map #{id?\ 2353}# #{id\ 5250}#))
                               #{tmp\ 5243}#)
                        #f)
                    (apply (lambda (#{_\ 5260}#
                                    #{id\ 5261}#
                                    #{val\ 5262}#
                                    #{e1\ 5263}#
                                    #{e2\ 5264}#)
                             (#{chi-let\ 5203}#
                               #{e\ 5232}#
                               #{r\ 5233}#
                               #{w\ 5234}#
                               #{s\ 5235}#
                               #{mod\ 5236}#
                               #{build-let\ 2307}#
                               #{id\ 5261}#
                               #{val\ 5262}#
                               (cons #{e1\ 5263}# #{e2\ 5264}#)))
                           #{tmp\ 5243}#)
                    ((lambda (#{tmp\ 5268}#)
                       (if (if #{tmp\ 5268}#
                             (apply (lambda (#{_\ 5275}#
                                             #{f\ 5276}#
                                             #{id\ 5277}#
                                             #{val\ 5278}#
                                             #{e1\ 5279}#
                                             #{e2\ 5280}#)
                                      (if (#{id?\ 2353}# #{f\ 5276}#)
                                        (and-map #{id?\ 2353}# #{id\ 5277}#)
                                        #f))
                                    #{tmp\ 5268}#)
                             #f)
                         (apply (lambda (#{_\ 5290}#
                                         #{f\ 5291}#
                                         #{id\ 5292}#
                                         #{val\ 5293}#
                                         #{e1\ 5294}#
                                         #{e2\ 5295}#)
                                  (#{chi-let\ 5203}#
                                    #{e\ 5232}#
                                    #{r\ 5233}#
                                    #{w\ 5234}#
                                    #{s\ 5235}#
                                    #{mod\ 5236}#
                                    #{build-named-let\ 2309}#
                                    (cons #{f\ 5291}# #{id\ 5292}#)
                                    #{val\ 5293}#
                                    (cons #{e1\ 5294}# #{e2\ 5295}#)))
                                #{tmp\ 5268}#)
                         ((lambda (#{_\ 5300}#)
                            (syntax-violation
                              'let
                              "bad let"
                              (#{source-wrap\ 2424}#
                                #{e\ 5232}#
                                #{w\ 5234}#
                                #{s\ 5235}#
                                #{mod\ 5236}#)))
                          #{tmp\ 5242}#)))
                     ($sc-dispatch
                       #{tmp\ 5242}#
                       '(any any #(each (any any)) any . each-any)))))
                ($sc-dispatch
                  #{tmp\ 5242}#
                  '(any #(each (any any)) any . each-any))))
             #{e\ 5232}#))))
      (#{global-extend\ 2349}#
        'core
        'letrec
        (lambda (#{e\ 5301}#
                 #{r\ 5302}#
                 #{w\ 5303}#
                 #{s\ 5304}#
                 #{mod\ 5305}#)
          ((lambda (#{tmp\ 5311}#)
             ((lambda (#{tmp\ 5312}#)
                (if (if #{tmp\ 5312}#
                      (apply (lambda (#{_\ 5318}#
                                      #{id\ 5319}#
                                      #{val\ 5320}#
                                      #{e1\ 5321}#
                                      #{e2\ 5322}#)
                               (and-map #{id?\ 2353}# #{id\ 5319}#))
                             #{tmp\ 5312}#)
                      #f)
                  (apply (lambda (#{_\ 5329}#
                                  #{id\ 5330}#
                                  #{val\ 5331}#
                                  #{e1\ 5332}#
                                  #{e2\ 5333}#)
                           (let ((#{ids\ 5335}# #{id\ 5330}#))
                             (if (not (#{valid-bound-ids?\ 2416}#
                                        #{ids\ 5335}#))
                               (syntax-violation
                                 'letrec
                                 "duplicate bound variable"
                                 #{e\ 5301}#)
                               (let ((#{labels\ 5339}#
                                       (#{gen-labels\ 2371}# #{ids\ 5335}#))
                                     (#{new-vars\ 5340}#
                                       (map #{gen-var\ 2466}# #{ids\ 5335}#)))
                                 (let ((#{w\ 5343}#
                                         (#{make-binding-wrap\ 2400}#
                                           #{ids\ 5335}#
                                           #{labels\ 5339}#
                                           #{w\ 5303}#))
                                       (#{r\ 5344}#
                                         (#{extend-var-env\ 2343}#
                                           #{labels\ 5339}#
                                           #{new-vars\ 5340}#
                                           #{r\ 5302}#)))
                                   (#{build-letrec\ 2311}#
                                     #{s\ 5304}#
                                     (map syntax->datum #{ids\ 5335}#)
                                     #{new-vars\ 5340}#
                                     (map (lambda (#{x\ 5345}#)
                                            (#{chi\ 2438}#
                                              #{x\ 5345}#
                                              #{r\ 5344}#
                                              #{w\ 5343}#
                                              #{mod\ 5305}#))
                                          #{val\ 5331}#)
                                     (#{chi-body\ 2446}#
                                       (cons #{e1\ 5332}# #{e2\ 5333}#)
                                       (#{source-wrap\ 2424}#
                                         #{e\ 5301}#
                                         #{w\ 5343}#
                                         #{s\ 5304}#
                                         #{mod\ 5305}#)
                                       #{r\ 5344}#
                                       #{w\ 5343}#
                                       #{mod\ 5305}#)))))))
                         #{tmp\ 5312}#)
                  ((lambda (#{_\ 5350}#)
                     (syntax-violation
                       'letrec
                       "bad letrec"
                       (#{source-wrap\ 2424}#
                         #{e\ 5301}#
                         #{w\ 5303}#
                         #{s\ 5304}#
                         #{mod\ 5305}#)))
                   #{tmp\ 5311}#)))
              ($sc-dispatch
                #{tmp\ 5311}#
                '(any #(each (any any)) any . each-any))))
           #{e\ 5301}#)))
      (#{global-extend\ 2349}#
        'core
        'set!
        (lambda (#{e\ 5351}#
                 #{r\ 5352}#
                 #{w\ 5353}#
                 #{s\ 5354}#
                 #{mod\ 5355}#)
          ((lambda (#{tmp\ 5361}#)
             ((lambda (#{tmp\ 5362}#)
                (if (if #{tmp\ 5362}#
                      (apply (lambda (#{_\ 5366}# #{id\ 5367}# #{val\ 5368}#)
                               (#{id?\ 2353}# #{id\ 5367}#))
                             #{tmp\ 5362}#)
                      #f)
                  (apply (lambda (#{_\ 5372}# #{id\ 5373}# #{val\ 5374}#)
                           (let ((#{val\ 5377}#
                                   (#{chi\ 2438}#
                                     #{val\ 5374}#
                                     #{r\ 5352}#
                                     #{w\ 5353}#
                                     #{mod\ 5355}#))
                                 (#{n\ 5378}#
                                   (#{id-var-name\ 2410}#
                                     #{id\ 5373}#
                                     #{w\ 5353}#)))
                             (let ((#{b\ 5380}#
                                     (#{lookup\ 2347}#
                                       #{n\ 5378}#
                                       #{r\ 5352}#
                                       #{mod\ 5355}#)))
                               (let ((#{atom-key\ 5383}#
                                       (#{binding-type\ 2336}# #{b\ 5380}#)))
                                 (if (memv #{atom-key\ 5383}#
                                           '(lexical))
                                   (#{build-lexical-assignment\ 2283}#
                                     #{s\ 5354}#
                                     (syntax->datum #{id\ 5373}#)
                                     (#{binding-value\ 2338}# #{b\ 5380}#)
                                     #{val\ 5377}#)
                                   (if (memv #{atom-key\ 5383}#
                                             '(global))
                                     (#{build-global-assignment\ 2289}#
                                       #{s\ 5354}#
                                       #{n\ 5378}#
                                       #{val\ 5377}#
                                       #{mod\ 5355}#)
                                     (if (memv #{atom-key\ 5383}#
                                               '(displaced-lexical))
                                       (syntax-violation
                                         'set!
                                         "identifier out of context"
                                         (#{wrap\ 2422}#
                                           #{id\ 5373}#
                                           #{w\ 5353}#
                                           #{mod\ 5355}#))
                                       (syntax-violation
                                         'set!
                                         "bad set!"
                                         (#{source-wrap\ 2424}#
                                           #{e\ 5351}#
                                           #{w\ 5353}#
                                           #{s\ 5354}#
                                           #{mod\ 5355}#)))))))))
                         #{tmp\ 5362}#)
                  ((lambda (#{tmp\ 5388}#)
                     (if #{tmp\ 5388}#
                       (apply (lambda (#{_\ 5393}#
                                       #{head\ 5394}#
                                       #{tail\ 5395}#
                                       #{val\ 5396}#)
                                (call-with-values
                                  (lambda ()
                                    (#{syntax-type\ 2434}#
                                      #{head\ 5394}#
                                      #{r\ 5352}#
                                      '(())
                                      #f
                                      #f
                                      #{mod\ 5355}#
                                      #t))
                                  (lambda (#{type\ 5399}#
                                           #{value\ 5400}#
                                           #{ee\ 5401}#
                                           #{ww\ 5402}#
                                           #{ss\ 5403}#
                                           #{modmod\ 5404}#)
                                    (if (memv #{type\ 5399}#
                                              '(module-ref))
                                      (let ((#{val\ 5413}#
                                              (#{chi\ 2438}#
                                                #{val\ 5396}#
                                                #{r\ 5352}#
                                                #{w\ 5353}#
                                                #{mod\ 5355}#)))
                                        (call-with-values
                                          (lambda ()
                                            (#{value\ 5400}#
                                              (cons #{head\ 5394}#
                                                    #{tail\ 5395}#)
                                              #{r\ 5352}#
                                              #{w\ 5353}#))
                                          (lambda (#{e\ 5415}#
                                                   #{r\ 5416}#
                                                   #{w\ 5417}#
                                                   #{s*\ 5418}#
                                                   #{mod\ 5419}#)
                                            ((lambda (#{tmp\ 5425}#)
                                               ((lambda (#{tmp\ 5426}#)
                                                  (if (if #{tmp\ 5426}#
                                                        (apply (lambda (#{e\ 5428}#)
                                                                 (#{id?\ 2353}#
                                                                   #{e\ 5428}#))
                                                               #{tmp\ 5426}#)
                                                        #f)
                                                    (apply (lambda (#{e\ 5430}#)
                                                             (#{build-global-assignment\ 2289}#
                                                               #{s\ 5354}#
                                                               (syntax->datum
                                                                 #{e\ 5430}#)
                                                               #{val\ 5413}#
                                                               #{mod\ 5419}#))
                                                           #{tmp\ 5426}#)
                                                    (syntax-violation
                                                      #f
                                                      "source expression failed to match any pattern"
                                                      #{tmp\ 5425}#)))
                                                (list #{tmp\ 5425}#)))
                                             #{e\ 5415}#))))
                                      (#{build-application\ 2275}#
                                        #{s\ 5354}#
                                        (#{chi\ 2438}#
                                          (list '#(syntax-object
                                                   setter
                                                   ((top)
                                                    #(ribcage () () ())
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(type
                                                        value
                                                        ee
                                                        ww
                                                        ss
                                                        modmod)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i5405"
                                                        "i5406"
                                                        "i5407"
                                                        "i5408"
                                                        "i5409"
                                                        "i5410"))
                                                    #(ribcage
                                                      #(_ head tail val)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i5389"
                                                        "i5390"
                                                        "i5391"
                                                        "i5392"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(e r w s mod)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i5356"
                                                        "i5357"
                                                        "i5358"
                                                        "i5359"
                                                        "i5360"))
                                                    #(ribcage
                                                      (lambda-var-list
                                                        gen-var
                                                        strip
                                                        chi-lambda-case
                                                        lambda*-formals
                                                        chi-simple-lambda
                                                        lambda-formals
                                                        ellipsis?
                                                        chi-void
                                                        eval-local-transformer
                                                        chi-local-syntax
                                                        chi-body
                                                        chi-macro
                                                        chi-application
                                                        chi-expr
                                                        chi
                                                        chi-top
                                                        syntax-type
                                                        chi-when-list
                                                        chi-install-global
                                                        chi-top-sequence
                                                        chi-sequence
                                                        source-wrap
                                                        wrap
                                                        bound-id-member?
                                                        distinct-bound-ids?
                                                        valid-bound-ids?
                                                        bound-id=?
                                                        free-id=?
                                                        id-var-name
                                                        same-marks?
                                                        join-marks
                                                        join-wraps
                                                        smart-append
                                                        make-binding-wrap
                                                        extend-ribcage!
                                                        make-empty-ribcage
                                                        new-mark
                                                        anti-mark
                                                        the-anti-mark
                                                        top-marked?
                                                        top-wrap
                                                        empty-wrap
                                                        set-ribcage-labels!
                                                        set-ribcage-marks!
                                                        set-ribcage-symnames!
                                                        ribcage-labels
                                                        ribcage-marks
                                                        ribcage-symnames
                                                        ribcage?
                                                        make-ribcage
                                                        gen-labels
                                                        gen-label
                                                        make-rename
                                                        rename-marks
                                                        rename-new
                                                        rename-old
                                                        subst-rename?
                                                        wrap-subst
                                                        wrap-marks
                                                        make-wrap
                                                        id-sym-name&marks
                                                        id-sym-name
                                                        id?
                                                        nonsymbol-id?
                                                        global-extend
                                                        lookup
                                                        macros-only-env
                                                        extend-var-env
                                                        extend-env
                                                        null-env
                                                        binding-value
                                                        binding-type
                                                        make-binding
                                                        arg-check
                                                        source-annotation
                                                        no-source
                                                        set-syntax-object-module!
                                                        set-syntax-object-wrap!
                                                        set-syntax-object-expression!
                                                        syntax-object-module
                                                        syntax-object-wrap
                                                        syntax-object-expression
                                                        syntax-object?
                                                        make-syntax-object
                                                        build-lexical-var
                                                        build-letrec
                                                        build-named-let
                                                        build-let
                                                        build-sequence
                                                        build-data
                                                        build-primref
                                                        build-lambda-case
                                                        build-case-lambda
                                                        build-simple-lambda
                                                        build-global-definition
                                                        maybe-name-value!
                                                        build-global-assignment
                                                        build-global-reference
                                                        analyze-variable
                                                        build-lexical-assignment
                                                        build-lexical-reference
                                                        build-dynlet
                                                        build-conditional
                                                        build-application
                                                        build-void
                                                        decorate-source
                                                        get-global-definition-hook
                                                        put-global-definition-hook
                                                        gensym-hook
                                                        local-eval-hook
                                                        top-level-eval-hook
                                                        fx<
                                                        fx=
                                                        fx-
                                                        fx+
                                                        make-dynlet
                                                        make-letrec
                                                        make-let
                                                        make-lambda-case
                                                        make-lambda
                                                        make-sequence
                                                        make-application
                                                        make-conditional
                                                        make-toplevel-define
                                                        make-toplevel-set
                                                        make-toplevel-ref
                                                        make-module-set
                                                        make-module-ref
                                                        make-lexical-set
                                                        make-lexical-ref
                                                        make-primitive-ref
                                                        make-const
                                                        make-void
                                                        *mode*)
                                                      ((top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top))
                                                      ("i2467"
                                                       "i2465"
                                                       "i2463"
                                                       "i2461"
                                                       "i2459"
                                                       "i2457"
                                                       "i2455"
                                                       "i2453"
                                                       "i2451"
                                                       "i2449"
                                                       "i2447"
                                                       "i2445"
                                                       "i2443"
                                                       "i2441"
                                                       "i2439"
                                                       "i2437"
                                                       "i2435"
                                                       "i2433"
                                                       "i2431"
                                                       "i2429"
                                                       "i2427"
                                                       "i2425"
                                                       "i2423"
                                                       "i2421"
                                                       "i2419"
                                                       "i2417"
                                                       "i2415"
                                                       "i2413"
                                                       "i2411"
                                                       "i2409"
                                                       "i2407"
                                                       "i2405"
                                                       "i2403"
                                                       "i2401"
                                                       "i2399"
                                                       "i2397"
                                                       "i2396"
                                                       "i2395"
                                                       "i2393"
                                                       "i2392"
                                                       "i2391"
                                                       "i2390"
                                                       "i2389"
                                                       "i2387"
                                                       "i2385"
                                                       "i2383"
                                                       "i2381"
                                                       "i2379"
                                                       "i2377"
                                                       "i2375"
                                                       "i2373"
                                                       "i2370"
                                                       "i2368"
                                                       "i2367"
                                                       "i2366"
                                                       "i2365"
                                                       "i2364"
                                                       "i2363"
                                                       "i2361"
                                                       "i2359"
                                                       "i2357"
                                                       "i2355"
                                                       "i2354"
                                                       "i2352"
                                                       "i2350"
                                                       "i2348"
                                                       "i2346"
                                                       "i2344"
                                                       "i2342"
                                                       "i2340"
                                                       "i2339"
                                                       "i2337"
                                                       "i2335"
                                                       "i2334"
                                                       "i2333"
                                                       "i2331"
                                                       "i2330"
                                                       "i2328"
                                                       "i2326"
                                                       "i2324"
                                                       "i2322"
                                                       "i2320"
                                                       "i2318"
                                                       "i2316"
                                                       "i2314"
                                                       "i2312"
                                                       "i2310"
                                                       "i2308"
                                                       "i2306"
                                                       "i2304"
                                                       "i2302"
                                                       "i2300"
                                                       "i2298"
                                                       "i2296"
                                                       "i2294"
                                                       "i2292"
                                                       "i2290"
                                                       "i2288"
                                                       "i2286"
                                                       "i2284"
                                                       "i2282"
                                                       "i2280"
                                                       "i2278"
                                                       "i2276"
                                                       "i2274"
                                                       "i2272"
                                                       "i2270"
                                                       "i2268"
                                                       "i2266"
                                                       "i2265"
                                                       "i2263"
                                                       "i2261"
                                                       "i2259"
                                                       "i2257"
                                                       "i2255"
                                                       "i2253"
                                                       "i2251"
                                                       "i2249"
                                                       "i2247"
                                                       "i2245"
                                                       "i2243"
                                                       "i2241"
                                                       "i2239"
                                                       "i2237"
                                                       "i2235"
                                                       "i2233"
                                                       "i2231"
                                                       "i2229"
                                                       "i2227"
                                                       "i2225"
                                                       "i2223"
                                                       "i2221"
                                                       "i2219"
                                                       "i2217"
                                                       "i2214"))
                                                    #(ribcage
                                                      (define-structure
                                                        define-expansion-constructors
                                                        and-map*)
                                                      ((top) (top) (top))
                                                      ("i2066"
                                                       "i2065"
                                                       "i2063")))
                                                   (hygiene guile))
                                                #{head\ 5394}#)
                                          #{r\ 5352}#
                                          #{w\ 5353}#
                                          #{mod\ 5355}#)
                                        (map (lambda (#{e\ 5432}#)
                                               (#{chi\ 2438}#
                                                 #{e\ 5432}#
                                                 #{r\ 5352}#
                                                 #{w\ 5353}#
                                                 #{mod\ 5355}#))
                                             (append
                                               #{tail\ 5395}#
                                               (list #{val\ 5396}#))))))))
                              #{tmp\ 5388}#)
                       ((lambda (#{_\ 5436}#)
                          (syntax-violation
                            'set!
                            "bad set!"
                            (#{source-wrap\ 2424}#
                              #{e\ 5351}#
                              #{w\ 5353}#
                              #{s\ 5354}#
                              #{mod\ 5355}#)))
                        #{tmp\ 5361}#)))
                   ($sc-dispatch
                     #{tmp\ 5361}#
                     '(any (any . each-any) any)))))
              ($sc-dispatch
                #{tmp\ 5361}#
                '(any any any))))
           #{e\ 5351}#)))
      (#{global-extend\ 2349}#
        'module-ref
        '@
        (lambda (#{e\ 5437}# #{r\ 5438}# #{w\ 5439}#)
          ((lambda (#{tmp\ 5443}#)
             ((lambda (#{tmp\ 5444}#)
                (if (if #{tmp\ 5444}#
                      (apply (lambda (#{_\ 5448}# #{mod\ 5449}# #{id\ 5450}#)
                               (if (and-map #{id?\ 2353}# #{mod\ 5449}#)
                                 (#{id?\ 2353}# #{id\ 5450}#)
                                 #f))
                             #{tmp\ 5444}#)
                      #f)
                  (apply (lambda (#{_\ 5457}# #{mod\ 5458}# #{id\ 5459}#)
                           (values
                             (syntax->datum #{id\ 5459}#)
                             #{r\ 5438}#
                             #{w\ 5439}#
                             #f
                             (syntax->datum
                               (cons '#(syntax-object
                                        public
                                        ((top)
                                         #(ribcage
                                           #(_ mod id)
                                           #((top) (top) (top))
                                           #("i5454" "i5455" "i5456"))
                                         #(ribcage () () ())
                                         #(ribcage
                                           #(e r w)
                                           #((top) (top) (top))
                                           #("i5440" "i5441" "i5442"))
                                         #(ribcage
                                           (lambda-var-list
                                             gen-var
                                             strip
                                             chi-lambda-case
                                             lambda*-formals
                                             chi-simple-lambda
                                             lambda-formals
                                             ellipsis?
                                             chi-void
                                             eval-local-transformer
                                             chi-local-syntax
                                             chi-body
                                             chi-macro
                                             chi-application
                                             chi-expr
                                             chi
                                             chi-top
                                             syntax-type
                                             chi-when-list
                                             chi-install-global
                                             chi-top-sequence
                                             chi-sequence
                                             source-wrap
                                             wrap
                                             bound-id-member?
                                             distinct-bound-ids?
                                             valid-bound-ids?
                                             bound-id=?
                                             free-id=?
                                             id-var-name
                                             same-marks?
                                             join-marks
                                             join-wraps
                                             smart-append
                                             make-binding-wrap
                                             extend-ribcage!
                                             make-empty-ribcage
                                             new-mark
                                             anti-mark
                                             the-anti-mark
                                             top-marked?
                                             top-wrap
                                             empty-wrap
                                             set-ribcage-labels!
                                             set-ribcage-marks!
                                             set-ribcage-symnames!
                                             ribcage-labels
                                             ribcage-marks
                                             ribcage-symnames
                                             ribcage?
                                             make-ribcage
                                             gen-labels
                                             gen-label
                                             make-rename
                                             rename-marks
                                             rename-new
                                             rename-old
                                             subst-rename?
                                             wrap-subst
                                             wrap-marks
                                             make-wrap
                                             id-sym-name&marks
                                             id-sym-name
                                             id?
                                             nonsymbol-id?
                                             global-extend
                                             lookup
                                             macros-only-env
                                             extend-var-env
                                             extend-env
                                             null-env
                                             binding-value
                                             binding-type
                                             make-binding
                                             arg-check
                                             source-annotation
                                             no-source
                                             set-syntax-object-module!
                                             set-syntax-object-wrap!
                                             set-syntax-object-expression!
                                             syntax-object-module
                                             syntax-object-wrap
                                             syntax-object-expression
                                             syntax-object?
                                             make-syntax-object
                                             build-lexical-var
                                             build-letrec
                                             build-named-let
                                             build-let
                                             build-sequence
                                             build-data
                                             build-primref
                                             build-lambda-case
                                             build-case-lambda
                                             build-simple-lambda
                                             build-global-definition
                                             maybe-name-value!
                                             build-global-assignment
                                             build-global-reference
                                             analyze-variable
                                             build-lexical-assignment
                                             build-lexical-reference
                                             build-dynlet
                                             build-conditional
                                             build-application
                                             build-void
                                             decorate-source
                                             get-global-definition-hook
                                             put-global-definition-hook
                                             gensym-hook
                                             local-eval-hook
                                             top-level-eval-hook
                                             fx<
                                             fx=
                                             fx-
                                             fx+
                                             make-dynlet
                                             make-letrec
                                             make-let
                                             make-lambda-case
                                             make-lambda
                                             make-sequence
                                             make-application
                                             make-conditional
                                             make-toplevel-define
                                             make-toplevel-set
                                             make-toplevel-ref
                                             make-module-set
                                             make-module-ref
                                             make-lexical-set
                                             make-lexical-ref
                                             make-primitive-ref
                                             make-const
                                             make-void
                                             *mode*)
                                           ((top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top))
                                           ("i2467"
                                            "i2465"
                                            "i2463"
                                            "i2461"
                                            "i2459"
                                            "i2457"
                                            "i2455"
                                            "i2453"
                                            "i2451"
                                            "i2449"
                                            "i2447"
                                            "i2445"
                                            "i2443"
                                            "i2441"
                                            "i2439"
                                            "i2437"
                                            "i2435"
                                            "i2433"
                                            "i2431"
                                            "i2429"
                                            "i2427"
                                            "i2425"
                                            "i2423"
                                            "i2421"
                                            "i2419"
                                            "i2417"
                                            "i2415"
                                            "i2413"
                                            "i2411"
                                            "i2409"
                                            "i2407"
                                            "i2405"
                                            "i2403"
                                            "i2401"
                                            "i2399"
                                            "i2397"
                                            "i2396"
                                            "i2395"
                                            "i2393"
                                            "i2392"
                                            "i2391"
                                            "i2390"
                                            "i2389"
                                            "i2387"
                                            "i2385"
                                            "i2383"
                                            "i2381"
                                            "i2379"
                                            "i2377"
                                            "i2375"
                                            "i2373"
                                            "i2370"
                                            "i2368"
                                            "i2367"
                                            "i2366"
                                            "i2365"
                                            "i2364"
                                            "i2363"
                                            "i2361"
                                            "i2359"
                                            "i2357"
                                            "i2355"
                                            "i2354"
                                            "i2352"
                                            "i2350"
                                            "i2348"
                                            "i2346"
                                            "i2344"
                                            "i2342"
                                            "i2340"
                                            "i2339"
                                            "i2337"
                                            "i2335"
                                            "i2334"
                                            "i2333"
                                            "i2331"
                                            "i2330"
                                            "i2328"
                                            "i2326"
                                            "i2324"
                                            "i2322"
                                            "i2320"
                                            "i2318"
                                            "i2316"
                                            "i2314"
                                            "i2312"
                                            "i2310"
                                            "i2308"
                                            "i2306"
                                            "i2304"
                                            "i2302"
                                            "i2300"
                                            "i2298"
                                            "i2296"
                                            "i2294"
                                            "i2292"
                                            "i2290"
                                            "i2288"
                                            "i2286"
                                            "i2284"
                                            "i2282"
                                            "i2280"
                                            "i2278"
                                            "i2276"
                                            "i2274"
                                            "i2272"
                                            "i2270"
                                            "i2268"
                                            "i2266"
                                            "i2265"
                                            "i2263"
                                            "i2261"
                                            "i2259"
                                            "i2257"
                                            "i2255"
                                            "i2253"
                                            "i2251"
                                            "i2249"
                                            "i2247"
                                            "i2245"
                                            "i2243"
                                            "i2241"
                                            "i2239"
                                            "i2237"
                                            "i2235"
                                            "i2233"
                                            "i2231"
                                            "i2229"
                                            "i2227"
                                            "i2225"
                                            "i2223"
                                            "i2221"
                                            "i2219"
                                            "i2217"
                                            "i2214"))
                                         #(ribcage
                                           (define-structure
                                             define-expansion-constructors
                                             and-map*)
                                           ((top) (top) (top))
                                           ("i2066" "i2065" "i2063")))
                                        (hygiene guile))
                                     #{mod\ 5458}#))))
                         #{tmp\ 5444}#)
                  (syntax-violation
                    #f
                    "source expression failed to match any pattern"
                    #{tmp\ 5443}#)))
              ($sc-dispatch
                #{tmp\ 5443}#
                '(any each-any any))))
           #{e\ 5437}#)))
      (#{global-extend\ 2349}#
        'module-ref
        '@@
        (lambda (#{e\ 5461}# #{r\ 5462}# #{w\ 5463}#)
          (letrec ((#{remodulate\ 5468}#
                     (lambda (#{x\ 5469}# #{mod\ 5470}#)
                       (if (pair? #{x\ 5469}#)
                         (cons (#{remodulate\ 5468}#
                                 (car #{x\ 5469}#)
                                 #{mod\ 5470}#)
                               (#{remodulate\ 5468}#
                                 (cdr #{x\ 5469}#)
                                 #{mod\ 5470}#))
                         (if (#{syntax-object?\ 2317}# #{x\ 5469}#)
                           (#{make-syntax-object\ 2315}#
                             (#{remodulate\ 5468}#
                               (#{syntax-object-expression\ 2319}# #{x\ 5469}#)
                               #{mod\ 5470}#)
                             (#{syntax-object-wrap\ 2321}# #{x\ 5469}#)
                             #{mod\ 5470}#)
                           (if (vector? #{x\ 5469}#)
                             (let ((#{n\ 5481}# (vector-length #{x\ 5469}#)))
                               (let ((#{v\ 5483}# (make-vector #{n\ 5481}#)))
                                 (letrec ((#{loop\ 5486}#
                                            (lambda (#{i\ 5487}#)
                                              (if (#{fx=\ 2258}#
                                                    #{i\ 5487}#
                                                    #{n\ 5481}#)
                                                (begin (if #f #f) #{v\ 5483}#)
                                                (begin
                                                  (vector-set!
                                                    #{v\ 5483}#
                                                    #{i\ 5487}#
                                                    (#{remodulate\ 5468}#
                                                      (vector-ref
                                                        #{x\ 5469}#
                                                        #{i\ 5487}#)
                                                      #{mod\ 5470}#))
                                                  (#{loop\ 5486}#
                                                    (#{fx+\ 2254}#
                                                      #{i\ 5487}#
                                                      1)))))))
                                   (#{loop\ 5486}# 0))))
                             #{x\ 5469}#))))))
            ((lambda (#{tmp\ 5491}#)
               ((lambda (#{tmp\ 5492}#)
                  (if (if #{tmp\ 5492}#
                        (apply (lambda (#{_\ 5496}#
                                        #{mod\ 5497}#
                                        #{exp\ 5498}#)
                                 (and-map #{id?\ 2353}# #{mod\ 5497}#))
                               #{tmp\ 5492}#)
                        #f)
                    (apply (lambda (#{_\ 5503}# #{mod\ 5504}# #{exp\ 5505}#)
                             (let ((#{mod\ 5507}#
                                     (syntax->datum
                                       (cons '#(syntax-object
                                                private
                                                ((top)
                                                 #(ribcage
                                                   #(_ mod exp)
                                                   #((top) (top) (top))
                                                   #("i5500" "i5501" "i5502"))
                                                 #(ribcage
                                                   (remodulate)
                                                   ((top))
                                                   ("i5467"))
                                                 #(ribcage
                                                   #(e r w)
                                                   #((top) (top) (top))
                                                   #("i5464" "i5465" "i5466"))
                                                 #(ribcage
                                                   (lambda-var-list
                                                     gen-var
                                                     strip
                                                     chi-lambda-case
                                                     lambda*-formals
                                                     chi-simple-lambda
                                                     lambda-formals
                                                     ellipsis?
                                                     chi-void
                                                     eval-local-transformer
                                                     chi-local-syntax
                                                     chi-body
                                                     chi-macro
                                                     chi-application
                                                     chi-expr
                                                     chi
                                                     chi-top
                                                     syntax-type
                                                     chi-when-list
                                                     chi-install-global
                                                     chi-top-sequence
                                                     chi-sequence
                                                     source-wrap
                                                     wrap
                                                     bound-id-member?
                                                     distinct-bound-ids?
                                                     valid-bound-ids?
                                                     bound-id=?
                                                     free-id=?
                                                     id-var-name
                                                     same-marks?
                                                     join-marks
                                                     join-wraps
                                                     smart-append
                                                     make-binding-wrap
                                                     extend-ribcage!
                                                     make-empty-ribcage
                                                     new-mark
                                                     anti-mark
                                                     the-anti-mark
                                                     top-marked?
                                                     top-wrap
                                                     empty-wrap
                                                     set-ribcage-labels!
                                                     set-ribcage-marks!
                                                     set-ribcage-symnames!
                                                     ribcage-labels
                                                     ribcage-marks
                                                     ribcage-symnames
                                                     ribcage?
                                                     make-ribcage
                                                     gen-labels
                                                     gen-label
                                                     make-rename
                                                     rename-marks
                                                     rename-new
                                                     rename-old
                                                     subst-rename?
                                                     wrap-subst
                                                     wrap-marks
                                                     make-wrap
                                                     id-sym-name&marks
                                                     id-sym-name
                                                     id?
                                                     nonsymbol-id?
                                                     global-extend
                                                     lookup
                                                     macros-only-env
                                                     extend-var-env
                                                     extend-env
                                                     null-env
                                                     binding-value
                                                     binding-type
                                                     make-binding
                                                     arg-check
                                                     source-annotation
                                                     no-source
                                                     set-syntax-object-module!
                                                     set-syntax-object-wrap!
                                                     set-syntax-object-expression!
                                                     syntax-object-module
                                                     syntax-object-wrap
                                                     syntax-object-expression
                                                     syntax-object?
                                                     make-syntax-object
                                                     build-lexical-var
                                                     build-letrec
                                                     build-named-let
                                                     build-let
                                                     build-sequence
                                                     build-data
                                                     build-primref
                                                     build-lambda-case
                                                     build-case-lambda
                                                     build-simple-lambda
                                                     build-global-definition
                                                     maybe-name-value!
                                                     build-global-assignment
                                                     build-global-reference
                                                     analyze-variable
                                                     build-lexical-assignment
                                                     build-lexical-reference
                                                     build-dynlet
                                                     build-conditional
                                                     build-application
                                                     build-void
                                                     decorate-source
                                                     get-global-definition-hook
                                                     put-global-definition-hook
                                                     gensym-hook
                                                     local-eval-hook
                                                     top-level-eval-hook
                                                     fx<
                                                     fx=
                                                     fx-
                                                     fx+
                                                     make-dynlet
                                                     make-letrec
                                                     make-let
                                                     make-lambda-case
                                                     make-lambda
                                                     make-sequence
                                                     make-application
                                                     make-conditional
                                                     make-toplevel-define
                                                     make-toplevel-set
                                                     make-toplevel-ref
                                                     make-module-set
                                                     make-module-ref
                                                     make-lexical-set
                                                     make-lexical-ref
                                                     make-primitive-ref
                                                     make-const
                                                     make-void
                                                     *mode*)
                                                   ((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                   ("i2467"
                                                    "i2465"
                                                    "i2463"
                                                    "i2461"
                                                    "i2459"
                                                    "i2457"
                                                    "i2455"
                                                    "i2453"
                                                    "i2451"
                                                    "i2449"
                                                    "i2447"
                                                    "i2445"
                                                    "i2443"
                                                    "i2441"
                                                    "i2439"
                                                    "i2437"
                                                    "i2435"
                                                    "i2433"
                                                    "i2431"
                                                    "i2429"
                                                    "i2427"
                                                    "i2425"
                                                    "i2423"
                                                    "i2421"
                                                    "i2419"
                                                    "i2417"
                                                    "i2415"
                                                    "i2413"
                                                    "i2411"
                                                    "i2409"
                                                    "i2407"
                                                    "i2405"
                                                    "i2403"
                                                    "i2401"
                                                    "i2399"
                                                    "i2397"
                                                    "i2396"
                                                    "i2395"
                                                    "i2393"
                                                    "i2392"
                                                    "i2391"
                                                    "i2390"
                                                    "i2389"
                                                    "i2387"
                                                    "i2385"
                                                    "i2383"
                                                    "i2381"
                                                    "i2379"
                                                    "i2377"
                                                    "i2375"
                                                    "i2373"
                                                    "i2370"
                                                    "i2368"
                                                    "i2367"
                                                    "i2366"
                                                    "i2365"
                                                    "i2364"
                                                    "i2363"
                                                    "i2361"
                                                    "i2359"
                                                    "i2357"
                                                    "i2355"
                                                    "i2354"
                                                    "i2352"
                                                    "i2350"
                                                    "i2348"
                                                    "i2346"
                                                    "i2344"
                                                    "i2342"
                                                    "i2340"
                                                    "i2339"
                                                    "i2337"
                                                    "i2335"
                                                    "i2334"
                                                    "i2333"
                                                    "i2331"
                                                    "i2330"
                                                    "i2328"
                                                    "i2326"
                                                    "i2324"
                                                    "i2322"
                                                    "i2320"
                                                    "i2318"
                                                    "i2316"
                                                    "i2314"
                                                    "i2312"
                                                    "i2310"
                                                    "i2308"
                                                    "i2306"
                                                    "i2304"
                                                    "i2302"
                                                    "i2300"
                                                    "i2298"
                                                    "i2296"
                                                    "i2294"
                                                    "i2292"
                                                    "i2290"
                                                    "i2288"
                                                    "i2286"
                                                    "i2284"
                                                    "i2282"
                                                    "i2280"
                                                    "i2278"
                                                    "i2276"
                                                    "i2274"
                                                    "i2272"
                                                    "i2270"
                                                    "i2268"
                                                    "i2266"
                                                    "i2265"
                                                    "i2263"
                                                    "i2261"
                                                    "i2259"
                                                    "i2257"
                                                    "i2255"
                                                    "i2253"
                                                    "i2251"
                                                    "i2249"
                                                    "i2247"
                                                    "i2245"
                                                    "i2243"
                                                    "i2241"
                                                    "i2239"
                                                    "i2237"
                                                    "i2235"
                                                    "i2233"
                                                    "i2231"
                                                    "i2229"
                                                    "i2227"
                                                    "i2225"
                                                    "i2223"
                                                    "i2221"
                                                    "i2219"
                                                    "i2217"
                                                    "i2214"))
                                                 #(ribcage
                                                   (define-structure
                                                     define-expansion-constructors
                                                     and-map*)
                                                   ((top) (top) (top))
                                                   ("i2066" "i2065" "i2063")))
                                                (hygiene guile))
                                             #{mod\ 5504}#))))
                               (values
                                 (#{remodulate\ 5468}#
                                   #{exp\ 5505}#
                                   #{mod\ 5507}#)
                                 #{r\ 5462}#
                                 #{w\ 5463}#
                                 (#{source-annotation\ 2332}# #{exp\ 5505}#)
                                 #{mod\ 5507}#)))
                           #{tmp\ 5492}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp\ 5491}#)))
                ($sc-dispatch
                  #{tmp\ 5491}#
                  '(any each-any any))))
             #{e\ 5461}#))))
      (#{global-extend\ 2349}#
        'core
        'if
        (lambda (#{e\ 5509}#
                 #{r\ 5510}#
                 #{w\ 5511}#
                 #{s\ 5512}#
                 #{mod\ 5513}#)
          ((lambda (#{tmp\ 5519}#)
             ((lambda (#{tmp\ 5520}#)
                (if #{tmp\ 5520}#
                  (apply (lambda (#{_\ 5524}# #{test\ 5525}# #{then\ 5526}#)
                           (#{build-conditional\ 2277}#
                             #{s\ 5512}#
                             (#{chi\ 2438}#
                               #{test\ 5525}#
                               #{r\ 5510}#
                               #{w\ 5511}#
                               #{mod\ 5513}#)
                             (#{chi\ 2438}#
                               #{then\ 5526}#
                               #{r\ 5510}#
                               #{w\ 5511}#
                               #{mod\ 5513}#)
                             (#{build-void\ 2273}# #f)))
                         #{tmp\ 5520}#)
                  ((lambda (#{tmp\ 5528}#)
                     (if #{tmp\ 5528}#
                       (apply (lambda (#{_\ 5533}#
                                       #{test\ 5534}#
                                       #{then\ 5535}#
                                       #{else\ 5536}#)
                                (#{build-conditional\ 2277}#
                                  #{s\ 5512}#
                                  (#{chi\ 2438}#
                                    #{test\ 5534}#
                                    #{r\ 5510}#
                                    #{w\ 5511}#
                                    #{mod\ 5513}#)
                                  (#{chi\ 2438}#
                                    #{then\ 5535}#
                                    #{r\ 5510}#
                                    #{w\ 5511}#
                                    #{mod\ 5513}#)
                                  (#{chi\ 2438}#
                                    #{else\ 5536}#
                                    #{r\ 5510}#
                                    #{w\ 5511}#
                                    #{mod\ 5513}#)))
                              #{tmp\ 5528}#)
                       (syntax-violation
                         #f
                         "source expression failed to match any pattern"
                         #{tmp\ 5519}#)))
                   ($sc-dispatch
                     #{tmp\ 5519}#
                     '(any any any any)))))
              ($sc-dispatch
                #{tmp\ 5519}#
                '(any any any))))
           #{e\ 5509}#)))
      (#{global-extend\ 2349}#
        'core
        'with-fluids
        (lambda (#{e\ 5537}#
                 #{r\ 5538}#
                 #{w\ 5539}#
                 #{s\ 5540}#
                 #{mod\ 5541}#)
          ((lambda (#{tmp\ 5547}#)
             ((lambda (#{tmp\ 5548}#)
                (if #{tmp\ 5548}#
                  (apply (lambda (#{_\ 5554}#
                                  #{fluid\ 5555}#
                                  #{val\ 5556}#
                                  #{b\ 5557}#
                                  #{b*\ 5558}#)
                           (#{build-dynlet\ 2279}#
                             #{s\ 5540}#
                             (map (lambda (#{x\ 5559}#)
                                    (#{chi\ 2438}#
                                      #{x\ 5559}#
                                      #{r\ 5538}#
                                      #{w\ 5539}#
                                      #{mod\ 5541}#))
                                  #{fluid\ 5555}#)
                             (map (lambda (#{x\ 5562}#)
                                    (#{chi\ 2438}#
                                      #{x\ 5562}#
                                      #{r\ 5538}#
                                      #{w\ 5539}#
                                      #{mod\ 5541}#))
                                  #{val\ 5556}#)
                             (#{chi-body\ 2446}#
                               (cons #{b\ 5557}# #{b*\ 5558}#)
                               (#{source-wrap\ 2424}#
                                 #{e\ 5537}#
                                 #{w\ 5539}#
                                 #{s\ 5540}#
                                 #{mod\ 5541}#)
                               #{r\ 5538}#
                               #{w\ 5539}#
                               #{mod\ 5541}#)))
                         #{tmp\ 5548}#)
                  (syntax-violation
                    #f
                    "source expression failed to match any pattern"
                    #{tmp\ 5547}#)))
              ($sc-dispatch
                #{tmp\ 5547}#
                '(any #(each (any any)) any . each-any))))
           #{e\ 5537}#)))
      (#{global-extend\ 2349}#
        'begin
        'begin
        '())
      (#{global-extend\ 2349}#
        'define
        'define
        '())
      (#{global-extend\ 2349}#
        'define-syntax
        'define-syntax
        '())
      (#{global-extend\ 2349}#
        'eval-when
        'eval-when
        '())
      (#{global-extend\ 2349}#
        'core
        'syntax-case
        (letrec ((#{gen-syntax-case\ 5573}#
                   (lambda (#{x\ 5574}#
                            #{keys\ 5575}#
                            #{clauses\ 5576}#
                            #{r\ 5577}#
                            #{mod\ 5578}#)
                     (if (null? #{clauses\ 5576}#)
                       (#{build-application\ 2275}#
                         #f
                         (#{build-primref\ 2301}#
                           #f
                           'syntax-violation)
                         (list (#{build-data\ 2303}# #f #f)
                               (#{build-data\ 2303}#
                                 #f
                                 "source expression failed to match any pattern")
                               #{x\ 5574}#))
                       ((lambda (#{tmp\ 5588}#)
                          ((lambda (#{tmp\ 5589}#)
                             (if #{tmp\ 5589}#
                               (apply (lambda (#{pat\ 5592}# #{exp\ 5593}#)
                                        (if (if (#{id?\ 2353}# #{pat\ 5592}#)
                                              (and-map
                                                (lambda (#{x\ 5596}#)
                                                  (not (#{free-id=?\ 2412}#
                                                         #{pat\ 5592}#
                                                         #{x\ 5596}#)))
                                                (cons '#(syntax-object
                                                         ...
                                                         ((top)
                                                          #(ribcage
                                                            #(pat exp)
                                                            #((top) (top))
                                                            #("i5590" "i5591"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(x
                                                              keys
                                                              clauses
                                                              r
                                                              mod)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i5579"
                                                              "i5580"
                                                              "i5581"
                                                              "i5582"
                                                              "i5583"))
                                                          #(ribcage
                                                            (gen-syntax-case
                                                              gen-clause
                                                              build-dispatch-call
                                                              convert-pattern)
                                                            ((top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                            ("i5572"
                                                             "i5570"
                                                             "i5568"
                                                             "i5566"))
                                                          #(ribcage
                                                            (lambda-var-list
                                                              gen-var
                                                              strip
                                                              chi-lambda-case
                                                              lambda*-formals
                                                              chi-simple-lambda
                                                              lambda-formals
                                                              ellipsis?
                                                              chi-void
                                                              eval-local-transformer
                                                              chi-local-syntax
                                                              chi-body
                                                              chi-macro
                                                              chi-application
                                                              chi-expr
                                                              chi
                                                              chi-top
                                                              syntax-type
                                                              chi-when-list
                                                              chi-install-global
                                                              chi-top-sequence
                                                              chi-sequence
                                                              source-wrap
                                                              wrap
                                                              bound-id-member?
                                                              distinct-bound-ids?
                                                              valid-bound-ids?
                                                              bound-id=?
                                                              free-id=?
                                                              id-var-name
                                                              same-marks?
                                                              join-marks
                                                              join-wraps
                                                              smart-append
                                                              make-binding-wrap
                                                              extend-ribcage!
                                                              make-empty-ribcage
                                                              new-mark
                                                              anti-mark
                                                              the-anti-mark
                                                              top-marked?
                                                              top-wrap
                                                              empty-wrap
                                                              set-ribcage-labels!
                                                              set-ribcage-marks!
                                                              set-ribcage-symnames!
                                                              ribcage-labels
                                                              ribcage-marks
                                                              ribcage-symnames
                                                              ribcage?
                                                              make-ribcage
                                                              gen-labels
                                                              gen-label
                                                              make-rename
                                                              rename-marks
                                                              rename-new
                                                              rename-old
                                                              subst-rename?
                                                              wrap-subst
                                                              wrap-marks
                                                              make-wrap
                                                              id-sym-name&marks
                                                              id-sym-name
                                                              id?
                                                              nonsymbol-id?
                                                              global-extend
                                                              lookup
                                                              macros-only-env
                                                              extend-var-env
                                                              extend-env
                                                              null-env
                                                              binding-value
                                                              binding-type
                                                              make-binding
                                                              arg-check
                                                              source-annotation
                                                              no-source
                                                              set-syntax-object-module!
                                                              set-syntax-object-wrap!
                                                              set-syntax-object-expression!
                                                              syntax-object-module
                                                              syntax-object-wrap
                                                              syntax-object-expression
                                                              syntax-object?
                                                              make-syntax-object
                                                              build-lexical-var
                                                              build-letrec
                                                              build-named-let
                                                              build-let
                                                              build-sequence
                                                              build-data
                                                              build-primref
                                                              build-lambda-case
                                                              build-case-lambda
                                                              build-simple-lambda
                                                              build-global-definition
                                                              maybe-name-value!
                                                              build-global-assignment
                                                              build-global-reference
                                                              analyze-variable
                                                              build-lexical-assignment
                                                              build-lexical-reference
                                                              build-dynlet
                                                              build-conditional
                                                              build-application
                                                              build-void
                                                              decorate-source
                                                              get-global-definition-hook
                                                              put-global-definition-hook
                                                              gensym-hook
                                                              local-eval-hook
                                                              top-level-eval-hook
                                                              fx<
                                                              fx=
                                                              fx-
                                                              fx+
                                                              make-dynlet
                                                              make-letrec
                                                              make-let
                                                              make-lambda-case
                                                              make-lambda
                                                              make-sequence
                                                              make-application
                                                              make-conditional
                                                              make-toplevel-define
                                                              make-toplevel-set
                                                              make-toplevel-ref
                                                              make-module-set
                                                              make-module-ref
                                                              make-lexical-set
                                                              make-lexical-ref
                                                              make-primitive-ref
                                                              make-const
                                                              make-void
                                                              *mode*)
                                                            ((top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                            ("i2467"
                                                             "i2465"
                                                             "i2463"
                                                             "i2461"
                                                             "i2459"
                                                             "i2457"
                                                             "i2455"
                                                             "i2453"
                                                             "i2451"
                                                             "i2449"
                                                             "i2447"
                                                             "i2445"
                                                             "i2443"
                                                             "i2441"
                                                             "i2439"
                                                             "i2437"
                                                             "i2435"
                                                             "i2433"
                                                             "i2431"
                                                             "i2429"
                                                             "i2427"
                                                             "i2425"
                                                             "i2423"
                                                             "i2421"
                                                             "i2419"
                                                             "i2417"
                                                             "i2415"
                                                             "i2413"
                                                             "i2411"
                                                             "i2409"
                                                             "i2407"
                                                             "i2405"
                                                             "i2403"
                                                             "i2401"
                                                             "i2399"
                                                             "i2397"
                                                             "i2396"
                                                             "i2395"
                                                             "i2393"
                                                             "i2392"
                                                             "i2391"
                                                             "i2390"
                                                             "i2389"
                                                             "i2387"
                                                             "i2385"
                                                             "i2383"
                                                             "i2381"
                                                             "i2379"
                                                             "i2377"
                                                             "i2375"
                                                             "i2373"
                                                             "i2370"
                                                             "i2368"
                                                             "i2367"
                                                             "i2366"
                                                             "i2365"
                                                             "i2364"
                                                             "i2363"
                                                             "i2361"
                                                             "i2359"
                                                             "i2357"
                                                             "i2355"
                                                             "i2354"
                                                             "i2352"
                                                             "i2350"
                                                             "i2348"
                                                             "i2346"
                                                             "i2344"
                                                             "i2342"
                                                             "i2340"
                                                             "i2339"
                                                             "i2337"
                                                             "i2335"
                                                             "i2334"
                                                             "i2333"
                                                             "i2331"
                                                             "i2330"
                                                             "i2328"
                                                             "i2326"
                                                             "i2324"
                                                             "i2322"
                                                             "i2320"
                                                             "i2318"
                                                             "i2316"
                                                             "i2314"
                                                             "i2312"
                                                             "i2310"
                                                             "i2308"
                                                             "i2306"
                                                             "i2304"
                                                             "i2302"
                                                             "i2300"
                                                             "i2298"
                                                             "i2296"
                                                             "i2294"
                                                             "i2292"
                                                             "i2290"
                                                             "i2288"
                                                             "i2286"
                                                             "i2284"
                                                             "i2282"
                                                             "i2280"
                                                             "i2278"
                                                             "i2276"
                                                             "i2274"
                                                             "i2272"
                                                             "i2270"
                                                             "i2268"
                                                             "i2266"
                                                             "i2265"
                                                             "i2263"
                                                             "i2261"
                                                             "i2259"
                                                             "i2257"
                                                             "i2255"
                                                             "i2253"
                                                             "i2251"
                                                             "i2249"
                                                             "i2247"
                                                             "i2245"
                                                             "i2243"
                                                             "i2241"
                                                             "i2239"
                                                             "i2237"
                                                             "i2235"
                                                             "i2233"
                                                             "i2231"
                                                             "i2229"
                                                             "i2227"
                                                             "i2225"
                                                             "i2223"
                                                             "i2221"
                                                             "i2219"
                                                             "i2217"
                                                             "i2214"))
                                                          #(ribcage
                                                            (define-structure
                                                              define-expansion-constructors
                                                              and-map*)
                                                            ((top) (top) (top))
                                                            ("i2066"
                                                             "i2065"
                                                             "i2063")))
                                                         (hygiene guile))
                                                      #{keys\ 5575}#))
                                              #f)
                                          (let ((#{labels\ 5600}#
                                                  (list (#{gen-label\ 2369}#)))
                                                (#{var\ 5601}#
                                                  (#{gen-var\ 2466}#
                                                    #{pat\ 5592}#)))
                                            (#{build-application\ 2275}#
                                              #f
                                              (#{build-simple-lambda\ 2295}#
                                                #f
                                                (list (syntax->datum
                                                        #{pat\ 5592}#))
                                                #f
                                                (list #{var\ 5601}#)
                                                '()
                                                (#{chi\ 2438}#
                                                  #{exp\ 5593}#
                                                  (#{extend-env\ 2341}#
                                                    #{labels\ 5600}#
                                                    (list (cons 'syntax
                                                                (cons #{var\ 5601}#
                                                                      0)))
                                                    #{r\ 5577}#)
                                                  (#{make-binding-wrap\ 2400}#
                                                    (list #{pat\ 5592}#)
                                                    #{labels\ 5600}#
                                                    '(()))
                                                  #{mod\ 5578}#))
                                              (list #{x\ 5574}#)))
                                          (#{gen-clause\ 5571}#
                                            #{x\ 5574}#
                                            #{keys\ 5575}#
                                            (cdr #{clauses\ 5576}#)
                                            #{r\ 5577}#
                                            #{pat\ 5592}#
                                            #t
                                            #{exp\ 5593}#
                                            #{mod\ 5578}#)))
                                      #{tmp\ 5589}#)
                               ((lambda (#{tmp\ 5607}#)
                                  (if #{tmp\ 5607}#
                                    (apply (lambda (#{pat\ 5611}#
                                                    #{fender\ 5612}#
                                                    #{exp\ 5613}#)
                                             (#{gen-clause\ 5571}#
                                               #{x\ 5574}#
                                               #{keys\ 5575}#
                                               (cdr #{clauses\ 5576}#)
                                               #{r\ 5577}#
                                               #{pat\ 5611}#
                                               #{fender\ 5612}#
                                               #{exp\ 5613}#
                                               #{mod\ 5578}#))
                                           #{tmp\ 5607}#)
                                    ((lambda (#{_\ 5615}#)
                                       (syntax-violation
                                         'syntax-case
                                         "invalid clause"
                                         (car #{clauses\ 5576}#)))
                                     #{tmp\ 5588}#)))
                                ($sc-dispatch
                                  #{tmp\ 5588}#
                                  '(any any any)))))
                           ($sc-dispatch #{tmp\ 5588}# (quote (any any)))))
                        (car #{clauses\ 5576}#)))))
                 (#{gen-clause\ 5571}#
                   (lambda (#{x\ 5616}#
                            #{keys\ 5617}#
                            #{clauses\ 5618}#
                            #{r\ 5619}#
                            #{pat\ 5620}#
                            #{fender\ 5621}#
                            #{exp\ 5622}#
                            #{mod\ 5623}#)
                     (call-with-values
                       (lambda ()
                         (#{convert-pattern\ 5567}#
                           #{pat\ 5620}#
                           #{keys\ 5617}#))
                       (lambda (#{p\ 5632}# #{pvars\ 5633}#)
                         (if (not (#{distinct-bound-ids?\ 2418}#
                                    (map car #{pvars\ 5633}#)))
                           (syntax-violation
                             'syntax-case
                             "duplicate pattern variable"
                             #{pat\ 5620}#)
                           (if (not (and-map
                                      (lambda (#{x\ 5640}#)
                                        (not (#{ellipsis?\ 2454}#
                                               (car #{x\ 5640}#))))
                                      #{pvars\ 5633}#))
                             (syntax-violation
                               'syntax-case
                               "misplaced ellipsis"
                               #{pat\ 5620}#)
                             (let ((#{y\ 5644}#
                                     (#{gen-var\ 2466}# (quote tmp))))
                               (#{build-application\ 2275}#
                                 #f
                                 (#{build-simple-lambda\ 2295}#
                                   #f
                                   (list (quote tmp))
                                   #f
                                   (list #{y\ 5644}#)
                                   '()
                                   (let ((#{y\ 5648}#
                                           (#{build-lexical-reference\ 2281}#
                                             'value
                                             #f
                                             'tmp
                                             #{y\ 5644}#)))
                                     (#{build-conditional\ 2277}#
                                       #f
                                       ((lambda (#{tmp\ 5651}#)
                                          ((lambda (#{tmp\ 5652}#)
                                             (if #{tmp\ 5652}#
                                               (apply (lambda () #{y\ 5648}#)
                                                      #{tmp\ 5652}#)
                                               ((lambda (#{_\ 5654}#)
                                                  (#{build-conditional\ 2277}#
                                                    #f
                                                    #{y\ 5648}#
                                                    (#{build-dispatch-call\ 5569}#
                                                      #{pvars\ 5633}#
                                                      #{fender\ 5621}#
                                                      #{y\ 5648}#
                                                      #{r\ 5619}#
                                                      #{mod\ 5623}#)
                                                    (#{build-data\ 2303}#
                                                      #f
                                                      #f)))
                                                #{tmp\ 5651}#)))
                                           ($sc-dispatch
                                             #{tmp\ 5651}#
                                             '#(atom #t))))
                                        #{fender\ 5621}#)
                                       (#{build-dispatch-call\ 5569}#
                                         #{pvars\ 5633}#
                                         #{exp\ 5622}#
                                         #{y\ 5648}#
                                         #{r\ 5619}#
                                         #{mod\ 5623}#)
                                       (#{gen-syntax-case\ 5573}#
                                         #{x\ 5616}#
                                         #{keys\ 5617}#
                                         #{clauses\ 5618}#
                                         #{r\ 5619}#
                                         #{mod\ 5623}#))))
                                 (list (if (eq? #{p\ 5632}# (quote any))
                                         (#{build-application\ 2275}#
                                           #f
                                           (#{build-primref\ 2301}#
                                             #f
                                             'list)
                                           (list #{x\ 5616}#))
                                         (#{build-application\ 2275}#
                                           #f
                                           (#{build-primref\ 2301}#
                                             #f
                                             '$sc-dispatch)
                                           (list #{x\ 5616}#
                                                 (#{build-data\ 2303}#
                                                   #f
                                                   #{p\ 5632}#)))))))))))))
                 (#{build-dispatch-call\ 5569}#
                   (lambda (#{pvars\ 5662}#
                            #{exp\ 5663}#
                            #{y\ 5664}#
                            #{r\ 5665}#
                            #{mod\ 5666}#)
                     (let ((#{ids\ 5674}# (map car #{pvars\ 5662}#))
                           (#{levels\ 5675}# (map cdr #{pvars\ 5662}#)))
                       (let ((#{labels\ 5678}#
                               (#{gen-labels\ 2371}# #{ids\ 5674}#))
                             (#{new-vars\ 5679}#
                               (map #{gen-var\ 2466}# #{ids\ 5674}#)))
                         (#{build-application\ 2275}#
                           #f
                           (#{build-primref\ 2301}# #f (quote apply))
                           (list (#{build-simple-lambda\ 2295}#
                                   #f
                                   (map syntax->datum #{ids\ 5674}#)
                                   #f
                                   #{new-vars\ 5679}#
                                   '()
                                   (#{chi\ 2438}#
                                     #{exp\ 5663}#
                                     (#{extend-env\ 2341}#
                                       #{labels\ 5678}#
                                       (map (lambda (#{var\ 5683}#
                                                     #{level\ 5684}#)
                                              (cons 'syntax
                                                    (cons #{var\ 5683}#
                                                          #{level\ 5684}#)))
                                            #{new-vars\ 5679}#
                                            (map cdr #{pvars\ 5662}#))
                                       #{r\ 5665}#)
                                     (#{make-binding-wrap\ 2400}#
                                       #{ids\ 5674}#
                                       #{labels\ 5678}#
                                       '(()))
                                     #{mod\ 5666}#))
                                 #{y\ 5664}#))))))
                 (#{convert-pattern\ 5567}#
                   (lambda (#{pattern\ 5690}# #{keys\ 5691}#)
                     (letrec ((#{cvt\ 5697}#
                                (lambda (#{p\ 5698}# #{n\ 5699}# #{ids\ 5700}#)
                                  (if (#{id?\ 2353}# #{p\ 5698}#)
                                    (if (#{bound-id-member?\ 2420}#
                                          #{p\ 5698}#
                                          #{keys\ 5691}#)
                                      (values
                                        (vector (quote free-id) #{p\ 5698}#)
                                        #{ids\ 5700}#)
                                      (values
                                        'any
                                        (cons (cons #{p\ 5698}# #{n\ 5699}#)
                                              #{ids\ 5700}#)))
                                    ((lambda (#{tmp\ 5704}#)
                                       ((lambda (#{tmp\ 5705}#)
                                          (if (if #{tmp\ 5705}#
                                                (apply (lambda (#{x\ 5708}#
                                                                #{dots\ 5709}#)
                                                         (#{ellipsis?\ 2454}#
                                                           #{dots\ 5709}#))
                                                       #{tmp\ 5705}#)
                                                #f)
                                            (apply (lambda (#{x\ 5712}#
                                                            #{dots\ 5713}#)
                                                     (call-with-values
                                                       (lambda ()
                                                         (#{cvt\ 5697}#
                                                           #{x\ 5712}#
                                                           (#{fx+\ 2254}#
                                                             #{n\ 5699}#
                                                             1)
                                                           #{ids\ 5700}#))
                                                       (lambda (#{p\ 5714}#
                                                                #{ids\ 5715}#)
                                                         (values
                                                           (if (eq? #{p\ 5714}#
                                                                    'any)
                                                             'each-any
                                                             (vector
                                                               'each
                                                               #{p\ 5714}#))
                                                           #{ids\ 5715}#))))
                                                   #{tmp\ 5705}#)
                                            ((lambda (#{tmp\ 5718}#)
                                               (if (if #{tmp\ 5718}#
                                                     (apply (lambda (#{x\ 5722}#
                                                                     #{dots\ 5723}#
                                                                     #{ys\ 5724}#)
                                                              (#{ellipsis?\ 2454}#
                                                                #{dots\ 5723}#))
                                                            #{tmp\ 5718}#)
                                                     #f)
                                                 (apply (lambda (#{x\ 5728}#
                                                                 #{dots\ 5729}#
                                                                 #{ys\ 5730}#)
                                                          (call-with-values
                                                            (lambda ()
                                                              (#{cvt*\ 5695}#
                                                                #{ys\ 5730}#
                                                                #{n\ 5699}#
                                                                #{ids\ 5700}#))
                                                            (lambda (#{ys\ 5732}#
                                                                     #{ids\ 5733}#)
                                                              (call-with-values
                                                                (lambda ()
                                                                  (#{cvt\ 5697}#
                                                                    #{x\ 5728}#
                                                                    (+ #{n\ 5699}#
                                                                       1)
                                                                    #{ids\ 5733}#))
                                                                (lambda (#{x\ 5736}#
                                                                         #{ids\ 5737}#)
                                                                  (values
                                                                    (list->vector
                                                                      (cons 'each+
                                                                            (cons #{x\ 5736}#
                                                                                  (cons (reverse
                                                                                          #{ys\ 5732}#)
                                                                                        '(())))))
                                                                    #{ids\ 5737}#))))))
                                                        #{tmp\ 5718}#)
                                                 ((lambda (#{tmp\ 5741}#)
                                                    (if #{tmp\ 5741}#
                                                      (apply (lambda (#{x\ 5744}#
                                                                      #{y\ 5745}#)
                                                               (call-with-values
                                                                 (lambda ()
                                                                   (#{cvt\ 5697}#
                                                                     #{y\ 5745}#
                                                                     #{n\ 5699}#
                                                                     #{ids\ 5700}#))
                                                                 (lambda (#{y\ 5746}#
                                                                          #{ids\ 5747}#)
                                                                   (call-with-values
                                                                     (lambda ()
                                                                       (#{cvt\ 5697}#
                                                                         #{x\ 5744}#
                                                                         #{n\ 5699}#
                                                                         #{ids\ 5747}#))
                                                                     (lambda (#{x\ 5750}#
                                                                              #{ids\ 5751}#)
                                                                       (values
                                                                         (cons #{x\ 5750}#
                                                                               #{y\ 5746}#)
                                                                         #{ids\ 5751}#))))))
                                                             #{tmp\ 5741}#)
                                                      ((lambda (#{tmp\ 5754}#)
                                                         (if #{tmp\ 5754}#
                                                           (apply (lambda ()
                                                                    (values
                                                                      '()
                                                                      #{ids\ 5700}#))
                                                                  #{tmp\ 5754}#)
                                                           ((lambda (#{tmp\ 5755}#)
                                                              (if #{tmp\ 5755}#
                                                                (apply (lambda (#{x\ 5757}#)
                                                                         (call-with-values
                                                                           (lambda ()
                                                                             (#{cvt\ 5697}#
                                                                               #{x\ 5757}#
                                                                               #{n\ 5699}#
                                                                               #{ids\ 5700}#))
                                                                           (lambda (#{p\ 5759}#
                                                                                    #{ids\ 5760}#)
                                                                             (values
                                                                               (vector
                                                                                 'vector
                                                                                 #{p\ 5759}#)
                                                                               #{ids\ 5760}#))))
                                                                       #{tmp\ 5755}#)
                                                                ((lambda (#{x\ 5764}#)
                                                                   (values
                                                                     (vector
                                                                       'atom
                                                                       (#{strip\ 2464}#
                                                                         #{p\ 5698}#
                                                                         '(())))
                                                                     #{ids\ 5700}#))
                                                                 #{tmp\ 5704}#)))
                                                            ($sc-dispatch
                                                              #{tmp\ 5704}#
                                                              '#(vector
                                                                 each-any)))))
                                                       ($sc-dispatch
                                                         #{tmp\ 5704}#
                                                         '()))))
                                                  ($sc-dispatch
                                                    #{tmp\ 5704}#
                                                    '(any . any)))))
                                             ($sc-dispatch
                                               #{tmp\ 5704}#
                                               '(any any . each-any)))))
                                        ($sc-dispatch
                                          #{tmp\ 5704}#
                                          '(any any))))
                                     #{p\ 5698}#))))
                              (#{cvt*\ 5695}#
                                (lambda (#{p*\ 5766}#
                                         #{n\ 5767}#
                                         #{ids\ 5768}#)
                                  (if (null? #{p*\ 5766}#)
                                    (values (quote ()) #{ids\ 5768}#)
                                    (call-with-values
                                      (lambda ()
                                        (#{cvt*\ 5695}#
                                          (cdr #{p*\ 5766}#)
                                          #{n\ 5767}#
                                          #{ids\ 5768}#))
                                      (lambda (#{y\ 5772}# #{ids\ 5773}#)
                                        (call-with-values
                                          (lambda ()
                                            (#{cvt\ 5697}#
                                              (car #{p*\ 5766}#)
                                              #{n\ 5767}#
                                              #{ids\ 5773}#))
                                          (lambda (#{x\ 5776}# #{ids\ 5777}#)
                                            (values
                                              (cons #{x\ 5776}# #{y\ 5772}#)
                                              #{ids\ 5777}#)))))))))
                       (#{cvt\ 5697}# #{pattern\ 5690}# 0 (quote ()))))))
          (lambda (#{e\ 5780}#
                   #{r\ 5781}#
                   #{w\ 5782}#
                   #{s\ 5783}#
                   #{mod\ 5784}#)
            (let ((#{e\ 5791}#
                    (#{source-wrap\ 2424}#
                      #{e\ 5780}#
                      #{w\ 5782}#
                      #{s\ 5783}#
                      #{mod\ 5784}#)))
              ((lambda (#{tmp\ 5792}#)
                 ((lambda (#{tmp\ 5793}#)
                    (if #{tmp\ 5793}#
                      (apply (lambda (#{_\ 5798}#
                                      #{val\ 5799}#
                                      #{key\ 5800}#
                                      #{m\ 5801}#)
                               (if (and-map
                                     (lambda (#{x\ 5802}#)
                                       (if (#{id?\ 2353}# #{x\ 5802}#)
                                         (not (#{ellipsis?\ 2454}#
                                                #{x\ 5802}#))
                                         #f))
                                     #{key\ 5800}#)
                                 (let ((#{x\ 5808}#
                                         (#{gen-var\ 2466}# (quote tmp))))
                                   (#{build-application\ 2275}#
                                     #{s\ 5783}#
                                     (#{build-simple-lambda\ 2295}#
                                       #f
                                       (list (quote tmp))
                                       #f
                                       (list #{x\ 5808}#)
                                       '()
                                       (#{gen-syntax-case\ 5573}#
                                         (#{build-lexical-reference\ 2281}#
                                           'value
                                           #f
                                           'tmp
                                           #{x\ 5808}#)
                                         #{key\ 5800}#
                                         #{m\ 5801}#
                                         #{r\ 5781}#
                                         #{mod\ 5784}#))
                                     (list (#{chi\ 2438}#
                                             #{val\ 5799}#
                                             #{r\ 5781}#
                                             '(())
                                             #{mod\ 5784}#))))
                                 (syntax-violation
                                   'syntax-case
                                   "invalid literals list"
                                   #{e\ 5791}#)))
                             #{tmp\ 5793}#)
                      (syntax-violation
                        #f
                        "source expression failed to match any pattern"
                        #{tmp\ 5792}#)))
                  ($sc-dispatch
                    #{tmp\ 5792}#
                    '(any any each-any . each-any))))
               #{e\ 5791}#)))))
      (set! macroexpand
        (lambda (#{x\ 5814}# . #{rest\ 5815}#)
          (let ((#{m\ 5821}#
                  (if (null? #{rest\ 5815}#)
                    'e
                    (car #{rest\ 5815}#)))
                (#{esew\ 5822}#
                  (if (let ((#{t\ 5826}# (null? #{rest\ 5815}#)))
                        (if #{t\ 5826}#
                          #{t\ 5826}#
                          (null? (cdr #{rest\ 5815}#))))
                    '(eval)
                    (cadr #{rest\ 5815}#)))
                (#{mod\ 5823}#
                  (cons 'hygiene
                        (module-name (current-module)))))
            (with-fluids
              ((#{*mode*\ 2215}# #{m\ 5821}#))
              (#{chi-top\ 2436}#
                #{x\ 5814}#
                '()
                '((top))
                #{m\ 5821}#
                #{esew\ 5822}#
                #{mod\ 5823}#)))))
      (set! identifier?
        (lambda (#{x\ 5830}#)
          (#{nonsymbol-id?\ 2351}# #{x\ 5830}#)))
      (set! datum->syntax
        (lambda (#{id\ 5832}# #{datum\ 5833}#)
          (#{make-syntax-object\ 2315}#
            #{datum\ 5833}#
            (#{syntax-object-wrap\ 2321}# #{id\ 5832}#)
            #f)))
      (set! syntax->datum
        (lambda (#{x\ 5836}#)
          (#{strip\ 2464}# #{x\ 5836}# (quote (())))))
      (set! generate-temporaries
        (lambda (#{ls\ 5839}#)
          (begin
            (let ((#{x\ 5843}# #{ls\ 5839}#))
              (if (not (list? #{x\ 5843}#))
                (syntax-violation
                  'generate-temporaries
                  "invalid argument"
                  #{x\ 5843}#)))
            (map (lambda (#{x\ 5844}#)
                   (#{wrap\ 2422}# (gensym) (quote ((top))) #f))
                 #{ls\ 5839}#))))
      (set! free-identifier=?
        (lambda (#{x\ 5848}# #{y\ 5849}#)
          (begin
            (let ((#{x\ 5854}# #{x\ 5848}#))
              (if (not (#{nonsymbol-id?\ 2351}# #{x\ 5854}#))
                (syntax-violation
                  'free-identifier=?
                  "invalid argument"
                  #{x\ 5854}#)))
            (let ((#{x\ 5857}# #{y\ 5849}#))
              (if (not (#{nonsymbol-id?\ 2351}# #{x\ 5857}#))
                (syntax-violation
                  'free-identifier=?
                  "invalid argument"
                  #{x\ 5857}#)))
            (#{free-id=?\ 2412}# #{x\ 5848}# #{y\ 5849}#))))
      (set! bound-identifier=?
        (lambda (#{x\ 5858}# #{y\ 5859}#)
          (begin
            (let ((#{x\ 5864}# #{x\ 5858}#))
              (if (not (#{nonsymbol-id?\ 2351}# #{x\ 5864}#))
                (syntax-violation
                  'bound-identifier=?
                  "invalid argument"
                  #{x\ 5864}#)))
            (let ((#{x\ 5867}# #{y\ 5859}#))
              (if (not (#{nonsymbol-id?\ 2351}# #{x\ 5867}#))
                (syntax-violation
                  'bound-identifier=?
                  "invalid argument"
                  #{x\ 5867}#)))
            (#{bound-id=?\ 2414}# #{x\ 5858}# #{y\ 5859}#))))
      (set! syntax-violation
        (lambda (#{who\ 5868}#
                 #{message\ 5869}#
                 #{form\ 5870}#
                 .
                 #{subform\ 5871}#)
          (begin
            (let ((#{x\ 5878}# #{who\ 5868}#))
              (if (not ((lambda (#{x\ 5879}#)
                          (let ((#{t\ 5883}# (not #{x\ 5879}#)))
                            (if #{t\ 5883}#
                              #{t\ 5883}#
                              (let ((#{t\ 5886}# (string? #{x\ 5879}#)))
                                (if #{t\ 5886}#
                                  #{t\ 5886}#
                                  (symbol? #{x\ 5879}#))))))
                        #{x\ 5878}#))
                (syntax-violation
                  'syntax-violation
                  "invalid argument"
                  #{x\ 5878}#)))
            (let ((#{x\ 5890}# #{message\ 5869}#))
              (if (not (string? #{x\ 5890}#))
                (syntax-violation
                  'syntax-violation
                  "invalid argument"
                  #{x\ 5890}#)))
            (scm-error
              'syntax-error
              'macroexpand
              (string-append
                (if #{who\ 5868}# "~a: " "")
                "~a "
                (if (null? #{subform\ 5871}#)
                  "in ~a"
                  "in subform `~s' of `~s'"))
              (let ((#{tail\ 5892}#
                      (cons #{message\ 5869}#
                            (map (lambda (#{x\ 5893}#)
                                   (#{strip\ 2464}# #{x\ 5893}# (quote (()))))
                                 (append
                                   #{subform\ 5871}#
                                   (list #{form\ 5870}#))))))
                (if #{who\ 5868}#
                  (cons #{who\ 5868}# #{tail\ 5892}#)
                  #{tail\ 5892}#))
              #f))))
      (letrec ((#{match\ 5909}#
                 (lambda (#{e\ 5910}#
                          #{p\ 5911}#
                          #{w\ 5912}#
                          #{r\ 5913}#
                          #{mod\ 5914}#)
                   (if (not #{r\ 5913}#)
                     #f
                     (if (eq? #{p\ 5911}# (quote any))
                       (cons (#{wrap\ 2422}#
                               #{e\ 5910}#
                               #{w\ 5912}#
                               #{mod\ 5914}#)
                             #{r\ 5913}#)
                       (if (#{syntax-object?\ 2317}# #{e\ 5910}#)
                         (#{match*\ 5907}#
                           (#{syntax-object-expression\ 2319}# #{e\ 5910}#)
                           #{p\ 5911}#
                           (#{join-wraps\ 2404}#
                             #{w\ 5912}#
                             (#{syntax-object-wrap\ 2321}# #{e\ 5910}#))
                           #{r\ 5913}#
                           (#{syntax-object-module\ 2323}# #{e\ 5910}#))
                         (#{match*\ 5907}#
                           #{e\ 5910}#
                           #{p\ 5911}#
                           #{w\ 5912}#
                           #{r\ 5913}#
                           #{mod\ 5914}#))))))
               (#{match*\ 5907}#
                 (lambda (#{e\ 5927}#
                          #{p\ 5928}#
                          #{w\ 5929}#
                          #{r\ 5930}#
                          #{mod\ 5931}#)
                   (if (null? #{p\ 5928}#)
                     (if (null? #{e\ 5927}#) #{r\ 5930}# #f)
                     (if (pair? #{p\ 5928}#)
                       (if (pair? #{e\ 5927}#)
                         (#{match\ 5909}#
                           (car #{e\ 5927}#)
                           (car #{p\ 5928}#)
                           #{w\ 5929}#
                           (#{match\ 5909}#
                             (cdr #{e\ 5927}#)
                             (cdr #{p\ 5928}#)
                             #{w\ 5929}#
                             #{r\ 5930}#
                             #{mod\ 5931}#)
                           #{mod\ 5931}#)
                         #f)
                       (if (eq? #{p\ 5928}# (quote each-any))
                         (let ((#{l\ 5948}#
                                 (#{match-each-any\ 5901}#
                                   #{e\ 5927}#
                                   #{w\ 5929}#
                                   #{mod\ 5931}#)))
                           (if #{l\ 5948}#
                             (cons #{l\ 5948}# #{r\ 5930}#)
                             #f))
                         (let ((#{atom-key\ 5954}# (vector-ref #{p\ 5928}# 0)))
                           (if (memv #{atom-key\ 5954}# (quote (each)))
                             (if (null? #{e\ 5927}#)
                               (#{match-empty\ 5903}#
                                 (vector-ref #{p\ 5928}# 1)
                                 #{r\ 5930}#)
                               (let ((#{l\ 5957}#
                                       (#{match-each\ 5897}#
                                         #{e\ 5927}#
                                         (vector-ref #{p\ 5928}# 1)
                                         #{w\ 5929}#
                                         #{mod\ 5931}#)))
                                 (if #{l\ 5957}#
                                   (letrec ((#{collect\ 5962}#
                                              (lambda (#{l\ 5963}#)
                                                (if (null? (car #{l\ 5963}#))
                                                  #{r\ 5930}#
                                                  (cons (map car #{l\ 5963}#)
                                                        (#{collect\ 5962}#
                                                          (map cdr
                                                               #{l\ 5963}#)))))))
                                     (#{collect\ 5962}# #{l\ 5957}#))
                                   #f)))
                             (if (memv #{atom-key\ 5954}# (quote (each+)))
                               (call-with-values
                                 (lambda ()
                                   (#{match-each+\ 5899}#
                                     #{e\ 5927}#
                                     (vector-ref #{p\ 5928}# 1)
                                     (vector-ref #{p\ 5928}# 2)
                                     (vector-ref #{p\ 5928}# 3)
                                     #{w\ 5929}#
                                     #{r\ 5930}#
                                     #{mod\ 5931}#))
                                 (lambda (#{xr*\ 5965}#
                                          #{y-pat\ 5966}#
                                          #{r\ 5967}#)
                                   (if #{r\ 5967}#
                                     (if (null? #{y-pat\ 5966}#)
                                       (if (null? #{xr*\ 5965}#)
                                         (#{match-empty\ 5903}#
                                           (vector-ref #{p\ 5928}# 1)
                                           #{r\ 5967}#)
                                         (#{combine\ 5905}#
                                           #{xr*\ 5965}#
                                           #{r\ 5967}#))
                                       #f)
                                     #f)))
                               (if (memv #{atom-key\ 5954}# (quote (free-id)))
                                 (if (#{id?\ 2353}# #{e\ 5927}#)
                                   (if (#{free-id=?\ 2412}#
                                         (#{wrap\ 2422}#
                                           #{e\ 5927}#
                                           #{w\ 5929}#
                                           #{mod\ 5931}#)
                                         (vector-ref #{p\ 5928}# 1))
                                     #{r\ 5930}#
                                     #f)
                                   #f)
                                 (if (memv #{atom-key\ 5954}# (quote (atom)))
                                   (if (equal?
                                         (vector-ref #{p\ 5928}# 1)
                                         (#{strip\ 2464}#
                                           #{e\ 5927}#
                                           #{w\ 5929}#))
                                     #{r\ 5930}#
                                     #f)
                                   (if (memv #{atom-key\ 5954}#
                                             '(vector))
                                     (if (vector? #{e\ 5927}#)
                                       (#{match\ 5909}#
                                         (vector->list #{e\ 5927}#)
                                         (vector-ref #{p\ 5928}# 1)
                                         #{w\ 5929}#
                                         #{r\ 5930}#
                                         #{mod\ 5931}#)
                                       #f))))))))))))
               (#{combine\ 5905}#
                 (lambda (#{r*\ 5984}# #{r\ 5985}#)
                   (if (null? (car #{r*\ 5984}#))
                     #{r\ 5985}#
                     (cons (map car #{r*\ 5984}#)
                           (#{combine\ 5905}#
                             (map cdr #{r*\ 5984}#)
                             #{r\ 5985}#)))))
               (#{match-empty\ 5903}#
                 (lambda (#{p\ 5988}# #{r\ 5989}#)
                   (if (null? #{p\ 5988}#)
                     #{r\ 5989}#
                     (if (eq? #{p\ 5988}# (quote any))
                       (cons (quote ()) #{r\ 5989}#)
                       (if (pair? #{p\ 5988}#)
                         (#{match-empty\ 5903}#
                           (car #{p\ 5988}#)
                           (#{match-empty\ 5903}#
                             (cdr #{p\ 5988}#)
                             #{r\ 5989}#))
                         (if (eq? #{p\ 5988}# (quote each-any))
                           (cons (quote ()) #{r\ 5989}#)
                           (let ((#{atom-key\ 6003}#
                                   (vector-ref #{p\ 5988}# 0)))
                             (if (memv #{atom-key\ 6003}# (quote (each)))
                               (#{match-empty\ 5903}#
                                 (vector-ref #{p\ 5988}# 1)
                                 #{r\ 5989}#)
                               (if (memv #{atom-key\ 6003}# (quote (each+)))
                                 (#{match-empty\ 5903}#
                                   (vector-ref #{p\ 5988}# 1)
                                   (#{match-empty\ 5903}#
                                     (reverse (vector-ref #{p\ 5988}# 2))
                                     (#{match-empty\ 5903}#
                                       (vector-ref #{p\ 5988}# 3)
                                       #{r\ 5989}#)))
                                 (if (memv #{atom-key\ 6003}#
                                           '(free-id atom))
                                   #{r\ 5989}#
                                   (if (memv #{atom-key\ 6003}#
                                             '(vector))
                                     (#{match-empty\ 5903}#
                                       (vector-ref #{p\ 5988}# 1)
                                       #{r\ 5989}#))))))))))))
               (#{match-each-any\ 5901}#
                 (lambda (#{e\ 6008}# #{w\ 6009}# #{mod\ 6010}#)
                   (if (pair? #{e\ 6008}#)
                     (let ((#{l\ 6017}#
                             (#{match-each-any\ 5901}#
                               (cdr #{e\ 6008}#)
                               #{w\ 6009}#
                               #{mod\ 6010}#)))
                       (if #{l\ 6017}#
                         (cons (#{wrap\ 2422}#
                                 (car #{e\ 6008}#)
                                 #{w\ 6009}#
                                 #{mod\ 6010}#)
                               #{l\ 6017}#)
                         #f))
                     (if (null? #{e\ 6008}#)
                       '()
                       (if (#{syntax-object?\ 2317}# #{e\ 6008}#)
                         (#{match-each-any\ 5901}#
                           (#{syntax-object-expression\ 2319}# #{e\ 6008}#)
                           (#{join-wraps\ 2404}#
                             #{w\ 6009}#
                             (#{syntax-object-wrap\ 2321}# #{e\ 6008}#))
                           #{mod\ 6010}#)
                         #f)))))
               (#{match-each+\ 5899}#
                 (lambda (#{e\ 6025}#
                          #{x-pat\ 6026}#
                          #{y-pat\ 6027}#
                          #{z-pat\ 6028}#
                          #{w\ 6029}#
                          #{r\ 6030}#
                          #{mod\ 6031}#)
                   (letrec ((#{f\ 6042}#
                              (lambda (#{e\ 6043}# #{w\ 6044}#)
                                (if (pair? #{e\ 6043}#)
                                  (call-with-values
                                    (lambda ()
                                      (#{f\ 6042}#
                                        (cdr #{e\ 6043}#)
                                        #{w\ 6044}#))
                                    (lambda (#{xr*\ 6047}#
                                             #{y-pat\ 6048}#
                                             #{r\ 6049}#)
                                      (if #{r\ 6049}#
                                        (if (null? #{y-pat\ 6048}#)
                                          (let ((#{xr\ 6054}#
                                                  (#{match\ 5909}#
                                                    (car #{e\ 6043}#)
                                                    #{x-pat\ 6026}#
                                                    #{w\ 6044}#
                                                    '()
                                                    #{mod\ 6031}#)))
                                            (if #{xr\ 6054}#
                                              (values
                                                (cons #{xr\ 6054}#
                                                      #{xr*\ 6047}#)
                                                #{y-pat\ 6048}#
                                                #{r\ 6049}#)
                                              (values #f #f #f)))
                                          (values
                                            '()
                                            (cdr #{y-pat\ 6048}#)
                                            (#{match\ 5909}#
                                              (car #{e\ 6043}#)
                                              (car #{y-pat\ 6048}#)
                                              #{w\ 6044}#
                                              #{r\ 6049}#
                                              #{mod\ 6031}#)))
                                        (values #f #f #f))))
                                  (if (#{syntax-object?\ 2317}# #{e\ 6043}#)
                                    (#{f\ 6042}#
                                      (#{syntax-object-expression\ 2319}#
                                        #{e\ 6043}#)
                                      (#{join-wraps\ 2404}#
                                        #{w\ 6044}#
                                        #{e\ 6043}#))
                                    (values
                                      '()
                                      #{y-pat\ 6027}#
                                      (#{match\ 5909}#
                                        #{e\ 6043}#
                                        #{z-pat\ 6028}#
                                        #{w\ 6044}#
                                        #{r\ 6030}#
                                        #{mod\ 6031}#)))))))
                     (#{f\ 6042}# #{e\ 6025}# #{w\ 6029}#))))
               (#{match-each\ 5897}#
                 (lambda (#{e\ 6058}#
                          #{p\ 6059}#
                          #{w\ 6060}#
                          #{mod\ 6061}#)
                   (if (pair? #{e\ 6058}#)
                     (let ((#{first\ 6069}#
                             (#{match\ 5909}#
                               (car #{e\ 6058}#)
                               #{p\ 6059}#
                               #{w\ 6060}#
                               '()
                               #{mod\ 6061}#)))
                       (if #{first\ 6069}#
                         (let ((#{rest\ 6073}#
                                 (#{match-each\ 5897}#
                                   (cdr #{e\ 6058}#)
                                   #{p\ 6059}#
                                   #{w\ 6060}#
                                   #{mod\ 6061}#)))
                           (if #{rest\ 6073}#
                             (cons #{first\ 6069}# #{rest\ 6073}#)
                             #f))
                         #f))
                     (if (null? #{e\ 6058}#)
                       '()
                       (if (#{syntax-object?\ 2317}# #{e\ 6058}#)
                         (#{match-each\ 5897}#
                           (#{syntax-object-expression\ 2319}# #{e\ 6058}#)
                           #{p\ 6059}#
                           (#{join-wraps\ 2404}#
                             #{w\ 6060}#
                             (#{syntax-object-wrap\ 2321}# #{e\ 6058}#))
                           (#{syntax-object-module\ 2323}# #{e\ 6058}#))
                         #f))))))
        (set! $sc-dispatch
          (lambda (#{e\ 6081}# #{p\ 6082}#)
            (if (eq? #{p\ 6082}# (quote any))
              (list #{e\ 6081}#)
              (if (#{syntax-object?\ 2317}# #{e\ 6081}#)
                (#{match*\ 5907}#
                  (#{syntax-object-expression\ 2319}# #{e\ 6081}#)
                  #{p\ 6082}#
                  (#{syntax-object-wrap\ 2321}# #{e\ 6081}#)
                  '()
                  (#{syntax-object-module\ 2323}# #{e\ 6081}#))
                (#{match*\ 5907}#
                  #{e\ 6081}#
                  #{p\ 6082}#
                  '(())
                  '()
                  #f)))))))))

(define with-syntax
  (make-syntax-transformer
    'with-syntax
    'macro
    (cons (lambda (#{x\ 6091}#)
            ((lambda (#{tmp\ 6093}#)
               ((lambda (#{tmp\ 6094}#)
                  (if #{tmp\ 6094}#
                    (apply (lambda (#{_\ 6098}# #{e1\ 6099}# #{e2\ 6100}#)
                             (cons '#(syntax-object
                                      begin
                                      ((top)
                                       #(ribcage
                                         #(_ e1 e2)
                                         #((top) (top) (top))
                                         #("i6095" "i6096" "i6097"))
                                       #(ribcage () () ())
                                       #(ribcage #(x) #((top)) #("i6092")))
                                      (hygiene guile))
                                   (cons #{e1\ 6099}# #{e2\ 6100}#)))
                           #{tmp\ 6094}#)
                    ((lambda (#{tmp\ 6102}#)
                       (if #{tmp\ 6102}#
                         (apply (lambda (#{_\ 6108}#
                                         #{out\ 6109}#
                                         #{in\ 6110}#
                                         #{e1\ 6111}#
                                         #{e2\ 6112}#)
                                  (list '#(syntax-object
                                           syntax-case
                                           ((top)
                                            #(ribcage
                                              #(_ out in e1 e2)
                                              #((top) (top) (top) (top) (top))
                                              #("i6103"
                                                "i6104"
                                                "i6105"
                                                "i6106"
                                                "i6107"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(x)
                                              #((top))
                                              #("i6092")))
                                           (hygiene guile))
                                        #{in\ 6110}#
                                        '()
                                        (list #{out\ 6109}#
                                              (cons '#(syntax-object
                                                       begin
                                                       ((top)
                                                        #(ribcage
                                                          #(_ out in e1 e2)
                                                          #((top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top))
                                                          #("i6103"
                                                            "i6104"
                                                            "i6105"
                                                            "i6106"
                                                            "i6107"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(x)
                                                          #((top))
                                                          #("i6092")))
                                                       (hygiene guile))
                                                    (cons #{e1\ 6111}#
                                                          #{e2\ 6112}#)))))
                                #{tmp\ 6102}#)
                         ((lambda (#{tmp\ 6114}#)
                            (if #{tmp\ 6114}#
                              (apply (lambda (#{_\ 6120}#
                                              #{out\ 6121}#
                                              #{in\ 6122}#
                                              #{e1\ 6123}#
                                              #{e2\ 6124}#)
                                       (list '#(syntax-object
                                                syntax-case
                                                ((top)
                                                 #(ribcage
                                                   #(_ out in e1 e2)
                                                   #((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                   #("i6115"
                                                     "i6116"
                                                     "i6117"
                                                     "i6118"
                                                     "i6119"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("i6092")))
                                                (hygiene guile))
                                             (cons '#(syntax-object
                                                      list
                                                      ((top)
                                                       #(ribcage
                                                         #(_ out in e1 e2)
                                                         #((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                         #("i6115"
                                                           "i6116"
                                                           "i6117"
                                                           "i6118"
                                                           "i6119"))
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i6092")))
                                                      (hygiene guile))
                                                   #{in\ 6122}#)
                                             '()
                                             (list #{out\ 6121}#
                                                   (cons '#(syntax-object
                                                            begin
                                                            ((top)
                                                             #(ribcage
                                                               #(_
                                                                 out
                                                                 in
                                                                 e1
                                                                 e2)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i6115"
                                                                 "i6116"
                                                                 "i6117"
                                                                 "i6118"
                                                                 "i6119"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("i6092")))
                                                            (hygiene guile))
                                                         (cons #{e1\ 6123}#
                                                               #{e2\ 6124}#)))))
                                     #{tmp\ 6114}#)
                              (syntax-violation
                                #f
                                "source expression failed to match any pattern"
                                #{tmp\ 6093}#)))
                          ($sc-dispatch
                            #{tmp\ 6093}#
                            '(any #(each (any any)) any . each-any)))))
                     ($sc-dispatch
                       #{tmp\ 6093}#
                       '(any ((any any)) any . each-any)))))
                ($sc-dispatch
                  #{tmp\ 6093}#
                  '(any () any . each-any))))
             #{x\ 6091}#))
          (module-name (current-module)))))

(define syntax-rules
  (make-syntax-transformer
    'syntax-rules
    'macro
    (cons (lambda (#{x\ 6128}#)
            ((lambda (#{tmp\ 6130}#)
               ((lambda (#{tmp\ 6131}#)
                  (if #{tmp\ 6131}#
                    (apply (lambda (#{_\ 6137}#
                                    #{k\ 6138}#
                                    #{keyword\ 6139}#
                                    #{pattern\ 6140}#
                                    #{template\ 6141}#)
                             (list '#(syntax-object
                                      lambda
                                      ((top)
                                       #(ribcage
                                         #(_ k keyword pattern template)
                                         #((top) (top) (top) (top) (top))
                                         #("i6132"
                                           "i6133"
                                           "i6134"
                                           "i6135"
                                           "i6136"))
                                       #(ribcage () () ())
                                       #(ribcage #(x) #((top)) #("i6129")))
                                      (hygiene guile))
                                   '(#(syntax-object
                                       x
                                       ((top)
                                        #(ribcage
                                          #(_ k keyword pattern template)
                                          #((top) (top) (top) (top) (top))
                                          #("i6132"
                                            "i6133"
                                            "i6134"
                                            "i6135"
                                            "i6136"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i6129")))
                                       (hygiene guile)))
                                   (vector
                                     '(#(syntax-object
                                         macro-type
                                         ((top)
                                          #(ribcage
                                            #(_ k keyword pattern template)
                                            #((top) (top) (top) (top) (top))
                                            #("i6132"
                                              "i6133"
                                              "i6134"
                                              "i6135"
                                              "i6136"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i6129")))
                                         (hygiene guile))
                                       .
                                       #(syntax-object
                                         syntax-rules
                                         ((top)
                                          #(ribcage
                                            #(_ k keyword pattern template)
                                            #((top) (top) (top) (top) (top))
                                            #("i6132"
                                              "i6133"
                                              "i6134"
                                              "i6135"
                                              "i6136"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i6129")))
                                         (hygiene guile)))
                                     (cons '#(syntax-object
                                              patterns
                                              ((top)
                                               #(ribcage
                                                 #(_
                                                   k
                                                   keyword
                                                   pattern
                                                   template)
                                                 #((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                 #("i6132"
                                                   "i6133"
                                                   "i6134"
                                                   "i6135"
                                                   "i6136"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x)
                                                 #((top))
                                                 #("i6129")))
                                              (hygiene guile))
                                           #{pattern\ 6140}#))
                                   (cons '#(syntax-object
                                            syntax-case
                                            ((top)
                                             #(ribcage
                                               #(_ k keyword pattern template)
                                               #((top) (top) (top) (top) (top))
                                               #("i6132"
                                                 "i6133"
                                                 "i6134"
                                                 "i6135"
                                                 "i6136"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x)
                                               #((top))
                                               #("i6129")))
                                            (hygiene guile))
                                         (cons '#(syntax-object
                                                  x
                                                  ((top)
                                                   #(ribcage
                                                     #(_
                                                       k
                                                       keyword
                                                       pattern
                                                       template)
                                                     #((top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top))
                                                     #("i6132"
                                                       "i6133"
                                                       "i6134"
                                                       "i6135"
                                                       "i6136"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i6129")))
                                                  (hygiene guile))
                                               (cons #{k\ 6138}#
                                                     (map (lambda (#{tmp\ 6145}#
                                                                   #{tmp\ 6144}#)
                                                            (list (cons '#(syntax-object
                                                                           dummy
                                                                           ((top)
                                                                            #(ribcage
                                                                              #(_
                                                                                k
                                                                                keyword
                                                                                pattern
                                                                                template)
                                                                              #((top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top))
                                                                              #("i6132"
                                                                                "i6133"
                                                                                "i6134"
                                                                                "i6135"
                                                                                "i6136"))
                                                                            #(ribcage
                                                                              ()
                                                                              ()
                                                                              ())
                                                                            #(ribcage
                                                                              #(x)
                                                                              #((top))
                                                                              #("i6129")))
                                                                           (hygiene
                                                                             guile))
                                                                        #{tmp\ 6144}#)
                                                                  (list '#(syntax-object
                                                                           syntax
                                                                           ((top)
                                                                            #(ribcage
                                                                              #(_
                                                                                k
                                                                                keyword
                                                                                pattern
                                                                                template)
                                                                              #((top)
                                                                                (top)
                                                                                (top)
                                                                                (top)
                                                                                (top))
                                                                              #("i6132"
                                                                                "i6133"
                                                                                "i6134"
                                                                                "i6135"
                                                                                "i6136"))
                                                                            #(ribcage
                                                                              ()
                                                                              ()
                                                                              ())
                                                                            #(ribcage
                                                                              #(x)
                                                                              #((top))
                                                                              #("i6129")))
                                                                           (hygiene
                                                                             guile))
                                                                        #{tmp\ 6145}#)))
                                                          #{template\ 6141}#
                                                          #{pattern\ 6140}#))))))
                           #{tmp\ 6131}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp\ 6130}#)))
                ($sc-dispatch
                  #{tmp\ 6130}#
                  '(any each-any . #(each ((any . any) any))))))
             #{x\ 6128}#))
          (module-name (current-module)))))

(define let*
  (make-syntax-transformer
    'let*
    'macro
    (cons (lambda (#{x\ 6146}#)
            ((lambda (#{tmp\ 6148}#)
               ((lambda (#{tmp\ 6149}#)
                  (if (if #{tmp\ 6149}#
                        (apply (lambda (#{let*\ 6155}#
                                        #{x\ 6156}#
                                        #{v\ 6157}#
                                        #{e1\ 6158}#
                                        #{e2\ 6159}#)
                                 (and-map identifier? #{x\ 6156}#))
                               #{tmp\ 6149}#)
                        #f)
                    (apply (lambda (#{let*\ 6166}#
                                    #{x\ 6167}#
                                    #{v\ 6168}#
                                    #{e1\ 6169}#
                                    #{e2\ 6170}#)
                             (letrec ((#{f\ 6173}#
                                        (lambda (#{bindings\ 6174}#)
                                          (if (null? #{bindings\ 6174}#)
                                            (cons '#(syntax-object
                                                     let
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(f bindings)
                                                        #((top) (top))
                                                        #("i6171" "i6172"))
                                                      #(ribcage
                                                        #(let* x v e1 e2)
                                                        #((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                        #("i6161"
                                                          "i6162"
                                                          "i6163"
                                                          "i6164"
                                                          "i6165"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(x)
                                                        #((top))
                                                        #("i6147")))
                                                     (hygiene guile))
                                                  (cons '()
                                                        (cons #{e1\ 6169}#
                                                              #{e2\ 6170}#)))
                                            ((lambda (#{tmp\ 6179}#)
                                               ((lambda (#{tmp\ 6180}#)
                                                  (if #{tmp\ 6180}#
                                                    (apply (lambda (#{body\ 6183}#
                                                                    #{binding\ 6184}#)
                                                             (list '#(syntax-object
                                                                      let
                                                                      ((top)
                                                                       #(ribcage
                                                                         #(body
                                                                           binding)
                                                                         #((top)
                                                                           (top))
                                                                         #("i6181"
                                                                           "i6182"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(f
                                                                           bindings)
                                                                         #((top)
                                                                           (top))
                                                                         #("i6171"
                                                                           "i6172"))
                                                                       #(ribcage
                                                                         #(let*
                                                                           x
                                                                           v
                                                                           e1
                                                                           e2)
                                                                         #((top)
                                                                           (top)
                                                                           (top)
                                                                           (top)
                                                                           (top))
                                                                         #("i6161"
                                                                           "i6162"
                                                                           "i6163"
                                                                           "i6164"
                                                                           "i6165"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(x)
                                                                         #((top))
                                                                         #("i6147")))
                                                                      (hygiene
                                                                        guile))
                                                                   (list #{binding\ 6184}#)
                                                                   #{body\ 6183}#))
                                                           #{tmp\ 6180}#)
                                                    (syntax-violation
                                                      #f
                                                      "source expression failed to match any pattern"
                                                      #{tmp\ 6179}#)))
                                                ($sc-dispatch
                                                  #{tmp\ 6179}#
                                                  '(any any))))
                                             (list (#{f\ 6173}#
                                                     (cdr #{bindings\ 6174}#))
                                                   (car #{bindings\ 6174}#)))))))
                               (#{f\ 6173}#
                                 (map list #{x\ 6167}# #{v\ 6168}#))))
                           #{tmp\ 6149}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp\ 6148}#)))
                ($sc-dispatch
                  #{tmp\ 6148}#
                  '(any #(each (any any)) any . each-any))))
             #{x\ 6146}#))
          (module-name (current-module)))))

(define do
  (make-syntax-transformer
    'do
    'macro
    (cons (lambda (#{orig-x\ 6185}#)
            ((lambda (#{tmp\ 6187}#)
               ((lambda (#{tmp\ 6188}#)
                  (if #{tmp\ 6188}#
                    (apply (lambda (#{_\ 6196}#
                                    #{var\ 6197}#
                                    #{init\ 6198}#
                                    #{step\ 6199}#
                                    #{e0\ 6200}#
                                    #{e1\ 6201}#
                                    #{c\ 6202}#)
                             ((lambda (#{tmp\ 6204}#)
                                ((lambda (#{tmp\ 6205}#)
                                   (if #{tmp\ 6205}#
                                     (apply (lambda (#{step\ 6207}#)
                                              ((lambda (#{tmp\ 6208}#)
                                                 ((lambda (#{tmp\ 6209}#)
                                                    (if #{tmp\ 6209}#
                                                      (apply (lambda ()
                                                               (list '#(syntax-object
                                                                        let
                                                                        ((top)
                                                                         #(ribcage
                                                                           #(step)
                                                                           #((top))
                                                                           #("i6206"))
                                                                         #(ribcage
                                                                           #(_
                                                                             var
                                                                             init
                                                                             step
                                                                             e0
                                                                             e1
                                                                             c)
                                                                           #((top)
                                                                             (top)
                                                                             (top)
                                                                             (top)
                                                                             (top)
                                                                             (top)
                                                                             (top))
                                                                           #("i6189"
                                                                             "i6190"
                                                                             "i6191"
                                                                             "i6192"
                                                                             "i6193"
                                                                             "i6194"
                                                                             "i6195"))
                                                                         #(ribcage
                                                                           ()
                                                                           ()
                                                                           ())
                                                                         #(ribcage
                                                                           #(orig-x)
                                                                           #((top))
                                                                           #("i6186")))
                                                                        (hygiene
                                                                          guile))
                                                                     '#(syntax-object
                                                                        doloop
                                                                        ((top)
                                                                         #(ribcage
                                                                           #(step)
                                                                           #((top))
                                                                           #("i6206"))
                                                                         #(ribcage
                                                                           #(_
                                                                             var
                                                                             init
                                                                             step
                                                                             e0
                                                                             e1
                                                                             c)
                                                                           #((top)
                                                                             (top)
                                                                             (top)
                                                                             (top)
                                                                             (top)
                                                                             (top)
                                                                             (top))
                                                                           #("i6189"
                                                                             "i6190"
                                                                             "i6191"
                                                                             "i6192"
                                                                             "i6193"
                                                                             "i6194"
                                                                             "i6195"))
                                                                         #(ribcage
                                                                           ()
                                                                           ()
                                                                           ())
                                                                         #(ribcage
                                                                           #(orig-x)
                                                                           #((top))
                                                                           #("i6186")))
                                                                        (hygiene
                                                                          guile))
                                                                     (map list
                                                                          #{var\ 6197}#
                                                                          #{init\ 6198}#)
                                                                     (list '#(syntax-object
                                                                              if
                                                                              ((top)
                                                                               #(ribcage
                                                                                 #(step)
                                                                                 #((top))
                                                                                 #("i6206"))
                                                                               #(ribcage
                                                                                 #(_
                                                                                   var
                                                                                   init
                                                                                   step
                                                                                   e0
                                                                                   e1
                                                                                   c)
                                                                                 #((top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top)
                                                                                   (top))
                                                                                 #("i6189"
                                                                                   "i6190"
                                                                                   "i6191"
                                                                                   "i6192"
                                                                                   "i6193"
                                                                                   "i6194"
                                                                                   "i6195"))
                                                                               #(ribcage
                                                                                 ()
                                                                                 ()
                                                                                 ())
                                                                               #(ribcage
                                                                                 #(orig-x)
                                                                                 #((top))
                                                                                 #("i6186")))
                                                                              (hygiene
                                                                                guile))
                                                                           (list '#(syntax-object
                                                                                    not
                                                                                    ((top)
                                                                                     #(ribcage
                                                                                       #(step)
                                                                                       #((top))
                                                                                       #("i6206"))
                                                                                     #(ribcage
                                                                                       #(_
                                                                                         var
                                                                                         init
                                                                                         step
                                                                                         e0
                                                                                         e1
                                                                                         c)
                                                                                       #((top)
                                                                                         (top)
                                                                                         (top)
                                                                                         (top)
                                                                                         (top)
                                                                                         (top)
                                                                                         (top))
                                                                                       #("i6189"
                                                                                         "i6190"
                                                                                         "i6191"
                                                                                         "i6192"
                                                                                         "i6193"
                                                                                         "i6194"
                                                                                         "i6195"))
                                                                                     #(ribcage
                                                                                       ()
                                                                                       ()
                                                                                       ())
                                                                                     #(ribcage
                                                                                       #(orig-x)
                                                                                       #((top))
                                                                                       #("i6186")))
                                                                                    (hygiene
                                                                                      guile))
                                                                                 #{e0\ 6200}#)
                                                                           (cons '#(syntax-object
                                                                                    begin
                                                                                    ((top)
                                                                                     #(ribcage
                                                                                       #(step)
                                                                                       #((top))
                                                                                       #("i6206"))
                                                                                     #(ribcage
                                                                                       #(_
                                                                                         var
                                                                                         init
                                                                                         step
                                                                                         e0
                                                                                         e1
                                                                                         c)
                                                                                       #((top)
                                                                                         (top)
                                                                                         (top)
                                                                                         (top)
                                                                                         (top)
                                                                                         (top)
                                                                                         (top))
                                                                                       #("i6189"
                                                                                         "i6190"
                                                                                         "i6191"
                                                                                         "i6192"
                                                                                         "i6193"
                                                                                         "i6194"
                                                                                         "i6195"))
                                                                                     #(ribcage
                                                                                       ()
                                                                                       ()
                                                                                       ())
                                                                                     #(ribcage
                                                                                       #(orig-x)
                                                                                       #((top))
                                                                                       #("i6186")))
                                                                                    (hygiene
                                                                                      guile))
                                                                                 (append
                                                                                   #{c\ 6202}#
                                                                                   (list (cons '#(syntax-object
                                                                                                  doloop
                                                                                                  ((top)
                                                                                                   #(ribcage
                                                                                                     #(step)
                                                                                                     #((top))
                                                                                                     #("i6206"))
                                                                                                   #(ribcage
                                                                                                     #(_
                                                                                                       var
                                                                                                       init
                                                                                                       step
                                                                                                       e0
                                                                                                       e1
                                                                                                       c)
                                                                                                     #((top)
                                                                                                       (top)
                                                                                                       (top)
                                                                                                       (top)
                                                                                                       (top)
                                                                                                       (top)
                                                                                                       (top))
                                                                                                     #("i6189"
                                                                                                       "i6190"
                                                                                                       "i6191"
                                                                                                       "i6192"
                                                                                                       "i6193"
                                                                                                       "i6194"
                                                                                                       "i6195"))
                                                                                                   #(ribcage
                                                                                                     ()
                                                                                                     ()
                                                                                                     ())
                                                                                                   #(ribcage
                                                                                                     #(orig-x)
                                                                                                     #((top))
                                                                                                     #("i6186")))
                                                                                                  (hygiene
                                                                                                    guile))
                                                                                               #{step\ 6207}#)))))))
                                                             #{tmp\ 6209}#)
                                                      ((lambda (#{tmp\ 6214}#)
                                                         (if #{tmp\ 6214}#
                                                           (apply (lambda (#{e1\ 6217}#
                                                                           #{e2\ 6218}#)
                                                                    (list '#(syntax-object
                                                                             let
                                                                             ((top)
                                                                              #(ribcage
                                                                                #(e1
                                                                                  e2)
                                                                                #((top)
                                                                                  (top))
                                                                                #("i6215"
                                                                                  "i6216"))
                                                                              #(ribcage
                                                                                #(step)
                                                                                #((top))
                                                                                #("i6206"))
                                                                              #(ribcage
                                                                                #(_
                                                                                  var
                                                                                  init
                                                                                  step
                                                                                  e0
                                                                                  e1
                                                                                  c)
                                                                                #((top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top))
                                                                                #("i6189"
                                                                                  "i6190"
                                                                                  "i6191"
                                                                                  "i6192"
                                                                                  "i6193"
                                                                                  "i6194"
                                                                                  "i6195"))
                                                                              #(ribcage
                                                                                ()
                                                                                ()
                                                                                ())
                                                                              #(ribcage
                                                                                #(orig-x)
                                                                                #((top))
                                                                                #("i6186")))
                                                                             (hygiene
                                                                               guile))
                                                                          '#(syntax-object
                                                                             doloop
                                                                             ((top)
                                                                              #(ribcage
                                                                                #(e1
                                                                                  e2)
                                                                                #((top)
                                                                                  (top))
                                                                                #("i6215"
                                                                                  "i6216"))
                                                                              #(ribcage
                                                                                #(step)
                                                                                #((top))
                                                                                #("i6206"))
                                                                              #(ribcage
                                                                                #(_
                                                                                  var
                                                                                  init
                                                                                  step
                                                                                  e0
                                                                                  e1
                                                                                  c)
                                                                                #((top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top))
                                                                                #("i6189"
                                                                                  "i6190"
                                                                                  "i6191"
                                                                                  "i6192"
                                                                                  "i6193"
                                                                                  "i6194"
                                                                                  "i6195"))
                                                                              #(ribcage
                                                                                ()
                                                                                ()
                                                                                ())
                                                                              #(ribcage
                                                                                #(orig-x)
                                                                                #((top))
                                                                                #("i6186")))
                                                                             (hygiene
                                                                               guile))
                                                                          (map list
                                                                               #{var\ 6197}#
                                                                               #{init\ 6198}#)
                                                                          (list '#(syntax-object
                                                                                   if
                                                                                   ((top)
                                                                                    #(ribcage
                                                                                      #(e1
                                                                                        e2)
                                                                                      #((top)
                                                                                        (top))
                                                                                      #("i6215"
                                                                                        "i6216"))
                                                                                    #(ribcage
                                                                                      #(step)
                                                                                      #((top))
                                                                                      #("i6206"))
                                                                                    #(ribcage
                                                                                      #(_
                                                                                        var
                                                                                        init
                                                                                        step
                                                                                        e0
                                                                                        e1
                                                                                        c)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i6189"
                                                                                        "i6190"
                                                                                        "i6191"
                                                                                        "i6192"
                                                                                        "i6193"
                                                                                        "i6194"
                                                                                        "i6195"))
                                                                                    #(ribcage
                                                                                      ()
                                                                                      ()
                                                                                      ())
                                                                                    #(ribcage
                                                                                      #(orig-x)
                                                                                      #((top))
                                                                                      #("i6186")))
                                                                                   (hygiene
                                                                                     guile))
                                                                                #{e0\ 6200}#
                                                                                (cons '#(syntax-object
                                                                                         begin
                                                                                         ((top)
                                                                                          #(ribcage
                                                                                            #(e1
                                                                                              e2)
                                                                                            #((top)
                                                                                              (top))
                                                                                            #("i6215"
                                                                                              "i6216"))
                                                                                          #(ribcage
                                                                                            #(step)
                                                                                            #((top))
                                                                                            #("i6206"))
                                                                                          #(ribcage
                                                                                            #(_
                                                                                              var
                                                                                              init
                                                                                              step
                                                                                              e0
                                                                                              e1
                                                                                              c)
                                                                                            #((top)
                                                                                              (top)
                                                                                              (top)
                                                                                              (top)
                                                                                              (top)
                                                                                              (top)
                                                                                              (top))
                                                                                            #("i6189"
                                                                                              "i6190"
                                                                                              "i6191"
                                                                                              "i6192"
                                                                                              "i6193"
                                                                                              "i6194"
                                                                                              "i6195"))
                                                                                          #(ribcage
                                                                                            ()
                                                                                            ()
                                                                                            ())
                                                                                          #(ribcage
                                                                                            #(orig-x)
                                                                                            #((top))
                                                                                            #("i6186")))
                                                                                         (hygiene
                                                                                           guile))
                                                                                      (cons #{e1\ 6217}#
                                                                                            #{e2\ 6218}#))
                                                                                (cons '#(syntax-object
                                                                                         begin
                                                                                         ((top)
                                                                                          #(ribcage
                                                                                            #(e1
                                                                                              e2)
                                                                                            #((top)
                                                                                              (top))
                                                                                            #("i6215"
                                                                                              "i6216"))
                                                                                          #(ribcage
                                                                                            #(step)
                                                                                            #((top))
                                                                                            #("i6206"))
                                                                                          #(ribcage
                                                                                            #(_
                                                                                              var
                                                                                              init
                                                                                              step
                                                                                              e0
                                                                                              e1
                                                                                              c)
                                                                                            #((top)
                                                                                              (top)
                                                                                              (top)
                                                                                              (top)
                                                                                              (top)
                                                                                              (top)
                                                                                              (top))
                                                                                            #("i6189"
                                                                                              "i6190"
                                                                                              "i6191"
                                                                                              "i6192"
                                                                                              "i6193"
                                                                                              "i6194"
                                                                                              "i6195"))
                                                                                          #(ribcage
                                                                                            ()
                                                                                            ()
                                                                                            ())
                                                                                          #(ribcage
                                                                                            #(orig-x)
                                                                                            #((top))
                                                                                            #("i6186")))
                                                                                         (hygiene
                                                                                           guile))
                                                                                      (append
                                                                                        #{c\ 6202}#
                                                                                        (list (cons '#(syntax-object
                                                                                                       doloop
                                                                                                       ((top)
                                                                                                        #(ribcage
                                                                                                          #(e1
                                                                                                            e2)
                                                                                                          #((top)
                                                                                                            (top))
                                                                                                          #("i6215"
                                                                                                            "i6216"))
                                                                                                        #(ribcage
                                                                                                          #(step)
                                                                                                          #((top))
                                                                                                          #("i6206"))
                                                                                                        #(ribcage
                                                                                                          #(_
                                                                                                            var
                                                                                                            init
                                                                                                            step
                                                                                                            e0
                                                                                                            e1
                                                                                                            c)
                                                                                                          #((top)
                                                                                                            (top)
                                                                                                            (top)
                                                                                                            (top)
                                                                                                            (top)
                                                                                                            (top)
                                                                                                            (top))
                                                                                                          #("i6189"
                                                                                                            "i6190"
                                                                                                            "i6191"
                                                                                                            "i6192"
                                                                                                            "i6193"
                                                                                                            "i6194"
                                                                                                            "i6195"))
                                                                                                        #(ribcage
                                                                                                          ()
                                                                                                          ()
                                                                                                          ())
                                                                                                        #(ribcage
                                                                                                          #(orig-x)
                                                                                                          #((top))
                                                                                                          #("i6186")))
                                                                                                       (hygiene
                                                                                                         guile))
                                                                                                    #{step\ 6207}#)))))))
                                                                  #{tmp\ 6214}#)
                                                           (syntax-violation
                                                             #f
                                                             "source expression failed to match any pattern"
                                                             #{tmp\ 6208}#)))
                                                       ($sc-dispatch
                                                         #{tmp\ 6208}#
                                                         '(any . each-any)))))
                                                  ($sc-dispatch
                                                    #{tmp\ 6208}#
                                                    '())))
                                               #{e1\ 6201}#))
                                            #{tmp\ 6205}#)
                                     (syntax-violation
                                       #f
                                       "source expression failed to match any pattern"
                                       #{tmp\ 6204}#)))
                                 ($sc-dispatch
                                   #{tmp\ 6204}#
                                   'each-any)))
                              (map (lambda (#{v\ 6225}# #{s\ 6226}#)
                                     ((lambda (#{tmp\ 6229}#)
                                        ((lambda (#{tmp\ 6230}#)
                                           (if #{tmp\ 6230}#
                                             (apply (lambda () #{v\ 6225}#)
                                                    #{tmp\ 6230}#)
                                             ((lambda (#{tmp\ 6231}#)
                                                (if #{tmp\ 6231}#
                                                  (apply (lambda (#{e\ 6233}#)
                                                           #{e\ 6233}#)
                                                         #{tmp\ 6231}#)
                                                  ((lambda (#{_\ 6235}#)
                                                     (syntax-violation
                                                       'do
                                                       "bad step expression"
                                                       #{orig-x\ 6185}#
                                                       #{s\ 6226}#))
                                                   #{tmp\ 6229}#)))
                                              ($sc-dispatch
                                                #{tmp\ 6229}#
                                                '(any)))))
                                         ($sc-dispatch
                                           #{tmp\ 6229}#
                                           '())))
                                      #{s\ 6226}#))
                                   #{var\ 6197}#
                                   #{step\ 6199}#)))
                           #{tmp\ 6188}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp\ 6187}#)))
                ($sc-dispatch
                  #{tmp\ 6187}#
                  '(any #(each (any any . any))
                        (any . each-any)
                        .
                        each-any))))
             #{orig-x\ 6185}#))
          (module-name (current-module)))))

(define quasiquote
  (make-syntax-transformer
    'quasiquote
    'macro
    (cons (letrec ((#{quasicons\ 6242}#
                     (lambda (#{x\ 6246}# #{y\ 6247}#)
                       ((lambda (#{tmp\ 6251}#)
                          ((lambda (#{tmp\ 6252}#)
                             (if #{tmp\ 6252}#
                               (apply (lambda (#{x\ 6255}# #{y\ 6256}#)
                                        ((lambda (#{tmp\ 6257}#)
                                           ((lambda (#{tmp\ 6258}#)
                                              (if #{tmp\ 6258}#
                                                (apply (lambda (#{dy\ 6260}#)
                                                         ((lambda (#{tmp\ 6261}#)
                                                            ((lambda (#{tmp\ 6262}#)
                                                               (if #{tmp\ 6262}#
                                                                 (apply (lambda (#{dx\ 6264}#)
                                                                          (list '#(syntax-object
                                                                                   quote
                                                                                   ((top)
                                                                                    #(ribcage
                                                                                      #(dx)
                                                                                      #((top))
                                                                                      #("i6263"))
                                                                                    #(ribcage
                                                                                      #(dy)
                                                                                      #((top))
                                                                                      #("i6259"))
                                                                                    #(ribcage
                                                                                      #(x
                                                                                        y)
                                                                                      #((top)
                                                                                        (top))
                                                                                      #("i6253"
                                                                                        "i6254"))
                                                                                    #(ribcage
                                                                                      ()
                                                                                      ()
                                                                                      ())
                                                                                    #(ribcage
                                                                                      ()
                                                                                      ()
                                                                                      ())
                                                                                    #(ribcage
                                                                                      #(x
                                                                                        y)
                                                                                      #((top)
                                                                                        (top))
                                                                                      #("i6248"
                                                                                        "i6249"))
                                                                                    #(ribcage
                                                                                      #(quasicons
                                                                                        quasiappend
                                                                                        quasivector
                                                                                        quasi)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i6238"
                                                                                        "i6239"
                                                                                        "i6240"
                                                                                        "i6241")))
                                                                                   (hygiene
                                                                                     guile))
                                                                                (cons #{dx\ 6264}#
                                                                                      #{dy\ 6260}#)))
                                                                        #{tmp\ 6262}#)
                                                                 ((lambda (#{_\ 6266}#)
                                                                    (if (null? #{dy\ 6260}#)
                                                                      (list '#(syntax-object
                                                                               list
                                                                               ((top)
                                                                                #(ribcage
                                                                                  #(_)
                                                                                  #((top))
                                                                                  #("i6265"))
                                                                                #(ribcage
                                                                                  #(dy)
                                                                                  #((top))
                                                                                  #("i6259"))
                                                                                #(ribcage
                                                                                  #(x
                                                                                    y)
                                                                                  #((top)
                                                                                    (top))
                                                                                  #("i6253"
                                                                                    "i6254"))
                                                                                #(ribcage
                                                                                  ()
                                                                                  ()
                                                                                  ())
                                                                                #(ribcage
                                                                                  ()
                                                                                  ()
                                                                                  ())
                                                                                #(ribcage
                                                                                  #(x
                                                                                    y)
                                                                                  #((top)
                                                                                    (top))
                                                                                  #("i6248"
                                                                                    "i6249"))
                                                                                #(ribcage
                                                                                  #(quasicons
                                                                                    quasiappend
                                                                                    quasivector
                                                                                    quasi)
                                                                                  #((top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top))
                                                                                  #("i6238"
                                                                                    "i6239"
                                                                                    "i6240"
                                                                                    "i6241")))
                                                                               (hygiene
                                                                                 guile))
                                                                            #{x\ 6255}#)
                                                                      (list '#(syntax-object
                                                                               cons
                                                                               ((top)
                                                                                #(ribcage
                                                                                  #(_)
                                                                                  #((top))
                                                                                  #("i6265"))
                                                                                #(ribcage
                                                                                  #(dy)
                                                                                  #((top))
                                                                                  #("i6259"))
                                                                                #(ribcage
                                                                                  #(x
                                                                                    y)
                                                                                  #((top)
                                                                                    (top))
                                                                                  #("i6253"
                                                                                    "i6254"))
                                                                                #(ribcage
                                                                                  ()
                                                                                  ()
                                                                                  ())
                                                                                #(ribcage
                                                                                  ()
                                                                                  ()
                                                                                  ())
                                                                                #(ribcage
                                                                                  #(x
                                                                                    y)
                                                                                  #((top)
                                                                                    (top))
                                                                                  #("i6248"
                                                                                    "i6249"))
                                                                                #(ribcage
                                                                                  #(quasicons
                                                                                    quasiappend
                                                                                    quasivector
                                                                                    quasi)
                                                                                  #((top)
                                                                                    (top)
                                                                                    (top)
                                                                                    (top))
                                                                                  #("i6238"
                                                                                    "i6239"
                                                                                    "i6240"
                                                                                    "i6241")))
                                                                               (hygiene
                                                                                 guile))
                                                                            #{x\ 6255}#
                                                                            #{y\ 6256}#)))
                                                                  #{tmp\ 6261}#)))
                                                             ($sc-dispatch
                                                               #{tmp\ 6261}#
                                                               '(#(free-id
                                                                   #(syntax-object
                                                                     quote
                                                                     ((top)
                                                                      #(ribcage
                                                                        #(dy)
                                                                        #((top))
                                                                        #("i6259"))
                                                                      #(ribcage
                                                                        #(x y)
                                                                        #((top)
                                                                          (top))
                                                                        #("i6253"
                                                                          "i6254"))
                                                                      #(ribcage
                                                                        ()
                                                                        ()
                                                                        ())
                                                                      #(ribcage
                                                                        ()
                                                                        ()
                                                                        ())
                                                                      #(ribcage
                                                                        #(x y)
                                                                        #((top)
                                                                          (top))
                                                                        #("i6248"
                                                                          "i6249"))
                                                                      #(ribcage
                                                                        #(quasicons
                                                                          quasiappend
                                                                          quasivector
                                                                          quasi)
                                                                        #((top)
                                                                          (top)
                                                                          (top)
                                                                          (top))
                                                                        #("i6238"
                                                                          "i6239"
                                                                          "i6240"
                                                                          "i6241")))
                                                                     (hygiene
                                                                       guile)))
                                                                 any))))
                                                          #{x\ 6255}#))
                                                       #{tmp\ 6258}#)
                                                ((lambda (#{tmp\ 6267}#)
                                                   (if #{tmp\ 6267}#
                                                     (apply (lambda (#{stuff\ 6269}#)
                                                              (cons '#(syntax-object
                                                                       list
                                                                       ((top)
                                                                        #(ribcage
                                                                          #(stuff)
                                                                          #((top))
                                                                          #("i6268"))
                                                                        #(ribcage
                                                                          #(x
                                                                            y)
                                                                          #((top)
                                                                            (top))
                                                                          #("i6253"
                                                                            "i6254"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(x
                                                                            y)
                                                                          #((top)
                                                                            (top))
                                                                          #("i6248"
                                                                            "i6249"))
                                                                        #(ribcage
                                                                          #(quasicons
                                                                            quasiappend
                                                                            quasivector
                                                                            quasi)
                                                                          #((top)
                                                                            (top)
                                                                            (top)
                                                                            (top))
                                                                          #("i6238"
                                                                            "i6239"
                                                                            "i6240"
                                                                            "i6241")))
                                                                       (hygiene
                                                                         guile))
                                                                    (cons #{x\ 6255}#
                                                                          #{stuff\ 6269}#)))
                                                            #{tmp\ 6267}#)
                                                     ((lambda (#{else\ 6271}#)
                                                        (list '#(syntax-object
                                                                 cons
                                                                 ((top)
                                                                  #(ribcage
                                                                    #(else)
                                                                    #((top))
                                                                    #("i6270"))
                                                                  #(ribcage
                                                                    #(x y)
                                                                    #((top)
                                                                      (top))
                                                                    #("i6253"
                                                                      "i6254"))
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(x y)
                                                                    #((top)
                                                                      (top))
                                                                    #("i6248"
                                                                      "i6249"))
                                                                  #(ribcage
                                                                    #(quasicons
                                                                      quasiappend
                                                                      quasivector
                                                                      quasi)
                                                                    #((top)
                                                                      (top)
                                                                      (top)
                                                                      (top))
                                                                    #("i6238"
                                                                      "i6239"
                                                                      "i6240"
                                                                      "i6241")))
                                                                 (hygiene
                                                                   guile))
                                                              #{x\ 6255}#
                                                              #{y\ 6256}#))
                                                      #{tmp\ 6257}#)))
                                                 ($sc-dispatch
                                                   #{tmp\ 6257}#
                                                   '(#(free-id
                                                       #(syntax-object
                                                         list
                                                         ((top)
                                                          #(ribcage
                                                            #(x y)
                                                            #((top) (top))
                                                            #("i6253" "i6254"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(x y)
                                                            #((top) (top))
                                                            #("i6248" "i6249"))
                                                          #(ribcage
                                                            #(quasicons
                                                              quasiappend
                                                              quasivector
                                                              quasi)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i6238"
                                                              "i6239"
                                                              "i6240"
                                                              "i6241")))
                                                         (hygiene guile)))
                                                     .
                                                     any)))))
                                            ($sc-dispatch
                                              #{tmp\ 6257}#
                                              '(#(free-id
                                                  #(syntax-object
                                                    quote
                                                    ((top)
                                                     #(ribcage
                                                       #(x y)
                                                       #((top) (top))
                                                       #("i6253" "i6254"))
                                                     #(ribcage () () ())
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x y)
                                                       #((top) (top))
                                                       #("i6248" "i6249"))
                                                     #(ribcage
                                                       #(quasicons
                                                         quasiappend
                                                         quasivector
                                                         quasi)
                                                       #((top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                       #("i6238"
                                                         "i6239"
                                                         "i6240"
                                                         "i6241")))
                                                    (hygiene guile)))
                                                any))))
                                         #{y\ 6256}#))
                                      #{tmp\ 6252}#)
                               (syntax-violation
                                 #f
                                 "source expression failed to match any pattern"
                                 #{tmp\ 6251}#)))
                           ($sc-dispatch #{tmp\ 6251}# (quote (any any)))))
                        (list #{x\ 6246}# #{y\ 6247}#))))
                   (#{quasiappend\ 6243}#
                     (lambda (#{x\ 6272}# #{y\ 6273}#)
                       ((lambda (#{tmp\ 6277}#)
                          ((lambda (#{tmp\ 6278}#)
                             (if #{tmp\ 6278}#
                               (apply (lambda (#{x\ 6281}# #{y\ 6282}#)
                                        ((lambda (#{tmp\ 6283}#)
                                           ((lambda (#{tmp\ 6284}#)
                                              (if #{tmp\ 6284}#
                                                (apply (lambda () #{x\ 6281}#)
                                                       #{tmp\ 6284}#)
                                                ((lambda (#{_\ 6286}#)
                                                   (list '#(syntax-object
                                                            append
                                                            ((top)
                                                             #(ribcage
                                                               #(_)
                                                               #((top))
                                                               #("i6285"))
                                                             #(ribcage
                                                               #(x y)
                                                               #((top) (top))
                                                               #("i6279"
                                                                 "i6280"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x y)
                                                               #((top) (top))
                                                               #("i6274"
                                                                 "i6275"))
                                                             #(ribcage
                                                               #(quasicons
                                                                 quasiappend
                                                                 quasivector
                                                                 quasi)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i6238"
                                                                 "i6239"
                                                                 "i6240"
                                                                 "i6241")))
                                                            (hygiene guile))
                                                         #{x\ 6281}#
                                                         #{y\ 6282}#))
                                                 #{tmp\ 6283}#)))
                                            ($sc-dispatch
                                              #{tmp\ 6283}#
                                              '(#(free-id
                                                  #(syntax-object
                                                    quote
                                                    ((top)
                                                     #(ribcage
                                                       #(x y)
                                                       #((top) (top))
                                                       #("i6279" "i6280"))
                                                     #(ribcage () () ())
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x y)
                                                       #((top) (top))
                                                       #("i6274" "i6275"))
                                                     #(ribcage
                                                       #(quasicons
                                                         quasiappend
                                                         quasivector
                                                         quasi)
                                                       #((top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                       #("i6238"
                                                         "i6239"
                                                         "i6240"
                                                         "i6241")))
                                                    (hygiene guile)))
                                                ()))))
                                         #{y\ 6282}#))
                                      #{tmp\ 6278}#)
                               (syntax-violation
                                 #f
                                 "source expression failed to match any pattern"
                                 #{tmp\ 6277}#)))
                           ($sc-dispatch #{tmp\ 6277}# (quote (any any)))))
                        (list #{x\ 6272}# #{y\ 6273}#))))
                   (#{quasivector\ 6244}#
                     (lambda (#{x\ 6287}#)
                       ((lambda (#{tmp\ 6290}#)
                          ((lambda (#{x\ 6292}#)
                             ((lambda (#{tmp\ 6293}#)
                                ((lambda (#{tmp\ 6294}#)
                                   (if #{tmp\ 6294}#
                                     (apply (lambda (#{x\ 6296}#)
                                              (list '#(syntax-object
                                                       quote
                                                       ((top)
                                                        #(ribcage
                                                          #(x)
                                                          #((top))
                                                          #("i6295"))
                                                        #(ribcage
                                                          #(x)
                                                          #((top))
                                                          #("i6291"))
                                                        #(ribcage () () ())
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(x)
                                                          #((top))
                                                          #("i6288"))
                                                        #(ribcage
                                                          #(quasicons
                                                            quasiappend
                                                            quasivector
                                                            quasi)
                                                          #((top)
                                                            (top)
                                                            (top)
                                                            (top))
                                                          #("i6238"
                                                            "i6239"
                                                            "i6240"
                                                            "i6241")))
                                                       (hygiene guile))
                                                    (list->vector
                                                      #{x\ 6296}#)))
                                            #{tmp\ 6294}#)
                                     ((lambda (#{tmp\ 6298}#)
                                        (if #{tmp\ 6298}#
                                          (apply (lambda (#{x\ 6300}#)
                                                   (cons '#(syntax-object
                                                            vector
                                                            ((top)
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("i6299"))
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("i6291"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("i6288"))
                                                             #(ribcage
                                                               #(quasicons
                                                                 quasiappend
                                                                 quasivector
                                                                 quasi)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i6238"
                                                                 "i6239"
                                                                 "i6240"
                                                                 "i6241")))
                                                            (hygiene guile))
                                                         #{x\ 6300}#))
                                                 #{tmp\ 6298}#)
                                          ((lambda (#{_\ 6303}#)
                                             (list '#(syntax-object
                                                      list->vector
                                                      ((top)
                                                       #(ribcage
                                                         #(_)
                                                         #((top))
                                                         #("i6302"))
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i6291"))
                                                       #(ribcage () () ())
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i6288"))
                                                       #(ribcage
                                                         #(quasicons
                                                           quasiappend
                                                           quasivector
                                                           quasi)
                                                         #((top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                         #("i6238"
                                                           "i6239"
                                                           "i6240"
                                                           "i6241")))
                                                      (hygiene guile))
                                                   #{x\ 6292}#))
                                           #{tmp\ 6293}#)))
                                      ($sc-dispatch
                                        #{tmp\ 6293}#
                                        '(#(free-id
                                            #(syntax-object
                                              list
                                              ((top)
                                               #(ribcage
                                                 #(x)
                                                 #((top))
                                                 #("i6291"))
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x)
                                                 #((top))
                                                 #("i6288"))
                                               #(ribcage
                                                 #(quasicons
                                                   quasiappend
                                                   quasivector
                                                   quasi)
                                                 #((top) (top) (top) (top))
                                                 #("i6238"
                                                   "i6239"
                                                   "i6240"
                                                   "i6241")))
                                              (hygiene guile)))
                                          .
                                          each-any)))))
                                 ($sc-dispatch
                                   #{tmp\ 6293}#
                                   '(#(free-id
                                       #(syntax-object
                                         quote
                                         ((top)
                                          #(ribcage #(x) #((top)) #("i6291"))
                                          #(ribcage () () ())
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i6288"))
                                          #(ribcage
                                            #(quasicons
                                              quasiappend
                                              quasivector
                                              quasi)
                                            #((top) (top) (top) (top))
                                            #("i6238"
                                              "i6239"
                                              "i6240"
                                              "i6241")))
                                         (hygiene guile)))
                                     each-any))))
                              #{x\ 6292}#))
                           #{tmp\ 6290}#))
                        #{x\ 6287}#)))
                   (#{quasi\ 6245}#
                     (lambda (#{p\ 6304}# #{lev\ 6305}#)
                       ((lambda (#{tmp\ 6308}#)
                          ((lambda (#{tmp\ 6309}#)
                             (if #{tmp\ 6309}#
                               (apply (lambda (#{p\ 6311}#)
                                        (if (= #{lev\ 6305}# 0)
                                          #{p\ 6311}#
                                          (#{quasicons\ 6242}#
                                            '(#(syntax-object
                                                quote
                                                ((top)
                                                 #(ribcage
                                                   #(p)
                                                   #((top))
                                                   #("i6310"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(p lev)
                                                   #((top) (top))
                                                   #("i6306" "i6307"))
                                                 #(ribcage
                                                   #(quasicons
                                                     quasiappend
                                                     quasivector
                                                     quasi)
                                                   #((top) (top) (top) (top))
                                                   #("i6238"
                                                     "i6239"
                                                     "i6240"
                                                     "i6241")))
                                                (hygiene guile))
                                              #(syntax-object
                                                unquote
                                                ((top)
                                                 #(ribcage
                                                   #(p)
                                                   #((top))
                                                   #("i6310"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(p lev)
                                                   #((top) (top))
                                                   #("i6306" "i6307"))
                                                 #(ribcage
                                                   #(quasicons
                                                     quasiappend
                                                     quasivector
                                                     quasi)
                                                   #((top) (top) (top) (top))
                                                   #("i6238"
                                                     "i6239"
                                                     "i6240"
                                                     "i6241")))
                                                (hygiene guile)))
                                            (#{quasi\ 6245}#
                                              (list #{p\ 6311}#)
                                              (- #{lev\ 6305}# 1)))))
                                      #{tmp\ 6309}#)
                               ((lambda (#{tmp\ 6312}#)
                                  (if (if #{tmp\ 6312}#
                                        (apply (lambda (#{args\ 6314}#)
                                                 (= #{lev\ 6305}# 0))
                                               #{tmp\ 6312}#)
                                        #f)
                                    (apply (lambda (#{args\ 6316}#)
                                             (syntax-violation
                                               'unquote
                                               "unquote takes exactly one argument"
                                               #{p\ 6304}#
                                               (cons '#(syntax-object
                                                        unquote
                                                        ((top)
                                                         #(ribcage
                                                           #(args)
                                                           #((top))
                                                           #("i6315"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(p lev)
                                                           #((top) (top))
                                                           #("i6306" "i6307"))
                                                         #(ribcage
                                                           #(quasicons
                                                             quasiappend
                                                             quasivector
                                                             quasi)
                                                           #((top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                           #("i6238"
                                                             "i6239"
                                                             "i6240"
                                                             "i6241")))
                                                        (hygiene guile))
                                                     #{args\ 6316}#)))
                                           #{tmp\ 6312}#)
                                    ((lambda (#{tmp\ 6317}#)
                                       (if #{tmp\ 6317}#
                                         (apply (lambda (#{p\ 6320}#
                                                         #{q\ 6321}#)
                                                  (if (= #{lev\ 6305}# 0)
                                                    (#{quasiappend\ 6243}#
                                                      #{p\ 6320}#
                                                      (#{quasi\ 6245}#
                                                        #{q\ 6321}#
                                                        #{lev\ 6305}#))
                                                    (#{quasicons\ 6242}#
                                                      (#{quasicons\ 6242}#
                                                        '(#(syntax-object
                                                            quote
                                                            ((top)
                                                             #(ribcage
                                                               #(p q)
                                                               #((top) (top))
                                                               #("i6318"
                                                                 "i6319"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(p lev)
                                                               #((top) (top))
                                                               #("i6306"
                                                                 "i6307"))
                                                             #(ribcage
                                                               #(quasicons
                                                                 quasiappend
                                                                 quasivector
                                                                 quasi)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i6238"
                                                                 "i6239"
                                                                 "i6240"
                                                                 "i6241")))
                                                            (hygiene guile))
                                                          #(syntax-object
                                                            unquote-splicing
                                                            ((top)
                                                             #(ribcage
                                                               #(p q)
                                                               #((top) (top))
                                                               #("i6318"
                                                                 "i6319"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(p lev)
                                                               #((top) (top))
                                                               #("i6306"
                                                                 "i6307"))
                                                             #(ribcage
                                                               #(quasicons
                                                                 quasiappend
                                                                 quasivector
                                                                 quasi)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i6238"
                                                                 "i6239"
                                                                 "i6240"
                                                                 "i6241")))
                                                            (hygiene guile)))
                                                        (#{quasi\ 6245}#
                                                          (list #{p\ 6320}#)
                                                          (- #{lev\ 6305}# 1)))
                                                      (#{quasi\ 6245}#
                                                        #{q\ 6321}#
                                                        #{lev\ 6305}#))))
                                                #{tmp\ 6317}#)
                                         ((lambda (#{tmp\ 6322}#)
                                            (if (if #{tmp\ 6322}#
                                                  (apply (lambda (#{args\ 6325}#
                                                                  #{q\ 6326}#)
                                                           (= #{lev\ 6305}# 0))
                                                         #{tmp\ 6322}#)
                                                  #f)
                                              (apply (lambda (#{args\ 6329}#
                                                              #{q\ 6330}#)
                                                       (syntax-violation
                                                         'unquote-splicing
                                                         "unquote-splicing takes exactly one argument"
                                                         #{p\ 6304}#
                                                         (cons '#(syntax-object
                                                                  unquote-splicing
                                                                  ((top)
                                                                   #(ribcage
                                                                     #(args q)
                                                                     #((top)
                                                                       (top))
                                                                     #("i6327"
                                                                       "i6328"))
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     #(p lev)
                                                                     #((top)
                                                                       (top))
                                                                     #("i6306"
                                                                       "i6307"))
                                                                   #(ribcage
                                                                     #(quasicons
                                                                       quasiappend
                                                                       quasivector
                                                                       quasi)
                                                                     #((top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                     #("i6238"
                                                                       "i6239"
                                                                       "i6240"
                                                                       "i6241")))
                                                                  (hygiene
                                                                    guile))
                                                               #{args\ 6329}#)))
                                                     #{tmp\ 6322}#)
                                              ((lambda (#{tmp\ 6331}#)
                                                 (if #{tmp\ 6331}#
                                                   (apply (lambda (#{p\ 6333}#)
                                                            (#{quasicons\ 6242}#
                                                              '(#(syntax-object
                                                                  quote
                                                                  ((top)
                                                                   #(ribcage
                                                                     #(p)
                                                                     #((top))
                                                                     #("i6332"))
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     #(p lev)
                                                                     #((top)
                                                                       (top))
                                                                     #("i6306"
                                                                       "i6307"))
                                                                   #(ribcage
                                                                     #(quasicons
                                                                       quasiappend
                                                                       quasivector
                                                                       quasi)
                                                                     #((top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                     #("i6238"
                                                                       "i6239"
                                                                       "i6240"
                                                                       "i6241")))
                                                                  (hygiene
                                                                    guile))
                                                                #(syntax-object
                                                                  quasiquote
                                                                  ((top)
                                                                   #(ribcage
                                                                     #(p)
                                                                     #((top))
                                                                     #("i6332"))
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     #(p lev)
                                                                     #((top)
                                                                       (top))
                                                                     #("i6306"
                                                                       "i6307"))
                                                                   #(ribcage
                                                                     #(quasicons
                                                                       quasiappend
                                                                       quasivector
                                                                       quasi)
                                                                     #((top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                     #("i6238"
                                                                       "i6239"
                                                                       "i6240"
                                                                       "i6241")))
                                                                  (hygiene
                                                                    guile)))
                                                              (#{quasi\ 6245}#
                                                                (list #{p\ 6333}#)
                                                                (+ #{lev\ 6305}#
                                                                   1))))
                                                          #{tmp\ 6331}#)
                                                   ((lambda (#{tmp\ 6334}#)
                                                      (if #{tmp\ 6334}#
                                                        (apply (lambda (#{p\ 6337}#
                                                                        #{q\ 6338}#)
                                                                 (#{quasicons\ 6242}#
                                                                   (#{quasi\ 6245}#
                                                                     #{p\ 6337}#
                                                                     #{lev\ 6305}#)
                                                                   (#{quasi\ 6245}#
                                                                     #{q\ 6338}#
                                                                     #{lev\ 6305}#)))
                                                               #{tmp\ 6334}#)
                                                        ((lambda (#{tmp\ 6339}#)
                                                           (if #{tmp\ 6339}#
                                                             (apply (lambda (#{x\ 6341}#)
                                                                      (#{quasivector\ 6244}#
                                                                        (#{quasi\ 6245}#
                                                                          #{x\ 6341}#
                                                                          #{lev\ 6305}#)))
                                                                    #{tmp\ 6339}#)
                                                             ((lambda (#{p\ 6344}#)
                                                                (list '#(syntax-object
                                                                         quote
                                                                         ((top)
                                                                          #(ribcage
                                                                            #(p)
                                                                            #((top))
                                                                            #("i6343"))
                                                                          #(ribcage
                                                                            ()
                                                                            ()
                                                                            ())
                                                                          #(ribcage
                                                                            #(p
                                                                              lev)
                                                                            #((top)
                                                                              (top))
                                                                            #("i6306"
                                                                              "i6307"))
                                                                          #(ribcage
                                                                            #(quasicons
                                                                              quasiappend
                                                                              quasivector
                                                                              quasi)
                                                                            #((top)
                                                                              (top)
                                                                              (top)
                                                                              (top))
                                                                            #("i6238"
                                                                              "i6239"
                                                                              "i6240"
                                                                              "i6241")))
                                                                         (hygiene
                                                                           guile))
                                                                      #{p\ 6344}#))
                                                              #{tmp\ 6308}#)))
                                                         ($sc-dispatch
                                                           #{tmp\ 6308}#
                                                           '#(vector
                                                              each-any)))))
                                                    ($sc-dispatch
                                                      #{tmp\ 6308}#
                                                      '(any . any)))))
                                               ($sc-dispatch
                                                 #{tmp\ 6308}#
                                                 '(#(free-id
                                                     #(syntax-object
                                                       quasiquote
                                                       ((top)
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(p lev)
                                                          #((top) (top))
                                                          #("i6306" "i6307"))
                                                        #(ribcage
                                                          #(quasicons
                                                            quasiappend
                                                            quasivector
                                                            quasi)
                                                          #((top)
                                                            (top)
                                                            (top)
                                                            (top))
                                                          #("i6238"
                                                            "i6239"
                                                            "i6240"
                                                            "i6241")))
                                                       (hygiene guile)))
                                                   any)))))
                                          ($sc-dispatch
                                            #{tmp\ 6308}#
                                            '((#(free-id
                                                 #(syntax-object
                                                   unquote-splicing
                                                   ((top)
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(p lev)
                                                      #((top) (top))
                                                      #("i6306" "i6307"))
                                                    #(ribcage
                                                      #(quasicons
                                                        quasiappend
                                                        quasivector
                                                        quasi)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i6238"
                                                        "i6239"
                                                        "i6240"
                                                        "i6241")))
                                                   (hygiene guile)))
                                               .
                                               any)
                                              .
                                              any)))))
                                     ($sc-dispatch
                                       #{tmp\ 6308}#
                                       '((#(free-id
                                            #(syntax-object
                                              unquote-splicing
                                              ((top)
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(p lev)
                                                 #((top) (top))
                                                 #("i6306" "i6307"))
                                               #(ribcage
                                                 #(quasicons
                                                   quasiappend
                                                   quasivector
                                                   quasi)
                                                 #((top) (top) (top) (top))
                                                 #("i6238"
                                                   "i6239"
                                                   "i6240"
                                                   "i6241")))
                                              (hygiene guile)))
                                          any)
                                         .
                                         any)))))
                                ($sc-dispatch
                                  #{tmp\ 6308}#
                                  '(#(free-id
                                      #(syntax-object
                                        unquote
                                        ((top)
                                         #(ribcage () () ())
                                         #(ribcage
                                           #(p lev)
                                           #((top) (top))
                                           #("i6306" "i6307"))
                                         #(ribcage
                                           #(quasicons
                                             quasiappend
                                             quasivector
                                             quasi)
                                           #((top) (top) (top) (top))
                                           #("i6238" "i6239" "i6240" "i6241")))
                                        (hygiene guile)))
                                    .
                                    any)))))
                           ($sc-dispatch
                             #{tmp\ 6308}#
                             '(#(free-id
                                 #(syntax-object
                                   unquote
                                   ((top)
                                    #(ribcage () () ())
                                    #(ribcage
                                      #(p lev)
                                      #((top) (top))
                                      #("i6306" "i6307"))
                                    #(ribcage
                                      #(quasicons
                                        quasiappend
                                        quasivector
                                        quasi)
                                      #((top) (top) (top) (top))
                                      #("i6238" "i6239" "i6240" "i6241")))
                                   (hygiene guile)))
                               any))))
                        #{p\ 6304}#))))
            (lambda (#{x\ 6345}#)
              ((lambda (#{tmp\ 6347}#)
                 ((lambda (#{tmp\ 6348}#)
                    (if #{tmp\ 6348}#
                      (apply (lambda (#{_\ 6351}# #{e\ 6352}#)
                               (#{quasi\ 6245}# #{e\ 6352}# 0))
                             #{tmp\ 6348}#)
                      (syntax-violation
                        #f
                        "source expression failed to match any pattern"
                        #{tmp\ 6347}#)))
                  ($sc-dispatch #{tmp\ 6347}# (quote (any any)))))
               #{x\ 6345}#)))
          (module-name (current-module)))))

(define include
  (make-syntax-transformer
    'include
    'macro
    (cons (lambda (#{x\ 6353}#)
            (letrec ((#{read-file\ 6356}#
                       (lambda (#{fn\ 6357}# #{k\ 6358}#)
                         (let ((#{p\ 6362}# (open-input-file #{fn\ 6357}#)))
                           (letrec ((#{f\ 6366}#
                                      (lambda (#{x\ 6367}# #{result\ 6368}#)
                                        (if (eof-object? #{x\ 6367}#)
                                          (begin
                                            (close-input-port #{p\ 6362}#)
                                            (reverse #{result\ 6368}#))
                                          (#{f\ 6366}#
                                            (read #{p\ 6362}#)
                                            (cons (datum->syntax
                                                    #{k\ 6358}#
                                                    #{x\ 6367}#)
                                                  #{result\ 6368}#))))))
                             (#{f\ 6366}# (read #{p\ 6362}#) (quote ())))))))
              ((lambda (#{tmp\ 6369}#)
                 ((lambda (#{tmp\ 6370}#)
                    (if #{tmp\ 6370}#
                      (apply (lambda (#{k\ 6373}# #{filename\ 6374}#)
                               (let ((#{fn\ 6376}#
                                       (syntax->datum #{filename\ 6374}#)))
                                 ((lambda (#{tmp\ 6378}#)
                                    ((lambda (#{tmp\ 6379}#)
                                       (if #{tmp\ 6379}#
                                         (apply (lambda (#{exp\ 6381}#)
                                                  (cons '#(syntax-object
                                                           begin
                                                           ((top)
                                                            #(ribcage
                                                              #(exp)
                                                              #((top))
                                                              #("i6380"))
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(fn)
                                                              #((top))
                                                              #("i6375"))
                                                            #(ribcage
                                                              #(k filename)
                                                              #((top) (top))
                                                              #("i6371"
                                                                "i6372"))
                                                            #(ribcage
                                                              (read-file)
                                                              ((top))
                                                              ("i6355"))
                                                            #(ribcage
                                                              #(x)
                                                              #((top))
                                                              #("i6354")))
                                                           (hygiene guile))
                                                        #{exp\ 6381}#))
                                                #{tmp\ 6379}#)
                                         (syntax-violation
                                           #f
                                           "source expression failed to match any pattern"
                                           #{tmp\ 6378}#)))
                                     ($sc-dispatch
                                       #{tmp\ 6378}#
                                       'each-any)))
                                  (#{read-file\ 6356}#
                                    #{fn\ 6376}#
                                    #{k\ 6373}#))))
                             #{tmp\ 6370}#)
                      (syntax-violation
                        #f
                        "source expression failed to match any pattern"
                        #{tmp\ 6369}#)))
                  ($sc-dispatch #{tmp\ 6369}# (quote (any any)))))
               #{x\ 6353}#)))
          (module-name (current-module)))))

(define include-from-path
  (make-syntax-transformer
    'include-from-path
    'macro
    (cons (lambda (#{x\ 6383}#)
            ((lambda (#{tmp\ 6385}#)
               ((lambda (#{tmp\ 6386}#)
                  (if #{tmp\ 6386}#
                    (apply (lambda (#{k\ 6389}# #{filename\ 6390}#)
                             (let ((#{fn\ 6392}#
                                     (syntax->datum #{filename\ 6390}#)))
                               ((lambda (#{tmp\ 6394}#)
                                  ((lambda (#{fn\ 6396}#)
                                     (list '#(syntax-object
                                              include
                                              ((top)
                                               #(ribcage
                                                 #(fn)
                                                 #((top))
                                                 #("i6395"))
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(fn)
                                                 #((top))
                                                 #("i6391"))
                                               #(ribcage
                                                 #(k filename)
                                                 #((top) (top))
                                                 #("i6387" "i6388"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x)
                                                 #((top))
                                                 #("i6384")))
                                              (hygiene guile))
                                           #{fn\ 6396}#))
                                   #{tmp\ 6394}#))
                                (let ((#{t\ 6399}#
                                        (%search-load-path #{fn\ 6392}#)))
                                  (if #{t\ 6399}#
                                    #{t\ 6399}#
                                    (syntax-violation
                                      'include-from-path
                                      "file not found in path"
                                      #{x\ 6383}#
                                      #{filename\ 6390}#))))))
                           #{tmp\ 6386}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp\ 6385}#)))
                ($sc-dispatch #{tmp\ 6385}# (quote (any any)))))
             #{x\ 6383}#))
          (module-name (current-module)))))

(define unquote
  (make-syntax-transformer
    'unquote
    'macro
    (cons (lambda (#{x\ 6401}#)
            ((lambda (#{tmp\ 6403}#)
               ((lambda (#{tmp\ 6404}#)
                  (if #{tmp\ 6404}#
                    (apply (lambda (#{_\ 6407}# #{e\ 6408}#)
                             (syntax-violation
                               'unquote
                               "expression not valid outside of quasiquote"
                               #{x\ 6401}#))
                           #{tmp\ 6404}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp\ 6403}#)))
                ($sc-dispatch #{tmp\ 6403}# (quote (any any)))))
             #{x\ 6401}#))
          (module-name (current-module)))))

(define unquote-splicing
  (make-syntax-transformer
    'unquote-splicing
    'macro
    (cons (lambda (#{x\ 6409}#)
            ((lambda (#{tmp\ 6411}#)
               ((lambda (#{tmp\ 6412}#)
                  (if #{tmp\ 6412}#
                    (apply (lambda (#{_\ 6415}# #{e\ 6416}#)
                             (syntax-violation
                               'unquote-splicing
                               "expression not valid outside of quasiquote"
                               #{x\ 6409}#))
                           #{tmp\ 6412}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp\ 6411}#)))
                ($sc-dispatch #{tmp\ 6411}# (quote (any any)))))
             #{x\ 6409}#))
          (module-name (current-module)))))

(define case
  (make-syntax-transformer
    'case
    'macro
    (cons (lambda (#{x\ 6417}#)
            ((lambda (#{tmp\ 6419}#)
               ((lambda (#{tmp\ 6420}#)
                  (if #{tmp\ 6420}#
                    (apply (lambda (#{_\ 6425}#
                                    #{e\ 6426}#
                                    #{m1\ 6427}#
                                    #{m2\ 6428}#)
                             ((lambda (#{tmp\ 6430}#)
                                ((lambda (#{body\ 6432}#)
                                   (list '#(syntax-object
                                            let
                                            ((top)
                                             #(ribcage
                                               #(body)
                                               #((top))
                                               #("i6431"))
                                             #(ribcage
                                               #(_ e m1 m2)
                                               #((top) (top) (top) (top))
                                               #("i6421"
                                                 "i6422"
                                                 "i6423"
                                                 "i6424"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x)
                                               #((top))
                                               #("i6418")))
                                            (hygiene guile))
                                         (list (list '#(syntax-object
                                                        t
                                                        ((top)
                                                         #(ribcage
                                                           #(body)
                                                           #((top))
                                                           #("i6431"))
                                                         #(ribcage
                                                           #(_ e m1 m2)
                                                           #((top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                           #("i6421"
                                                             "i6422"
                                                             "i6423"
                                                             "i6424"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("i6418")))
                                                        (hygiene guile))
                                                     #{e\ 6426}#))
                                         #{body\ 6432}#))
                                 #{tmp\ 6430}#))
                              (letrec ((#{f\ 6436}#
                                         (lambda (#{clause\ 6437}#
                                                  #{clauses\ 6438}#)
                                           (if (null? #{clauses\ 6438}#)
                                             ((lambda (#{tmp\ 6440}#)
                                                ((lambda (#{tmp\ 6441}#)
                                                   (if #{tmp\ 6441}#
                                                     (apply (lambda (#{e1\ 6444}#
                                                                     #{e2\ 6445}#)
                                                              (cons '#(syntax-object
                                                                       begin
                                                                       ((top)
                                                                        #(ribcage
                                                                          #(e1
                                                                            e2)
                                                                          #((top)
                                                                            (top))
                                                                          #("i6442"
                                                                            "i6443"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(f
                                                                            clause
                                                                            clauses)
                                                                          #((top)
                                                                            (top)
                                                                            (top))
                                                                          #("i6433"
                                                                            "i6434"
                                                                            "i6435"))
                                                                        #(ribcage
                                                                          #(_
                                                                            e
                                                                            m1
                                                                            m2)
                                                                          #((top)
                                                                            (top)
                                                                            (top)
                                                                            (top))
                                                                          #("i6421"
                                                                            "i6422"
                                                                            "i6423"
                                                                            "i6424"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(x)
                                                                          #((top))
                                                                          #("i6418")))
                                                                       (hygiene
                                                                         guile))
                                                                    (cons #{e1\ 6444}#
                                                                          #{e2\ 6445}#)))
                                                            #{tmp\ 6441}#)
                                                     ((lambda (#{tmp\ 6447}#)
                                                        (if #{tmp\ 6447}#
                                                          (apply (lambda (#{k\ 6451}#
                                                                          #{e1\ 6452}#
                                                                          #{e2\ 6453}#)
                                                                   (list '#(syntax-object
                                                                            if
                                                                            ((top)
                                                                             #(ribcage
                                                                               #(k
                                                                                 e1
                                                                                 e2)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i6448"
                                                                                 "i6449"
                                                                                 "i6450"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(f
                                                                                 clause
                                                                                 clauses)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i6433"
                                                                                 "i6434"
                                                                                 "i6435"))
                                                                             #(ribcage
                                                                               #(_
                                                                                 e
                                                                                 m1
                                                                                 m2)
                                                                               #((top)
                                                                                 (top)
                                                                                 (top)
                                                                                 (top))
                                                                               #("i6421"
                                                                                 "i6422"
                                                                                 "i6423"
                                                                                 "i6424"))
                                                                             #(ribcage
                                                                               ()
                                                                               ()
                                                                               ())
                                                                             #(ribcage
                                                                               #(x)
                                                                               #((top))
                                                                               #("i6418")))
                                                                            (hygiene
                                                                              guile))
                                                                         (list '#(syntax-object
                                                                                  memv
                                                                                  ((top)
                                                                                   #(ribcage
                                                                                     #(k
                                                                                       e1
                                                                                       e2)
                                                                                     #((top)
                                                                                       (top)
                                                                                       (top))
                                                                                     #("i6448"
                                                                                       "i6449"
                                                                                       "i6450"))
                                                                                   #(ribcage
                                                                                     ()
                                                                                     ()
                                                                                     ())
                                                                                   #(ribcage
                                                                                     #(f
                                                                                       clause
                                                                                       clauses)
                                                                                     #((top)
                                                                                       (top)
                                                                                       (top))
                                                                                     #("i6433"
                                                                                       "i6434"
                                                                                       "i6435"))
                                                                                   #(ribcage
                                                                                     #(_
                                                                                       e
                                                                                       m1
                                                                                       m2)
                                                                                     #((top)
                                                                                       (top)
                                                                                       (top)
                                                                                       (top))
                                                                                     #("i6421"
                                                                                       "i6422"
                                                                                       "i6423"
                                                                                       "i6424"))
                                                                                   #(ribcage
                                                                                     ()
                                                                                     ()
                                                                                     ())
                                                                                   #(ribcage
                                                                                     #(x)
                                                                                     #((top))
                                                                                     #("i6418")))
                                                                                  (hygiene
                                                                                    guile))
                                                                               '#(syntax-object
                                                                                  t
                                                                                  ((top)
                                                                                   #(ribcage
                                                                                     #(k
                                                                                       e1
                                                                                       e2)
                                                                                     #((top)
                                                                                       (top)
                                                                                       (top))
                                                                                     #("i6448"
                                                                                       "i6449"
                                                                                       "i6450"))
                                                                                   #(ribcage
                                                                                     ()
                                                                                     ()
                                                                                     ())
                                                                                   #(ribcage
                                                                                     #(f
                                                                                       clause
                                                                                       clauses)
                                                                                     #((top)
                                                                                       (top)
                                                                                       (top))
                                                                                     #("i6433"
                                                                                       "i6434"
                                                                                       "i6435"))
                                                                                   #(ribcage
                                                                                     #(_
                                                                                       e
                                                                                       m1
                                                                                       m2)
                                                                                     #((top)
                                                                                       (top)
                                                                                       (top)
                                                                                       (top))
                                                                                     #("i6421"
                                                                                       "i6422"
                                                                                       "i6423"
                                                                                       "i6424"))
                                                                                   #(ribcage
                                                                                     ()
                                                                                     ()
                                                                                     ())
                                                                                   #(ribcage
                                                                                     #(x)
                                                                                     #((top))
                                                                                     #("i6418")))
                                                                                  (hygiene
                                                                                    guile))
                                                                               (list '#(syntax-object
                                                                                        quote
                                                                                        ((top)
                                                                                         #(ribcage
                                                                                           #(k
                                                                                             e1
                                                                                             e2)
                                                                                           #((top)
                                                                                             (top)
                                                                                             (top))
                                                                                           #("i6448"
                                                                                             "i6449"
                                                                                             "i6450"))
                                                                                         #(ribcage
                                                                                           ()
                                                                                           ()
                                                                                           ())
                                                                                         #(ribcage
                                                                                           #(f
                                                                                             clause
                                                                                             clauses)
                                                                                           #((top)
                                                                                             (top)
                                                                                             (top))
                                                                                           #("i6433"
                                                                                             "i6434"
                                                                                             "i6435"))
                                                                                         #(ribcage
                                                                                           #(_
                                                                                             e
                                                                                             m1
                                                                                             m2)
                                                                                           #((top)
                                                                                             (top)
                                                                                             (top)
                                                                                             (top))
                                                                                           #("i6421"
                                                                                             "i6422"
                                                                                             "i6423"
                                                                                             "i6424"))
                                                                                         #(ribcage
                                                                                           ()
                                                                                           ()
                                                                                           ())
                                                                                         #(ribcage
                                                                                           #(x)
                                                                                           #((top))
                                                                                           #("i6418")))
                                                                                        (hygiene
                                                                                          guile))
                                                                                     #{k\ 6451}#))
                                                                         (cons '#(syntax-object
                                                                                  begin
                                                                                  ((top)
                                                                                   #(ribcage
                                                                                     #(k
                                                                                       e1
                                                                                       e2)
                                                                                     #((top)
                                                                                       (top)
                                                                                       (top))
                                                                                     #("i6448"
                                                                                       "i6449"
                                                                                       "i6450"))
                                                                                   #(ribcage
                                                                                     ()
                                                                                     ()
                                                                                     ())
                                                                                   #(ribcage
                                                                                     #(f
                                                                                       clause
                                                                                       clauses)
                                                                                     #((top)
                                                                                       (top)
                                                                                       (top))
                                                                                     #("i6433"
                                                                                       "i6434"
                                                                                       "i6435"))
                                                                                   #(ribcage
                                                                                     #(_
                                                                                       e
                                                                                       m1
                                                                                       m2)
                                                                                     #((top)
                                                                                       (top)
                                                                                       (top)
                                                                                       (top))
                                                                                     #("i6421"
                                                                                       "i6422"
                                                                                       "i6423"
                                                                                       "i6424"))
                                                                                   #(ribcage
                                                                                     ()
                                                                                     ()
                                                                                     ())
                                                                                   #(ribcage
                                                                                     #(x)
                                                                                     #((top))
                                                                                     #("i6418")))
                                                                                  (hygiene
                                                                                    guile))
                                                                               (cons #{e1\ 6452}#
                                                                                     #{e2\ 6453}#))))
                                                                 #{tmp\ 6447}#)
                                                          ((lambda (#{_\ 6457}#)
                                                             (syntax-violation
                                                               'case
                                                               "bad clause"
                                                               #{x\ 6417}#
                                                               #{clause\ 6437}#))
                                                           #{tmp\ 6440}#)))
                                                      ($sc-dispatch
                                                        #{tmp\ 6440}#
                                                        '(each-any
                                                           any
                                                           .
                                                           each-any)))))
                                                 ($sc-dispatch
                                                   #{tmp\ 6440}#
                                                   '(#(free-id
                                                       #(syntax-object
                                                         else
                                                         ((top)
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(f clause clauses)
                                                            #((top)
                                                              (top)
                                                              (top))
                                                            #("i6433"
                                                              "i6434"
                                                              "i6435"))
                                                          #(ribcage
                                                            #(_ e m1 m2)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i6421"
                                                              "i6422"
                                                              "i6423"
                                                              "i6424"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(x)
                                                            #((top))
                                                            #("i6418")))
                                                         (hygiene guile)))
                                                     any
                                                     .
                                                     each-any))))
                                              #{clause\ 6437}#)
                                             ((lambda (#{tmp\ 6459}#)
                                                ((lambda (#{rest\ 6461}#)
                                                   ((lambda (#{tmp\ 6462}#)
                                                      ((lambda (#{tmp\ 6463}#)
                                                         (if #{tmp\ 6463}#
                                                           (apply (lambda (#{k\ 6467}#
                                                                           #{e1\ 6468}#
                                                                           #{e2\ 6469}#)
                                                                    (list '#(syntax-object
                                                                             if
                                                                             ((top)
                                                                              #(ribcage
                                                                                #(k
                                                                                  e1
                                                                                  e2)
                                                                                #((top)
                                                                                  (top)
                                                                                  (top))
                                                                                #("i6464"
                                                                                  "i6465"
                                                                                  "i6466"))
                                                                              #(ribcage
                                                                                #(rest)
                                                                                #((top))
                                                                                #("i6460"))
                                                                              #(ribcage
                                                                                ()
                                                                                ()
                                                                                ())
                                                                              #(ribcage
                                                                                #(f
                                                                                  clause
                                                                                  clauses)
                                                                                #((top)
                                                                                  (top)
                                                                                  (top))
                                                                                #("i6433"
                                                                                  "i6434"
                                                                                  "i6435"))
                                                                              #(ribcage
                                                                                #(_
                                                                                  e
                                                                                  m1
                                                                                  m2)
                                                                                #((top)
                                                                                  (top)
                                                                                  (top)
                                                                                  (top))
                                                                                #("i6421"
                                                                                  "i6422"
                                                                                  "i6423"
                                                                                  "i6424"))
                                                                              #(ribcage
                                                                                ()
                                                                                ()
                                                                                ())
                                                                              #(ribcage
                                                                                #(x)
                                                                                #((top))
                                                                                #("i6418")))
                                                                             (hygiene
                                                                               guile))
                                                                          (list '#(syntax-object
                                                                                   memv
                                                                                   ((top)
                                                                                    #(ribcage
                                                                                      #(k
                                                                                        e1
                                                                                        e2)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i6464"
                                                                                        "i6465"
                                                                                        "i6466"))
                                                                                    #(ribcage
                                                                                      #(rest)
                                                                                      #((top))
                                                                                      #("i6460"))
                                                                                    #(ribcage
                                                                                      ()
                                                                                      ()
                                                                                      ())
                                                                                    #(ribcage
                                                                                      #(f
                                                                                        clause
                                                                                        clauses)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i6433"
                                                                                        "i6434"
                                                                                        "i6435"))
                                                                                    #(ribcage
                                                                                      #(_
                                                                                        e
                                                                                        m1
                                                                                        m2)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i6421"
                                                                                        "i6422"
                                                                                        "i6423"
                                                                                        "i6424"))
                                                                                    #(ribcage
                                                                                      ()
                                                                                      ()
                                                                                      ())
                                                                                    #(ribcage
                                                                                      #(x)
                                                                                      #((top))
                                                                                      #("i6418")))
                                                                                   (hygiene
                                                                                     guile))
                                                                                '#(syntax-object
                                                                                   t
                                                                                   ((top)
                                                                                    #(ribcage
                                                                                      #(k
                                                                                        e1
                                                                                        e2)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i6464"
                                                                                        "i6465"
                                                                                        "i6466"))
                                                                                    #(ribcage
                                                                                      #(rest)
                                                                                      #((top))
                                                                                      #("i6460"))
                                                                                    #(ribcage
                                                                                      ()
                                                                                      ()
                                                                                      ())
                                                                                    #(ribcage
                                                                                      #(f
                                                                                        clause
                                                                                        clauses)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i6433"
                                                                                        "i6434"
                                                                                        "i6435"))
                                                                                    #(ribcage
                                                                                      #(_
                                                                                        e
                                                                                        m1
                                                                                        m2)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i6421"
                                                                                        "i6422"
                                                                                        "i6423"
                                                                                        "i6424"))
                                                                                    #(ribcage
                                                                                      ()
                                                                                      ()
                                                                                      ())
                                                                                    #(ribcage
                                                                                      #(x)
                                                                                      #((top))
                                                                                      #("i6418")))
                                                                                   (hygiene
                                                                                     guile))
                                                                                (list '#(syntax-object
                                                                                         quote
                                                                                         ((top)
                                                                                          #(ribcage
                                                                                            #(k
                                                                                              e1
                                                                                              e2)
                                                                                            #((top)
                                                                                              (top)
                                                                                              (top))
                                                                                            #("i6464"
                                                                                              "i6465"
                                                                                              "i6466"))
                                                                                          #(ribcage
                                                                                            #(rest)
                                                                                            #((top))
                                                                                            #("i6460"))
                                                                                          #(ribcage
                                                                                            ()
                                                                                            ()
                                                                                            ())
                                                                                          #(ribcage
                                                                                            #(f
                                                                                              clause
                                                                                              clauses)
                                                                                            #((top)
                                                                                              (top)
                                                                                              (top))
                                                                                            #("i6433"
                                                                                              "i6434"
                                                                                              "i6435"))
                                                                                          #(ribcage
                                                                                            #(_
                                                                                              e
                                                                                              m1
                                                                                              m2)
                                                                                            #((top)
                                                                                              (top)
                                                                                              (top)
                                                                                              (top))
                                                                                            #("i6421"
                                                                                              "i6422"
                                                                                              "i6423"
                                                                                              "i6424"))
                                                                                          #(ribcage
                                                                                            ()
                                                                                            ()
                                                                                            ())
                                                                                          #(ribcage
                                                                                            #(x)
                                                                                            #((top))
                                                                                            #("i6418")))
                                                                                         (hygiene
                                                                                           guile))
                                                                                      #{k\ 6467}#))
                                                                          (cons '#(syntax-object
                                                                                   begin
                                                                                   ((top)
                                                                                    #(ribcage
                                                                                      #(k
                                                                                        e1
                                                                                        e2)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i6464"
                                                                                        "i6465"
                                                                                        "i6466"))
                                                                                    #(ribcage
                                                                                      #(rest)
                                                                                      #((top))
                                                                                      #("i6460"))
                                                                                    #(ribcage
                                                                                      ()
                                                                                      ()
                                                                                      ())
                                                                                    #(ribcage
                                                                                      #(f
                                                                                        clause
                                                                                        clauses)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i6433"
                                                                                        "i6434"
                                                                                        "i6435"))
                                                                                    #(ribcage
                                                                                      #(_
                                                                                        e
                                                                                        m1
                                                                                        m2)
                                                                                      #((top)
                                                                                        (top)
                                                                                        (top)
                                                                                        (top))
                                                                                      #("i6421"
                                                                                        "i6422"
                                                                                        "i6423"
                                                                                        "i6424"))
                                                                                    #(ribcage
                                                                                      ()
                                                                                      ()
                                                                                      ())
                                                                                    #(ribcage
                                                                                      #(x)
                                                                                      #((top))
                                                                                      #("i6418")))
                                                                                   (hygiene
                                                                                     guile))
                                                                                (cons #{e1\ 6468}#
                                                                                      #{e2\ 6469}#))
                                                                          #{rest\ 6461}#))
                                                                  #{tmp\ 6463}#)
                                                           ((lambda (#{_\ 6473}#)
                                                              (syntax-violation
                                                                'case
                                                                "bad clause"
                                                                #{x\ 6417}#
                                                                #{clause\ 6437}#))
                                                            #{tmp\ 6462}#)))
                                                       ($sc-dispatch
                                                         #{tmp\ 6462}#
                                                         '(each-any
                                                            any
                                                            .
                                                            each-any))))
                                                    #{clause\ 6437}#))
                                                 #{tmp\ 6459}#))
                                              (#{f\ 6436}#
                                                (car #{clauses\ 6438}#)
                                                (cdr #{clauses\ 6438}#)))))))
                                (#{f\ 6436}# #{m1\ 6427}# #{m2\ 6428}#))))
                           #{tmp\ 6420}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp\ 6419}#)))
                ($sc-dispatch
                  #{tmp\ 6419}#
                  '(any any any . each-any))))
             #{x\ 6417}#))
          (module-name (current-module)))))

(define identifier-syntax
  (make-syntax-transformer
    'identifier-syntax
    'macro
    (cons (lambda (#{x\ 6474}#)
            ((lambda (#{tmp\ 6476}#)
               ((lambda (#{tmp\ 6477}#)
                  (if #{tmp\ 6477}#
                    (apply (lambda (#{_\ 6480}# #{e\ 6481}#)
                             (list '#(syntax-object
                                      lambda
                                      ((top)
                                       #(ribcage
                                         #(_ e)
                                         #((top) (top))
                                         #("i6478" "i6479"))
                                       #(ribcage () () ())
                                       #(ribcage #(x) #((top)) #("i6475")))
                                      (hygiene guile))
                                   '(#(syntax-object
                                       x
                                       ((top)
                                        #(ribcage
                                          #(_ e)
                                          #((top) (top))
                                          #("i6478" "i6479"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i6475")))
                                       (hygiene guile)))
                                   '#((#(syntax-object
                                         macro-type
                                         ((top)
                                          #(ribcage
                                            #(_ e)
                                            #((top) (top))
                                            #("i6478" "i6479"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i6475")))
                                         (hygiene guile))
                                       .
                                       #(syntax-object
                                         identifier-syntax
                                         ((top)
                                          #(ribcage
                                            #(_ e)
                                            #((top) (top))
                                            #("i6478" "i6479"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i6475")))
                                         (hygiene guile))))
                                   (list '#(syntax-object
                                            syntax-case
                                            ((top)
                                             #(ribcage
                                               #(_ e)
                                               #((top) (top))
                                               #("i6478" "i6479"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x)
                                               #((top))
                                               #("i6475")))
                                            (hygiene guile))
                                         '#(syntax-object
                                            x
                                            ((top)
                                             #(ribcage
                                               #(_ e)
                                               #((top) (top))
                                               #("i6478" "i6479"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x)
                                               #((top))
                                               #("i6475")))
                                            (hygiene guile))
                                         '()
                                         (list '#(syntax-object
                                                  id
                                                  ((top)
                                                   #(ribcage
                                                     #(_ e)
                                                     #((top) (top))
                                                     #("i6478" "i6479"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i6475")))
                                                  (hygiene guile))
                                               '(#(syntax-object
                                                   identifier?
                                                   ((top)
                                                    #(ribcage
                                                      #(_ e)
                                                      #((top) (top))
                                                      #("i6478" "i6479"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i6475")))
                                                   (hygiene guile))
                                                 (#(syntax-object
                                                    syntax
                                                    ((top)
                                                     #(ribcage
                                                       #(_ e)
                                                       #((top) (top))
                                                       #("i6478" "i6479"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("i6475")))
                                                    (hygiene guile))
                                                  #(syntax-object
                                                    id
                                                    ((top)
                                                     #(ribcage
                                                       #(_ e)
                                                       #((top) (top))
                                                       #("i6478" "i6479"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("i6475")))
                                                    (hygiene guile))))
                                               (list '#(syntax-object
                                                        syntax
                                                        ((top)
                                                         #(ribcage
                                                           #(_ e)
                                                           #((top) (top))
                                                           #("i6478" "i6479"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("i6475")))
                                                        (hygiene guile))
                                                     #{e\ 6481}#))
                                         (list (cons #{_\ 6480}#
                                                     '(#(syntax-object
                                                         x
                                                         ((top)
                                                          #(ribcage
                                                            #(_ e)
                                                            #((top) (top))
                                                            #("i6478" "i6479"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(x)
                                                            #((top))
                                                            #("i6475")))
                                                         (hygiene guile))
                                                       #(syntax-object
                                                         ...
                                                         ((top)
                                                          #(ribcage
                                                            #(_ e)
                                                            #((top) (top))
                                                            #("i6478" "i6479"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(x)
                                                            #((top))
                                                            #("i6475")))
                                                         (hygiene guile))))
                                               (list '#(syntax-object
                                                        syntax
                                                        ((top)
                                                         #(ribcage
                                                           #(_ e)
                                                           #((top) (top))
                                                           #("i6478" "i6479"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("i6475")))
                                                        (hygiene guile))
                                                     (cons #{e\ 6481}#
                                                           '(#(syntax-object
                                                               x
                                                               ((top)
                                                                #(ribcage
                                                                  #(_ e)
                                                                  #((top)
                                                                    (top))
                                                                  #("i6478"
                                                                    "i6479"))
                                                                #(ribcage
                                                                  ()
                                                                  ()
                                                                  ())
                                                                #(ribcage
                                                                  #(x)
                                                                  #((top))
                                                                  #("i6475")))
                                                               (hygiene guile))
                                                             #(syntax-object
                                                               ...
                                                               ((top)
                                                                #(ribcage
                                                                  #(_ e)
                                                                  #((top)
                                                                    (top))
                                                                  #("i6478"
                                                                    "i6479"))
                                                                #(ribcage
                                                                  ()
                                                                  ()
                                                                  ())
                                                                #(ribcage
                                                                  #(x)
                                                                  #((top))
                                                                  #("i6475")))
                                                               (hygiene
                                                                 guile)))))))))
                           #{tmp\ 6477}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp\ 6476}#)))
                ($sc-dispatch #{tmp\ 6476}# (quote (any any)))))
             #{x\ 6474}#))
          (module-name (current-module)))))

(define define*
  (make-syntax-transformer
    'define*
    'macro
    (cons (lambda (#{x\ 6482}#)
            ((lambda (#{tmp\ 6484}#)
               ((lambda (#{tmp\ 6485}#)
                  (if #{tmp\ 6485}#
                    (apply (lambda (#{_\ 6491}#
                                    #{id\ 6492}#
                                    #{args\ 6493}#
                                    #{b0\ 6494}#
                                    #{b1\ 6495}#)
                             (list '#(syntax-object
                                      define
                                      ((top)
                                       #(ribcage
                                         #(_ id args b0 b1)
                                         #((top) (top) (top) (top) (top))
                                         #("i6486"
                                           "i6487"
                                           "i6488"
                                           "i6489"
                                           "i6490"))
                                       #(ribcage () () ())
                                       #(ribcage #(x) #((top)) #("i6483")))
                                      (hygiene guile))
                                   #{id\ 6492}#
                                   (cons '#(syntax-object
                                            lambda*
                                            ((top)
                                             #(ribcage
                                               #(_ id args b0 b1)
                                               #((top) (top) (top) (top) (top))
                                               #("i6486"
                                                 "i6487"
                                                 "i6488"
                                                 "i6489"
                                                 "i6490"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x)
                                               #((top))
                                               #("i6483")))
                                            (hygiene guile))
                                         (cons #{args\ 6493}#
                                               (cons #{b0\ 6494}#
                                                     #{b1\ 6495}#)))))
                           #{tmp\ 6485}#)
                    ((lambda (#{tmp\ 6497}#)
                       (if (if #{tmp\ 6497}#
                             (apply (lambda (#{_\ 6501}#
                                             #{id\ 6502}#
                                             #{val\ 6503}#)
                                      (identifier?
                                        '#(syntax-object
                                           x
                                           ((top)
                                            #(ribcage
                                              #(_ id val)
                                              #((top) (top) (top))
                                              #("i6498" "i6499" "i6500"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(x)
                                              #((top))
                                              #("i6483")))
                                           (hygiene guile))))
                                    #{tmp\ 6497}#)
                             #f)
                         (apply (lambda (#{_\ 6507}#
                                         #{id\ 6508}#
                                         #{val\ 6509}#)
                                  (list '#(syntax-object
                                           define
                                           ((top)
                                            #(ribcage
                                              #(_ id val)
                                              #((top) (top) (top))
                                              #("i6504" "i6505" "i6506"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(x)
                                              #((top))
                                              #("i6483")))
                                           (hygiene guile))
                                        #{id\ 6508}#
                                        #{val\ 6509}#))
                                #{tmp\ 6497}#)
                         (syntax-violation
                           #f
                           "source expression failed to match any pattern"
                           #{tmp\ 6484}#)))
                     ($sc-dispatch
                       #{tmp\ 6484}#
                       '(any any any)))))
                ($sc-dispatch
                  #{tmp\ 6484}#
                  '(any (any . any) any . each-any))))
             #{x\ 6482}#))
          (module-name (current-module)))))

