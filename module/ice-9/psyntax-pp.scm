(eval-when (compile) (set-current-module (resolve-module (quote (guile)))))
(if #f #f)

(let ((#{gen-label _85hotwsCta0JfYIjI4J3p}# (if #f #f))
      (#{transformer-environment _85hotwsCta0JfYIjI4J39}#
        (if #f #f)))
  (letrec*
    ((#{top-level-eval-hook _85hotwsCta0JfYIjI4J2@}#
       (lambda (#{x _85hotwsCta0JfYIjI4PLs}#
                #{mod _85hotwsCta0JfYIjI4PLt}#)
         (primitive-eval #{x _85hotwsCta0JfYIjI4PLs}#)))
     (#{get-global-definition-hook _85hotwsCta0JfYIjI4J3C}#
       (lambda (#{symbol _85hotwsCta0JfYIjI4MjC}#
                #{module _85hotwsCta0JfYIjI4MjD}#)
         (begin
           (if (if (not #{module _85hotwsCta0JfYIjI4MjD}#)
                 (current-module)
                 #f)
             (warn "module system is booted, we should have a module"
                   #{symbol _85hotwsCta0JfYIjI4MjC}#))
           (let ((#{v _85hotwsCta0JfYIjI4MjE}#
                   (module-variable
                     (if #{module _85hotwsCta0JfYIjI4MjD}#
                       (resolve-module
                         (cdr #{module _85hotwsCta0JfYIjI4MjD}#))
                       (current-module))
                     #{symbol _85hotwsCta0JfYIjI4MjC}#)))
             (if #{v _85hotwsCta0JfYIjI4MjE}#
               (if (variable-bound? #{v _85hotwsCta0JfYIjI4MjE}#)
                 (let ((#{val _85hotwsCta0JfYIjI4MjG}#
                         (variable-ref #{v _85hotwsCta0JfYIjI4MjE}#)))
                   (if (macro? #{val _85hotwsCta0JfYIjI4MjG}#)
                     (if (macro-type #{val _85hotwsCta0JfYIjI4MjG}#)
                       (cons (macro-type #{val _85hotwsCta0JfYIjI4MjG}#)
                             (macro-binding #{val _85hotwsCta0JfYIjI4MjG}#))
                       #f)
                     #f))
                 #f)
               #f)))))
     (#{maybe-name-value! _85hotwsCta0JfYIjI4J3E}#
       (lambda (#{name _85hotwsCta0JfYIjI4Mnb}#
                #{val _85hotwsCta0JfYIjI4Mnc}#)
         (if (if (struct? #{val _85hotwsCta0JfYIjI4Mnc}#)
               (eq? (struct-vtable #{val _85hotwsCta0JfYIjI4Mnc}#)
                    (vector-ref %expanded-vtables 13))
               #f)
           (let ((#{meta _85hotwsCta0JfYIjI4Mnj}#
                   (struct-ref #{val _85hotwsCta0JfYIjI4Mnc}# 1)))
             (if (not (assq 'name #{meta _85hotwsCta0JfYIjI4Mnj}#))
               (let ((#{v _85hotwsCta0JfYIjI4Mno}#
                       (cons (cons 'name #{name _85hotwsCta0JfYIjI4Mnb}#)
                             #{meta _85hotwsCta0JfYIjI4Mnj}#)))
                 (struct-set!
                   #{val _85hotwsCta0JfYIjI4Mnc}#
                   1
                   #{v _85hotwsCta0JfYIjI4Mno}#)))))))
     (#{build-application _85hotwsCta0JfYIjI4J3G}#
       (lambda (#{source _85hotwsCta0JfYIjI4MjI}#
                #{fun-exp _85hotwsCta0JfYIjI4MjJ}#
                #{arg-exps _85hotwsCta0JfYIjI4MjK}#)
         (make-struct/no-tail
           (vector-ref %expanded-vtables 11)
           #{source _85hotwsCta0JfYIjI4MjI}#
           #{fun-exp _85hotwsCta0JfYIjI4MjJ}#
           #{arg-exps _85hotwsCta0JfYIjI4MjK}#)))
     (#{build-conditional _85hotwsCta0JfYIjI4J3H}#
       (lambda (#{source _85hotwsCta0JfYIjI4MjQ}#
                #{test-exp _85hotwsCta0JfYIjI4MjR}#
                #{then-exp _85hotwsCta0JfYIjI4MjS}#
                #{else-exp _85hotwsCta0JfYIjI4MjT}#)
         (make-struct/no-tail
           (vector-ref %expanded-vtables 10)
           #{source _85hotwsCta0JfYIjI4MjQ}#
           #{test-exp _85hotwsCta0JfYIjI4MjR}#
           #{then-exp _85hotwsCta0JfYIjI4MjS}#
           #{else-exp _85hotwsCta0JfYIjI4MjT}#)))
     (#{build-dynlet _85hotwsCta0JfYIjI4J3I}#
       (lambda (#{source _85hotwsCta0JfYIjI4Mja}#
                #{fluids _85hotwsCta0JfYIjI4Mjb}#
                #{vals _85hotwsCta0JfYIjI4Mjc}#
                #{body _85hotwsCta0JfYIjI4Mjd}#)
         (make-struct/no-tail
           (vector-ref %expanded-vtables 17)
           #{source _85hotwsCta0JfYIjI4Mja}#
           #{fluids _85hotwsCta0JfYIjI4Mjb}#
           #{vals _85hotwsCta0JfYIjI4Mjc}#
           #{body _85hotwsCta0JfYIjI4Mjd}#)))
     (#{build-lexical-reference _85hotwsCta0JfYIjI4J3J}#
       (lambda (#{type _85hotwsCta0JfYIjI4PLu}#
                #{source _85hotwsCta0JfYIjI4PLv}#
                #{name _85hotwsCta0JfYIjI4PLw}#
                #{var _85hotwsCta0JfYIjI4PLx}#)
         (make-struct/no-tail
           (vector-ref %expanded-vtables 3)
           #{source _85hotwsCta0JfYIjI4PLv}#
           #{name _85hotwsCta0JfYIjI4PLw}#
           #{var _85hotwsCta0JfYIjI4PLx}#)))
     (#{build-lexical-assignment _85hotwsCta0JfYIjI4J3K}#
       (lambda (#{source _85hotwsCta0JfYIjI4Mjk}#
                #{name _85hotwsCta0JfYIjI4Mjl}#
                #{var _85hotwsCta0JfYIjI4Mjm}#
                #{exp _85hotwsCta0JfYIjI4Mjn}#)
         (begin
           (if (if (struct? #{exp _85hotwsCta0JfYIjI4Mjn}#)
                 (eq? (struct-vtable #{exp _85hotwsCta0JfYIjI4Mjn}#)
                      (vector-ref %expanded-vtables 13))
                 #f)
             (let ((#{meta _85hotwsCta0JfYIjI4Mj3}#
                     (struct-ref #{exp _85hotwsCta0JfYIjI4Mjn}# 1)))
               (if (not (assq 'name #{meta _85hotwsCta0JfYIjI4Mj3}#))
                 (let ((#{v _85hotwsCta0JfYIjI4Mj$}#
                         (cons (cons 'name #{name _85hotwsCta0JfYIjI4Mjl}#)
                               #{meta _85hotwsCta0JfYIjI4Mj3}#)))
                   (struct-set!
                     #{exp _85hotwsCta0JfYIjI4Mjn}#
                     1
                     #{v _85hotwsCta0JfYIjI4Mj$}#)))))
           (make-struct/no-tail
             (vector-ref %expanded-vtables 4)
             #{source _85hotwsCta0JfYIjI4Mjk}#
             #{name _85hotwsCta0JfYIjI4Mjl}#
             #{var _85hotwsCta0JfYIjI4Mjm}#
             #{exp _85hotwsCta0JfYIjI4Mjn}#))))
     (#{analyze-variable _85hotwsCta0JfYIjI4J3L}#
       (lambda (#{mod _85hotwsCta0JfYIjI4PL3}#
                #{var _85hotwsCta0JfYIjI4PL4}#
                #{modref-cont _85hotwsCta0JfYIjI4PL5}#
                #{bare-cont _85hotwsCta0JfYIjI4PL6}#)
         (if (not #{mod _85hotwsCta0JfYIjI4PL3}#)
           (#{bare-cont _85hotwsCta0JfYIjI4PL6}#
             #{var _85hotwsCta0JfYIjI4PL4}#)
           (let ((#{kind _85hotwsCta0JfYIjI4PL7}#
                   (car #{mod _85hotwsCta0JfYIjI4PL3}#))
                 (#{mod _85hotwsCta0JfYIjI4PL8}#
                   (cdr #{mod _85hotwsCta0JfYIjI4PL3}#)))
             (if (eqv? #{kind _85hotwsCta0JfYIjI4PL7}# 'public)
               (#{modref-cont _85hotwsCta0JfYIjI4PL5}#
                 #{mod _85hotwsCta0JfYIjI4PL8}#
                 #{var _85hotwsCta0JfYIjI4PL4}#
                 #t)
               (if (eqv? #{kind _85hotwsCta0JfYIjI4PL7}# 'private)
                 (if (not (equal?
                            #{mod _85hotwsCta0JfYIjI4PL8}#
                            (module-name (current-module))))
                   (#{modref-cont _85hotwsCta0JfYIjI4PL5}#
                     #{mod _85hotwsCta0JfYIjI4PL8}#
                     #{var _85hotwsCta0JfYIjI4PL4}#
                     #f)
                   (#{bare-cont _85hotwsCta0JfYIjI4PL6}#
                     #{var _85hotwsCta0JfYIjI4PL4}#))
                 (if (eqv? #{kind _85hotwsCta0JfYIjI4PL7}# 'bare)
                   (#{bare-cont _85hotwsCta0JfYIjI4PL6}#
                     #{var _85hotwsCta0JfYIjI4PL4}#)
                   (if (eqv? #{kind _85hotwsCta0JfYIjI4PL7}# 'hygiene)
                     (if (if (not (equal?
                                    #{mod _85hotwsCta0JfYIjI4PL8}#
                                    (module-name (current-module))))
                           (module-variable
                             (resolve-module #{mod _85hotwsCta0JfYIjI4PL8}#)
                             #{var _85hotwsCta0JfYIjI4PL4}#)
                           #f)
                       (#{modref-cont _85hotwsCta0JfYIjI4PL5}#
                         #{mod _85hotwsCta0JfYIjI4PL8}#
                         #{var _85hotwsCta0JfYIjI4PL4}#
                         #f)
                       (#{bare-cont _85hotwsCta0JfYIjI4PL6}#
                         #{var _85hotwsCta0JfYIjI4PL4}#))
                     (syntax-violation
                       #f
                       "bad module kind"
                       #{var _85hotwsCta0JfYIjI4PL4}#
                       #{mod _85hotwsCta0JfYIjI4PL8}#)))))))))
     (#{build-global-reference _85hotwsCta0JfYIjI4J3M}#
       (lambda (#{source _85hotwsCta0JfYIjI4PML}#
                #{var _85hotwsCta0JfYIjI4PMM}#
                #{mod _85hotwsCta0JfYIjI4PMN}#)
         (#{analyze-variable _85hotwsCta0JfYIjI4J3L}#
           #{mod _85hotwsCta0JfYIjI4PMN}#
           #{var _85hotwsCta0JfYIjI4PMM}#
           (lambda (#{mod _85hotwsCta0JfYIjI4PMQ}#
                    #{var _85hotwsCta0JfYIjI4PMR}#
                    #{public? _85hotwsCta0JfYIjI4PMS}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 5)
               #{source _85hotwsCta0JfYIjI4PML}#
               #{mod _85hotwsCta0JfYIjI4PMQ}#
               #{var _85hotwsCta0JfYIjI4PMR}#
               #{public? _85hotwsCta0JfYIjI4PMS}#))
           (lambda (#{var _85hotwsCta0JfYIjI4PMa}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 7)
               #{source _85hotwsCta0JfYIjI4PML}#
               #{var _85hotwsCta0JfYIjI4PMa}#)))))
     (#{build-global-assignment _85hotwsCta0JfYIjI4J3N}#
       (lambda (#{source _85hotwsCta0JfYIjI4MkH}#
                #{var _85hotwsCta0JfYIjI4MkI}#
                #{exp _85hotwsCta0JfYIjI4MkJ}#
                #{mod _85hotwsCta0JfYIjI4MkK}#)
         (begin
           (if (if (struct? #{exp _85hotwsCta0JfYIjI4MkJ}#)
                 (eq? (struct-vtable #{exp _85hotwsCta0JfYIjI4MkJ}#)
                      (vector-ref %expanded-vtables 13))
                 #f)
             (let ((#{meta _85hotwsCta0JfYIjI4Mka}#
                     (struct-ref #{exp _85hotwsCta0JfYIjI4MkJ}# 1)))
               (if (not (assq 'name #{meta _85hotwsCta0JfYIjI4Mka}#))
                 (let ((#{v _85hotwsCta0JfYIjI4Mkh}#
                         (cons (cons 'name #{var _85hotwsCta0JfYIjI4MkI}#)
                               #{meta _85hotwsCta0JfYIjI4Mka}#)))
                   (struct-set!
                     #{exp _85hotwsCta0JfYIjI4MkJ}#
                     1
                     #{v _85hotwsCta0JfYIjI4Mkh}#)))))
           (#{analyze-variable _85hotwsCta0JfYIjI4J3L}#
             #{mod _85hotwsCta0JfYIjI4MkK}#
             #{var _85hotwsCta0JfYIjI4MkI}#
             (lambda (#{mod _85hotwsCta0JfYIjI4Mkm}#
                      #{var _85hotwsCta0JfYIjI4Mkn}#
                      #{public? _85hotwsCta0JfYIjI4Mko}#)
               (make-struct/no-tail
                 (vector-ref %expanded-vtables 6)
                 #{source _85hotwsCta0JfYIjI4MkH}#
                 #{mod _85hotwsCta0JfYIjI4Mkm}#
                 #{var _85hotwsCta0JfYIjI4Mkn}#
                 #{public? _85hotwsCta0JfYIjI4Mko}#
                 #{exp _85hotwsCta0JfYIjI4MkJ}#))
             (lambda (#{var _85hotwsCta0JfYIjI4Mkw}#)
               (make-struct/no-tail
                 (vector-ref %expanded-vtables 8)
                 #{source _85hotwsCta0JfYIjI4MkH}#
                 #{var _85hotwsCta0JfYIjI4Mkw}#
                 #{exp _85hotwsCta0JfYIjI4MkJ}#))))))
     (#{build-global-definition _85hotwsCta0JfYIjI4J3O}#
       (lambda (#{source _85hotwsCta0JfYIjI4PMg}#
                #{var _85hotwsCta0JfYIjI4PMh}#
                #{exp _85hotwsCta0JfYIjI4PMi}#)
         (begin
           (if (if (struct? #{exp _85hotwsCta0JfYIjI4PMi}#)
                 (eq? (struct-vtable #{exp _85hotwsCta0JfYIjI4PMi}#)
                      (vector-ref %expanded-vtables 13))
                 #f)
             (let ((#{meta _85hotwsCta0JfYIjI4PMy}#
                     (struct-ref #{exp _85hotwsCta0JfYIjI4PMi}# 1)))
               (if (not (assq 'name #{meta _85hotwsCta0JfYIjI4PMy}#))
                 (let ((#{v _85hotwsCta0JfYIjI4PM5}#
                         (cons (cons 'name #{var _85hotwsCta0JfYIjI4PMh}#)
                               #{meta _85hotwsCta0JfYIjI4PMy}#)))
                   (struct-set!
                     #{exp _85hotwsCta0JfYIjI4PMi}#
                     1
                     #{v _85hotwsCta0JfYIjI4PM5}#)))))
           (make-struct/no-tail
             (vector-ref %expanded-vtables 9)
             #{source _85hotwsCta0JfYIjI4PMg}#
             #{var _85hotwsCta0JfYIjI4PMh}#
             #{exp _85hotwsCta0JfYIjI4PMi}#))))
     (#{build-simple-lambda _85hotwsCta0JfYIjI4J3P}#
       (lambda (#{src _85hotwsCta0JfYIjI4Mk2}#
                #{req _85hotwsCta0JfYIjI4Mk3}#
                #{rest _85hotwsCta0JfYIjI4Mk4}#
                #{vars _85hotwsCta0JfYIjI4Mk5}#
                #{meta _85hotwsCta0JfYIjI4Mk6}#
                #{exp _85hotwsCta0JfYIjI4Mk7}#)
         (let ((#{body _85hotwsCta0JfYIjI4MlB}#
                 (make-struct/no-tail
                   (vector-ref %expanded-vtables 14)
                   #{src _85hotwsCta0JfYIjI4Mk2}#
                   #{req _85hotwsCta0JfYIjI4Mk3}#
                   #f
                   #{rest _85hotwsCta0JfYIjI4Mk4}#
                   #f
                   '()
                   #{vars _85hotwsCta0JfYIjI4Mk5}#
                   #{exp _85hotwsCta0JfYIjI4Mk7}#
                   #f)))
           (make-struct/no-tail
             (vector-ref %expanded-vtables 13)
             #{src _85hotwsCta0JfYIjI4Mk2}#
             #{meta _85hotwsCta0JfYIjI4Mk6}#
             #{body _85hotwsCta0JfYIjI4MlB}#))))
     (#{build-sequence _85hotwsCta0JfYIjI4J3U}#
       (lambda (#{src _85hotwsCta0JfYIjI4PNB}#
                #{exps _85hotwsCta0JfYIjI4PNC}#)
         (if (null? (cdr #{exps _85hotwsCta0JfYIjI4PNC}#))
           (car #{exps _85hotwsCta0JfYIjI4PNC}#)
           (make-struct/no-tail
             (vector-ref %expanded-vtables 12)
             #{src _85hotwsCta0JfYIjI4PNB}#
             #{exps _85hotwsCta0JfYIjI4PNC}#))))
     (#{build-let _85hotwsCta0JfYIjI4J3V}#
       (lambda (#{src _85hotwsCta0JfYIjI4MlN}#
                #{ids _85hotwsCta0JfYIjI4MlO}#
                #{vars _85hotwsCta0JfYIjI4MlP}#
                #{val-exps _85hotwsCta0JfYIjI4MlQ}#
                #{body-exp _85hotwsCta0JfYIjI4MlR}#)
         (begin
           (for-each
             #{maybe-name-value! _85hotwsCta0JfYIjI4J3E}#
             #{ids _85hotwsCta0JfYIjI4MlO}#
             #{val-exps _85hotwsCta0JfYIjI4MlQ}#)
           (if (null? #{vars _85hotwsCta0JfYIjI4MlP}#)
             #{body-exp _85hotwsCta0JfYIjI4MlR}#
             (make-struct/no-tail
               (vector-ref %expanded-vtables 15)
               #{src _85hotwsCta0JfYIjI4MlN}#
               #{ids _85hotwsCta0JfYIjI4MlO}#
               #{vars _85hotwsCta0JfYIjI4MlP}#
               #{val-exps _85hotwsCta0JfYIjI4MlQ}#
               #{body-exp _85hotwsCta0JfYIjI4MlR}#)))))
     (#{build-named-let _85hotwsCta0JfYIjI4J3W}#
       (lambda (#{src _85hotwsCta0JfYIjI4Mlp}#
                #{ids _85hotwsCta0JfYIjI4Mlq}#
                #{vars _85hotwsCta0JfYIjI4Mlr}#
                #{val-exps _85hotwsCta0JfYIjI4Mls}#
                #{body-exp _85hotwsCta0JfYIjI4Mlt}#)
         (let ((#{f _85hotwsCta0JfYIjI4Mlu}#
                 (car #{vars _85hotwsCta0JfYIjI4Mlr}#))
               (#{f-name _85hotwsCta0JfYIjI4Mlv}#
                 (car #{ids _85hotwsCta0JfYIjI4Mlq}#))
               (#{vars _85hotwsCta0JfYIjI4Mlw}#
                 (cdr #{vars _85hotwsCta0JfYIjI4Mlr}#))
               (#{ids _85hotwsCta0JfYIjI4Mlx}#
                 (cdr #{ids _85hotwsCta0JfYIjI4Mlq}#)))
           (let ((#{proc _85hotwsCta0JfYIjI4Mly}#
                   (let ((#{body _85hotwsCta0JfYIjI4MmG}#
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 14)
                             #{src _85hotwsCta0JfYIjI4Mlp}#
                             #{ids _85hotwsCta0JfYIjI4Mlx}#
                             #f
                             #f
                             #f
                             '()
                             #{vars _85hotwsCta0JfYIjI4Mlw}#
                             #{body-exp _85hotwsCta0JfYIjI4Mlt}#
                             #f)))
                     (make-struct/no-tail
                       (vector-ref %expanded-vtables 13)
                       #{src _85hotwsCta0JfYIjI4Mlp}#
                       '()
                       #{body _85hotwsCta0JfYIjI4MmG}#))))
             (begin
               (if (if (struct? #{proc _85hotwsCta0JfYIjI4Mly}#)
                     (eq? (struct-vtable #{proc _85hotwsCta0JfYIjI4Mly}#)
                          (vector-ref %expanded-vtables 13))
                     #f)
                 (let ((#{meta _85hotwsCta0JfYIjI4Mme}#
                         (struct-ref #{proc _85hotwsCta0JfYIjI4Mly}# 1)))
                   (if (not (assq 'name #{meta _85hotwsCta0JfYIjI4Mme}#))
                     (let ((#{v _85hotwsCta0JfYIjI4Mml}#
                             (cons (cons 'name
                                         #{f-name _85hotwsCta0JfYIjI4Mlv}#)
                                   #{meta _85hotwsCta0JfYIjI4Mme}#)))
                       (struct-set!
                         #{proc _85hotwsCta0JfYIjI4Mly}#
                         1
                         #{v _85hotwsCta0JfYIjI4Mml}#)))))
               (for-each
                 #{maybe-name-value! _85hotwsCta0JfYIjI4J3E}#
                 #{ids _85hotwsCta0JfYIjI4Mlx}#
                 #{val-exps _85hotwsCta0JfYIjI4Mls}#)
               (let ((#{names _85hotwsCta0JfYIjI4Mm9}#
                       (list #{f-name _85hotwsCta0JfYIjI4Mlv}#))
                     (#{gensyms _85hotwsCta0JfYIjI4Mm$}#
                       (list #{f _85hotwsCta0JfYIjI4Mlu}#))
                     (#{vals _85hotwsCta0JfYIjI4Mm@}#
                       (list #{proc _85hotwsCta0JfYIjI4Mly}#))
                     (#{body _85hotwsCta0JfYIjI4MnA}#
                       (let ((#{fun-exp _85hotwsCta0JfYIjI4MnE}#
                               (make-struct/no-tail
                                 (vector-ref %expanded-vtables 3)
                                 #{src _85hotwsCta0JfYIjI4Mlp}#
                                 #{f-name _85hotwsCta0JfYIjI4Mlv}#
                                 #{f _85hotwsCta0JfYIjI4Mlu}#)))
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 11)
                           #{src _85hotwsCta0JfYIjI4Mlp}#
                           #{fun-exp _85hotwsCta0JfYIjI4MnE}#
                           #{val-exps _85hotwsCta0JfYIjI4Mls}#))))
                 (make-struct/no-tail
                   (vector-ref %expanded-vtables 16)
                   #{src _85hotwsCta0JfYIjI4Mlp}#
                   #f
                   #{names _85hotwsCta0JfYIjI4Mm9}#
                   #{gensyms _85hotwsCta0JfYIjI4Mm$}#
                   #{vals _85hotwsCta0JfYIjI4Mm@}#
                   #{body _85hotwsCta0JfYIjI4MnA}#)))))))
     (#{build-letrec _85hotwsCta0JfYIjI4J3X}#
       (lambda (#{src _85hotwsCta0JfYIjI4MnU}#
                #{in-order? _85hotwsCta0JfYIjI4MnV}#
                #{ids _85hotwsCta0JfYIjI4MnW}#
                #{vars _85hotwsCta0JfYIjI4MnX}#
                #{val-exps _85hotwsCta0JfYIjI4MnY}#
                #{body-exp _85hotwsCta0JfYIjI4MnZ}#)
         (if (null? #{vars _85hotwsCta0JfYIjI4MnX}#)
           #{body-exp _85hotwsCta0JfYIjI4MnZ}#
           (begin
             (for-each
               #{maybe-name-value! _85hotwsCta0JfYIjI4J3E}#
               #{ids _85hotwsCta0JfYIjI4MnW}#
               #{val-exps _85hotwsCta0JfYIjI4MnY}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 16)
               #{src _85hotwsCta0JfYIjI4MnU}#
               #{in-order? _85hotwsCta0JfYIjI4MnV}#
               #{ids _85hotwsCta0JfYIjI4MnW}#
               #{vars _85hotwsCta0JfYIjI4MnX}#
               #{val-exps _85hotwsCta0JfYIjI4MnY}#
               #{body-exp _85hotwsCta0JfYIjI4MnZ}#)))))
     (#{source-annotation _85hotwsCta0JfYIjI4J3g}#
       (lambda (#{x _85hotwsCta0JfYIjI4Mnz}#)
         (if (if (vector? #{x _85hotwsCta0JfYIjI4Mnz}#)
               (if (= (vector-length #{x _85hotwsCta0JfYIjI4Mnz}#)
                      4)
                 (eq? (vector-ref #{x _85hotwsCta0JfYIjI4Mnz}# 0)
                      'syntax-object)
                 #f)
               #f)
           (#{source-annotation _85hotwsCta0JfYIjI4J3g}#
             (vector-ref #{x _85hotwsCta0JfYIjI4Mnz}# 1))
           (if (pair? #{x _85hotwsCta0JfYIjI4Mnz}#)
             (let ((#{props _85hotwsCta0JfYIjI4MoC}#
                     (source-properties #{x _85hotwsCta0JfYIjI4Mnz}#)))
               (if (pair? #{props _85hotwsCta0JfYIjI4MoC}#)
                 #{props _85hotwsCta0JfYIjI4MoC}#
                 #f))
             #f))))
     (#{extend-env _85hotwsCta0JfYIjI4J3h}#
       (lambda (#{labels _85hotwsCta0JfYIjI4MoE}#
                #{bindings _85hotwsCta0JfYIjI4MoF}#
                #{r _85hotwsCta0JfYIjI4MoG}#)
         (if (null? #{labels _85hotwsCta0JfYIjI4MoE}#)
           #{r _85hotwsCta0JfYIjI4MoG}#
           (#{extend-env _85hotwsCta0JfYIjI4J3h}#
             (cdr #{labels _85hotwsCta0JfYIjI4MoE}#)
             (cdr #{bindings _85hotwsCta0JfYIjI4MoF}#)
             (cons (cons (car #{labels _85hotwsCta0JfYIjI4MoE}#)
                         (car #{bindings _85hotwsCta0JfYIjI4MoF}#))
                   #{r _85hotwsCta0JfYIjI4MoG}#)))))
     (#{extend-var-env _85hotwsCta0JfYIjI4J3i}#
       (lambda (#{labels _85hotwsCta0JfYIjI4MoH}#
                #{vars _85hotwsCta0JfYIjI4MoI}#
                #{r _85hotwsCta0JfYIjI4MoJ}#)
         (if (null? #{labels _85hotwsCta0JfYIjI4MoH}#)
           #{r _85hotwsCta0JfYIjI4MoJ}#
           (#{extend-var-env _85hotwsCta0JfYIjI4J3i}#
             (cdr #{labels _85hotwsCta0JfYIjI4MoH}#)
             (cdr #{vars _85hotwsCta0JfYIjI4MoI}#)
             (cons (cons (car #{labels _85hotwsCta0JfYIjI4MoH}#)
                         (cons 'lexical
                               (car #{vars _85hotwsCta0JfYIjI4MoI}#)))
                   #{r _85hotwsCta0JfYIjI4MoJ}#)))))
     (#{macros-only-env _85hotwsCta0JfYIjI4J3j}#
       (lambda (#{r _85hotwsCta0JfYIjI4MoK}#)
         (if (null? #{r _85hotwsCta0JfYIjI4MoK}#)
           '()
           (let ((#{a _85hotwsCta0JfYIjI4MoL}#
                   (car #{r _85hotwsCta0JfYIjI4MoK}#)))
             (if (eq? (car (cdr #{a _85hotwsCta0JfYIjI4MoL}#))
                      'macro)
               (cons #{a _85hotwsCta0JfYIjI4MoL}#
                     (#{macros-only-env _85hotwsCta0JfYIjI4J3j}#
                       (cdr #{r _85hotwsCta0JfYIjI4MoK}#)))
               (#{macros-only-env _85hotwsCta0JfYIjI4J3j}#
                 (cdr #{r _85hotwsCta0JfYIjI4MoK}#)))))))
     (#{global-extend _85hotwsCta0JfYIjI4J3l}#
       (lambda (#{type _85hotwsCta0JfYIjI4MoN}#
                #{sym _85hotwsCta0JfYIjI4MoO}#
                #{val _85hotwsCta0JfYIjI4MoP}#)
         (module-define!
           (current-module)
           #{sym _85hotwsCta0JfYIjI4MoO}#
           (make-syntax-transformer
             #{sym _85hotwsCta0JfYIjI4MoO}#
             #{type _85hotwsCta0JfYIjI4MoN}#
             #{val _85hotwsCta0JfYIjI4MoP}#))))
     (#{id? _85hotwsCta0JfYIjI4J3n}#
       (lambda (#{x _85hotwsCta0JfYIjI4LJz}#)
         (if (symbol? #{x _85hotwsCta0JfYIjI4LJz}#)
           #t
           (if (if (vector? #{x _85hotwsCta0JfYIjI4LJz}#)
                 (if (= (vector-length #{x _85hotwsCta0JfYIjI4LJz}#)
                        4)
                   (eq? (vector-ref #{x _85hotwsCta0JfYIjI4LJz}# 0)
                        'syntax-object)
                   #f)
                 #f)
             (symbol?
               (vector-ref #{x _85hotwsCta0JfYIjI4LJz}# 1))
             #f))))
     (#{gen-labels _85hotwsCta0JfYIjI4J3q}#
       (lambda (#{ls _85hotwsCta0JfYIjI4Moc}#)
         (if (null? #{ls _85hotwsCta0JfYIjI4Moc}#)
           '()
           (cons (#{gen-label _85hotwsCta0JfYIjI4J3p}#)
                 (#{gen-labels _85hotwsCta0JfYIjI4J3q}#
                   (cdr #{ls _85hotwsCta0JfYIjI4Moc}#))))))
     (#{make-binding-wrap _85hotwsCta0JfYIjI4J31}#
       (lambda (#{ids _85hotwsCta0JfYIjI4Mod}#
                #{labels _85hotwsCta0JfYIjI4Moe}#
                #{w _85hotwsCta0JfYIjI4Mof}#)
         (if (null? #{ids _85hotwsCta0JfYIjI4Mod}#)
           #{w _85hotwsCta0JfYIjI4Mof}#
           (cons (car #{w _85hotwsCta0JfYIjI4Mof}#)
                 (cons (let ((#{labelvec _85hotwsCta0JfYIjI4Mog}#
                               (list->vector
                                 #{labels _85hotwsCta0JfYIjI4Moe}#)))
                         (let ((#{n _85hotwsCta0JfYIjI4Moh}#
                                 (vector-length
                                   #{labelvec _85hotwsCta0JfYIjI4Mog}#)))
                           (let ((#{symnamevec _85hotwsCta0JfYIjI4Moi}#
                                   (make-vector #{n _85hotwsCta0JfYIjI4Moh}#))
                                 (#{marksvec _85hotwsCta0JfYIjI4Moj}#
                                   (make-vector #{n _85hotwsCta0JfYIjI4Moh}#)))
                             (begin
                               (letrec*
                                 ((#{f _85hotwsCta0JfYIjI4Mok}#
                                    (lambda (#{ids _85hotwsCta0JfYIjI4Mon}#
                                             #{i _85hotwsCta0JfYIjI4Moo}#)
                                      (if (not (null? #{ids _85hotwsCta0JfYIjI4Mon}#))
                                        (call-with-values
                                          (lambda ()
                                            (let ((#{x _85hotwsCta0JfYIjI4Mor}#
                                                    (car #{ids _85hotwsCta0JfYIjI4Mon}#)))
                                              (if (if (vector?
                                                        #{x _85hotwsCta0JfYIjI4Mor}#)
                                                    (if (= (vector-length
                                                             #{x _85hotwsCta0JfYIjI4Mor}#)
                                                           4)
                                                      (eq? (vector-ref
                                                             #{x _85hotwsCta0JfYIjI4Mor}#
                                                             0)
                                                           'syntax-object)
                                                      #f)
                                                    #f)
                                                (values
                                                  (vector-ref
                                                    #{x _85hotwsCta0JfYIjI4Mor}#
                                                    1)
                                                  (let ((#{m1 _85hotwsCta0JfYIjI4Mo7}#
                                                          (car #{w _85hotwsCta0JfYIjI4Mof}#))
                                                        (#{m2 _85hotwsCta0JfYIjI4Mo8}#
                                                          (car (vector-ref
                                                                 #{x _85hotwsCta0JfYIjI4Mor}#
                                                                 2))))
                                                    (if (null? #{m2 _85hotwsCta0JfYIjI4Mo8}#)
                                                      #{m1 _85hotwsCta0JfYIjI4Mo7}#
                                                      (append
                                                        #{m1 _85hotwsCta0JfYIjI4Mo7}#
                                                        #{m2 _85hotwsCta0JfYIjI4Mo8}#))))
                                                (values
                                                  #{x _85hotwsCta0JfYIjI4Mor}#
                                                  (car #{w _85hotwsCta0JfYIjI4Mof}#)))))
                                          (lambda (#{symname _85hotwsCta0JfYIjI4MpQ}#
                                                   #{marks _85hotwsCta0JfYIjI4MpR}#)
                                            (begin
                                              (vector-set!
                                                #{symnamevec _85hotwsCta0JfYIjI4Moi}#
                                                #{i _85hotwsCta0JfYIjI4Moo}#
                                                #{symname _85hotwsCta0JfYIjI4MpQ}#)
                                              (vector-set!
                                                #{marksvec _85hotwsCta0JfYIjI4Moj}#
                                                #{i _85hotwsCta0JfYIjI4Moo}#
                                                #{marks _85hotwsCta0JfYIjI4MpR}#)
                                              (#{f _85hotwsCta0JfYIjI4Mok}#
                                                (cdr #{ids _85hotwsCta0JfYIjI4Mon}#)
                                                (#{1+}# #{i _85hotwsCta0JfYIjI4Moo}#)))))))))
                                 (#{f _85hotwsCta0JfYIjI4Mok}#
                                   #{ids _85hotwsCta0JfYIjI4Mod}#
                                   0))
                               (vector
                                 'ribcage
                                 #{symnamevec _85hotwsCta0JfYIjI4Moi}#
                                 #{marksvec _85hotwsCta0JfYIjI4Moj}#
                                 #{labelvec _85hotwsCta0JfYIjI4Mog}#)))))
                       (cdr #{w _85hotwsCta0JfYIjI4Mof}#))))))
     (#{join-wraps _85hotwsCta0JfYIjI4J33}#
       (lambda (#{w1 _85hotwsCta0JfYIjI4Mpa}#
                #{w2 _85hotwsCta0JfYIjI4Mpb}#)
         (let ((#{m1 _85hotwsCta0JfYIjI4Mpc}#
                 (car #{w1 _85hotwsCta0JfYIjI4Mpa}#))
               (#{s1 _85hotwsCta0JfYIjI4Mpd}#
                 (cdr #{w1 _85hotwsCta0JfYIjI4Mpa}#)))
           (if (null? #{m1 _85hotwsCta0JfYIjI4Mpc}#)
             (if (null? #{s1 _85hotwsCta0JfYIjI4Mpd}#)
               #{w2 _85hotwsCta0JfYIjI4Mpb}#
               (cons (car #{w2 _85hotwsCta0JfYIjI4Mpb}#)
                     (let ((#{m2 _85hotwsCta0JfYIjI4Mpk}#
                             (cdr #{w2 _85hotwsCta0JfYIjI4Mpb}#)))
                       (if (null? #{m2 _85hotwsCta0JfYIjI4Mpk}#)
                         #{s1 _85hotwsCta0JfYIjI4Mpd}#
                         (append
                           #{s1 _85hotwsCta0JfYIjI4Mpd}#
                           #{m2 _85hotwsCta0JfYIjI4Mpk}#)))))
             (cons (let ((#{m2 _85hotwsCta0JfYIjI4Mpt}#
                           (car #{w2 _85hotwsCta0JfYIjI4Mpb}#)))
                     (if (null? #{m2 _85hotwsCta0JfYIjI4Mpt}#)
                       #{m1 _85hotwsCta0JfYIjI4Mpc}#
                       (append
                         #{m1 _85hotwsCta0JfYIjI4Mpc}#
                         #{m2 _85hotwsCta0JfYIjI4Mpt}#)))
                   (let ((#{m2 _85hotwsCta0JfYIjI4Mp2}#
                           (cdr #{w2 _85hotwsCta0JfYIjI4Mpb}#)))
                     (if (null? #{m2 _85hotwsCta0JfYIjI4Mp2}#)
                       #{s1 _85hotwsCta0JfYIjI4Mpd}#
                       (append
                         #{s1 _85hotwsCta0JfYIjI4Mpd}#
                         #{m2 _85hotwsCta0JfYIjI4Mp2}#))))))))
     (#{same-marks? _85hotwsCta0JfYIjI4J35}#
       (lambda (#{x _85hotwsCta0JfYIjI4Mp7}#
                #{y _85hotwsCta0JfYIjI4Mp8}#)
         (if (eq? #{x _85hotwsCta0JfYIjI4Mp7}#
                  #{y _85hotwsCta0JfYIjI4Mp8}#)
           (eq? #{x _85hotwsCta0JfYIjI4Mp7}#
                #{y _85hotwsCta0JfYIjI4Mp8}#)
           (if (not (null? #{x _85hotwsCta0JfYIjI4Mp7}#))
             (if (not (null? #{y _85hotwsCta0JfYIjI4Mp8}#))
               (if (eq? (car #{x _85hotwsCta0JfYIjI4Mp7}#)
                        (car #{y _85hotwsCta0JfYIjI4Mp8}#))
                 (#{same-marks? _85hotwsCta0JfYIjI4J35}#
                   (cdr #{x _85hotwsCta0JfYIjI4Mp7}#)
                   (cdr #{y _85hotwsCta0JfYIjI4Mp8}#))
                 #f)
               #f)
             #f))))
     (#{id-var-name _85hotwsCta0JfYIjI4J36}#
       (lambda (#{id _85hotwsCta0JfYIjI4MqE}#
                #{w _85hotwsCta0JfYIjI4MqF}#)
         (letrec*
           ((#{search _85hotwsCta0JfYIjI4MqG}#
              (lambda (#{sym _85hotwsCta0JfYIjI4MrD}#
                       #{subst _85hotwsCta0JfYIjI4MrE}#
                       #{marks _85hotwsCta0JfYIjI4MrF}#)
                (if (null? #{subst _85hotwsCta0JfYIjI4MrE}#)
                  (values #f #{marks _85hotwsCta0JfYIjI4MrF}#)
                  (let ((#{fst _85hotwsCta0JfYIjI4MrG}#
                          (car #{subst _85hotwsCta0JfYIjI4MrE}#)))
                    (if (eq? #{fst _85hotwsCta0JfYIjI4MrG}# 'shift)
                      (#{search _85hotwsCta0JfYIjI4MqG}#
                        #{sym _85hotwsCta0JfYIjI4MrD}#
                        (cdr #{subst _85hotwsCta0JfYIjI4MrE}#)
                        (cdr #{marks _85hotwsCta0JfYIjI4MrF}#))
                      (let ((#{symnames _85hotwsCta0JfYIjI4MrI}#
                              (vector-ref #{fst _85hotwsCta0JfYIjI4MrG}# 1)))
                        (if (vector? #{symnames _85hotwsCta0JfYIjI4MrI}#)
                          (let ((#{n _85hotwsCta0JfYIjI4MrU}#
                                  (vector-length
                                    #{symnames _85hotwsCta0JfYIjI4MrI}#)))
                            (letrec*
                              ((#{f _85hotwsCta0JfYIjI4MrV}#
                                 (lambda (#{i _85hotwsCta0JfYIjI4MrX}#)
                                   (if (= #{i _85hotwsCta0JfYIjI4MrX}#
                                          #{n _85hotwsCta0JfYIjI4MrU}#)
                                     (#{search _85hotwsCta0JfYIjI4MqG}#
                                       #{sym _85hotwsCta0JfYIjI4MrD}#
                                       (cdr #{subst _85hotwsCta0JfYIjI4MrE}#)
                                       #{marks _85hotwsCta0JfYIjI4MrF}#)
                                     (if (if (eq? (vector-ref
                                                    #{symnames _85hotwsCta0JfYIjI4MrI}#
                                                    #{i _85hotwsCta0JfYIjI4MrX}#)
                                                  #{sym _85hotwsCta0JfYIjI4MrD}#)
                                           (#{same-marks? _85hotwsCta0JfYIjI4J35}#
                                             #{marks _85hotwsCta0JfYIjI4MrF}#
                                             (vector-ref
                                               (vector-ref
                                                 #{fst _85hotwsCta0JfYIjI4MrG}#
                                                 2)
                                               #{i _85hotwsCta0JfYIjI4MrX}#))
                                           #f)
                                       (values
                                         (vector-ref
                                           (vector-ref
                                             #{fst _85hotwsCta0JfYIjI4MrG}#
                                             3)
                                           #{i _85hotwsCta0JfYIjI4MrX}#)
                                         #{marks _85hotwsCta0JfYIjI4MrF}#)
                                       (#{f _85hotwsCta0JfYIjI4MrV}#
                                         (#{1+}# #{i _85hotwsCta0JfYIjI4MrX}#)))))))
                              (#{f _85hotwsCta0JfYIjI4MrV}# 0)))
                          (letrec*
                            ((#{f _85hotwsCta0JfYIjI4Mr4}#
                               (lambda (#{symnames _85hotwsCta0JfYIjI4Mr6}#
                                        #{i _85hotwsCta0JfYIjI4Mr7}#)
                                 (if (null? #{symnames _85hotwsCta0JfYIjI4Mr6}#)
                                   (#{search _85hotwsCta0JfYIjI4MqG}#
                                     #{sym _85hotwsCta0JfYIjI4MrD}#
                                     (cdr #{subst _85hotwsCta0JfYIjI4MrE}#)
                                     #{marks _85hotwsCta0JfYIjI4MrF}#)
                                   (if (if (eq? (car #{symnames _85hotwsCta0JfYIjI4Mr6}#)
                                                #{sym _85hotwsCta0JfYIjI4MrD}#)
                                         (#{same-marks? _85hotwsCta0JfYIjI4J35}#
                                           #{marks _85hotwsCta0JfYIjI4MrF}#
                                           (list-ref
                                             (vector-ref
                                               #{fst _85hotwsCta0JfYIjI4MrG}#
                                               2)
                                             #{i _85hotwsCta0JfYIjI4Mr7}#))
                                         #f)
                                     (values
                                       (list-ref
                                         (vector-ref
                                           #{fst _85hotwsCta0JfYIjI4MrG}#
                                           3)
                                         #{i _85hotwsCta0JfYIjI4Mr7}#)
                                       #{marks _85hotwsCta0JfYIjI4MrF}#)
                                     (#{f _85hotwsCta0JfYIjI4Mr4}#
                                       (cdr #{symnames _85hotwsCta0JfYIjI4Mr6}#)
                                       (#{1+}# #{i _85hotwsCta0JfYIjI4Mr7}#)))))))
                            (#{f _85hotwsCta0JfYIjI4Mr4}#
                              #{symnames _85hotwsCta0JfYIjI4MrI}#
                              0))))))))))
           (if (symbol? #{id _85hotwsCta0JfYIjI4MqE}#)
             (let ((#{t _85hotwsCta0JfYIjI4MqJ}#
                     (#{search _85hotwsCta0JfYIjI4MqG}#
                       #{id _85hotwsCta0JfYIjI4MqE}#
                       (cdr #{w _85hotwsCta0JfYIjI4MqF}#)
                       (car #{w _85hotwsCta0JfYIjI4MqF}#))))
               (if #{t _85hotwsCta0JfYIjI4MqJ}#
                 #{t _85hotwsCta0JfYIjI4MqJ}#
                 #{id _85hotwsCta0JfYIjI4MqE}#))
             (if (if (vector? #{id _85hotwsCta0JfYIjI4MqE}#)
                   (if (= (vector-length #{id _85hotwsCta0JfYIjI4MqE}#)
                          4)
                     (eq? (vector-ref #{id _85hotwsCta0JfYIjI4MqE}# 0)
                          'syntax-object)
                     #f)
                   #f)
               (let ((#{id _85hotwsCta0JfYIjI4MqY}#
                       (vector-ref #{id _85hotwsCta0JfYIjI4MqE}# 1))
                     (#{w1 _85hotwsCta0JfYIjI4MqZ}#
                       (vector-ref #{id _85hotwsCta0JfYIjI4MqE}# 2)))
                 (let ((#{marks _85hotwsCta0JfYIjI4Mqa}#
                         (let ((#{m1 _85hotwsCta0JfYIjI4Mqk}#
                                 (car #{w _85hotwsCta0JfYIjI4MqF}#))
                               (#{m2 _85hotwsCta0JfYIjI4Mql}#
                                 (car #{w1 _85hotwsCta0JfYIjI4MqZ}#)))
                           (if (null? #{m2 _85hotwsCta0JfYIjI4Mql}#)
                             #{m1 _85hotwsCta0JfYIjI4Mqk}#
                             (append
                               #{m1 _85hotwsCta0JfYIjI4Mqk}#
                               #{m2 _85hotwsCta0JfYIjI4Mql}#)))))
                   (call-with-values
                     (lambda ()
                       (#{search _85hotwsCta0JfYIjI4MqG}#
                         #{id _85hotwsCta0JfYIjI4MqY}#
                         (cdr #{w _85hotwsCta0JfYIjI4MqF}#)
                         #{marks _85hotwsCta0JfYIjI4Mqa}#))
                     (lambda (#{new-id _85hotwsCta0JfYIjI4Mq1}#
                              #{marks _85hotwsCta0JfYIjI4Mq2}#)
                       (if #{new-id _85hotwsCta0JfYIjI4Mq1}#
                         #{new-id _85hotwsCta0JfYIjI4Mq1}#
                         (let ((#{t _85hotwsCta0JfYIjI4Mq$}#
                                 (#{search _85hotwsCta0JfYIjI4MqG}#
                                   #{id _85hotwsCta0JfYIjI4MqY}#
                                   (cdr #{w1 _85hotwsCta0JfYIjI4MqZ}#)
                                   #{marks _85hotwsCta0JfYIjI4Mq2}#)))
                           (if #{t _85hotwsCta0JfYIjI4Mq$}#
                             #{t _85hotwsCta0JfYIjI4Mq$}#
                             #{id _85hotwsCta0JfYIjI4MqY}#)))))))
               (syntax-violation
                 'id-var-name
                 "invalid id"
                 #{id _85hotwsCta0JfYIjI4MqE}#))))))
     (#{locally-bound-identifiers _85hotwsCta0JfYIjI4J37}#
       (lambda (#{w _85hotwsCta0JfYIjI4MsR}#
                #{mod _85hotwsCta0JfYIjI4MsS}#)
         (letrec*
           ((#{scan _85hotwsCta0JfYIjI4MsT}#
              (lambda (#{subst _85hotwsCta0JfYIjI4MsY}#
                       #{results _85hotwsCta0JfYIjI4MsZ}#)
                (if (null? #{subst _85hotwsCta0JfYIjI4MsY}#)
                  #{results _85hotwsCta0JfYIjI4MsZ}#
                  (let ((#{fst _85hotwsCta0JfYIjI4Msa}#
                          (car #{subst _85hotwsCta0JfYIjI4MsY}#)))
                    (if (eq? #{fst _85hotwsCta0JfYIjI4Msa}# 'shift)
                      (#{scan _85hotwsCta0JfYIjI4MsT}#
                        (cdr #{subst _85hotwsCta0JfYIjI4MsY}#)
                        #{results _85hotwsCta0JfYIjI4MsZ}#)
                      (let ((#{symnames _85hotwsCta0JfYIjI4Msc}#
                              (vector-ref #{fst _85hotwsCta0JfYIjI4Msa}# 1))
                            (#{marks _85hotwsCta0JfYIjI4Msd}#
                              (vector-ref #{fst _85hotwsCta0JfYIjI4Msa}# 2)))
                        (if (vector? #{symnames _85hotwsCta0JfYIjI4Msc}#)
                          (#{scan-vector-rib _85hotwsCta0JfYIjI4MsV}#
                            #{subst _85hotwsCta0JfYIjI4MsY}#
                            #{symnames _85hotwsCta0JfYIjI4Msc}#
                            #{marks _85hotwsCta0JfYIjI4Msd}#
                            #{results _85hotwsCta0JfYIjI4MsZ}#)
                          (#{scan-list-rib _85hotwsCta0JfYIjI4MsU}#
                            #{subst _85hotwsCta0JfYIjI4MsY}#
                            #{symnames _85hotwsCta0JfYIjI4Msc}#
                            #{marks _85hotwsCta0JfYIjI4Msd}#
                            #{results _85hotwsCta0JfYIjI4MsZ}#))))))))
            (#{scan-list-rib _85hotwsCta0JfYIjI4MsU}#
              (lambda (#{subst _85hotwsCta0JfYIjI4Mt@}#
                       #{symnames _85hotwsCta0JfYIjI4MuA}#
                       #{marks _85hotwsCta0JfYIjI4MuB}#
                       #{results _85hotwsCta0JfYIjI4MuC}#)
                (letrec*
                  ((#{f _85hotwsCta0JfYIjI4MuD}#
                     (lambda (#{symnames _85hotwsCta0JfYIjI4Mvn}#
                              #{marks _85hotwsCta0JfYIjI4Mvo}#
                              #{results _85hotwsCta0JfYIjI4Mvp}#)
                       (if (null? #{symnames _85hotwsCta0JfYIjI4Mvn}#)
                         (#{scan _85hotwsCta0JfYIjI4MsT}#
                           (cdr #{subst _85hotwsCta0JfYIjI4Mt@}#)
                           #{results _85hotwsCta0JfYIjI4Mvp}#)
                         (#{f _85hotwsCta0JfYIjI4MuD}#
                           (cdr #{symnames _85hotwsCta0JfYIjI4Mvn}#)
                           (cdr #{marks _85hotwsCta0JfYIjI4Mvo}#)
                           (cons (#{wrap _85hotwsCta0JfYIjI4J4E}#
                                   (car #{symnames _85hotwsCta0JfYIjI4Mvn}#)
                                   (let ((#{w _85hotwsCta0JfYIjI4Mvx}#
                                           (cons (car #{marks _85hotwsCta0JfYIjI4Mvo}#)
                                                 #{subst _85hotwsCta0JfYIjI4Mt@}#)))
                                     (cons (cons #f
                                                 (car #{w _85hotwsCta0JfYIjI4Mvx}#))
                                           (cons 'shift
                                                 (cdr #{w _85hotwsCta0JfYIjI4Mvx}#))))
                                   #{mod _85hotwsCta0JfYIjI4MsS}#)
                                 #{results _85hotwsCta0JfYIjI4Mvp}#))))))
                  (#{f _85hotwsCta0JfYIjI4MuD}#
                    #{symnames _85hotwsCta0JfYIjI4MuA}#
                    #{marks _85hotwsCta0JfYIjI4MuB}#
                    #{results _85hotwsCta0JfYIjI4MuC}#))))
            (#{scan-vector-rib _85hotwsCta0JfYIjI4MsV}#
              (lambda (#{subst _85hotwsCta0JfYIjI4Mvy}#
                       #{symnames _85hotwsCta0JfYIjI4Mvz}#
                       #{marks _85hotwsCta0JfYIjI4Mv0}#
                       #{results _85hotwsCta0JfYIjI4Mv1}#)
                (let ((#{n _85hotwsCta0JfYIjI4Mv2}#
                        (vector-length
                          #{symnames _85hotwsCta0JfYIjI4Mvz}#)))
                  (letrec*
                    ((#{f _85hotwsCta0JfYIjI4Mv3}#
                       (lambda (#{i _85hotwsCta0JfYIjI4MxK}#
                                #{results _85hotwsCta0JfYIjI4MxL}#)
                         (if (= #{i _85hotwsCta0JfYIjI4MxK}#
                                #{n _85hotwsCta0JfYIjI4Mv2}#)
                           (#{scan _85hotwsCta0JfYIjI4MsT}#
                             (cdr #{subst _85hotwsCta0JfYIjI4Mvy}#)
                             #{results _85hotwsCta0JfYIjI4MxL}#)
                           (#{f _85hotwsCta0JfYIjI4Mv3}#
                             (#{1+}# #{i _85hotwsCta0JfYIjI4MxK}#)
                             (cons (#{wrap _85hotwsCta0JfYIjI4J4E}#
                                     (vector-ref
                                       #{symnames _85hotwsCta0JfYIjI4Mvz}#
                                       #{i _85hotwsCta0JfYIjI4MxK}#)
                                     (let ((#{w _85hotwsCta0JfYIjI4MxT}#
                                             (cons (vector-ref
                                                     #{marks _85hotwsCta0JfYIjI4Mv0}#
                                                     #{i _85hotwsCta0JfYIjI4MxK}#)
                                                   #{subst _85hotwsCta0JfYIjI4Mvy}#)))
                                       (cons (cons #f
                                                   (car #{w _85hotwsCta0JfYIjI4MxT}#))
                                             (cons 'shift
                                                   (cdr #{w _85hotwsCta0JfYIjI4MxT}#))))
                                     #{mod _85hotwsCta0JfYIjI4MsS}#)
                                   #{results _85hotwsCta0JfYIjI4MxL}#))))))
                    (#{f _85hotwsCta0JfYIjI4Mv3}#
                      0
                      #{results _85hotwsCta0JfYIjI4Mv1}#))))))
           (#{scan _85hotwsCta0JfYIjI4MsT}#
             (cdr #{w _85hotwsCta0JfYIjI4MsR}#)
             '()))))
     (#{valid-bound-ids? _85hotwsCta0JfYIjI4J4B}#
       (lambda (#{ids _85hotwsCta0JfYIjI4MxU}#)
         (if (letrec*
               ((#{all-ids? _85hotwsCta0JfYIjI4MxV}#
                  (lambda (#{ids _85hotwsCta0JfYIjI4Mz3}#)
                    (if (null? #{ids _85hotwsCta0JfYIjI4Mz3}#)
                      (null? #{ids _85hotwsCta0JfYIjI4Mz3}#)
                      (if (let ((#{x _85hotwsCta0JfYIjI4M0C}#
                                  (car #{ids _85hotwsCta0JfYIjI4Mz3}#)))
                            (if (symbol? #{x _85hotwsCta0JfYIjI4M0C}#)
                              #t
                              (if (if (vector? #{x _85hotwsCta0JfYIjI4M0C}#)
                                    (if (= (vector-length
                                             #{x _85hotwsCta0JfYIjI4M0C}#)
                                           4)
                                      (eq? (vector-ref
                                             #{x _85hotwsCta0JfYIjI4M0C}#
                                             0)
                                           'syntax-object)
                                      #f)
                                    #f)
                                (symbol?
                                  (vector-ref #{x _85hotwsCta0JfYIjI4M0C}# 1))
                                #f)))
                        (#{all-ids? _85hotwsCta0JfYIjI4MxV}#
                          (cdr #{ids _85hotwsCta0JfYIjI4Mz3}#))
                        #f)))))
               (#{all-ids? _85hotwsCta0JfYIjI4MxV}#
                 #{ids _85hotwsCta0JfYIjI4MxU}#))
           (#{distinct-bound-ids? _85hotwsCta0JfYIjI4J4C}#
             #{ids _85hotwsCta0JfYIjI4MxU}#)
           #f)))
     (#{distinct-bound-ids? _85hotwsCta0JfYIjI4J4C}#
       (lambda (#{ids _85hotwsCta0JfYIjI4M2C}#)
         (letrec*
           ((#{distinct? _85hotwsCta0JfYIjI4M2D}#
              (lambda (#{ids _85hotwsCta0JfYIjI4M3z}#)
                (if (null? #{ids _85hotwsCta0JfYIjI4M3z}#)
                  (null? #{ids _85hotwsCta0JfYIjI4M3z}#)
                  (if (not (#{bound-id-member? _85hotwsCta0JfYIjI4J4D}#
                             (car #{ids _85hotwsCta0JfYIjI4M3z}#)
                             (cdr #{ids _85hotwsCta0JfYIjI4M3z}#)))
                    (#{distinct? _85hotwsCta0JfYIjI4M2D}#
                      (cdr #{ids _85hotwsCta0JfYIjI4M3z}#))
                    #f)))))
           (#{distinct? _85hotwsCta0JfYIjI4M2D}#
             #{ids _85hotwsCta0JfYIjI4M2C}#))))
     (#{bound-id-member? _85hotwsCta0JfYIjI4J4D}#
       (lambda (#{x _85hotwsCta0JfYIjI4M7F}#
                #{list _85hotwsCta0JfYIjI4M7G}#)
         (if (not (null? #{list _85hotwsCta0JfYIjI4M7G}#))
           (let ((#{t _85hotwsCta0JfYIjI4M7H}#
                   (let ((#{j _85hotwsCta0JfYIjI4M8Y}#
                           (car #{list _85hotwsCta0JfYIjI4M7G}#)))
                     (if (if (if (vector? #{x _85hotwsCta0JfYIjI4M7F}#)
                               (if (= (vector-length
                                        #{x _85hotwsCta0JfYIjI4M7F}#)
                                      4)
                                 (eq? (vector-ref
                                        #{x _85hotwsCta0JfYIjI4M7F}#
                                        0)
                                      'syntax-object)
                                 #f)
                               #f)
                           (if (vector? #{j _85hotwsCta0JfYIjI4M8Y}#)
                             (if (= (vector-length
                                      #{j _85hotwsCta0JfYIjI4M8Y}#)
                                    4)
                               (eq? (vector-ref #{j _85hotwsCta0JfYIjI4M8Y}# 0)
                                    'syntax-object)
                               #f)
                             #f)
                           #f)
                       (if (eq? (vector-ref #{x _85hotwsCta0JfYIjI4M7F}# 1)
                                (vector-ref #{j _85hotwsCta0JfYIjI4M8Y}# 1))
                         (#{same-marks? _85hotwsCta0JfYIjI4J35}#
                           (car (vector-ref #{x _85hotwsCta0JfYIjI4M7F}# 2))
                           (car (vector-ref #{j _85hotwsCta0JfYIjI4M8Y}# 2)))
                         #f)
                       (eq? #{x _85hotwsCta0JfYIjI4M7F}#
                            #{j _85hotwsCta0JfYIjI4M8Y}#)))))
             (if #{t _85hotwsCta0JfYIjI4M7H}#
               #{t _85hotwsCta0JfYIjI4M7H}#
               (#{bound-id-member? _85hotwsCta0JfYIjI4J4D}#
                 #{x _85hotwsCta0JfYIjI4M7F}#
                 (cdr #{list _85hotwsCta0JfYIjI4M7G}#))))
           #f)))
     (#{wrap _85hotwsCta0JfYIjI4J4E}#
       (lambda (#{x _85hotwsCta0JfYIjI4M9E}#
                #{w _85hotwsCta0JfYIjI4M9F}#
                #{defmod _85hotwsCta0JfYIjI4M9G}#)
         (if (if (null? (car #{w _85hotwsCta0JfYIjI4M9F}#))
               (null? (cdr #{w _85hotwsCta0JfYIjI4M9F}#))
               #f)
           #{x _85hotwsCta0JfYIjI4M9E}#
           (if (if (vector? #{x _85hotwsCta0JfYIjI4M9E}#)
                 (if (= (vector-length #{x _85hotwsCta0JfYIjI4M9E}#)
                        4)
                   (eq? (vector-ref #{x _85hotwsCta0JfYIjI4M9E}# 0)
                        'syntax-object)
                   #f)
                 #f)
             (let ((#{expression _85hotwsCta0JfYIjI4M9U}#
                     (vector-ref #{x _85hotwsCta0JfYIjI4M9E}# 1))
                   (#{wrap _85hotwsCta0JfYIjI4M9V}#
                     (#{join-wraps _85hotwsCta0JfYIjI4J33}#
                       #{w _85hotwsCta0JfYIjI4M9F}#
                       (vector-ref #{x _85hotwsCta0JfYIjI4M9E}# 2)))
                   (#{module _85hotwsCta0JfYIjI4M9W}#
                     (vector-ref #{x _85hotwsCta0JfYIjI4M9E}# 3)))
               (vector
                 'syntax-object
                 #{expression _85hotwsCta0JfYIjI4M9U}#
                 #{wrap _85hotwsCta0JfYIjI4M9V}#
                 #{module _85hotwsCta0JfYIjI4M9W}#))
             (if (null? #{x _85hotwsCta0JfYIjI4M9E}#)
               #{x _85hotwsCta0JfYIjI4M9E}#
               (vector
                 'syntax-object
                 #{x _85hotwsCta0JfYIjI4M9E}#
                 #{w _85hotwsCta0JfYIjI4M9F}#
                 #{defmod _85hotwsCta0JfYIjI4M9G}#))))))
     (#{source-wrap _85hotwsCta0JfYIjI4J4F}#
       (lambda (#{x _85hotwsCta0JfYIjI4M9n}#
                #{w _85hotwsCta0JfYIjI4M9o}#
                #{s _85hotwsCta0JfYIjI4M9p}#
                #{defmod _85hotwsCta0JfYIjI4M9q}#)
         (#{wrap _85hotwsCta0JfYIjI4J4E}#
           (begin
             (if (if (pair? #{x _85hotwsCta0JfYIjI4M9n}#)
                   #{s _85hotwsCta0JfYIjI4M9p}#
                   #f)
               (set-source-properties!
                 #{x _85hotwsCta0JfYIjI4M9n}#
                 #{s _85hotwsCta0JfYIjI4M9p}#))
             #{x _85hotwsCta0JfYIjI4M9n}#)
           #{w _85hotwsCta0JfYIjI4M9o}#
           #{defmod _85hotwsCta0JfYIjI4M9q}#)))
     (#{expand-sequence _85hotwsCta0JfYIjI4J4G}#
       (lambda (#{body _85hotwsCta0JfYIjI4PNH}#
                #{r _85hotwsCta0JfYIjI4PNI}#
                #{w _85hotwsCta0JfYIjI4PNJ}#
                #{s _85hotwsCta0JfYIjI4PNK}#
                #{mod _85hotwsCta0JfYIjI4PNL}#)
         (#{build-sequence _85hotwsCta0JfYIjI4J3U}#
           #{s _85hotwsCta0JfYIjI4PNK}#
           (letrec*
             ((#{dobody _85hotwsCta0JfYIjI4POb}#
                (lambda (#{body _85hotwsCta0JfYIjI4PT5}#
                         #{r _85hotwsCta0JfYIjI4PT6}#
                         #{w _85hotwsCta0JfYIjI4PT7}#
                         #{mod _85hotwsCta0JfYIjI4PT8}#)
                  (if (null? #{body _85hotwsCta0JfYIjI4PT5}#)
                    '()
                    (let ((#{first _85hotwsCta0JfYIjI4PT9}#
                            (let ((#{e _85hotwsCta0JfYIjI4PUB}#
                                    (car #{body _85hotwsCta0JfYIjI4PT5}#)))
                              (call-with-values
                                (lambda ()
                                  (#{syntax-type _85hotwsCta0JfYIjI4J4K}#
                                    #{e _85hotwsCta0JfYIjI4PUB}#
                                    #{r _85hotwsCta0JfYIjI4PT6}#
                                    #{w _85hotwsCta0JfYIjI4PT7}#
                                    (#{source-annotation _85hotwsCta0JfYIjI4J3g}#
                                      #{e _85hotwsCta0JfYIjI4PUB}#)
                                    #f
                                    #{mod _85hotwsCta0JfYIjI4PT8}#
                                    #f))
                                (lambda (#{type _85hotwsCta0JfYIjI4PUI}#
                                         #{value _85hotwsCta0JfYIjI4PUJ}#
                                         #{e _85hotwsCta0JfYIjI4PUK}#
                                         #{w _85hotwsCta0JfYIjI4PUL}#
                                         #{s _85hotwsCta0JfYIjI4PUM}#
                                         #{mod _85hotwsCta0JfYIjI4PUN}#)
                                  (#{expand-expr _85hotwsCta0JfYIjI4J4M}#
                                    #{type _85hotwsCta0JfYIjI4PUI}#
                                    #{value _85hotwsCta0JfYIjI4PUJ}#
                                    #{e _85hotwsCta0JfYIjI4PUK}#
                                    #{r _85hotwsCta0JfYIjI4PT6}#
                                    #{w _85hotwsCta0JfYIjI4PUL}#
                                    #{s _85hotwsCta0JfYIjI4PUM}#
                                    #{mod _85hotwsCta0JfYIjI4PUN}#))))))
                      (cons #{first _85hotwsCta0JfYIjI4PT9}#
                            (#{dobody _85hotwsCta0JfYIjI4POb}#
                              (cdr #{body _85hotwsCta0JfYIjI4PT5}#)
                              #{r _85hotwsCta0JfYIjI4PT6}#
                              #{w _85hotwsCta0JfYIjI4PT7}#
                              #{mod _85hotwsCta0JfYIjI4PT8}#)))))))
             (#{dobody _85hotwsCta0JfYIjI4POb}#
               #{body _85hotwsCta0JfYIjI4PNH}#
               #{r _85hotwsCta0JfYIjI4PNI}#
               #{w _85hotwsCta0JfYIjI4PNJ}#
               #{mod _85hotwsCta0JfYIjI4PNL}#)))))
     (#{expand-top-sequence _85hotwsCta0JfYIjI4J4H}#
       (lambda (#{body _85hotwsCta0JfYIjI4M98}#
                #{r _85hotwsCta0JfYIjI4M99}#
                #{w _85hotwsCta0JfYIjI4M9$}#
                #{s _85hotwsCta0JfYIjI4M9@}#
                #{m _85hotwsCta0JfYIjI4M$A}#
                #{esew _85hotwsCta0JfYIjI4M$B}#
                #{mod _85hotwsCta0JfYIjI4M$C}#)
         (letrec*
           ((#{scan _85hotwsCta0JfYIjI4M$D}#
              (lambda (#{body _85hotwsCta0JfYIjI4NAG}#
                       #{r _85hotwsCta0JfYIjI4NAH}#
                       #{w _85hotwsCta0JfYIjI4NAI}#
                       #{s _85hotwsCta0JfYIjI4NAJ}#
                       #{m _85hotwsCta0JfYIjI4NAK}#
                       #{esew _85hotwsCta0JfYIjI4NAL}#
                       #{mod _85hotwsCta0JfYIjI4NAM}#
                       #{exps _85hotwsCta0JfYIjI4NAN}#)
                (if (null? #{body _85hotwsCta0JfYIjI4NAG}#)
                  #{exps _85hotwsCta0JfYIjI4NAN}#
                  (call-with-values
                    (lambda ()
                      (call-with-values
                        (lambda ()
                          (let ((#{e _85hotwsCta0JfYIjI4NAO}#
                                  (car #{body _85hotwsCta0JfYIjI4NAG}#)))
                            (#{syntax-type _85hotwsCta0JfYIjI4J4K}#
                              #{e _85hotwsCta0JfYIjI4NAO}#
                              #{r _85hotwsCta0JfYIjI4NAH}#
                              #{w _85hotwsCta0JfYIjI4NAI}#
                              (let ((#{t _85hotwsCta0JfYIjI4NAS}#
                                      (#{source-annotation _85hotwsCta0JfYIjI4J3g}#
                                        #{e _85hotwsCta0JfYIjI4NAO}#)))
                                (if #{t _85hotwsCta0JfYIjI4NAS}#
                                  #{t _85hotwsCta0JfYIjI4NAS}#
                                  #{s _85hotwsCta0JfYIjI4NAJ}#))
                              #f
                              #{mod _85hotwsCta0JfYIjI4NAM}#
                              #f)))
                        (lambda (#{type _85hotwsCta0JfYIjI4ND9}#
                                 #{value _85hotwsCta0JfYIjI4ND$}#
                                 #{e _85hotwsCta0JfYIjI4ND@}#
                                 #{w _85hotwsCta0JfYIjI4NEA}#
                                 #{s _85hotwsCta0JfYIjI4NEB}#
                                 #{mod _85hotwsCta0JfYIjI4NEC}#)
                          (if (eqv? #{type _85hotwsCta0JfYIjI4ND9}#
                                    'begin-form)
                            (let ((#{tmp _85hotwsCta0JfYIjI4NEH}#
                                    ($sc-dispatch
                                      #{e _85hotwsCta0JfYIjI4ND@}#
                                      '(_))))
                              (if #{tmp _85hotwsCta0JfYIjI4NEH}#
                                (@apply
                                  (lambda () #{exps _85hotwsCta0JfYIjI4NAN}#)
                                  #{tmp _85hotwsCta0JfYIjI4NEH}#)
                                (let ((#{tmp _85hotwsCta0JfYIjI4NEL}#
                                        ($sc-dispatch
                                          #{e _85hotwsCta0JfYIjI4ND@}#
                                          '(_ any . each-any))))
                                  (if #{tmp _85hotwsCta0JfYIjI4NEL}#
                                    (@apply
                                      (lambda (#{e1 _85hotwsCta0JfYIjI4NEP}#
                                               #{e2 _85hotwsCta0JfYIjI4NEQ}#)
                                        (#{scan _85hotwsCta0JfYIjI4M$D}#
                                          (cons #{e1 _85hotwsCta0JfYIjI4NEP}#
                                                #{e2 _85hotwsCta0JfYIjI4NEQ}#)
                                          #{r _85hotwsCta0JfYIjI4NAH}#
                                          #{w _85hotwsCta0JfYIjI4NEA}#
                                          #{s _85hotwsCta0JfYIjI4NEB}#
                                          #{m _85hotwsCta0JfYIjI4NAK}#
                                          #{esew _85hotwsCta0JfYIjI4NAL}#
                                          #{mod _85hotwsCta0JfYIjI4NEC}#
                                          #{exps _85hotwsCta0JfYIjI4NAN}#))
                                      #{tmp _85hotwsCta0JfYIjI4NEL}#)
                                    (syntax-violation
                                      #f
                                      "source expression failed to match any pattern"
                                      #{e _85hotwsCta0JfYIjI4ND@}#)))))
                            (if (eqv? #{type _85hotwsCta0JfYIjI4ND9}#
                                      'local-syntax-form)
                              (#{expand-local-syntax _85hotwsCta0JfYIjI4J4Q}#
                                #{value _85hotwsCta0JfYIjI4ND$}#
                                #{e _85hotwsCta0JfYIjI4ND@}#
                                #{r _85hotwsCta0JfYIjI4NAH}#
                                #{w _85hotwsCta0JfYIjI4NEA}#
                                #{s _85hotwsCta0JfYIjI4NEB}#
                                #{mod _85hotwsCta0JfYIjI4NEC}#
                                (lambda (#{body _85hotwsCta0JfYIjI4NEf}#
                                         #{r _85hotwsCta0JfYIjI4NEg}#
                                         #{w _85hotwsCta0JfYIjI4NEh}#
                                         #{s _85hotwsCta0JfYIjI4NEi}#
                                         #{mod _85hotwsCta0JfYIjI4NEj}#)
                                  (#{scan _85hotwsCta0JfYIjI4M$D}#
                                    #{body _85hotwsCta0JfYIjI4NEf}#
                                    #{r _85hotwsCta0JfYIjI4NEg}#
                                    #{w _85hotwsCta0JfYIjI4NEh}#
                                    #{s _85hotwsCta0JfYIjI4NEi}#
                                    #{m _85hotwsCta0JfYIjI4NAK}#
                                    #{esew _85hotwsCta0JfYIjI4NAL}#
                                    #{mod _85hotwsCta0JfYIjI4NEj}#
                                    #{exps _85hotwsCta0JfYIjI4NAN}#)))
                              (if (eqv? #{type _85hotwsCta0JfYIjI4ND9}#
                                        'eval-when-form)
                                (let ((#{tmp _85hotwsCta0JfYIjI4NEo}#
                                        ($sc-dispatch
                                          #{e _85hotwsCta0JfYIjI4ND@}#
                                          '(_ each-any any . each-any))))
                                  (if #{tmp _85hotwsCta0JfYIjI4NEo}#
                                    (@apply
                                      (lambda (#{x _85hotwsCta0JfYIjI4NEs}#
                                               #{e1 _85hotwsCta0JfYIjI4NEt}#
                                               #{e2 _85hotwsCta0JfYIjI4NEu}#)
                                        (let ((#{when-list _85hotwsCta0JfYIjI4NEv}#
                                                (#{parse-when-list _85hotwsCta0JfYIjI4J4J}#
                                                  #{e _85hotwsCta0JfYIjI4ND@}#
                                                  #{x _85hotwsCta0JfYIjI4NEs}#))
                                              (#{body _85hotwsCta0JfYIjI4NEw}#
                                                (cons #{e1 _85hotwsCta0JfYIjI4NEt}#
                                                      #{e2 _85hotwsCta0JfYIjI4NEu}#)))
                                          (if (eq? #{m _85hotwsCta0JfYIjI4NAK}#
                                                   'e)
                                            (if (memq 'eval
                                                      #{when-list _85hotwsCta0JfYIjI4NEv}#)
                                              (#{scan _85hotwsCta0JfYIjI4M$D}#
                                                #{body _85hotwsCta0JfYIjI4NEw}#
                                                #{r _85hotwsCta0JfYIjI4NAH}#
                                                #{w _85hotwsCta0JfYIjI4NEA}#
                                                #{s _85hotwsCta0JfYIjI4NEB}#
                                                (if (memq 'expand
                                                          #{when-list _85hotwsCta0JfYIjI4NEv}#)
                                                  'c&e
                                                  'e)
                                                '(eval)
                                                #{mod _85hotwsCta0JfYIjI4NEC}#
                                                #{exps _85hotwsCta0JfYIjI4NAN}#)
                                              (begin
                                                (if (memq 'expand
                                                          #{when-list _85hotwsCta0JfYIjI4NEv}#)
                                                  (let ((#{x _85hotwsCta0JfYIjI4NF9}#
                                                          (#{expand-top-sequence _85hotwsCta0JfYIjI4J4H}#
                                                            #{body _85hotwsCta0JfYIjI4NEw}#
                                                            #{r _85hotwsCta0JfYIjI4NAH}#
                                                            #{w _85hotwsCta0JfYIjI4NEA}#
                                                            #{s _85hotwsCta0JfYIjI4NEB}#
                                                            'e
                                                            '(eval)
                                                            #{mod _85hotwsCta0JfYIjI4NEC}#)))
                                                    (primitive-eval
                                                      #{x _85hotwsCta0JfYIjI4NF9}#)))
                                                (values
                                                  #{exps _85hotwsCta0JfYIjI4NAN}#)))
                                            (if (memq 'load
                                                      #{when-list _85hotwsCta0JfYIjI4NEv}#)
                                              (if (let ((#{t _85hotwsCta0JfYIjI4NGX}#
                                                          (memq 'compile
                                                                #{when-list _85hotwsCta0JfYIjI4NEv}#)))
                                                    (if #{t _85hotwsCta0JfYIjI4NGX}#
                                                      #{t _85hotwsCta0JfYIjI4NGX}#
                                                      (let ((#{t _85hotwsCta0JfYIjI4NHI}#
                                                              (memq 'expand
                                                                    #{when-list _85hotwsCta0JfYIjI4NEv}#)))
                                                        (if #{t _85hotwsCta0JfYIjI4NHI}#
                                                          #{t _85hotwsCta0JfYIjI4NHI}#
                                                          (if (eq? #{m _85hotwsCta0JfYIjI4NAK}#
                                                                   'c&e)
                                                            (memq 'eval
                                                                  #{when-list _85hotwsCta0JfYIjI4NEv}#)
                                                            #f)))))
                                                (#{scan _85hotwsCta0JfYIjI4M$D}#
                                                  #{body _85hotwsCta0JfYIjI4NEw}#
                                                  #{r _85hotwsCta0JfYIjI4NAH}#
                                                  #{w _85hotwsCta0JfYIjI4NEA}#
                                                  #{s _85hotwsCta0JfYIjI4NEB}#
                                                  'c&e
                                                  '(compile load)
                                                  #{mod _85hotwsCta0JfYIjI4NEC}#
                                                  #{exps _85hotwsCta0JfYIjI4NAN}#)
                                                (if (if (eq? #{m _85hotwsCta0JfYIjI4NAK}#
                                                             'c)
                                                      #t
                                                      (eq? #{m _85hotwsCta0JfYIjI4NAK}#
                                                           'c&e))
                                                  (#{scan _85hotwsCta0JfYIjI4M$D}#
                                                    #{body _85hotwsCta0JfYIjI4NEw}#
                                                    #{r _85hotwsCta0JfYIjI4NAH}#
                                                    #{w _85hotwsCta0JfYIjI4NEA}#
                                                    #{s _85hotwsCta0JfYIjI4NEB}#
                                                    'c
                                                    '(load)
                                                    #{mod _85hotwsCta0JfYIjI4NEC}#
                                                    #{exps _85hotwsCta0JfYIjI4NAN}#)
                                                  (values
                                                    #{exps _85hotwsCta0JfYIjI4NAN}#)))
                                              (if (let ((#{t _85hotwsCta0JfYIjI4NJJ}#
                                                          (memq 'compile
                                                                #{when-list _85hotwsCta0JfYIjI4NEv}#)))
                                                    (if #{t _85hotwsCta0JfYIjI4NJJ}#
                                                      #{t _85hotwsCta0JfYIjI4NJJ}#
                                                      (let ((#{t _85hotwsCta0JfYIjI4NJ6}#
                                                              (memq 'expand
                                                                    #{when-list _85hotwsCta0JfYIjI4NEv}#)))
                                                        (if #{t _85hotwsCta0JfYIjI4NJ6}#
                                                          #{t _85hotwsCta0JfYIjI4NJ6}#
                                                          (if (eq? #{m _85hotwsCta0JfYIjI4NAK}#
                                                                   'c&e)
                                                            (memq 'eval
                                                                  #{when-list _85hotwsCta0JfYIjI4NEv}#)
                                                            #f)))))
                                                (begin
                                                  (let ((#{x _85hotwsCta0JfYIjI4NL2}#
                                                          (#{expand-top-sequence _85hotwsCta0JfYIjI4J4H}#
                                                            #{body _85hotwsCta0JfYIjI4NEw}#
                                                            #{r _85hotwsCta0JfYIjI4NAH}#
                                                            #{w _85hotwsCta0JfYIjI4NEA}#
                                                            #{s _85hotwsCta0JfYIjI4NEB}#
                                                            'e
                                                            '(eval)
                                                            #{mod _85hotwsCta0JfYIjI4NEC}#)))
                                                    (primitive-eval
                                                      #{x _85hotwsCta0JfYIjI4NL2}#))
                                                  (values
                                                    #{exps _85hotwsCta0JfYIjI4NAN}#))
                                                (values
                                                  #{exps _85hotwsCta0JfYIjI4NAN}#))))))
                                      #{tmp _85hotwsCta0JfYIjI4NEo}#)
                                    (syntax-violation
                                      #f
                                      "source expression failed to match any pattern"
                                      #{e _85hotwsCta0JfYIjI4ND@}#)))
                                (if (if (eqv? #{type _85hotwsCta0JfYIjI4ND9}#
                                              'define-syntax-form)
                                      #t
                                      (eqv? #{type _85hotwsCta0JfYIjI4ND9}#
                                            'define-syntax-parameter-form))
                                  (let ((#{n _85hotwsCta0JfYIjI4NMk}#
                                          (#{id-var-name _85hotwsCta0JfYIjI4J36}#
                                            #{value _85hotwsCta0JfYIjI4ND$}#
                                            #{w _85hotwsCta0JfYIjI4NEA}#))
                                        (#{r _85hotwsCta0JfYIjI4NMl}#
                                          (#{macros-only-env _85hotwsCta0JfYIjI4J3j}#
                                            #{r _85hotwsCta0JfYIjI4NAH}#)))
                                    (if (eqv? #{m _85hotwsCta0JfYIjI4NAK}# 'c)
                                      (if (memq 'compile
                                                #{esew _85hotwsCta0JfYIjI4NAL}#)
                                        (let ((#{e _85hotwsCta0JfYIjI4NMp}#
                                                (#{expand-install-global _85hotwsCta0JfYIjI4J4I}#
                                                  #{n _85hotwsCta0JfYIjI4NMk}#
                                                  (#{expand _85hotwsCta0JfYIjI4J4L}#
                                                    #{e _85hotwsCta0JfYIjI4ND@}#
                                                    #{r _85hotwsCta0JfYIjI4NMl}#
                                                    #{w _85hotwsCta0JfYIjI4NEA}#
                                                    #{mod _85hotwsCta0JfYIjI4NEC}#))))
                                          (begin
                                            (#{top-level-eval-hook _85hotwsCta0JfYIjI4J2@}#
                                              #{e _85hotwsCta0JfYIjI4NMp}#
                                              #{mod _85hotwsCta0JfYIjI4NEC}#)
                                            (if (memq 'load
                                                      #{esew _85hotwsCta0JfYIjI4NAL}#)
                                              (values
                                                (cons #{e _85hotwsCta0JfYIjI4NMp}#
                                                      #{exps _85hotwsCta0JfYIjI4NAN}#))
                                              (values
                                                #{exps _85hotwsCta0JfYIjI4NAN}#))))
                                        (if (memq 'load
                                                  #{esew _85hotwsCta0JfYIjI4NAL}#)
                                          (values
                                            (cons (#{expand-install-global _85hotwsCta0JfYIjI4J4I}#
                                                    #{n _85hotwsCta0JfYIjI4NMk}#
                                                    (#{expand _85hotwsCta0JfYIjI4J4L}#
                                                      #{e _85hotwsCta0JfYIjI4ND@}#
                                                      #{r _85hotwsCta0JfYIjI4NMl}#
                                                      #{w _85hotwsCta0JfYIjI4NEA}#
                                                      #{mod _85hotwsCta0JfYIjI4NEC}#))
                                                  #{exps _85hotwsCta0JfYIjI4NAN}#))
                                          (values
                                            #{exps _85hotwsCta0JfYIjI4NAN}#)))
                                      (if (eqv? #{m _85hotwsCta0JfYIjI4NAK}#
                                                'c&e)
                                        (let ((#{e _85hotwsCta0JfYIjI4NTo}#
                                                (#{expand-install-global _85hotwsCta0JfYIjI4J4I}#
                                                  #{n _85hotwsCta0JfYIjI4NMk}#
                                                  (#{expand _85hotwsCta0JfYIjI4J4L}#
                                                    #{e _85hotwsCta0JfYIjI4ND@}#
                                                    #{r _85hotwsCta0JfYIjI4NMl}#
                                                    #{w _85hotwsCta0JfYIjI4NEA}#
                                                    #{mod _85hotwsCta0JfYIjI4NEC}#))))
                                          (begin
                                            (#{top-level-eval-hook _85hotwsCta0JfYIjI4J2@}#
                                              #{e _85hotwsCta0JfYIjI4NTo}#
                                              #{mod _85hotwsCta0JfYIjI4NEC}#)
                                            (values
                                              (cons #{e _85hotwsCta0JfYIjI4NTo}#
                                                    #{exps _85hotwsCta0JfYIjI4NAN}#))))
                                        (begin
                                          (if (memq 'eval
                                                    #{esew _85hotwsCta0JfYIjI4NAL}#)
                                            (#{top-level-eval-hook _85hotwsCta0JfYIjI4J2@}#
                                              (#{expand-install-global _85hotwsCta0JfYIjI4J4I}#
                                                #{n _85hotwsCta0JfYIjI4NMk}#
                                                (#{expand _85hotwsCta0JfYIjI4J4L}#
                                                  #{e _85hotwsCta0JfYIjI4ND@}#
                                                  #{r _85hotwsCta0JfYIjI4NMl}#
                                                  #{w _85hotwsCta0JfYIjI4NEA}#
                                                  #{mod _85hotwsCta0JfYIjI4NEC}#))
                                              #{mod _85hotwsCta0JfYIjI4NEC}#))
                                          (values
                                            #{exps _85hotwsCta0JfYIjI4NAN}#)))))
                                  (if (eqv? #{type _85hotwsCta0JfYIjI4ND9}#
                                            'define-form)
                                    (let ((#{n _85hotwsCta0JfYIjI4Ndj}#
                                            (#{id-var-name _85hotwsCta0JfYIjI4J36}#
                                              #{value _85hotwsCta0JfYIjI4ND$}#
                                              #{w _85hotwsCta0JfYIjI4NEA}#)))
                                      (let ((#{type _85hotwsCta0JfYIjI4Ndk}#
                                              (car (let ((#{t _85hotwsCta0JfYIjI4Ndr}#
                                                           (assq #{n _85hotwsCta0JfYIjI4Ndj}#
                                                                 #{r _85hotwsCta0JfYIjI4NAH}#)))
                                                     (if #{t _85hotwsCta0JfYIjI4Ndr}#
                                                       (cdr #{t _85hotwsCta0JfYIjI4Ndr}#)
                                                       (if (symbol?
                                                             #{n _85hotwsCta0JfYIjI4Ndj}#)
                                                         (let ((#{t _85hotwsCta0JfYIjI4Ndx}#
                                                                 (#{get-global-definition-hook _85hotwsCta0JfYIjI4J3C}#
                                                                   #{n _85hotwsCta0JfYIjI4Ndj}#
                                                                   #{mod _85hotwsCta0JfYIjI4NEC}#)))
                                                           (if #{t _85hotwsCta0JfYIjI4Ndx}#
                                                             #{t _85hotwsCta0JfYIjI4Ndx}#
                                                             '(global)))
                                                         '(displaced-lexical)))))))
                                        (if (if (eqv? #{type _85hotwsCta0JfYIjI4Ndk}#
                                                      'global)
                                              #t
                                              (if (eqv? #{type _85hotwsCta0JfYIjI4Ndk}#
                                                        'core)
                                                #t
                                                (if (eqv? #{type _85hotwsCta0JfYIjI4Ndk}#
                                                          'macro)
                                                  #t
                                                  (eqv? #{type _85hotwsCta0JfYIjI4Ndk}#
                                                        'module-ref))))
                                          (begin
                                            (if (if (if (eq? #{m _85hotwsCta0JfYIjI4NAK}#
                                                             'c)
                                                      #t
                                                      (eq? #{m _85hotwsCta0JfYIjI4NAK}#
                                                           'c&e))
                                                  (if (not (module-local-variable
                                                             (current-module)
                                                             #{n _85hotwsCta0JfYIjI4Ndj}#))
                                                    (current-module)
                                                    #f)
                                                  #f)
                                              (let ((#{old _85hotwsCta0JfYIjI4NeQ}#
                                                      (module-variable
                                                        (current-module)
                                                        #{n _85hotwsCta0JfYIjI4Ndj}#)))
                                                (if (if (variable?
                                                          #{old _85hotwsCta0JfYIjI4NeQ}#)
                                                      (variable-bound?
                                                        #{old _85hotwsCta0JfYIjI4NeQ}#)
                                                      #f)
                                                  (module-define!
                                                    (current-module)
                                                    #{n _85hotwsCta0JfYIjI4Ndj}#
                                                    (variable-ref
                                                      #{old _85hotwsCta0JfYIjI4NeQ}#))
                                                  (module-add!
                                                    (current-module)
                                                    #{n _85hotwsCta0JfYIjI4Ndj}#
                                                    (make-undefined-variable)))))
                                            (values
                                              (cons (if (eq? #{m _85hotwsCta0JfYIjI4NAK}#
                                                             'c&e)
                                                      (let ((#{x _85hotwsCta0JfYIjI4NeS}#
                                                              (#{build-global-definition _85hotwsCta0JfYIjI4J3O}#
                                                                #{s _85hotwsCta0JfYIjI4NEB}#
                                                                #{n _85hotwsCta0JfYIjI4Ndj}#
                                                                (#{expand _85hotwsCta0JfYIjI4J4L}#
                                                                  #{e _85hotwsCta0JfYIjI4ND@}#
                                                                  #{r _85hotwsCta0JfYIjI4NAH}#
                                                                  #{w _85hotwsCta0JfYIjI4NEA}#
                                                                  #{mod _85hotwsCta0JfYIjI4NEC}#))))
                                                        (begin
                                                          (#{top-level-eval-hook _85hotwsCta0JfYIjI4J2@}#
                                                            #{x _85hotwsCta0JfYIjI4NeS}#
                                                            #{mod _85hotwsCta0JfYIjI4NEC}#)
                                                          #{x _85hotwsCta0JfYIjI4NeS}#))
                                                      (lambda ()
                                                        (#{build-global-definition _85hotwsCta0JfYIjI4J3O}#
                                                          #{s _85hotwsCta0JfYIjI4NEB}#
                                                          #{n _85hotwsCta0JfYIjI4Ndj}#
                                                          (#{expand _85hotwsCta0JfYIjI4J4L}#
                                                            #{e _85hotwsCta0JfYIjI4ND@}#
                                                            #{r _85hotwsCta0JfYIjI4NAH}#
                                                            #{w _85hotwsCta0JfYIjI4NEA}#
                                                            #{mod _85hotwsCta0JfYIjI4NEC}#))))
                                                    #{exps _85hotwsCta0JfYIjI4NAN}#)))
                                          (if (eqv? #{type _85hotwsCta0JfYIjI4Ndk}#
                                                    'displaced-lexical)
                                            (syntax-violation
                                              #f
                                              "identifier out of context"
                                              #{e _85hotwsCta0JfYIjI4ND@}#
                                              (#{wrap _85hotwsCta0JfYIjI4J4E}#
                                                #{value _85hotwsCta0JfYIjI4ND$}#
                                                #{w _85hotwsCta0JfYIjI4NEA}#
                                                #{mod _85hotwsCta0JfYIjI4NEC}#))
                                            (syntax-violation
                                              #f
                                              "cannot define keyword at top level"
                                              #{e _85hotwsCta0JfYIjI4ND@}#
                                              (#{wrap _85hotwsCta0JfYIjI4J4E}#
                                                #{value _85hotwsCta0JfYIjI4ND$}#
                                                #{w _85hotwsCta0JfYIjI4NEA}#
                                                #{mod _85hotwsCta0JfYIjI4NEC}#))))))
                                    (values
                                      (cons (if (eq? #{m _85hotwsCta0JfYIjI4NAK}#
                                                     'c&e)
                                              (let ((#{x _85hotwsCta0JfYIjI4NlQ}#
                                                      (#{expand-expr _85hotwsCta0JfYIjI4J4M}#
                                                        #{type _85hotwsCta0JfYIjI4ND9}#
                                                        #{value _85hotwsCta0JfYIjI4ND$}#
                                                        #{e _85hotwsCta0JfYIjI4ND@}#
                                                        #{r _85hotwsCta0JfYIjI4NAH}#
                                                        #{w _85hotwsCta0JfYIjI4NEA}#
                                                        #{s _85hotwsCta0JfYIjI4NEB}#
                                                        #{mod _85hotwsCta0JfYIjI4NEC}#)))
                                                (begin
                                                  (primitive-eval
                                                    #{x _85hotwsCta0JfYIjI4NlQ}#)
                                                  #{x _85hotwsCta0JfYIjI4NlQ}#))
                                              (lambda ()
                                                (#{expand-expr _85hotwsCta0JfYIjI4J4M}#
                                                  #{type _85hotwsCta0JfYIjI4ND9}#
                                                  #{value _85hotwsCta0JfYIjI4ND$}#
                                                  #{e _85hotwsCta0JfYIjI4ND@}#
                                                  #{r _85hotwsCta0JfYIjI4NAH}#
                                                  #{w _85hotwsCta0JfYIjI4NEA}#
                                                  #{s _85hotwsCta0JfYIjI4NEB}#
                                                  #{mod _85hotwsCta0JfYIjI4NEC}#)))
                                            #{exps _85hotwsCta0JfYIjI4NAN}#))))))))))
                    (lambda (#{exps _85hotwsCta0JfYIjI4NlZ}#)
                      (#{scan _85hotwsCta0JfYIjI4M$D}#
                        (cdr #{body _85hotwsCta0JfYIjI4NAG}#)
                        #{r _85hotwsCta0JfYIjI4NAH}#
                        #{w _85hotwsCta0JfYIjI4NAI}#
                        #{s _85hotwsCta0JfYIjI4NAJ}#
                        #{m _85hotwsCta0JfYIjI4NAK}#
                        #{esew _85hotwsCta0JfYIjI4NAL}#
                        #{mod _85hotwsCta0JfYIjI4NAM}#
                        #{exps _85hotwsCta0JfYIjI4NlZ}#)))))))
           (call-with-values
             (lambda ()
               (#{scan _85hotwsCta0JfYIjI4M$D}#
                 #{body _85hotwsCta0JfYIjI4M98}#
                 #{r _85hotwsCta0JfYIjI4M99}#
                 #{w _85hotwsCta0JfYIjI4M9$}#
                 #{s _85hotwsCta0JfYIjI4M9@}#
                 #{m _85hotwsCta0JfYIjI4M$A}#
                 #{esew _85hotwsCta0JfYIjI4M$B}#
                 #{mod _85hotwsCta0JfYIjI4M$C}#
                 '()))
             (lambda (#{exps _85hotwsCta0JfYIjI4M$G}#)
               (if (null? #{exps _85hotwsCta0JfYIjI4M$G}#)
                 (make-struct/no-tail
                   (vector-ref %expanded-vtables 0)
                   #{s _85hotwsCta0JfYIjI4M9@}#)
                 (#{build-sequence _85hotwsCta0JfYIjI4J3U}#
                   #{s _85hotwsCta0JfYIjI4M9@}#
                   (letrec*
                     ((#{lp _85hotwsCta0JfYIjI4M$u}#
                        (lambda (#{in _85hotwsCta0JfYIjI4NAC}#
                                 #{out _85hotwsCta0JfYIjI4NAD}#)
                          (if (null? #{in _85hotwsCta0JfYIjI4NAC}#)
                            #{out _85hotwsCta0JfYIjI4NAD}#
                            (let ((#{e _85hotwsCta0JfYIjI4NAE}#
                                    (car #{in _85hotwsCta0JfYIjI4NAC}#)))
                              (#{lp _85hotwsCta0JfYIjI4M$u}#
                                (cdr #{in _85hotwsCta0JfYIjI4NAC}#)
                                (cons (if (procedure?
                                            #{e _85hotwsCta0JfYIjI4NAE}#)
                                        (#{e _85hotwsCta0JfYIjI4NAE}#)
                                        #{e _85hotwsCta0JfYIjI4NAE}#)
                                      #{out _85hotwsCta0JfYIjI4NAD}#)))))))
                     (#{lp _85hotwsCta0JfYIjI4M$u}#
                       #{exps _85hotwsCta0JfYIjI4M$G}#
                       '())))))))))
     (#{expand-install-global _85hotwsCta0JfYIjI4J4I}#
       (lambda (#{name _85hotwsCta0JfYIjI4Nla}#
                #{e _85hotwsCta0JfYIjI4Nlb}#)
         (let ((#{exp _85hotwsCta0JfYIjI4Nlh}#
                 (let ((#{fun-exp _85hotwsCta0JfYIjI4Nlr}#
                         (if (equal? (module-name (current-module)) '(guile))
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 7)
                             #f
                             'make-syntax-transformer)
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 5)
                             #f
                             '(guile)
                             'make-syntax-transformer
                             #f)))
                       (#{arg-exps _85hotwsCta0JfYIjI4Nls}#
                         (list (make-struct/no-tail
                                 (vector-ref %expanded-vtables 1)
                                 #f
                                 #{name _85hotwsCta0JfYIjI4Nla}#)
                               (make-struct/no-tail
                                 (vector-ref %expanded-vtables 1)
                                 #f
                                 'macro)
                               #{e _85hotwsCta0JfYIjI4Nlb}#)))
                   (make-struct/no-tail
                     (vector-ref %expanded-vtables 11)
                     #f
                     #{fun-exp _85hotwsCta0JfYIjI4Nlr}#
                     #{arg-exps _85hotwsCta0JfYIjI4Nls}#))))
           (begin
             (if (if (struct? #{exp _85hotwsCta0JfYIjI4Nlh}#)
                   (eq? (struct-vtable #{exp _85hotwsCta0JfYIjI4Nlh}#)
                        (vector-ref %expanded-vtables 13))
                   #f)
               (let ((#{meta _85hotwsCta0JfYIjI4NmV}#
                       (struct-ref #{exp _85hotwsCta0JfYIjI4Nlh}# 1)))
                 (if (not (assq 'name #{meta _85hotwsCta0JfYIjI4NmV}#))
                   (let ((#{v _85hotwsCta0JfYIjI4Nmc}#
                           (cons (cons 'name #{name _85hotwsCta0JfYIjI4Nla}#)
                                 #{meta _85hotwsCta0JfYIjI4NmV}#)))
                     (struct-set!
                       #{exp _85hotwsCta0JfYIjI4Nlh}#
                       1
                       #{v _85hotwsCta0JfYIjI4Nmc}#)))))
             (make-struct/no-tail
               (vector-ref %expanded-vtables 9)
               #f
               #{name _85hotwsCta0JfYIjI4Nla}#
               #{exp _85hotwsCta0JfYIjI4Nlh}#)))))
     (#{parse-when-list _85hotwsCta0JfYIjI4J4J}#
       (lambda (#{e _85hotwsCta0JfYIjI4Nmn}#
                #{when-list _85hotwsCta0JfYIjI4Nmo}#)
         (let ((#{result _85hotwsCta0JfYIjI4Nmp}#
                 (#{strip _85hotwsCta0JfYIjI4J4Y}#
                   #{when-list _85hotwsCta0JfYIjI4Nmo}#
                   '(()))))
           (letrec*
             ((#{lp _85hotwsCta0JfYIjI4Nmq}#
                (lambda (#{l _85hotwsCta0JfYIjI4Nng}#)
                  (if (null? #{l _85hotwsCta0JfYIjI4Nng}#)
                    #{result _85hotwsCta0JfYIjI4Nmp}#
                    (if (let ((#{t _85hotwsCta0JfYIjI4Nni}#
                                (car #{l _85hotwsCta0JfYIjI4Nng}#)))
                          (if (eq? #{t _85hotwsCta0JfYIjI4Nni}# 'compile)
                            #t
                            (if (eq? #{t _85hotwsCta0JfYIjI4Nni}# 'load)
                              #t
                              (if (eq? #{t _85hotwsCta0JfYIjI4Nni}# 'eval)
                                #t
                                (eq? #{t _85hotwsCta0JfYIjI4Nni}# 'expand)))))
                      (#{lp _85hotwsCta0JfYIjI4Nmq}#
                        (cdr #{l _85hotwsCta0JfYIjI4Nng}#))
                      (syntax-violation
                        'eval-when
                        "invalid situation"
                        #{e _85hotwsCta0JfYIjI4Nmn}#
                        (car #{l _85hotwsCta0JfYIjI4Nng}#)))))))
             (#{lp _85hotwsCta0JfYIjI4Nmq}#
               #{result _85hotwsCta0JfYIjI4Nmp}#)))))
     (#{syntax-type _85hotwsCta0JfYIjI4J4K}#
       (lambda (#{e _85hotwsCta0JfYIjI4Nnk}#
                #{r _85hotwsCta0JfYIjI4Nnl}#
                #{w _85hotwsCta0JfYIjI4Nnm}#
                #{s _85hotwsCta0JfYIjI4Nnn}#
                #{rib _85hotwsCta0JfYIjI4Nno}#
                #{mod _85hotwsCta0JfYIjI4Nnp}#
                #{for-car? _85hotwsCta0JfYIjI4Nnq}#)
         (if (symbol? #{e _85hotwsCta0JfYIjI4Nnk}#)
           (let ((#{n _85hotwsCta0JfYIjI4Nnr}#
                   (#{id-var-name _85hotwsCta0JfYIjI4J36}#
                     #{e _85hotwsCta0JfYIjI4Nnk}#
                     #{w _85hotwsCta0JfYIjI4Nnm}#)))
             (let ((#{b _85hotwsCta0JfYIjI4Nns}#
                     (let ((#{t _85hotwsCta0JfYIjI4Nn0}#
                             (assq #{n _85hotwsCta0JfYIjI4Nnr}#
                                   #{r _85hotwsCta0JfYIjI4Nnl}#)))
                       (if #{t _85hotwsCta0JfYIjI4Nn0}#
                         (cdr #{t _85hotwsCta0JfYIjI4Nn0}#)
                         (if (symbol? #{n _85hotwsCta0JfYIjI4Nnr}#)
                           (let ((#{t _85hotwsCta0JfYIjI4Nn6}#
                                   (#{get-global-definition-hook _85hotwsCta0JfYIjI4J3C}#
                                     #{n _85hotwsCta0JfYIjI4Nnr}#
                                     #{mod _85hotwsCta0JfYIjI4Nnp}#)))
                             (if #{t _85hotwsCta0JfYIjI4Nn6}#
                               #{t _85hotwsCta0JfYIjI4Nn6}#
                               '(global)))
                           '(displaced-lexical))))))
               (let ((#{type _85hotwsCta0JfYIjI4Nnt}#
                       (car #{b _85hotwsCta0JfYIjI4Nns}#)))
                 (if (eqv? #{type _85hotwsCta0JfYIjI4Nnt}# 'lexical)
                   (values
                     #{type _85hotwsCta0JfYIjI4Nnt}#
                     (cdr #{b _85hotwsCta0JfYIjI4Nns}#)
                     #{e _85hotwsCta0JfYIjI4Nnk}#
                     #{w _85hotwsCta0JfYIjI4Nnm}#
                     #{s _85hotwsCta0JfYIjI4Nnn}#
                     #{mod _85hotwsCta0JfYIjI4Nnp}#)
                   (if (eqv? #{type _85hotwsCta0JfYIjI4Nnt}# 'global)
                     (values
                       #{type _85hotwsCta0JfYIjI4Nnt}#
                       #{n _85hotwsCta0JfYIjI4Nnr}#
                       #{e _85hotwsCta0JfYIjI4Nnk}#
                       #{w _85hotwsCta0JfYIjI4Nnm}#
                       #{s _85hotwsCta0JfYIjI4Nnn}#
                       #{mod _85hotwsCta0JfYIjI4Nnp}#)
                     (if (eqv? #{type _85hotwsCta0JfYIjI4Nnt}# 'macro)
                       (if #{for-car? _85hotwsCta0JfYIjI4Nnq}#
                         (values
                           #{type _85hotwsCta0JfYIjI4Nnt}#
                           (cdr #{b _85hotwsCta0JfYIjI4Nns}#)
                           #{e _85hotwsCta0JfYIjI4Nnk}#
                           #{w _85hotwsCta0JfYIjI4Nnm}#
                           #{s _85hotwsCta0JfYIjI4Nnn}#
                           #{mod _85hotwsCta0JfYIjI4Nnp}#)
                         (#{syntax-type _85hotwsCta0JfYIjI4J4K}#
                           (#{expand-macro _85hotwsCta0JfYIjI4J4O}#
                             (cdr #{b _85hotwsCta0JfYIjI4Nns}#)
                             #{e _85hotwsCta0JfYIjI4Nnk}#
                             #{r _85hotwsCta0JfYIjI4Nnl}#
                             #{w _85hotwsCta0JfYIjI4Nnm}#
                             #{s _85hotwsCta0JfYIjI4Nnn}#
                             #{rib _85hotwsCta0JfYIjI4Nno}#
                             #{mod _85hotwsCta0JfYIjI4Nnp}#)
                           #{r _85hotwsCta0JfYIjI4Nnl}#
                           '(())
                           #{s _85hotwsCta0JfYIjI4Nnn}#
                           #{rib _85hotwsCta0JfYIjI4Nno}#
                           #{mod _85hotwsCta0JfYIjI4Nnp}#
                           #f))
                       (values
                         #{type _85hotwsCta0JfYIjI4Nnt}#
                         (cdr #{b _85hotwsCta0JfYIjI4Nns}#)
                         #{e _85hotwsCta0JfYIjI4Nnk}#
                         #{w _85hotwsCta0JfYIjI4Nnm}#
                         #{s _85hotwsCta0JfYIjI4Nnn}#
                         #{mod _85hotwsCta0JfYIjI4Nnp}#)))))))
           (if (pair? #{e _85hotwsCta0JfYIjI4Nnk}#)
             (let ((#{first _85hotwsCta0JfYIjI4NoO}#
                     (car #{e _85hotwsCta0JfYIjI4Nnk}#)))
               (call-with-values
                 (lambda ()
                   (#{syntax-type _85hotwsCta0JfYIjI4J4K}#
                     #{first _85hotwsCta0JfYIjI4NoO}#
                     #{r _85hotwsCta0JfYIjI4Nnl}#
                     #{w _85hotwsCta0JfYIjI4Nnm}#
                     #{s _85hotwsCta0JfYIjI4Nnn}#
                     #{rib _85hotwsCta0JfYIjI4Nno}#
                     #{mod _85hotwsCta0JfYIjI4Nnp}#
                     #t))
                 (lambda (#{ftype _85hotwsCta0JfYIjI4NoQ}#
                          #{fval _85hotwsCta0JfYIjI4NoR}#
                          #{fe _85hotwsCta0JfYIjI4NoS}#
                          #{fw _85hotwsCta0JfYIjI4NoT}#
                          #{fs _85hotwsCta0JfYIjI4NoU}#
                          #{fmod _85hotwsCta0JfYIjI4NoV}#)
                   (if (eqv? #{ftype _85hotwsCta0JfYIjI4NoQ}# 'lexical)
                     (values
                       'lexical-call
                       #{fval _85hotwsCta0JfYIjI4NoR}#
                       #{e _85hotwsCta0JfYIjI4Nnk}#
                       #{w _85hotwsCta0JfYIjI4Nnm}#
                       #{s _85hotwsCta0JfYIjI4Nnn}#
                       #{mod _85hotwsCta0JfYIjI4Nnp}#)
                     (if (eqv? #{ftype _85hotwsCta0JfYIjI4NoQ}# 'global)
                       (values
                         'global-call
                         (vector
                           'syntax-object
                           #{fval _85hotwsCta0JfYIjI4NoR}#
                           #{w _85hotwsCta0JfYIjI4Nnm}#
                           #{fmod _85hotwsCta0JfYIjI4NoV}#)
                         #{e _85hotwsCta0JfYIjI4Nnk}#
                         #{w _85hotwsCta0JfYIjI4Nnm}#
                         #{s _85hotwsCta0JfYIjI4Nnn}#
                         #{mod _85hotwsCta0JfYIjI4Nnp}#)
                       (if (eqv? #{ftype _85hotwsCta0JfYIjI4NoQ}# 'macro)
                         (#{syntax-type _85hotwsCta0JfYIjI4J4K}#
                           (#{expand-macro _85hotwsCta0JfYIjI4J4O}#
                             #{fval _85hotwsCta0JfYIjI4NoR}#
                             #{e _85hotwsCta0JfYIjI4Nnk}#
                             #{r _85hotwsCta0JfYIjI4Nnl}#
                             #{w _85hotwsCta0JfYIjI4Nnm}#
                             #{s _85hotwsCta0JfYIjI4Nnn}#
                             #{rib _85hotwsCta0JfYIjI4Nno}#
                             #{mod _85hotwsCta0JfYIjI4Nnp}#)
                           #{r _85hotwsCta0JfYIjI4Nnl}#
                           '(())
                           #{s _85hotwsCta0JfYIjI4Nnn}#
                           #{rib _85hotwsCta0JfYIjI4Nno}#
                           #{mod _85hotwsCta0JfYIjI4Nnp}#
                           #{for-car? _85hotwsCta0JfYIjI4Nnq}#)
                         (if (eqv? #{ftype _85hotwsCta0JfYIjI4NoQ}#
                                   'module-ref)
                           (call-with-values
                             (lambda ()
                               (#{fval _85hotwsCta0JfYIjI4NoR}#
                                 #{e _85hotwsCta0JfYIjI4Nnk}#
                                 #{r _85hotwsCta0JfYIjI4Nnl}#
                                 #{w _85hotwsCta0JfYIjI4Nnm}#))
                             (lambda (#{e _85hotwsCta0JfYIjI4Noq}#
                                      #{r _85hotwsCta0JfYIjI4Nor}#
                                      #{w _85hotwsCta0JfYIjI4Nos}#
                                      #{s _85hotwsCta0JfYIjI4Not}#
                                      #{mod _85hotwsCta0JfYIjI4Nou}#)
                               (#{syntax-type _85hotwsCta0JfYIjI4J4K}#
                                 #{e _85hotwsCta0JfYIjI4Noq}#
                                 #{r _85hotwsCta0JfYIjI4Nor}#
                                 #{w _85hotwsCta0JfYIjI4Nos}#
                                 #{s _85hotwsCta0JfYIjI4Not}#
                                 #{rib _85hotwsCta0JfYIjI4Nno}#
                                 #{mod _85hotwsCta0JfYIjI4Nou}#
                                 #{for-car? _85hotwsCta0JfYIjI4Nnq}#)))
                           (if (eqv? #{ftype _85hotwsCta0JfYIjI4NoQ}# 'core)
                             (values
                               'core-form
                               #{fval _85hotwsCta0JfYIjI4NoR}#
                               #{e _85hotwsCta0JfYIjI4Nnk}#
                               #{w _85hotwsCta0JfYIjI4Nnm}#
                               #{s _85hotwsCta0JfYIjI4Nnn}#
                               #{mod _85hotwsCta0JfYIjI4Nnp}#)
                             (if (eqv? #{ftype _85hotwsCta0JfYIjI4NoQ}#
                                       'local-syntax)
                               (values
                                 'local-syntax-form
                                 #{fval _85hotwsCta0JfYIjI4NoR}#
                                 #{e _85hotwsCta0JfYIjI4Nnk}#
                                 #{w _85hotwsCta0JfYIjI4Nnm}#
                                 #{s _85hotwsCta0JfYIjI4Nnn}#
                                 #{mod _85hotwsCta0JfYIjI4Nnp}#)
                               (if (eqv? #{ftype _85hotwsCta0JfYIjI4NoQ}#
                                         'begin)
                                 (values
                                   'begin-form
                                   #f
                                   #{e _85hotwsCta0JfYIjI4Nnk}#
                                   #{w _85hotwsCta0JfYIjI4Nnm}#
                                   #{s _85hotwsCta0JfYIjI4Nnn}#
                                   #{mod _85hotwsCta0JfYIjI4Nnp}#)
                                 (if (eqv? #{ftype _85hotwsCta0JfYIjI4NoQ}#
                                           'eval-when)
                                   (values
                                     'eval-when-form
                                     #f
                                     #{e _85hotwsCta0JfYIjI4Nnk}#
                                     #{w _85hotwsCta0JfYIjI4Nnm}#
                                     #{s _85hotwsCta0JfYIjI4Nnn}#
                                     #{mod _85hotwsCta0JfYIjI4Nnp}#)
                                   (if (eqv? #{ftype _85hotwsCta0JfYIjI4NoQ}#
                                             'define)
                                     (let ((#{tmp _85hotwsCta0JfYIjI4No@}#
                                             ($sc-dispatch
                                               #{e _85hotwsCta0JfYIjI4Nnk}#
                                               '(_ any any))))
                                       (if (if #{tmp _85hotwsCta0JfYIjI4No@}#
                                             (@apply
                                               (lambda (#{name _85hotwsCta0JfYIjI4NpD}#
                                                        #{val _85hotwsCta0JfYIjI4NpE}#)
                                                 (if (symbol?
                                                       #{name _85hotwsCta0JfYIjI4NpD}#)
                                                   #t
                                                   (if (if (vector?
                                                             #{name _85hotwsCta0JfYIjI4NpD}#)
                                                         (if (= (vector-length
                                                                  #{name _85hotwsCta0JfYIjI4NpD}#)
                                                                4)
                                                           (eq? (vector-ref
                                                                  #{name _85hotwsCta0JfYIjI4NpD}#
                                                                  0)
                                                                'syntax-object)
                                                           #f)
                                                         #f)
                                                     (symbol?
                                                       (vector-ref
                                                         #{name _85hotwsCta0JfYIjI4NpD}#
                                                         1))
                                                     #f)))
                                               #{tmp _85hotwsCta0JfYIjI4No@}#)
                                             #f)
                                         (@apply
                                           (lambda (#{name _85hotwsCta0JfYIjI4Npf}#
                                                    #{val _85hotwsCta0JfYIjI4Npg}#)
                                             (values
                                               'define-form
                                               #{name _85hotwsCta0JfYIjI4Npf}#
                                               #{val _85hotwsCta0JfYIjI4Npg}#
                                               #{w _85hotwsCta0JfYIjI4Nnm}#
                                               #{s _85hotwsCta0JfYIjI4Nnn}#
                                               #{mod _85hotwsCta0JfYIjI4Nnp}#))
                                           #{tmp _85hotwsCta0JfYIjI4No@}#)
                                         (let ((#{tmp _85hotwsCta0JfYIjI4Nph}#
                                                 ($sc-dispatch
                                                   #{e _85hotwsCta0JfYIjI4Nnk}#
                                                   '(_ (any . any)
                                                       any
                                                       .
                                                       each-any))))
                                           (if (if #{tmp _85hotwsCta0JfYIjI4Nph}#
                                                 (@apply
                                                   (lambda (#{name _85hotwsCta0JfYIjI4Npl}#
                                                            #{args _85hotwsCta0JfYIjI4Npm}#
                                                            #{e1 _85hotwsCta0JfYIjI4Npn}#
                                                            #{e2 _85hotwsCta0JfYIjI4Npo}#)
                                                     (if (if (symbol?
                                                               #{name _85hotwsCta0JfYIjI4Npl}#)
                                                           #t
                                                           (if (if (vector?
                                                                     #{name _85hotwsCta0JfYIjI4Npl}#)
                                                                 (if (= (vector-length
                                                                          #{name _85hotwsCta0JfYIjI4Npl}#)
                                                                        4)
                                                                   (eq? (vector-ref
                                                                          #{name _85hotwsCta0JfYIjI4Npl}#
                                                                          0)
                                                                        'syntax-object)
                                                                   #f)
                                                                 #f)
                                                             (symbol?
                                                               (vector-ref
                                                                 #{name _85hotwsCta0JfYIjI4Npl}#
                                                                 1))
                                                             #f))
                                                       (#{valid-bound-ids? _85hotwsCta0JfYIjI4J4B}#
                                                         (letrec*
                                                           ((#{lvl _85hotwsCta0JfYIjI4Nr9}#
                                                              (lambda (#{vars _85hotwsCta0JfYIjI4Nr@}#
                                                                       #{ls _85hotwsCta0JfYIjI4NsA}#
                                                                       #{w _85hotwsCta0JfYIjI4NsB}#)
                                                                (if (pair? #{vars _85hotwsCta0JfYIjI4Nr@}#)
                                                                  (#{lvl _85hotwsCta0JfYIjI4Nr9}#
                                                                    (cdr #{vars _85hotwsCta0JfYIjI4Nr@}#)
                                                                    (cons (#{wrap _85hotwsCta0JfYIjI4J4E}#
                                                                            (car #{vars _85hotwsCta0JfYIjI4Nr@}#)
                                                                            #{w _85hotwsCta0JfYIjI4NsB}#
                                                                            #f)
                                                                          #{ls _85hotwsCta0JfYIjI4NsA}#)
                                                                    #{w _85hotwsCta0JfYIjI4NsB}#)
                                                                  (if (if (symbol?
                                                                            #{vars _85hotwsCta0JfYIjI4Nr@}#)
                                                                        #t
                                                                        (if (if (vector?
                                                                                  #{vars _85hotwsCta0JfYIjI4Nr@}#)
                                                                              (if (= (vector-length
                                                                                       #{vars _85hotwsCta0JfYIjI4Nr@}#)
                                                                                     4)
                                                                                (eq? (vector-ref
                                                                                       #{vars _85hotwsCta0JfYIjI4Nr@}#
                                                                                       0)
                                                                                     'syntax-object)
                                                                                #f)
                                                                              #f)
                                                                          (symbol?
                                                                            (vector-ref
                                                                              #{vars _85hotwsCta0JfYIjI4Nr@}#
                                                                              1))
                                                                          #f))
                                                                    (cons (#{wrap _85hotwsCta0JfYIjI4J4E}#
                                                                            #{vars _85hotwsCta0JfYIjI4Nr@}#
                                                                            #{w _85hotwsCta0JfYIjI4NsB}#
                                                                            #f)
                                                                          #{ls _85hotwsCta0JfYIjI4NsA}#)
                                                                    (if (null? #{vars _85hotwsCta0JfYIjI4Nr@}#)
                                                                      #{ls _85hotwsCta0JfYIjI4NsA}#
                                                                      (if (if (vector?
                                                                                #{vars _85hotwsCta0JfYIjI4Nr@}#)
                                                                            (if (= (vector-length
                                                                                     #{vars _85hotwsCta0JfYIjI4Nr@}#)
                                                                                   4)
                                                                              (eq? (vector-ref
                                                                                     #{vars _85hotwsCta0JfYIjI4Nr@}#
                                                                                     0)
                                                                                   'syntax-object)
                                                                              #f)
                                                                            #f)
                                                                        (#{lvl _85hotwsCta0JfYIjI4Nr9}#
                                                                          (vector-ref
                                                                            #{vars _85hotwsCta0JfYIjI4Nr@}#
                                                                            1)
                                                                          #{ls _85hotwsCta0JfYIjI4NsA}#
                                                                          (#{join-wraps _85hotwsCta0JfYIjI4J33}#
                                                                            #{w _85hotwsCta0JfYIjI4NsB}#
                                                                            (vector-ref
                                                                              #{vars _85hotwsCta0JfYIjI4Nr@}#
                                                                              2)))
                                                                        (cons #{vars _85hotwsCta0JfYIjI4Nr@}#
                                                                              #{ls _85hotwsCta0JfYIjI4NsA}#))))))))
                                                           (#{lvl _85hotwsCta0JfYIjI4Nr9}#
                                                             #{args _85hotwsCta0JfYIjI4Npm}#
                                                             '()
                                                             '(()))))
                                                       #f))
                                                   #{tmp _85hotwsCta0JfYIjI4Nph}#)
                                                 #f)
                                             (@apply
                                               (lambda (#{name _85hotwsCta0JfYIjI4Nst}#
                                                        #{args _85hotwsCta0JfYIjI4Nsu}#
                                                        #{e1 _85hotwsCta0JfYIjI4Nsv}#
                                                        #{e2 _85hotwsCta0JfYIjI4Nsw}#)
                                                 (values
                                                   'define-form
                                                   (#{wrap _85hotwsCta0JfYIjI4J4E}#
                                                     #{name _85hotwsCta0JfYIjI4Nst}#
                                                     #{w _85hotwsCta0JfYIjI4Nnm}#
                                                     #{mod _85hotwsCta0JfYIjI4Nnp}#)
                                                   (let ((#{e _85hotwsCta0JfYIjI4Ns2}#
                                                           (cons '#(syntax-object
                                                                    lambda
                                                                    ((top)
                                                                     #(ribcage
                                                                       #(name
                                                                         args
                                                                         e1
                                                                         e2)
                                                                       #((top)
                                                                         (top)
                                                                         (top)
                                                                         (top))
                                                                       #("29f"
                                                                         "29g"
                                                                         "29h"
                                                                         "29i"))
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       #(ftype
                                                                         fval
                                                                         fe
                                                                         fw
                                                                         fs
                                                                         fmod)
                                                                       #((top)
                                                                         (top)
                                                                         (top)
                                                                         (top)
                                                                         (top)
                                                                         (top))
                                                                       #("28w"
                                                                         "28x"
                                                                         "28y"
                                                                         "28z"
                                                                         "290"
                                                                         "291"))
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       #(first)
                                                                       #((top))
                                                                       #("28v"))
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       #(e
                                                                         r
                                                                         w
                                                                         s
                                                                         rib
                                                                         mod
                                                                         for-car?)
                                                                       #((top)
                                                                         (top)
                                                                         (top)
                                                                         (top)
                                                                         (top)
                                                                         (top)
                                                                         (top))
                                                                       #("28l"
                                                                         "28m"
                                                                         "28n"
                                                                         "28o"
                                                                         "28p"
                                                                         "28q"
                                                                         "28r"))
                                                                     #(ribcage
                                                                       (lambda-var-list
                                                                         gen-var
                                                                         strip
                                                                         expand-lambda-case
                                                                         lambda*-formals
                                                                         expand-simple-lambda
                                                                         lambda-formals
                                                                         ellipsis?
                                                                         expand-void
                                                                         eval-local-transformer
                                                                         expand-local-syntax
                                                                         expand-body
                                                                         expand-macro
                                                                         expand-application
                                                                         expand-expr
                                                                         expand
                                                                         syntax-type
                                                                         parse-when-list
                                                                         expand-install-global
                                                                         expand-top-sequence
                                                                         expand-sequence
                                                                         source-wrap
                                                                         wrap
                                                                         bound-id-member?
                                                                         distinct-bound-ids?
                                                                         valid-bound-ids?
                                                                         bound-id=?
                                                                         free-id=?
                                                                         with-transformer-environment
                                                                         transformer-environment
                                                                         resolve-identifier
                                                                         locally-bound-identifiers
                                                                         id-var-name
                                                                         same-marks?
                                                                         join-marks
                                                                         join-wraps
                                                                         smart-append
                                                                         make-binding-wrap
                                                                         extend-ribcage!
                                                                         make-empty-ribcage
                                                                         new-mark
                                                                         anti-mark
                                                                         the-anti-mark
                                                                         top-marked?
                                                                         top-wrap
                                                                         empty-wrap
                                                                         set-ribcage-labels!
                                                                         set-ribcage-marks!
                                                                         set-ribcage-symnames!
                                                                         ribcage-labels
                                                                         ribcage-marks
                                                                         ribcage-symnames
                                                                         ribcage?
                                                                         make-ribcage
                                                                         gen-labels
                                                                         gen-label
                                                                         make-rename
                                                                         rename-marks
                                                                         rename-new
                                                                         rename-old
                                                                         subst-rename?
                                                                         wrap-subst
                                                                         wrap-marks
                                                                         make-wrap
                                                                         id-sym-name&marks
                                                                         id-sym-name
                                                                         id?
                                                                         nonsymbol-id?
                                                                         global-extend
                                                                         lookup
                                                                         macros-only-env
                                                                         extend-var-env
                                                                         extend-env
                                                                         null-env
                                                                         binding-value
                                                                         binding-type
                                                                         make-binding
                                                                         arg-check
                                                                         source-annotation
                                                                         no-source
                                                                         set-syntax-object-module!
                                                                         set-syntax-object-wrap!
                                                                         set-syntax-object-expression!
                                                                         syntax-object-module
                                                                         syntax-object-wrap
                                                                         syntax-object-expression
                                                                         syntax-object?
                                                                         make-syntax-object
                                                                         build-lexical-var
                                                                         build-letrec
                                                                         build-named-let
                                                                         build-let
                                                                         build-sequence
                                                                         build-data
                                                                         build-primref
                                                                         build-lambda-case
                                                                         build-case-lambda
                                                                         build-simple-lambda
                                                                         build-global-definition
                                                                         build-global-assignment
                                                                         build-global-reference
                                                                         analyze-variable
                                                                         build-lexical-assignment
                                                                         build-lexical-reference
                                                                         build-dynlet
                                                                         build-conditional
                                                                         build-application
                                                                         build-void
                                                                         maybe-name-value!
                                                                         decorate-source
                                                                         get-global-definition-hook
                                                                         put-global-definition-hook
                                                                         gensym-hook
                                                                         local-eval-hook
                                                                         top-level-eval-hook
                                                                         fx<
                                                                         fx=
                                                                         fx-
                                                                         fx+
                                                                         set-lambda-meta!
                                                                         lambda-meta
                                                                         lambda?
                                                                         make-dynlet
                                                                         make-letrec
                                                                         make-let
                                                                         make-lambda-case
                                                                         make-lambda
                                                                         make-sequence
                                                                         make-application
                                                                         make-conditional
                                                                         make-toplevel-define
                                                                         make-toplevel-set
                                                                         make-toplevel-ref
                                                                         make-module-set
                                                                         make-module-ref
                                                                         make-lexical-set
                                                                         make-lexical-ref
                                                                         make-primitive-ref
                                                                         make-const
                                                                         make-void)
                                                                       ((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                       ("1tt"
                                                                        "1ts"
                                                                        "1tr"
                                                                        "1tq"
                                                                        "1tp"
                                                                        "1to"
                                                                        "1tn"
                                                                        "1tm"
                                                                        "1tl"
                                                                        "1tk"
                                                                        "1tj"
                                                                        "1ti"
                                                                        "1th"
                                                                        "1tg"
                                                                        "1tf"
                                                                        "1te"
                                                                        "1td"
                                                                        "1tc"
                                                                        "1tb"
                                                                        "1ta"
                                                                        "1t9"
                                                                        "1t8"
                                                                        "1t7"
                                                                        "1t6"
                                                                        "1t5"
                                                                        "1t4"
                                                                        "1t3"
                                                                        "1t2"
                                                                        "1t1"
                                                                        "1t0"
                                                                        "1sz"
                                                                        "1sy"
                                                                        "1sx"
                                                                        "1sw"
                                                                        "1sv"
                                                                        "1su"
                                                                        "1st"
                                                                        "1ss"
                                                                        "1sr"
                                                                        "1sq"
                                                                        "1sp"
                                                                        "1so"
                                                                        "1sn"
                                                                        "1sm"
                                                                        "1sl"
                                                                        "1sk"
                                                                        "1sj"
                                                                        "1si"
                                                                        "1sh"
                                                                        "1sg"
                                                                        "1sf"
                                                                        "1se"
                                                                        "1sd"
                                                                        "1sc"
                                                                        "1sb"
                                                                        "1sa"
                                                                        "1s9"
                                                                        "1s8"
                                                                        "1s7"
                                                                        "1s6"
                                                                        "1s5"
                                                                        "1s4"
                                                                        "1s3"
                                                                        "1s2"
                                                                        "1s1"
                                                                        "1s0"
                                                                        "1rz"
                                                                        "1ry"
                                                                        "1rx"
                                                                        "1rw"
                                                                        "1rv"
                                                                        "1ru"
                                                                        "1rt"
                                                                        "1rs"
                                                                        "1rr"
                                                                        "1rq"
                                                                        "1rp"
                                                                        "1ro"
                                                                        "1rn"
                                                                        "1rm"
                                                                        "1rl"
                                                                        "1rk"
                                                                        "1rj"
                                                                        "1ri"
                                                                        "1rh"
                                                                        "1rg"
                                                                        "1rf"
                                                                        "1re"
                                                                        "1rd"
                                                                        "1rc"
                                                                        "1rb"
                                                                        "1ra"
                                                                        "1r9"
                                                                        "1r8"
                                                                        "1r7"
                                                                        "1r6"
                                                                        "1r5"
                                                                        "1r4"
                                                                        "1r3"
                                                                        "1r2"
                                                                        "1r1"
                                                                        "1r0"
                                                                        "1qz"
                                                                        "1qy"
                                                                        "1qx"
                                                                        "1qw"
                                                                        "1qv"
                                                                        "1qu"
                                                                        "1qt"
                                                                        "1qs"
                                                                        "1qr"
                                                                        "1qq"
                                                                        "1qp"
                                                                        "1qo"
                                                                        "1qn"
                                                                        "1qm"
                                                                        "1ql"
                                                                        "1qk"
                                                                        "1qj"
                                                                        "1qi"
                                                                        "1qh"
                                                                        "1qg"
                                                                        "1qf"
                                                                        "1qe"
                                                                        "1qd"
                                                                        "1qc"
                                                                        "1qb"
                                                                        "1qa"
                                                                        "1q9"
                                                                        "1q8"
                                                                        "1q7"
                                                                        "1q6"
                                                                        "1q5"
                                                                        "1q4"
                                                                        "1q3"
                                                                        "1q2"
                                                                        "1q1"
                                                                        "1q0"
                                                                        "1pz"
                                                                        "1py"))
                                                                     #(ribcage
                                                                       (define-structure
                                                                         define-expansion-accessors
                                                                         define-expansion-constructors)
                                                                       ((top)
                                                                        (top)
                                                                        (top))
                                                                       ("1og"
                                                                        "1of"
                                                                        "1oe")))
                                                                    (hygiene
                                                                      guile))
                                                                 (#{wrap _85hotwsCta0JfYIjI4J4E}#
                                                                   (cons #{args _85hotwsCta0JfYIjI4Nsu}#
                                                                         (cons #{e1 _85hotwsCta0JfYIjI4Nsv}#
                                                                               #{e2 _85hotwsCta0JfYIjI4Nsw}#))
                                                                   #{w _85hotwsCta0JfYIjI4Nnm}#
                                                                   #{mod _85hotwsCta0JfYIjI4Nnp}#))))
                                                     (begin
                                                       (if (if (pair? #{e _85hotwsCta0JfYIjI4Ns2}#)
                                                             #{s _85hotwsCta0JfYIjI4Nnn}#
                                                             #f)
                                                         (set-source-properties!
                                                           #{e _85hotwsCta0JfYIjI4Ns2}#
                                                           #{s _85hotwsCta0JfYIjI4Nnn}#))
                                                       #{e _85hotwsCta0JfYIjI4Ns2}#))
                                                   '(())
                                                   #{s _85hotwsCta0JfYIjI4Nnn}#
                                                   #{mod _85hotwsCta0JfYIjI4Nnp}#))
                                               #{tmp _85hotwsCta0JfYIjI4Nph}#)
                                             (let ((#{tmp _85hotwsCta0JfYIjI4Ns9}#
                                                     ($sc-dispatch
                                                       #{e _85hotwsCta0JfYIjI4Nnk}#
                                                       '(_ any))))
                                               (if (if #{tmp _85hotwsCta0JfYIjI4Ns9}#
                                                     (@apply
                                                       (lambda (#{name _85hotwsCta0JfYIjI4NtB}#)
                                                         (if (symbol?
                                                               #{name _85hotwsCta0JfYIjI4NtB}#)
                                                           #t
                                                           (if (if (vector?
                                                                     #{name _85hotwsCta0JfYIjI4NtB}#)
                                                                 (if (= (vector-length
                                                                          #{name _85hotwsCta0JfYIjI4NtB}#)
                                                                        4)
                                                                   (eq? (vector-ref
                                                                          #{name _85hotwsCta0JfYIjI4NtB}#
                                                                          0)
                                                                        'syntax-object)
                                                                   #f)
                                                                 #f)
                                                             (symbol?
                                                               (vector-ref
                                                                 #{name _85hotwsCta0JfYIjI4NtB}#
                                                                 1))
                                                             #f)))
                                                       #{tmp _85hotwsCta0JfYIjI4Ns9}#)
                                                     #f)
                                                 (@apply
                                                   (lambda (#{name _85hotwsCta0JfYIjI4Ntc}#)
                                                     (values
                                                       'define-form
                                                       (#{wrap _85hotwsCta0JfYIjI4J4E}#
                                                         #{name _85hotwsCta0JfYIjI4Ntc}#
                                                         #{w _85hotwsCta0JfYIjI4Nnm}#
                                                         #{mod _85hotwsCta0JfYIjI4Nnp}#)
                                                       '(#(syntax-object
                                                           if
                                                           ((top)
                                                            #(ribcage
                                                              #(name)
                                                              #((top))
                                                              #("29k"))
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(ftype
                                                                fval
                                                                fe
                                                                fw
                                                                fs
                                                                fmod)
                                                              #((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                              #("28w"
                                                                "28x"
                                                                "28y"
                                                                "28z"
                                                                "290"
                                                                "291"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(first)
                                                              #((top))
                                                              #("28v"))
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(e
                                                                r
                                                                w
                                                                s
                                                                rib
                                                                mod
                                                                for-car?)
                                                              #((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                              #("28l"
                                                                "28m"
                                                                "28n"
                                                                "28o"
                                                                "28p"
                                                                "28q"
                                                                "28r"))
                                                            #(ribcage
                                                              (lambda-var-list
                                                                gen-var
                                                                strip
                                                                expand-lambda-case
                                                                lambda*-formals
                                                                expand-simple-lambda
                                                                lambda-formals
                                                                ellipsis?
                                                                expand-void
                                                                eval-local-transformer
                                                                expand-local-syntax
                                                                expand-body
                                                                expand-macro
                                                                expand-application
                                                                expand-expr
                                                                expand
                                                                syntax-type
                                                                parse-when-list
                                                                expand-install-global
                                                                expand-top-sequence
                                                                expand-sequence
                                                                source-wrap
                                                                wrap
                                                                bound-id-member?
                                                                distinct-bound-ids?
                                                                valid-bound-ids?
                                                                bound-id=?
                                                                free-id=?
                                                                with-transformer-environment
                                                                transformer-environment
                                                                resolve-identifier
                                                                locally-bound-identifiers
                                                                id-var-name
                                                                same-marks?
                                                                join-marks
                                                                join-wraps
                                                                smart-append
                                                                make-binding-wrap
                                                                extend-ribcage!
                                                                make-empty-ribcage
                                                                new-mark
                                                                anti-mark
                                                                the-anti-mark
                                                                top-marked?
                                                                top-wrap
                                                                empty-wrap
                                                                set-ribcage-labels!
                                                                set-ribcage-marks!
                                                                set-ribcage-symnames!
                                                                ribcage-labels
                                                                ribcage-marks
                                                                ribcage-symnames
                                                                ribcage?
                                                                make-ribcage
                                                                gen-labels
                                                                gen-label
                                                                make-rename
                                                                rename-marks
                                                                rename-new
                                                                rename-old
                                                                subst-rename?
                                                                wrap-subst
                                                                wrap-marks
                                                                make-wrap
                                                                id-sym-name&marks
                                                                id-sym-name
                                                                id?
                                                                nonsymbol-id?
                                                                global-extend
                                                                lookup
                                                                macros-only-env
                                                                extend-var-env
                                                                extend-env
                                                                null-env
                                                                binding-value
                                                                binding-type
                                                                make-binding
                                                                arg-check
                                                                source-annotation
                                                                no-source
                                                                set-syntax-object-module!
                                                                set-syntax-object-wrap!
                                                                set-syntax-object-expression!
                                                                syntax-object-module
                                                                syntax-object-wrap
                                                                syntax-object-expression
                                                                syntax-object?
                                                                make-syntax-object
                                                                build-lexical-var
                                                                build-letrec
                                                                build-named-let
                                                                build-let
                                                                build-sequence
                                                                build-data
                                                                build-primref
                                                                build-lambda-case
                                                                build-case-lambda
                                                                build-simple-lambda
                                                                build-global-definition
                                                                build-global-assignment
                                                                build-global-reference
                                                                analyze-variable
                                                                build-lexical-assignment
                                                                build-lexical-reference
                                                                build-dynlet
                                                                build-conditional
                                                                build-application
                                                                build-void
                                                                maybe-name-value!
                                                                decorate-source
                                                                get-global-definition-hook
                                                                put-global-definition-hook
                                                                gensym-hook
                                                                local-eval-hook
                                                                top-level-eval-hook
                                                                fx<
                                                                fx=
                                                                fx-
                                                                fx+
                                                                set-lambda-meta!
                                                                lambda-meta
                                                                lambda?
                                                                make-dynlet
                                                                make-letrec
                                                                make-let
                                                                make-lambda-case
                                                                make-lambda
                                                                make-sequence
                                                                make-application
                                                                make-conditional
                                                                make-toplevel-define
                                                                make-toplevel-set
                                                                make-toplevel-ref
                                                                make-module-set
                                                                make-module-ref
                                                                make-lexical-set
                                                                make-lexical-ref
                                                                make-primitive-ref
                                                                make-const
                                                                make-void)
                                                              ((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                              ("1tt"
                                                               "1ts"
                                                               "1tr"
                                                               "1tq"
                                                               "1tp"
                                                               "1to"
                                                               "1tn"
                                                               "1tm"
                                                               "1tl"
                                                               "1tk"
                                                               "1tj"
                                                               "1ti"
                                                               "1th"
                                                               "1tg"
                                                               "1tf"
                                                               "1te"
                                                               "1td"
                                                               "1tc"
                                                               "1tb"
                                                               "1ta"
                                                               "1t9"
                                                               "1t8"
                                                               "1t7"
                                                               "1t6"
                                                               "1t5"
                                                               "1t4"
                                                               "1t3"
                                                               "1t2"
                                                               "1t1"
                                                               "1t0"
                                                               "1sz"
                                                               "1sy"
                                                               "1sx"
                                                               "1sw"
                                                               "1sv"
                                                               "1su"
                                                               "1st"
                                                               "1ss"
                                                               "1sr"
                                                               "1sq"
                                                               "1sp"
                                                               "1so"
                                                               "1sn"
                                                               "1sm"
                                                               "1sl"
                                                               "1sk"
                                                               "1sj"
                                                               "1si"
                                                               "1sh"
                                                               "1sg"
                                                               "1sf"
                                                               "1se"
                                                               "1sd"
                                                               "1sc"
                                                               "1sb"
                                                               "1sa"
                                                               "1s9"
                                                               "1s8"
                                                               "1s7"
                                                               "1s6"
                                                               "1s5"
                                                               "1s4"
                                                               "1s3"
                                                               "1s2"
                                                               "1s1"
                                                               "1s0"
                                                               "1rz"
                                                               "1ry"
                                                               "1rx"
                                                               "1rw"
                                                               "1rv"
                                                               "1ru"
                                                               "1rt"
                                                               "1rs"
                                                               "1rr"
                                                               "1rq"
                                                               "1rp"
                                                               "1ro"
                                                               "1rn"
                                                               "1rm"
                                                               "1rl"
                                                               "1rk"
                                                               "1rj"
                                                               "1ri"
                                                               "1rh"
                                                               "1rg"
                                                               "1rf"
                                                               "1re"
                                                               "1rd"
                                                               "1rc"
                                                               "1rb"
                                                               "1ra"
                                                               "1r9"
                                                               "1r8"
                                                               "1r7"
                                                               "1r6"
                                                               "1r5"
                                                               "1r4"
                                                               "1r3"
                                                               "1r2"
                                                               "1r1"
                                                               "1r0"
                                                               "1qz"
                                                               "1qy"
                                                               "1qx"
                                                               "1qw"
                                                               "1qv"
                                                               "1qu"
                                                               "1qt"
                                                               "1qs"
                                                               "1qr"
                                                               "1qq"
                                                               "1qp"
                                                               "1qo"
                                                               "1qn"
                                                               "1qm"
                                                               "1ql"
                                                               "1qk"
                                                               "1qj"
                                                               "1qi"
                                                               "1qh"
                                                               "1qg"
                                                               "1qf"
                                                               "1qe"
                                                               "1qd"
                                                               "1qc"
                                                               "1qb"
                                                               "1qa"
                                                               "1q9"
                                                               "1q8"
                                                               "1q7"
                                                               "1q6"
                                                               "1q5"
                                                               "1q4"
                                                               "1q3"
                                                               "1q2"
                                                               "1q1"
                                                               "1q0"
                                                               "1pz"
                                                               "1py"))
                                                            #(ribcage
                                                              (define-structure
                                                                define-expansion-accessors
                                                                define-expansion-constructors)
                                                              ((top)
                                                               (top)
                                                               (top))
                                                              ("1og"
                                                               "1of"
                                                               "1oe")))
                                                           (hygiene guile))
                                                         #(syntax-object
                                                           #f
                                                           ((top)
                                                            #(ribcage
                                                              #(name)
                                                              #((top))
                                                              #("29k"))
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(ftype
                                                                fval
                                                                fe
                                                                fw
                                                                fs
                                                                fmod)
                                                              #((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                              #("28w"
                                                                "28x"
                                                                "28y"
                                                                "28z"
                                                                "290"
                                                                "291"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(first)
                                                              #((top))
                                                              #("28v"))
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(e
                                                                r
                                                                w
                                                                s
                                                                rib
                                                                mod
                                                                for-car?)
                                                              #((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                              #("28l"
                                                                "28m"
                                                                "28n"
                                                                "28o"
                                                                "28p"
                                                                "28q"
                                                                "28r"))
                                                            #(ribcage
                                                              (lambda-var-list
                                                                gen-var
                                                                strip
                                                                expand-lambda-case
                                                                lambda*-formals
                                                                expand-simple-lambda
                                                                lambda-formals
                                                                ellipsis?
                                                                expand-void
                                                                eval-local-transformer
                                                                expand-local-syntax
                                                                expand-body
                                                                expand-macro
                                                                expand-application
                                                                expand-expr
                                                                expand
                                                                syntax-type
                                                                parse-when-list
                                                                expand-install-global
                                                                expand-top-sequence
                                                                expand-sequence
                                                                source-wrap
                                                                wrap
                                                                bound-id-member?
                                                                distinct-bound-ids?
                                                                valid-bound-ids?
                                                                bound-id=?
                                                                free-id=?
                                                                with-transformer-environment
                                                                transformer-environment
                                                                resolve-identifier
                                                                locally-bound-identifiers
                                                                id-var-name
                                                                same-marks?
                                                                join-marks
                                                                join-wraps
                                                                smart-append
                                                                make-binding-wrap
                                                                extend-ribcage!
                                                                make-empty-ribcage
                                                                new-mark
                                                                anti-mark
                                                                the-anti-mark
                                                                top-marked?
                                                                top-wrap
                                                                empty-wrap
                                                                set-ribcage-labels!
                                                                set-ribcage-marks!
                                                                set-ribcage-symnames!
                                                                ribcage-labels
                                                                ribcage-marks
                                                                ribcage-symnames
                                                                ribcage?
                                                                make-ribcage
                                                                gen-labels
                                                                gen-label
                                                                make-rename
                                                                rename-marks
                                                                rename-new
                                                                rename-old
                                                                subst-rename?
                                                                wrap-subst
                                                                wrap-marks
                                                                make-wrap
                                                                id-sym-name&marks
                                                                id-sym-name
                                                                id?
                                                                nonsymbol-id?
                                                                global-extend
                                                                lookup
                                                                macros-only-env
                                                                extend-var-env
                                                                extend-env
                                                                null-env
                                                                binding-value
                                                                binding-type
                                                                make-binding
                                                                arg-check
                                                                source-annotation
                                                                no-source
                                                                set-syntax-object-module!
                                                                set-syntax-object-wrap!
                                                                set-syntax-object-expression!
                                                                syntax-object-module
                                                                syntax-object-wrap
                                                                syntax-object-expression
                                                                syntax-object?
                                                                make-syntax-object
                                                                build-lexical-var
                                                                build-letrec
                                                                build-named-let
                                                                build-let
                                                                build-sequence
                                                                build-data
                                                                build-primref
                                                                build-lambda-case
                                                                build-case-lambda
                                                                build-simple-lambda
                                                                build-global-definition
                                                                build-global-assignment
                                                                build-global-reference
                                                                analyze-variable
                                                                build-lexical-assignment
                                                                build-lexical-reference
                                                                build-dynlet
                                                                build-conditional
                                                                build-application
                                                                build-void
                                                                maybe-name-value!
                                                                decorate-source
                                                                get-global-definition-hook
                                                                put-global-definition-hook
                                                                gensym-hook
                                                                local-eval-hook
                                                                top-level-eval-hook
                                                                fx<
                                                                fx=
                                                                fx-
                                                                fx+
                                                                set-lambda-meta!
                                                                lambda-meta
                                                                lambda?
                                                                make-dynlet
                                                                make-letrec
                                                                make-let
                                                                make-lambda-case
                                                                make-lambda
                                                                make-sequence
                                                                make-application
                                                                make-conditional
                                                                make-toplevel-define
                                                                make-toplevel-set
                                                                make-toplevel-ref
                                                                make-module-set
                                                                make-module-ref
                                                                make-lexical-set
                                                                make-lexical-ref
                                                                make-primitive-ref
                                                                make-const
                                                                make-void)
                                                              ((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                              ("1tt"
                                                               "1ts"
                                                               "1tr"
                                                               "1tq"
                                                               "1tp"
                                                               "1to"
                                                               "1tn"
                                                               "1tm"
                                                               "1tl"
                                                               "1tk"
                                                               "1tj"
                                                               "1ti"
                                                               "1th"
                                                               "1tg"
                                                               "1tf"
                                                               "1te"
                                                               "1td"
                                                               "1tc"
                                                               "1tb"
                                                               "1ta"
                                                               "1t9"
                                                               "1t8"
                                                               "1t7"
                                                               "1t6"
                                                               "1t5"
                                                               "1t4"
                                                               "1t3"
                                                               "1t2"
                                                               "1t1"
                                                               "1t0"
                                                               "1sz"
                                                               "1sy"
                                                               "1sx"
                                                               "1sw"
                                                               "1sv"
                                                               "1su"
                                                               "1st"
                                                               "1ss"
                                                               "1sr"
                                                               "1sq"
                                                               "1sp"
                                                               "1so"
                                                               "1sn"
                                                               "1sm"
                                                               "1sl"
                                                               "1sk"
                                                               "1sj"
                                                               "1si"
                                                               "1sh"
                                                               "1sg"
                                                               "1sf"
                                                               "1se"
                                                               "1sd"
                                                               "1sc"
                                                               "1sb"
                                                               "1sa"
                                                               "1s9"
                                                               "1s8"
                                                               "1s7"
                                                               "1s6"
                                                               "1s5"
                                                               "1s4"
                                                               "1s3"
                                                               "1s2"
                                                               "1s1"
                                                               "1s0"
                                                               "1rz"
                                                               "1ry"
                                                               "1rx"
                                                               "1rw"
                                                               "1rv"
                                                               "1ru"
                                                               "1rt"
                                                               "1rs"
                                                               "1rr"
                                                               "1rq"
                                                               "1rp"
                                                               "1ro"
                                                               "1rn"
                                                               "1rm"
                                                               "1rl"
                                                               "1rk"
                                                               "1rj"
                                                               "1ri"
                                                               "1rh"
                                                               "1rg"
                                                               "1rf"
                                                               "1re"
                                                               "1rd"
                                                               "1rc"
                                                               "1rb"
                                                               "1ra"
                                                               "1r9"
                                                               "1r8"
                                                               "1r7"
                                                               "1r6"
                                                               "1r5"
                                                               "1r4"
                                                               "1r3"
                                                               "1r2"
                                                               "1r1"
                                                               "1r0"
                                                               "1qz"
                                                               "1qy"
                                                               "1qx"
                                                               "1qw"
                                                               "1qv"
                                                               "1qu"
                                                               "1qt"
                                                               "1qs"
                                                               "1qr"
                                                               "1qq"
                                                               "1qp"
                                                               "1qo"
                                                               "1qn"
                                                               "1qm"
                                                               "1ql"
                                                               "1qk"
                                                               "1qj"
                                                               "1qi"
                                                               "1qh"
                                                               "1qg"
                                                               "1qf"
                                                               "1qe"
                                                               "1qd"
                                                               "1qc"
                                                               "1qb"
                                                               "1qa"
                                                               "1q9"
                                                               "1q8"
                                                               "1q7"
                                                               "1q6"
                                                               "1q5"
                                                               "1q4"
                                                               "1q3"
                                                               "1q2"
                                                               "1q1"
                                                               "1q0"
                                                               "1pz"
                                                               "1py"))
                                                            #(ribcage
                                                              (define-structure
                                                                define-expansion-accessors
                                                                define-expansion-constructors)
                                                              ((top)
                                                               (top)
                                                               (top))
                                                              ("1og"
                                                               "1of"
                                                               "1oe")))
                                                           (hygiene guile))
                                                         #(syntax-object
                                                           #f
                                                           ((top)
                                                            #(ribcage
                                                              #(name)
                                                              #((top))
                                                              #("29k"))
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(ftype
                                                                fval
                                                                fe
                                                                fw
                                                                fs
                                                                fmod)
                                                              #((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                              #("28w"
                                                                "28x"
                                                                "28y"
                                                                "28z"
                                                                "290"
                                                                "291"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(first)
                                                              #((top))
                                                              #("28v"))
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(e
                                                                r
                                                                w
                                                                s
                                                                rib
                                                                mod
                                                                for-car?)
                                                              #((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                              #("28l"
                                                                "28m"
                                                                "28n"
                                                                "28o"
                                                                "28p"
                                                                "28q"
                                                                "28r"))
                                                            #(ribcage
                                                              (lambda-var-list
                                                                gen-var
                                                                strip
                                                                expand-lambda-case
                                                                lambda*-formals
                                                                expand-simple-lambda
                                                                lambda-formals
                                                                ellipsis?
                                                                expand-void
                                                                eval-local-transformer
                                                                expand-local-syntax
                                                                expand-body
                                                                expand-macro
                                                                expand-application
                                                                expand-expr
                                                                expand
                                                                syntax-type
                                                                parse-when-list
                                                                expand-install-global
                                                                expand-top-sequence
                                                                expand-sequence
                                                                source-wrap
                                                                wrap
                                                                bound-id-member?
                                                                distinct-bound-ids?
                                                                valid-bound-ids?
                                                                bound-id=?
                                                                free-id=?
                                                                with-transformer-environment
                                                                transformer-environment
                                                                resolve-identifier
                                                                locally-bound-identifiers
                                                                id-var-name
                                                                same-marks?
                                                                join-marks
                                                                join-wraps
                                                                smart-append
                                                                make-binding-wrap
                                                                extend-ribcage!
                                                                make-empty-ribcage
                                                                new-mark
                                                                anti-mark
                                                                the-anti-mark
                                                                top-marked?
                                                                top-wrap
                                                                empty-wrap
                                                                set-ribcage-labels!
                                                                set-ribcage-marks!
                                                                set-ribcage-symnames!
                                                                ribcage-labels
                                                                ribcage-marks
                                                                ribcage-symnames
                                                                ribcage?
                                                                make-ribcage
                                                                gen-labels
                                                                gen-label
                                                                make-rename
                                                                rename-marks
                                                                rename-new
                                                                rename-old
                                                                subst-rename?
                                                                wrap-subst
                                                                wrap-marks
                                                                make-wrap
                                                                id-sym-name&marks
                                                                id-sym-name
                                                                id?
                                                                nonsymbol-id?
                                                                global-extend
                                                                lookup
                                                                macros-only-env
                                                                extend-var-env
                                                                extend-env
                                                                null-env
                                                                binding-value
                                                                binding-type
                                                                make-binding
                                                                arg-check
                                                                source-annotation
                                                                no-source
                                                                set-syntax-object-module!
                                                                set-syntax-object-wrap!
                                                                set-syntax-object-expression!
                                                                syntax-object-module
                                                                syntax-object-wrap
                                                                syntax-object-expression
                                                                syntax-object?
                                                                make-syntax-object
                                                                build-lexical-var
                                                                build-letrec
                                                                build-named-let
                                                                build-let
                                                                build-sequence
                                                                build-data
                                                                build-primref
                                                                build-lambda-case
                                                                build-case-lambda
                                                                build-simple-lambda
                                                                build-global-definition
                                                                build-global-assignment
                                                                build-global-reference
                                                                analyze-variable
                                                                build-lexical-assignment
                                                                build-lexical-reference
                                                                build-dynlet
                                                                build-conditional
                                                                build-application
                                                                build-void
                                                                maybe-name-value!
                                                                decorate-source
                                                                get-global-definition-hook
                                                                put-global-definition-hook
                                                                gensym-hook
                                                                local-eval-hook
                                                                top-level-eval-hook
                                                                fx<
                                                                fx=
                                                                fx-
                                                                fx+
                                                                set-lambda-meta!
                                                                lambda-meta
                                                                lambda?
                                                                make-dynlet
                                                                make-letrec
                                                                make-let
                                                                make-lambda-case
                                                                make-lambda
                                                                make-sequence
                                                                make-application
                                                                make-conditional
                                                                make-toplevel-define
                                                                make-toplevel-set
                                                                make-toplevel-ref
                                                                make-module-set
                                                                make-module-ref
                                                                make-lexical-set
                                                                make-lexical-ref
                                                                make-primitive-ref
                                                                make-const
                                                                make-void)
                                                              ((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                              ("1tt"
                                                               "1ts"
                                                               "1tr"
                                                               "1tq"
                                                               "1tp"
                                                               "1to"
                                                               "1tn"
                                                               "1tm"
                                                               "1tl"
                                                               "1tk"
                                                               "1tj"
                                                               "1ti"
                                                               "1th"
                                                               "1tg"
                                                               "1tf"
                                                               "1te"
                                                               "1td"
                                                               "1tc"
                                                               "1tb"
                                                               "1ta"
                                                               "1t9"
                                                               "1t8"
                                                               "1t7"
                                                               "1t6"
                                                               "1t5"
                                                               "1t4"
                                                               "1t3"
                                                               "1t2"
                                                               "1t1"
                                                               "1t0"
                                                               "1sz"
                                                               "1sy"
                                                               "1sx"
                                                               "1sw"
                                                               "1sv"
                                                               "1su"
                                                               "1st"
                                                               "1ss"
                                                               "1sr"
                                                               "1sq"
                                                               "1sp"
                                                               "1so"
                                                               "1sn"
                                                               "1sm"
                                                               "1sl"
                                                               "1sk"
                                                               "1sj"
                                                               "1si"
                                                               "1sh"
                                                               "1sg"
                                                               "1sf"
                                                               "1se"
                                                               "1sd"
                                                               "1sc"
                                                               "1sb"
                                                               "1sa"
                                                               "1s9"
                                                               "1s8"
                                                               "1s7"
                                                               "1s6"
                                                               "1s5"
                                                               "1s4"
                                                               "1s3"
                                                               "1s2"
                                                               "1s1"
                                                               "1s0"
                                                               "1rz"
                                                               "1ry"
                                                               "1rx"
                                                               "1rw"
                                                               "1rv"
                                                               "1ru"
                                                               "1rt"
                                                               "1rs"
                                                               "1rr"
                                                               "1rq"
                                                               "1rp"
                                                               "1ro"
                                                               "1rn"
                                                               "1rm"
                                                               "1rl"
                                                               "1rk"
                                                               "1rj"
                                                               "1ri"
                                                               "1rh"
                                                               "1rg"
                                                               "1rf"
                                                               "1re"
                                                               "1rd"
                                                               "1rc"
                                                               "1rb"
                                                               "1ra"
                                                               "1r9"
                                                               "1r8"
                                                               "1r7"
                                                               "1r6"
                                                               "1r5"
                                                               "1r4"
                                                               "1r3"
                                                               "1r2"
                                                               "1r1"
                                                               "1r0"
                                                               "1qz"
                                                               "1qy"
                                                               "1qx"
                                                               "1qw"
                                                               "1qv"
                                                               "1qu"
                                                               "1qt"
                                                               "1qs"
                                                               "1qr"
                                                               "1qq"
                                                               "1qp"
                                                               "1qo"
                                                               "1qn"
                                                               "1qm"
                                                               "1ql"
                                                               "1qk"
                                                               "1qj"
                                                               "1qi"
                                                               "1qh"
                                                               "1qg"
                                                               "1qf"
                                                               "1qe"
                                                               "1qd"
                                                               "1qc"
                                                               "1qb"
                                                               "1qa"
                                                               "1q9"
                                                               "1q8"
                                                               "1q7"
                                                               "1q6"
                                                               "1q5"
                                                               "1q4"
                                                               "1q3"
                                                               "1q2"
                                                               "1q1"
                                                               "1q0"
                                                               "1pz"
                                                               "1py"))
                                                            #(ribcage
                                                              (define-structure
                                                                define-expansion-accessors
                                                                define-expansion-constructors)
                                                              ((top)
                                                               (top)
                                                               (top))
                                                              ("1og"
                                                               "1of"
                                                               "1oe")))
                                                           (hygiene guile)))
                                                       '(())
                                                       #{s _85hotwsCta0JfYIjI4Nnn}#
                                                       #{mod _85hotwsCta0JfYIjI4Nnp}#))
                                                   #{tmp _85hotwsCta0JfYIjI4Ns9}#)
                                                 (syntax-violation
                                                   #f
                                                   "source expression failed to match any pattern"
                                                   #{e _85hotwsCta0JfYIjI4Nnk}#)))))))
                                     (if (eqv? #{ftype _85hotwsCta0JfYIjI4NoQ}#
                                               'define-syntax)
                                       (let ((#{tmp _85hotwsCta0JfYIjI4Ntv}#
                                               ($sc-dispatch
                                                 #{e _85hotwsCta0JfYIjI4Nnk}#
                                                 '(_ any any))))
                                         (if (if #{tmp _85hotwsCta0JfYIjI4Ntv}#
                                               (@apply
                                                 (lambda (#{name _85hotwsCta0JfYIjI4Ntz}#
                                                          #{val _85hotwsCta0JfYIjI4Nt0}#)
                                                   (if (symbol?
                                                         #{name _85hotwsCta0JfYIjI4Ntz}#)
                                                     #t
                                                     (if (if (vector?
                                                               #{name _85hotwsCta0JfYIjI4Ntz}#)
                                                           (if (= (vector-length
                                                                    #{name _85hotwsCta0JfYIjI4Ntz}#)
                                                                  4)
                                                             (eq? (vector-ref
                                                                    #{name _85hotwsCta0JfYIjI4Ntz}#
                                                                    0)
                                                                  'syntax-object)
                                                             #f)
                                                           #f)
                                                       (symbol?
                                                         (vector-ref
                                                           #{name _85hotwsCta0JfYIjI4Ntz}#
                                                           1))
                                                       #f)))
                                                 #{tmp _85hotwsCta0JfYIjI4Ntv}#)
                                               #f)
                                           (@apply
                                             (lambda (#{name _85hotwsCta0JfYIjI4NuP}#
                                                      #{val _85hotwsCta0JfYIjI4NuQ}#)
                                               (values
                                                 'define-syntax-form
                                                 #{name _85hotwsCta0JfYIjI4NuP}#
                                                 #{val _85hotwsCta0JfYIjI4NuQ}#
                                                 #{w _85hotwsCta0JfYIjI4Nnm}#
                                                 #{s _85hotwsCta0JfYIjI4Nnn}#
                                                 #{mod _85hotwsCta0JfYIjI4Nnp}#))
                                             #{tmp _85hotwsCta0JfYIjI4Ntv}#)
                                           (syntax-violation
                                             #f
                                             "source expression failed to match any pattern"
                                             #{e _85hotwsCta0JfYIjI4Nnk}#)))
                                       (if (eqv? #{ftype _85hotwsCta0JfYIjI4NoQ}#
                                                 'define-syntax-parameter)
                                         (let ((#{tmp _85hotwsCta0JfYIjI4Nub}#
                                                 ($sc-dispatch
                                                   #{e _85hotwsCta0JfYIjI4Nnk}#
                                                   '(_ any any))))
                                           (if (if #{tmp _85hotwsCta0JfYIjI4Nub}#
                                                 (@apply
                                                   (lambda (#{name _85hotwsCta0JfYIjI4Nuf}#
                                                            #{val _85hotwsCta0JfYIjI4Nug}#)
                                                     (if (symbol?
                                                           #{name _85hotwsCta0JfYIjI4Nuf}#)
                                                       #t
                                                       (if (if (vector?
                                                                 #{name _85hotwsCta0JfYIjI4Nuf}#)
                                                             (if (= (vector-length
                                                                      #{name _85hotwsCta0JfYIjI4Nuf}#)
                                                                    4)
                                                               (eq? (vector-ref
                                                                      #{name _85hotwsCta0JfYIjI4Nuf}#
                                                                      0)
                                                                    'syntax-object)
                                                               #f)
                                                             #f)
                                                         (symbol?
                                                           (vector-ref
                                                             #{name _85hotwsCta0JfYIjI4Nuf}#
                                                             1))
                                                         #f)))
                                                   #{tmp _85hotwsCta0JfYIjI4Nub}#)
                                                 #f)
                                             (@apply
                                               (lambda (#{name _85hotwsCta0JfYIjI4Nu7}#
                                                        #{val _85hotwsCta0JfYIjI4Nu8}#)
                                                 (values
                                                   'define-syntax-parameter-form
                                                   #{name _85hotwsCta0JfYIjI4Nu7}#
                                                   #{val _85hotwsCta0JfYIjI4Nu8}#
                                                   #{w _85hotwsCta0JfYIjI4Nnm}#
                                                   #{s _85hotwsCta0JfYIjI4Nnn}#
                                                   #{mod _85hotwsCta0JfYIjI4Nnp}#))
                                               #{tmp _85hotwsCta0JfYIjI4Nub}#)
                                             (syntax-violation
                                               #f
                                               "source expression failed to match any pattern"
                                               #{e _85hotwsCta0JfYIjI4Nnk}#)))
                                         (values
                                           'call
                                           #f
                                           #{e _85hotwsCta0JfYIjI4Nnk}#
                                           #{w _85hotwsCta0JfYIjI4Nnm}#
                                           #{s _85hotwsCta0JfYIjI4Nnn}#
                                           #{mod _85hotwsCta0JfYIjI4Nnp}#)))))))))))))))
             (if (if (vector? #{e _85hotwsCta0JfYIjI4Nnk}#)
                   (if (= (vector-length #{e _85hotwsCta0JfYIjI4Nnk}#)
                          4)
                     (eq? (vector-ref #{e _85hotwsCta0JfYIjI4Nnk}# 0)
                          'syntax-object)
                     #f)
                   #f)
               (#{syntax-type _85hotwsCta0JfYIjI4J4K}#
                 (vector-ref #{e _85hotwsCta0JfYIjI4Nnk}# 1)
                 #{r _85hotwsCta0JfYIjI4Nnl}#
                 (#{join-wraps _85hotwsCta0JfYIjI4J33}#
                   #{w _85hotwsCta0JfYIjI4Nnm}#
                   (vector-ref #{e _85hotwsCta0JfYIjI4Nnk}# 2))
                 (let ((#{t _85hotwsCta0JfYIjI4NvX}#
                         (#{source-annotation _85hotwsCta0JfYIjI4J3g}#
                           #{e _85hotwsCta0JfYIjI4Nnk}#)))
                   (if #{t _85hotwsCta0JfYIjI4NvX}#
                     #{t _85hotwsCta0JfYIjI4NvX}#
                     #{s _85hotwsCta0JfYIjI4Nnn}#))
                 #{rib _85hotwsCta0JfYIjI4Nno}#
                 (let ((#{t _85hotwsCta0JfYIjI4NzC}#
                         (vector-ref #{e _85hotwsCta0JfYIjI4Nnk}# 3)))
                   (if #{t _85hotwsCta0JfYIjI4NzC}#
                     #{t _85hotwsCta0JfYIjI4NzC}#
                     #{mod _85hotwsCta0JfYIjI4Nnp}#))
                 #{for-car? _85hotwsCta0JfYIjI4Nnq}#)
               (if (self-evaluating? #{e _85hotwsCta0JfYIjI4Nnk}#)
                 (values
                   'constant
                   #f
                   #{e _85hotwsCta0JfYIjI4Nnk}#
                   #{w _85hotwsCta0JfYIjI4Nnm}#
                   #{s _85hotwsCta0JfYIjI4Nnn}#
                   #{mod _85hotwsCta0JfYIjI4Nnp}#)
                 (values
                   'other
                   #f
                   #{e _85hotwsCta0JfYIjI4Nnk}#
                   #{w _85hotwsCta0JfYIjI4Nnm}#
                   #{s _85hotwsCta0JfYIjI4Nnn}#
                   #{mod _85hotwsCta0JfYIjI4Nnp}#)))))))
     (#{expand _85hotwsCta0JfYIjI4J4L}#
       (lambda (#{e _85hotwsCta0JfYIjI4NzL}#
                #{r _85hotwsCta0JfYIjI4NzM}#
                #{w _85hotwsCta0JfYIjI4NzN}#
                #{mod _85hotwsCta0JfYIjI4NzO}#)
         (call-with-values
           (lambda ()
             (#{syntax-type _85hotwsCta0JfYIjI4J4K}#
               #{e _85hotwsCta0JfYIjI4NzL}#
               #{r _85hotwsCta0JfYIjI4NzM}#
               #{w _85hotwsCta0JfYIjI4NzN}#
               (#{source-annotation _85hotwsCta0JfYIjI4J3g}#
                 #{e _85hotwsCta0JfYIjI4NzL}#)
               #f
               #{mod _85hotwsCta0JfYIjI4NzO}#
               #f))
           (lambda (#{type _85hotwsCta0JfYIjI4N1p}#
                    #{value _85hotwsCta0JfYIjI4N1q}#
                    #{e _85hotwsCta0JfYIjI4N1r}#
                    #{w _85hotwsCta0JfYIjI4N1s}#
                    #{s _85hotwsCta0JfYIjI4N1t}#
                    #{mod _85hotwsCta0JfYIjI4N1u}#)
             (#{expand-expr _85hotwsCta0JfYIjI4J4M}#
               #{type _85hotwsCta0JfYIjI4N1p}#
               #{value _85hotwsCta0JfYIjI4N1q}#
               #{e _85hotwsCta0JfYIjI4N1r}#
               #{r _85hotwsCta0JfYIjI4NzM}#
               #{w _85hotwsCta0JfYIjI4N1s}#
               #{s _85hotwsCta0JfYIjI4N1t}#
               #{mod _85hotwsCta0JfYIjI4N1u}#)))))
     (#{expand-expr _85hotwsCta0JfYIjI4J4M}#
       (lambda (#{type _85hotwsCta0JfYIjI4N1x}#
                #{value _85hotwsCta0JfYIjI4N1y}#
                #{e _85hotwsCta0JfYIjI4N1z}#
                #{r _85hotwsCta0JfYIjI4N10}#
                #{w _85hotwsCta0JfYIjI4N11}#
                #{s _85hotwsCta0JfYIjI4N12}#
                #{mod _85hotwsCta0JfYIjI4N13}#)
         (if (eqv? #{type _85hotwsCta0JfYIjI4N1x}# 'lexical)
           (make-struct/no-tail
             (vector-ref %expanded-vtables 3)
             #{s _85hotwsCta0JfYIjI4N12}#
             #{e _85hotwsCta0JfYIjI4N1z}#
             #{value _85hotwsCta0JfYIjI4N1y}#)
           (if (if (eqv? #{type _85hotwsCta0JfYIjI4N1x}# 'core)
                 #t
                 (eqv? #{type _85hotwsCta0JfYIjI4N1x}# 'core-form))
             (#{value _85hotwsCta0JfYIjI4N1y}#
               #{e _85hotwsCta0JfYIjI4N1z}#
               #{r _85hotwsCta0JfYIjI4N10}#
               #{w _85hotwsCta0JfYIjI4N11}#
               #{s _85hotwsCta0JfYIjI4N12}#
               #{mod _85hotwsCta0JfYIjI4N13}#)
             (if (eqv? #{type _85hotwsCta0JfYIjI4N1x}#
                       'module-ref)
               (call-with-values
                 (lambda ()
                   (#{value _85hotwsCta0JfYIjI4N1y}#
                     #{e _85hotwsCta0JfYIjI4N1z}#
                     #{r _85hotwsCta0JfYIjI4N10}#
                     #{w _85hotwsCta0JfYIjI4N11}#))
                 (lambda (#{e _85hotwsCta0JfYIjI4N2R}#
                          #{r _85hotwsCta0JfYIjI4N2S}#
                          #{w _85hotwsCta0JfYIjI4N2T}#
                          #{s _85hotwsCta0JfYIjI4N2U}#
                          #{mod _85hotwsCta0JfYIjI4N2V}#)
                   (#{expand _85hotwsCta0JfYIjI4J4L}#
                     #{e _85hotwsCta0JfYIjI4N2R}#
                     #{r _85hotwsCta0JfYIjI4N2S}#
                     #{w _85hotwsCta0JfYIjI4N2T}#
                     #{mod _85hotwsCta0JfYIjI4N2V}#)))
               (if (eqv? #{type _85hotwsCta0JfYIjI4N1x}#
                         'lexical-call)
                 (#{expand-application _85hotwsCta0JfYIjI4J4N}#
                   (let ((#{id _85hotwsCta0JfYIjI4N3g}#
                           (car #{e _85hotwsCta0JfYIjI4N1z}#)))
                     (#{build-lexical-reference _85hotwsCta0JfYIjI4J3J}#
                       'fun
                       (#{source-annotation _85hotwsCta0JfYIjI4J3g}#
                         #{id _85hotwsCta0JfYIjI4N3g}#)
                       (if (if (vector? #{id _85hotwsCta0JfYIjI4N3g}#)
                             (if (= (vector-length
                                      #{id _85hotwsCta0JfYIjI4N3g}#)
                                    4)
                               (eq? (vector-ref
                                      #{id _85hotwsCta0JfYIjI4N3g}#
                                      0)
                                    'syntax-object)
                               #f)
                             #f)
                         (syntax->datum #{id _85hotwsCta0JfYIjI4N3g}#)
                         #{id _85hotwsCta0JfYIjI4N3g}#)
                       #{value _85hotwsCta0JfYIjI4N1y}#))
                   #{e _85hotwsCta0JfYIjI4N1z}#
                   #{r _85hotwsCta0JfYIjI4N10}#
                   #{w _85hotwsCta0JfYIjI4N11}#
                   #{s _85hotwsCta0JfYIjI4N12}#
                   #{mod _85hotwsCta0JfYIjI4N13}#)
                 (if (eqv? #{type _85hotwsCta0JfYIjI4N1x}#
                           'global-call)
                   (#{expand-application _85hotwsCta0JfYIjI4J4N}#
                     (#{build-global-reference _85hotwsCta0JfYIjI4J3M}#
                       (#{source-annotation _85hotwsCta0JfYIjI4J3g}#
                         (car #{e _85hotwsCta0JfYIjI4N1z}#))
                       (if (if (vector? #{value _85hotwsCta0JfYIjI4N1y}#)
                             (if (= (vector-length
                                      #{value _85hotwsCta0JfYIjI4N1y}#)
                                    4)
                               (eq? (vector-ref
                                      #{value _85hotwsCta0JfYIjI4N1y}#
                                      0)
                                    'syntax-object)
                               #f)
                             #f)
                         (vector-ref #{value _85hotwsCta0JfYIjI4N1y}# 1)
                         #{value _85hotwsCta0JfYIjI4N1y}#)
                       (if (if (vector? #{value _85hotwsCta0JfYIjI4N1y}#)
                             (if (= (vector-length
                                      #{value _85hotwsCta0JfYIjI4N1y}#)
                                    4)
                               (eq? (vector-ref
                                      #{value _85hotwsCta0JfYIjI4N1y}#
                                      0)
                                    'syntax-object)
                               #f)
                             #f)
                         (vector-ref #{value _85hotwsCta0JfYIjI4N1y}# 3)
                         #{mod _85hotwsCta0JfYIjI4N13}#))
                     #{e _85hotwsCta0JfYIjI4N1z}#
                     #{r _85hotwsCta0JfYIjI4N10}#
                     #{w _85hotwsCta0JfYIjI4N11}#
                     #{s _85hotwsCta0JfYIjI4N12}#
                     #{mod _85hotwsCta0JfYIjI4N13}#)
                   (if (eqv? #{type _85hotwsCta0JfYIjI4N1x}# 'constant)
                     (let ((#{exp _85hotwsCta0JfYIjI4N8x}#
                             (#{strip _85hotwsCta0JfYIjI4J4Y}#
                               (#{wrap _85hotwsCta0JfYIjI4J4E}#
                                 (begin
                                   (if (if (pair? #{e _85hotwsCta0JfYIjI4N1z}#)
                                         #{s _85hotwsCta0JfYIjI4N12}#
                                         #f)
                                     (set-source-properties!
                                       #{e _85hotwsCta0JfYIjI4N1z}#
                                       #{s _85hotwsCta0JfYIjI4N12}#))
                                   #{e _85hotwsCta0JfYIjI4N1z}#)
                                 #{w _85hotwsCta0JfYIjI4N11}#
                                 #{mod _85hotwsCta0JfYIjI4N13}#)
                               '(()))))
                       (make-struct/no-tail
                         (vector-ref %expanded-vtables 1)
                         #{s _85hotwsCta0JfYIjI4N12}#
                         #{exp _85hotwsCta0JfYIjI4N8x}#))
                     (if (eqv? #{type _85hotwsCta0JfYIjI4N1x}# 'global)
                       (#{analyze-variable _85hotwsCta0JfYIjI4J3L}#
                         #{mod _85hotwsCta0JfYIjI4N13}#
                         #{value _85hotwsCta0JfYIjI4N1y}#
                         (lambda (#{mod _85hotwsCta0JfYIjI4N9V}#
                                  #{var _85hotwsCta0JfYIjI4N9W}#
                                  #{public? _85hotwsCta0JfYIjI4N9X}#)
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 5)
                             #{s _85hotwsCta0JfYIjI4N12}#
                             #{mod _85hotwsCta0JfYIjI4N9V}#
                             #{var _85hotwsCta0JfYIjI4N9W}#
                             #{public? _85hotwsCta0JfYIjI4N9X}#))
                         (lambda (#{var _85hotwsCta0JfYIjI4N9g}#)
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 7)
                             #{s _85hotwsCta0JfYIjI4N12}#
                             #{var _85hotwsCta0JfYIjI4N9g}#)))
                       (if (eqv? #{type _85hotwsCta0JfYIjI4N1x}# 'call)
                         (#{expand-application _85hotwsCta0JfYIjI4J4N}#
                           (#{expand _85hotwsCta0JfYIjI4J4L}#
                             (car #{e _85hotwsCta0JfYIjI4N1z}#)
                             #{r _85hotwsCta0JfYIjI4N10}#
                             #{w _85hotwsCta0JfYIjI4N11}#
                             #{mod _85hotwsCta0JfYIjI4N13}#)
                           #{e _85hotwsCta0JfYIjI4N1z}#
                           #{r _85hotwsCta0JfYIjI4N10}#
                           #{w _85hotwsCta0JfYIjI4N11}#
                           #{s _85hotwsCta0JfYIjI4N12}#
                           #{mod _85hotwsCta0JfYIjI4N13}#)
                         (if (eqv? #{type _85hotwsCta0JfYIjI4N1x}#
                                   'begin-form)
                           (let ((#{tmp _85hotwsCta0JfYIjI4N$r}#
                                   ($sc-dispatch
                                     #{e _85hotwsCta0JfYIjI4N1z}#
                                     '(_ any . each-any))))
                             (if #{tmp _85hotwsCta0JfYIjI4N$r}#
                               (@apply
                                 (lambda (#{e1 _85hotwsCta0JfYIjI4N$v}#
                                          #{e2 _85hotwsCta0JfYIjI4N$w}#)
                                   (#{expand-sequence _85hotwsCta0JfYIjI4J4G}#
                                     (cons #{e1 _85hotwsCta0JfYIjI4N$v}#
                                           #{e2 _85hotwsCta0JfYIjI4N$w}#)
                                     #{r _85hotwsCta0JfYIjI4N10}#
                                     #{w _85hotwsCta0JfYIjI4N11}#
                                     #{s _85hotwsCta0JfYIjI4N12}#
                                     #{mod _85hotwsCta0JfYIjI4N13}#))
                                 #{tmp _85hotwsCta0JfYIjI4N$r}#)
                               (let ((#{tmp _85hotwsCta0JfYIjI4OAH}#
                                       ($sc-dispatch
                                         #{e _85hotwsCta0JfYIjI4N1z}#
                                         '(_))))
                                 (if #{tmp _85hotwsCta0JfYIjI4OAH}#
                                   (@apply
                                     (lambda ()
                                       (if (include-deprecated-features)
                                         (begin
                                           (issue-deprecation-warning
                                             "Sequences of zero expressions are deprecated.  Use *unspecified*.")
                                           (make-struct/no-tail
                                             (vector-ref %expanded-vtables 0)
                                             #f))
                                         (syntax-violation
                                           #f
                                           "sequence of zero expressions"
                                           (#{wrap _85hotwsCta0JfYIjI4J4E}#
                                             (begin
                                               (if (if (pair? #{e _85hotwsCta0JfYIjI4N1z}#)
                                                     #{s _85hotwsCta0JfYIjI4N12}#
                                                     #f)
                                                 (set-source-properties!
                                                   #{e _85hotwsCta0JfYIjI4N1z}#
                                                   #{s _85hotwsCta0JfYIjI4N12}#))
                                               #{e _85hotwsCta0JfYIjI4N1z}#)
                                             #{w _85hotwsCta0JfYIjI4N11}#
                                             #{mod _85hotwsCta0JfYIjI4N13}#))))
                                     #{tmp _85hotwsCta0JfYIjI4OAH}#)
                                   (syntax-violation
                                     #f
                                     "source expression failed to match any pattern"
                                     #{e _85hotwsCta0JfYIjI4N1z}#)))))
                           (if (eqv? #{type _85hotwsCta0JfYIjI4N1x}#
                                     'local-syntax-form)
                             (#{expand-local-syntax _85hotwsCta0JfYIjI4J4Q}#
                               #{value _85hotwsCta0JfYIjI4N1y}#
                               #{e _85hotwsCta0JfYIjI4N1z}#
                               #{r _85hotwsCta0JfYIjI4N10}#
                               #{w _85hotwsCta0JfYIjI4N11}#
                               #{s _85hotwsCta0JfYIjI4N12}#
                               #{mod _85hotwsCta0JfYIjI4N13}#
                               #{expand-sequence _85hotwsCta0JfYIjI4J4G}#)
                             (if (eqv? #{type _85hotwsCta0JfYIjI4N1x}#
                                       'eval-when-form)
                               (let ((#{tmp _85hotwsCta0JfYIjI4OB2}#
                                       ($sc-dispatch
                                         #{e _85hotwsCta0JfYIjI4N1z}#
                                         '(_ each-any any . each-any))))
                                 (if #{tmp _85hotwsCta0JfYIjI4OB2}#
                                   (@apply
                                     (lambda (#{x _85hotwsCta0JfYIjI4OB6}#
                                              #{e1 _85hotwsCta0JfYIjI4OB7}#
                                              #{e2 _85hotwsCta0JfYIjI4OB8}#)
                                       (let ((#{when-list _85hotwsCta0JfYIjI4OB9}#
                                               (#{parse-when-list _85hotwsCta0JfYIjI4J4J}#
                                                 #{e _85hotwsCta0JfYIjI4N1z}#
                                                 #{x _85hotwsCta0JfYIjI4OB6}#)))
                                         (if (memq 'eval
                                                   #{when-list _85hotwsCta0JfYIjI4OB9}#)
                                           (#{expand-sequence _85hotwsCta0JfYIjI4J4G}#
                                             (cons #{e1 _85hotwsCta0JfYIjI4OB7}#
                                                   #{e2 _85hotwsCta0JfYIjI4OB8}#)
                                             #{r _85hotwsCta0JfYIjI4N10}#
                                             #{w _85hotwsCta0JfYIjI4N11}#
                                             #{s _85hotwsCta0JfYIjI4N12}#
                                             #{mod _85hotwsCta0JfYIjI4N13}#)
                                           (make-struct/no-tail
                                             (vector-ref %expanded-vtables 0)
                                             #f))))
                                     #{tmp _85hotwsCta0JfYIjI4OB2}#)
                                   (syntax-violation
                                     #f
                                     "source expression failed to match any pattern"
                                     #{e _85hotwsCta0JfYIjI4N1z}#)))
                               (if (if (eqv? #{type _85hotwsCta0JfYIjI4N1x}#
                                             'define-form)
                                     #t
                                     (if (eqv? #{type _85hotwsCta0JfYIjI4N1x}#
                                               'define-syntax-form)
                                       #t
                                       (eqv? #{type _85hotwsCta0JfYIjI4N1x}#
                                             'define-syntax-parameter-form)))
                                 (syntax-violation
                                   #f
                                   "definition in expression context"
                                   #{e _85hotwsCta0JfYIjI4N1z}#
                                   (#{wrap _85hotwsCta0JfYIjI4J4E}#
                                     #{value _85hotwsCta0JfYIjI4N1y}#
                                     #{w _85hotwsCta0JfYIjI4N11}#
                                     #{mod _85hotwsCta0JfYIjI4N13}#))
                                 (if (eqv? #{type _85hotwsCta0JfYIjI4N1x}#
                                           'syntax)
                                   (syntax-violation
                                     #f
                                     "reference to pattern variable outside syntax form"
                                     (#{wrap _85hotwsCta0JfYIjI4J4E}#
                                       (begin
                                         (if (if (pair? #{e _85hotwsCta0JfYIjI4N1z}#)
                                               #{s _85hotwsCta0JfYIjI4N12}#
                                               #f)
                                           (set-source-properties!
                                             #{e _85hotwsCta0JfYIjI4N1z}#
                                             #{s _85hotwsCta0JfYIjI4N12}#))
                                         #{e _85hotwsCta0JfYIjI4N1z}#)
                                       #{w _85hotwsCta0JfYIjI4N11}#
                                       #{mod _85hotwsCta0JfYIjI4N13}#))
                                   (if (eqv? #{type _85hotwsCta0JfYIjI4N1x}#
                                             'displaced-lexical)
                                     (syntax-violation
                                       #f
                                       "reference to identifier outside its scope"
                                       (#{wrap _85hotwsCta0JfYIjI4J4E}#
                                         (begin
                                           (if (if (pair? #{e _85hotwsCta0JfYIjI4N1z}#)
                                                 #{s _85hotwsCta0JfYIjI4N12}#
                                                 #f)
                                             (set-source-properties!
                                               #{e _85hotwsCta0JfYIjI4N1z}#
                                               #{s _85hotwsCta0JfYIjI4N12}#))
                                           #{e _85hotwsCta0JfYIjI4N1z}#)
                                         #{w _85hotwsCta0JfYIjI4N11}#
                                         #{mod _85hotwsCta0JfYIjI4N13}#))
                                     (syntax-violation
                                       #f
                                       "unexpected syntax"
                                       (#{wrap _85hotwsCta0JfYIjI4J4E}#
                                         (begin
                                           (if (if (pair? #{e _85hotwsCta0JfYIjI4N1z}#)
                                                 #{s _85hotwsCta0JfYIjI4N12}#
                                                 #f)
                                             (set-source-properties!
                                               #{e _85hotwsCta0JfYIjI4N1z}#
                                               #{s _85hotwsCta0JfYIjI4N12}#))
                                           #{e _85hotwsCta0JfYIjI4N1z}#)
                                         #{w _85hotwsCta0JfYIjI4N11}#
                                         #{mod _85hotwsCta0JfYIjI4N13}#))))))))))))))))))
     (#{expand-application _85hotwsCta0JfYIjI4J4N}#
       (lambda (#{x _85hotwsCta0JfYIjI4OFt}#
                #{e _85hotwsCta0JfYIjI4OFu}#
                #{r _85hotwsCta0JfYIjI4OFv}#
                #{w _85hotwsCta0JfYIjI4OFw}#
                #{s _85hotwsCta0JfYIjI4OFx}#
                #{mod _85hotwsCta0JfYIjI4OFy}#)
         (let ((#{tmp _85hotwsCta0JfYIjI4OF0}#
                 ($sc-dispatch
                   #{e _85hotwsCta0JfYIjI4OFu}#
                   '(any . each-any))))
           (if #{tmp _85hotwsCta0JfYIjI4OF0}#
             (@apply
               (lambda (#{e0 _85hotwsCta0JfYIjI4OF4}#
                        #{e1 _85hotwsCta0JfYIjI4OF5}#)
                 (#{build-application _85hotwsCta0JfYIjI4J3G}#
                   #{s _85hotwsCta0JfYIjI4OFx}#
                   #{x _85hotwsCta0JfYIjI4OFt}#
                   (map (lambda (#{e _85hotwsCta0JfYIjI4OHJ}#)
                          (#{expand _85hotwsCta0JfYIjI4J4L}#
                            #{e _85hotwsCta0JfYIjI4OHJ}#
                            #{r _85hotwsCta0JfYIjI4OFv}#
                            #{w _85hotwsCta0JfYIjI4OFw}#
                            #{mod _85hotwsCta0JfYIjI4OFy}#))
                        #{e1 _85hotwsCta0JfYIjI4OF5}#)))
               #{tmp _85hotwsCta0JfYIjI4OF0}#)
             (syntax-violation
               #f
               "source expression failed to match any pattern"
               #{e _85hotwsCta0JfYIjI4OFu}#)))))
     (#{expand-macro _85hotwsCta0JfYIjI4J4O}#
       (lambda (#{p _85hotwsCta0JfYIjI4OIV}#
                #{e _85hotwsCta0JfYIjI4OIW}#
                #{r _85hotwsCta0JfYIjI4OIX}#
                #{w _85hotwsCta0JfYIjI4OIY}#
                #{s _85hotwsCta0JfYIjI4OIZ}#
                #{rib _85hotwsCta0JfYIjI4OIa}#
                #{mod _85hotwsCta0JfYIjI4OIb}#)
         (letrec*
           ((#{rebuild-macro-output _85hotwsCta0JfYIjI4OIc}#
              (lambda (#{x _85hotwsCta0JfYIjI4OI9}#
                       #{m _85hotwsCta0JfYIjI4OI$}#)
                (if (pair? #{x _85hotwsCta0JfYIjI4OI9}#)
                  (let ((#{e _85hotwsCta0JfYIjI4OJC}#
                          (cons (#{rebuild-macro-output _85hotwsCta0JfYIjI4OIc}#
                                  (car #{x _85hotwsCta0JfYIjI4OI9}#)
                                  #{m _85hotwsCta0JfYIjI4OI$}#)
                                (#{rebuild-macro-output _85hotwsCta0JfYIjI4OIc}#
                                  (cdr #{x _85hotwsCta0JfYIjI4OI9}#)
                                  #{m _85hotwsCta0JfYIjI4OI$}#))))
                    (begin
                      (if (if (pair? #{e _85hotwsCta0JfYIjI4OJC}#)
                            #{s _85hotwsCta0JfYIjI4OIZ}#
                            #f)
                        (set-source-properties!
                          #{e _85hotwsCta0JfYIjI4OJC}#
                          #{s _85hotwsCta0JfYIjI4OIZ}#))
                      #{e _85hotwsCta0JfYIjI4OJC}#))
                  (if (if (vector? #{x _85hotwsCta0JfYIjI4OI9}#)
                        (if (= (vector-length #{x _85hotwsCta0JfYIjI4OI9}#)
                               4)
                          (eq? (vector-ref #{x _85hotwsCta0JfYIjI4OI9}# 0)
                               'syntax-object)
                          #f)
                        #f)
                    (let ((#{w _85hotwsCta0JfYIjI4OJS}#
                            (vector-ref #{x _85hotwsCta0JfYIjI4OI9}# 2)))
                      (let ((#{ms _85hotwsCta0JfYIjI4OJT}#
                              (car #{w _85hotwsCta0JfYIjI4OJS}#))
                            (#{s _85hotwsCta0JfYIjI4OJU}#
                              (cdr #{w _85hotwsCta0JfYIjI4OJS}#)))
                        (if (if (pair? #{ms _85hotwsCta0JfYIjI4OJT}#)
                              (eq? (car #{ms _85hotwsCta0JfYIjI4OJT}#) #f)
                              #f)
                          (let ((#{expression _85hotwsCta0JfYIjI4OJc}#
                                  (vector-ref #{x _85hotwsCta0JfYIjI4OI9}# 1))
                                (#{wrap _85hotwsCta0JfYIjI4OJd}#
                                  (cons (cdr #{ms _85hotwsCta0JfYIjI4OJT}#)
                                        (if #{rib _85hotwsCta0JfYIjI4OIa}#
                                          (cons #{rib _85hotwsCta0JfYIjI4OIa}#
                                                (cdr #{s _85hotwsCta0JfYIjI4OJU}#))
                                          (cdr #{s _85hotwsCta0JfYIjI4OJU}#))))
                                (#{module _85hotwsCta0JfYIjI4OJe}#
                                  (vector-ref #{x _85hotwsCta0JfYIjI4OI9}# 3)))
                            (vector
                              'syntax-object
                              #{expression _85hotwsCta0JfYIjI4OJc}#
                              #{wrap _85hotwsCta0JfYIjI4OJd}#
                              #{module _85hotwsCta0JfYIjI4OJe}#))
                          (let ((#{expression _85hotwsCta0JfYIjI4OJo}#
                                  (let ((#{e _85hotwsCta0JfYIjI4OJt}#
                                          (vector-ref
                                            #{x _85hotwsCta0JfYIjI4OI9}#
                                            1)))
                                    (begin
                                      (if (if (pair? #{e _85hotwsCta0JfYIjI4OJt}#)
                                            #{s _85hotwsCta0JfYIjI4OJU}#
                                            #f)
                                        (set-source-properties!
                                          #{e _85hotwsCta0JfYIjI4OJt}#
                                          #{s _85hotwsCta0JfYIjI4OJU}#))
                                      #{e _85hotwsCta0JfYIjI4OJt}#)))
                                (#{wrap _85hotwsCta0JfYIjI4OJp}#
                                  (cons (cons #{m _85hotwsCta0JfYIjI4OI$}#
                                              #{ms _85hotwsCta0JfYIjI4OJT}#)
                                        (if #{rib _85hotwsCta0JfYIjI4OIa}#
                                          (cons #{rib _85hotwsCta0JfYIjI4OIa}#
                                                (cons 'shift
                                                      #{s _85hotwsCta0JfYIjI4OJU}#))
                                          (cons 'shift
                                                #{s _85hotwsCta0JfYIjI4OJU}#))))
                                (#{module _85hotwsCta0JfYIjI4OJq}#
                                  (vector-ref #{x _85hotwsCta0JfYIjI4OI9}# 3)))
                            (vector
                              'syntax-object
                              #{expression _85hotwsCta0JfYIjI4OJo}#
                              #{wrap _85hotwsCta0JfYIjI4OJp}#
                              #{module _85hotwsCta0JfYIjI4OJq}#)))))
                    (if (vector? #{x _85hotwsCta0JfYIjI4OI9}#)
                      (let ((#{n _85hotwsCta0JfYIjI4OJ5}#
                              (vector-length #{x _85hotwsCta0JfYIjI4OI9}#)))
                        (let ((#{v _85hotwsCta0JfYIjI4OJ6}#
                                (let ((#{e _85hotwsCta0JfYIjI4OKC}#
                                        (make-vector
                                          #{n _85hotwsCta0JfYIjI4OJ5}#)))
                                  (begin
                                    (if (if (pair? #{e _85hotwsCta0JfYIjI4OKC}#)
                                          #{x _85hotwsCta0JfYIjI4OI9}#
                                          #f)
                                      (set-source-properties!
                                        #{e _85hotwsCta0JfYIjI4OKC}#
                                        #{x _85hotwsCta0JfYIjI4OI9}#))
                                    #{e _85hotwsCta0JfYIjI4OKC}#))))
                          (letrec*
                            ((#{loop _85hotwsCta0JfYIjI4OJ7}#
                               (lambda (#{i _85hotwsCta0JfYIjI4OKv}#)
                                 (if (= #{i _85hotwsCta0JfYIjI4OKv}#
                                        #{n _85hotwsCta0JfYIjI4OJ5}#)
                                   #{v _85hotwsCta0JfYIjI4OJ6}#
                                   (begin
                                     (vector-set!
                                       #{v _85hotwsCta0JfYIjI4OJ6}#
                                       #{i _85hotwsCta0JfYIjI4OKv}#
                                       (#{rebuild-macro-output _85hotwsCta0JfYIjI4OIc}#
                                         (vector-ref
                                           #{x _85hotwsCta0JfYIjI4OI9}#
                                           #{i _85hotwsCta0JfYIjI4OKv}#)
                                         #{m _85hotwsCta0JfYIjI4OI$}#))
                                     (#{loop _85hotwsCta0JfYIjI4OJ7}#
                                       (#{1+}# #{i _85hotwsCta0JfYIjI4OKv}#)))))))
                            (#{loop _85hotwsCta0JfYIjI4OJ7}# 0))))
                      (if (symbol? #{x _85hotwsCta0JfYIjI4OI9}#)
                        (syntax-violation
                          #f
                          "encountered raw symbol in macro output"
                          (let ((#{s _85hotwsCta0JfYIjI4OK1}#
                                  (cdr #{w _85hotwsCta0JfYIjI4OIY}#)))
                            (#{wrap _85hotwsCta0JfYIjI4J4E}#
                              (begin
                                (if (if (pair? #{e _85hotwsCta0JfYIjI4OIW}#)
                                      #{s _85hotwsCta0JfYIjI4OK1}#
                                      #f)
                                  (set-source-properties!
                                    #{e _85hotwsCta0JfYIjI4OIW}#
                                    #{s _85hotwsCta0JfYIjI4OK1}#))
                                #{e _85hotwsCta0JfYIjI4OIW}#)
                              #{w _85hotwsCta0JfYIjI4OIY}#
                              #{mod _85hotwsCta0JfYIjI4OIb}#))
                          #{x _85hotwsCta0JfYIjI4OI9}#)
                        (begin
                          (if (if (pair? #{x _85hotwsCta0JfYIjI4OI9}#)
                                #{s _85hotwsCta0JfYIjI4OIZ}#
                                #f)
                            (set-source-properties!
                              #{x _85hotwsCta0JfYIjI4OI9}#
                              #{s _85hotwsCta0JfYIjI4OIZ}#))
                          #{x _85hotwsCta0JfYIjI4OI9}#))))))))
           (with-fluids
             ((#{transformer-environment _85hotwsCta0JfYIjI4J39}#
                (lambda (#{k _85hotwsCta0JfYIjI4OId}#)
                  (#{k _85hotwsCta0JfYIjI4OId}#
                    #{e _85hotwsCta0JfYIjI4OIW}#
                    #{r _85hotwsCta0JfYIjI4OIX}#
                    #{w _85hotwsCta0JfYIjI4OIY}#
                    #{s _85hotwsCta0JfYIjI4OIZ}#
                    #{rib _85hotwsCta0JfYIjI4OIa}#
                    #{mod _85hotwsCta0JfYIjI4OIb}#))))
             (#{rebuild-macro-output _85hotwsCta0JfYIjI4OIc}#
               (#{p _85hotwsCta0JfYIjI4OIV}#
                 (let ((#{w _85hotwsCta0JfYIjI4OIk}#
                         (cons (cons #f (car #{w _85hotwsCta0JfYIjI4OIY}#))
                               (cons 'shift
                                     (cdr #{w _85hotwsCta0JfYIjI4OIY}#)))))
                   (#{wrap _85hotwsCta0JfYIjI4J4E}#
                     (begin
                       (if (if (pair? #{e _85hotwsCta0JfYIjI4OIW}#)
                             #{s _85hotwsCta0JfYIjI4OIZ}#
                             #f)
                         (set-source-properties!
                           #{e _85hotwsCta0JfYIjI4OIW}#
                           #{s _85hotwsCta0JfYIjI4OIZ}#))
                       #{e _85hotwsCta0JfYIjI4OIW}#)
                     #{w _85hotwsCta0JfYIjI4OIk}#
                     #{mod _85hotwsCta0JfYIjI4OIb}#)))
               (gensym "m"))))))
     (#{expand-body _85hotwsCta0JfYIjI4J4P}#
       (lambda (#{body _85hotwsCta0JfYIjI4OLV}#
                #{outer-form _85hotwsCta0JfYIjI4OLW}#
                #{r _85hotwsCta0JfYIjI4OLX}#
                #{w _85hotwsCta0JfYIjI4OLY}#
                #{mod _85hotwsCta0JfYIjI4OLZ}#)
         (let ((#{r _85hotwsCta0JfYIjI4OLa}#
                 (cons '("placeholder" placeholder)
                       #{r _85hotwsCta0JfYIjI4OLX}#)))
           (let ((#{ribcage _85hotwsCta0JfYIjI4OLb}#
                   (vector 'ribcage '() '() '())))
             (let ((#{w _85hotwsCta0JfYIjI4OLc}#
                     (cons (car #{w _85hotwsCta0JfYIjI4OLY}#)
                           (cons #{ribcage _85hotwsCta0JfYIjI4OLb}#
                                 (cdr #{w _85hotwsCta0JfYIjI4OLY}#)))))
               (letrec*
                 ((#{parse _85hotwsCta0JfYIjI4OLd}#
                    (lambda (#{body _85hotwsCta0JfYIjI4OLq}#
                             #{ids _85hotwsCta0JfYIjI4OLr}#
                             #{labels _85hotwsCta0JfYIjI4OLs}#
                             #{var-ids _85hotwsCta0JfYIjI4OLt}#
                             #{vars _85hotwsCta0JfYIjI4OLu}#
                             #{vals _85hotwsCta0JfYIjI4OLv}#
                             #{bindings _85hotwsCta0JfYIjI4OLw}#)
                      (if (null? #{body _85hotwsCta0JfYIjI4OLq}#)
                        (syntax-violation
                          #f
                          "no expressions in body"
                          #{outer-form _85hotwsCta0JfYIjI4OLW}#)
                        (let ((#{e _85hotwsCta0JfYIjI4OLx}#
                                (cdr (car #{body _85hotwsCta0JfYIjI4OLq}#)))
                              (#{er _85hotwsCta0JfYIjI4OLy}#
                                (car (car #{body _85hotwsCta0JfYIjI4OLq}#))))
                          (call-with-values
                            (lambda ()
                              (#{syntax-type _85hotwsCta0JfYIjI4J4K}#
                                #{e _85hotwsCta0JfYIjI4OLx}#
                                #{er _85hotwsCta0JfYIjI4OLy}#
                                '(())
                                (#{source-annotation _85hotwsCta0JfYIjI4J3g}#
                                  #{er _85hotwsCta0JfYIjI4OLy}#)
                                #{ribcage _85hotwsCta0JfYIjI4OLb}#
                                #{mod _85hotwsCta0JfYIjI4OLZ}#
                                #f))
                            (lambda (#{type _85hotwsCta0JfYIjI4OOP}#
                                     #{value _85hotwsCta0JfYIjI4OOQ}#
                                     #{e _85hotwsCta0JfYIjI4OOR}#
                                     #{w _85hotwsCta0JfYIjI4OOS}#
                                     #{s _85hotwsCta0JfYIjI4OOT}#
                                     #{mod _85hotwsCta0JfYIjI4OOU}#)
                              (if (eqv? #{type _85hotwsCta0JfYIjI4OOP}#
                                        'define-form)
                                (let ((#{id _85hotwsCta0JfYIjI4OOY}#
                                        (#{wrap _85hotwsCta0JfYIjI4J4E}#
                                          #{value _85hotwsCta0JfYIjI4OOQ}#
                                          #{w _85hotwsCta0JfYIjI4OOS}#
                                          #{mod _85hotwsCta0JfYIjI4OOU}#))
                                      (#{label _85hotwsCta0JfYIjI4OOZ}#
                                        (#{gen-label _85hotwsCta0JfYIjI4J3p}#)))
                                  (let ((#{var _85hotwsCta0JfYIjI4OOa}#
                                          (let ((#{id _85hotwsCta0JfYIjI4OPU}#
                                                  (if (if (vector?
                                                            #{id _85hotwsCta0JfYIjI4OOY}#)
                                                        (if (= (vector-length
                                                                 #{id _85hotwsCta0JfYIjI4OOY}#)
                                                               4)
                                                          (eq? (vector-ref
                                                                 #{id _85hotwsCta0JfYIjI4OOY}#
                                                                 0)
                                                               'syntax-object)
                                                          #f)
                                                        #f)
                                                    (vector-ref
                                                      #{id _85hotwsCta0JfYIjI4OOY}#
                                                      1)
                                                    #{id _85hotwsCta0JfYIjI4OOY}#)))
                                            (gensym
                                              (string-append
                                                (symbol->string
                                                  #{id _85hotwsCta0JfYIjI4OPU}#)
                                                " ")))))
                                    (begin
                                      (let ((#{update _85hotwsCta0JfYIjI4OPK}#
                                              (cons (vector-ref
                                                      #{id _85hotwsCta0JfYIjI4OOY}#
                                                      1)
                                                    (vector-ref
                                                      #{ribcage _85hotwsCta0JfYIjI4OLb}#
                                                      1))))
                                        (vector-set!
                                          #{ribcage _85hotwsCta0JfYIjI4OLb}#
                                          1
                                          #{update _85hotwsCta0JfYIjI4OPK}#))
                                      (let ((#{update _85hotwsCta0JfYIjI4OPM}#
                                              (cons (car (vector-ref
                                                           #{id _85hotwsCta0JfYIjI4OOY}#
                                                           2))
                                                    (vector-ref
                                                      #{ribcage _85hotwsCta0JfYIjI4OLb}#
                                                      2))))
                                        (vector-set!
                                          #{ribcage _85hotwsCta0JfYIjI4OLb}#
                                          2
                                          #{update _85hotwsCta0JfYIjI4OPM}#))
                                      (let ((#{update _85hotwsCta0JfYIjI4OPO}#
                                              (cons #{label _85hotwsCta0JfYIjI4OOZ}#
                                                    (vector-ref
                                                      #{ribcage _85hotwsCta0JfYIjI4OLb}#
                                                      3))))
                                        (vector-set!
                                          #{ribcage _85hotwsCta0JfYIjI4OLb}#
                                          3
                                          #{update _85hotwsCta0JfYIjI4OPO}#))
                                      (#{parse _85hotwsCta0JfYIjI4OLd}#
                                        (cdr #{body _85hotwsCta0JfYIjI4OLq}#)
                                        (cons #{id _85hotwsCta0JfYIjI4OOY}#
                                              #{ids _85hotwsCta0JfYIjI4OLr}#)
                                        (cons #{label _85hotwsCta0JfYIjI4OOZ}#
                                              #{labels _85hotwsCta0JfYIjI4OLs}#)
                                        (cons #{id _85hotwsCta0JfYIjI4OOY}#
                                              #{var-ids _85hotwsCta0JfYIjI4OLt}#)
                                        (cons #{var _85hotwsCta0JfYIjI4OOa}#
                                              #{vars _85hotwsCta0JfYIjI4OLu}#)
                                        (cons (cons #{er _85hotwsCta0JfYIjI4OLy}#
                                                    (#{wrap _85hotwsCta0JfYIjI4J4E}#
                                                      #{e _85hotwsCta0JfYIjI4OOR}#
                                                      #{w _85hotwsCta0JfYIjI4OOS}#
                                                      #{mod _85hotwsCta0JfYIjI4OOU}#))
                                              #{vals _85hotwsCta0JfYIjI4OLv}#)
                                        (cons (cons 'lexical
                                                    #{var _85hotwsCta0JfYIjI4OOa}#)
                                              #{bindings _85hotwsCta0JfYIjI4OLw}#)))))
                                (if (if (eqv? #{type _85hotwsCta0JfYIjI4OOP}#
                                              'define-syntax-form)
                                      #t
                                      (eqv? #{type _85hotwsCta0JfYIjI4OOP}#
                                            'define-syntax-parameter-form))
                                  (let ((#{id _85hotwsCta0JfYIjI4OP1}#
                                          (#{wrap _85hotwsCta0JfYIjI4J4E}#
                                            #{value _85hotwsCta0JfYIjI4OOQ}#
                                            #{w _85hotwsCta0JfYIjI4OOS}#
                                            #{mod _85hotwsCta0JfYIjI4OOU}#))
                                        (#{label _85hotwsCta0JfYIjI4OP2}#
                                          (#{gen-label _85hotwsCta0JfYIjI4J3p}#)))
                                    (begin
                                      (let ((#{update _85hotwsCta0JfYIjI4OQm}#
                                              (cons (vector-ref
                                                      #{id _85hotwsCta0JfYIjI4OP1}#
                                                      1)
                                                    (vector-ref
                                                      #{ribcage _85hotwsCta0JfYIjI4OLb}#
                                                      1))))
                                        (vector-set!
                                          #{ribcage _85hotwsCta0JfYIjI4OLb}#
                                          1
                                          #{update _85hotwsCta0JfYIjI4OQm}#))
                                      (let ((#{update _85hotwsCta0JfYIjI4OQo}#
                                              (cons (car (vector-ref
                                                           #{id _85hotwsCta0JfYIjI4OP1}#
                                                           2))
                                                    (vector-ref
                                                      #{ribcage _85hotwsCta0JfYIjI4OLb}#
                                                      2))))
                                        (vector-set!
                                          #{ribcage _85hotwsCta0JfYIjI4OLb}#
                                          2
                                          #{update _85hotwsCta0JfYIjI4OQo}#))
                                      (let ((#{update _85hotwsCta0JfYIjI4OQq}#
                                              (cons #{label _85hotwsCta0JfYIjI4OP2}#
                                                    (vector-ref
                                                      #{ribcage _85hotwsCta0JfYIjI4OLb}#
                                                      3))))
                                        (vector-set!
                                          #{ribcage _85hotwsCta0JfYIjI4OLb}#
                                          3
                                          #{update _85hotwsCta0JfYIjI4OQq}#))
                                      (#{parse _85hotwsCta0JfYIjI4OLd}#
                                        (cdr #{body _85hotwsCta0JfYIjI4OLq}#)
                                        (cons #{id _85hotwsCta0JfYIjI4OP1}#
                                              #{ids _85hotwsCta0JfYIjI4OLr}#)
                                        (cons #{label _85hotwsCta0JfYIjI4OP2}#
                                              #{labels _85hotwsCta0JfYIjI4OLs}#)
                                        #{var-ids _85hotwsCta0JfYIjI4OLt}#
                                        #{vars _85hotwsCta0JfYIjI4OLu}#
                                        #{vals _85hotwsCta0JfYIjI4OLv}#
                                        (cons (cons 'macro
                                                    (cons #{er _85hotwsCta0JfYIjI4OLy}#
                                                          (#{wrap _85hotwsCta0JfYIjI4J4E}#
                                                            #{e _85hotwsCta0JfYIjI4OOR}#
                                                            #{w _85hotwsCta0JfYIjI4OOS}#
                                                            #{mod _85hotwsCta0JfYIjI4OOU}#)))
                                              #{bindings _85hotwsCta0JfYIjI4OLw}#))))
                                  (if (eqv? #{type _85hotwsCta0JfYIjI4OOP}#
                                            'begin-form)
                                    (let ((#{tmp _85hotwsCta0JfYIjI4OQy}#
                                            ($sc-dispatch
                                              #{e _85hotwsCta0JfYIjI4OOR}#
                                              '(_ . each-any))))
                                      (if #{tmp _85hotwsCta0JfYIjI4OQy}#
                                        (@apply
                                          (lambda (#{e1 _85hotwsCta0JfYIjI4OQ2}#)
                                            (#{parse _85hotwsCta0JfYIjI4OLd}#
                                              (letrec*
                                                ((#{f _85hotwsCta0JfYIjI4OQ3}#
                                                   (lambda (#{forms _85hotwsCta0JfYIjI4OR2}#)
                                                     (if (null? #{forms _85hotwsCta0JfYIjI4OR2}#)
                                                       (cdr #{body _85hotwsCta0JfYIjI4OLq}#)
                                                       (cons (cons #{er _85hotwsCta0JfYIjI4OLy}#
                                                                   (#{wrap _85hotwsCta0JfYIjI4J4E}#
                                                                     (car #{forms _85hotwsCta0JfYIjI4OR2}#)
                                                                     #{w _85hotwsCta0JfYIjI4OOS}#
                                                                     #{mod _85hotwsCta0JfYIjI4OOU}#))
                                                             (#{f _85hotwsCta0JfYIjI4OQ3}#
                                                               (cdr #{forms _85hotwsCta0JfYIjI4OR2}#)))))))
                                                (#{f _85hotwsCta0JfYIjI4OQ3}#
                                                  #{e1 _85hotwsCta0JfYIjI4OQ2}#))
                                              #{ids _85hotwsCta0JfYIjI4OLr}#
                                              #{labels _85hotwsCta0JfYIjI4OLs}#
                                              #{var-ids _85hotwsCta0JfYIjI4OLt}#
                                              #{vars _85hotwsCta0JfYIjI4OLu}#
                                              #{vals _85hotwsCta0JfYIjI4OLv}#
                                              #{bindings _85hotwsCta0JfYIjI4OLw}#))
                                          #{tmp _85hotwsCta0JfYIjI4OQy}#)
                                        (syntax-violation
                                          #f
                                          "source expression failed to match any pattern"
                                          #{e _85hotwsCta0JfYIjI4OOR}#)))
                                    (if (eqv? #{type _85hotwsCta0JfYIjI4OOP}#
                                              'local-syntax-form)
                                      (#{expand-local-syntax _85hotwsCta0JfYIjI4J4Q}#
                                        #{value _85hotwsCta0JfYIjI4OOQ}#
                                        #{e _85hotwsCta0JfYIjI4OOR}#
                                        #{er _85hotwsCta0JfYIjI4OLy}#
                                        #{w _85hotwsCta0JfYIjI4OOS}#
                                        #{s _85hotwsCta0JfYIjI4OOT}#
                                        #{mod _85hotwsCta0JfYIjI4OOU}#
                                        (lambda (#{forms _85hotwsCta0JfYIjI4OSE}#
                                                 #{er _85hotwsCta0JfYIjI4OSF}#
                                                 #{w _85hotwsCta0JfYIjI4OSG}#
                                                 #{s _85hotwsCta0JfYIjI4OSH}#
                                                 #{mod _85hotwsCta0JfYIjI4OSI}#)
                                          (#{parse _85hotwsCta0JfYIjI4OLd}#
                                            (letrec*
                                              ((#{f _85hotwsCta0JfYIjI4OSJ}#
                                                 (lambda (#{forms _85hotwsCta0JfYIjI4OTI}#)
                                                   (if (null? #{forms _85hotwsCta0JfYIjI4OTI}#)
                                                     (cdr #{body _85hotwsCta0JfYIjI4OLq}#)
                                                     (cons (cons #{er _85hotwsCta0JfYIjI4OSF}#
                                                                 (#{wrap _85hotwsCta0JfYIjI4J4E}#
                                                                   (car #{forms _85hotwsCta0JfYIjI4OTI}#)
                                                                   #{w _85hotwsCta0JfYIjI4OSG}#
                                                                   #{mod _85hotwsCta0JfYIjI4OSI}#))
                                                           (#{f _85hotwsCta0JfYIjI4OSJ}#
                                                             (cdr #{forms _85hotwsCta0JfYIjI4OTI}#)))))))
                                              (#{f _85hotwsCta0JfYIjI4OSJ}#
                                                #{forms _85hotwsCta0JfYIjI4OSE}#))
                                            #{ids _85hotwsCta0JfYIjI4OLr}#
                                            #{labels _85hotwsCta0JfYIjI4OLs}#
                                            #{var-ids _85hotwsCta0JfYIjI4OLt}#
                                            #{vars _85hotwsCta0JfYIjI4OLu}#
                                            #{vals _85hotwsCta0JfYIjI4OLv}#
                                            #{bindings _85hotwsCta0JfYIjI4OLw}#)))
                                      (if (null? #{ids _85hotwsCta0JfYIjI4OLr}#)
                                        (#{build-sequence _85hotwsCta0JfYIjI4J3U}#
                                          #f
                                          (map (lambda (#{x _85hotwsCta0JfYIjI4OUJ}#)
                                                 (let ((#{e _85hotwsCta0JfYIjI4OUN}#
                                                         (cdr #{x _85hotwsCta0JfYIjI4OUJ}#))
                                                       (#{r _85hotwsCta0JfYIjI4OUO}#
                                                         (car #{x _85hotwsCta0JfYIjI4OUJ}#)))
                                                   (call-with-values
                                                     (lambda ()
                                                       (#{syntax-type _85hotwsCta0JfYIjI4J4K}#
                                                         #{e _85hotwsCta0JfYIjI4OUN}#
                                                         #{r _85hotwsCta0JfYIjI4OUO}#
                                                         '(())
                                                         (#{source-annotation _85hotwsCta0JfYIjI4J3g}#
                                                           #{e _85hotwsCta0JfYIjI4OUN}#)
                                                         #f
                                                         #{mod _85hotwsCta0JfYIjI4OOU}#
                                                         #f))
                                                     (lambda (#{type _85hotwsCta0JfYIjI4OUS}#
                                                              #{value _85hotwsCta0JfYIjI4OUT}#
                                                              #{e _85hotwsCta0JfYIjI4OUU}#
                                                              #{w _85hotwsCta0JfYIjI4OUV}#
                                                              #{s _85hotwsCta0JfYIjI4OUW}#
                                                              #{mod _85hotwsCta0JfYIjI4OUX}#)
                                                       (#{expand-expr _85hotwsCta0JfYIjI4J4M}#
                                                         #{type _85hotwsCta0JfYIjI4OUS}#
                                                         #{value _85hotwsCta0JfYIjI4OUT}#
                                                         #{e _85hotwsCta0JfYIjI4OUU}#
                                                         #{r _85hotwsCta0JfYIjI4OUO}#
                                                         #{w _85hotwsCta0JfYIjI4OUV}#
                                                         #{s _85hotwsCta0JfYIjI4OUW}#
                                                         #{mod _85hotwsCta0JfYIjI4OUX}#)))))
                                               (cons (cons #{er _85hotwsCta0JfYIjI4OLy}#
                                                           (#{wrap _85hotwsCta0JfYIjI4J4E}#
                                                             (begin
                                                               (if (if (pair? #{e _85hotwsCta0JfYIjI4OOR}#)
                                                                     #{s _85hotwsCta0JfYIjI4OOT}#
                                                                     #f)
                                                                 (set-source-properties!
                                                                   #{e _85hotwsCta0JfYIjI4OOR}#
                                                                   #{s _85hotwsCta0JfYIjI4OOT}#))
                                                               #{e _85hotwsCta0JfYIjI4OOR}#)
                                                             #{w _85hotwsCta0JfYIjI4OOS}#
                                                             #{mod _85hotwsCta0JfYIjI4OOU}#))
                                                     (cdr #{body _85hotwsCta0JfYIjI4OLq}#))))
                                        (begin
                                          (if (not (#{valid-bound-ids? _85hotwsCta0JfYIjI4J4B}#
                                                     #{ids _85hotwsCta0JfYIjI4OLr}#))
                                            (syntax-violation
                                              #f
                                              "invalid or duplicate identifier in definition"
                                              #{outer-form _85hotwsCta0JfYIjI4OLW}#))
                                          (letrec*
                                            ((#{loop _85hotwsCta0JfYIjI4OV8}#
                                               (lambda (#{bs _85hotwsCta0JfYIjI4OV@}#
                                                        #{er-cache _85hotwsCta0JfYIjI4OWA}#
                                                        #{r-cache _85hotwsCta0JfYIjI4OWB}#)
                                                 (if (not (null? #{bs _85hotwsCta0JfYIjI4OV@}#))
                                                   (let ((#{b _85hotwsCta0JfYIjI4OWC}#
                                                           (car #{bs _85hotwsCta0JfYIjI4OV@}#)))
                                                     (if (eq? (car #{b _85hotwsCta0JfYIjI4OWC}#)
                                                              'macro)
                                                       (let ((#{er _85hotwsCta0JfYIjI4OWE}#
                                                               (car (cdr #{b _85hotwsCta0JfYIjI4OWC}#))))
                                                         (let ((#{r-cache _85hotwsCta0JfYIjI4OWF}#
                                                                 (if (eq? #{er _85hotwsCta0JfYIjI4OWE}#
                                                                          #{er-cache _85hotwsCta0JfYIjI4OWA}#)
                                                                   #{r-cache _85hotwsCta0JfYIjI4OWB}#
                                                                   (#{macros-only-env _85hotwsCta0JfYIjI4J3j}#
                                                                     #{er _85hotwsCta0JfYIjI4OWE}#))))
                                                           (begin
                                                             (set-cdr!
                                                               #{b _85hotwsCta0JfYIjI4OWC}#
                                                               (#{eval-local-transformer _85hotwsCta0JfYIjI4J4R}#
                                                                 (#{expand _85hotwsCta0JfYIjI4J4L}#
                                                                   (cdr (cdr #{b _85hotwsCta0JfYIjI4OWC}#))
                                                                   #{r-cache _85hotwsCta0JfYIjI4OWF}#
                                                                   '(())
                                                                   #{mod _85hotwsCta0JfYIjI4OOU}#)
                                                                 #{mod _85hotwsCta0JfYIjI4OOU}#))
                                                             (#{loop _85hotwsCta0JfYIjI4OV8}#
                                                               (cdr #{bs _85hotwsCta0JfYIjI4OV@}#)
                                                               #{er _85hotwsCta0JfYIjI4OWE}#
                                                               #{r-cache _85hotwsCta0JfYIjI4OWF}#))))
                                                       (#{loop _85hotwsCta0JfYIjI4OV8}#
                                                         (cdr #{bs _85hotwsCta0JfYIjI4OV@}#)
                                                         #{er-cache _85hotwsCta0JfYIjI4OWA}#
                                                         #{r-cache _85hotwsCta0JfYIjI4OWB}#)))))))
                                            (#{loop _85hotwsCta0JfYIjI4OV8}#
                                              #{bindings _85hotwsCta0JfYIjI4OLw}#
                                              #f
                                              #f))
                                          (set-cdr!
                                            #{r _85hotwsCta0JfYIjI4OLa}#
                                            (#{extend-env _85hotwsCta0JfYIjI4J3h}#
                                              #{labels _85hotwsCta0JfYIjI4OLs}#
                                              #{bindings _85hotwsCta0JfYIjI4OLw}#
                                              (cdr #{r _85hotwsCta0JfYIjI4OLa}#)))
                                          (#{build-letrec _85hotwsCta0JfYIjI4J3X}#
                                            #f
                                            #t
                                            (reverse
                                              (map syntax->datum
                                                   #{var-ids _85hotwsCta0JfYIjI4OLt}#))
                                            (reverse
                                              #{vars _85hotwsCta0JfYIjI4OLu}#)
                                            (map (lambda (#{x _85hotwsCta0JfYIjI4Obc}#)
                                                   (let ((#{e _85hotwsCta0JfYIjI4Obg}#
                                                           (cdr #{x _85hotwsCta0JfYIjI4Obc}#))
                                                         (#{r _85hotwsCta0JfYIjI4Obh}#
                                                           (car #{x _85hotwsCta0JfYIjI4Obc}#)))
                                                     (call-with-values
                                                       (lambda ()
                                                         (#{syntax-type _85hotwsCta0JfYIjI4J4K}#
                                                           #{e _85hotwsCta0JfYIjI4Obg}#
                                                           #{r _85hotwsCta0JfYIjI4Obh}#
                                                           '(())
                                                           (#{source-annotation _85hotwsCta0JfYIjI4J3g}#
                                                             #{e _85hotwsCta0JfYIjI4Obg}#)
                                                           #f
                                                           #{mod _85hotwsCta0JfYIjI4OOU}#
                                                           #f))
                                                       (lambda (#{type _85hotwsCta0JfYIjI4Obl}#
                                                                #{value _85hotwsCta0JfYIjI4Obm}#
                                                                #{e _85hotwsCta0JfYIjI4Obn}#
                                                                #{w _85hotwsCta0JfYIjI4Obo}#
                                                                #{s _85hotwsCta0JfYIjI4Obp}#
                                                                #{mod _85hotwsCta0JfYIjI4Obq}#)
                                                         (#{expand-expr _85hotwsCta0JfYIjI4J4M}#
                                                           #{type _85hotwsCta0JfYIjI4Obl}#
                                                           #{value _85hotwsCta0JfYIjI4Obm}#
                                                           #{e _85hotwsCta0JfYIjI4Obn}#
                                                           #{r _85hotwsCta0JfYIjI4Obh}#
                                                           #{w _85hotwsCta0JfYIjI4Obo}#
                                                           #{s _85hotwsCta0JfYIjI4Obp}#
                                                           #{mod _85hotwsCta0JfYIjI4Obq}#)))))
                                                 (reverse
                                                   #{vals _85hotwsCta0JfYIjI4OLv}#))
                                            (let ((#{exps _85hotwsCta0JfYIjI4Obw}#
                                                    (map (lambda (#{x _85hotwsCta0JfYIjI4Obx}#)
                                                           (let ((#{e _85hotwsCta0JfYIjI4Ob0}#
                                                                   (cdr #{x _85hotwsCta0JfYIjI4Obx}#))
                                                                 (#{r _85hotwsCta0JfYIjI4Ob1}#
                                                                   (car #{x _85hotwsCta0JfYIjI4Obx}#)))
                                                             (call-with-values
                                                               (lambda ()
                                                                 (#{syntax-type _85hotwsCta0JfYIjI4J4K}#
                                                                   #{e _85hotwsCta0JfYIjI4Ob0}#
                                                                   #{r _85hotwsCta0JfYIjI4Ob1}#
                                                                   '(())
                                                                   (#{source-annotation _85hotwsCta0JfYIjI4J3g}#
                                                                     #{e _85hotwsCta0JfYIjI4Ob0}#)
                                                                   #f
                                                                   #{mod _85hotwsCta0JfYIjI4OOU}#
                                                                   #f))
                                                               (lambda (#{type _85hotwsCta0JfYIjI4Ob5}#
                                                                        #{value _85hotwsCta0JfYIjI4Ob6}#
                                                                        #{e _85hotwsCta0JfYIjI4Ob7}#
                                                                        #{w _85hotwsCta0JfYIjI4Ob8}#
                                                                        #{s _85hotwsCta0JfYIjI4Ob9}#
                                                                        #{mod _85hotwsCta0JfYIjI4Ob$}#)
                                                                 (#{expand-expr _85hotwsCta0JfYIjI4J4M}#
                                                                   #{type _85hotwsCta0JfYIjI4Ob5}#
                                                                   #{value _85hotwsCta0JfYIjI4Ob6}#
                                                                   #{e _85hotwsCta0JfYIjI4Ob7}#
                                                                   #{r _85hotwsCta0JfYIjI4Ob1}#
                                                                   #{w _85hotwsCta0JfYIjI4Ob8}#
                                                                   #{s _85hotwsCta0JfYIjI4Ob9}#
                                                                   #{mod _85hotwsCta0JfYIjI4Ob$}#)))))
                                                         (cons (cons #{er _85hotwsCta0JfYIjI4OLy}#
                                                                     (#{wrap _85hotwsCta0JfYIjI4J4E}#
                                                                       (begin
                                                                         (if (if (pair? #{e _85hotwsCta0JfYIjI4OOR}#)
                                                                               #{s _85hotwsCta0JfYIjI4OOT}#
                                                                               #f)
                                                                           (set-source-properties!
                                                                             #{e _85hotwsCta0JfYIjI4OOR}#
                                                                             #{s _85hotwsCta0JfYIjI4OOT}#))
                                                                         #{e _85hotwsCta0JfYIjI4OOR}#)
                                                                       #{w _85hotwsCta0JfYIjI4OOS}#
                                                                       #{mod _85hotwsCta0JfYIjI4OOU}#))
                                                               (cdr #{body _85hotwsCta0JfYIjI4OLq}#)))))
                                              (if (null? (cdr #{exps _85hotwsCta0JfYIjI4Obw}#))
                                                (car #{exps _85hotwsCta0JfYIjI4Obw}#)
                                                (make-struct/no-tail
                                                  (vector-ref
                                                    %expanded-vtables
                                                    12)
                                                  #f
                                                  #{exps _85hotwsCta0JfYIjI4Obw}#)))))))))))))))))
                 (#{parse _85hotwsCta0JfYIjI4OLd}#
                   (map (lambda (#{x _85hotwsCta0JfYIjI4OLg}#)
                          (cons #{r _85hotwsCta0JfYIjI4OLa}#
                                (#{wrap _85hotwsCta0JfYIjI4J4E}#
                                  #{x _85hotwsCta0JfYIjI4OLg}#
                                  #{w _85hotwsCta0JfYIjI4OLc}#
                                  #{mod _85hotwsCta0JfYIjI4OLZ}#)))
                        #{body _85hotwsCta0JfYIjI4OLV}#)
                   '()
                   '()
                   '()
                   '()
                   '()
                   '())))))))
     (#{expand-local-syntax _85hotwsCta0JfYIjI4J4Q}#
       (lambda (#{rec? _85hotwsCta0JfYIjI4OcY}#
                #{e _85hotwsCta0JfYIjI4OcZ}#
                #{r _85hotwsCta0JfYIjI4Oca}#
                #{w _85hotwsCta0JfYIjI4Ocb}#
                #{s _85hotwsCta0JfYIjI4Occ}#
                #{mod _85hotwsCta0JfYIjI4Ocd}#
                #{k _85hotwsCta0JfYIjI4Oce}#)
         (let ((#{tmp _85hotwsCta0JfYIjI4Ocg}#
                 ($sc-dispatch
                   #{e _85hotwsCta0JfYIjI4OcZ}#
                   '(_ #(each (any any)) any . each-any))))
           (if #{tmp _85hotwsCta0JfYIjI4Ocg}#
             (@apply
               (lambda (#{id _85hotwsCta0JfYIjI4Ock}#
                        #{val _85hotwsCta0JfYIjI4Ocl}#
                        #{e1 _85hotwsCta0JfYIjI4Ocm}#
                        #{e2 _85hotwsCta0JfYIjI4Ocn}#)
                 (if (not (#{valid-bound-ids? _85hotwsCta0JfYIjI4J4B}#
                            #{id _85hotwsCta0JfYIjI4Ock}#))
                   (syntax-violation
                     #f
                     "duplicate bound keyword"
                     #{e _85hotwsCta0JfYIjI4OcZ}#)
                   (let ((#{labels _85hotwsCta0JfYIjI4OeB}#
                           (#{gen-labels _85hotwsCta0JfYIjI4J3q}#
                             #{id _85hotwsCta0JfYIjI4Ock}#)))
                     (let ((#{new-w _85hotwsCta0JfYIjI4OeC}#
                             (#{make-binding-wrap _85hotwsCta0JfYIjI4J31}#
                               #{id _85hotwsCta0JfYIjI4Ock}#
                               #{labels _85hotwsCta0JfYIjI4OeB}#
                               #{w _85hotwsCta0JfYIjI4Ocb}#)))
                       (#{k _85hotwsCta0JfYIjI4Oce}#
                         (cons #{e1 _85hotwsCta0JfYIjI4Ocm}#
                               #{e2 _85hotwsCta0JfYIjI4Ocn}#)
                         (#{extend-env _85hotwsCta0JfYIjI4J3h}#
                           #{labels _85hotwsCta0JfYIjI4OeB}#
                           (let ((#{trans-r _85hotwsCta0JfYIjI4Oei}#
                                   (#{macros-only-env _85hotwsCta0JfYIjI4J3j}#
                                     #{r _85hotwsCta0JfYIjI4Oca}#)))
                             (begin
                               (if #{rec? _85hotwsCta0JfYIjI4OcY}#
                                 #{new-w _85hotwsCta0JfYIjI4OeC}#
                                 #{w _85hotwsCta0JfYIjI4Ocb}#)
                               (map (lambda (#{x _85hotwsCta0JfYIjI4Oej}#)
                                      (cons 'macro
                                            (#{eval-local-transformer _85hotwsCta0JfYIjI4J4R}#
                                              (#{expand _85hotwsCta0JfYIjI4J4L}#
                                                #{x _85hotwsCta0JfYIjI4Oej}#
                                                #{trans-r _85hotwsCta0JfYIjI4Oei}#
                                                (values
                                                  (if #{rec? _85hotwsCta0JfYIjI4OcY}#
                                                    #{new-w _85hotwsCta0JfYIjI4OeC}#
                                                    #{w _85hotwsCta0JfYIjI4Ocb}#))
                                                #{mod _85hotwsCta0JfYIjI4Ocd}#)
                                              #{mod _85hotwsCta0JfYIjI4Ocd}#)))
                                    #{val _85hotwsCta0JfYIjI4Ocl}#)))
                           #{r _85hotwsCta0JfYIjI4Oca}#)
                         #{new-w _85hotwsCta0JfYIjI4OeC}#
                         #{s _85hotwsCta0JfYIjI4Occ}#
                         #{mod _85hotwsCta0JfYIjI4Ocd}#)))))
               #{tmp _85hotwsCta0JfYIjI4Ocg}#)
             (syntax-violation
               #f
               "bad local syntax definition"
               (#{wrap _85hotwsCta0JfYIjI4J4E}#
                 (begin
                   (if (if (pair? #{e _85hotwsCta0JfYIjI4OcZ}#)
                         #{s _85hotwsCta0JfYIjI4Occ}#
                         #f)
                     (set-source-properties!
                       #{e _85hotwsCta0JfYIjI4OcZ}#
                       #{s _85hotwsCta0JfYIjI4Occ}#))
                   #{e _85hotwsCta0JfYIjI4OcZ}#)
                 #{w _85hotwsCta0JfYIjI4Ocb}#
                 #{mod _85hotwsCta0JfYIjI4Ocd}#))))))
     (#{eval-local-transformer _85hotwsCta0JfYIjI4J4R}#
       (lambda (#{expanded _85hotwsCta0JfYIjI4Oi3}#
                #{mod _85hotwsCta0JfYIjI4Oi4}#)
         (let ((#{p _85hotwsCta0JfYIjI4Oi5}#
                 (primitive-eval
                   #{expanded _85hotwsCta0JfYIjI4Oi3}#)))
           (if (procedure? #{p _85hotwsCta0JfYIjI4Oi5}#)
             #{p _85hotwsCta0JfYIjI4Oi5}#
             (syntax-violation
               #f
               "nonprocedure transformer"
               #{p _85hotwsCta0JfYIjI4Oi5}#)))))
     (#{ellipsis? _85hotwsCta0JfYIjI4J4T}#
       (lambda (#{x _85hotwsCta0JfYIjI4KCo}#)
         (if (if (if (vector? #{x _85hotwsCta0JfYIjI4KCo}#)
                   (if (= (vector-length #{x _85hotwsCta0JfYIjI4KCo}#)
                          4)
                     (eq? (vector-ref #{x _85hotwsCta0JfYIjI4KCo}# 0)
                          'syntax-object)
                     #f)
                   #f)
               (symbol?
                 (vector-ref #{x _85hotwsCta0JfYIjI4KCo}# 1))
               #f)
           (if (eq? (if (if (vector? #{x _85hotwsCta0JfYIjI4KCo}#)
                          (if (= (vector-length #{x _85hotwsCta0JfYIjI4KCo}#)
                                 4)
                            (eq? (vector-ref #{x _85hotwsCta0JfYIjI4KCo}# 0)
                                 'syntax-object)
                            #f)
                          #f)
                      (vector-ref #{x _85hotwsCta0JfYIjI4KCo}# 1)
                      #{x _85hotwsCta0JfYIjI4KCo}#)
                    (if (if (= (vector-length
                                 '#(syntax-object
                                    ...
                                    ((top)
                                     #(ribcage () () ())
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("2de"))
                                     #(ribcage
                                       (lambda-var-list
                                         gen-var
                                         strip
                                         expand-lambda-case
                                         lambda*-formals
                                         expand-simple-lambda
                                         lambda-formals
                                         ellipsis?
                                         expand-void
                                         eval-local-transformer
                                         expand-local-syntax
                                         expand-body
                                         expand-macro
                                         expand-application
                                         expand-expr
                                         expand
                                         syntax-type
                                         parse-when-list
                                         expand-install-global
                                         expand-top-sequence
                                         expand-sequence
                                         source-wrap
                                         wrap
                                         bound-id-member?
                                         distinct-bound-ids?
                                         valid-bound-ids?
                                         bound-id=?
                                         free-id=?
                                         with-transformer-environment
                                         transformer-environment
                                         resolve-identifier
                                         locally-bound-identifiers
                                         id-var-name
                                         same-marks?
                                         join-marks
                                         join-wraps
                                         smart-append
                                         make-binding-wrap
                                         extend-ribcage!
                                         make-empty-ribcage
                                         new-mark
                                         anti-mark
                                         the-anti-mark
                                         top-marked?
                                         top-wrap
                                         empty-wrap
                                         set-ribcage-labels!
                                         set-ribcage-marks!
                                         set-ribcage-symnames!
                                         ribcage-labels
                                         ribcage-marks
                                         ribcage-symnames
                                         ribcage?
                                         make-ribcage
                                         gen-labels
                                         gen-label
                                         make-rename
                                         rename-marks
                                         rename-new
                                         rename-old
                                         subst-rename?
                                         wrap-subst
                                         wrap-marks
                                         make-wrap
                                         id-sym-name&marks
                                         id-sym-name
                                         id?
                                         nonsymbol-id?
                                         global-extend
                                         lookup
                                         macros-only-env
                                         extend-var-env
                                         extend-env
                                         null-env
                                         binding-value
                                         binding-type
                                         make-binding
                                         arg-check
                                         source-annotation
                                         no-source
                                         set-syntax-object-module!
                                         set-syntax-object-wrap!
                                         set-syntax-object-expression!
                                         syntax-object-module
                                         syntax-object-wrap
                                         syntax-object-expression
                                         syntax-object?
                                         make-syntax-object
                                         build-lexical-var
                                         build-letrec
                                         build-named-let
                                         build-let
                                         build-sequence
                                         build-data
                                         build-primref
                                         build-lambda-case
                                         build-case-lambda
                                         build-simple-lambda
                                         build-global-definition
                                         build-global-assignment
                                         build-global-reference
                                         analyze-variable
                                         build-lexical-assignment
                                         build-lexical-reference
                                         build-dynlet
                                         build-conditional
                                         build-application
                                         build-void
                                         maybe-name-value!
                                         decorate-source
                                         get-global-definition-hook
                                         put-global-definition-hook
                                         gensym-hook
                                         local-eval-hook
                                         top-level-eval-hook
                                         fx<
                                         fx=
                                         fx-
                                         fx+
                                         set-lambda-meta!
                                         lambda-meta
                                         lambda?
                                         make-dynlet
                                         make-letrec
                                         make-let
                                         make-lambda-case
                                         make-lambda
                                         make-sequence
                                         make-application
                                         make-conditional
                                         make-toplevel-define
                                         make-toplevel-set
                                         make-toplevel-ref
                                         make-module-set
                                         make-module-ref
                                         make-lexical-set
                                         make-lexical-ref
                                         make-primitive-ref
                                         make-const
                                         make-void)
                                       ((top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top))
                                       ("1tt"
                                        "1ts"
                                        "1tr"
                                        "1tq"
                                        "1tp"
                                        "1to"
                                        "1tn"
                                        "1tm"
                                        "1tl"
                                        "1tk"
                                        "1tj"
                                        "1ti"
                                        "1th"
                                        "1tg"
                                        "1tf"
                                        "1te"
                                        "1td"
                                        "1tc"
                                        "1tb"
                                        "1ta"
                                        "1t9"
                                        "1t8"
                                        "1t7"
                                        "1t6"
                                        "1t5"
                                        "1t4"
                                        "1t3"
                                        "1t2"
                                        "1t1"
                                        "1t0"
                                        "1sz"
                                        "1sy"
                                        "1sx"
                                        "1sw"
                                        "1sv"
                                        "1su"
                                        "1st"
                                        "1ss"
                                        "1sr"
                                        "1sq"
                                        "1sp"
                                        "1so"
                                        "1sn"
                                        "1sm"
                                        "1sl"
                                        "1sk"
                                        "1sj"
                                        "1si"
                                        "1sh"
                                        "1sg"
                                        "1sf"
                                        "1se"
                                        "1sd"
                                        "1sc"
                                        "1sb"
                                        "1sa"
                                        "1s9"
                                        "1s8"
                                        "1s7"
                                        "1s6"
                                        "1s5"
                                        "1s4"
                                        "1s3"
                                        "1s2"
                                        "1s1"
                                        "1s0"
                                        "1rz"
                                        "1ry"
                                        "1rx"
                                        "1rw"
                                        "1rv"
                                        "1ru"
                                        "1rt"
                                        "1rs"
                                        "1rr"
                                        "1rq"
                                        "1rp"
                                        "1ro"
                                        "1rn"
                                        "1rm"
                                        "1rl"
                                        "1rk"
                                        "1rj"
                                        "1ri"
                                        "1rh"
                                        "1rg"
                                        "1rf"
                                        "1re"
                                        "1rd"
                                        "1rc"
                                        "1rb"
                                        "1ra"
                                        "1r9"
                                        "1r8"
                                        "1r7"
                                        "1r6"
                                        "1r5"
                                        "1r4"
                                        "1r3"
                                        "1r2"
                                        "1r1"
                                        "1r0"
                                        "1qz"
                                        "1qy"
                                        "1qx"
                                        "1qw"
                                        "1qv"
                                        "1qu"
                                        "1qt"
                                        "1qs"
                                        "1qr"
                                        "1qq"
                                        "1qp"
                                        "1qo"
                                        "1qn"
                                        "1qm"
                                        "1ql"
                                        "1qk"
                                        "1qj"
                                        "1qi"
                                        "1qh"
                                        "1qg"
                                        "1qf"
                                        "1qe"
                                        "1qd"
                                        "1qc"
                                        "1qb"
                                        "1qa"
                                        "1q9"
                                        "1q8"
                                        "1q7"
                                        "1q6"
                                        "1q5"
                                        "1q4"
                                        "1q3"
                                        "1q2"
                                        "1q1"
                                        "1q0"
                                        "1pz"
                                        "1py"))
                                     #(ribcage
                                       (define-structure
                                         define-expansion-accessors
                                         define-expansion-constructors)
                                       ((top) (top) (top))
                                       ("1og" "1of" "1oe")))
                                    (hygiene guile)))
                               4)
                          #t
                          #f)
                      '...
                      '#(syntax-object
                         ...
                         ((top)
                          #(ribcage () () ())
                          #(ribcage () () ())
                          #(ribcage #(x) #((top)) #("2de"))
                          #(ribcage
                            (lambda-var-list
                              gen-var
                              strip
                              expand-lambda-case
                              lambda*-formals
                              expand-simple-lambda
                              lambda-formals
                              ellipsis?
                              expand-void
                              eval-local-transformer
                              expand-local-syntax
                              expand-body
                              expand-macro
                              expand-application
                              expand-expr
                              expand
                              syntax-type
                              parse-when-list
                              expand-install-global
                              expand-top-sequence
                              expand-sequence
                              source-wrap
                              wrap
                              bound-id-member?
                              distinct-bound-ids?
                              valid-bound-ids?
                              bound-id=?
                              free-id=?
                              with-transformer-environment
                              transformer-environment
                              resolve-identifier
                              locally-bound-identifiers
                              id-var-name
                              same-marks?
                              join-marks
                              join-wraps
                              smart-append
                              make-binding-wrap
                              extend-ribcage!
                              make-empty-ribcage
                              new-mark
                              anti-mark
                              the-anti-mark
                              top-marked?
                              top-wrap
                              empty-wrap
                              set-ribcage-labels!
                              set-ribcage-marks!
                              set-ribcage-symnames!
                              ribcage-labels
                              ribcage-marks
                              ribcage-symnames
                              ribcage?
                              make-ribcage
                              gen-labels
                              gen-label
                              make-rename
                              rename-marks
                              rename-new
                              rename-old
                              subst-rename?
                              wrap-subst
                              wrap-marks
                              make-wrap
                              id-sym-name&marks
                              id-sym-name
                              id?
                              nonsymbol-id?
                              global-extend
                              lookup
                              macros-only-env
                              extend-var-env
                              extend-env
                              null-env
                              binding-value
                              binding-type
                              make-binding
                              arg-check
                              source-annotation
                              no-source
                              set-syntax-object-module!
                              set-syntax-object-wrap!
                              set-syntax-object-expression!
                              syntax-object-module
                              syntax-object-wrap
                              syntax-object-expression
                              syntax-object?
                              make-syntax-object
                              build-lexical-var
                              build-letrec
                              build-named-let
                              build-let
                              build-sequence
                              build-data
                              build-primref
                              build-lambda-case
                              build-case-lambda
                              build-simple-lambda
                              build-global-definition
                              build-global-assignment
                              build-global-reference
                              analyze-variable
                              build-lexical-assignment
                              build-lexical-reference
                              build-dynlet
                              build-conditional
                              build-application
                              build-void
                              maybe-name-value!
                              decorate-source
                              get-global-definition-hook
                              put-global-definition-hook
                              gensym-hook
                              local-eval-hook
                              top-level-eval-hook
                              fx<
                              fx=
                              fx-
                              fx+
                              set-lambda-meta!
                              lambda-meta
                              lambda?
                              make-dynlet
                              make-letrec
                              make-let
                              make-lambda-case
                              make-lambda
                              make-sequence
                              make-application
                              make-conditional
                              make-toplevel-define
                              make-toplevel-set
                              make-toplevel-ref
                              make-module-set
                              make-module-ref
                              make-lexical-set
                              make-lexical-ref
                              make-primitive-ref
                              make-const
                              make-void)
                            ((top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top))
                            ("1tt"
                             "1ts"
                             "1tr"
                             "1tq"
                             "1tp"
                             "1to"
                             "1tn"
                             "1tm"
                             "1tl"
                             "1tk"
                             "1tj"
                             "1ti"
                             "1th"
                             "1tg"
                             "1tf"
                             "1te"
                             "1td"
                             "1tc"
                             "1tb"
                             "1ta"
                             "1t9"
                             "1t8"
                             "1t7"
                             "1t6"
                             "1t5"
                             "1t4"
                             "1t3"
                             "1t2"
                             "1t1"
                             "1t0"
                             "1sz"
                             "1sy"
                             "1sx"
                             "1sw"
                             "1sv"
                             "1su"
                             "1st"
                             "1ss"
                             "1sr"
                             "1sq"
                             "1sp"
                             "1so"
                             "1sn"
                             "1sm"
                             "1sl"
                             "1sk"
                             "1sj"
                             "1si"
                             "1sh"
                             "1sg"
                             "1sf"
                             "1se"
                             "1sd"
                             "1sc"
                             "1sb"
                             "1sa"
                             "1s9"
                             "1s8"
                             "1s7"
                             "1s6"
                             "1s5"
                             "1s4"
                             "1s3"
                             "1s2"
                             "1s1"
                             "1s0"
                             "1rz"
                             "1ry"
                             "1rx"
                             "1rw"
                             "1rv"
                             "1ru"
                             "1rt"
                             "1rs"
                             "1rr"
                             "1rq"
                             "1rp"
                             "1ro"
                             "1rn"
                             "1rm"
                             "1rl"
                             "1rk"
                             "1rj"
                             "1ri"
                             "1rh"
                             "1rg"
                             "1rf"
                             "1re"
                             "1rd"
                             "1rc"
                             "1rb"
                             "1ra"
                             "1r9"
                             "1r8"
                             "1r7"
                             "1r6"
                             "1r5"
                             "1r4"
                             "1r3"
                             "1r2"
                             "1r1"
                             "1r0"
                             "1qz"
                             "1qy"
                             "1qx"
                             "1qw"
                             "1qv"
                             "1qu"
                             "1qt"
                             "1qs"
                             "1qr"
                             "1qq"
                             "1qp"
                             "1qo"
                             "1qn"
                             "1qm"
                             "1ql"
                             "1qk"
                             "1qj"
                             "1qi"
                             "1qh"
                             "1qg"
                             "1qf"
                             "1qe"
                             "1qd"
                             "1qc"
                             "1qb"
                             "1qa"
                             "1q9"
                             "1q8"
                             "1q7"
                             "1q6"
                             "1q5"
                             "1q4"
                             "1q3"
                             "1q2"
                             "1q1"
                             "1q0"
                             "1pz"
                             "1py"))
                          #(ribcage
                            (define-structure
                              define-expansion-accessors
                              define-expansion-constructors)
                            ((top) (top) (top))
                            ("1og" "1of" "1oe")))
                         (hygiene guile))))
             (eq? (#{id-var-name _85hotwsCta0JfYIjI4J36}#
                    #{x _85hotwsCta0JfYIjI4KCo}#
                    '(()))
                  (#{id-var-name _85hotwsCta0JfYIjI4J36}#
                    '#(syntax-object
                       ...
                       ((top)
                        #(ribcage () () ())
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("2de"))
                        #(ribcage
                          (lambda-var-list
                            gen-var
                            strip
                            expand-lambda-case
                            lambda*-formals
                            expand-simple-lambda
                            lambda-formals
                            ellipsis?
                            expand-void
                            eval-local-transformer
                            expand-local-syntax
                            expand-body
                            expand-macro
                            expand-application
                            expand-expr
                            expand
                            syntax-type
                            parse-when-list
                            expand-install-global
                            expand-top-sequence
                            expand-sequence
                            source-wrap
                            wrap
                            bound-id-member?
                            distinct-bound-ids?
                            valid-bound-ids?
                            bound-id=?
                            free-id=?
                            with-transformer-environment
                            transformer-environment
                            resolve-identifier
                            locally-bound-identifiers
                            id-var-name
                            same-marks?
                            join-marks
                            join-wraps
                            smart-append
                            make-binding-wrap
                            extend-ribcage!
                            make-empty-ribcage
                            new-mark
                            anti-mark
                            the-anti-mark
                            top-marked?
                            top-wrap
                            empty-wrap
                            set-ribcage-labels!
                            set-ribcage-marks!
                            set-ribcage-symnames!
                            ribcage-labels
                            ribcage-marks
                            ribcage-symnames
                            ribcage?
                            make-ribcage
                            gen-labels
                            gen-label
                            make-rename
                            rename-marks
                            rename-new
                            rename-old
                            subst-rename?
                            wrap-subst
                            wrap-marks
                            make-wrap
                            id-sym-name&marks
                            id-sym-name
                            id?
                            nonsymbol-id?
                            global-extend
                            lookup
                            macros-only-env
                            extend-var-env
                            extend-env
                            null-env
                            binding-value
                            binding-type
                            make-binding
                            arg-check
                            source-annotation
                            no-source
                            set-syntax-object-module!
                            set-syntax-object-wrap!
                            set-syntax-object-expression!
                            syntax-object-module
                            syntax-object-wrap
                            syntax-object-expression
                            syntax-object?
                            make-syntax-object
                            build-lexical-var
                            build-letrec
                            build-named-let
                            build-let
                            build-sequence
                            build-data
                            build-primref
                            build-lambda-case
                            build-case-lambda
                            build-simple-lambda
                            build-global-definition
                            build-global-assignment
                            build-global-reference
                            analyze-variable
                            build-lexical-assignment
                            build-lexical-reference
                            build-dynlet
                            build-conditional
                            build-application
                            build-void
                            maybe-name-value!
                            decorate-source
                            get-global-definition-hook
                            put-global-definition-hook
                            gensym-hook
                            local-eval-hook
                            top-level-eval-hook
                            fx<
                            fx=
                            fx-
                            fx+
                            set-lambda-meta!
                            lambda-meta
                            lambda?
                            make-dynlet
                            make-letrec
                            make-let
                            make-lambda-case
                            make-lambda
                            make-sequence
                            make-application
                            make-conditional
                            make-toplevel-define
                            make-toplevel-set
                            make-toplevel-ref
                            make-module-set
                            make-module-ref
                            make-lexical-set
                            make-lexical-ref
                            make-primitive-ref
                            make-const
                            make-void)
                          ((top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top))
                          ("1tt"
                           "1ts"
                           "1tr"
                           "1tq"
                           "1tp"
                           "1to"
                           "1tn"
                           "1tm"
                           "1tl"
                           "1tk"
                           "1tj"
                           "1ti"
                           "1th"
                           "1tg"
                           "1tf"
                           "1te"
                           "1td"
                           "1tc"
                           "1tb"
                           "1ta"
                           "1t9"
                           "1t8"
                           "1t7"
                           "1t6"
                           "1t5"
                           "1t4"
                           "1t3"
                           "1t2"
                           "1t1"
                           "1t0"
                           "1sz"
                           "1sy"
                           "1sx"
                           "1sw"
                           "1sv"
                           "1su"
                           "1st"
                           "1ss"
                           "1sr"
                           "1sq"
                           "1sp"
                           "1so"
                           "1sn"
                           "1sm"
                           "1sl"
                           "1sk"
                           "1sj"
                           "1si"
                           "1sh"
                           "1sg"
                           "1sf"
                           "1se"
                           "1sd"
                           "1sc"
                           "1sb"
                           "1sa"
                           "1s9"
                           "1s8"
                           "1s7"
                           "1s6"
                           "1s5"
                           "1s4"
                           "1s3"
                           "1s2"
                           "1s1"
                           "1s0"
                           "1rz"
                           "1ry"
                           "1rx"
                           "1rw"
                           "1rv"
                           "1ru"
                           "1rt"
                           "1rs"
                           "1rr"
                           "1rq"
                           "1rp"
                           "1ro"
                           "1rn"
                           "1rm"
                           "1rl"
                           "1rk"
                           "1rj"
                           "1ri"
                           "1rh"
                           "1rg"
                           "1rf"
                           "1re"
                           "1rd"
                           "1rc"
                           "1rb"
                           "1ra"
                           "1r9"
                           "1r8"
                           "1r7"
                           "1r6"
                           "1r5"
                           "1r4"
                           "1r3"
                           "1r2"
                           "1r1"
                           "1r0"
                           "1qz"
                           "1qy"
                           "1qx"
                           "1qw"
                           "1qv"
                           "1qu"
                           "1qt"
                           "1qs"
                           "1qr"
                           "1qq"
                           "1qp"
                           "1qo"
                           "1qn"
                           "1qm"
                           "1ql"
                           "1qk"
                           "1qj"
                           "1qi"
                           "1qh"
                           "1qg"
                           "1qf"
                           "1qe"
                           "1qd"
                           "1qc"
                           "1qb"
                           "1qa"
                           "1q9"
                           "1q8"
                           "1q7"
                           "1q6"
                           "1q5"
                           "1q4"
                           "1q3"
                           "1q2"
                           "1q1"
                           "1q0"
                           "1pz"
                           "1py"))
                        #(ribcage
                          (define-structure
                            define-expansion-accessors
                            define-expansion-constructors)
                          ((top) (top) (top))
                          ("1og" "1of" "1oe")))
                       (hygiene guile))
                    '(())))
             #f)
           #f)))
     (#{lambda-formals _85hotwsCta0JfYIjI4J4U}#
       (lambda (#{orig-args _85hotwsCta0JfYIjI4Oi$}#)
         (letrec*
           ((#{req _85hotwsCta0JfYIjI4Oi@}#
              (lambda (#{args _85hotwsCta0JfYIjI4OjD}#
                       #{rreq _85hotwsCta0JfYIjI4OjE}#)
                (let ((#{tmp _85hotwsCta0JfYIjI4OjG}#
                        ($sc-dispatch
                          #{args _85hotwsCta0JfYIjI4OjD}#
                          '())))
                  (if #{tmp _85hotwsCta0JfYIjI4OjG}#
                    (@apply
                      (lambda ()
                        (#{check _85hotwsCta0JfYIjI4OjA}#
                          (reverse #{rreq _85hotwsCta0JfYIjI4OjE}#)
                          #f))
                      #{tmp _85hotwsCta0JfYIjI4OjG}#)
                    (let ((#{tmp _85hotwsCta0JfYIjI4OlB}#
                            ($sc-dispatch
                              #{args _85hotwsCta0JfYIjI4OjD}#
                              '(any . any))))
                      (if (if #{tmp _85hotwsCta0JfYIjI4OlB}#
                            (@apply
                              (lambda (#{a _85hotwsCta0JfYIjI4OlF}#
                                       #{b _85hotwsCta0JfYIjI4OlG}#)
                                (if (symbol? #{a _85hotwsCta0JfYIjI4OlF}#)
                                  #t
                                  (if (if (vector?
                                            #{a _85hotwsCta0JfYIjI4OlF}#)
                                        (if (= (vector-length
                                                 #{a _85hotwsCta0JfYIjI4OlF}#)
                                               4)
                                          (eq? (vector-ref
                                                 #{a _85hotwsCta0JfYIjI4OlF}#
                                                 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (symbol?
                                      (vector-ref
                                        #{a _85hotwsCta0JfYIjI4OlF}#
                                        1))
                                    #f)))
                              #{tmp _85hotwsCta0JfYIjI4OlB}#)
                            #f)
                        (@apply
                          (lambda (#{a _85hotwsCta0JfYIjI4Olh}#
                                   #{b _85hotwsCta0JfYIjI4Oli}#)
                            (#{req _85hotwsCta0JfYIjI4Oi@}#
                              #{b _85hotwsCta0JfYIjI4Oli}#
                              (cons #{a _85hotwsCta0JfYIjI4Olh}#
                                    #{rreq _85hotwsCta0JfYIjI4OjE}#)))
                          #{tmp _85hotwsCta0JfYIjI4OlB}#)
                        (let ((#{tmp _85hotwsCta0JfYIjI4Olj}#
                                (list #{args _85hotwsCta0JfYIjI4OjD}#)))
                          (if (@apply
                                (lambda (#{r _85hotwsCta0JfYIjI4Oll}#)
                                  (if (symbol? #{r _85hotwsCta0JfYIjI4Oll}#)
                                    #t
                                    (if (if (vector?
                                              #{r _85hotwsCta0JfYIjI4Oll}#)
                                          (if (= (vector-length
                                                   #{r _85hotwsCta0JfYIjI4Oll}#)
                                                 4)
                                            (eq? (vector-ref
                                                   #{r _85hotwsCta0JfYIjI4Oll}#
                                                   0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (symbol?
                                        (vector-ref
                                          #{r _85hotwsCta0JfYIjI4Oll}#
                                          1))
                                      #f)))
                                #{tmp _85hotwsCta0JfYIjI4Olj}#)
                            (@apply
                              (lambda (#{r _85hotwsCta0JfYIjI4OmD}#)
                                (#{check _85hotwsCta0JfYIjI4OjA}#
                                  (reverse #{rreq _85hotwsCta0JfYIjI4OjE}#)
                                  #{r _85hotwsCta0JfYIjI4OmD}#))
                              #{tmp _85hotwsCta0JfYIjI4Olj}#)
                            (syntax-violation
                              'lambda
                              "invalid argument list"
                              #{orig-args _85hotwsCta0JfYIjI4Oi$}#
                              #{args _85hotwsCta0JfYIjI4OjD}#)))))))))
            (#{check _85hotwsCta0JfYIjI4OjA}#
              (lambda (#{req _85hotwsCta0JfYIjI4OoG}#
                       #{rest _85hotwsCta0JfYIjI4OoH}#)
                (if (#{distinct-bound-ids? _85hotwsCta0JfYIjI4J4C}#
                      (if #{rest _85hotwsCta0JfYIjI4OoH}#
                        (cons #{rest _85hotwsCta0JfYIjI4OoH}#
                              #{req _85hotwsCta0JfYIjI4OoG}#)
                        #{req _85hotwsCta0JfYIjI4OoG}#))
                  (values
                    #{req _85hotwsCta0JfYIjI4OoG}#
                    #f
                    #{rest _85hotwsCta0JfYIjI4OoH}#
                    #f)
                  (syntax-violation
                    'lambda
                    "duplicate identifier in argument list"
                    #{orig-args _85hotwsCta0JfYIjI4Oi$}#)))))
           (#{req _85hotwsCta0JfYIjI4Oi@}#
             #{orig-args _85hotwsCta0JfYIjI4Oi$}#
             '()))))
     (#{expand-simple-lambda _85hotwsCta0JfYIjI4J4V}#
       (lambda (#{e _85hotwsCta0JfYIjI4Op7}#
                #{r _85hotwsCta0JfYIjI4Op8}#
                #{w _85hotwsCta0JfYIjI4Op9}#
                #{s _85hotwsCta0JfYIjI4Op$}#
                #{mod _85hotwsCta0JfYIjI4Op@}#
                #{req _85hotwsCta0JfYIjI4OqA}#
                #{rest _85hotwsCta0JfYIjI4OqB}#
                #{meta _85hotwsCta0JfYIjI4OqC}#
                #{body _85hotwsCta0JfYIjI4OqD}#)
         (let ((#{ids _85hotwsCta0JfYIjI4OqE}#
                 (if #{rest _85hotwsCta0JfYIjI4OqB}#
                   (append
                     #{req _85hotwsCta0JfYIjI4OqA}#
                     (list #{rest _85hotwsCta0JfYIjI4OqB}#))
                   #{req _85hotwsCta0JfYIjI4OqA}#)))
           (let ((#{vars _85hotwsCta0JfYIjI4OqF}#
                   (map #{gen-var _85hotwsCta0JfYIjI4J4Z}#
                        #{ids _85hotwsCta0JfYIjI4OqE}#)))
             (let ((#{labels _85hotwsCta0JfYIjI4OqG}#
                     (#{gen-labels _85hotwsCta0JfYIjI4J3q}#
                       #{ids _85hotwsCta0JfYIjI4OqE}#)))
               (#{build-simple-lambda _85hotwsCta0JfYIjI4J3P}#
                 #{s _85hotwsCta0JfYIjI4Op$}#
                 (map syntax->datum
                      #{req _85hotwsCta0JfYIjI4OqA}#)
                 (if #{rest _85hotwsCta0JfYIjI4OqB}#
                   (syntax->datum #{rest _85hotwsCta0JfYIjI4OqB}#)
                   #f)
                 #{vars _85hotwsCta0JfYIjI4OqF}#
                 #{meta _85hotwsCta0JfYIjI4OqC}#
                 (#{expand-body _85hotwsCta0JfYIjI4J4P}#
                   #{body _85hotwsCta0JfYIjI4OqD}#
                   (#{wrap _85hotwsCta0JfYIjI4J4E}#
                     (begin
                       (if (if (pair? #{e _85hotwsCta0JfYIjI4Op7}#)
                             #{s _85hotwsCta0JfYIjI4Op$}#
                             #f)
                         (set-source-properties!
                           #{e _85hotwsCta0JfYIjI4Op7}#
                           #{s _85hotwsCta0JfYIjI4Op$}#))
                       #{e _85hotwsCta0JfYIjI4Op7}#)
                     #{w _85hotwsCta0JfYIjI4Op9}#
                     #{mod _85hotwsCta0JfYIjI4Op@}#)
                   (#{extend-var-env _85hotwsCta0JfYIjI4J3i}#
                     #{labels _85hotwsCta0JfYIjI4OqG}#
                     #{vars _85hotwsCta0JfYIjI4OqF}#
                     #{r _85hotwsCta0JfYIjI4Op8}#)
                   (#{make-binding-wrap _85hotwsCta0JfYIjI4J31}#
                     #{ids _85hotwsCta0JfYIjI4OqE}#
                     #{labels _85hotwsCta0JfYIjI4OqG}#
                     #{w _85hotwsCta0JfYIjI4Op9}#)
                   #{mod _85hotwsCta0JfYIjI4Op@}#)))))))
     (#{lambda*-formals _85hotwsCta0JfYIjI4J4W}#
       (lambda (#{orig-args _85hotwsCta0JfYIjI4OuW}#)
         (letrec*
           ((#{req _85hotwsCta0JfYIjI4OuX}#
              (lambda (#{args _85hotwsCta0JfYIjI4Oue}#
                       #{rreq _85hotwsCta0JfYIjI4Ouf}#)
                (let ((#{tmp _85hotwsCta0JfYIjI4Ouh}#
                        ($sc-dispatch
                          #{args _85hotwsCta0JfYIjI4Oue}#
                          '())))
                  (if #{tmp _85hotwsCta0JfYIjI4Ouh}#
                    (@apply
                      (lambda ()
                        (#{check _85hotwsCta0JfYIjI4Oub}#
                          (reverse #{rreq _85hotwsCta0JfYIjI4Ouf}#)
                          '()
                          #f
                          '()))
                      #{tmp _85hotwsCta0JfYIjI4Ouh}#)
                    (let ((#{tmp _85hotwsCta0JfYIjI4Oun}#
                            ($sc-dispatch
                              #{args _85hotwsCta0JfYIjI4Oue}#
                              '(any . any))))
                      (if (if #{tmp _85hotwsCta0JfYIjI4Oun}#
                            (@apply
                              (lambda (#{a _85hotwsCta0JfYIjI4Our}#
                                       #{b _85hotwsCta0JfYIjI4Ous}#)
                                (if (symbol? #{a _85hotwsCta0JfYIjI4Our}#)
                                  #t
                                  (if (if (vector?
                                            #{a _85hotwsCta0JfYIjI4Our}#)
                                        (if (= (vector-length
                                                 #{a _85hotwsCta0JfYIjI4Our}#)
                                               4)
                                          (eq? (vector-ref
                                                 #{a _85hotwsCta0JfYIjI4Our}#
                                                 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (symbol?
                                      (vector-ref
                                        #{a _85hotwsCta0JfYIjI4Our}#
                                        1))
                                    #f)))
                              #{tmp _85hotwsCta0JfYIjI4Oun}#)
                            #f)
                        (@apply
                          (lambda (#{a _85hotwsCta0JfYIjI4OvH}#
                                   #{b _85hotwsCta0JfYIjI4OvI}#)
                            (#{req _85hotwsCta0JfYIjI4OuX}#
                              #{b _85hotwsCta0JfYIjI4OvI}#
                              (cons #{a _85hotwsCta0JfYIjI4OvH}#
                                    #{rreq _85hotwsCta0JfYIjI4Ouf}#)))
                          #{tmp _85hotwsCta0JfYIjI4Oun}#)
                        (let ((#{tmp _85hotwsCta0JfYIjI4OvJ}#
                                ($sc-dispatch
                                  #{args _85hotwsCta0JfYIjI4Oue}#
                                  '(any . any))))
                          (if (if #{tmp _85hotwsCta0JfYIjI4OvJ}#
                                (@apply
                                  (lambda (#{a _85hotwsCta0JfYIjI4OvN}#
                                           #{b _85hotwsCta0JfYIjI4OvO}#)
                                    (eq? (syntax->datum
                                           #{a _85hotwsCta0JfYIjI4OvN}#)
                                         #:optional))
                                  #{tmp _85hotwsCta0JfYIjI4OvJ}#)
                                #f)
                            (@apply
                              (lambda (#{a _85hotwsCta0JfYIjI4OvP}#
                                       #{b _85hotwsCta0JfYIjI4OvQ}#)
                                (#{opt _85hotwsCta0JfYIjI4OuY}#
                                  #{b _85hotwsCta0JfYIjI4OvQ}#
                                  (reverse #{rreq _85hotwsCta0JfYIjI4Ouf}#)
                                  '()))
                              #{tmp _85hotwsCta0JfYIjI4OvJ}#)
                            (let ((#{tmp _85hotwsCta0JfYIjI4OvT}#
                                    ($sc-dispatch
                                      #{args _85hotwsCta0JfYIjI4Oue}#
                                      '(any . any))))
                              (if (if #{tmp _85hotwsCta0JfYIjI4OvT}#
                                    (@apply
                                      (lambda (#{a _85hotwsCta0JfYIjI4OvX}#
                                               #{b _85hotwsCta0JfYIjI4OvY}#)
                                        (eq? (syntax->datum
                                               #{a _85hotwsCta0JfYIjI4OvX}#)
                                             #:key))
                                      #{tmp _85hotwsCta0JfYIjI4OvT}#)
                                    #f)
                                (@apply
                                  (lambda (#{a _85hotwsCta0JfYIjI4OvZ}#
                                           #{b _85hotwsCta0JfYIjI4Ova}#)
                                    (#{key _85hotwsCta0JfYIjI4OuZ}#
                                      #{b _85hotwsCta0JfYIjI4Ova}#
                                      (reverse #{rreq _85hotwsCta0JfYIjI4Ouf}#)
                                      '()
                                      '()))
                                  #{tmp _85hotwsCta0JfYIjI4OvT}#)
                                (let ((#{tmp _85hotwsCta0JfYIjI4Ovd}#
                                        ($sc-dispatch
                                          #{args _85hotwsCta0JfYIjI4Oue}#
                                          '(any any))))
                                  (if (if #{tmp _85hotwsCta0JfYIjI4Ovd}#
                                        (@apply
                                          (lambda (#{a _85hotwsCta0JfYIjI4Ovh}#
                                                   #{b _85hotwsCta0JfYIjI4Ovi}#)
                                            (eq? (syntax->datum
                                                   #{a _85hotwsCta0JfYIjI4Ovh}#)
                                                 #:rest))
                                          #{tmp _85hotwsCta0JfYIjI4Ovd}#)
                                        #f)
                                    (@apply
                                      (lambda (#{a _85hotwsCta0JfYIjI4Ovj}#
                                               #{b _85hotwsCta0JfYIjI4Ovk}#)
                                        (#{rest _85hotwsCta0JfYIjI4Oua}#
                                          #{b _85hotwsCta0JfYIjI4Ovk}#
                                          (reverse
                                            #{rreq _85hotwsCta0JfYIjI4Ouf}#)
                                          '()
                                          '()))
                                      #{tmp _85hotwsCta0JfYIjI4Ovd}#)
                                    (let ((#{tmp _85hotwsCta0JfYIjI4Ovn}#
                                            (list #{args _85hotwsCta0JfYIjI4Oue}#)))
                                      (if (@apply
                                            (lambda (#{r _85hotwsCta0JfYIjI4Ovp}#)
                                              (if (symbol?
                                                    #{r _85hotwsCta0JfYIjI4Ovp}#)
                                                #t
                                                (if (if (vector?
                                                          #{r _85hotwsCta0JfYIjI4Ovp}#)
                                                      (if (= (vector-length
                                                               #{r _85hotwsCta0JfYIjI4Ovp}#)
                                                             4)
                                                        (eq? (vector-ref
                                                               #{r _85hotwsCta0JfYIjI4Ovp}#
                                                               0)
                                                             'syntax-object)
                                                        #f)
                                                      #f)
                                                  (symbol?
                                                    (vector-ref
                                                      #{r _85hotwsCta0JfYIjI4Ovp}#
                                                      1))
                                                  #f)))
                                            #{tmp _85hotwsCta0JfYIjI4Ovn}#)
                                        (@apply
                                          (lambda (#{r _85hotwsCta0JfYIjI4OwH}#)
                                            (#{rest _85hotwsCta0JfYIjI4Oua}#
                                              #{r _85hotwsCta0JfYIjI4OwH}#
                                              (reverse
                                                #{rreq _85hotwsCta0JfYIjI4Ouf}#)
                                              '()
                                              '()))
                                          #{tmp _85hotwsCta0JfYIjI4Ovn}#)
                                        (syntax-violation
                                          'lambda*
                                          "invalid argument list"
                                          #{orig-args _85hotwsCta0JfYIjI4OuW}#
                                          #{args _85hotwsCta0JfYIjI4Oue}#)))))))))))))))
            (#{opt _85hotwsCta0JfYIjI4OuY}#
              (lambda (#{args _85hotwsCta0JfYIjI4Owa}#
                       #{req _85hotwsCta0JfYIjI4Owb}#
                       #{ropt _85hotwsCta0JfYIjI4Owc}#)
                (let ((#{tmp _85hotwsCta0JfYIjI4Owe}#
                        ($sc-dispatch
                          #{args _85hotwsCta0JfYIjI4Owa}#
                          '())))
                  (if #{tmp _85hotwsCta0JfYIjI4Owe}#
                    (@apply
                      (lambda ()
                        (#{check _85hotwsCta0JfYIjI4Oub}#
                          #{req _85hotwsCta0JfYIjI4Owb}#
                          (reverse #{ropt _85hotwsCta0JfYIjI4Owc}#)
                          #f
                          '()))
                      #{tmp _85hotwsCta0JfYIjI4Owe}#)
                    (let ((#{tmp _85hotwsCta0JfYIjI4Owk}#
                            ($sc-dispatch
                              #{args _85hotwsCta0JfYIjI4Owa}#
                              '(any . any))))
                      (if (if #{tmp _85hotwsCta0JfYIjI4Owk}#
                            (@apply
                              (lambda (#{a _85hotwsCta0JfYIjI4Owo}#
                                       #{b _85hotwsCta0JfYIjI4Owp}#)
                                (if (symbol? #{a _85hotwsCta0JfYIjI4Owo}#)
                                  #t
                                  (if (if (vector?
                                            #{a _85hotwsCta0JfYIjI4Owo}#)
                                        (if (= (vector-length
                                                 #{a _85hotwsCta0JfYIjI4Owo}#)
                                               4)
                                          (eq? (vector-ref
                                                 #{a _85hotwsCta0JfYIjI4Owo}#
                                                 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (symbol?
                                      (vector-ref
                                        #{a _85hotwsCta0JfYIjI4Owo}#
                                        1))
                                    #f)))
                              #{tmp _85hotwsCta0JfYIjI4Owk}#)
                            #f)
                        (@apply
                          (lambda (#{a _85hotwsCta0JfYIjI4OxE}#
                                   #{b _85hotwsCta0JfYIjI4OxF}#)
                            (#{opt _85hotwsCta0JfYIjI4OuY}#
                              #{b _85hotwsCta0JfYIjI4OxF}#
                              #{req _85hotwsCta0JfYIjI4Owb}#
                              (cons (cons #{a _85hotwsCta0JfYIjI4OxE}#
                                          '(#(syntax-object
                                              #f
                                              ((top)
                                               #(ribcage
                                                 #(a b)
                                                 #((top) (top))
                                                 #("2f1" "2f2"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(args req ropt)
                                                 #((top) (top) (top))
                                                 #("2ew" "2ex" "2ey"))
                                               #(ribcage
                                                 (check rest key opt req)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("2ea"
                                                  "2e9"
                                                  "2e8"
                                                  "2e7"
                                                  "2e6"))
                                               #(ribcage
                                                 #(orig-args)
                                                 #((top))
                                                 #("2e5"))
                                               #(ribcage
                                                 (lambda-var-list
                                                   gen-var
                                                   strip
                                                   expand-lambda-case
                                                   lambda*-formals
                                                   expand-simple-lambda
                                                   lambda-formals
                                                   ellipsis?
                                                   expand-void
                                                   eval-local-transformer
                                                   expand-local-syntax
                                                   expand-body
                                                   expand-macro
                                                   expand-application
                                                   expand-expr
                                                   expand
                                                   syntax-type
                                                   parse-when-list
                                                   expand-install-global
                                                   expand-top-sequence
                                                   expand-sequence
                                                   source-wrap
                                                   wrap
                                                   bound-id-member?
                                                   distinct-bound-ids?
                                                   valid-bound-ids?
                                                   bound-id=?
                                                   free-id=?
                                                   with-transformer-environment
                                                   transformer-environment
                                                   resolve-identifier
                                                   locally-bound-identifiers
                                                   id-var-name
                                                   same-marks?
                                                   join-marks
                                                   join-wraps
                                                   smart-append
                                                   make-binding-wrap
                                                   extend-ribcage!
                                                   make-empty-ribcage
                                                   new-mark
                                                   anti-mark
                                                   the-anti-mark
                                                   top-marked?
                                                   top-wrap
                                                   empty-wrap
                                                   set-ribcage-labels!
                                                   set-ribcage-marks!
                                                   set-ribcage-symnames!
                                                   ribcage-labels
                                                   ribcage-marks
                                                   ribcage-symnames
                                                   ribcage?
                                                   make-ribcage
                                                   gen-labels
                                                   gen-label
                                                   make-rename
                                                   rename-marks
                                                   rename-new
                                                   rename-old
                                                   subst-rename?
                                                   wrap-subst
                                                   wrap-marks
                                                   make-wrap
                                                   id-sym-name&marks
                                                   id-sym-name
                                                   id?
                                                   nonsymbol-id?
                                                   global-extend
                                                   lookup
                                                   macros-only-env
                                                   extend-var-env
                                                   extend-env
                                                   null-env
                                                   binding-value
                                                   binding-type
                                                   make-binding
                                                   arg-check
                                                   source-annotation
                                                   no-source
                                                   set-syntax-object-module!
                                                   set-syntax-object-wrap!
                                                   set-syntax-object-expression!
                                                   syntax-object-module
                                                   syntax-object-wrap
                                                   syntax-object-expression
                                                   syntax-object?
                                                   make-syntax-object
                                                   build-lexical-var
                                                   build-letrec
                                                   build-named-let
                                                   build-let
                                                   build-sequence
                                                   build-data
                                                   build-primref
                                                   build-lambda-case
                                                   build-case-lambda
                                                   build-simple-lambda
                                                   build-global-definition
                                                   build-global-assignment
                                                   build-global-reference
                                                   analyze-variable
                                                   build-lexical-assignment
                                                   build-lexical-reference
                                                   build-dynlet
                                                   build-conditional
                                                   build-application
                                                   build-void
                                                   maybe-name-value!
                                                   decorate-source
                                                   get-global-definition-hook
                                                   put-global-definition-hook
                                                   gensym-hook
                                                   local-eval-hook
                                                   top-level-eval-hook
                                                   fx<
                                                   fx=
                                                   fx-
                                                   fx+
                                                   set-lambda-meta!
                                                   lambda-meta
                                                   lambda?
                                                   make-dynlet
                                                   make-letrec
                                                   make-let
                                                   make-lambda-case
                                                   make-lambda
                                                   make-sequence
                                                   make-application
                                                   make-conditional
                                                   make-toplevel-define
                                                   make-toplevel-set
                                                   make-toplevel-ref
                                                   make-module-set
                                                   make-module-ref
                                                   make-lexical-set
                                                   make-lexical-ref
                                                   make-primitive-ref
                                                   make-const
                                                   make-void)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("1tt"
                                                  "1ts"
                                                  "1tr"
                                                  "1tq"
                                                  "1tp"
                                                  "1to"
                                                  "1tn"
                                                  "1tm"
                                                  "1tl"
                                                  "1tk"
                                                  "1tj"
                                                  "1ti"
                                                  "1th"
                                                  "1tg"
                                                  "1tf"
                                                  "1te"
                                                  "1td"
                                                  "1tc"
                                                  "1tb"
                                                  "1ta"
                                                  "1t9"
                                                  "1t8"
                                                  "1t7"
                                                  "1t6"
                                                  "1t5"
                                                  "1t4"
                                                  "1t3"
                                                  "1t2"
                                                  "1t1"
                                                  "1t0"
                                                  "1sz"
                                                  "1sy"
                                                  "1sx"
                                                  "1sw"
                                                  "1sv"
                                                  "1su"
                                                  "1st"
                                                  "1ss"
                                                  "1sr"
                                                  "1sq"
                                                  "1sp"
                                                  "1so"
                                                  "1sn"
                                                  "1sm"
                                                  "1sl"
                                                  "1sk"
                                                  "1sj"
                                                  "1si"
                                                  "1sh"
                                                  "1sg"
                                                  "1sf"
                                                  "1se"
                                                  "1sd"
                                                  "1sc"
                                                  "1sb"
                                                  "1sa"
                                                  "1s9"
                                                  "1s8"
                                                  "1s7"
                                                  "1s6"
                                                  "1s5"
                                                  "1s4"
                                                  "1s3"
                                                  "1s2"
                                                  "1s1"
                                                  "1s0"
                                                  "1rz"
                                                  "1ry"
                                                  "1rx"
                                                  "1rw"
                                                  "1rv"
                                                  "1ru"
                                                  "1rt"
                                                  "1rs"
                                                  "1rr"
                                                  "1rq"
                                                  "1rp"
                                                  "1ro"
                                                  "1rn"
                                                  "1rm"
                                                  "1rl"
                                                  "1rk"
                                                  "1rj"
                                                  "1ri"
                                                  "1rh"
                                                  "1rg"
                                                  "1rf"
                                                  "1re"
                                                  "1rd"
                                                  "1rc"
                                                  "1rb"
                                                  "1ra"
                                                  "1r9"
                                                  "1r8"
                                                  "1r7"
                                                  "1r6"
                                                  "1r5"
                                                  "1r4"
                                                  "1r3"
                                                  "1r2"
                                                  "1r1"
                                                  "1r0"
                                                  "1qz"
                                                  "1qy"
                                                  "1qx"
                                                  "1qw"
                                                  "1qv"
                                                  "1qu"
                                                  "1qt"
                                                  "1qs"
                                                  "1qr"
                                                  "1qq"
                                                  "1qp"
                                                  "1qo"
                                                  "1qn"
                                                  "1qm"
                                                  "1ql"
                                                  "1qk"
                                                  "1qj"
                                                  "1qi"
                                                  "1qh"
                                                  "1qg"
                                                  "1qf"
                                                  "1qe"
                                                  "1qd"
                                                  "1qc"
                                                  "1qb"
                                                  "1qa"
                                                  "1q9"
                                                  "1q8"
                                                  "1q7"
                                                  "1q6"
                                                  "1q5"
                                                  "1q4"
                                                  "1q3"
                                                  "1q2"
                                                  "1q1"
                                                  "1q0"
                                                  "1pz"
                                                  "1py"))
                                               #(ribcage
                                                 (define-structure
                                                   define-expansion-accessors
                                                   define-expansion-constructors)
                                                 ((top) (top) (top))
                                                 ("1og" "1of" "1oe")))
                                              (hygiene guile))))
                                    #{ropt _85hotwsCta0JfYIjI4Owc}#)))
                          #{tmp _85hotwsCta0JfYIjI4Owk}#)
                        (let ((#{tmp _85hotwsCta0JfYIjI4OxG}#
                                ($sc-dispatch
                                  #{args _85hotwsCta0JfYIjI4Owa}#
                                  '((any any) . any))))
                          (if (if #{tmp _85hotwsCta0JfYIjI4OxG}#
                                (@apply
                                  (lambda (#{a _85hotwsCta0JfYIjI4OxK}#
                                           #{init _85hotwsCta0JfYIjI4OxL}#
                                           #{b _85hotwsCta0JfYIjI4OxM}#)
                                    (if (symbol? #{a _85hotwsCta0JfYIjI4OxK}#)
                                      #t
                                      (if (if (vector?
                                                #{a _85hotwsCta0JfYIjI4OxK}#)
                                            (if (= (vector-length
                                                     #{a _85hotwsCta0JfYIjI4OxK}#)
                                                   4)
                                              (eq? (vector-ref
                                                     #{a _85hotwsCta0JfYIjI4OxK}#
                                                     0)
                                                   'syntax-object)
                                              #f)
                                            #f)
                                        (symbol?
                                          (vector-ref
                                            #{a _85hotwsCta0JfYIjI4OxK}#
                                            1))
                                        #f)))
                                  #{tmp _85hotwsCta0JfYIjI4OxG}#)
                                #f)
                            (@apply
                              (lambda (#{a _85hotwsCta0JfYIjI4Oxn}#
                                       #{init _85hotwsCta0JfYIjI4Oxo}#
                                       #{b _85hotwsCta0JfYIjI4Oxp}#)
                                (#{opt _85hotwsCta0JfYIjI4OuY}#
                                  #{b _85hotwsCta0JfYIjI4Oxp}#
                                  #{req _85hotwsCta0JfYIjI4Owb}#
                                  (cons (list #{a _85hotwsCta0JfYIjI4Oxn}#
                                              #{init _85hotwsCta0JfYIjI4Oxo}#)
                                        #{ropt _85hotwsCta0JfYIjI4Owc}#)))
                              #{tmp _85hotwsCta0JfYIjI4OxG}#)
                            (let ((#{tmp _85hotwsCta0JfYIjI4Oxq}#
                                    ($sc-dispatch
                                      #{args _85hotwsCta0JfYIjI4Owa}#
                                      '(any . any))))
                              (if (if #{tmp _85hotwsCta0JfYIjI4Oxq}#
                                    (@apply
                                      (lambda (#{a _85hotwsCta0JfYIjI4Oxu}#
                                               #{b _85hotwsCta0JfYIjI4Oxv}#)
                                        (eq? (syntax->datum
                                               #{a _85hotwsCta0JfYIjI4Oxu}#)
                                             #:key))
                                      #{tmp _85hotwsCta0JfYIjI4Oxq}#)
                                    #f)
                                (@apply
                                  (lambda (#{a _85hotwsCta0JfYIjI4Oxw}#
                                           #{b _85hotwsCta0JfYIjI4Oxx}#)
                                    (#{key _85hotwsCta0JfYIjI4OuZ}#
                                      #{b _85hotwsCta0JfYIjI4Oxx}#
                                      #{req _85hotwsCta0JfYIjI4Owb}#
                                      (reverse #{ropt _85hotwsCta0JfYIjI4Owc}#)
                                      '()))
                                  #{tmp _85hotwsCta0JfYIjI4Oxq}#)
                                (let ((#{tmp _85hotwsCta0JfYIjI4Ox0}#
                                        ($sc-dispatch
                                          #{args _85hotwsCta0JfYIjI4Owa}#
                                          '(any any))))
                                  (if (if #{tmp _85hotwsCta0JfYIjI4Ox0}#
                                        (@apply
                                          (lambda (#{a _85hotwsCta0JfYIjI4Ox4}#
                                                   #{b _85hotwsCta0JfYIjI4Ox5}#)
                                            (eq? (syntax->datum
                                                   #{a _85hotwsCta0JfYIjI4Ox4}#)
                                                 #:rest))
                                          #{tmp _85hotwsCta0JfYIjI4Ox0}#)
                                        #f)
                                    (@apply
                                      (lambda (#{a _85hotwsCta0JfYIjI4Ox6}#
                                               #{b _85hotwsCta0JfYIjI4Ox7}#)
                                        (#{rest _85hotwsCta0JfYIjI4Oua}#
                                          #{b _85hotwsCta0JfYIjI4Ox7}#
                                          #{req _85hotwsCta0JfYIjI4Owb}#
                                          (reverse
                                            #{ropt _85hotwsCta0JfYIjI4Owc}#)
                                          '()))
                                      #{tmp _85hotwsCta0JfYIjI4Ox0}#)
                                    (let ((#{tmp _85hotwsCta0JfYIjI4Ox$}#
                                            (list #{args _85hotwsCta0JfYIjI4Owa}#)))
                                      (if (@apply
                                            (lambda (#{r _85hotwsCta0JfYIjI4OyA}#)
                                              (if (symbol?
                                                    #{r _85hotwsCta0JfYIjI4OyA}#)
                                                #t
                                                (if (if (vector?
                                                          #{r _85hotwsCta0JfYIjI4OyA}#)
                                                      (if (= (vector-length
                                                               #{r _85hotwsCta0JfYIjI4OyA}#)
                                                             4)
                                                        (eq? (vector-ref
                                                               #{r _85hotwsCta0JfYIjI4OyA}#
                                                               0)
                                                             'syntax-object)
                                                        #f)
                                                      #f)
                                                  (symbol?
                                                    (vector-ref
                                                      #{r _85hotwsCta0JfYIjI4OyA}#
                                                      1))
                                                  #f)))
                                            #{tmp _85hotwsCta0JfYIjI4Ox$}#)
                                        (@apply
                                          (lambda (#{r _85hotwsCta0JfYIjI4Oye}#)
                                            (#{rest _85hotwsCta0JfYIjI4Oua}#
                                              #{r _85hotwsCta0JfYIjI4Oye}#
                                              #{req _85hotwsCta0JfYIjI4Owb}#
                                              (reverse
                                                #{ropt _85hotwsCta0JfYIjI4Owc}#)
                                              '()))
                                          #{tmp _85hotwsCta0JfYIjI4Ox$}#)
                                        (syntax-violation
                                          'lambda*
                                          "invalid optional argument list"
                                          #{orig-args _85hotwsCta0JfYIjI4OuW}#
                                          #{args _85hotwsCta0JfYIjI4Owa}#)))))))))))))))
            (#{key _85hotwsCta0JfYIjI4OuZ}#
              (lambda (#{args _85hotwsCta0JfYIjI4Oyx}#
                       #{req _85hotwsCta0JfYIjI4Oyy}#
                       #{opt _85hotwsCta0JfYIjI4Oyz}#
                       #{rkey _85hotwsCta0JfYIjI4Oy0}#)
                (let ((#{tmp _85hotwsCta0JfYIjI4Oy2}#
                        ($sc-dispatch
                          #{args _85hotwsCta0JfYIjI4Oyx}#
                          '())))
                  (if #{tmp _85hotwsCta0JfYIjI4Oy2}#
                    (@apply
                      (lambda ()
                        (#{check _85hotwsCta0JfYIjI4Oub}#
                          #{req _85hotwsCta0JfYIjI4Oyy}#
                          #{opt _85hotwsCta0JfYIjI4Oyz}#
                          #f
                          (cons #f
                                (reverse #{rkey _85hotwsCta0JfYIjI4Oy0}#))))
                      #{tmp _85hotwsCta0JfYIjI4Oy2}#)
                    (let ((#{tmp _85hotwsCta0JfYIjI4Oy8}#
                            ($sc-dispatch
                              #{args _85hotwsCta0JfYIjI4Oyx}#
                              '(any . any))))
                      (if (if #{tmp _85hotwsCta0JfYIjI4Oy8}#
                            (@apply
                              (lambda (#{a _85hotwsCta0JfYIjI4OzA}#
                                       #{b _85hotwsCta0JfYIjI4OzB}#)
                                (if (symbol? #{a _85hotwsCta0JfYIjI4OzA}#)
                                  #t
                                  (if (if (vector?
                                            #{a _85hotwsCta0JfYIjI4OzA}#)
                                        (if (= (vector-length
                                                 #{a _85hotwsCta0JfYIjI4OzA}#)
                                               4)
                                          (eq? (vector-ref
                                                 #{a _85hotwsCta0JfYIjI4OzA}#
                                                 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (symbol?
                                      (vector-ref
                                        #{a _85hotwsCta0JfYIjI4OzA}#
                                        1))
                                    #f)))
                              #{tmp _85hotwsCta0JfYIjI4Oy8}#)
                            #f)
                        (@apply
                          (lambda (#{a _85hotwsCta0JfYIjI4Ozc}#
                                   #{b _85hotwsCta0JfYIjI4Ozd}#)
                            (let ((#{tmp _85hotwsCta0JfYIjI4Oze}#
                                    (symbol->keyword
                                      (syntax->datum
                                        #{a _85hotwsCta0JfYIjI4Ozc}#))))
                              (#{key _85hotwsCta0JfYIjI4OuZ}#
                                #{b _85hotwsCta0JfYIjI4Ozd}#
                                #{req _85hotwsCta0JfYIjI4Oyy}#
                                #{opt _85hotwsCta0JfYIjI4Oyz}#
                                (cons (cons #{tmp _85hotwsCta0JfYIjI4Oze}#
                                            (cons #{a _85hotwsCta0JfYIjI4Ozc}#
                                                  '(#(syntax-object
                                                      #f
                                                      ((top)
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(k)
                                                         #((top))
                                                         #("2fs"))
                                                       #(ribcage
                                                         #(a b)
                                                         #((top) (top))
                                                         #("2fq" "2fr"))
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(args req opt rkey)
                                                         #((top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                         #("2fk"
                                                           "2fl"
                                                           "2fm"
                                                           "2fn"))
                                                       #(ribcage
                                                         (check rest
                                                                key
                                                                opt
                                                                req)
                                                         ((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                         ("2ea"
                                                          "2e9"
                                                          "2e8"
                                                          "2e7"
                                                          "2e6"))
                                                       #(ribcage
                                                         #(orig-args)
                                                         #((top))
                                                         #("2e5"))
                                                       #(ribcage
                                                         (lambda-var-list
                                                           gen-var
                                                           strip
                                                           expand-lambda-case
                                                           lambda*-formals
                                                           expand-simple-lambda
                                                           lambda-formals
                                                           ellipsis?
                                                           expand-void
                                                           eval-local-transformer
                                                           expand-local-syntax
                                                           expand-body
                                                           expand-macro
                                                           expand-application
                                                           expand-expr
                                                           expand
                                                           syntax-type
                                                           parse-when-list
                                                           expand-install-global
                                                           expand-top-sequence
                                                           expand-sequence
                                                           source-wrap
                                                           wrap
                                                           bound-id-member?
                                                           distinct-bound-ids?
                                                           valid-bound-ids?
                                                           bound-id=?
                                                           free-id=?
                                                           with-transformer-environment
                                                           transformer-environment
                                                           resolve-identifier
                                                           locally-bound-identifiers
                                                           id-var-name
                                                           same-marks?
                                                           join-marks
                                                           join-wraps
                                                           smart-append
                                                           make-binding-wrap
                                                           extend-ribcage!
                                                           make-empty-ribcage
                                                           new-mark
                                                           anti-mark
                                                           the-anti-mark
                                                           top-marked?
                                                           top-wrap
                                                           empty-wrap
                                                           set-ribcage-labels!
                                                           set-ribcage-marks!
                                                           set-ribcage-symnames!
                                                           ribcage-labels
                                                           ribcage-marks
                                                           ribcage-symnames
                                                           ribcage?
                                                           make-ribcage
                                                           gen-labels
                                                           gen-label
                                                           make-rename
                                                           rename-marks
                                                           rename-new
                                                           rename-old
                                                           subst-rename?
                                                           wrap-subst
                                                           wrap-marks
                                                           make-wrap
                                                           id-sym-name&marks
                                                           id-sym-name
                                                           id?
                                                           nonsymbol-id?
                                                           global-extend
                                                           lookup
                                                           macros-only-env
                                                           extend-var-env
                                                           extend-env
                                                           null-env
                                                           binding-value
                                                           binding-type
                                                           make-binding
                                                           arg-check
                                                           source-annotation
                                                           no-source
                                                           set-syntax-object-module!
                                                           set-syntax-object-wrap!
                                                           set-syntax-object-expression!
                                                           syntax-object-module
                                                           syntax-object-wrap
                                                           syntax-object-expression
                                                           syntax-object?
                                                           make-syntax-object
                                                           build-lexical-var
                                                           build-letrec
                                                           build-named-let
                                                           build-let
                                                           build-sequence
                                                           build-data
                                                           build-primref
                                                           build-lambda-case
                                                           build-case-lambda
                                                           build-simple-lambda
                                                           build-global-definition
                                                           build-global-assignment
                                                           build-global-reference
                                                           analyze-variable
                                                           build-lexical-assignment
                                                           build-lexical-reference
                                                           build-dynlet
                                                           build-conditional
                                                           build-application
                                                           build-void
                                                           maybe-name-value!
                                                           decorate-source
                                                           get-global-definition-hook
                                                           put-global-definition-hook
                                                           gensym-hook
                                                           local-eval-hook
                                                           top-level-eval-hook
                                                           fx<
                                                           fx=
                                                           fx-
                                                           fx+
                                                           set-lambda-meta!
                                                           lambda-meta
                                                           lambda?
                                                           make-dynlet
                                                           make-letrec
                                                           make-let
                                                           make-lambda-case
                                                           make-lambda
                                                           make-sequence
                                                           make-application
                                                           make-conditional
                                                           make-toplevel-define
                                                           make-toplevel-set
                                                           make-toplevel-ref
                                                           make-module-set
                                                           make-module-ref
                                                           make-lexical-set
                                                           make-lexical-ref
                                                           make-primitive-ref
                                                           make-const
                                                           make-void)
                                                         ((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                         ("1tt"
                                                          "1ts"
                                                          "1tr"
                                                          "1tq"
                                                          "1tp"
                                                          "1to"
                                                          "1tn"
                                                          "1tm"
                                                          "1tl"
                                                          "1tk"
                                                          "1tj"
                                                          "1ti"
                                                          "1th"
                                                          "1tg"
                                                          "1tf"
                                                          "1te"
                                                          "1td"
                                                          "1tc"
                                                          "1tb"
                                                          "1ta"
                                                          "1t9"
                                                          "1t8"
                                                          "1t7"
                                                          "1t6"
                                                          "1t5"
                                                          "1t4"
                                                          "1t3"
                                                          "1t2"
                                                          "1t1"
                                                          "1t0"
                                                          "1sz"
                                                          "1sy"
                                                          "1sx"
                                                          "1sw"
                                                          "1sv"
                                                          "1su"
                                                          "1st"
                                                          "1ss"
                                                          "1sr"
                                                          "1sq"
                                                          "1sp"
                                                          "1so"
                                                          "1sn"
                                                          "1sm"
                                                          "1sl"
                                                          "1sk"
                                                          "1sj"
                                                          "1si"
                                                          "1sh"
                                                          "1sg"
                                                          "1sf"
                                                          "1se"
                                                          "1sd"
                                                          "1sc"
                                                          "1sb"
                                                          "1sa"
                                                          "1s9"
                                                          "1s8"
                                                          "1s7"
                                                          "1s6"
                                                          "1s5"
                                                          "1s4"
                                                          "1s3"
                                                          "1s2"
                                                          "1s1"
                                                          "1s0"
                                                          "1rz"
                                                          "1ry"
                                                          "1rx"
                                                          "1rw"
                                                          "1rv"
                                                          "1ru"
                                                          "1rt"
                                                          "1rs"
                                                          "1rr"
                                                          "1rq"
                                                          "1rp"
                                                          "1ro"
                                                          "1rn"
                                                          "1rm"
                                                          "1rl"
                                                          "1rk"
                                                          "1rj"
                                                          "1ri"
                                                          "1rh"
                                                          "1rg"
                                                          "1rf"
                                                          "1re"
                                                          "1rd"
                                                          "1rc"
                                                          "1rb"
                                                          "1ra"
                                                          "1r9"
                                                          "1r8"
                                                          "1r7"
                                                          "1r6"
                                                          "1r5"
                                                          "1r4"
                                                          "1r3"
                                                          "1r2"
                                                          "1r1"
                                                          "1r0"
                                                          "1qz"
                                                          "1qy"
                                                          "1qx"
                                                          "1qw"
                                                          "1qv"
                                                          "1qu"
                                                          "1qt"
                                                          "1qs"
                                                          "1qr"
                                                          "1qq"
                                                          "1qp"
                                                          "1qo"
                                                          "1qn"
                                                          "1qm"
                                                          "1ql"
                                                          "1qk"
                                                          "1qj"
                                                          "1qi"
                                                          "1qh"
                                                          "1qg"
                                                          "1qf"
                                                          "1qe"
                                                          "1qd"
                                                          "1qc"
                                                          "1qb"
                                                          "1qa"
                                                          "1q9"
                                                          "1q8"
                                                          "1q7"
                                                          "1q6"
                                                          "1q5"
                                                          "1q4"
                                                          "1q3"
                                                          "1q2"
                                                          "1q1"
                                                          "1q0"
                                                          "1pz"
                                                          "1py"))
                                                       #(ribcage
                                                         (define-structure
                                                           define-expansion-accessors
                                                           define-expansion-constructors)
                                                         ((top) (top) (top))
                                                         ("1og" "1of" "1oe")))
                                                      (hygiene guile)))))
                                      #{rkey _85hotwsCta0JfYIjI4Oy0}#))))
                          #{tmp _85hotwsCta0JfYIjI4Oy8}#)
                        (let ((#{tmp _85hotwsCta0JfYIjI4Ozh}#
                                ($sc-dispatch
                                  #{args _85hotwsCta0JfYIjI4Oyx}#
                                  '((any any) . any))))
                          (if (if #{tmp _85hotwsCta0JfYIjI4Ozh}#
                                (@apply
                                  (lambda (#{a _85hotwsCta0JfYIjI4Ozl}#
                                           #{init _85hotwsCta0JfYIjI4Ozm}#
                                           #{b _85hotwsCta0JfYIjI4Ozn}#)
                                    (if (symbol? #{a _85hotwsCta0JfYIjI4Ozl}#)
                                      #t
                                      (if (if (vector?
                                                #{a _85hotwsCta0JfYIjI4Ozl}#)
                                            (if (= (vector-length
                                                     #{a _85hotwsCta0JfYIjI4Ozl}#)
                                                   4)
                                              (eq? (vector-ref
                                                     #{a _85hotwsCta0JfYIjI4Ozl}#
                                                     0)
                                                   'syntax-object)
                                              #f)
                                            #f)
                                        (symbol?
                                          (vector-ref
                                            #{a _85hotwsCta0JfYIjI4Ozl}#
                                            1))
                                        #f)))
                                  #{tmp _85hotwsCta0JfYIjI4Ozh}#)
                                #f)
                            (@apply
                              (lambda (#{a _85hotwsCta0JfYIjI4O0C}#
                                       #{init _85hotwsCta0JfYIjI4O0D}#
                                       #{b _85hotwsCta0JfYIjI4O0E}#)
                                (let ((#{tmp _85hotwsCta0JfYIjI4O0F}#
                                        (symbol->keyword
                                          (syntax->datum
                                            #{a _85hotwsCta0JfYIjI4O0C}#))))
                                  (#{key _85hotwsCta0JfYIjI4OuZ}#
                                    #{b _85hotwsCta0JfYIjI4O0E}#
                                    #{req _85hotwsCta0JfYIjI4Oyy}#
                                    #{opt _85hotwsCta0JfYIjI4Oyz}#
                                    (cons (list #{tmp _85hotwsCta0JfYIjI4O0F}#
                                                #{a _85hotwsCta0JfYIjI4O0C}#
                                                #{init _85hotwsCta0JfYIjI4O0D}#)
                                          #{rkey _85hotwsCta0JfYIjI4Oy0}#))))
                              #{tmp _85hotwsCta0JfYIjI4Ozh}#)
                            (let ((#{tmp _85hotwsCta0JfYIjI4O0I}#
                                    ($sc-dispatch
                                      #{args _85hotwsCta0JfYIjI4Oyx}#
                                      '((any any any) . any))))
                              (if (if #{tmp _85hotwsCta0JfYIjI4O0I}#
                                    (@apply
                                      (lambda (#{a _85hotwsCta0JfYIjI4O0M}#
                                               #{init _85hotwsCta0JfYIjI4O0N}#
                                               #{k _85hotwsCta0JfYIjI4O0O}#
                                               #{b _85hotwsCta0JfYIjI4O0P}#)
                                        (if (if (symbol?
                                                  #{a _85hotwsCta0JfYIjI4O0M}#)
                                              #t
                                              (if (if (vector?
                                                        #{a _85hotwsCta0JfYIjI4O0M}#)
                                                    (if (= (vector-length
                                                             #{a _85hotwsCta0JfYIjI4O0M}#)
                                                           4)
                                                      (eq? (vector-ref
                                                             #{a _85hotwsCta0JfYIjI4O0M}#
                                                             0)
                                                           'syntax-object)
                                                      #f)
                                                    #f)
                                                (symbol?
                                                  (vector-ref
                                                    #{a _85hotwsCta0JfYIjI4O0M}#
                                                    1))
                                                #f))
                                          (keyword?
                                            (syntax->datum
                                              #{k _85hotwsCta0JfYIjI4O0O}#))
                                          #f))
                                      #{tmp _85hotwsCta0JfYIjI4O0I}#)
                                    #f)
                                (@apply
                                  (lambda (#{a _85hotwsCta0JfYIjI4O0q}#
                                           #{init _85hotwsCta0JfYIjI4O0r}#
                                           #{k _85hotwsCta0JfYIjI4O0s}#
                                           #{b _85hotwsCta0JfYIjI4O0t}#)
                                    (#{key _85hotwsCta0JfYIjI4OuZ}#
                                      #{b _85hotwsCta0JfYIjI4O0t}#
                                      #{req _85hotwsCta0JfYIjI4Oyy}#
                                      #{opt _85hotwsCta0JfYIjI4Oyz}#
                                      (cons (list #{k _85hotwsCta0JfYIjI4O0s}#
                                                  #{a _85hotwsCta0JfYIjI4O0q}#
                                                  #{init _85hotwsCta0JfYIjI4O0r}#)
                                            #{rkey _85hotwsCta0JfYIjI4Oy0}#)))
                                  #{tmp _85hotwsCta0JfYIjI4O0I}#)
                                (let ((#{tmp _85hotwsCta0JfYIjI4O0u}#
                                        ($sc-dispatch
                                          #{args _85hotwsCta0JfYIjI4Oyx}#
                                          '(any))))
                                  (if (if #{tmp _85hotwsCta0JfYIjI4O0u}#
                                        (@apply
                                          (lambda (#{aok _85hotwsCta0JfYIjI4O0y}#)
                                            (eq? (syntax->datum
                                                   #{aok _85hotwsCta0JfYIjI4O0y}#)
                                                 #:allow-other-keys))
                                          #{tmp _85hotwsCta0JfYIjI4O0u}#)
                                        #f)
                                    (@apply
                                      (lambda (#{aok _85hotwsCta0JfYIjI4O0z}#)
                                        (#{check _85hotwsCta0JfYIjI4Oub}#
                                          #{req _85hotwsCta0JfYIjI4Oyy}#
                                          #{opt _85hotwsCta0JfYIjI4Oyz}#
                                          #f
                                          (cons #t
                                                (reverse
                                                  #{rkey _85hotwsCta0JfYIjI4Oy0}#))))
                                      #{tmp _85hotwsCta0JfYIjI4O0u}#)
                                    (let ((#{tmp _85hotwsCta0JfYIjI4O02}#
                                            ($sc-dispatch
                                              #{args _85hotwsCta0JfYIjI4Oyx}#
                                              '(any any any))))
                                      (if (if #{tmp _85hotwsCta0JfYIjI4O02}#
                                            (@apply
                                              (lambda (#{aok _85hotwsCta0JfYIjI4O06}#
                                                       #{a _85hotwsCta0JfYIjI4O07}#
                                                       #{b _85hotwsCta0JfYIjI4O08}#)
                                                (if (eq? (syntax->datum
                                                           #{aok _85hotwsCta0JfYIjI4O06}#)
                                                         #:allow-other-keys)
                                                  (eq? (syntax->datum
                                                         #{a _85hotwsCta0JfYIjI4O07}#)
                                                       #:rest)
                                                  #f))
                                              #{tmp _85hotwsCta0JfYIjI4O02}#)
                                            #f)
                                        (@apply
                                          (lambda (#{aok _85hotwsCta0JfYIjI4O09}#
                                                   #{a _85hotwsCta0JfYIjI4O0$}#
                                                   #{b _85hotwsCta0JfYIjI4O0@}#)
                                            (#{rest _85hotwsCta0JfYIjI4Oua}#
                                              #{b _85hotwsCta0JfYIjI4O0@}#
                                              #{req _85hotwsCta0JfYIjI4Oyy}#
                                              #{opt _85hotwsCta0JfYIjI4Oyz}#
                                              (cons #t
                                                    (reverse
                                                      #{rkey _85hotwsCta0JfYIjI4Oy0}#))))
                                          #{tmp _85hotwsCta0JfYIjI4O02}#)
                                        (let ((#{tmp _85hotwsCta0JfYIjI4O1C}#
                                                ($sc-dispatch
                                                  #{args _85hotwsCta0JfYIjI4Oyx}#
                                                  '(any . any))))
                                          (if (if #{tmp _85hotwsCta0JfYIjI4O1C}#
                                                (@apply
                                                  (lambda (#{aok _85hotwsCta0JfYIjI4O1G}#
                                                           #{r _85hotwsCta0JfYIjI4O1H}#)
                                                    (if (eq? (syntax->datum
                                                               #{aok _85hotwsCta0JfYIjI4O1G}#)
                                                             #:allow-other-keys)
                                                      (if (symbol?
                                                            #{r _85hotwsCta0JfYIjI4O1H}#)
                                                        #t
                                                        (if (if (vector?
                                                                  #{r _85hotwsCta0JfYIjI4O1H}#)
                                                              (if (= (vector-length
                                                                       #{r _85hotwsCta0JfYIjI4O1H}#)
                                                                     4)
                                                                (eq? (vector-ref
                                                                       #{r _85hotwsCta0JfYIjI4O1H}#
                                                                       0)
                                                                     'syntax-object)
                                                                #f)
                                                              #f)
                                                          (symbol?
                                                            (vector-ref
                                                              #{r _85hotwsCta0JfYIjI4O1H}#
                                                              1))
                                                          #f))
                                                      #f))
                                                  #{tmp _85hotwsCta0JfYIjI4O1C}#)
                                                #f)
                                            (@apply
                                              (lambda (#{aok _85hotwsCta0JfYIjI4O1i}#
                                                       #{r _85hotwsCta0JfYIjI4O1j}#)
                                                (#{rest _85hotwsCta0JfYIjI4Oua}#
                                                  #{r _85hotwsCta0JfYIjI4O1j}#
                                                  #{req _85hotwsCta0JfYIjI4Oyy}#
                                                  #{opt _85hotwsCta0JfYIjI4Oyz}#
                                                  (cons #t
                                                        (reverse
                                                          #{rkey _85hotwsCta0JfYIjI4Oy0}#))))
                                              #{tmp _85hotwsCta0JfYIjI4O1C}#)
                                            (let ((#{tmp _85hotwsCta0JfYIjI4O1m}#
                                                    ($sc-dispatch
                                                      #{args _85hotwsCta0JfYIjI4Oyx}#
                                                      '(any any))))
                                              (if (if #{tmp _85hotwsCta0JfYIjI4O1m}#
                                                    (@apply
                                                      (lambda (#{a _85hotwsCta0JfYIjI4O1q}#
                                                               #{b _85hotwsCta0JfYIjI4O1r}#)
                                                        (eq? (syntax->datum
                                                               #{a _85hotwsCta0JfYIjI4O1q}#)
                                                             #:rest))
                                                      #{tmp _85hotwsCta0JfYIjI4O1m}#)
                                                    #f)
                                                (@apply
                                                  (lambda (#{a _85hotwsCta0JfYIjI4O1s}#
                                                           #{b _85hotwsCta0JfYIjI4O1t}#)
                                                    (#{rest _85hotwsCta0JfYIjI4Oua}#
                                                      #{b _85hotwsCta0JfYIjI4O1t}#
                                                      #{req _85hotwsCta0JfYIjI4Oyy}#
                                                      #{opt _85hotwsCta0JfYIjI4Oyz}#
                                                      (cons #f
                                                            (reverse
                                                              #{rkey _85hotwsCta0JfYIjI4Oy0}#))))
                                                  #{tmp _85hotwsCta0JfYIjI4O1m}#)
                                                (let ((#{tmp _85hotwsCta0JfYIjI4O1w}#
                                                        (list #{args _85hotwsCta0JfYIjI4Oyx}#)))
                                                  (if (@apply
                                                        (lambda (#{r _85hotwsCta0JfYIjI4O1y}#)
                                                          (if (symbol?
                                                                #{r _85hotwsCta0JfYIjI4O1y}#)
                                                            #t
                                                            (if (if (vector?
                                                                      #{r _85hotwsCta0JfYIjI4O1y}#)
                                                                  (if (= (vector-length
                                                                           #{r _85hotwsCta0JfYIjI4O1y}#)
                                                                         4)
                                                                    (eq? (vector-ref
                                                                           #{r _85hotwsCta0JfYIjI4O1y}#
                                                                           0)
                                                                         'syntax-object)
                                                                    #f)
                                                                  #f)
                                                              (symbol?
                                                                (vector-ref
                                                                  #{r _85hotwsCta0JfYIjI4O1y}#
                                                                  1))
                                                              #f)))
                                                        #{tmp _85hotwsCta0JfYIjI4O1w}#)
                                                    (@apply
                                                      (lambda (#{r _85hotwsCta0JfYIjI4O2Q}#)
                                                        (#{rest _85hotwsCta0JfYIjI4Oua}#
                                                          #{r _85hotwsCta0JfYIjI4O2Q}#
                                                          #{req _85hotwsCta0JfYIjI4Oyy}#
                                                          #{opt _85hotwsCta0JfYIjI4Oyz}#
                                                          (cons #f
                                                                (reverse
                                                                  #{rkey _85hotwsCta0JfYIjI4Oy0}#))))
                                                      #{tmp _85hotwsCta0JfYIjI4O1w}#)
                                                    (syntax-violation
                                                      'lambda*
                                                      "invalid keyword argument list"
                                                      #{orig-args _85hotwsCta0JfYIjI4OuW}#
                                                      #{args _85hotwsCta0JfYIjI4Oyx}#)))))))))))))))))))))
            (#{rest _85hotwsCta0JfYIjI4Oua}#
              (lambda (#{args _85hotwsCta0JfYIjI4O2s}#
                       #{req _85hotwsCta0JfYIjI4O2t}#
                       #{opt _85hotwsCta0JfYIjI4O2u}#
                       #{kw _85hotwsCta0JfYIjI4O2v}#)
                (let ((#{tmp _85hotwsCta0JfYIjI4O2x}#
                        (list #{args _85hotwsCta0JfYIjI4O2s}#)))
                  (if (@apply
                        (lambda (#{r _85hotwsCta0JfYIjI4O2z}#)
                          (if (symbol? #{r _85hotwsCta0JfYIjI4O2z}#)
                            #t
                            (if (if (vector? #{r _85hotwsCta0JfYIjI4O2z}#)
                                  (if (= (vector-length
                                           #{r _85hotwsCta0JfYIjI4O2z}#)
                                         4)
                                    (eq? (vector-ref
                                           #{r _85hotwsCta0JfYIjI4O2z}#
                                           0)
                                         'syntax-object)
                                    #f)
                                  #f)
                              (symbol?
                                (vector-ref #{r _85hotwsCta0JfYIjI4O2z}# 1))
                              #f)))
                        #{tmp _85hotwsCta0JfYIjI4O2x}#)
                    (@apply
                      (lambda (#{r _85hotwsCta0JfYIjI4O3R}#)
                        (#{check _85hotwsCta0JfYIjI4Oub}#
                          #{req _85hotwsCta0JfYIjI4O2t}#
                          #{opt _85hotwsCta0JfYIjI4O2u}#
                          #{r _85hotwsCta0JfYIjI4O3R}#
                          #{kw _85hotwsCta0JfYIjI4O2v}#))
                      #{tmp _85hotwsCta0JfYIjI4O2x}#)
                    (syntax-violation
                      'lambda*
                      "invalid rest argument"
                      #{orig-args _85hotwsCta0JfYIjI4OuW}#
                      #{args _85hotwsCta0JfYIjI4O2s}#)))))
            (#{check _85hotwsCta0JfYIjI4Oub}#
              (lambda (#{req _85hotwsCta0JfYIjI4O3V}#
                       #{opt _85hotwsCta0JfYIjI4O3W}#
                       #{rest _85hotwsCta0JfYIjI4O3X}#
                       #{kw _85hotwsCta0JfYIjI4O3Y}#)
                (if (#{distinct-bound-ids? _85hotwsCta0JfYIjI4J4C}#
                      (append
                        #{req _85hotwsCta0JfYIjI4O3V}#
                        (map car #{opt _85hotwsCta0JfYIjI4O3W}#)
                        (if #{rest _85hotwsCta0JfYIjI4O3X}#
                          (list #{rest _85hotwsCta0JfYIjI4O3X}#)
                          '())
                        (if (pair? #{kw _85hotwsCta0JfYIjI4O3Y}#)
                          (map cadr (cdr #{kw _85hotwsCta0JfYIjI4O3Y}#))
                          '())))
                  (values
                    #{req _85hotwsCta0JfYIjI4O3V}#
                    #{opt _85hotwsCta0JfYIjI4O3W}#
                    #{rest _85hotwsCta0JfYIjI4O3X}#
                    #{kw _85hotwsCta0JfYIjI4O3Y}#)
                  (syntax-violation
                    'lambda*
                    "duplicate identifier in argument list"
                    #{orig-args _85hotwsCta0JfYIjI4OuW}#)))))
           (#{req _85hotwsCta0JfYIjI4OuX}#
             #{orig-args _85hotwsCta0JfYIjI4OuW}#
             '()))))
     (#{expand-lambda-case _85hotwsCta0JfYIjI4J4X}#
       (lambda (#{e _85hotwsCta0JfYIjI4O5M}#
                #{r _85hotwsCta0JfYIjI4O5N}#
                #{w _85hotwsCta0JfYIjI4O5O}#
                #{s _85hotwsCta0JfYIjI4O5P}#
                #{mod _85hotwsCta0JfYIjI4O5Q}#
                #{get-formals _85hotwsCta0JfYIjI4O5R}#
                #{clauses _85hotwsCta0JfYIjI4O5S}#)
         (letrec*
           ((#{parse-req _85hotwsCta0JfYIjI4O5T}#
              (lambda (#{req _85hotwsCta0JfYIjI4O7S}#
                       #{opt _85hotwsCta0JfYIjI4O7T}#
                       #{rest _85hotwsCta0JfYIjI4O7U}#
                       #{kw _85hotwsCta0JfYIjI4O7V}#
                       #{body _85hotwsCta0JfYIjI4O7W}#)
                (let ((#{vars _85hotwsCta0JfYIjI4O7X}#
                        (map #{gen-var _85hotwsCta0JfYIjI4J4Z}#
                             #{req _85hotwsCta0JfYIjI4O7S}#))
                      (#{labels _85hotwsCta0JfYIjI4O7Y}#
                        (#{gen-labels _85hotwsCta0JfYIjI4J3q}#
                          #{req _85hotwsCta0JfYIjI4O7S}#)))
                  (let ((#{r* _85hotwsCta0JfYIjI4O7Z}#
                          (#{extend-var-env _85hotwsCta0JfYIjI4J3i}#
                            #{labels _85hotwsCta0JfYIjI4O7Y}#
                            #{vars _85hotwsCta0JfYIjI4O7X}#
                            #{r _85hotwsCta0JfYIjI4O5N}#))
                        (#{w* _85hotwsCta0JfYIjI4O7a}#
                          (#{make-binding-wrap _85hotwsCta0JfYIjI4J31}#
                            #{req _85hotwsCta0JfYIjI4O7S}#
                            #{labels _85hotwsCta0JfYIjI4O7Y}#
                            #{w _85hotwsCta0JfYIjI4O5O}#)))
                    (#{parse-opt _85hotwsCta0JfYIjI4O5U}#
                      (map syntax->datum
                           #{req _85hotwsCta0JfYIjI4O7S}#)
                      #{opt _85hotwsCta0JfYIjI4O7T}#
                      #{rest _85hotwsCta0JfYIjI4O7U}#
                      #{kw _85hotwsCta0JfYIjI4O7V}#
                      #{body _85hotwsCta0JfYIjI4O7W}#
                      (reverse #{vars _85hotwsCta0JfYIjI4O7X}#)
                      #{r* _85hotwsCta0JfYIjI4O7Z}#
                      #{w* _85hotwsCta0JfYIjI4O7a}#
                      '()
                      '())))))
            (#{parse-opt _85hotwsCta0JfYIjI4O5U}#
              (lambda (#{req _85hotwsCta0JfYIjI4O$K}#
                       #{opt _85hotwsCta0JfYIjI4O$L}#
                       #{rest _85hotwsCta0JfYIjI4O$M}#
                       #{kw _85hotwsCta0JfYIjI4O$N}#
                       #{body _85hotwsCta0JfYIjI4O$O}#
                       #{vars _85hotwsCta0JfYIjI4O$P}#
                       #{r* _85hotwsCta0JfYIjI4O$Q}#
                       #{w* _85hotwsCta0JfYIjI4O$R}#
                       #{out _85hotwsCta0JfYIjI4O$S}#
                       #{inits _85hotwsCta0JfYIjI4O$T}#)
                (if (pair? #{opt _85hotwsCta0JfYIjI4O$L}#)
                  (let ((#{tmp _85hotwsCta0JfYIjI4O$U}#
                          (car #{opt _85hotwsCta0JfYIjI4O$L}#)))
                    (let ((#{tmp _85hotwsCta0JfYIjI4O$V}#
                            ($sc-dispatch
                              #{tmp _85hotwsCta0JfYIjI4O$U}#
                              '(any any))))
                      (if #{tmp _85hotwsCta0JfYIjI4O$V}#
                        (@apply
                          (lambda (#{id _85hotwsCta0JfYIjI4O$X}#
                                   #{i _85hotwsCta0JfYIjI4O$Y}#)
                            (let ((#{v _85hotwsCta0JfYIjI4O$Z}#
                                    (let ((#{id _85hotwsCta0JfYIjI4O$h}#
                                            (if (if (vector?
                                                      #{id _85hotwsCta0JfYIjI4O$X}#)
                                                  (if (= (vector-length
                                                           #{id _85hotwsCta0JfYIjI4O$X}#)
                                                         4)
                                                    (eq? (vector-ref
                                                           #{id _85hotwsCta0JfYIjI4O$X}#
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (vector-ref
                                                #{id _85hotwsCta0JfYIjI4O$X}#
                                                1)
                                              #{id _85hotwsCta0JfYIjI4O$X}#)))
                                      (gensym
                                        (string-append
                                          (symbol->string
                                            #{id _85hotwsCta0JfYIjI4O$h}#)
                                          " ")))))
                              (let ((#{l _85hotwsCta0JfYIjI4O$a}#
                                      (#{gen-labels _85hotwsCta0JfYIjI4J3q}#
                                        (list #{v _85hotwsCta0JfYIjI4O$Z}#))))
                                (let ((#{r** _85hotwsCta0JfYIjI4O$b}#
                                        (#{extend-var-env _85hotwsCta0JfYIjI4J3i}#
                                          #{l _85hotwsCta0JfYIjI4O$a}#
                                          (list #{v _85hotwsCta0JfYIjI4O$Z}#)
                                          #{r* _85hotwsCta0JfYIjI4O$Q}#)))
                                  (let ((#{w** _85hotwsCta0JfYIjI4O$c}#
                                          (#{make-binding-wrap _85hotwsCta0JfYIjI4J31}#
                                            (list #{id _85hotwsCta0JfYIjI4O$X}#)
                                            #{l _85hotwsCta0JfYIjI4O$a}#
                                            #{w* _85hotwsCta0JfYIjI4O$R}#)))
                                    (#{parse-opt _85hotwsCta0JfYIjI4O5U}#
                                      #{req _85hotwsCta0JfYIjI4O$K}#
                                      (cdr #{opt _85hotwsCta0JfYIjI4O$L}#)
                                      #{rest _85hotwsCta0JfYIjI4O$M}#
                                      #{kw _85hotwsCta0JfYIjI4O$N}#
                                      #{body _85hotwsCta0JfYIjI4O$O}#
                                      (cons #{v _85hotwsCta0JfYIjI4O$Z}#
                                            #{vars _85hotwsCta0JfYIjI4O$P}#)
                                      #{r** _85hotwsCta0JfYIjI4O$b}#
                                      #{w** _85hotwsCta0JfYIjI4O$c}#
                                      (cons (syntax->datum
                                              #{id _85hotwsCta0JfYIjI4O$X}#)
                                            #{out _85hotwsCta0JfYIjI4O$S}#)
                                      (cons (#{expand _85hotwsCta0JfYIjI4J4L}#
                                              #{i _85hotwsCta0JfYIjI4O$Y}#
                                              #{r* _85hotwsCta0JfYIjI4O$Q}#
                                              #{w* _85hotwsCta0JfYIjI4O$R}#
                                              #{mod _85hotwsCta0JfYIjI4O5Q}#)
                                            #{inits _85hotwsCta0JfYIjI4O$T}#)))))))
                          #{tmp _85hotwsCta0JfYIjI4O$V}#)
                        (syntax-violation
                          #f
                          "source expression failed to match any pattern"
                          #{tmp _85hotwsCta0JfYIjI4O$U}#))))
                  (if #{rest _85hotwsCta0JfYIjI4O$M}#
                    (let ((#{v _85hotwsCta0JfYIjI4PCG}#
                            (let ((#{id _85hotwsCta0JfYIjI4PCQ}#
                                    (if (if (vector?
                                              #{rest _85hotwsCta0JfYIjI4O$M}#)
                                          (if (= (vector-length
                                                   #{rest _85hotwsCta0JfYIjI4O$M}#)
                                                 4)
                                            (eq? (vector-ref
                                                   #{rest _85hotwsCta0JfYIjI4O$M}#
                                                   0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (vector-ref
                                        #{rest _85hotwsCta0JfYIjI4O$M}#
                                        1)
                                      #{rest _85hotwsCta0JfYIjI4O$M}#)))
                              (gensym
                                (string-append
                                  (symbol->string
                                    #{id _85hotwsCta0JfYIjI4PCQ}#)
                                  " ")))))
                      (let ((#{l _85hotwsCta0JfYIjI4PCH}#
                              (#{gen-labels _85hotwsCta0JfYIjI4J3q}#
                                (list #{v _85hotwsCta0JfYIjI4PCG}#))))
                        (let ((#{r* _85hotwsCta0JfYIjI4PCI}#
                                (#{extend-var-env _85hotwsCta0JfYIjI4J3i}#
                                  #{l _85hotwsCta0JfYIjI4PCH}#
                                  (list #{v _85hotwsCta0JfYIjI4PCG}#)
                                  #{r* _85hotwsCta0JfYIjI4O$Q}#)))
                          (let ((#{w* _85hotwsCta0JfYIjI4PCJ}#
                                  (#{make-binding-wrap _85hotwsCta0JfYIjI4J31}#
                                    (list #{rest _85hotwsCta0JfYIjI4O$M}#)
                                    #{l _85hotwsCta0JfYIjI4PCH}#
                                    #{w* _85hotwsCta0JfYIjI4O$R}#)))
                            (#{parse-kw _85hotwsCta0JfYIjI4O5V}#
                              #{req _85hotwsCta0JfYIjI4O$K}#
                              (if (pair? #{out _85hotwsCta0JfYIjI4O$S}#)
                                (reverse #{out _85hotwsCta0JfYIjI4O$S}#)
                                #f)
                              (syntax->datum #{rest _85hotwsCta0JfYIjI4O$M}#)
                              (if (pair? #{kw _85hotwsCta0JfYIjI4O$N}#)
                                (cdr #{kw _85hotwsCta0JfYIjI4O$N}#)
                                #{kw _85hotwsCta0JfYIjI4O$N}#)
                              #{body _85hotwsCta0JfYIjI4O$O}#
                              (cons #{v _85hotwsCta0JfYIjI4PCG}#
                                    #{vars _85hotwsCta0JfYIjI4O$P}#)
                              #{r* _85hotwsCta0JfYIjI4PCI}#
                              #{w* _85hotwsCta0JfYIjI4PCJ}#
                              (if (pair? #{kw _85hotwsCta0JfYIjI4O$N}#)
                                (car #{kw _85hotwsCta0JfYIjI4O$N}#)
                                #f)
                              '()
                              #{inits _85hotwsCta0JfYIjI4O$T}#)))))
                    (#{parse-kw _85hotwsCta0JfYIjI4O5V}#
                      #{req _85hotwsCta0JfYIjI4O$K}#
                      (if (pair? #{out _85hotwsCta0JfYIjI4O$S}#)
                        (reverse #{out _85hotwsCta0JfYIjI4O$S}#)
                        #f)
                      #f
                      (if (pair? #{kw _85hotwsCta0JfYIjI4O$N}#)
                        (cdr #{kw _85hotwsCta0JfYIjI4O$N}#)
                        #{kw _85hotwsCta0JfYIjI4O$N}#)
                      #{body _85hotwsCta0JfYIjI4O$O}#
                      #{vars _85hotwsCta0JfYIjI4O$P}#
                      #{r* _85hotwsCta0JfYIjI4O$Q}#
                      #{w* _85hotwsCta0JfYIjI4O$R}#
                      (if (pair? #{kw _85hotwsCta0JfYIjI4O$N}#)
                        (car #{kw _85hotwsCta0JfYIjI4O$N}#)
                        #f)
                      '()
                      #{inits _85hotwsCta0JfYIjI4O$T}#)))))
            (#{parse-kw _85hotwsCta0JfYIjI4O5V}#
              (lambda (#{req _85hotwsCta0JfYIjI4PEy}#
                       #{opt _85hotwsCta0JfYIjI4PEz}#
                       #{rest _85hotwsCta0JfYIjI4PE0}#
                       #{kw _85hotwsCta0JfYIjI4PE1}#
                       #{body _85hotwsCta0JfYIjI4PE2}#
                       #{vars _85hotwsCta0JfYIjI4PE3}#
                       #{r* _85hotwsCta0JfYIjI4PE4}#
                       #{w* _85hotwsCta0JfYIjI4PE5}#
                       #{aok _85hotwsCta0JfYIjI4PE6}#
                       #{out _85hotwsCta0JfYIjI4PE7}#
                       #{inits _85hotwsCta0JfYIjI4PE8}#)
                (if (pair? #{kw _85hotwsCta0JfYIjI4PE1}#)
                  (let ((#{tmp _85hotwsCta0JfYIjI4PE9}#
                          (car #{kw _85hotwsCta0JfYIjI4PE1}#)))
                    (let ((#{tmp _85hotwsCta0JfYIjI4PE$}#
                            ($sc-dispatch
                              #{tmp _85hotwsCta0JfYIjI4PE9}#
                              '(any any any))))
                      (if #{tmp _85hotwsCta0JfYIjI4PE$}#
                        (@apply
                          (lambda (#{k _85hotwsCta0JfYIjI4PFA}#
                                   #{id _85hotwsCta0JfYIjI4PFB}#
                                   #{i _85hotwsCta0JfYIjI4PFC}#)
                            (let ((#{v _85hotwsCta0JfYIjI4PFD}#
                                    (let ((#{id _85hotwsCta0JfYIjI4PFL}#
                                            (if (if (vector?
                                                      #{id _85hotwsCta0JfYIjI4PFB}#)
                                                  (if (= (vector-length
                                                           #{id _85hotwsCta0JfYIjI4PFB}#)
                                                         4)
                                                    (eq? (vector-ref
                                                           #{id _85hotwsCta0JfYIjI4PFB}#
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (vector-ref
                                                #{id _85hotwsCta0JfYIjI4PFB}#
                                                1)
                                              #{id _85hotwsCta0JfYIjI4PFB}#)))
                                      (gensym
                                        (string-append
                                          (symbol->string
                                            #{id _85hotwsCta0JfYIjI4PFL}#)
                                          " ")))))
                              (let ((#{l _85hotwsCta0JfYIjI4PFE}#
                                      (#{gen-labels _85hotwsCta0JfYIjI4J3q}#
                                        (list #{v _85hotwsCta0JfYIjI4PFD}#))))
                                (let ((#{r** _85hotwsCta0JfYIjI4PFF}#
                                        (#{extend-var-env _85hotwsCta0JfYIjI4J3i}#
                                          #{l _85hotwsCta0JfYIjI4PFE}#
                                          (list #{v _85hotwsCta0JfYIjI4PFD}#)
                                          #{r* _85hotwsCta0JfYIjI4PE4}#)))
                                  (let ((#{w** _85hotwsCta0JfYIjI4PFG}#
                                          (#{make-binding-wrap _85hotwsCta0JfYIjI4J31}#
                                            (list #{id _85hotwsCta0JfYIjI4PFB}#)
                                            #{l _85hotwsCta0JfYIjI4PFE}#
                                            #{w* _85hotwsCta0JfYIjI4PE5}#)))
                                    (#{parse-kw _85hotwsCta0JfYIjI4O5V}#
                                      #{req _85hotwsCta0JfYIjI4PEy}#
                                      #{opt _85hotwsCta0JfYIjI4PEz}#
                                      #{rest _85hotwsCta0JfYIjI4PE0}#
                                      (cdr #{kw _85hotwsCta0JfYIjI4PE1}#)
                                      #{body _85hotwsCta0JfYIjI4PE2}#
                                      (cons #{v _85hotwsCta0JfYIjI4PFD}#
                                            #{vars _85hotwsCta0JfYIjI4PE3}#)
                                      #{r** _85hotwsCta0JfYIjI4PFF}#
                                      #{w** _85hotwsCta0JfYIjI4PFG}#
                                      #{aok _85hotwsCta0JfYIjI4PE6}#
                                      (cons (list (syntax->datum
                                                    #{k _85hotwsCta0JfYIjI4PFA}#)
                                                  (syntax->datum
                                                    #{id _85hotwsCta0JfYIjI4PFB}#)
                                                  #{v _85hotwsCta0JfYIjI4PFD}#)
                                            #{out _85hotwsCta0JfYIjI4PE7}#)
                                      (cons (#{expand _85hotwsCta0JfYIjI4J4L}#
                                              #{i _85hotwsCta0JfYIjI4PFC}#
                                              #{r* _85hotwsCta0JfYIjI4PE4}#
                                              #{w* _85hotwsCta0JfYIjI4PE5}#
                                              #{mod _85hotwsCta0JfYIjI4O5Q}#)
                                            #{inits _85hotwsCta0JfYIjI4PE8}#)))))))
                          #{tmp _85hotwsCta0JfYIjI4PE$}#)
                        (syntax-violation
                          #f
                          "source expression failed to match any pattern"
                          #{tmp _85hotwsCta0JfYIjI4PE9}#))))
                  (#{parse-body _85hotwsCta0JfYIjI4O5W}#
                    #{req _85hotwsCta0JfYIjI4PEy}#
                    #{opt _85hotwsCta0JfYIjI4PEz}#
                    #{rest _85hotwsCta0JfYIjI4PE0}#
                    (if (if #{aok _85hotwsCta0JfYIjI4PE6}#
                          #{aok _85hotwsCta0JfYIjI4PE6}#
                          (pair? #{out _85hotwsCta0JfYIjI4PE7}#))
                      (cons #{aok _85hotwsCta0JfYIjI4PE6}#
                            (reverse #{out _85hotwsCta0JfYIjI4PE7}#))
                      #f)
                    #{body _85hotwsCta0JfYIjI4PE2}#
                    (reverse #{vars _85hotwsCta0JfYIjI4PE3}#)
                    #{r* _85hotwsCta0JfYIjI4PE4}#
                    #{w* _85hotwsCta0JfYIjI4PE5}#
                    (reverse #{inits _85hotwsCta0JfYIjI4PE8}#)
                    '()))))
            (#{parse-body _85hotwsCta0JfYIjI4O5W}#
              (lambda (#{req _85hotwsCta0JfYIjI4PI5}#
                       #{opt _85hotwsCta0JfYIjI4PI6}#
                       #{rest _85hotwsCta0JfYIjI4PI7}#
                       #{kw _85hotwsCta0JfYIjI4PI8}#
                       #{body _85hotwsCta0JfYIjI4PI9}#
                       #{vars _85hotwsCta0JfYIjI4PI$}#
                       #{r* _85hotwsCta0JfYIjI4PI@}#
                       #{w* _85hotwsCta0JfYIjI4PJA}#
                       #{inits _85hotwsCta0JfYIjI4PJB}#
                       #{meta _85hotwsCta0JfYIjI4PJC}#)
                (let ((#{tmp _85hotwsCta0JfYIjI4PJE}#
                        ($sc-dispatch
                          #{body _85hotwsCta0JfYIjI4PI9}#
                          '(any any . each-any))))
                  (if (if #{tmp _85hotwsCta0JfYIjI4PJE}#
                        (@apply
                          (lambda (#{docstring _85hotwsCta0JfYIjI4PJI}#
                                   #{e1 _85hotwsCta0JfYIjI4PJJ}#
                                   #{e2 _85hotwsCta0JfYIjI4PJK}#)
                            (string?
                              (syntax->datum
                                #{docstring _85hotwsCta0JfYIjI4PJI}#)))
                          #{tmp _85hotwsCta0JfYIjI4PJE}#)
                        #f)
                    (@apply
                      (lambda (#{docstring _85hotwsCta0JfYIjI4PJL}#
                               #{e1 _85hotwsCta0JfYIjI4PJM}#
                               #{e2 _85hotwsCta0JfYIjI4PJN}#)
                        (#{parse-body _85hotwsCta0JfYIjI4O5W}#
                          #{req _85hotwsCta0JfYIjI4PI5}#
                          #{opt _85hotwsCta0JfYIjI4PI6}#
                          #{rest _85hotwsCta0JfYIjI4PI7}#
                          #{kw _85hotwsCta0JfYIjI4PI8}#
                          (cons #{e1 _85hotwsCta0JfYIjI4PJM}#
                                #{e2 _85hotwsCta0JfYIjI4PJN}#)
                          #{vars _85hotwsCta0JfYIjI4PI$}#
                          #{r* _85hotwsCta0JfYIjI4PI@}#
                          #{w* _85hotwsCta0JfYIjI4PJA}#
                          #{inits _85hotwsCta0JfYIjI4PJB}#
                          (append
                            #{meta _85hotwsCta0JfYIjI4PJC}#
                            (list (cons 'documentation
                                        (syntax->datum
                                          #{docstring _85hotwsCta0JfYIjI4PJL}#))))))
                      #{tmp _85hotwsCta0JfYIjI4PJE}#)
                    (let ((#{tmp _85hotwsCta0JfYIjI4PJO}#
                            ($sc-dispatch
                              #{body _85hotwsCta0JfYIjI4PI9}#
                              '(#(vector #(each (any . any)))
                                any
                                .
                                each-any))))
                      (if #{tmp _85hotwsCta0JfYIjI4PJO}#
                        (@apply
                          (lambda (#{k _85hotwsCta0JfYIjI4PJS}#
                                   #{v _85hotwsCta0JfYIjI4PJT}#
                                   #{e1 _85hotwsCta0JfYIjI4PJU}#
                                   #{e2 _85hotwsCta0JfYIjI4PJV}#)
                            (#{parse-body _85hotwsCta0JfYIjI4O5W}#
                              #{req _85hotwsCta0JfYIjI4PI5}#
                              #{opt _85hotwsCta0JfYIjI4PI6}#
                              #{rest _85hotwsCta0JfYIjI4PI7}#
                              #{kw _85hotwsCta0JfYIjI4PI8}#
                              (cons #{e1 _85hotwsCta0JfYIjI4PJU}#
                                    #{e2 _85hotwsCta0JfYIjI4PJV}#)
                              #{vars _85hotwsCta0JfYIjI4PI$}#
                              #{r* _85hotwsCta0JfYIjI4PI@}#
                              #{w* _85hotwsCta0JfYIjI4PJA}#
                              #{inits _85hotwsCta0JfYIjI4PJB}#
                              (append
                                #{meta _85hotwsCta0JfYIjI4PJC}#
                                (syntax->datum
                                  (map cons
                                       #{k _85hotwsCta0JfYIjI4PJS}#
                                       #{v _85hotwsCta0JfYIjI4PJT}#)))))
                          #{tmp _85hotwsCta0JfYIjI4PJO}#)
                        (let ((#{tmp _85hotwsCta0JfYIjI4PJW}#
                                ($sc-dispatch
                                  #{body _85hotwsCta0JfYIjI4PI9}#
                                  '(any . each-any))))
                          (if #{tmp _85hotwsCta0JfYIjI4PJW}#
                            (@apply
                              (lambda (#{e1 _85hotwsCta0JfYIjI4PJa}#
                                       #{e2 _85hotwsCta0JfYIjI4PJb}#)
                                (values
                                  #{meta _85hotwsCta0JfYIjI4PJC}#
                                  #{req _85hotwsCta0JfYIjI4PI5}#
                                  #{opt _85hotwsCta0JfYIjI4PI6}#
                                  #{rest _85hotwsCta0JfYIjI4PI7}#
                                  #{kw _85hotwsCta0JfYIjI4PI8}#
                                  #{inits _85hotwsCta0JfYIjI4PJB}#
                                  #{vars _85hotwsCta0JfYIjI4PI$}#
                                  (#{expand-body _85hotwsCta0JfYIjI4J4P}#
                                    (cons #{e1 _85hotwsCta0JfYIjI4PJa}#
                                          #{e2 _85hotwsCta0JfYIjI4PJb}#)
                                    (#{wrap _85hotwsCta0JfYIjI4J4E}#
                                      (begin
                                        (if (if (pair? #{e _85hotwsCta0JfYIjI4O5M}#)
                                              #{s _85hotwsCta0JfYIjI4O5P}#
                                              #f)
                                          (set-source-properties!
                                            #{e _85hotwsCta0JfYIjI4O5M}#
                                            #{s _85hotwsCta0JfYIjI4O5P}#))
                                        #{e _85hotwsCta0JfYIjI4O5M}#)
                                      #{w _85hotwsCta0JfYIjI4O5O}#
                                      #{mod _85hotwsCta0JfYIjI4O5Q}#)
                                    #{r* _85hotwsCta0JfYIjI4PI@}#
                                    #{w* _85hotwsCta0JfYIjI4PJA}#
                                    #{mod _85hotwsCta0JfYIjI4O5Q}#)))
                              #{tmp _85hotwsCta0JfYIjI4PJW}#)
                            (syntax-violation
                              #f
                              "source expression failed to match any pattern"
                              #{body _85hotwsCta0JfYIjI4PI9}#))))))))))
           (let ((#{tmp _85hotwsCta0JfYIjI4O5Y}#
                   ($sc-dispatch
                     #{clauses _85hotwsCta0JfYIjI4O5S}#
                     '())))
             (if #{tmp _85hotwsCta0JfYIjI4O5Y}#
               (@apply
                 (lambda () (values '() #f))
                 #{tmp _85hotwsCta0JfYIjI4O5Y}#)
               (let ((#{tmp _85hotwsCta0JfYIjI4O5c}#
                       ($sc-dispatch
                         #{clauses _85hotwsCta0JfYIjI4O5S}#
                         '((any any . each-any)
                           .
                           #(each (any any . each-any))))))
                 (if #{tmp _85hotwsCta0JfYIjI4O5c}#
                   (@apply
                     (lambda (#{args _85hotwsCta0JfYIjI4O5g}#
                              #{e1 _85hotwsCta0JfYIjI4O5h}#
                              #{e2 _85hotwsCta0JfYIjI4O5i}#
                              #{args* _85hotwsCta0JfYIjI4O5j}#
                              #{e1* _85hotwsCta0JfYIjI4O5k}#
                              #{e2* _85hotwsCta0JfYIjI4O5l}#)
                       (call-with-values
                         (lambda ()
                           (#{get-formals _85hotwsCta0JfYIjI4O5R}#
                             #{args _85hotwsCta0JfYIjI4O5g}#))
                         (lambda (#{req _85hotwsCta0JfYIjI4O5m}#
                                  #{opt _85hotwsCta0JfYIjI4O5n}#
                                  #{rest _85hotwsCta0JfYIjI4O5o}#
                                  #{kw _85hotwsCta0JfYIjI4O5p}#)
                           (call-with-values
                             (lambda ()
                               (#{parse-req _85hotwsCta0JfYIjI4O5T}#
                                 #{req _85hotwsCta0JfYIjI4O5m}#
                                 #{opt _85hotwsCta0JfYIjI4O5n}#
                                 #{rest _85hotwsCta0JfYIjI4O5o}#
                                 #{kw _85hotwsCta0JfYIjI4O5p}#
                                 (cons #{e1 _85hotwsCta0JfYIjI4O5h}#
                                       #{e2 _85hotwsCta0JfYIjI4O5i}#)))
                             (lambda (#{meta _85hotwsCta0JfYIjI4O6m}#
                                      #{req _85hotwsCta0JfYIjI4O6n}#
                                      #{opt _85hotwsCta0JfYIjI4O6o}#
                                      #{rest _85hotwsCta0JfYIjI4O6p}#
                                      #{kw _85hotwsCta0JfYIjI4O6q}#
                                      #{inits _85hotwsCta0JfYIjI4O6r}#
                                      #{vars _85hotwsCta0JfYIjI4O6s}#
                                      #{body _85hotwsCta0JfYIjI4O6t}#)
                               (call-with-values
                                 (lambda ()
                                   (#{expand-lambda-case _85hotwsCta0JfYIjI4J4X}#
                                     #{e _85hotwsCta0JfYIjI4O5M}#
                                     #{r _85hotwsCta0JfYIjI4O5N}#
                                     #{w _85hotwsCta0JfYIjI4O5O}#
                                     #{s _85hotwsCta0JfYIjI4O5P}#
                                     #{mod _85hotwsCta0JfYIjI4O5Q}#
                                     #{get-formals _85hotwsCta0JfYIjI4O5R}#
                                     (map (lambda (#{tmp _85hotwsCta0JfYIjI4Jns _85hotwsCta0JfYIjI4O6u}#
                                                   #{tmp _85hotwsCta0JfYIjI4Jnr _85hotwsCta0JfYIjI4O6v}#
                                                   #{tmp _85hotwsCta0JfYIjI4Jnq _85hotwsCta0JfYIjI4O6w}#)
                                            (cons #{tmp _85hotwsCta0JfYIjI4Jnq _85hotwsCta0JfYIjI4O6w}#
                                                  (cons #{tmp _85hotwsCta0JfYIjI4Jnr _85hotwsCta0JfYIjI4O6v}#
                                                        #{tmp _85hotwsCta0JfYIjI4Jns _85hotwsCta0JfYIjI4O6u}#)))
                                          #{e2* _85hotwsCta0JfYIjI4O5l}#
                                          #{e1* _85hotwsCta0JfYIjI4O5k}#
                                          #{args* _85hotwsCta0JfYIjI4O5j}#)))
                                 (lambda (#{meta* _85hotwsCta0JfYIjI4O6x}#
                                          #{else* _85hotwsCta0JfYIjI4O6y}#)
                                   (values
                                     (append
                                       #{meta _85hotwsCta0JfYIjI4O6m}#
                                       #{meta* _85hotwsCta0JfYIjI4O6x}#)
                                     (make-struct/no-tail
                                       (vector-ref %expanded-vtables 14)
                                       #{s _85hotwsCta0JfYIjI4O5P}#
                                       #{req _85hotwsCta0JfYIjI4O6n}#
                                       #{opt _85hotwsCta0JfYIjI4O6o}#
                                       #{rest _85hotwsCta0JfYIjI4O6p}#
                                       #{kw _85hotwsCta0JfYIjI4O6q}#
                                       #{inits _85hotwsCta0JfYIjI4O6r}#
                                       #{vars _85hotwsCta0JfYIjI4O6s}#
                                       #{body _85hotwsCta0JfYIjI4O6t}#
                                       #{else* _85hotwsCta0JfYIjI4O6y}#)))))))))
                     #{tmp _85hotwsCta0JfYIjI4O5c}#)
                   (syntax-violation
                     #f
                     "source expression failed to match any pattern"
                     #{clauses _85hotwsCta0JfYIjI4O5S}#))))))))
     (#{strip _85hotwsCta0JfYIjI4J4Y}#
       (lambda (#{x _85hotwsCta0JfYIjI4PKA}#
                #{w _85hotwsCta0JfYIjI4PKB}#)
         (if (memq 'top (car #{w _85hotwsCta0JfYIjI4PKB}#))
           #{x _85hotwsCta0JfYIjI4PKA}#
           (letrec*
             ((#{f _85hotwsCta0JfYIjI4PKC}#
                (lambda (#{x _85hotwsCta0JfYIjI4PKF}#)
                  (if (if (vector? #{x _85hotwsCta0JfYIjI4PKF}#)
                        (if (= (vector-length #{x _85hotwsCta0JfYIjI4PKF}#)
                               4)
                          (eq? (vector-ref #{x _85hotwsCta0JfYIjI4PKF}# 0)
                               'syntax-object)
                          #f)
                        #f)
                    (#{strip _85hotwsCta0JfYIjI4J4Y}#
                      (vector-ref #{x _85hotwsCta0JfYIjI4PKF}# 1)
                      (vector-ref #{x _85hotwsCta0JfYIjI4PKF}# 2))
                    (if (pair? #{x _85hotwsCta0JfYIjI4PKF}#)
                      (let ((#{a _85hotwsCta0JfYIjI4PKY}#
                              (#{f _85hotwsCta0JfYIjI4PKC}#
                                (car #{x _85hotwsCta0JfYIjI4PKF}#)))
                            (#{d _85hotwsCta0JfYIjI4PKZ}#
                              (#{f _85hotwsCta0JfYIjI4PKC}#
                                (cdr #{x _85hotwsCta0JfYIjI4PKF}#))))
                        (if (if (eq? #{a _85hotwsCta0JfYIjI4PKY}#
                                     (car #{x _85hotwsCta0JfYIjI4PKF}#))
                              (eq? #{d _85hotwsCta0JfYIjI4PKZ}#
                                   (cdr #{x _85hotwsCta0JfYIjI4PKF}#))
                              #f)
                          #{x _85hotwsCta0JfYIjI4PKF}#
                          (cons #{a _85hotwsCta0JfYIjI4PKY}#
                                #{d _85hotwsCta0JfYIjI4PKZ}#)))
                      (if (vector? #{x _85hotwsCta0JfYIjI4PKF}#)
                        (let ((#{old _85hotwsCta0JfYIjI4PKc}#
                                (vector->list #{x _85hotwsCta0JfYIjI4PKF}#)))
                          (let ((#{new _85hotwsCta0JfYIjI4PKd}#
                                  (map #{f _85hotwsCta0JfYIjI4PKC}#
                                       #{old _85hotwsCta0JfYIjI4PKc}#)))
                            (letrec*
                              ((#{lp _85hotwsCta0JfYIjI4PKe}#
                                 (lambda (#{l1 _85hotwsCta0JfYIjI4PLq}#
                                          #{l2 _85hotwsCta0JfYIjI4PLr}#)
                                   (if (null? #{l1 _85hotwsCta0JfYIjI4PLq}#)
                                     #{x _85hotwsCta0JfYIjI4PKF}#
                                     (if (eq? (car #{l1 _85hotwsCta0JfYIjI4PLq}#)
                                              (car #{l2 _85hotwsCta0JfYIjI4PLr}#))
                                       (#{lp _85hotwsCta0JfYIjI4PKe}#
                                         (cdr #{l1 _85hotwsCta0JfYIjI4PLq}#)
                                         (cdr #{l2 _85hotwsCta0JfYIjI4PLr}#))
                                       (list->vector
                                         #{new _85hotwsCta0JfYIjI4PKd}#))))))
                              (#{lp _85hotwsCta0JfYIjI4PKe}#
                                #{old _85hotwsCta0JfYIjI4PKc}#
                                #{new _85hotwsCta0JfYIjI4PKd}#))))
                        #{x _85hotwsCta0JfYIjI4PKF}#))))))
             (#{f _85hotwsCta0JfYIjI4PKC}#
               #{x _85hotwsCta0JfYIjI4PKA}#)))))
     (#{gen-var _85hotwsCta0JfYIjI4J4Z}#
       (lambda (#{id _85hotwsCta0JfYIjI4O7e}#)
         (let ((#{id _85hotwsCta0JfYIjI4O7f}#
                 (if (if (vector? #{id _85hotwsCta0JfYIjI4O7e}#)
                       (if (= (vector-length #{id _85hotwsCta0JfYIjI4O7e}#)
                              4)
                         (eq? (vector-ref #{id _85hotwsCta0JfYIjI4O7e}# 0)
                              'syntax-object)
                         #f)
                       #f)
                   (vector-ref #{id _85hotwsCta0JfYIjI4O7e}# 1)
                   #{id _85hotwsCta0JfYIjI4O7e}#)))
           (gensym
             (string-append
               (symbol->string #{id _85hotwsCta0JfYIjI4O7f}#)
               " "))))))
    (begin
      (set! #{gen-label _85hotwsCta0JfYIjI4J3p}#
        (let ((#{i _85hotwsCta0JfYIjI4MoZ}# 0))
          (lambda ()
            (let ((#{n _85hotwsCta0JfYIjI4Moa}#
                    #{i _85hotwsCta0JfYIjI4MoZ}#))
              (begin
                (set! #{i _85hotwsCta0JfYIjI4MoZ}#
                  (#{1+}# #{n _85hotwsCta0JfYIjI4Moa}#))
                (number->string #{n _85hotwsCta0JfYIjI4Moa}# 36))))))
      (set! #{transformer-environment _85hotwsCta0JfYIjI4J39}#
        (make-fluid
          (lambda (#{k _85hotwsCta0JfYIjI4MNY}#)
            (error "called outside the dynamic extent of a syntax transformer"))))
      (module-define!
        (current-module)
        'letrec-syntax
        (make-syntax-transformer
          'letrec-syntax
          'local-syntax
          #t))
      (module-define!
        (current-module)
        'let-syntax
        (make-syntax-transformer
          'let-syntax
          'local-syntax
          #f))
      (#{global-extend _85hotwsCta0JfYIjI4J3l}#
        'core
        'syntax-parameterize
        (lambda (#{e _85hotwsCta0JfYIjI4J6S}#
                 #{r _85hotwsCta0JfYIjI4J6T}#
                 #{w _85hotwsCta0JfYIjI4J6U}#
                 #{s _85hotwsCta0JfYIjI4J6V}#
                 #{mod _85hotwsCta0JfYIjI4J6W}#)
          (let ((#{tmp _85hotwsCta0JfYIjI4J6Y}#
                  ($sc-dispatch
                    #{e _85hotwsCta0JfYIjI4J6S}#
                    '(_ #(each (any any)) any . each-any))))
            (if (if #{tmp _85hotwsCta0JfYIjI4J6Y}#
                  (@apply
                    (lambda (#{var _85hotwsCta0JfYIjI4J6c}#
                             #{val _85hotwsCta0JfYIjI4J6d}#
                             #{e1 _85hotwsCta0JfYIjI4J6e}#
                             #{e2 _85hotwsCta0JfYIjI4J6f}#)
                      (#{valid-bound-ids? _85hotwsCta0JfYIjI4J4B}#
                        #{var _85hotwsCta0JfYIjI4J6c}#))
                    #{tmp _85hotwsCta0JfYIjI4J6Y}#)
                  #f)
              (@apply
                (lambda (#{var _85hotwsCta0JfYIjI4J7t}#
                         #{val _85hotwsCta0JfYIjI4J7u}#
                         #{e1 _85hotwsCta0JfYIjI4J7v}#
                         #{e2 _85hotwsCta0JfYIjI4J7w}#)
                  (let ((#{names _85hotwsCta0JfYIjI4J7x}#
                          (map (lambda (#{x _85hotwsCta0JfYIjI4J8j}#)
                                 (#{id-var-name _85hotwsCta0JfYIjI4J36}#
                                   #{x _85hotwsCta0JfYIjI4J8j}#
                                   #{w _85hotwsCta0JfYIjI4J6U}#))
                               #{var _85hotwsCta0JfYIjI4J7t}#)))
                    (begin
                      (for-each
                        (lambda (#{id _85hotwsCta0JfYIjI4J7y}#
                                 #{n _85hotwsCta0JfYIjI4J7z}#)
                          (let ((#{atom-key _85hotwsCta0JfYIjI4J70}#
                                  (car (let ((#{t _85hotwsCta0JfYIjI4J77}#
                                               (assq #{n _85hotwsCta0JfYIjI4J7z}#
                                                     #{r _85hotwsCta0JfYIjI4J6T}#)))
                                         (if #{t _85hotwsCta0JfYIjI4J77}#
                                           (cdr #{t _85hotwsCta0JfYIjI4J77}#)
                                           (if (symbol?
                                                 #{n _85hotwsCta0JfYIjI4J7z}#)
                                             (let ((#{t _85hotwsCta0JfYIjI4J8A}#
                                                     (#{get-global-definition-hook _85hotwsCta0JfYIjI4J3C}#
                                                       #{n _85hotwsCta0JfYIjI4J7z}#
                                                       #{mod _85hotwsCta0JfYIjI4J6W}#)))
                                               (if #{t _85hotwsCta0JfYIjI4J8A}#
                                                 #{t _85hotwsCta0JfYIjI4J8A}#
                                                 '(global)))
                                             '(displaced-lexical)))))))
                            (if (eqv? #{atom-key _85hotwsCta0JfYIjI4J70}#
                                      'displaced-lexical)
                              (syntax-violation
                                'syntax-parameterize
                                "identifier out of context"
                                #{e _85hotwsCta0JfYIjI4J6S}#
                                (#{wrap _85hotwsCta0JfYIjI4J4E}#
                                  (begin
                                    (if (if (pair? #{id _85hotwsCta0JfYIjI4J7y}#)
                                          #{s _85hotwsCta0JfYIjI4J6V}#
                                          #f)
                                      (set-source-properties!
                                        #{id _85hotwsCta0JfYIjI4J7y}#
                                        #{s _85hotwsCta0JfYIjI4J6V}#))
                                    #{id _85hotwsCta0JfYIjI4J7y}#)
                                  #{w _85hotwsCta0JfYIjI4J6U}#
                                  #{mod _85hotwsCta0JfYIjI4J6W}#)))))
                        #{var _85hotwsCta0JfYIjI4J7t}#
                        #{names _85hotwsCta0JfYIjI4J7x}#)
                      (#{expand-body _85hotwsCta0JfYIjI4J4P}#
                        (cons #{e1 _85hotwsCta0JfYIjI4J7v}#
                              #{e2 _85hotwsCta0JfYIjI4J7w}#)
                        (#{wrap _85hotwsCta0JfYIjI4J4E}#
                          (begin
                            (if (if (pair? #{e _85hotwsCta0JfYIjI4J6S}#)
                                  #{s _85hotwsCta0JfYIjI4J6V}#
                                  #f)
                              (set-source-properties!
                                #{e _85hotwsCta0JfYIjI4J6S}#
                                #{s _85hotwsCta0JfYIjI4J6V}#))
                            #{e _85hotwsCta0JfYIjI4J6S}#)
                          #{w _85hotwsCta0JfYIjI4J6U}#
                          #{mod _85hotwsCta0JfYIjI4J6W}#)
                        (#{extend-env _85hotwsCta0JfYIjI4J3h}#
                          #{names _85hotwsCta0JfYIjI4J7x}#
                          (let ((#{trans-r _85hotwsCta0JfYIjI4J95}#
                                  (#{macros-only-env _85hotwsCta0JfYIjI4J3j}#
                                    #{r _85hotwsCta0JfYIjI4J6T}#)))
                            (map (lambda (#{x _85hotwsCta0JfYIjI4J96}#)
                                   (cons 'macro
                                         (#{eval-local-transformer _85hotwsCta0JfYIjI4J4R}#
                                           (#{expand _85hotwsCta0JfYIjI4J4L}#
                                             #{x _85hotwsCta0JfYIjI4J96}#
                                             #{trans-r _85hotwsCta0JfYIjI4J95}#
                                             #{w _85hotwsCta0JfYIjI4J6U}#
                                             #{mod _85hotwsCta0JfYIjI4J6W}#)
                                           #{mod _85hotwsCta0JfYIjI4J6W}#)))
                                 #{val _85hotwsCta0JfYIjI4J7u}#))
                          #{r _85hotwsCta0JfYIjI4J6T}#)
                        #{w _85hotwsCta0JfYIjI4J6U}#
                        #{mod _85hotwsCta0JfYIjI4J6W}#))))
                #{tmp _85hotwsCta0JfYIjI4J6Y}#)
              (syntax-violation
                'syntax-parameterize
                "bad syntax"
                (#{wrap _85hotwsCta0JfYIjI4J4E}#
                  (begin
                    (if (if (pair? #{e _85hotwsCta0JfYIjI4J6S}#)
                          #{s _85hotwsCta0JfYIjI4J6V}#
                          #f)
                      (set-source-properties!
                        #{e _85hotwsCta0JfYIjI4J6S}#
                        #{s _85hotwsCta0JfYIjI4J6V}#))
                    #{e _85hotwsCta0JfYIjI4J6S}#)
                  #{w _85hotwsCta0JfYIjI4J6U}#
                  #{mod _85hotwsCta0JfYIjI4J6W}#))))))
      (module-define!
        (current-module)
        'quote
        (make-syntax-transformer
          'quote
          'core
          (lambda (#{e _85hotwsCta0JfYIjI4KBL}#
                   #{r _85hotwsCta0JfYIjI4KBM}#
                   #{w _85hotwsCta0JfYIjI4KBN}#
                   #{s _85hotwsCta0JfYIjI4KBO}#
                   #{mod _85hotwsCta0JfYIjI4KBP}#)
            (let ((#{tmp _85hotwsCta0JfYIjI4KBR}#
                    ($sc-dispatch
                      #{e _85hotwsCta0JfYIjI4KBL}#
                      '(_ any))))
              (if #{tmp _85hotwsCta0JfYIjI4KBR}#
                (@apply
                  (lambda (#{e _85hotwsCta0JfYIjI4KBU}#)
                    (let ((#{exp _85hotwsCta0JfYIjI4KBY}#
                            (#{strip _85hotwsCta0JfYIjI4J4Y}#
                              #{e _85hotwsCta0JfYIjI4KBU}#
                              #{w _85hotwsCta0JfYIjI4KBN}#)))
                      (make-struct/no-tail
                        (vector-ref %expanded-vtables 1)
                        #{s _85hotwsCta0JfYIjI4KBO}#
                        #{exp _85hotwsCta0JfYIjI4KBY}#)))
                  #{tmp _85hotwsCta0JfYIjI4KBR}#)
                (syntax-violation
                  'quote
                  "bad syntax"
                  (#{wrap _85hotwsCta0JfYIjI4J4E}#
                    (begin
                      (if (if (pair? #{e _85hotwsCta0JfYIjI4KBL}#)
                            #{s _85hotwsCta0JfYIjI4KBO}#
                            #f)
                        (set-source-properties!
                          #{e _85hotwsCta0JfYIjI4KBL}#
                          #{s _85hotwsCta0JfYIjI4KBO}#))
                      #{e _85hotwsCta0JfYIjI4KBL}#)
                    #{w _85hotwsCta0JfYIjI4KBN}#
                    #{mod _85hotwsCta0JfYIjI4KBP}#)))))))
      (#{global-extend _85hotwsCta0JfYIjI4J3l}#
        'core
        'syntax
        (letrec*
          ((#{gen-syntax _85hotwsCta0JfYIjI4KE0}#
             (lambda (#{src _85hotwsCta0JfYIjI4KGa}#
                      #{e _85hotwsCta0JfYIjI4KGb}#
                      #{r _85hotwsCta0JfYIjI4KGc}#
                      #{maps _85hotwsCta0JfYIjI4KGd}#
                      #{ellipsis? _85hotwsCta0JfYIjI4KGe}#
                      #{mod _85hotwsCta0JfYIjI4KGf}#)
               (if (if (symbol? #{e _85hotwsCta0JfYIjI4KGb}#)
                     #t
                     (if (if (vector? #{e _85hotwsCta0JfYIjI4KGb}#)
                           (if (= (vector-length #{e _85hotwsCta0JfYIjI4KGb}#)
                                  4)
                             (eq? (vector-ref #{e _85hotwsCta0JfYIjI4KGb}# 0)
                                  'syntax-object)
                             #f)
                           #f)
                       (symbol?
                         (vector-ref #{e _85hotwsCta0JfYIjI4KGb}# 1))
                       #f))
                 (let ((#{label _85hotwsCta0JfYIjI4KG6}#
                         (#{id-var-name _85hotwsCta0JfYIjI4J36}#
                           #{e _85hotwsCta0JfYIjI4KGb}#
                           '(()))))
                   (let ((#{b _85hotwsCta0JfYIjI4KG7}#
                           (let ((#{t _85hotwsCta0JfYIjI4KHC}#
                                   (assq #{label _85hotwsCta0JfYIjI4KG6}#
                                         #{r _85hotwsCta0JfYIjI4KGc}#)))
                             (if #{t _85hotwsCta0JfYIjI4KHC}#
                               (cdr #{t _85hotwsCta0JfYIjI4KHC}#)
                               (if (symbol? #{label _85hotwsCta0JfYIjI4KG6}#)
                                 (let ((#{t _85hotwsCta0JfYIjI4KHI}#
                                         (#{get-global-definition-hook _85hotwsCta0JfYIjI4J3C}#
                                           #{label _85hotwsCta0JfYIjI4KG6}#
                                           #{mod _85hotwsCta0JfYIjI4KGf}#)))
                                   (if #{t _85hotwsCta0JfYIjI4KHI}#
                                     #{t _85hotwsCta0JfYIjI4KHI}#
                                     '(global)))
                                 '(displaced-lexical))))))
                     (if (eq? (car #{b _85hotwsCta0JfYIjI4KG7}#) 'syntax)
                       (call-with-values
                         (lambda ()
                           (let ((#{var.lev _85hotwsCta0JfYIjI4KHR}#
                                   (cdr #{b _85hotwsCta0JfYIjI4KG7}#)))
                             (#{gen-ref _85hotwsCta0JfYIjI4KE1}#
                               #{src _85hotwsCta0JfYIjI4KGa}#
                               (car #{var.lev _85hotwsCta0JfYIjI4KHR}#)
                               (cdr #{var.lev _85hotwsCta0JfYIjI4KHR}#)
                               #{maps _85hotwsCta0JfYIjI4KGd}#)))
                         (lambda (#{var _85hotwsCta0JfYIjI4KHV}#
                                  #{maps _85hotwsCta0JfYIjI4KHW}#)
                           (values
                             (list 'ref #{var _85hotwsCta0JfYIjI4KHV}#)
                             #{maps _85hotwsCta0JfYIjI4KHW}#)))
                       (if (#{ellipsis? _85hotwsCta0JfYIjI4KGe}#
                             #{e _85hotwsCta0JfYIjI4KGb}#)
                         (syntax-violation
                           'syntax
                           "misplaced ellipsis"
                           #{src _85hotwsCta0JfYIjI4KGa}#)
                         (values
                           (list 'quote #{e _85hotwsCta0JfYIjI4KGb}#)
                           #{maps _85hotwsCta0JfYIjI4KGd}#)))))
                 (let ((#{tmp _85hotwsCta0JfYIjI4KHY}#
                         ($sc-dispatch
                           #{e _85hotwsCta0JfYIjI4KGb}#
                           '(any any))))
                   (if (if #{tmp _85hotwsCta0JfYIjI4KHY}#
                         (@apply
                           (lambda (#{dots _85hotwsCta0JfYIjI4KHc}#
                                    #{e _85hotwsCta0JfYIjI4KHd}#)
                             (#{ellipsis? _85hotwsCta0JfYIjI4KGe}#
                               #{dots _85hotwsCta0JfYIjI4KHc}#))
                           #{tmp _85hotwsCta0JfYIjI4KHY}#)
                         #f)
                     (@apply
                       (lambda (#{dots _85hotwsCta0JfYIjI4KHe}#
                                #{e _85hotwsCta0JfYIjI4KHf}#)
                         (#{gen-syntax _85hotwsCta0JfYIjI4KE0}#
                           #{src _85hotwsCta0JfYIjI4KGa}#
                           #{e _85hotwsCta0JfYIjI4KHf}#
                           #{r _85hotwsCta0JfYIjI4KGc}#
                           #{maps _85hotwsCta0JfYIjI4KGd}#
                           (lambda (#{x _85hotwsCta0JfYIjI4KHg}#) #f)
                           #{mod _85hotwsCta0JfYIjI4KGf}#))
                       #{tmp _85hotwsCta0JfYIjI4KHY}#)
                     (let ((#{tmp _85hotwsCta0JfYIjI4KHh}#
                             ($sc-dispatch
                               #{e _85hotwsCta0JfYIjI4KGb}#
                               '(any any . any))))
                       (if (if #{tmp _85hotwsCta0JfYIjI4KHh}#
                             (@apply
                               (lambda (#{x _85hotwsCta0JfYIjI4KHl}#
                                        #{dots _85hotwsCta0JfYIjI4KHm}#
                                        #{y _85hotwsCta0JfYIjI4KHn}#)
                                 (#{ellipsis? _85hotwsCta0JfYIjI4KGe}#
                                   #{dots _85hotwsCta0JfYIjI4KHm}#))
                               #{tmp _85hotwsCta0JfYIjI4KHh}#)
                             #f)
                         (@apply
                           (lambda (#{x _85hotwsCta0JfYIjI4KHo}#
                                    #{dots _85hotwsCta0JfYIjI4KHp}#
                                    #{y _85hotwsCta0JfYIjI4KHq}#)
                             (letrec*
                               ((#{f _85hotwsCta0JfYIjI4KHr}#
                                  (lambda (#{y _85hotwsCta0JfYIjI4KHz}#
                                           #{k _85hotwsCta0JfYIjI4KH0}#)
                                    (let ((#{tmp _85hotwsCta0JfYIjI4KH2}#
                                            ($sc-dispatch
                                              #{y _85hotwsCta0JfYIjI4KHz}#
                                              '(any . any))))
                                      (if (if #{tmp _85hotwsCta0JfYIjI4KH2}#
                                            (@apply
                                              (lambda (#{dots _85hotwsCta0JfYIjI4KH6}#
                                                       #{y _85hotwsCta0JfYIjI4KH7}#)
                                                (#{ellipsis? _85hotwsCta0JfYIjI4KGe}#
                                                  #{dots _85hotwsCta0JfYIjI4KH6}#))
                                              #{tmp _85hotwsCta0JfYIjI4KH2}#)
                                            #f)
                                        (@apply
                                          (lambda (#{dots _85hotwsCta0JfYIjI4KH8}#
                                                   #{y _85hotwsCta0JfYIjI4KH9}#)
                                            (#{f _85hotwsCta0JfYIjI4KHr}#
                                              #{y _85hotwsCta0JfYIjI4KH9}#
                                              (lambda (#{maps _85hotwsCta0JfYIjI4KH$}#)
                                                (call-with-values
                                                  (lambda ()
                                                    (#{k _85hotwsCta0JfYIjI4KH0}#
                                                      (cons '()
                                                            #{maps _85hotwsCta0JfYIjI4KH$}#)))
                                                  (lambda (#{x _85hotwsCta0JfYIjI4KH@}#
                                                           #{maps _85hotwsCta0JfYIjI4KIA}#)
                                                    (if (null? (car #{maps _85hotwsCta0JfYIjI4KIA}#))
                                                      (syntax-violation
                                                        'syntax
                                                        "extra ellipsis"
                                                        #{src _85hotwsCta0JfYIjI4KGa}#)
                                                      (values
                                                        (let ((#{map-env _85hotwsCta0JfYIjI4KIE}#
                                                                (car #{maps _85hotwsCta0JfYIjI4KIA}#)))
                                                          (list 'apply
                                                                '(primitive
                                                                   append)
                                                                (#{gen-map _85hotwsCta0JfYIjI4KE3}#
                                                                  #{x _85hotwsCta0JfYIjI4KH@}#
                                                                  #{map-env _85hotwsCta0JfYIjI4KIE}#)))
                                                        (cdr #{maps _85hotwsCta0JfYIjI4KIA}#))))))))
                                          #{tmp _85hotwsCta0JfYIjI4KH2}#)
                                        (call-with-values
                                          (lambda ()
                                            (#{gen-syntax _85hotwsCta0JfYIjI4KE0}#
                                              #{src _85hotwsCta0JfYIjI4KGa}#
                                              #{y _85hotwsCta0JfYIjI4KHz}#
                                              #{r _85hotwsCta0JfYIjI4KGc}#
                                              #{maps _85hotwsCta0JfYIjI4KGd}#
                                              #{ellipsis? _85hotwsCta0JfYIjI4KGe}#
                                              #{mod _85hotwsCta0JfYIjI4KGf}#))
                                          (lambda (#{y _85hotwsCta0JfYIjI4KIH}#
                                                   #{maps _85hotwsCta0JfYIjI4KII}#)
                                            (call-with-values
                                              (lambda ()
                                                (#{k _85hotwsCta0JfYIjI4KH0}#
                                                  #{maps _85hotwsCta0JfYIjI4KII}#))
                                              (lambda (#{x _85hotwsCta0JfYIjI4KIJ}#
                                                       #{maps _85hotwsCta0JfYIjI4KIK}#)
                                                (values
                                                  (if (equal?
                                                        #{y _85hotwsCta0JfYIjI4KIH}#
                                                        ''())
                                                    #{x _85hotwsCta0JfYIjI4KIJ}#
                                                    (list 'append
                                                          #{x _85hotwsCta0JfYIjI4KIJ}#
                                                          #{y _85hotwsCta0JfYIjI4KIH}#))
                                                  #{maps _85hotwsCta0JfYIjI4KIK}#))))))))))
                               (#{f _85hotwsCta0JfYIjI4KHr}#
                                 #{y _85hotwsCta0JfYIjI4KHq}#
                                 (lambda (#{maps _85hotwsCta0JfYIjI4KHu}#)
                                   (call-with-values
                                     (lambda ()
                                       (#{gen-syntax _85hotwsCta0JfYIjI4KE0}#
                                         #{src _85hotwsCta0JfYIjI4KGa}#
                                         #{x _85hotwsCta0JfYIjI4KHo}#
                                         #{r _85hotwsCta0JfYIjI4KGc}#
                                         (cons '()
                                               #{maps _85hotwsCta0JfYIjI4KHu}#)
                                         #{ellipsis? _85hotwsCta0JfYIjI4KGe}#
                                         #{mod _85hotwsCta0JfYIjI4KGf}#))
                                     (lambda (#{x _85hotwsCta0JfYIjI4KHv}#
                                              #{maps _85hotwsCta0JfYIjI4KHw}#)
                                       (if (null? (car #{maps _85hotwsCta0JfYIjI4KHw}#))
                                         (syntax-violation
                                           'syntax
                                           "extra ellipsis"
                                           #{src _85hotwsCta0JfYIjI4KGa}#)
                                         (values
                                           (#{gen-map _85hotwsCta0JfYIjI4KE3}#
                                             #{x _85hotwsCta0JfYIjI4KHv}#
                                             (car #{maps _85hotwsCta0JfYIjI4KHw}#))
                                           (cdr #{maps _85hotwsCta0JfYIjI4KHw}#)))))))))
                           #{tmp _85hotwsCta0JfYIjI4KHh}#)
                         (let ((#{tmp _85hotwsCta0JfYIjI4KIa}#
                                 ($sc-dispatch
                                   #{e _85hotwsCta0JfYIjI4KGb}#
                                   '(any . any))))
                           (if #{tmp _85hotwsCta0JfYIjI4KIa}#
                             (@apply
                               (lambda (#{x _85hotwsCta0JfYIjI4KIe}#
                                        #{y _85hotwsCta0JfYIjI4KIf}#)
                                 (call-with-values
                                   (lambda ()
                                     (#{gen-syntax _85hotwsCta0JfYIjI4KE0}#
                                       #{src _85hotwsCta0JfYIjI4KGa}#
                                       #{x _85hotwsCta0JfYIjI4KIe}#
                                       #{r _85hotwsCta0JfYIjI4KGc}#
                                       #{maps _85hotwsCta0JfYIjI4KGd}#
                                       #{ellipsis? _85hotwsCta0JfYIjI4KGe}#
                                       #{mod _85hotwsCta0JfYIjI4KGf}#))
                                   (lambda (#{x _85hotwsCta0JfYIjI4KIg}#
                                            #{maps _85hotwsCta0JfYIjI4KIh}#)
                                     (call-with-values
                                       (lambda ()
                                         (#{gen-syntax _85hotwsCta0JfYIjI4KE0}#
                                           #{src _85hotwsCta0JfYIjI4KGa}#
                                           #{y _85hotwsCta0JfYIjI4KIf}#
                                           #{r _85hotwsCta0JfYIjI4KGc}#
                                           #{maps _85hotwsCta0JfYIjI4KIh}#
                                           #{ellipsis? _85hotwsCta0JfYIjI4KGe}#
                                           #{mod _85hotwsCta0JfYIjI4KGf}#))
                                       (lambda (#{y _85hotwsCta0JfYIjI4KIi}#
                                                #{maps _85hotwsCta0JfYIjI4KIj}#)
                                         (values
                                           (let ((#{atom-key _85hotwsCta0JfYIjI4KIo}#
                                                   (car #{y _85hotwsCta0JfYIjI4KIi}#)))
                                             (if (eqv? #{atom-key _85hotwsCta0JfYIjI4KIo}#
                                                       'quote)
                                               (if (eq? (car #{x _85hotwsCta0JfYIjI4KIg}#)
                                                        'quote)
                                                 (list 'quote
                                                       (cons (car (cdr #{x _85hotwsCta0JfYIjI4KIg}#))
                                                             (car (cdr #{y _85hotwsCta0JfYIjI4KIi}#))))
                                                 (if (eq? (car (cdr #{y _85hotwsCta0JfYIjI4KIi}#))
                                                          '())
                                                   (list 'list
                                                         #{x _85hotwsCta0JfYIjI4KIg}#)
                                                   (list 'cons
                                                         #{x _85hotwsCta0JfYIjI4KIg}#
                                                         #{y _85hotwsCta0JfYIjI4KIi}#)))
                                               (if (eqv? #{atom-key _85hotwsCta0JfYIjI4KIo}#
                                                         'list)
                                                 (cons 'list
                                                       (cons #{x _85hotwsCta0JfYIjI4KIg}#
                                                             (cdr #{y _85hotwsCta0JfYIjI4KIi}#)))
                                                 (list 'cons
                                                       #{x _85hotwsCta0JfYIjI4KIg}#
                                                       #{y _85hotwsCta0JfYIjI4KIi}#))))
                                           #{maps _85hotwsCta0JfYIjI4KIj}#))))))
                               #{tmp _85hotwsCta0JfYIjI4KIa}#)
                             (let ((#{tmp _85hotwsCta0JfYIjI4KJF}#
                                     ($sc-dispatch
                                       #{e _85hotwsCta0JfYIjI4KGb}#
                                       '#(vector (any . each-any)))))
                               (if #{tmp _85hotwsCta0JfYIjI4KJF}#
                                 (@apply
                                   (lambda (#{e1 _85hotwsCta0JfYIjI4KJJ}#
                                            #{e2 _85hotwsCta0JfYIjI4KJK}#)
                                     (call-with-values
                                       (lambda ()
                                         (#{gen-syntax _85hotwsCta0JfYIjI4KE0}#
                                           #{src _85hotwsCta0JfYIjI4KGa}#
                                           (cons #{e1 _85hotwsCta0JfYIjI4KJJ}#
                                                 #{e2 _85hotwsCta0JfYIjI4KJK}#)
                                           #{r _85hotwsCta0JfYIjI4KGc}#
                                           #{maps _85hotwsCta0JfYIjI4KGd}#
                                           #{ellipsis? _85hotwsCta0JfYIjI4KGe}#
                                           #{mod _85hotwsCta0JfYIjI4KGf}#))
                                       (lambda (#{e _85hotwsCta0JfYIjI4KJL}#
                                                #{maps _85hotwsCta0JfYIjI4KJM}#)
                                         (values
                                           (if (eq? (car #{e _85hotwsCta0JfYIjI4KJL}#)
                                                    'list)
                                             (cons 'vector
                                                   (cdr #{e _85hotwsCta0JfYIjI4KJL}#))
                                             (if (eq? (car #{e _85hotwsCta0JfYIjI4KJL}#)
                                                      'quote)
                                               (list 'quote
                                                     (list->vector
                                                       (car (cdr #{e _85hotwsCta0JfYIjI4KJL}#))))
                                               (list 'list->vector
                                                     #{e _85hotwsCta0JfYIjI4KJL}#)))
                                           #{maps _85hotwsCta0JfYIjI4KJM}#))))
                                   #{tmp _85hotwsCta0JfYIjI4KJF}#)
                                 (values
                                   (list 'quote #{e _85hotwsCta0JfYIjI4KGb}#)
                                   #{maps _85hotwsCta0JfYIjI4KGd}#))))))))))))
           (#{gen-ref _85hotwsCta0JfYIjI4KE1}#
             (lambda (#{src _85hotwsCta0JfYIjI4KJn}#
                      #{var _85hotwsCta0JfYIjI4KJo}#
                      #{level _85hotwsCta0JfYIjI4KJp}#
                      #{maps _85hotwsCta0JfYIjI4KJq}#)
               (if (= #{level _85hotwsCta0JfYIjI4KJp}# 0)
                 (values
                   #{var _85hotwsCta0JfYIjI4KJo}#
                   #{maps _85hotwsCta0JfYIjI4KJq}#)
                 (if (null? #{maps _85hotwsCta0JfYIjI4KJq}#)
                   (syntax-violation
                     'syntax
                     "missing ellipsis"
                     #{src _85hotwsCta0JfYIjI4KJn}#)
                   (call-with-values
                     (lambda ()
                       (#{gen-ref _85hotwsCta0JfYIjI4KE1}#
                         #{src _85hotwsCta0JfYIjI4KJn}#
                         #{var _85hotwsCta0JfYIjI4KJo}#
                         (#{1-}# #{level _85hotwsCta0JfYIjI4KJp}#)
                         (cdr #{maps _85hotwsCta0JfYIjI4KJq}#)))
                     (lambda (#{outer-var _85hotwsCta0JfYIjI4KJr}#
                              #{outer-maps _85hotwsCta0JfYIjI4KJs}#)
                       (let ((#{b _85hotwsCta0JfYIjI4KJt}#
                               (assq #{outer-var _85hotwsCta0JfYIjI4KJr}#
                                     (car #{maps _85hotwsCta0JfYIjI4KJq}#))))
                         (if #{b _85hotwsCta0JfYIjI4KJt}#
                           (values
                             (cdr #{b _85hotwsCta0JfYIjI4KJt}#)
                             #{maps _85hotwsCta0JfYIjI4KJq}#)
                           (let ((#{inner-var _85hotwsCta0JfYIjI4KJv}#
                                   (gensym
                                     (string-append
                                       (symbol->string 'tmp)
                                       " "))))
                             (values
                               #{inner-var _85hotwsCta0JfYIjI4KJv}#
                               (cons (cons (cons #{outer-var _85hotwsCta0JfYIjI4KJr}#
                                                 #{inner-var _85hotwsCta0JfYIjI4KJv}#)
                                           (car #{maps _85hotwsCta0JfYIjI4KJq}#))
                                     #{outer-maps _85hotwsCta0JfYIjI4KJs}#)))))))))))
           (#{gen-map _85hotwsCta0JfYIjI4KE3}#
             (lambda (#{e _85hotwsCta0JfYIjI4KJ9}#
                      #{map-env _85hotwsCta0JfYIjI4KJ$}#)
               (let ((#{formals _85hotwsCta0JfYIjI4KJ@}#
                       (map cdr #{map-env _85hotwsCta0JfYIjI4KJ$}#))
                     (#{actuals _85hotwsCta0JfYIjI4KKA}#
                       (map (lambda (#{x _85hotwsCta0JfYIjI4KKC}#)
                              (list 'ref (car #{x _85hotwsCta0JfYIjI4KKC}#)))
                            #{map-env _85hotwsCta0JfYIjI4KJ$}#)))
                 (if (eq? (car #{e _85hotwsCta0JfYIjI4KJ9}#) 'ref)
                   (car #{actuals _85hotwsCta0JfYIjI4KKA}#)
                   (if (and-map
                         (lambda (#{x _85hotwsCta0JfYIjI4KKD}#)
                           (if (eq? (car #{x _85hotwsCta0JfYIjI4KKD}#) 'ref)
                             (memq (car (cdr #{x _85hotwsCta0JfYIjI4KKD}#))
                                   #{formals _85hotwsCta0JfYIjI4KJ@}#)
                             #f))
                         (cdr #{e _85hotwsCta0JfYIjI4KJ9}#))
                     (cons 'map
                           (cons (list 'primitive
                                       (car #{e _85hotwsCta0JfYIjI4KJ9}#))
                                 (map (let ((#{r _85hotwsCta0JfYIjI4KKF}#
                                              (map cons
                                                   #{formals _85hotwsCta0JfYIjI4KJ@}#
                                                   #{actuals _85hotwsCta0JfYIjI4KKA}#)))
                                        (lambda (#{x _85hotwsCta0JfYIjI4KKG}#)
                                          (cdr (assq (car (cdr #{x _85hotwsCta0JfYIjI4KKG}#))
                                                     #{r _85hotwsCta0JfYIjI4KKF}#))))
                                      (cdr #{e _85hotwsCta0JfYIjI4KJ9}#))))
                     (cons 'map
                           (cons (list 'lambda
                                       #{formals _85hotwsCta0JfYIjI4KJ@}#
                                       #{e _85hotwsCta0JfYIjI4KJ9}#)
                                 #{actuals _85hotwsCta0JfYIjI4KKA}#)))))))
           (#{regen _85hotwsCta0JfYIjI4KE7}#
             (lambda (#{x _85hotwsCta0JfYIjI4KKI}#)
               (let ((#{atom-key _85hotwsCta0JfYIjI4KKJ}#
                       (car #{x _85hotwsCta0JfYIjI4KKI}#)))
                 (if (eqv? #{atom-key _85hotwsCta0JfYIjI4KKJ}# 'ref)
                   (let ((#{name _85hotwsCta0JfYIjI4KKT}#
                           (car (cdr #{x _85hotwsCta0JfYIjI4KKI}#)))
                         (#{var _85hotwsCta0JfYIjI4KKU}#
                           (car (cdr #{x _85hotwsCta0JfYIjI4KKI}#))))
                     (make-struct/no-tail
                       (vector-ref %expanded-vtables 3)
                       #f
                       #{name _85hotwsCta0JfYIjI4KKT}#
                       #{var _85hotwsCta0JfYIjI4KKU}#))
                   (if (eqv? #{atom-key _85hotwsCta0JfYIjI4KKJ}#
                             'primitive)
                     (let ((#{name _85hotwsCta0JfYIjI4KKg}#
                             (car (cdr #{x _85hotwsCta0JfYIjI4KKI}#))))
                       (if (equal? (module-name (current-module)) '(guile))
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 7)
                           #f
                           #{name _85hotwsCta0JfYIjI4KKg}#)
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 5)
                           #f
                           '(guile)
                           #{name _85hotwsCta0JfYIjI4KKg}#
                           #f)))
                     (if (eqv? #{atom-key _85hotwsCta0JfYIjI4KKJ}# 'quote)
                       (let ((#{exp _85hotwsCta0JfYIjI4KKy}#
                               (car (cdr #{x _85hotwsCta0JfYIjI4KKI}#))))
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 1)
                           #f
                           #{exp _85hotwsCta0JfYIjI4KKy}#))
                       (if (eqv? #{atom-key _85hotwsCta0JfYIjI4KKJ}#
                                 'lambda)
                         (if (list? (car (cdr #{x _85hotwsCta0JfYIjI4KKI}#)))
                           (let ((#{req _85hotwsCta0JfYIjI4KK9}#
                                   (car (cdr #{x _85hotwsCta0JfYIjI4KKI}#)))
                                 (#{vars _85hotwsCta0JfYIjI4KK@}#
                                   (car (cdr #{x _85hotwsCta0JfYIjI4KKI}#)))
                                 (#{exp _85hotwsCta0JfYIjI4KLB}#
                                   (#{regen _85hotwsCta0JfYIjI4KE7}#
                                     (car (cdr (cdr #{x _85hotwsCta0JfYIjI4KKI}#))))))
                             (let ((#{body _85hotwsCta0JfYIjI4KLG}#
                                     (make-struct/no-tail
                                       (vector-ref %expanded-vtables 14)
                                       #f
                                       #{req _85hotwsCta0JfYIjI4KK9}#
                                       #f
                                       #f
                                       #f
                                       '()
                                       #{vars _85hotwsCta0JfYIjI4KK@}#
                                       #{exp _85hotwsCta0JfYIjI4KLB}#
                                       #f)))
                               (make-struct/no-tail
                                 (vector-ref %expanded-vtables 13)
                                 #f
                                 '()
                                 #{body _85hotwsCta0JfYIjI4KLG}#)))
                           (error "how did we get here"
                                  #{x _85hotwsCta0JfYIjI4KKI}#))
                         (let ((#{fun-exp _85hotwsCta0JfYIjI4KLW}#
                                 (let ((#{name _85hotwsCta0JfYIjI4KLf}#
                                         (car #{x _85hotwsCta0JfYIjI4KKI}#)))
                                   (if (equal?
                                         (module-name (current-module))
                                         '(guile))
                                     (make-struct/no-tail
                                       (vector-ref %expanded-vtables 7)
                                       #f
                                       #{name _85hotwsCta0JfYIjI4KLf}#)
                                     (make-struct/no-tail
                                       (vector-ref %expanded-vtables 5)
                                       #f
                                       '(guile)
                                       #{name _85hotwsCta0JfYIjI4KLf}#
                                       #f))))
                               (#{arg-exps _85hotwsCta0JfYIjI4KLX}#
                                 (map #{regen _85hotwsCta0JfYIjI4KE7}#
                                      (cdr #{x _85hotwsCta0JfYIjI4KKI}#))))
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 11)
                             #f
                             #{fun-exp _85hotwsCta0JfYIjI4KLW}#
                             #{arg-exps _85hotwsCta0JfYIjI4KLX}#))))))))))
          (lambda (#{e _85hotwsCta0JfYIjI4KE8}#
                   #{r _85hotwsCta0JfYIjI4KE9}#
                   #{w _85hotwsCta0JfYIjI4KE$}#
                   #{s _85hotwsCta0JfYIjI4KE@}#
                   #{mod _85hotwsCta0JfYIjI4KFA}#)
            (let ((#{e _85hotwsCta0JfYIjI4KFB}#
                    (#{wrap _85hotwsCta0JfYIjI4J4E}#
                      (begin
                        (if (if (pair? #{e _85hotwsCta0JfYIjI4KE8}#)
                              #{s _85hotwsCta0JfYIjI4KE@}#
                              #f)
                          (set-source-properties!
                            #{e _85hotwsCta0JfYIjI4KE8}#
                            #{s _85hotwsCta0JfYIjI4KE@}#))
                        #{e _85hotwsCta0JfYIjI4KE8}#)
                      #{w _85hotwsCta0JfYIjI4KE$}#
                      #{mod _85hotwsCta0JfYIjI4KFA}#)))
              (let ((#{tmp _85hotwsCta0JfYIjI4KFD}#
                      ($sc-dispatch
                        #{e _85hotwsCta0JfYIjI4KFB}#
                        '(_ any))))
                (if #{tmp _85hotwsCta0JfYIjI4KFD}#
                  (@apply
                    (lambda (#{x _85hotwsCta0JfYIjI4KFc}#)
                      (call-with-values
                        (lambda ()
                          (#{gen-syntax _85hotwsCta0JfYIjI4KE0}#
                            #{e _85hotwsCta0JfYIjI4KFB}#
                            #{x _85hotwsCta0JfYIjI4KFc}#
                            #{r _85hotwsCta0JfYIjI4KE9}#
                            '()
                            #{ellipsis? _85hotwsCta0JfYIjI4J4T}#
                            #{mod _85hotwsCta0JfYIjI4KFA}#))
                        (lambda (#{e _85hotwsCta0JfYIjI4KGS}#
                                 #{maps _85hotwsCta0JfYIjI4KGT}#)
                          (#{regen _85hotwsCta0JfYIjI4KE7}#
                            #{e _85hotwsCta0JfYIjI4KGS}#))))
                    #{tmp _85hotwsCta0JfYIjI4KFD}#)
                  (syntax-violation
                    'syntax
                    "bad `syntax' form"
                    #{e _85hotwsCta0JfYIjI4KFB}#)))))))
      (#{global-extend _85hotwsCta0JfYIjI4J3l}#
        'core
        'lambda
        (lambda (#{e _85hotwsCta0JfYIjI4KOc}#
                 #{r _85hotwsCta0JfYIjI4KOd}#
                 #{w _85hotwsCta0JfYIjI4KOe}#
                 #{s _85hotwsCta0JfYIjI4KOf}#
                 #{mod _85hotwsCta0JfYIjI4KOg}#)
          (let ((#{tmp _85hotwsCta0JfYIjI4KOi}#
                  ($sc-dispatch
                    #{e _85hotwsCta0JfYIjI4KOc}#
                    '(_ any any . each-any))))
            (if #{tmp _85hotwsCta0JfYIjI4KOi}#
              (@apply
                (lambda (#{args _85hotwsCta0JfYIjI4KOm}#
                         #{e1 _85hotwsCta0JfYIjI4KOn}#
                         #{e2 _85hotwsCta0JfYIjI4KOo}#)
                  (call-with-values
                    (lambda ()
                      (#{lambda-formals _85hotwsCta0JfYIjI4J4U}#
                        #{args _85hotwsCta0JfYIjI4KOm}#))
                    (lambda (#{req _85hotwsCta0JfYIjI4KOr}#
                             #{opt _85hotwsCta0JfYIjI4KOs}#
                             #{rest _85hotwsCta0JfYIjI4KOt}#
                             #{kw _85hotwsCta0JfYIjI4KOu}#)
                      (letrec*
                        ((#{lp _85hotwsCta0JfYIjI4KOv}#
                           (lambda (#{body _85hotwsCta0JfYIjI4KOy}#
                                    #{meta _85hotwsCta0JfYIjI4KOz}#)
                             (let ((#{tmp _85hotwsCta0JfYIjI4KO1}#
                                     ($sc-dispatch
                                       #{body _85hotwsCta0JfYIjI4KOy}#
                                       '(any any . each-any))))
                               (if (if #{tmp _85hotwsCta0JfYIjI4KO1}#
                                     (@apply
                                       (lambda (#{docstring _85hotwsCta0JfYIjI4KO5}#
                                                #{e1 _85hotwsCta0JfYIjI4KO6}#
                                                #{e2 _85hotwsCta0JfYIjI4KO7}#)
                                         (string?
                                           (syntax->datum
                                             #{docstring _85hotwsCta0JfYIjI4KO5}#)))
                                       #{tmp _85hotwsCta0JfYIjI4KO1}#)
                                     #f)
                                 (@apply
                                   (lambda (#{docstring _85hotwsCta0JfYIjI4KO8}#
                                            #{e1 _85hotwsCta0JfYIjI4KO9}#
                                            #{e2 _85hotwsCta0JfYIjI4KO$}#)
                                     (#{lp _85hotwsCta0JfYIjI4KOv}#
                                       (cons #{e1 _85hotwsCta0JfYIjI4KO9}#
                                             #{e2 _85hotwsCta0JfYIjI4KO$}#)
                                       (append
                                         #{meta _85hotwsCta0JfYIjI4KOz}#
                                         (list (cons 'documentation
                                                     (syntax->datum
                                                       #{docstring _85hotwsCta0JfYIjI4KO8}#))))))
                                   #{tmp _85hotwsCta0JfYIjI4KO1}#)
                                 (let ((#{tmp _85hotwsCta0JfYIjI4KO@}#
                                         ($sc-dispatch
                                           #{body _85hotwsCta0JfYIjI4KOy}#
                                           '(#(vector #(each (any . any)))
                                             any
                                             .
                                             each-any))))
                                   (if #{tmp _85hotwsCta0JfYIjI4KO@}#
                                     (@apply
                                       (lambda (#{k _85hotwsCta0JfYIjI4KPD}#
                                                #{v _85hotwsCta0JfYIjI4KPE}#
                                                #{e1 _85hotwsCta0JfYIjI4KPF}#
                                                #{e2 _85hotwsCta0JfYIjI4KPG}#)
                                         (#{lp _85hotwsCta0JfYIjI4KOv}#
                                           (cons #{e1 _85hotwsCta0JfYIjI4KPF}#
                                                 #{e2 _85hotwsCta0JfYIjI4KPG}#)
                                           (append
                                             #{meta _85hotwsCta0JfYIjI4KOz}#
                                             (syntax->datum
                                               (map cons
                                                    #{k _85hotwsCta0JfYIjI4KPD}#
                                                    #{v _85hotwsCta0JfYIjI4KPE}#)))))
                                       #{tmp _85hotwsCta0JfYIjI4KO@}#)
                                     (#{expand-simple-lambda _85hotwsCta0JfYIjI4J4V}#
                                       #{e _85hotwsCta0JfYIjI4KOc}#
                                       #{r _85hotwsCta0JfYIjI4KOd}#
                                       #{w _85hotwsCta0JfYIjI4KOe}#
                                       #{s _85hotwsCta0JfYIjI4KOf}#
                                       #{mod _85hotwsCta0JfYIjI4KOg}#
                                       #{req _85hotwsCta0JfYIjI4KOr}#
                                       #{rest _85hotwsCta0JfYIjI4KOt}#
                                       #{meta _85hotwsCta0JfYIjI4KOz}#
                                       #{body _85hotwsCta0JfYIjI4KOy}#))))))))
                        (#{lp _85hotwsCta0JfYIjI4KOv}#
                          (cons #{e1 _85hotwsCta0JfYIjI4KOn}#
                                #{e2 _85hotwsCta0JfYIjI4KOo}#)
                          '())))))
                #{tmp _85hotwsCta0JfYIjI4KOi}#)
              (syntax-violation
                'lambda
                "bad lambda"
                #{e _85hotwsCta0JfYIjI4KOc}#)))))
      (#{global-extend _85hotwsCta0JfYIjI4J3l}#
        'core
        'lambda*
        (lambda (#{e _85hotwsCta0JfYIjI4KTj}#
                 #{r _85hotwsCta0JfYIjI4KTk}#
                 #{w _85hotwsCta0JfYIjI4KTl}#
                 #{s _85hotwsCta0JfYIjI4KTm}#
                 #{mod _85hotwsCta0JfYIjI4KTn}#)
          (let ((#{tmp _85hotwsCta0JfYIjI4KTp}#
                  ($sc-dispatch
                    #{e _85hotwsCta0JfYIjI4KTj}#
                    '(_ any any . each-any))))
            (if #{tmp _85hotwsCta0JfYIjI4KTp}#
              (@apply
                (lambda (#{args _85hotwsCta0JfYIjI4KTt}#
                         #{e1 _85hotwsCta0JfYIjI4KTu}#
                         #{e2 _85hotwsCta0JfYIjI4KTv}#)
                  (call-with-values
                    (lambda ()
                      (#{expand-lambda-case _85hotwsCta0JfYIjI4J4X}#
                        #{e _85hotwsCta0JfYIjI4KTj}#
                        #{r _85hotwsCta0JfYIjI4KTk}#
                        #{w _85hotwsCta0JfYIjI4KTl}#
                        #{s _85hotwsCta0JfYIjI4KTm}#
                        #{mod _85hotwsCta0JfYIjI4KTn}#
                        #{lambda*-formals _85hotwsCta0JfYIjI4J4W}#
                        (list (cons #{args _85hotwsCta0JfYIjI4KTt}#
                                    (cons #{e1 _85hotwsCta0JfYIjI4KTu}#
                                          #{e2 _85hotwsCta0JfYIjI4KTv}#)))))
                    (lambda (#{meta _85hotwsCta0JfYIjI4KTy}#
                             #{lcase _85hotwsCta0JfYIjI4KTz}#)
                      (make-struct/no-tail
                        (vector-ref %expanded-vtables 13)
                        #{s _85hotwsCta0JfYIjI4KTm}#
                        #{meta _85hotwsCta0JfYIjI4KTy}#
                        #{lcase _85hotwsCta0JfYIjI4KTz}#))))
                #{tmp _85hotwsCta0JfYIjI4KTp}#)
              (syntax-violation
                'lambda
                "bad lambda*"
                #{e _85hotwsCta0JfYIjI4KTj}#)))))
      (#{global-extend _85hotwsCta0JfYIjI4J3l}#
        'core
        'case-lambda
        (lambda (#{e _85hotwsCta0JfYIjI4KWd}#
                 #{r _85hotwsCta0JfYIjI4KWe}#
                 #{w _85hotwsCta0JfYIjI4KWf}#
                 #{s _85hotwsCta0JfYIjI4KWg}#
                 #{mod _85hotwsCta0JfYIjI4KWh}#)
          (let ((#{tmp _85hotwsCta0JfYIjI4KWj}#
                  ($sc-dispatch
                    #{e _85hotwsCta0JfYIjI4KWd}#
                    '(_ (any any . each-any)
                        .
                        #(each (any any . each-any))))))
            (if #{tmp _85hotwsCta0JfYIjI4KWj}#
              (@apply
                (lambda (#{args _85hotwsCta0JfYIjI4KWn}#
                         #{e1 _85hotwsCta0JfYIjI4KWo}#
                         #{e2 _85hotwsCta0JfYIjI4KWp}#
                         #{args* _85hotwsCta0JfYIjI4KWq}#
                         #{e1* _85hotwsCta0JfYIjI4KWr}#
                         #{e2* _85hotwsCta0JfYIjI4KWs}#)
                  (call-with-values
                    (lambda ()
                      (#{expand-lambda-case _85hotwsCta0JfYIjI4J4X}#
                        #{e _85hotwsCta0JfYIjI4KWd}#
                        #{r _85hotwsCta0JfYIjI4KWe}#
                        #{w _85hotwsCta0JfYIjI4KWf}#
                        #{s _85hotwsCta0JfYIjI4KWg}#
                        #{mod _85hotwsCta0JfYIjI4KWh}#
                        #{lambda-formals _85hotwsCta0JfYIjI4J4U}#
                        (cons (cons #{args _85hotwsCta0JfYIjI4KWn}#
                                    (cons #{e1 _85hotwsCta0JfYIjI4KWo}#
                                          #{e2 _85hotwsCta0JfYIjI4KWp}#))
                              (map (lambda (#{tmp _85hotwsCta0JfYIjI4Jsf _85hotwsCta0JfYIjI4KWv}#
                                            #{tmp _85hotwsCta0JfYIjI4Jse _85hotwsCta0JfYIjI4KWw}#
                                            #{tmp _85hotwsCta0JfYIjI4Jsd _85hotwsCta0JfYIjI4KWx}#)
                                     (cons #{tmp _85hotwsCta0JfYIjI4Jsd _85hotwsCta0JfYIjI4KWx}#
                                           (cons #{tmp _85hotwsCta0JfYIjI4Jse _85hotwsCta0JfYIjI4KWw}#
                                                 #{tmp _85hotwsCta0JfYIjI4Jsf _85hotwsCta0JfYIjI4KWv}#)))
                                   #{e2* _85hotwsCta0JfYIjI4KWs}#
                                   #{e1* _85hotwsCta0JfYIjI4KWr}#
                                   #{args* _85hotwsCta0JfYIjI4KWq}#))))
                    (lambda (#{meta _85hotwsCta0JfYIjI4KWy}#
                             #{lcase _85hotwsCta0JfYIjI4KWz}#)
                      (make-struct/no-tail
                        (vector-ref %expanded-vtables 13)
                        #{s _85hotwsCta0JfYIjI4KWg}#
                        #{meta _85hotwsCta0JfYIjI4KWy}#
                        #{lcase _85hotwsCta0JfYIjI4KWz}#))))
                #{tmp _85hotwsCta0JfYIjI4KWj}#)
              (syntax-violation
                'case-lambda
                "bad case-lambda"
                #{e _85hotwsCta0JfYIjI4KWd}#)))))
      (#{global-extend _85hotwsCta0JfYIjI4J3l}#
        'core
        'case-lambda*
        (lambda (#{e _85hotwsCta0JfYIjI4KZV}#
                 #{r _85hotwsCta0JfYIjI4KZW}#
                 #{w _85hotwsCta0JfYIjI4KZX}#
                 #{s _85hotwsCta0JfYIjI4KZY}#
                 #{mod _85hotwsCta0JfYIjI4KZZ}#)
          (let ((#{tmp _85hotwsCta0JfYIjI4KZb}#
                  ($sc-dispatch
                    #{e _85hotwsCta0JfYIjI4KZV}#
                    '(_ (any any . each-any)
                        .
                        #(each (any any . each-any))))))
            (if #{tmp _85hotwsCta0JfYIjI4KZb}#
              (@apply
                (lambda (#{args _85hotwsCta0JfYIjI4KZf}#
                         #{e1 _85hotwsCta0JfYIjI4KZg}#
                         #{e2 _85hotwsCta0JfYIjI4KZh}#
                         #{args* _85hotwsCta0JfYIjI4KZi}#
                         #{e1* _85hotwsCta0JfYIjI4KZj}#
                         #{e2* _85hotwsCta0JfYIjI4KZk}#)
                  (call-with-values
                    (lambda ()
                      (#{expand-lambda-case _85hotwsCta0JfYIjI4J4X}#
                        #{e _85hotwsCta0JfYIjI4KZV}#
                        #{r _85hotwsCta0JfYIjI4KZW}#
                        #{w _85hotwsCta0JfYIjI4KZX}#
                        #{s _85hotwsCta0JfYIjI4KZY}#
                        #{mod _85hotwsCta0JfYIjI4KZZ}#
                        #{lambda*-formals _85hotwsCta0JfYIjI4J4W}#
                        (cons (cons #{args _85hotwsCta0JfYIjI4KZf}#
                                    (cons #{e1 _85hotwsCta0JfYIjI4KZg}#
                                          #{e2 _85hotwsCta0JfYIjI4KZh}#))
                              (map (lambda (#{tmp _85hotwsCta0JfYIjI4Js0 _85hotwsCta0JfYIjI4KZn}#
                                            #{tmp _85hotwsCta0JfYIjI4Jsz _85hotwsCta0JfYIjI4KZo}#
                                            #{tmp _85hotwsCta0JfYIjI4Jsy _85hotwsCta0JfYIjI4KZp}#)
                                     (cons #{tmp _85hotwsCta0JfYIjI4Jsy _85hotwsCta0JfYIjI4KZp}#
                                           (cons #{tmp _85hotwsCta0JfYIjI4Jsz _85hotwsCta0JfYIjI4KZo}#
                                                 #{tmp _85hotwsCta0JfYIjI4Js0 _85hotwsCta0JfYIjI4KZn}#)))
                                   #{e2* _85hotwsCta0JfYIjI4KZk}#
                                   #{e1* _85hotwsCta0JfYIjI4KZj}#
                                   #{args* _85hotwsCta0JfYIjI4KZi}#))))
                    (lambda (#{meta _85hotwsCta0JfYIjI4KZq}#
                             #{lcase _85hotwsCta0JfYIjI4KZr}#)
                      (make-struct/no-tail
                        (vector-ref %expanded-vtables 13)
                        #{s _85hotwsCta0JfYIjI4KZY}#
                        #{meta _85hotwsCta0JfYIjI4KZq}#
                        #{lcase _85hotwsCta0JfYIjI4KZr}#))))
                #{tmp _85hotwsCta0JfYIjI4KZb}#)
              (syntax-violation
                'case-lambda
                "bad case-lambda*"
                #{e _85hotwsCta0JfYIjI4KZV}#)))))
      (#{global-extend _85hotwsCta0JfYIjI4J3l}#
        'core
        'let
        (letrec*
          ((#{expand-let _85hotwsCta0JfYIjI4Kcq}#
             (lambda (#{e _85hotwsCta0JfYIjI4Ke@}#
                      #{r _85hotwsCta0JfYIjI4KfA}#
                      #{w _85hotwsCta0JfYIjI4KfB}#
                      #{s _85hotwsCta0JfYIjI4KfC}#
                      #{mod _85hotwsCta0JfYIjI4KfD}#
                      #{constructor _85hotwsCta0JfYIjI4KfE}#
                      #{ids _85hotwsCta0JfYIjI4KfF}#
                      #{vals _85hotwsCta0JfYIjI4KfG}#
                      #{exps _85hotwsCta0JfYIjI4KfH}#)
               (if (not (#{valid-bound-ids? _85hotwsCta0JfYIjI4J4B}#
                          #{ids _85hotwsCta0JfYIjI4KfF}#))
                 (syntax-violation
                   'let
                   "duplicate bound variable"
                   #{e _85hotwsCta0JfYIjI4Ke@}#)
                 (let ((#{labels _85hotwsCta0JfYIjI4KgV}#
                         (#{gen-labels _85hotwsCta0JfYIjI4J3q}#
                           #{ids _85hotwsCta0JfYIjI4KfF}#))
                       (#{new-vars _85hotwsCta0JfYIjI4KgW}#
                         (map #{gen-var _85hotwsCta0JfYIjI4J4Z}#
                              #{ids _85hotwsCta0JfYIjI4KfF}#)))
                   (let ((#{nw _85hotwsCta0JfYIjI4KgX}#
                           (#{make-binding-wrap _85hotwsCta0JfYIjI4J31}#
                             #{ids _85hotwsCta0JfYIjI4KfF}#
                             #{labels _85hotwsCta0JfYIjI4KgV}#
                             #{w _85hotwsCta0JfYIjI4KfB}#))
                         (#{nr _85hotwsCta0JfYIjI4KgY}#
                           (#{extend-var-env _85hotwsCta0JfYIjI4J3i}#
                             #{labels _85hotwsCta0JfYIjI4KgV}#
                             #{new-vars _85hotwsCta0JfYIjI4KgW}#
                             #{r _85hotwsCta0JfYIjI4KfA}#)))
                     (#{constructor _85hotwsCta0JfYIjI4KfE}#
                       #{s _85hotwsCta0JfYIjI4KfC}#
                       (map syntax->datum
                            #{ids _85hotwsCta0JfYIjI4KfF}#)
                       #{new-vars _85hotwsCta0JfYIjI4KgW}#
                       (map (lambda (#{x _85hotwsCta0JfYIjI4Kgp}#)
                              (#{expand _85hotwsCta0JfYIjI4J4L}#
                                #{x _85hotwsCta0JfYIjI4Kgp}#
                                #{r _85hotwsCta0JfYIjI4KfA}#
                                #{w _85hotwsCta0JfYIjI4KfB}#
                                #{mod _85hotwsCta0JfYIjI4KfD}#))
                            #{vals _85hotwsCta0JfYIjI4KfG}#)
                       (#{expand-body _85hotwsCta0JfYIjI4J4P}#
                         #{exps _85hotwsCta0JfYIjI4KfH}#
                         (#{source-wrap _85hotwsCta0JfYIjI4J4F}#
                           #{e _85hotwsCta0JfYIjI4Ke@}#
                           #{nw _85hotwsCta0JfYIjI4KgX}#
                           #{s _85hotwsCta0JfYIjI4KfC}#
                           #{mod _85hotwsCta0JfYIjI4KfD}#)
                         #{nr _85hotwsCta0JfYIjI4KgY}#
                         #{nw _85hotwsCta0JfYIjI4KgX}#
                         #{mod _85hotwsCta0JfYIjI4KfD}#))))))))
          (lambda (#{e _85hotwsCta0JfYIjI4Kcr}#
                   #{r _85hotwsCta0JfYIjI4Kcs}#
                   #{w _85hotwsCta0JfYIjI4Kct}#
                   #{s _85hotwsCta0JfYIjI4Kcu}#
                   #{mod _85hotwsCta0JfYIjI4Kcv}#)
            (let ((#{tmp _85hotwsCta0JfYIjI4Kcx}#
                    ($sc-dispatch
                      #{e _85hotwsCta0JfYIjI4Kcr}#
                      '(_ #(each (any any)) any . each-any))))
              (if (if #{tmp _85hotwsCta0JfYIjI4Kcx}#
                    (@apply
                      (lambda (#{id _85hotwsCta0JfYIjI4Kc1}#
                               #{val _85hotwsCta0JfYIjI4Kc2}#
                               #{e1 _85hotwsCta0JfYIjI4Kc3}#
                               #{e2 _85hotwsCta0JfYIjI4Kc4}#)
                        (and-map
                          #{id? _85hotwsCta0JfYIjI4J3n}#
                          #{id _85hotwsCta0JfYIjI4Kc1}#))
                      #{tmp _85hotwsCta0JfYIjI4Kcx}#)
                    #f)
                (@apply
                  (lambda (#{id _85hotwsCta0JfYIjI4KdI}#
                           #{val _85hotwsCta0JfYIjI4KdJ}#
                           #{e1 _85hotwsCta0JfYIjI4KdK}#
                           #{e2 _85hotwsCta0JfYIjI4KdL}#)
                    (#{expand-let _85hotwsCta0JfYIjI4Kcq}#
                      #{e _85hotwsCta0JfYIjI4Kcr}#
                      #{r _85hotwsCta0JfYIjI4Kcs}#
                      #{w _85hotwsCta0JfYIjI4Kct}#
                      #{s _85hotwsCta0JfYIjI4Kcu}#
                      #{mod _85hotwsCta0JfYIjI4Kcv}#
                      #{build-let _85hotwsCta0JfYIjI4J3V}#
                      #{id _85hotwsCta0JfYIjI4KdI}#
                      #{val _85hotwsCta0JfYIjI4KdJ}#
                      (cons #{e1 _85hotwsCta0JfYIjI4KdK}#
                            #{e2 _85hotwsCta0JfYIjI4KdL}#)))
                  #{tmp _85hotwsCta0JfYIjI4Kcx}#)
                (let ((#{tmp _85hotwsCta0JfYIjI4Kdp}#
                        ($sc-dispatch
                          #{e _85hotwsCta0JfYIjI4Kcr}#
                          '(_ any #(each (any any)) any . each-any))))
                  (if (if #{tmp _85hotwsCta0JfYIjI4Kdp}#
                        (@apply
                          (lambda (#{f _85hotwsCta0JfYIjI4Kdt}#
                                   #{id _85hotwsCta0JfYIjI4Kdu}#
                                   #{val _85hotwsCta0JfYIjI4Kdv}#
                                   #{e1 _85hotwsCta0JfYIjI4Kdw}#
                                   #{e2 _85hotwsCta0JfYIjI4Kdx}#)
                            (if (if (symbol? #{f _85hotwsCta0JfYIjI4Kdt}#)
                                  #t
                                  (if (if (vector?
                                            #{f _85hotwsCta0JfYIjI4Kdt}#)
                                        (if (= (vector-length
                                                 #{f _85hotwsCta0JfYIjI4Kdt}#)
                                               4)
                                          (eq? (vector-ref
                                                 #{f _85hotwsCta0JfYIjI4Kdt}#
                                                 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (symbol?
                                      (vector-ref
                                        #{f _85hotwsCta0JfYIjI4Kdt}#
                                        1))
                                    #f))
                              (and-map
                                #{id? _85hotwsCta0JfYIjI4J3n}#
                                #{id _85hotwsCta0JfYIjI4Kdu}#)
                              #f))
                          #{tmp _85hotwsCta0JfYIjI4Kdp}#)
                        #f)
                    (@apply
                      (lambda (#{f _85hotwsCta0JfYIjI4Keb}#
                               #{id _85hotwsCta0JfYIjI4Kec}#
                               #{val _85hotwsCta0JfYIjI4Ked}#
                               #{e1 _85hotwsCta0JfYIjI4Kee}#
                               #{e2 _85hotwsCta0JfYIjI4Kef}#)
                        (#{expand-let _85hotwsCta0JfYIjI4Kcq}#
                          #{e _85hotwsCta0JfYIjI4Kcr}#
                          #{r _85hotwsCta0JfYIjI4Kcs}#
                          #{w _85hotwsCta0JfYIjI4Kct}#
                          #{s _85hotwsCta0JfYIjI4Kcu}#
                          #{mod _85hotwsCta0JfYIjI4Kcv}#
                          #{build-named-let _85hotwsCta0JfYIjI4J3W}#
                          (cons #{f _85hotwsCta0JfYIjI4Keb}#
                                #{id _85hotwsCta0JfYIjI4Kec}#)
                          #{val _85hotwsCta0JfYIjI4Ked}#
                          (cons #{e1 _85hotwsCta0JfYIjI4Kee}#
                                #{e2 _85hotwsCta0JfYIjI4Kef}#)))
                      #{tmp _85hotwsCta0JfYIjI4Kdp}#)
                    (syntax-violation
                      'let
                      "bad let"
                      (#{wrap _85hotwsCta0JfYIjI4J4E}#
                        (begin
                          (if (if (pair? #{e _85hotwsCta0JfYIjI4Kcr}#)
                                #{s _85hotwsCta0JfYIjI4Kcu}#
                                #f)
                            (set-source-properties!
                              #{e _85hotwsCta0JfYIjI4Kcr}#
                              #{s _85hotwsCta0JfYIjI4Kcu}#))
                          #{e _85hotwsCta0JfYIjI4Kcr}#)
                        #{w _85hotwsCta0JfYIjI4Kct}#
                        #{mod _85hotwsCta0JfYIjI4Kcv}#)))))))))
      (#{global-extend _85hotwsCta0JfYIjI4J3l}#
        'core
        'letrec
        (lambda (#{e _85hotwsCta0JfYIjI4Km3}#
                 #{r _85hotwsCta0JfYIjI4Km4}#
                 #{w _85hotwsCta0JfYIjI4Km5}#
                 #{s _85hotwsCta0JfYIjI4Km6}#
                 #{mod _85hotwsCta0JfYIjI4Km7}#)
          (let ((#{tmp _85hotwsCta0JfYIjI4Km9}#
                  ($sc-dispatch
                    #{e _85hotwsCta0JfYIjI4Km3}#
                    '(_ #(each (any any)) any . each-any))))
            (if (if #{tmp _85hotwsCta0JfYIjI4Km9}#
                  (@apply
                    (lambda (#{id _85hotwsCta0JfYIjI4KnB}#
                             #{val _85hotwsCta0JfYIjI4KnC}#
                             #{e1 _85hotwsCta0JfYIjI4KnD}#
                             #{e2 _85hotwsCta0JfYIjI4KnE}#)
                      (and-map
                        #{id? _85hotwsCta0JfYIjI4J3n}#
                        #{id _85hotwsCta0JfYIjI4KnB}#))
                    #{tmp _85hotwsCta0JfYIjI4Km9}#)
                  #f)
              (@apply
                (lambda (#{id _85hotwsCta0JfYIjI4KnU}#
                         #{val _85hotwsCta0JfYIjI4KnV}#
                         #{e1 _85hotwsCta0JfYIjI4KnW}#
                         #{e2 _85hotwsCta0JfYIjI4KnX}#)
                  (if (not (#{valid-bound-ids? _85hotwsCta0JfYIjI4J4B}#
                             #{id _85hotwsCta0JfYIjI4KnU}#))
                    (syntax-violation
                      'letrec
                      "duplicate bound variable"
                      #{e _85hotwsCta0JfYIjI4Km3}#)
                    (let ((#{labels _85hotwsCta0JfYIjI4Kox}#
                            (#{gen-labels _85hotwsCta0JfYIjI4J3q}#
                              #{id _85hotwsCta0JfYIjI4KnU}#))
                          (#{new-vars _85hotwsCta0JfYIjI4Koy}#
                            (map #{gen-var _85hotwsCta0JfYIjI4J4Z}#
                                 #{id _85hotwsCta0JfYIjI4KnU}#)))
                      (let ((#{w _85hotwsCta0JfYIjI4Koz}#
                              (#{make-binding-wrap _85hotwsCta0JfYIjI4J31}#
                                #{id _85hotwsCta0JfYIjI4KnU}#
                                #{labels _85hotwsCta0JfYIjI4Kox}#
                                #{w _85hotwsCta0JfYIjI4Km5}#))
                            (#{r _85hotwsCta0JfYIjI4Ko0}#
                              (#{extend-var-env _85hotwsCta0JfYIjI4J3i}#
                                #{labels _85hotwsCta0JfYIjI4Kox}#
                                #{new-vars _85hotwsCta0JfYIjI4Koy}#
                                #{r _85hotwsCta0JfYIjI4Km4}#)))
                        (#{build-letrec _85hotwsCta0JfYIjI4J3X}#
                          #{s _85hotwsCta0JfYIjI4Km6}#
                          #f
                          (map syntax->datum #{id _85hotwsCta0JfYIjI4KnU}#)
                          #{new-vars _85hotwsCta0JfYIjI4Koy}#
                          (map (lambda (#{x _85hotwsCta0JfYIjI4KqF}#)
                                 (#{expand _85hotwsCta0JfYIjI4J4L}#
                                   #{x _85hotwsCta0JfYIjI4KqF}#
                                   #{r _85hotwsCta0JfYIjI4Ko0}#
                                   #{w _85hotwsCta0JfYIjI4Koz}#
                                   #{mod _85hotwsCta0JfYIjI4Km7}#))
                               #{val _85hotwsCta0JfYIjI4KnV}#)
                          (#{expand-body _85hotwsCta0JfYIjI4J4P}#
                            (cons #{e1 _85hotwsCta0JfYIjI4KnW}#
                                  #{e2 _85hotwsCta0JfYIjI4KnX}#)
                            (#{wrap _85hotwsCta0JfYIjI4J4E}#
                              (begin
                                (if (if (pair? #{e _85hotwsCta0JfYIjI4Km3}#)
                                      #{s _85hotwsCta0JfYIjI4Km6}#
                                      #f)
                                  (set-source-properties!
                                    #{e _85hotwsCta0JfYIjI4Km3}#
                                    #{s _85hotwsCta0JfYIjI4Km6}#))
                                #{e _85hotwsCta0JfYIjI4Km3}#)
                              #{w _85hotwsCta0JfYIjI4Koz}#
                              #{mod _85hotwsCta0JfYIjI4Km7}#)
                            #{r _85hotwsCta0JfYIjI4Ko0}#
                            #{w _85hotwsCta0JfYIjI4Koz}#
                            #{mod _85hotwsCta0JfYIjI4Km7}#))))))
                #{tmp _85hotwsCta0JfYIjI4Km9}#)
              (syntax-violation
                'letrec
                "bad letrec"
                (#{wrap _85hotwsCta0JfYIjI4J4E}#
                  (begin
                    (if (if (pair? #{e _85hotwsCta0JfYIjI4Km3}#)
                          #{s _85hotwsCta0JfYIjI4Km6}#
                          #f)
                      (set-source-properties!
                        #{e _85hotwsCta0JfYIjI4Km3}#
                        #{s _85hotwsCta0JfYIjI4Km6}#))
                    #{e _85hotwsCta0JfYIjI4Km3}#)
                  #{w _85hotwsCta0JfYIjI4Km5}#
                  #{mod _85hotwsCta0JfYIjI4Km7}#))))))
      (#{global-extend _85hotwsCta0JfYIjI4J3l}#
        'core
        'letrec*
        (lambda (#{e _85hotwsCta0JfYIjI4KwI}#
                 #{r _85hotwsCta0JfYIjI4KwJ}#
                 #{w _85hotwsCta0JfYIjI4KwK}#
                 #{s _85hotwsCta0JfYIjI4KwL}#
                 #{mod _85hotwsCta0JfYIjI4KwM}#)
          (let ((#{tmp _85hotwsCta0JfYIjI4KwO}#
                  ($sc-dispatch
                    #{e _85hotwsCta0JfYIjI4KwI}#
                    '(_ #(each (any any)) any . each-any))))
            (if (if #{tmp _85hotwsCta0JfYIjI4KwO}#
                  (@apply
                    (lambda (#{id _85hotwsCta0JfYIjI4KwS}#
                             #{val _85hotwsCta0JfYIjI4KwT}#
                             #{e1 _85hotwsCta0JfYIjI4KwU}#
                             #{e2 _85hotwsCta0JfYIjI4KwV}#)
                      (and-map
                        #{id? _85hotwsCta0JfYIjI4J3n}#
                        #{id _85hotwsCta0JfYIjI4KwS}#))
                    #{tmp _85hotwsCta0JfYIjI4KwO}#)
                  #f)
              (@apply
                (lambda (#{id _85hotwsCta0JfYIjI4Kwl}#
                         #{val _85hotwsCta0JfYIjI4Kwm}#
                         #{e1 _85hotwsCta0JfYIjI4Kwn}#
                         #{e2 _85hotwsCta0JfYIjI4Kwo}#)
                  (if (not (#{valid-bound-ids? _85hotwsCta0JfYIjI4J4B}#
                             #{id _85hotwsCta0JfYIjI4Kwl}#))
                    (syntax-violation
                      'letrec*
                      "duplicate bound variable"
                      #{e _85hotwsCta0JfYIjI4KwI}#)
                    (let ((#{labels _85hotwsCta0JfYIjI4KyC}#
                            (#{gen-labels _85hotwsCta0JfYIjI4J3q}#
                              #{id _85hotwsCta0JfYIjI4Kwl}#))
                          (#{new-vars _85hotwsCta0JfYIjI4KyD}#
                            (map #{gen-var _85hotwsCta0JfYIjI4J4Z}#
                                 #{id _85hotwsCta0JfYIjI4Kwl}#)))
                      (let ((#{w _85hotwsCta0JfYIjI4KyE}#
                              (#{make-binding-wrap _85hotwsCta0JfYIjI4J31}#
                                #{id _85hotwsCta0JfYIjI4Kwl}#
                                #{labels _85hotwsCta0JfYIjI4KyC}#
                                #{w _85hotwsCta0JfYIjI4KwK}#))
                            (#{r _85hotwsCta0JfYIjI4KyF}#
                              (#{extend-var-env _85hotwsCta0JfYIjI4J3i}#
                                #{labels _85hotwsCta0JfYIjI4KyC}#
                                #{new-vars _85hotwsCta0JfYIjI4KyD}#
                                #{r _85hotwsCta0JfYIjI4KwJ}#)))
                        (#{build-letrec _85hotwsCta0JfYIjI4J3X}#
                          #{s _85hotwsCta0JfYIjI4KwL}#
                          #t
                          (map syntax->datum #{id _85hotwsCta0JfYIjI4Kwl}#)
                          #{new-vars _85hotwsCta0JfYIjI4KyD}#
                          (map (lambda (#{x _85hotwsCta0JfYIjI4KzW}#)
                                 (#{expand _85hotwsCta0JfYIjI4J4L}#
                                   #{x _85hotwsCta0JfYIjI4KzW}#
                                   #{r _85hotwsCta0JfYIjI4KyF}#
                                   #{w _85hotwsCta0JfYIjI4KyE}#
                                   #{mod _85hotwsCta0JfYIjI4KwM}#))
                               #{val _85hotwsCta0JfYIjI4Kwm}#)
                          (#{expand-body _85hotwsCta0JfYIjI4J4P}#
                            (cons #{e1 _85hotwsCta0JfYIjI4Kwn}#
                                  #{e2 _85hotwsCta0JfYIjI4Kwo}#)
                            (#{wrap _85hotwsCta0JfYIjI4J4E}#
                              (begin
                                (if (if (pair? #{e _85hotwsCta0JfYIjI4KwI}#)
                                      #{s _85hotwsCta0JfYIjI4KwL}#
                                      #f)
                                  (set-source-properties!
                                    #{e _85hotwsCta0JfYIjI4KwI}#
                                    #{s _85hotwsCta0JfYIjI4KwL}#))
                                #{e _85hotwsCta0JfYIjI4KwI}#)
                              #{w _85hotwsCta0JfYIjI4KyE}#
                              #{mod _85hotwsCta0JfYIjI4KwM}#)
                            #{r _85hotwsCta0JfYIjI4KyF}#
                            #{w _85hotwsCta0JfYIjI4KyE}#
                            #{mod _85hotwsCta0JfYIjI4KwM}#))))))
                #{tmp _85hotwsCta0JfYIjI4KwO}#)
              (syntax-violation
                'letrec*
                "bad letrec*"
                (#{wrap _85hotwsCta0JfYIjI4J4E}#
                  (begin
                    (if (if (pair? #{e _85hotwsCta0JfYIjI4KwI}#)
                          #{s _85hotwsCta0JfYIjI4KwL}#
                          #f)
                      (set-source-properties!
                        #{e _85hotwsCta0JfYIjI4KwI}#
                        #{s _85hotwsCta0JfYIjI4KwL}#))
                    #{e _85hotwsCta0JfYIjI4KwI}#)
                  #{w _85hotwsCta0JfYIjI4KwK}#
                  #{mod _85hotwsCta0JfYIjI4KwM}#))))))
      (#{global-extend _85hotwsCta0JfYIjI4J3l}#
        'core
        'set!
        (lambda (#{e _85hotwsCta0JfYIjI4K6A}#
                 #{r _85hotwsCta0JfYIjI4K6B}#
                 #{w _85hotwsCta0JfYIjI4K6C}#
                 #{s _85hotwsCta0JfYIjI4K6D}#
                 #{mod _85hotwsCta0JfYIjI4K6E}#)
          (let ((#{tmp _85hotwsCta0JfYIjI4K6G}#
                  ($sc-dispatch
                    #{e _85hotwsCta0JfYIjI4K6A}#
                    '(_ any any))))
            (if (if #{tmp _85hotwsCta0JfYIjI4K6G}#
                  (@apply
                    (lambda (#{id _85hotwsCta0JfYIjI4K6K}#
                             #{val _85hotwsCta0JfYIjI4K6L}#)
                      (if (symbol? #{id _85hotwsCta0JfYIjI4K6K}#)
                        #t
                        (if (if (vector? #{id _85hotwsCta0JfYIjI4K6K}#)
                              (if (= (vector-length
                                       #{id _85hotwsCta0JfYIjI4K6K}#)
                                     4)
                                (eq? (vector-ref
                                       #{id _85hotwsCta0JfYIjI4K6K}#
                                       0)
                                     'syntax-object)
                                #f)
                              #f)
                          (symbol?
                            (vector-ref #{id _85hotwsCta0JfYIjI4K6K}# 1))
                          #f)))
                    #{tmp _85hotwsCta0JfYIjI4K6G}#)
                  #f)
              (@apply
                (lambda (#{id _85hotwsCta0JfYIjI4K6m}#
                         #{val _85hotwsCta0JfYIjI4K6n}#)
                  (let ((#{n _85hotwsCta0JfYIjI4K6o}#
                          (#{id-var-name _85hotwsCta0JfYIjI4J36}#
                            #{id _85hotwsCta0JfYIjI4K6m}#
                            #{w _85hotwsCta0JfYIjI4K6C}#))
                        (#{id-mod _85hotwsCta0JfYIjI4K6p}#
                          (if (if (vector? #{id _85hotwsCta0JfYIjI4K6m}#)
                                (if (= (vector-length
                                         #{id _85hotwsCta0JfYIjI4K6m}#)
                                       4)
                                  (eq? (vector-ref
                                         #{id _85hotwsCta0JfYIjI4K6m}#
                                         0)
                                       'syntax-object)
                                  #f)
                                #f)
                            (vector-ref #{id _85hotwsCta0JfYIjI4K6m}# 3)
                            #{mod _85hotwsCta0JfYIjI4K6E}#)))
                    (let ((#{b _85hotwsCta0JfYIjI4K6q}#
                            (let ((#{t _85hotwsCta0JfYIjI4K7T}#
                                    (assq #{n _85hotwsCta0JfYIjI4K6o}#
                                          #{r _85hotwsCta0JfYIjI4K6B}#)))
                              (if #{t _85hotwsCta0JfYIjI4K7T}#
                                (cdr #{t _85hotwsCta0JfYIjI4K7T}#)
                                (if (symbol? #{n _85hotwsCta0JfYIjI4K6o}#)
                                  (let ((#{t _85hotwsCta0JfYIjI4K7Y}#
                                          (#{get-global-definition-hook _85hotwsCta0JfYIjI4J3C}#
                                            #{n _85hotwsCta0JfYIjI4K6o}#
                                            #{id-mod _85hotwsCta0JfYIjI4K6p}#)))
                                    (if #{t _85hotwsCta0JfYIjI4K7Y}#
                                      #{t _85hotwsCta0JfYIjI4K7Y}#
                                      '(global)))
                                  '(displaced-lexical))))))
                      (let ((#{atom-key _85hotwsCta0JfYIjI4K6r}#
                              (car #{b _85hotwsCta0JfYIjI4K6q}#)))
                        (if (eqv? #{atom-key _85hotwsCta0JfYIjI4K6r}#
                                  'lexical)
                          (#{build-lexical-assignment _85hotwsCta0JfYIjI4J3K}#
                            #{s _85hotwsCta0JfYIjI4K6D}#
                            (syntax->datum #{id _85hotwsCta0JfYIjI4K6m}#)
                            (cdr #{b _85hotwsCta0JfYIjI4K6q}#)
                            (#{expand _85hotwsCta0JfYIjI4J4L}#
                              #{val _85hotwsCta0JfYIjI4K6n}#
                              #{r _85hotwsCta0JfYIjI4K6B}#
                              #{w _85hotwsCta0JfYIjI4K6C}#
                              #{mod _85hotwsCta0JfYIjI4K6E}#))
                          (if (eqv? #{atom-key _85hotwsCta0JfYIjI4K6r}#
                                    'global)
                            (#{build-global-assignment _85hotwsCta0JfYIjI4J3N}#
                              #{s _85hotwsCta0JfYIjI4K6D}#
                              #{n _85hotwsCta0JfYIjI4K6o}#
                              (#{expand _85hotwsCta0JfYIjI4J4L}#
                                #{val _85hotwsCta0JfYIjI4K6n}#
                                #{r _85hotwsCta0JfYIjI4K6B}#
                                #{w _85hotwsCta0JfYIjI4K6C}#
                                #{mod _85hotwsCta0JfYIjI4K6E}#)
                              #{id-mod _85hotwsCta0JfYIjI4K6p}#)
                            (if (eqv? #{atom-key _85hotwsCta0JfYIjI4K6r}#
                                      'macro)
                              (let ((#{p _85hotwsCta0JfYIjI4LAS}#
                                      (cdr #{b _85hotwsCta0JfYIjI4K6q}#)))
                                (if (procedure-property
                                      #{p _85hotwsCta0JfYIjI4LAS}#
                                      'variable-transformer)
                                  (#{expand _85hotwsCta0JfYIjI4J4L}#
                                    (#{expand-macro _85hotwsCta0JfYIjI4J4O}#
                                      #{p _85hotwsCta0JfYIjI4LAS}#
                                      #{e _85hotwsCta0JfYIjI4K6A}#
                                      #{r _85hotwsCta0JfYIjI4K6B}#
                                      #{w _85hotwsCta0JfYIjI4K6C}#
                                      #{s _85hotwsCta0JfYIjI4K6D}#
                                      #f
                                      #{mod _85hotwsCta0JfYIjI4K6E}#)
                                    #{r _85hotwsCta0JfYIjI4K6B}#
                                    '(())
                                    #{mod _85hotwsCta0JfYIjI4K6E}#)
                                  (syntax-violation
                                    'set!
                                    "not a variable transformer"
                                    (#{wrap _85hotwsCta0JfYIjI4J4E}#
                                      #{e _85hotwsCta0JfYIjI4K6A}#
                                      #{w _85hotwsCta0JfYIjI4K6C}#
                                      #{mod _85hotwsCta0JfYIjI4K6E}#)
                                    (#{wrap _85hotwsCta0JfYIjI4J4E}#
                                      #{id _85hotwsCta0JfYIjI4K6m}#
                                      #{w _85hotwsCta0JfYIjI4K6C}#
                                      #{id-mod _85hotwsCta0JfYIjI4K6p}#))))
                              (if (eqv? #{atom-key _85hotwsCta0JfYIjI4K6r}#
                                        'displaced-lexical)
                                (syntax-violation
                                  'set!
                                  "identifier out of context"
                                  (#{wrap _85hotwsCta0JfYIjI4J4E}#
                                    #{id _85hotwsCta0JfYIjI4K6m}#
                                    #{w _85hotwsCta0JfYIjI4K6C}#
                                    #{mod _85hotwsCta0JfYIjI4K6E}#))
                                (syntax-violation
                                  'set!
                                  "bad set!"
                                  (#{wrap _85hotwsCta0JfYIjI4J4E}#
                                    (begin
                                      (if (if (pair? #{e _85hotwsCta0JfYIjI4K6A}#)
                                            #{s _85hotwsCta0JfYIjI4K6D}#
                                            #f)
                                        (set-source-properties!
                                          #{e _85hotwsCta0JfYIjI4K6A}#
                                          #{s _85hotwsCta0JfYIjI4K6D}#))
                                      #{e _85hotwsCta0JfYIjI4K6A}#)
                                    #{w _85hotwsCta0JfYIjI4K6C}#
                                    #{mod _85hotwsCta0JfYIjI4K6E}#))))))))))
                #{tmp _85hotwsCta0JfYIjI4K6G}#)
              (let ((#{tmp _85hotwsCta0JfYIjI4LBx}#
                      ($sc-dispatch
                        #{e _85hotwsCta0JfYIjI4K6A}#
                        '(_ (any . each-any) any))))
                (if #{tmp _85hotwsCta0JfYIjI4LBx}#
                  (@apply
                    (lambda (#{head _85hotwsCta0JfYIjI4LB1}#
                             #{tail _85hotwsCta0JfYIjI4LB2}#
                             #{val _85hotwsCta0JfYIjI4LB3}#)
                      (call-with-values
                        (lambda ()
                          (#{syntax-type _85hotwsCta0JfYIjI4J4K}#
                            #{head _85hotwsCta0JfYIjI4LB1}#
                            #{r _85hotwsCta0JfYIjI4K6B}#
                            '(())
                            #f
                            #f
                            #{mod _85hotwsCta0JfYIjI4K6E}#
                            #t))
                        (lambda (#{type _85hotwsCta0JfYIjI4LB6}#
                                 #{value _85hotwsCta0JfYIjI4LB7}#
                                 #{ee _85hotwsCta0JfYIjI4LB8}#
                                 #{ww _85hotwsCta0JfYIjI4LB9}#
                                 #{ss _85hotwsCta0JfYIjI4LB$}#
                                 #{modmod _85hotwsCta0JfYIjI4LB@}#)
                          (if (eqv? #{type _85hotwsCta0JfYIjI4LB6}#
                                    'module-ref)
                            (let ((#{val _85hotwsCta0JfYIjI4LCD}#
                                    (#{expand _85hotwsCta0JfYIjI4J4L}#
                                      #{val _85hotwsCta0JfYIjI4LB3}#
                                      #{r _85hotwsCta0JfYIjI4K6B}#
                                      #{w _85hotwsCta0JfYIjI4K6C}#
                                      #{mod _85hotwsCta0JfYIjI4K6E}#)))
                              (call-with-values
                                (lambda ()
                                  (#{value _85hotwsCta0JfYIjI4LB7}#
                                    (cons #{head _85hotwsCta0JfYIjI4LB1}#
                                          #{tail _85hotwsCta0JfYIjI4LB2}#)
                                    #{r _85hotwsCta0JfYIjI4K6B}#
                                    #{w _85hotwsCta0JfYIjI4K6C}#))
                                (lambda (#{e _85hotwsCta0JfYIjI4LCE}#
                                         #{r _85hotwsCta0JfYIjI4LCF}#
                                         #{w _85hotwsCta0JfYIjI4LCG}#
                                         #{s* _85hotwsCta0JfYIjI4LCH}#
                                         #{mod _85hotwsCta0JfYIjI4LCI}#)
                                  (let ((#{tmp _85hotwsCta0JfYIjI4LCK}#
                                          (list #{e _85hotwsCta0JfYIjI4LCE}#)))
                                    (if (@apply
                                          (lambda (#{e _85hotwsCta0JfYIjI4LCM}#)
                                            (if (symbol?
                                                  #{e _85hotwsCta0JfYIjI4LCM}#)
                                              #t
                                              (if (if (vector?
                                                        #{e _85hotwsCta0JfYIjI4LCM}#)
                                                    (if (= (vector-length
                                                             #{e _85hotwsCta0JfYIjI4LCM}#)
                                                           4)
                                                      (eq? (vector-ref
                                                             #{e _85hotwsCta0JfYIjI4LCM}#
                                                             0)
                                                           'syntax-object)
                                                      #f)
                                                    #f)
                                                (symbol?
                                                  (vector-ref
                                                    #{e _85hotwsCta0JfYIjI4LCM}#
                                                    1))
                                                #f)))
                                          #{tmp _85hotwsCta0JfYIjI4LCK}#)
                                      (@apply
                                        (lambda (#{e _85hotwsCta0JfYIjI4LCq}#)
                                          (#{build-global-assignment _85hotwsCta0JfYIjI4J3N}#
                                            #{s _85hotwsCta0JfYIjI4K6D}#
                                            (syntax->datum
                                              #{e _85hotwsCta0JfYIjI4LCq}#)
                                            #{val _85hotwsCta0JfYIjI4LCD}#
                                            #{mod _85hotwsCta0JfYIjI4LCI}#))
                                        #{tmp _85hotwsCta0JfYIjI4LCK}#)
                                      (syntax-violation
                                        #f
                                        "source expression failed to match any pattern"
                                        #{e _85hotwsCta0JfYIjI4LCE}#))))))
                            (#{build-application _85hotwsCta0JfYIjI4J3G}#
                              #{s _85hotwsCta0JfYIjI4K6D}#
                              (let ((#{e _85hotwsCta0JfYIjI4LGL}#
                                      (list '#(syntax-object
                                               setter
                                               ((top)
                                                #(ribcage () () ())
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(type value ee ww ss modmod)
                                                  #((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                  #("2sa"
                                                    "2sb"
                                                    "2sc"
                                                    "2sd"
                                                    "2se"
                                                    "2sf"))
                                                #(ribcage
                                                  #(head tail val)
                                                  #((top) (top) (top))
                                                  #("2s7" "2s8" "2s9"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(e r w s mod)
                                                  #((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                  #("2rt"
                                                    "2ru"
                                                    "2rv"
                                                    "2rw"
                                                    "2rx"))
                                                #(ribcage
                                                  (lambda-var-list
                                                    gen-var
                                                    strip
                                                    expand-lambda-case
                                                    lambda*-formals
                                                    expand-simple-lambda
                                                    lambda-formals
                                                    ellipsis?
                                                    expand-void
                                                    eval-local-transformer
                                                    expand-local-syntax
                                                    expand-body
                                                    expand-macro
                                                    expand-application
                                                    expand-expr
                                                    expand
                                                    syntax-type
                                                    parse-when-list
                                                    expand-install-global
                                                    expand-top-sequence
                                                    expand-sequence
                                                    source-wrap
                                                    wrap
                                                    bound-id-member?
                                                    distinct-bound-ids?
                                                    valid-bound-ids?
                                                    bound-id=?
                                                    free-id=?
                                                    with-transformer-environment
                                                    transformer-environment
                                                    resolve-identifier
                                                    locally-bound-identifiers
                                                    id-var-name
                                                    same-marks?
                                                    join-marks
                                                    join-wraps
                                                    smart-append
                                                    make-binding-wrap
                                                    extend-ribcage!
                                                    make-empty-ribcage
                                                    new-mark
                                                    anti-mark
                                                    the-anti-mark
                                                    top-marked?
                                                    top-wrap
                                                    empty-wrap
                                                    set-ribcage-labels!
                                                    set-ribcage-marks!
                                                    set-ribcage-symnames!
                                                    ribcage-labels
                                                    ribcage-marks
                                                    ribcage-symnames
                                                    ribcage?
                                                    make-ribcage
                                                    gen-labels
                                                    gen-label
                                                    make-rename
                                                    rename-marks
                                                    rename-new
                                                    rename-old
                                                    subst-rename?
                                                    wrap-subst
                                                    wrap-marks
                                                    make-wrap
                                                    id-sym-name&marks
                                                    id-sym-name
                                                    id?
                                                    nonsymbol-id?
                                                    global-extend
                                                    lookup
                                                    macros-only-env
                                                    extend-var-env
                                                    extend-env
                                                    null-env
                                                    binding-value
                                                    binding-type
                                                    make-binding
                                                    arg-check
                                                    source-annotation
                                                    no-source
                                                    set-syntax-object-module!
                                                    set-syntax-object-wrap!
                                                    set-syntax-object-expression!
                                                    syntax-object-module
                                                    syntax-object-wrap
                                                    syntax-object-expression
                                                    syntax-object?
                                                    make-syntax-object
                                                    build-lexical-var
                                                    build-letrec
                                                    build-named-let
                                                    build-let
                                                    build-sequence
                                                    build-data
                                                    build-primref
                                                    build-lambda-case
                                                    build-case-lambda
                                                    build-simple-lambda
                                                    build-global-definition
                                                    build-global-assignment
                                                    build-global-reference
                                                    analyze-variable
                                                    build-lexical-assignment
                                                    build-lexical-reference
                                                    build-dynlet
                                                    build-conditional
                                                    build-application
                                                    build-void
                                                    maybe-name-value!
                                                    decorate-source
                                                    get-global-definition-hook
                                                    put-global-definition-hook
                                                    gensym-hook
                                                    local-eval-hook
                                                    top-level-eval-hook
                                                    fx<
                                                    fx=
                                                    fx-
                                                    fx+
                                                    set-lambda-meta!
                                                    lambda-meta
                                                    lambda?
                                                    make-dynlet
                                                    make-letrec
                                                    make-let
                                                    make-lambda-case
                                                    make-lambda
                                                    make-sequence
                                                    make-application
                                                    make-conditional
                                                    make-toplevel-define
                                                    make-toplevel-set
                                                    make-toplevel-ref
                                                    make-module-set
                                                    make-module-ref
                                                    make-lexical-set
                                                    make-lexical-ref
                                                    make-primitive-ref
                                                    make-const
                                                    make-void)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("1tt"
                                                   "1ts"
                                                   "1tr"
                                                   "1tq"
                                                   "1tp"
                                                   "1to"
                                                   "1tn"
                                                   "1tm"
                                                   "1tl"
                                                   "1tk"
                                                   "1tj"
                                                   "1ti"
                                                   "1th"
                                                   "1tg"
                                                   "1tf"
                                                   "1te"
                                                   "1td"
                                                   "1tc"
                                                   "1tb"
                                                   "1ta"
                                                   "1t9"
                                                   "1t8"
                                                   "1t7"
                                                   "1t6"
                                                   "1t5"
                                                   "1t4"
                                                   "1t3"
                                                   "1t2"
                                                   "1t1"
                                                   "1t0"
                                                   "1sz"
                                                   "1sy"
                                                   "1sx"
                                                   "1sw"
                                                   "1sv"
                                                   "1su"
                                                   "1st"
                                                   "1ss"
                                                   "1sr"
                                                   "1sq"
                                                   "1sp"
                                                   "1so"
                                                   "1sn"
                                                   "1sm"
                                                   "1sl"
                                                   "1sk"
                                                   "1sj"
                                                   "1si"
                                                   "1sh"
                                                   "1sg"
                                                   "1sf"
                                                   "1se"
                                                   "1sd"
                                                   "1sc"
                                                   "1sb"
                                                   "1sa"
                                                   "1s9"
                                                   "1s8"
                                                   "1s7"
                                                   "1s6"
                                                   "1s5"
                                                   "1s4"
                                                   "1s3"
                                                   "1s2"
                                                   "1s1"
                                                   "1s0"
                                                   "1rz"
                                                   "1ry"
                                                   "1rx"
                                                   "1rw"
                                                   "1rv"
                                                   "1ru"
                                                   "1rt"
                                                   "1rs"
                                                   "1rr"
                                                   "1rq"
                                                   "1rp"
                                                   "1ro"
                                                   "1rn"
                                                   "1rm"
                                                   "1rl"
                                                   "1rk"
                                                   "1rj"
                                                   "1ri"
                                                   "1rh"
                                                   "1rg"
                                                   "1rf"
                                                   "1re"
                                                   "1rd"
                                                   "1rc"
                                                   "1rb"
                                                   "1ra"
                                                   "1r9"
                                                   "1r8"
                                                   "1r7"
                                                   "1r6"
                                                   "1r5"
                                                   "1r4"
                                                   "1r3"
                                                   "1r2"
                                                   "1r1"
                                                   "1r0"
                                                   "1qz"
                                                   "1qy"
                                                   "1qx"
                                                   "1qw"
                                                   "1qv"
                                                   "1qu"
                                                   "1qt"
                                                   "1qs"
                                                   "1qr"
                                                   "1qq"
                                                   "1qp"
                                                   "1qo"
                                                   "1qn"
                                                   "1qm"
                                                   "1ql"
                                                   "1qk"
                                                   "1qj"
                                                   "1qi"
                                                   "1qh"
                                                   "1qg"
                                                   "1qf"
                                                   "1qe"
                                                   "1qd"
                                                   "1qc"
                                                   "1qb"
                                                   "1qa"
                                                   "1q9"
                                                   "1q8"
                                                   "1q7"
                                                   "1q6"
                                                   "1q5"
                                                   "1q4"
                                                   "1q3"
                                                   "1q2"
                                                   "1q1"
                                                   "1q0"
                                                   "1pz"
                                                   "1py"))
                                                #(ribcage
                                                  (define-structure
                                                    define-expansion-accessors
                                                    define-expansion-constructors)
                                                  ((top) (top) (top))
                                                  ("1og" "1of" "1oe")))
                                               (hygiene guile))
                                            #{head _85hotwsCta0JfYIjI4LB1}#)))
                                (call-with-values
                                  (lambda ()
                                    (#{syntax-type _85hotwsCta0JfYIjI4J4K}#
                                      #{e _85hotwsCta0JfYIjI4LGL}#
                                      #{r _85hotwsCta0JfYIjI4K6B}#
                                      #{w _85hotwsCta0JfYIjI4K6C}#
                                      (#{source-annotation _85hotwsCta0JfYIjI4J3g}#
                                        #{e _85hotwsCta0JfYIjI4LGL}#)
                                      #f
                                      #{mod _85hotwsCta0JfYIjI4K6E}#
                                      #f))
                                  (lambda (#{type _85hotwsCta0JfYIjI4LGS}#
                                           #{value _85hotwsCta0JfYIjI4LGT}#
                                           #{e _85hotwsCta0JfYIjI4LGU}#
                                           #{w _85hotwsCta0JfYIjI4LGV}#
                                           #{s _85hotwsCta0JfYIjI4LGW}#
                                           #{mod _85hotwsCta0JfYIjI4LGX}#)
                                    (#{expand-expr _85hotwsCta0JfYIjI4J4M}#
                                      #{type _85hotwsCta0JfYIjI4LGS}#
                                      #{value _85hotwsCta0JfYIjI4LGT}#
                                      #{e _85hotwsCta0JfYIjI4LGU}#
                                      #{r _85hotwsCta0JfYIjI4K6B}#
                                      #{w _85hotwsCta0JfYIjI4LGV}#
                                      #{s _85hotwsCta0JfYIjI4LGW}#
                                      #{mod _85hotwsCta0JfYIjI4LGX}#))))
                              (map (lambda (#{e _85hotwsCta0JfYIjI4LGb}#)
                                     (call-with-values
                                       (lambda ()
                                         (#{syntax-type _85hotwsCta0JfYIjI4J4K}#
                                           #{e _85hotwsCta0JfYIjI4LGb}#
                                           #{r _85hotwsCta0JfYIjI4K6B}#
                                           #{w _85hotwsCta0JfYIjI4K6C}#
                                           (#{source-annotation _85hotwsCta0JfYIjI4J3g}#
                                             #{e _85hotwsCta0JfYIjI4LGb}#)
                                           #f
                                           #{mod _85hotwsCta0JfYIjI4K6E}#
                                           #f))
                                       (lambda (#{type _85hotwsCta0JfYIjI4LGq}#
                                                #{value _85hotwsCta0JfYIjI4LGr}#
                                                #{e _85hotwsCta0JfYIjI4LGs}#
                                                #{w _85hotwsCta0JfYIjI4LGt}#
                                                #{s _85hotwsCta0JfYIjI4LGu}#
                                                #{mod _85hotwsCta0JfYIjI4LGv}#)
                                         (#{expand-expr _85hotwsCta0JfYIjI4J4M}#
                                           #{type _85hotwsCta0JfYIjI4LGq}#
                                           #{value _85hotwsCta0JfYIjI4LGr}#
                                           #{e _85hotwsCta0JfYIjI4LGs}#
                                           #{r _85hotwsCta0JfYIjI4K6B}#
                                           #{w _85hotwsCta0JfYIjI4LGt}#
                                           #{s _85hotwsCta0JfYIjI4LGu}#
                                           #{mod _85hotwsCta0JfYIjI4LGv}#))))
                                   (append
                                     #{tail _85hotwsCta0JfYIjI4LB2}#
                                     (list #{val _85hotwsCta0JfYIjI4LB3}#))))))))
                    #{tmp _85hotwsCta0JfYIjI4LBx}#)
                  (syntax-violation
                    'set!
                    "bad set!"
                    (#{wrap _85hotwsCta0JfYIjI4J4E}#
                      (begin
                        (if (if (pair? #{e _85hotwsCta0JfYIjI4K6A}#)
                              #{s _85hotwsCta0JfYIjI4K6D}#
                              #f)
                          (set-source-properties!
                            #{e _85hotwsCta0JfYIjI4K6A}#
                            #{s _85hotwsCta0JfYIjI4K6D}#))
                        #{e _85hotwsCta0JfYIjI4K6A}#)
                      #{w _85hotwsCta0JfYIjI4K6C}#
                      #{mod _85hotwsCta0JfYIjI4K6E}#))))))))
      (module-define!
        (current-module)
        '@
        (make-syntax-transformer
          '@
          'module-ref
          (lambda (#{e _85hotwsCta0JfYIjI4LHa}#
                   #{r _85hotwsCta0JfYIjI4LHb}#
                   #{w _85hotwsCta0JfYIjI4LHc}#)
            (let ((#{tmp _85hotwsCta0JfYIjI4LHe}#
                    ($sc-dispatch
                      #{e _85hotwsCta0JfYIjI4LHa}#
                      '(_ each-any any))))
              (if (if #{tmp _85hotwsCta0JfYIjI4LHe}#
                    (@apply
                      (lambda (#{mod _85hotwsCta0JfYIjI4LHh}#
                               #{id _85hotwsCta0JfYIjI4LHi}#)
                        (if (and-map
                              #{id? _85hotwsCta0JfYIjI4J3n}#
                              #{mod _85hotwsCta0JfYIjI4LHh}#)
                          (if (symbol? #{id _85hotwsCta0JfYIjI4LHi}#)
                            #t
                            (if (if (vector? #{id _85hotwsCta0JfYIjI4LHi}#)
                                  (if (= (vector-length
                                           #{id _85hotwsCta0JfYIjI4LHi}#)
                                         4)
                                    (eq? (vector-ref
                                           #{id _85hotwsCta0JfYIjI4LHi}#
                                           0)
                                         'syntax-object)
                                    #f)
                                  #f)
                              (symbol?
                                (vector-ref #{id _85hotwsCta0JfYIjI4LHi}# 1))
                              #f))
                          #f))
                      #{tmp _85hotwsCta0JfYIjI4LHe}#)
                    #f)
                (@apply
                  (lambda (#{mod _85hotwsCta0JfYIjI4LIK}#
                           #{id _85hotwsCta0JfYIjI4LIL}#)
                    (values
                      (syntax->datum #{id _85hotwsCta0JfYIjI4LIL}#)
                      #{r _85hotwsCta0JfYIjI4LHb}#
                      #{w _85hotwsCta0JfYIjI4LHc}#
                      #f
                      (syntax->datum
                        (cons '#(syntax-object
                                 public
                                 ((top)
                                  #(ribcage
                                    #(mod id)
                                    #((top) (top))
                                    #("2sv" "2sw"))
                                  #(ribcage () () ())
                                  #(ribcage
                                    #(e r w)
                                    #((top) (top) (top))
                                    #("2sq" "2sr" "2ss"))
                                  #(ribcage
                                    (lambda-var-list
                                      gen-var
                                      strip
                                      expand-lambda-case
                                      lambda*-formals
                                      expand-simple-lambda
                                      lambda-formals
                                      ellipsis?
                                      expand-void
                                      eval-local-transformer
                                      expand-local-syntax
                                      expand-body
                                      expand-macro
                                      expand-application
                                      expand-expr
                                      expand
                                      syntax-type
                                      parse-when-list
                                      expand-install-global
                                      expand-top-sequence
                                      expand-sequence
                                      source-wrap
                                      wrap
                                      bound-id-member?
                                      distinct-bound-ids?
                                      valid-bound-ids?
                                      bound-id=?
                                      free-id=?
                                      with-transformer-environment
                                      transformer-environment
                                      resolve-identifier
                                      locally-bound-identifiers
                                      id-var-name
                                      same-marks?
                                      join-marks
                                      join-wraps
                                      smart-append
                                      make-binding-wrap
                                      extend-ribcage!
                                      make-empty-ribcage
                                      new-mark
                                      anti-mark
                                      the-anti-mark
                                      top-marked?
                                      top-wrap
                                      empty-wrap
                                      set-ribcage-labels!
                                      set-ribcage-marks!
                                      set-ribcage-symnames!
                                      ribcage-labels
                                      ribcage-marks
                                      ribcage-symnames
                                      ribcage?
                                      make-ribcage
                                      gen-labels
                                      gen-label
                                      make-rename
                                      rename-marks
                                      rename-new
                                      rename-old
                                      subst-rename?
                                      wrap-subst
                                      wrap-marks
                                      make-wrap
                                      id-sym-name&marks
                                      id-sym-name
                                      id?
                                      nonsymbol-id?
                                      global-extend
                                      lookup
                                      macros-only-env
                                      extend-var-env
                                      extend-env
                                      null-env
                                      binding-value
                                      binding-type
                                      make-binding
                                      arg-check
                                      source-annotation
                                      no-source
                                      set-syntax-object-module!
                                      set-syntax-object-wrap!
                                      set-syntax-object-expression!
                                      syntax-object-module
                                      syntax-object-wrap
                                      syntax-object-expression
                                      syntax-object?
                                      make-syntax-object
                                      build-lexical-var
                                      build-letrec
                                      build-named-let
                                      build-let
                                      build-sequence
                                      build-data
                                      build-primref
                                      build-lambda-case
                                      build-case-lambda
                                      build-simple-lambda
                                      build-global-definition
                                      build-global-assignment
                                      build-global-reference
                                      analyze-variable
                                      build-lexical-assignment
                                      build-lexical-reference
                                      build-dynlet
                                      build-conditional
                                      build-application
                                      build-void
                                      maybe-name-value!
                                      decorate-source
                                      get-global-definition-hook
                                      put-global-definition-hook
                                      gensym-hook
                                      local-eval-hook
                                      top-level-eval-hook
                                      fx<
                                      fx=
                                      fx-
                                      fx+
                                      set-lambda-meta!
                                      lambda-meta
                                      lambda?
                                      make-dynlet
                                      make-letrec
                                      make-let
                                      make-lambda-case
                                      make-lambda
                                      make-sequence
                                      make-application
                                      make-conditional
                                      make-toplevel-define
                                      make-toplevel-set
                                      make-toplevel-ref
                                      make-module-set
                                      make-module-ref
                                      make-lexical-set
                                      make-lexical-ref
                                      make-primitive-ref
                                      make-const
                                      make-void)
                                    ((top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top))
                                    ("1tt"
                                     "1ts"
                                     "1tr"
                                     "1tq"
                                     "1tp"
                                     "1to"
                                     "1tn"
                                     "1tm"
                                     "1tl"
                                     "1tk"
                                     "1tj"
                                     "1ti"
                                     "1th"
                                     "1tg"
                                     "1tf"
                                     "1te"
                                     "1td"
                                     "1tc"
                                     "1tb"
                                     "1ta"
                                     "1t9"
                                     "1t8"
                                     "1t7"
                                     "1t6"
                                     "1t5"
                                     "1t4"
                                     "1t3"
                                     "1t2"
                                     "1t1"
                                     "1t0"
                                     "1sz"
                                     "1sy"
                                     "1sx"
                                     "1sw"
                                     "1sv"
                                     "1su"
                                     "1st"
                                     "1ss"
                                     "1sr"
                                     "1sq"
                                     "1sp"
                                     "1so"
                                     "1sn"
                                     "1sm"
                                     "1sl"
                                     "1sk"
                                     "1sj"
                                     "1si"
                                     "1sh"
                                     "1sg"
                                     "1sf"
                                     "1se"
                                     "1sd"
                                     "1sc"
                                     "1sb"
                                     "1sa"
                                     "1s9"
                                     "1s8"
                                     "1s7"
                                     "1s6"
                                     "1s5"
                                     "1s4"
                                     "1s3"
                                     "1s2"
                                     "1s1"
                                     "1s0"
                                     "1rz"
                                     "1ry"
                                     "1rx"
                                     "1rw"
                                     "1rv"
                                     "1ru"
                                     "1rt"
                                     "1rs"
                                     "1rr"
                                     "1rq"
                                     "1rp"
                                     "1ro"
                                     "1rn"
                                     "1rm"
                                     "1rl"
                                     "1rk"
                                     "1rj"
                                     "1ri"
                                     "1rh"
                                     "1rg"
                                     "1rf"
                                     "1re"
                                     "1rd"
                                     "1rc"
                                     "1rb"
                                     "1ra"
                                     "1r9"
                                     "1r8"
                                     "1r7"
                                     "1r6"
                                     "1r5"
                                     "1r4"
                                     "1r3"
                                     "1r2"
                                     "1r1"
                                     "1r0"
                                     "1qz"
                                     "1qy"
                                     "1qx"
                                     "1qw"
                                     "1qv"
                                     "1qu"
                                     "1qt"
                                     "1qs"
                                     "1qr"
                                     "1qq"
                                     "1qp"
                                     "1qo"
                                     "1qn"
                                     "1qm"
                                     "1ql"
                                     "1qk"
                                     "1qj"
                                     "1qi"
                                     "1qh"
                                     "1qg"
                                     "1qf"
                                     "1qe"
                                     "1qd"
                                     "1qc"
                                     "1qb"
                                     "1qa"
                                     "1q9"
                                     "1q8"
                                     "1q7"
                                     "1q6"
                                     "1q5"
                                     "1q4"
                                     "1q3"
                                     "1q2"
                                     "1q1"
                                     "1q0"
                                     "1pz"
                                     "1py"))
                                  #(ribcage
                                    (define-structure
                                      define-expansion-accessors
                                      define-expansion-constructors)
                                    ((top) (top) (top))
                                    ("1og" "1of" "1oe")))
                                 (hygiene guile))
                              #{mod _85hotwsCta0JfYIjI4LIK}#))))
                  #{tmp _85hotwsCta0JfYIjI4LHe}#)
                (syntax-violation
                  #f
                  "source expression failed to match any pattern"
                  #{e _85hotwsCta0JfYIjI4LHa}#))))))
      (#{global-extend _85hotwsCta0JfYIjI4J3l}#
        'module-ref
        '@@
        (lambda (#{e _85hotwsCta0JfYIjI4LJn}#
                 #{r _85hotwsCta0JfYIjI4LJo}#
                 #{w _85hotwsCta0JfYIjI4LJp}#)
          (letrec*
            ((#{remodulate _85hotwsCta0JfYIjI4LJq}#
               (lambda (#{x _85hotwsCta0JfYIjI4LKN}#
                        #{mod _85hotwsCta0JfYIjI4LKO}#)
                 (if (pair? #{x _85hotwsCta0JfYIjI4LKN}#)
                   (cons (#{remodulate _85hotwsCta0JfYIjI4LJq}#
                           (car #{x _85hotwsCta0JfYIjI4LKN}#)
                           #{mod _85hotwsCta0JfYIjI4LKO}#)
                         (#{remodulate _85hotwsCta0JfYIjI4LJq}#
                           (cdr #{x _85hotwsCta0JfYIjI4LKN}#)
                           #{mod _85hotwsCta0JfYIjI4LKO}#))
                   (if (if (vector? #{x _85hotwsCta0JfYIjI4LKN}#)
                         (if (= (vector-length #{x _85hotwsCta0JfYIjI4LKN}#)
                                4)
                           (eq? (vector-ref #{x _85hotwsCta0JfYIjI4LKN}# 0)
                                'syntax-object)
                           #f)
                         #f)
                     (let ((#{expression _85hotwsCta0JfYIjI4LKc}#
                             (#{remodulate _85hotwsCta0JfYIjI4LJq}#
                               (vector-ref #{x _85hotwsCta0JfYIjI4LKN}# 1)
                               #{mod _85hotwsCta0JfYIjI4LKO}#))
                           (#{wrap _85hotwsCta0JfYIjI4LKd}#
                             (vector-ref #{x _85hotwsCta0JfYIjI4LKN}# 2)))
                       (vector
                         'syntax-object
                         #{expression _85hotwsCta0JfYIjI4LKc}#
                         #{wrap _85hotwsCta0JfYIjI4LKd}#
                         #{mod _85hotwsCta0JfYIjI4LKO}#))
                     (if (vector? #{x _85hotwsCta0JfYIjI4LKN}#)
                       (let ((#{n _85hotwsCta0JfYIjI4LKl}#
                               (vector-length #{x _85hotwsCta0JfYIjI4LKN}#)))
                         (let ((#{v _85hotwsCta0JfYIjI4LKm}#
                                 (make-vector #{n _85hotwsCta0JfYIjI4LKl}#)))
                           (letrec*
                             ((#{loop _85hotwsCta0JfYIjI4LKn}#
                                (lambda (#{i _85hotwsCta0JfYIjI4LLW}#)
                                  (if (= #{i _85hotwsCta0JfYIjI4LLW}#
                                         #{n _85hotwsCta0JfYIjI4LKl}#)
                                    #{v _85hotwsCta0JfYIjI4LKm}#
                                    (begin
                                      (vector-set!
                                        #{v _85hotwsCta0JfYIjI4LKm}#
                                        #{i _85hotwsCta0JfYIjI4LLW}#
                                        (#{remodulate _85hotwsCta0JfYIjI4LJq}#
                                          (vector-ref
                                            #{x _85hotwsCta0JfYIjI4LKN}#
                                            #{i _85hotwsCta0JfYIjI4LLW}#)
                                          #{mod _85hotwsCta0JfYIjI4LKO}#))
                                      (#{loop _85hotwsCta0JfYIjI4LKn}#
                                        (#{1+}# #{i _85hotwsCta0JfYIjI4LLW}#)))))))
                             (#{loop _85hotwsCta0JfYIjI4LKn}# 0))))
                       #{x _85hotwsCta0JfYIjI4LKN}#))))))
            (let ((#{tmp _85hotwsCta0JfYIjI4LJs}#
                    ($sc-dispatch
                      #{e _85hotwsCta0JfYIjI4LJn}#
                      '(_ each-any any))))
              (if (if #{tmp _85hotwsCta0JfYIjI4LJs}#
                    (@apply
                      (lambda (#{mod _85hotwsCta0JfYIjI4LJw}#
                               #{exp _85hotwsCta0JfYIjI4LJx}#)
                        (and-map
                          #{id? _85hotwsCta0JfYIjI4J3n}#
                          #{mod _85hotwsCta0JfYIjI4LJw}#))
                      #{tmp _85hotwsCta0JfYIjI4LJs}#)
                    #f)
                (@apply
                  (lambda (#{mod _85hotwsCta0JfYIjI4LKB}#
                           #{exp _85hotwsCta0JfYIjI4LKC}#)
                    (let ((#{mod _85hotwsCta0JfYIjI4LKD}#
                            (syntax->datum
                              (cons '#(syntax-object
                                       private
                                       ((top)
                                        #(ribcage
                                          #(mod exp)
                                          #((top) (top))
                                          #("2t9" "2ta"))
                                        #(ribcage (remodulate) ((top)) ("2t0"))
                                        #(ribcage
                                          #(e r w)
                                          #((top) (top) (top))
                                          #("2sx" "2sy" "2sz"))
                                        #(ribcage
                                          (lambda-var-list
                                            gen-var
                                            strip
                                            expand-lambda-case
                                            lambda*-formals
                                            expand-simple-lambda
                                            lambda-formals
                                            ellipsis?
                                            expand-void
                                            eval-local-transformer
                                            expand-local-syntax
                                            expand-body
                                            expand-macro
                                            expand-application
                                            expand-expr
                                            expand
                                            syntax-type
                                            parse-when-list
                                            expand-install-global
                                            expand-top-sequence
                                            expand-sequence
                                            source-wrap
                                            wrap
                                            bound-id-member?
                                            distinct-bound-ids?
                                            valid-bound-ids?
                                            bound-id=?
                                            free-id=?
                                            with-transformer-environment
                                            transformer-environment
                                            resolve-identifier
                                            locally-bound-identifiers
                                            id-var-name
                                            same-marks?
                                            join-marks
                                            join-wraps
                                            smart-append
                                            make-binding-wrap
                                            extend-ribcage!
                                            make-empty-ribcage
                                            new-mark
                                            anti-mark
                                            the-anti-mark
                                            top-marked?
                                            top-wrap
                                            empty-wrap
                                            set-ribcage-labels!
                                            set-ribcage-marks!
                                            set-ribcage-symnames!
                                            ribcage-labels
                                            ribcage-marks
                                            ribcage-symnames
                                            ribcage?
                                            make-ribcage
                                            gen-labels
                                            gen-label
                                            make-rename
                                            rename-marks
                                            rename-new
                                            rename-old
                                            subst-rename?
                                            wrap-subst
                                            wrap-marks
                                            make-wrap
                                            id-sym-name&marks
                                            id-sym-name
                                            id?
                                            nonsymbol-id?
                                            global-extend
                                            lookup
                                            macros-only-env
                                            extend-var-env
                                            extend-env
                                            null-env
                                            binding-value
                                            binding-type
                                            make-binding
                                            arg-check
                                            source-annotation
                                            no-source
                                            set-syntax-object-module!
                                            set-syntax-object-wrap!
                                            set-syntax-object-expression!
                                            syntax-object-module
                                            syntax-object-wrap
                                            syntax-object-expression
                                            syntax-object?
                                            make-syntax-object
                                            build-lexical-var
                                            build-letrec
                                            build-named-let
                                            build-let
                                            build-sequence
                                            build-data
                                            build-primref
                                            build-lambda-case
                                            build-case-lambda
                                            build-simple-lambda
                                            build-global-definition
                                            build-global-assignment
                                            build-global-reference
                                            analyze-variable
                                            build-lexical-assignment
                                            build-lexical-reference
                                            build-dynlet
                                            build-conditional
                                            build-application
                                            build-void
                                            maybe-name-value!
                                            decorate-source
                                            get-global-definition-hook
                                            put-global-definition-hook
                                            gensym-hook
                                            local-eval-hook
                                            top-level-eval-hook
                                            fx<
                                            fx=
                                            fx-
                                            fx+
                                            set-lambda-meta!
                                            lambda-meta
                                            lambda?
                                            make-dynlet
                                            make-letrec
                                            make-let
                                            make-lambda-case
                                            make-lambda
                                            make-sequence
                                            make-application
                                            make-conditional
                                            make-toplevel-define
                                            make-toplevel-set
                                            make-toplevel-ref
                                            make-module-set
                                            make-module-ref
                                            make-lexical-set
                                            make-lexical-ref
                                            make-primitive-ref
                                            make-const
                                            make-void)
                                          ((top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top))
                                          ("1tt"
                                           "1ts"
                                           "1tr"
                                           "1tq"
                                           "1tp"
                                           "1to"
                                           "1tn"
                                           "1tm"
                                           "1tl"
                                           "1tk"
                                           "1tj"
                                           "1ti"
                                           "1th"
                                           "1tg"
                                           "1tf"
                                           "1te"
                                           "1td"
                                           "1tc"
                                           "1tb"
                                           "1ta"
                                           "1t9"
                                           "1t8"
                                           "1t7"
                                           "1t6"
                                           "1t5"
                                           "1t4"
                                           "1t3"
                                           "1t2"
                                           "1t1"
                                           "1t0"
                                           "1sz"
                                           "1sy"
                                           "1sx"
                                           "1sw"
                                           "1sv"
                                           "1su"
                                           "1st"
                                           "1ss"
                                           "1sr"
                                           "1sq"
                                           "1sp"
                                           "1so"
                                           "1sn"
                                           "1sm"
                                           "1sl"
                                           "1sk"
                                           "1sj"
                                           "1si"
                                           "1sh"
                                           "1sg"
                                           "1sf"
                                           "1se"
                                           "1sd"
                                           "1sc"
                                           "1sb"
                                           "1sa"
                                           "1s9"
                                           "1s8"
                                           "1s7"
                                           "1s6"
                                           "1s5"
                                           "1s4"
                                           "1s3"
                                           "1s2"
                                           "1s1"
                                           "1s0"
                                           "1rz"
                                           "1ry"
                                           "1rx"
                                           "1rw"
                                           "1rv"
                                           "1ru"
                                           "1rt"
                                           "1rs"
                                           "1rr"
                                           "1rq"
                                           "1rp"
                                           "1ro"
                                           "1rn"
                                           "1rm"
                                           "1rl"
                                           "1rk"
                                           "1rj"
                                           "1ri"
                                           "1rh"
                                           "1rg"
                                           "1rf"
                                           "1re"
                                           "1rd"
                                           "1rc"
                                           "1rb"
                                           "1ra"
                                           "1r9"
                                           "1r8"
                                           "1r7"
                                           "1r6"
                                           "1r5"
                                           "1r4"
                                           "1r3"
                                           "1r2"
                                           "1r1"
                                           "1r0"
                                           "1qz"
                                           "1qy"
                                           "1qx"
                                           "1qw"
                                           "1qv"
                                           "1qu"
                                           "1qt"
                                           "1qs"
                                           "1qr"
                                           "1qq"
                                           "1qp"
                                           "1qo"
                                           "1qn"
                                           "1qm"
                                           "1ql"
                                           "1qk"
                                           "1qj"
                                           "1qi"
                                           "1qh"
                                           "1qg"
                                           "1qf"
                                           "1qe"
                                           "1qd"
                                           "1qc"
                                           "1qb"
                                           "1qa"
                                           "1q9"
                                           "1q8"
                                           "1q7"
                                           "1q6"
                                           "1q5"
                                           "1q4"
                                           "1q3"
                                           "1q2"
                                           "1q1"
                                           "1q0"
                                           "1pz"
                                           "1py"))
                                        #(ribcage
                                          (define-structure
                                            define-expansion-accessors
                                            define-expansion-constructors)
                                          ((top) (top) (top))
                                          ("1og" "1of" "1oe")))
                                       (hygiene guile))
                                    #{mod _85hotwsCta0JfYIjI4LKB}#))))
                      (values
                        (#{remodulate _85hotwsCta0JfYIjI4LJq}#
                          #{exp _85hotwsCta0JfYIjI4LKC}#
                          #{mod _85hotwsCta0JfYIjI4LKD}#)
                        #{r _85hotwsCta0JfYIjI4LJo}#
                        #{w _85hotwsCta0JfYIjI4LJp}#
                        (#{source-annotation _85hotwsCta0JfYIjI4J3g}#
                          #{exp _85hotwsCta0JfYIjI4LKC}#)
                        #{mod _85hotwsCta0JfYIjI4LKD}#)))
                  #{tmp _85hotwsCta0JfYIjI4LJs}#)
                (syntax-violation
                  #f
                  "source expression failed to match any pattern"
                  #{e _85hotwsCta0JfYIjI4LJn}#))))))
      (#{global-extend _85hotwsCta0JfYIjI4J3l}#
        'core
        'if
        (lambda (#{e _85hotwsCta0JfYIjI4LM7}#
                 #{r _85hotwsCta0JfYIjI4LM8}#
                 #{w _85hotwsCta0JfYIjI4LM9}#
                 #{s _85hotwsCta0JfYIjI4LM$}#
                 #{mod _85hotwsCta0JfYIjI4LM@}#)
          (let ((#{tmp _85hotwsCta0JfYIjI4LNB}#
                  ($sc-dispatch
                    #{e _85hotwsCta0JfYIjI4LM7}#
                    '(_ any any))))
            (if #{tmp _85hotwsCta0JfYIjI4LNB}#
              (@apply
                (lambda (#{test _85hotwsCta0JfYIjI4LNF}#
                         #{then _85hotwsCta0JfYIjI4LNG}#)
                  (#{build-conditional _85hotwsCta0JfYIjI4J3H}#
                    #{s _85hotwsCta0JfYIjI4LM$}#
                    (#{expand _85hotwsCta0JfYIjI4J4L}#
                      #{test _85hotwsCta0JfYIjI4LNF}#
                      #{r _85hotwsCta0JfYIjI4LM8}#
                      #{w _85hotwsCta0JfYIjI4LM9}#
                      #{mod _85hotwsCta0JfYIjI4LM@}#)
                    (#{expand _85hotwsCta0JfYIjI4J4L}#
                      #{then _85hotwsCta0JfYIjI4LNG}#
                      #{r _85hotwsCta0JfYIjI4LM8}#
                      #{w _85hotwsCta0JfYIjI4LM9}#
                      #{mod _85hotwsCta0JfYIjI4LM@}#)
                    (make-struct/no-tail
                      (vector-ref %expanded-vtables 0)
                      #f)))
                #{tmp _85hotwsCta0JfYIjI4LNB}#)
              (let ((#{tmp _85hotwsCta0JfYIjI4LQn}#
                      ($sc-dispatch
                        #{e _85hotwsCta0JfYIjI4LM7}#
                        '(_ any any any))))
                (if #{tmp _85hotwsCta0JfYIjI4LQn}#
                  (@apply
                    (lambda (#{test _85hotwsCta0JfYIjI4LQr}#
                             #{then _85hotwsCta0JfYIjI4LQs}#
                             #{else _85hotwsCta0JfYIjI4LQt}#)
                      (#{build-conditional _85hotwsCta0JfYIjI4J3H}#
                        #{s _85hotwsCta0JfYIjI4LM$}#
                        (#{expand _85hotwsCta0JfYIjI4J4L}#
                          #{test _85hotwsCta0JfYIjI4LQr}#
                          #{r _85hotwsCta0JfYIjI4LM8}#
                          #{w _85hotwsCta0JfYIjI4LM9}#
                          #{mod _85hotwsCta0JfYIjI4LM@}#)
                        (#{expand _85hotwsCta0JfYIjI4J4L}#
                          #{then _85hotwsCta0JfYIjI4LQs}#
                          #{r _85hotwsCta0JfYIjI4LM8}#
                          #{w _85hotwsCta0JfYIjI4LM9}#
                          #{mod _85hotwsCta0JfYIjI4LM@}#)
                        (#{expand _85hotwsCta0JfYIjI4J4L}#
                          #{else _85hotwsCta0JfYIjI4LQt}#
                          #{r _85hotwsCta0JfYIjI4LM8}#
                          #{w _85hotwsCta0JfYIjI4LM9}#
                          #{mod _85hotwsCta0JfYIjI4LM@}#)))
                    #{tmp _85hotwsCta0JfYIjI4LQn}#)
                  (syntax-violation
                    #f
                    "source expression failed to match any pattern"
                    #{e _85hotwsCta0JfYIjI4LM7}#)))))))
      (#{global-extend _85hotwsCta0JfYIjI4J3l}#
        'core
        'with-fluids
        (lambda (#{e _85hotwsCta0JfYIjI4LW8}#
                 #{r _85hotwsCta0JfYIjI4LW9}#
                 #{w _85hotwsCta0JfYIjI4LW$}#
                 #{s _85hotwsCta0JfYIjI4LW@}#
                 #{mod _85hotwsCta0JfYIjI4LXA}#)
          (let ((#{tmp _85hotwsCta0JfYIjI4LXC}#
                  ($sc-dispatch
                    #{e _85hotwsCta0JfYIjI4LW8}#
                    '(_ #(each (any any)) any . each-any))))
            (if #{tmp _85hotwsCta0JfYIjI4LXC}#
              (@apply
                (lambda (#{fluid _85hotwsCta0JfYIjI4LXG}#
                         #{val _85hotwsCta0JfYIjI4LXH}#
                         #{b _85hotwsCta0JfYIjI4LXI}#
                         #{b* _85hotwsCta0JfYIjI4LXJ}#)
                  (#{build-dynlet _85hotwsCta0JfYIjI4J3I}#
                    #{s _85hotwsCta0JfYIjI4LW@}#
                    (map (lambda (#{x _85hotwsCta0JfYIjI4LYa}#)
                           (#{expand _85hotwsCta0JfYIjI4J4L}#
                             #{x _85hotwsCta0JfYIjI4LYa}#
                             #{r _85hotwsCta0JfYIjI4LW9}#
                             #{w _85hotwsCta0JfYIjI4LW$}#
                             #{mod _85hotwsCta0JfYIjI4LXA}#))
                         #{fluid _85hotwsCta0JfYIjI4LXG}#)
                    (map (lambda (#{x _85hotwsCta0JfYIjI4LZg}#)
                           (#{expand _85hotwsCta0JfYIjI4J4L}#
                             #{x _85hotwsCta0JfYIjI4LZg}#
                             #{r _85hotwsCta0JfYIjI4LW9}#
                             #{w _85hotwsCta0JfYIjI4LW$}#
                             #{mod _85hotwsCta0JfYIjI4LXA}#))
                         #{val _85hotwsCta0JfYIjI4LXH}#)
                    (#{expand-body _85hotwsCta0JfYIjI4J4P}#
                      (cons #{b _85hotwsCta0JfYIjI4LXI}#
                            #{b* _85hotwsCta0JfYIjI4LXJ}#)
                      (#{wrap _85hotwsCta0JfYIjI4J4E}#
                        (begin
                          (if (if (pair? #{e _85hotwsCta0JfYIjI4LW8}#)
                                #{s _85hotwsCta0JfYIjI4LW@}#
                                #f)
                            (set-source-properties!
                              #{e _85hotwsCta0JfYIjI4LW8}#
                              #{s _85hotwsCta0JfYIjI4LW@}#))
                          #{e _85hotwsCta0JfYIjI4LW8}#)
                        #{w _85hotwsCta0JfYIjI4LW$}#
                        #{mod _85hotwsCta0JfYIjI4LXA}#)
                      #{r _85hotwsCta0JfYIjI4LW9}#
                      #{w _85hotwsCta0JfYIjI4LW$}#
                      #{mod _85hotwsCta0JfYIjI4LXA}#)))
                #{tmp _85hotwsCta0JfYIjI4LXC}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{e _85hotwsCta0JfYIjI4LW8}#)))))
      (module-define!
        (current-module)
        'begin
        (make-syntax-transformer 'begin 'begin '()))
      (module-define!
        (current-module)
        'define
        (make-syntax-transformer 'define 'define '()))
      (module-define!
        (current-module)
        'define-syntax
        (make-syntax-transformer
          'define-syntax
          'define-syntax
          '()))
      (module-define!
        (current-module)
        'define-syntax-parameter
        (make-syntax-transformer
          'define-syntax-parameter
          'define-syntax-parameter
          '()))
      (module-define!
        (current-module)
        'eval-when
        (make-syntax-transformer
          'eval-when
          'eval-when
          '()))
      (#{global-extend _85hotwsCta0JfYIjI4J3l}#
        'core
        'syntax-case
        (letrec*
          ((#{convert-pattern _85hotwsCta0JfYIjI4LfQ}#
             (lambda (#{pattern _85hotwsCta0JfYIjI4L4L}#
                      #{keys _85hotwsCta0JfYIjI4L4M}#)
               (letrec*
                 ((#{cvt* _85hotwsCta0JfYIjI4L4N}#
                    (lambda (#{p* _85hotwsCta0JfYIjI4MB9}#
                             #{n _85hotwsCta0JfYIjI4MB$}#
                             #{ids _85hotwsCta0JfYIjI4MB@}#)
                      (if (not (pair? #{p* _85hotwsCta0JfYIjI4MB9}#))
                        (#{cvt _85hotwsCta0JfYIjI4L4P}#
                          #{p* _85hotwsCta0JfYIjI4MB9}#
                          #{n _85hotwsCta0JfYIjI4MB$}#
                          #{ids _85hotwsCta0JfYIjI4MB@}#)
                        (call-with-values
                          (lambda ()
                            (#{cvt* _85hotwsCta0JfYIjI4L4N}#
                              (cdr #{p* _85hotwsCta0JfYIjI4MB9}#)
                              #{n _85hotwsCta0JfYIjI4MB$}#
                              #{ids _85hotwsCta0JfYIjI4MB@}#))
                          (lambda (#{y _85hotwsCta0JfYIjI4MCC}#
                                   #{ids _85hotwsCta0JfYIjI4MCD}#)
                            (call-with-values
                              (lambda ()
                                (#{cvt _85hotwsCta0JfYIjI4L4P}#
                                  (car #{p* _85hotwsCta0JfYIjI4MB9}#)
                                  #{n _85hotwsCta0JfYIjI4MB$}#
                                  #{ids _85hotwsCta0JfYIjI4MCD}#))
                              (lambda (#{x _85hotwsCta0JfYIjI4MCG}#
                                       #{ids _85hotwsCta0JfYIjI4MCH}#)
                                (values
                                  (cons #{x _85hotwsCta0JfYIjI4MCG}#
                                        #{y _85hotwsCta0JfYIjI4MCC}#)
                                  #{ids _85hotwsCta0JfYIjI4MCH}#))))))))
                  (#{v-reverse _85hotwsCta0JfYIjI4L4O}#
                    (lambda (#{x _85hotwsCta0JfYIjI4MCI}#)
                      (letrec*
                        ((#{loop _85hotwsCta0JfYIjI4MCJ}#
                           (lambda (#{r _85hotwsCta0JfYIjI4MDZ}#
                                    #{x _85hotwsCta0JfYIjI4MDa}#)
                             (if (not (pair? #{x _85hotwsCta0JfYIjI4MDa}#))
                               (values
                                 #{r _85hotwsCta0JfYIjI4MDZ}#
                                 #{x _85hotwsCta0JfYIjI4MDa}#)
                               (#{loop _85hotwsCta0JfYIjI4MCJ}#
                                 (cons (car #{x _85hotwsCta0JfYIjI4MDa}#)
                                       #{r _85hotwsCta0JfYIjI4MDZ}#)
                                 (cdr #{x _85hotwsCta0JfYIjI4MDa}#))))))
                        (#{loop _85hotwsCta0JfYIjI4MCJ}#
                          '()
                          #{x _85hotwsCta0JfYIjI4MCI}#))))
                  (#{cvt _85hotwsCta0JfYIjI4L4P}#
                    (lambda (#{p _85hotwsCta0JfYIjI4L4S}#
                             #{n _85hotwsCta0JfYIjI4L4T}#
                             #{ids _85hotwsCta0JfYIjI4L4U}#)
                      (if (if (symbol? #{p _85hotwsCta0JfYIjI4L4S}#)
                            #t
                            (if (if (vector? #{p _85hotwsCta0JfYIjI4L4S}#)
                                  (if (= (vector-length
                                           #{p _85hotwsCta0JfYIjI4L4S}#)
                                         4)
                                    (eq? (vector-ref
                                           #{p _85hotwsCta0JfYIjI4L4S}#
                                           0)
                                         'syntax-object)
                                    #f)
                                  #f)
                              (symbol?
                                (vector-ref #{p _85hotwsCta0JfYIjI4L4S}# 1))
                              #f))
                        (if (#{bound-id-member? _85hotwsCta0JfYIjI4J4D}#
                              #{p _85hotwsCta0JfYIjI4L4S}#
                              #{keys _85hotwsCta0JfYIjI4L4M}#)
                          (values
                            (vector 'free-id #{p _85hotwsCta0JfYIjI4L4S}#)
                            #{ids _85hotwsCta0JfYIjI4L4U}#)
                          (if (if (eq? (if (if (vector?
                                                 #{p _85hotwsCta0JfYIjI4L4S}#)
                                             (if (= (vector-length
                                                      #{p _85hotwsCta0JfYIjI4L4S}#)
                                                    4)
                                               (eq? (vector-ref
                                                      #{p _85hotwsCta0JfYIjI4L4S}#
                                                      0)
                                                    'syntax-object)
                                               #f)
                                             #f)
                                         (vector-ref
                                           #{p _85hotwsCta0JfYIjI4L4S}#
                                           1)
                                         #{p _85hotwsCta0JfYIjI4L4S}#)
                                       (if (if (= (vector-length
                                                    '#(syntax-object
                                                       _
                                                       ((top)
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(p n ids)
                                                          #((top) (top) (top))
                                                          #("2uh" "2ui" "2uj"))
                                                        #(ribcage
                                                          (cvt v-reverse cvt*)
                                                          ((top) (top) (top))
                                                          ("2u5" "2u4" "2u3"))
                                                        #(ribcage
                                                          #(pattern keys)
                                                          #((top) (top))
                                                          #("2u1" "2u2"))
                                                        #(ribcage
                                                          (gen-syntax-case
                                                            gen-clause
                                                            build-dispatch-call
                                                            convert-pattern)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("2u0"
                                                           "2tz"
                                                           "2ty"
                                                           "2tx"))
                                                        #(ribcage
                                                          (lambda-var-list
                                                            gen-var
                                                            strip
                                                            expand-lambda-case
                                                            lambda*-formals
                                                            expand-simple-lambda
                                                            lambda-formals
                                                            ellipsis?
                                                            expand-void
                                                            eval-local-transformer
                                                            expand-local-syntax
                                                            expand-body
                                                            expand-macro
                                                            expand-application
                                                            expand-expr
                                                            expand
                                                            syntax-type
                                                            parse-when-list
                                                            expand-install-global
                                                            expand-top-sequence
                                                            expand-sequence
                                                            source-wrap
                                                            wrap
                                                            bound-id-member?
                                                            distinct-bound-ids?
                                                            valid-bound-ids?
                                                            bound-id=?
                                                            free-id=?
                                                            with-transformer-environment
                                                            transformer-environment
                                                            resolve-identifier
                                                            locally-bound-identifiers
                                                            id-var-name
                                                            same-marks?
                                                            join-marks
                                                            join-wraps
                                                            smart-append
                                                            make-binding-wrap
                                                            extend-ribcage!
                                                            make-empty-ribcage
                                                            new-mark
                                                            anti-mark
                                                            the-anti-mark
                                                            top-marked?
                                                            top-wrap
                                                            empty-wrap
                                                            set-ribcage-labels!
                                                            set-ribcage-marks!
                                                            set-ribcage-symnames!
                                                            ribcage-labels
                                                            ribcage-marks
                                                            ribcage-symnames
                                                            ribcage?
                                                            make-ribcage
                                                            gen-labels
                                                            gen-label
                                                            make-rename
                                                            rename-marks
                                                            rename-new
                                                            rename-old
                                                            subst-rename?
                                                            wrap-subst
                                                            wrap-marks
                                                            make-wrap
                                                            id-sym-name&marks
                                                            id-sym-name
                                                            id?
                                                            nonsymbol-id?
                                                            global-extend
                                                            lookup
                                                            macros-only-env
                                                            extend-var-env
                                                            extend-env
                                                            null-env
                                                            binding-value
                                                            binding-type
                                                            make-binding
                                                            arg-check
                                                            source-annotation
                                                            no-source
                                                            set-syntax-object-module!
                                                            set-syntax-object-wrap!
                                                            set-syntax-object-expression!
                                                            syntax-object-module
                                                            syntax-object-wrap
                                                            syntax-object-expression
                                                            syntax-object?
                                                            make-syntax-object
                                                            build-lexical-var
                                                            build-letrec
                                                            build-named-let
                                                            build-let
                                                            build-sequence
                                                            build-data
                                                            build-primref
                                                            build-lambda-case
                                                            build-case-lambda
                                                            build-simple-lambda
                                                            build-global-definition
                                                            build-global-assignment
                                                            build-global-reference
                                                            analyze-variable
                                                            build-lexical-assignment
                                                            build-lexical-reference
                                                            build-dynlet
                                                            build-conditional
                                                            build-application
                                                            build-void
                                                            maybe-name-value!
                                                            decorate-source
                                                            get-global-definition-hook
                                                            put-global-definition-hook
                                                            gensym-hook
                                                            local-eval-hook
                                                            top-level-eval-hook
                                                            fx<
                                                            fx=
                                                            fx-
                                                            fx+
                                                            set-lambda-meta!
                                                            lambda-meta
                                                            lambda?
                                                            make-dynlet
                                                            make-letrec
                                                            make-let
                                                            make-lambda-case
                                                            make-lambda
                                                            make-sequence
                                                            make-application
                                                            make-conditional
                                                            make-toplevel-define
                                                            make-toplevel-set
                                                            make-toplevel-ref
                                                            make-module-set
                                                            make-module-ref
                                                            make-lexical-set
                                                            make-lexical-ref
                                                            make-primitive-ref
                                                            make-const
                                                            make-void)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("1tt"
                                                           "1ts"
                                                           "1tr"
                                                           "1tq"
                                                           "1tp"
                                                           "1to"
                                                           "1tn"
                                                           "1tm"
                                                           "1tl"
                                                           "1tk"
                                                           "1tj"
                                                           "1ti"
                                                           "1th"
                                                           "1tg"
                                                           "1tf"
                                                           "1te"
                                                           "1td"
                                                           "1tc"
                                                           "1tb"
                                                           "1ta"
                                                           "1t9"
                                                           "1t8"
                                                           "1t7"
                                                           "1t6"
                                                           "1t5"
                                                           "1t4"
                                                           "1t3"
                                                           "1t2"
                                                           "1t1"
                                                           "1t0"
                                                           "1sz"
                                                           "1sy"
                                                           "1sx"
                                                           "1sw"
                                                           "1sv"
                                                           "1su"
                                                           "1st"
                                                           "1ss"
                                                           "1sr"
                                                           "1sq"
                                                           "1sp"
                                                           "1so"
                                                           "1sn"
                                                           "1sm"
                                                           "1sl"
                                                           "1sk"
                                                           "1sj"
                                                           "1si"
                                                           "1sh"
                                                           "1sg"
                                                           "1sf"
                                                           "1se"
                                                           "1sd"
                                                           "1sc"
                                                           "1sb"
                                                           "1sa"
                                                           "1s9"
                                                           "1s8"
                                                           "1s7"
                                                           "1s6"
                                                           "1s5"
                                                           "1s4"
                                                           "1s3"
                                                           "1s2"
                                                           "1s1"
                                                           "1s0"
                                                           "1rz"
                                                           "1ry"
                                                           "1rx"
                                                           "1rw"
                                                           "1rv"
                                                           "1ru"
                                                           "1rt"
                                                           "1rs"
                                                           "1rr"
                                                           "1rq"
                                                           "1rp"
                                                           "1ro"
                                                           "1rn"
                                                           "1rm"
                                                           "1rl"
                                                           "1rk"
                                                           "1rj"
                                                           "1ri"
                                                           "1rh"
                                                           "1rg"
                                                           "1rf"
                                                           "1re"
                                                           "1rd"
                                                           "1rc"
                                                           "1rb"
                                                           "1ra"
                                                           "1r9"
                                                           "1r8"
                                                           "1r7"
                                                           "1r6"
                                                           "1r5"
                                                           "1r4"
                                                           "1r3"
                                                           "1r2"
                                                           "1r1"
                                                           "1r0"
                                                           "1qz"
                                                           "1qy"
                                                           "1qx"
                                                           "1qw"
                                                           "1qv"
                                                           "1qu"
                                                           "1qt"
                                                           "1qs"
                                                           "1qr"
                                                           "1qq"
                                                           "1qp"
                                                           "1qo"
                                                           "1qn"
                                                           "1qm"
                                                           "1ql"
                                                           "1qk"
                                                           "1qj"
                                                           "1qi"
                                                           "1qh"
                                                           "1qg"
                                                           "1qf"
                                                           "1qe"
                                                           "1qd"
                                                           "1qc"
                                                           "1qb"
                                                           "1qa"
                                                           "1q9"
                                                           "1q8"
                                                           "1q7"
                                                           "1q6"
                                                           "1q5"
                                                           "1q4"
                                                           "1q3"
                                                           "1q2"
                                                           "1q1"
                                                           "1q0"
                                                           "1pz"
                                                           "1py"))
                                                        #(ribcage
                                                          (define-structure
                                                            define-expansion-accessors
                                                            define-expansion-constructors)
                                                          ((top) (top) (top))
                                                          ("1og" "1of" "1oe")))
                                                       (hygiene guile)))
                                                  4)
                                             #t
                                             #f)
                                         '_
                                         '#(syntax-object
                                            _
                                            ((top)
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(p n ids)
                                               #((top) (top) (top))
                                               #("2uh" "2ui" "2uj"))
                                             #(ribcage
                                               (cvt v-reverse cvt*)
                                               ((top) (top) (top))
                                               ("2u5" "2u4" "2u3"))
                                             #(ribcage
                                               #(pattern keys)
                                               #((top) (top))
                                               #("2u1" "2u2"))
                                             #(ribcage
                                               (gen-syntax-case
                                                 gen-clause
                                                 build-dispatch-call
                                                 convert-pattern)
                                               ((top) (top) (top) (top))
                                               ("2u0" "2tz" "2ty" "2tx"))
                                             #(ribcage
                                               (lambda-var-list
                                                 gen-var
                                                 strip
                                                 expand-lambda-case
                                                 lambda*-formals
                                                 expand-simple-lambda
                                                 lambda-formals
                                                 ellipsis?
                                                 expand-void
                                                 eval-local-transformer
                                                 expand-local-syntax
                                                 expand-body
                                                 expand-macro
                                                 expand-application
                                                 expand-expr
                                                 expand
                                                 syntax-type
                                                 parse-when-list
                                                 expand-install-global
                                                 expand-top-sequence
                                                 expand-sequence
                                                 source-wrap
                                                 wrap
                                                 bound-id-member?
                                                 distinct-bound-ids?
                                                 valid-bound-ids?
                                                 bound-id=?
                                                 free-id=?
                                                 with-transformer-environment
                                                 transformer-environment
                                                 resolve-identifier
                                                 locally-bound-identifiers
                                                 id-var-name
                                                 same-marks?
                                                 join-marks
                                                 join-wraps
                                                 smart-append
                                                 make-binding-wrap
                                                 extend-ribcage!
                                                 make-empty-ribcage
                                                 new-mark
                                                 anti-mark
                                                 the-anti-mark
                                                 top-marked?
                                                 top-wrap
                                                 empty-wrap
                                                 set-ribcage-labels!
                                                 set-ribcage-marks!
                                                 set-ribcage-symnames!
                                                 ribcage-labels
                                                 ribcage-marks
                                                 ribcage-symnames
                                                 ribcage?
                                                 make-ribcage
                                                 gen-labels
                                                 gen-label
                                                 make-rename
                                                 rename-marks
                                                 rename-new
                                                 rename-old
                                                 subst-rename?
                                                 wrap-subst
                                                 wrap-marks
                                                 make-wrap
                                                 id-sym-name&marks
                                                 id-sym-name
                                                 id?
                                                 nonsymbol-id?
                                                 global-extend
                                                 lookup
                                                 macros-only-env
                                                 extend-var-env
                                                 extend-env
                                                 null-env
                                                 binding-value
                                                 binding-type
                                                 make-binding
                                                 arg-check
                                                 source-annotation
                                                 no-source
                                                 set-syntax-object-module!
                                                 set-syntax-object-wrap!
                                                 set-syntax-object-expression!
                                                 syntax-object-module
                                                 syntax-object-wrap
                                                 syntax-object-expression
                                                 syntax-object?
                                                 make-syntax-object
                                                 build-lexical-var
                                                 build-letrec
                                                 build-named-let
                                                 build-let
                                                 build-sequence
                                                 build-data
                                                 build-primref
                                                 build-lambda-case
                                                 build-case-lambda
                                                 build-simple-lambda
                                                 build-global-definition
                                                 build-global-assignment
                                                 build-global-reference
                                                 analyze-variable
                                                 build-lexical-assignment
                                                 build-lexical-reference
                                                 build-dynlet
                                                 build-conditional
                                                 build-application
                                                 build-void
                                                 maybe-name-value!
                                                 decorate-source
                                                 get-global-definition-hook
                                                 put-global-definition-hook
                                                 gensym-hook
                                                 local-eval-hook
                                                 top-level-eval-hook
                                                 fx<
                                                 fx=
                                                 fx-
                                                 fx+
                                                 set-lambda-meta!
                                                 lambda-meta
                                                 lambda?
                                                 make-dynlet
                                                 make-letrec
                                                 make-let
                                                 make-lambda-case
                                                 make-lambda
                                                 make-sequence
                                                 make-application
                                                 make-conditional
                                                 make-toplevel-define
                                                 make-toplevel-set
                                                 make-toplevel-ref
                                                 make-module-set
                                                 make-module-ref
                                                 make-lexical-set
                                                 make-lexical-ref
                                                 make-primitive-ref
                                                 make-const
                                                 make-void)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("1tt"
                                                "1ts"
                                                "1tr"
                                                "1tq"
                                                "1tp"
                                                "1to"
                                                "1tn"
                                                "1tm"
                                                "1tl"
                                                "1tk"
                                                "1tj"
                                                "1ti"
                                                "1th"
                                                "1tg"
                                                "1tf"
                                                "1te"
                                                "1td"
                                                "1tc"
                                                "1tb"
                                                "1ta"
                                                "1t9"
                                                "1t8"
                                                "1t7"
                                                "1t6"
                                                "1t5"
                                                "1t4"
                                                "1t3"
                                                "1t2"
                                                "1t1"
                                                "1t0"
                                                "1sz"
                                                "1sy"
                                                "1sx"
                                                "1sw"
                                                "1sv"
                                                "1su"
                                                "1st"
                                                "1ss"
                                                "1sr"
                                                "1sq"
                                                "1sp"
                                                "1so"
                                                "1sn"
                                                "1sm"
                                                "1sl"
                                                "1sk"
                                                "1sj"
                                                "1si"
                                                "1sh"
                                                "1sg"
                                                "1sf"
                                                "1se"
                                                "1sd"
                                                "1sc"
                                                "1sb"
                                                "1sa"
                                                "1s9"
                                                "1s8"
                                                "1s7"
                                                "1s6"
                                                "1s5"
                                                "1s4"
                                                "1s3"
                                                "1s2"
                                                "1s1"
                                                "1s0"
                                                "1rz"
                                                "1ry"
                                                "1rx"
                                                "1rw"
                                                "1rv"
                                                "1ru"
                                                "1rt"
                                                "1rs"
                                                "1rr"
                                                "1rq"
                                                "1rp"
                                                "1ro"
                                                "1rn"
                                                "1rm"
                                                "1rl"
                                                "1rk"
                                                "1rj"
                                                "1ri"
                                                "1rh"
                                                "1rg"
                                                "1rf"
                                                "1re"
                                                "1rd"
                                                "1rc"
                                                "1rb"
                                                "1ra"
                                                "1r9"
                                                "1r8"
                                                "1r7"
                                                "1r6"
                                                "1r5"
                                                "1r4"
                                                "1r3"
                                                "1r2"
                                                "1r1"
                                                "1r0"
                                                "1qz"
                                                "1qy"
                                                "1qx"
                                                "1qw"
                                                "1qv"
                                                "1qu"
                                                "1qt"
                                                "1qs"
                                                "1qr"
                                                "1qq"
                                                "1qp"
                                                "1qo"
                                                "1qn"
                                                "1qm"
                                                "1ql"
                                                "1qk"
                                                "1qj"
                                                "1qi"
                                                "1qh"
                                                "1qg"
                                                "1qf"
                                                "1qe"
                                                "1qd"
                                                "1qc"
                                                "1qb"
                                                "1qa"
                                                "1q9"
                                                "1q8"
                                                "1q7"
                                                "1q6"
                                                "1q5"
                                                "1q4"
                                                "1q3"
                                                "1q2"
                                                "1q1"
                                                "1q0"
                                                "1pz"
                                                "1py"))
                                             #(ribcage
                                               (define-structure
                                                 define-expansion-accessors
                                                 define-expansion-constructors)
                                               ((top) (top) (top))
                                               ("1og" "1of" "1oe")))
                                            (hygiene guile))))
                                (eq? (#{id-var-name _85hotwsCta0JfYIjI4J36}#
                                       #{p _85hotwsCta0JfYIjI4L4S}#
                                       '(()))
                                     (#{id-var-name _85hotwsCta0JfYIjI4J36}#
                                       '#(syntax-object
                                          _
                                          ((top)
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(p n ids)
                                             #((top) (top) (top))
                                             #("2uh" "2ui" "2uj"))
                                           #(ribcage
                                             (cvt v-reverse cvt*)
                                             ((top) (top) (top))
                                             ("2u5" "2u4" "2u3"))
                                           #(ribcage
                                             #(pattern keys)
                                             #((top) (top))
                                             #("2u1" "2u2"))
                                           #(ribcage
                                             (gen-syntax-case
                                               gen-clause
                                               build-dispatch-call
                                               convert-pattern)
                                             ((top) (top) (top) (top))
                                             ("2u0" "2tz" "2ty" "2tx"))
                                           #(ribcage
                                             (lambda-var-list
                                               gen-var
                                               strip
                                               expand-lambda-case
                                               lambda*-formals
                                               expand-simple-lambda
                                               lambda-formals
                                               ellipsis?
                                               expand-void
                                               eval-local-transformer
                                               expand-local-syntax
                                               expand-body
                                               expand-macro
                                               expand-application
                                               expand-expr
                                               expand
                                               syntax-type
                                               parse-when-list
                                               expand-install-global
                                               expand-top-sequence
                                               expand-sequence
                                               source-wrap
                                               wrap
                                               bound-id-member?
                                               distinct-bound-ids?
                                               valid-bound-ids?
                                               bound-id=?
                                               free-id=?
                                               with-transformer-environment
                                               transformer-environment
                                               resolve-identifier
                                               locally-bound-identifiers
                                               id-var-name
                                               same-marks?
                                               join-marks
                                               join-wraps
                                               smart-append
                                               make-binding-wrap
                                               extend-ribcage!
                                               make-empty-ribcage
                                               new-mark
                                               anti-mark
                                               the-anti-mark
                                               top-marked?
                                               top-wrap
                                               empty-wrap
                                               set-ribcage-labels!
                                               set-ribcage-marks!
                                               set-ribcage-symnames!
                                               ribcage-labels
                                               ribcage-marks
                                               ribcage-symnames
                                               ribcage?
                                               make-ribcage
                                               gen-labels
                                               gen-label
                                               make-rename
                                               rename-marks
                                               rename-new
                                               rename-old
                                               subst-rename?
                                               wrap-subst
                                               wrap-marks
                                               make-wrap
                                               id-sym-name&marks
                                               id-sym-name
                                               id?
                                               nonsymbol-id?
                                               global-extend
                                               lookup
                                               macros-only-env
                                               extend-var-env
                                               extend-env
                                               null-env
                                               binding-value
                                               binding-type
                                               make-binding
                                               arg-check
                                               source-annotation
                                               no-source
                                               set-syntax-object-module!
                                               set-syntax-object-wrap!
                                               set-syntax-object-expression!
                                               syntax-object-module
                                               syntax-object-wrap
                                               syntax-object-expression
                                               syntax-object?
                                               make-syntax-object
                                               build-lexical-var
                                               build-letrec
                                               build-named-let
                                               build-let
                                               build-sequence
                                               build-data
                                               build-primref
                                               build-lambda-case
                                               build-case-lambda
                                               build-simple-lambda
                                               build-global-definition
                                               build-global-assignment
                                               build-global-reference
                                               analyze-variable
                                               build-lexical-assignment
                                               build-lexical-reference
                                               build-dynlet
                                               build-conditional
                                               build-application
                                               build-void
                                               maybe-name-value!
                                               decorate-source
                                               get-global-definition-hook
                                               put-global-definition-hook
                                               gensym-hook
                                               local-eval-hook
                                               top-level-eval-hook
                                               fx<
                                               fx=
                                               fx-
                                               fx+
                                               set-lambda-meta!
                                               lambda-meta
                                               lambda?
                                               make-dynlet
                                               make-letrec
                                               make-let
                                               make-lambda-case
                                               make-lambda
                                               make-sequence
                                               make-application
                                               make-conditional
                                               make-toplevel-define
                                               make-toplevel-set
                                               make-toplevel-ref
                                               make-module-set
                                               make-module-ref
                                               make-lexical-set
                                               make-lexical-ref
                                               make-primitive-ref
                                               make-const
                                               make-void)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("1tt"
                                              "1ts"
                                              "1tr"
                                              "1tq"
                                              "1tp"
                                              "1to"
                                              "1tn"
                                              "1tm"
                                              "1tl"
                                              "1tk"
                                              "1tj"
                                              "1ti"
                                              "1th"
                                              "1tg"
                                              "1tf"
                                              "1te"
                                              "1td"
                                              "1tc"
                                              "1tb"
                                              "1ta"
                                              "1t9"
                                              "1t8"
                                              "1t7"
                                              "1t6"
                                              "1t5"
                                              "1t4"
                                              "1t3"
                                              "1t2"
                                              "1t1"
                                              "1t0"
                                              "1sz"
                                              "1sy"
                                              "1sx"
                                              "1sw"
                                              "1sv"
                                              "1su"
                                              "1st"
                                              "1ss"
                                              "1sr"
                                              "1sq"
                                              "1sp"
                                              "1so"
                                              "1sn"
                                              "1sm"
                                              "1sl"
                                              "1sk"
                                              "1sj"
                                              "1si"
                                              "1sh"
                                              "1sg"
                                              "1sf"
                                              "1se"
                                              "1sd"
                                              "1sc"
                                              "1sb"
                                              "1sa"
                                              "1s9"
                                              "1s8"
                                              "1s7"
                                              "1s6"
                                              "1s5"
                                              "1s4"
                                              "1s3"
                                              "1s2"
                                              "1s1"
                                              "1s0"
                                              "1rz"
                                              "1ry"
                                              "1rx"
                                              "1rw"
                                              "1rv"
                                              "1ru"
                                              "1rt"
                                              "1rs"
                                              "1rr"
                                              "1rq"
                                              "1rp"
                                              "1ro"
                                              "1rn"
                                              "1rm"
                                              "1rl"
                                              "1rk"
                                              "1rj"
                                              "1ri"
                                              "1rh"
                                              "1rg"
                                              "1rf"
                                              "1re"
                                              "1rd"
                                              "1rc"
                                              "1rb"
                                              "1ra"
                                              "1r9"
                                              "1r8"
                                              "1r7"
                                              "1r6"
                                              "1r5"
                                              "1r4"
                                              "1r3"
                                              "1r2"
                                              "1r1"
                                              "1r0"
                                              "1qz"
                                              "1qy"
                                              "1qx"
                                              "1qw"
                                              "1qv"
                                              "1qu"
                                              "1qt"
                                              "1qs"
                                              "1qr"
                                              "1qq"
                                              "1qp"
                                              "1qo"
                                              "1qn"
                                              "1qm"
                                              "1ql"
                                              "1qk"
                                              "1qj"
                                              "1qi"
                                              "1qh"
                                              "1qg"
                                              "1qf"
                                              "1qe"
                                              "1qd"
                                              "1qc"
                                              "1qb"
                                              "1qa"
                                              "1q9"
                                              "1q8"
                                              "1q7"
                                              "1q6"
                                              "1q5"
                                              "1q4"
                                              "1q3"
                                              "1q2"
                                              "1q1"
                                              "1q0"
                                              "1pz"
                                              "1py"))
                                           #(ribcage
                                             (define-structure
                                               define-expansion-accessors
                                               define-expansion-constructors)
                                             ((top) (top) (top))
                                             ("1og" "1of" "1oe")))
                                          (hygiene guile))
                                       '(())))
                                #f)
                            (values '_ #{ids _85hotwsCta0JfYIjI4L4U}#)
                            (values
                              'any
                              (cons (cons #{p _85hotwsCta0JfYIjI4L4S}#
                                          #{n _85hotwsCta0JfYIjI4L4T}#)
                                    #{ids _85hotwsCta0JfYIjI4L4U}#))))
                        (let ((#{tmp _85hotwsCta0JfYIjI4L9U}#
                                ($sc-dispatch
                                  #{p _85hotwsCta0JfYIjI4L4S}#
                                  '(any any))))
                          (if (if #{tmp _85hotwsCta0JfYIjI4L9U}#
                                (@apply
                                  (lambda (#{x _85hotwsCta0JfYIjI4L9Y}#
                                           #{dots _85hotwsCta0JfYIjI4L9Z}#)
                                    (if (if (if (vector?
                                                  #{dots _85hotwsCta0JfYIjI4L9Z}#)
                                              (if (= (vector-length
                                                       #{dots _85hotwsCta0JfYIjI4L9Z}#)
                                                     4)
                                                (eq? (vector-ref
                                                       #{dots _85hotwsCta0JfYIjI4L9Z}#
                                                       0)
                                                     'syntax-object)
                                                #f)
                                              #f)
                                          (symbol?
                                            (vector-ref
                                              #{dots _85hotwsCta0JfYIjI4L9Z}#
                                              1))
                                          #f)
                                      (if (eq? (if (if (vector?
                                                         #{dots _85hotwsCta0JfYIjI4L9Z}#)
                                                     (if (= (vector-length
                                                              #{dots _85hotwsCta0JfYIjI4L9Z}#)
                                                            4)
                                                       (eq? (vector-ref
                                                              #{dots _85hotwsCta0JfYIjI4L9Z}#
                                                              0)
                                                            'syntax-object)
                                                       #f)
                                                     #f)
                                                 (vector-ref
                                                   #{dots _85hotwsCta0JfYIjI4L9Z}#
                                                   1)
                                                 #{dots _85hotwsCta0JfYIjI4L9Z}#)
                                               (if (if (= (vector-length
                                                            '#(syntax-object
                                                               ...
                                                               ((top)
                                                                #(ribcage
                                                                  ()
                                                                  ()
                                                                  ())
                                                                #(ribcage
                                                                  ()
                                                                  ()
                                                                  ())
                                                                #(ribcage
                                                                  #(x)
                                                                  #((top))
                                                                  #("2de"))
                                                                #(ribcage
                                                                  (lambda-var-list
                                                                    gen-var
                                                                    strip
                                                                    expand-lambda-case
                                                                    lambda*-formals
                                                                    expand-simple-lambda
                                                                    lambda-formals
                                                                    ellipsis?
                                                                    expand-void
                                                                    eval-local-transformer
                                                                    expand-local-syntax
                                                                    expand-body
                                                                    expand-macro
                                                                    expand-application
                                                                    expand-expr
                                                                    expand
                                                                    syntax-type
                                                                    parse-when-list
                                                                    expand-install-global
                                                                    expand-top-sequence
                                                                    expand-sequence
                                                                    source-wrap
                                                                    wrap
                                                                    bound-id-member?
                                                                    distinct-bound-ids?
                                                                    valid-bound-ids?
                                                                    bound-id=?
                                                                    free-id=?
                                                                    with-transformer-environment
                                                                    transformer-environment
                                                                    resolve-identifier
                                                                    locally-bound-identifiers
                                                                    id-var-name
                                                                    same-marks?
                                                                    join-marks
                                                                    join-wraps
                                                                    smart-append
                                                                    make-binding-wrap
                                                                    extend-ribcage!
                                                                    make-empty-ribcage
                                                                    new-mark
                                                                    anti-mark
                                                                    the-anti-mark
                                                                    top-marked?
                                                                    top-wrap
                                                                    empty-wrap
                                                                    set-ribcage-labels!
                                                                    set-ribcage-marks!
                                                                    set-ribcage-symnames!
                                                                    ribcage-labels
                                                                    ribcage-marks
                                                                    ribcage-symnames
                                                                    ribcage?
                                                                    make-ribcage
                                                                    gen-labels
                                                                    gen-label
                                                                    make-rename
                                                                    rename-marks
                                                                    rename-new
                                                                    rename-old
                                                                    subst-rename?
                                                                    wrap-subst
                                                                    wrap-marks
                                                                    make-wrap
                                                                    id-sym-name&marks
                                                                    id-sym-name
                                                                    id?
                                                                    nonsymbol-id?
                                                                    global-extend
                                                                    lookup
                                                                    macros-only-env
                                                                    extend-var-env
                                                                    extend-env
                                                                    null-env
                                                                    binding-value
                                                                    binding-type
                                                                    make-binding
                                                                    arg-check
                                                                    source-annotation
                                                                    no-source
                                                                    set-syntax-object-module!
                                                                    set-syntax-object-wrap!
                                                                    set-syntax-object-expression!
                                                                    syntax-object-module
                                                                    syntax-object-wrap
                                                                    syntax-object-expression
                                                                    syntax-object?
                                                                    make-syntax-object
                                                                    build-lexical-var
                                                                    build-letrec
                                                                    build-named-let
                                                                    build-let
                                                                    build-sequence
                                                                    build-data
                                                                    build-primref
                                                                    build-lambda-case
                                                                    build-case-lambda
                                                                    build-simple-lambda
                                                                    build-global-definition
                                                                    build-global-assignment
                                                                    build-global-reference
                                                                    analyze-variable
                                                                    build-lexical-assignment
                                                                    build-lexical-reference
                                                                    build-dynlet
                                                                    build-conditional
                                                                    build-application
                                                                    build-void
                                                                    maybe-name-value!
                                                                    decorate-source
                                                                    get-global-definition-hook
                                                                    put-global-definition-hook
                                                                    gensym-hook
                                                                    local-eval-hook
                                                                    top-level-eval-hook
                                                                    fx<
                                                                    fx=
                                                                    fx-
                                                                    fx+
                                                                    set-lambda-meta!
                                                                    lambda-meta
                                                                    lambda?
                                                                    make-dynlet
                                                                    make-letrec
                                                                    make-let
                                                                    make-lambda-case
                                                                    make-lambda
                                                                    make-sequence
                                                                    make-application
                                                                    make-conditional
                                                                    make-toplevel-define
                                                                    make-toplevel-set
                                                                    make-toplevel-ref
                                                                    make-module-set
                                                                    make-module-ref
                                                                    make-lexical-set
                                                                    make-lexical-ref
                                                                    make-primitive-ref
                                                                    make-const
                                                                    make-void)
                                                                  ((top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top))
                                                                  ("1tt"
                                                                   "1ts"
                                                                   "1tr"
                                                                   "1tq"
                                                                   "1tp"
                                                                   "1to"
                                                                   "1tn"
                                                                   "1tm"
                                                                   "1tl"
                                                                   "1tk"
                                                                   "1tj"
                                                                   "1ti"
                                                                   "1th"
                                                                   "1tg"
                                                                   "1tf"
                                                                   "1te"
                                                                   "1td"
                                                                   "1tc"
                                                                   "1tb"
                                                                   "1ta"
                                                                   "1t9"
                                                                   "1t8"
                                                                   "1t7"
                                                                   "1t6"
                                                                   "1t5"
                                                                   "1t4"
                                                                   "1t3"
                                                                   "1t2"
                                                                   "1t1"
                                                                   "1t0"
                                                                   "1sz"
                                                                   "1sy"
                                                                   "1sx"
                                                                   "1sw"
                                                                   "1sv"
                                                                   "1su"
                                                                   "1st"
                                                                   "1ss"
                                                                   "1sr"
                                                                   "1sq"
                                                                   "1sp"
                                                                   "1so"
                                                                   "1sn"
                                                                   "1sm"
                                                                   "1sl"
                                                                   "1sk"
                                                                   "1sj"
                                                                   "1si"
                                                                   "1sh"
                                                                   "1sg"
                                                                   "1sf"
                                                                   "1se"
                                                                   "1sd"
                                                                   "1sc"
                                                                   "1sb"
                                                                   "1sa"
                                                                   "1s9"
                                                                   "1s8"
                                                                   "1s7"
                                                                   "1s6"
                                                                   "1s5"
                                                                   "1s4"
                                                                   "1s3"
                                                                   "1s2"
                                                                   "1s1"
                                                                   "1s0"
                                                                   "1rz"
                                                                   "1ry"
                                                                   "1rx"
                                                                   "1rw"
                                                                   "1rv"
                                                                   "1ru"
                                                                   "1rt"
                                                                   "1rs"
                                                                   "1rr"
                                                                   "1rq"
                                                                   "1rp"
                                                                   "1ro"
                                                                   "1rn"
                                                                   "1rm"
                                                                   "1rl"
                                                                   "1rk"
                                                                   "1rj"
                                                                   "1ri"
                                                                   "1rh"
                                                                   "1rg"
                                                                   "1rf"
                                                                   "1re"
                                                                   "1rd"
                                                                   "1rc"
                                                                   "1rb"
                                                                   "1ra"
                                                                   "1r9"
                                                                   "1r8"
                                                                   "1r7"
                                                                   "1r6"
                                                                   "1r5"
                                                                   "1r4"
                                                                   "1r3"
                                                                   "1r2"
                                                                   "1r1"
                                                                   "1r0"
                                                                   "1qz"
                                                                   "1qy"
                                                                   "1qx"
                                                                   "1qw"
                                                                   "1qv"
                                                                   "1qu"
                                                                   "1qt"
                                                                   "1qs"
                                                                   "1qr"
                                                                   "1qq"
                                                                   "1qp"
                                                                   "1qo"
                                                                   "1qn"
                                                                   "1qm"
                                                                   "1ql"
                                                                   "1qk"
                                                                   "1qj"
                                                                   "1qi"
                                                                   "1qh"
                                                                   "1qg"
                                                                   "1qf"
                                                                   "1qe"
                                                                   "1qd"
                                                                   "1qc"
                                                                   "1qb"
                                                                   "1qa"
                                                                   "1q9"
                                                                   "1q8"
                                                                   "1q7"
                                                                   "1q6"
                                                                   "1q5"
                                                                   "1q4"
                                                                   "1q3"
                                                                   "1q2"
                                                                   "1q1"
                                                                   "1q0"
                                                                   "1pz"
                                                                   "1py"))
                                                                #(ribcage
                                                                  (define-structure
                                                                    define-expansion-accessors
                                                                    define-expansion-constructors)
                                                                  ((top)
                                                                   (top)
                                                                   (top))
                                                                  ("1og"
                                                                   "1of"
                                                                   "1oe")))
                                                               (hygiene
                                                                 guile)))
                                                          4)
                                                     #t
                                                     #f)
                                                 '...
                                                 '#(syntax-object
                                                    ...
                                                    ((top)
                                                     #(ribcage () () ())
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("2de"))
                                                     #(ribcage
                                                       (lambda-var-list
                                                         gen-var
                                                         strip
                                                         expand-lambda-case
                                                         lambda*-formals
                                                         expand-simple-lambda
                                                         lambda-formals
                                                         ellipsis?
                                                         expand-void
                                                         eval-local-transformer
                                                         expand-local-syntax
                                                         expand-body
                                                         expand-macro
                                                         expand-application
                                                         expand-expr
                                                         expand
                                                         syntax-type
                                                         parse-when-list
                                                         expand-install-global
                                                         expand-top-sequence
                                                         expand-sequence
                                                         source-wrap
                                                         wrap
                                                         bound-id-member?
                                                         distinct-bound-ids?
                                                         valid-bound-ids?
                                                         bound-id=?
                                                         free-id=?
                                                         with-transformer-environment
                                                         transformer-environment
                                                         resolve-identifier
                                                         locally-bound-identifiers
                                                         id-var-name
                                                         same-marks?
                                                         join-marks
                                                         join-wraps
                                                         smart-append
                                                         make-binding-wrap
                                                         extend-ribcage!
                                                         make-empty-ribcage
                                                         new-mark
                                                         anti-mark
                                                         the-anti-mark
                                                         top-marked?
                                                         top-wrap
                                                         empty-wrap
                                                         set-ribcage-labels!
                                                         set-ribcage-marks!
                                                         set-ribcage-symnames!
                                                         ribcage-labels
                                                         ribcage-marks
                                                         ribcage-symnames
                                                         ribcage?
                                                         make-ribcage
                                                         gen-labels
                                                         gen-label
                                                         make-rename
                                                         rename-marks
                                                         rename-new
                                                         rename-old
                                                         subst-rename?
                                                         wrap-subst
                                                         wrap-marks
                                                         make-wrap
                                                         id-sym-name&marks
                                                         id-sym-name
                                                         id?
                                                         nonsymbol-id?
                                                         global-extend
                                                         lookup
                                                         macros-only-env
                                                         extend-var-env
                                                         extend-env
                                                         null-env
                                                         binding-value
                                                         binding-type
                                                         make-binding
                                                         arg-check
                                                         source-annotation
                                                         no-source
                                                         set-syntax-object-module!
                                                         set-syntax-object-wrap!
                                                         set-syntax-object-expression!
                                                         syntax-object-module
                                                         syntax-object-wrap
                                                         syntax-object-expression
                                                         syntax-object?
                                                         make-syntax-object
                                                         build-lexical-var
                                                         build-letrec
                                                         build-named-let
                                                         build-let
                                                         build-sequence
                                                         build-data
                                                         build-primref
                                                         build-lambda-case
                                                         build-case-lambda
                                                         build-simple-lambda
                                                         build-global-definition
                                                         build-global-assignment
                                                         build-global-reference
                                                         analyze-variable
                                                         build-lexical-assignment
                                                         build-lexical-reference
                                                         build-dynlet
                                                         build-conditional
                                                         build-application
                                                         build-void
                                                         maybe-name-value!
                                                         decorate-source
                                                         get-global-definition-hook
                                                         put-global-definition-hook
                                                         gensym-hook
                                                         local-eval-hook
                                                         top-level-eval-hook
                                                         fx<
                                                         fx=
                                                         fx-
                                                         fx+
                                                         set-lambda-meta!
                                                         lambda-meta
                                                         lambda?
                                                         make-dynlet
                                                         make-letrec
                                                         make-let
                                                         make-lambda-case
                                                         make-lambda
                                                         make-sequence
                                                         make-application
                                                         make-conditional
                                                         make-toplevel-define
                                                         make-toplevel-set
                                                         make-toplevel-ref
                                                         make-module-set
                                                         make-module-ref
                                                         make-lexical-set
                                                         make-lexical-ref
                                                         make-primitive-ref
                                                         make-const
                                                         make-void)
                                                       ((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                       ("1tt"
                                                        "1ts"
                                                        "1tr"
                                                        "1tq"
                                                        "1tp"
                                                        "1to"
                                                        "1tn"
                                                        "1tm"
                                                        "1tl"
                                                        "1tk"
                                                        "1tj"
                                                        "1ti"
                                                        "1th"
                                                        "1tg"
                                                        "1tf"
                                                        "1te"
                                                        "1td"
                                                        "1tc"
                                                        "1tb"
                                                        "1ta"
                                                        "1t9"
                                                        "1t8"
                                                        "1t7"
                                                        "1t6"
                                                        "1t5"
                                                        "1t4"
                                                        "1t3"
                                                        "1t2"
                                                        "1t1"
                                                        "1t0"
                                                        "1sz"
                                                        "1sy"
                                                        "1sx"
                                                        "1sw"
                                                        "1sv"
                                                        "1su"
                                                        "1st"
                                                        "1ss"
                                                        "1sr"
                                                        "1sq"
                                                        "1sp"
                                                        "1so"
                                                        "1sn"
                                                        "1sm"
                                                        "1sl"
                                                        "1sk"
                                                        "1sj"
                                                        "1si"
                                                        "1sh"
                                                        "1sg"
                                                        "1sf"
                                                        "1se"
                                                        "1sd"
                                                        "1sc"
                                                        "1sb"
                                                        "1sa"
                                                        "1s9"
                                                        "1s8"
                                                        "1s7"
                                                        "1s6"
                                                        "1s5"
                                                        "1s4"
                                                        "1s3"
                                                        "1s2"
                                                        "1s1"
                                                        "1s0"
                                                        "1rz"
                                                        "1ry"
                                                        "1rx"
                                                        "1rw"
                                                        "1rv"
                                                        "1ru"
                                                        "1rt"
                                                        "1rs"
                                                        "1rr"
                                                        "1rq"
                                                        "1rp"
                                                        "1ro"
                                                        "1rn"
                                                        "1rm"
                                                        "1rl"
                                                        "1rk"
                                                        "1rj"
                                                        "1ri"
                                                        "1rh"
                                                        "1rg"
                                                        "1rf"
                                                        "1re"
                                                        "1rd"
                                                        "1rc"
                                                        "1rb"
                                                        "1ra"
                                                        "1r9"
                                                        "1r8"
                                                        "1r7"
                                                        "1r6"
                                                        "1r5"
                                                        "1r4"
                                                        "1r3"
                                                        "1r2"
                                                        "1r1"
                                                        "1r0"
                                                        "1qz"
                                                        "1qy"
                                                        "1qx"
                                                        "1qw"
                                                        "1qv"
                                                        "1qu"
                                                        "1qt"
                                                        "1qs"
                                                        "1qr"
                                                        "1qq"
                                                        "1qp"
                                                        "1qo"
                                                        "1qn"
                                                        "1qm"
                                                        "1ql"
                                                        "1qk"
                                                        "1qj"
                                                        "1qi"
                                                        "1qh"
                                                        "1qg"
                                                        "1qf"
                                                        "1qe"
                                                        "1qd"
                                                        "1qc"
                                                        "1qb"
                                                        "1qa"
                                                        "1q9"
                                                        "1q8"
                                                        "1q7"
                                                        "1q6"
                                                        "1q5"
                                                        "1q4"
                                                        "1q3"
                                                        "1q2"
                                                        "1q1"
                                                        "1q0"
                                                        "1pz"
                                                        "1py"))
                                                     #(ribcage
                                                       (define-structure
                                                         define-expansion-accessors
                                                         define-expansion-constructors)
                                                       ((top) (top) (top))
                                                       ("1og" "1of" "1oe")))
                                                    (hygiene guile))))
                                        (eq? (#{id-var-name _85hotwsCta0JfYIjI4J36}#
                                               #{dots _85hotwsCta0JfYIjI4L9Z}#
                                               '(()))
                                             (#{id-var-name _85hotwsCta0JfYIjI4J36}#
                                               '#(syntax-object
                                                  ...
                                                  ((top)
                                                   #(ribcage () () ())
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("2de"))
                                                   #(ribcage
                                                     (lambda-var-list
                                                       gen-var
                                                       strip
                                                       expand-lambda-case
                                                       lambda*-formals
                                                       expand-simple-lambda
                                                       lambda-formals
                                                       ellipsis?
                                                       expand-void
                                                       eval-local-transformer
                                                       expand-local-syntax
                                                       expand-body
                                                       expand-macro
                                                       expand-application
                                                       expand-expr
                                                       expand
                                                       syntax-type
                                                       parse-when-list
                                                       expand-install-global
                                                       expand-top-sequence
                                                       expand-sequence
                                                       source-wrap
                                                       wrap
                                                       bound-id-member?
                                                       distinct-bound-ids?
                                                       valid-bound-ids?
                                                       bound-id=?
                                                       free-id=?
                                                       with-transformer-environment
                                                       transformer-environment
                                                       resolve-identifier
                                                       locally-bound-identifiers
                                                       id-var-name
                                                       same-marks?
                                                       join-marks
                                                       join-wraps
                                                       smart-append
                                                       make-binding-wrap
                                                       extend-ribcage!
                                                       make-empty-ribcage
                                                       new-mark
                                                       anti-mark
                                                       the-anti-mark
                                                       top-marked?
                                                       top-wrap
                                                       empty-wrap
                                                       set-ribcage-labels!
                                                       set-ribcage-marks!
                                                       set-ribcage-symnames!
                                                       ribcage-labels
                                                       ribcage-marks
                                                       ribcage-symnames
                                                       ribcage?
                                                       make-ribcage
                                                       gen-labels
                                                       gen-label
                                                       make-rename
                                                       rename-marks
                                                       rename-new
                                                       rename-old
                                                       subst-rename?
                                                       wrap-subst
                                                       wrap-marks
                                                       make-wrap
                                                       id-sym-name&marks
                                                       id-sym-name
                                                       id?
                                                       nonsymbol-id?
                                                       global-extend
                                                       lookup
                                                       macros-only-env
                                                       extend-var-env
                                                       extend-env
                                                       null-env
                                                       binding-value
                                                       binding-type
                                                       make-binding
                                                       arg-check
                                                       source-annotation
                                                       no-source
                                                       set-syntax-object-module!
                                                       set-syntax-object-wrap!
                                                       set-syntax-object-expression!
                                                       syntax-object-module
                                                       syntax-object-wrap
                                                       syntax-object-expression
                                                       syntax-object?
                                                       make-syntax-object
                                                       build-lexical-var
                                                       build-letrec
                                                       build-named-let
                                                       build-let
                                                       build-sequence
                                                       build-data
                                                       build-primref
                                                       build-lambda-case
                                                       build-case-lambda
                                                       build-simple-lambda
                                                       build-global-definition
                                                       build-global-assignment
                                                       build-global-reference
                                                       analyze-variable
                                                       build-lexical-assignment
                                                       build-lexical-reference
                                                       build-dynlet
                                                       build-conditional
                                                       build-application
                                                       build-void
                                                       maybe-name-value!
                                                       decorate-source
                                                       get-global-definition-hook
                                                       put-global-definition-hook
                                                       gensym-hook
                                                       local-eval-hook
                                                       top-level-eval-hook
                                                       fx<
                                                       fx=
                                                       fx-
                                                       fx+
                                                       set-lambda-meta!
                                                       lambda-meta
                                                       lambda?
                                                       make-dynlet
                                                       make-letrec
                                                       make-let
                                                       make-lambda-case
                                                       make-lambda
                                                       make-sequence
                                                       make-application
                                                       make-conditional
                                                       make-toplevel-define
                                                       make-toplevel-set
                                                       make-toplevel-ref
                                                       make-module-set
                                                       make-module-ref
                                                       make-lexical-set
                                                       make-lexical-ref
                                                       make-primitive-ref
                                                       make-const
                                                       make-void)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("1tt"
                                                      "1ts"
                                                      "1tr"
                                                      "1tq"
                                                      "1tp"
                                                      "1to"
                                                      "1tn"
                                                      "1tm"
                                                      "1tl"
                                                      "1tk"
                                                      "1tj"
                                                      "1ti"
                                                      "1th"
                                                      "1tg"
                                                      "1tf"
                                                      "1te"
                                                      "1td"
                                                      "1tc"
                                                      "1tb"
                                                      "1ta"
                                                      "1t9"
                                                      "1t8"
                                                      "1t7"
                                                      "1t6"
                                                      "1t5"
                                                      "1t4"
                                                      "1t3"
                                                      "1t2"
                                                      "1t1"
                                                      "1t0"
                                                      "1sz"
                                                      "1sy"
                                                      "1sx"
                                                      "1sw"
                                                      "1sv"
                                                      "1su"
                                                      "1st"
                                                      "1ss"
                                                      "1sr"
                                                      "1sq"
                                                      "1sp"
                                                      "1so"
                                                      "1sn"
                                                      "1sm"
                                                      "1sl"
                                                      "1sk"
                                                      "1sj"
                                                      "1si"
                                                      "1sh"
                                                      "1sg"
                                                      "1sf"
                                                      "1se"
                                                      "1sd"
                                                      "1sc"
                                                      "1sb"
                                                      "1sa"
                                                      "1s9"
                                                      "1s8"
                                                      "1s7"
                                                      "1s6"
                                                      "1s5"
                                                      "1s4"
                                                      "1s3"
                                                      "1s2"
                                                      "1s1"
                                                      "1s0"
                                                      "1rz"
                                                      "1ry"
                                                      "1rx"
                                                      "1rw"
                                                      "1rv"
                                                      "1ru"
                                                      "1rt"
                                                      "1rs"
                                                      "1rr"
                                                      "1rq"
                                                      "1rp"
                                                      "1ro"
                                                      "1rn"
                                                      "1rm"
                                                      "1rl"
                                                      "1rk"
                                                      "1rj"
                                                      "1ri"
                                                      "1rh"
                                                      "1rg"
                                                      "1rf"
                                                      "1re"
                                                      "1rd"
                                                      "1rc"
                                                      "1rb"
                                                      "1ra"
                                                      "1r9"
                                                      "1r8"
                                                      "1r7"
                                                      "1r6"
                                                      "1r5"
                                                      "1r4"
                                                      "1r3"
                                                      "1r2"
                                                      "1r1"
                                                      "1r0"
                                                      "1qz"
                                                      "1qy"
                                                      "1qx"
                                                      "1qw"
                                                      "1qv"
                                                      "1qu"
                                                      "1qt"
                                                      "1qs"
                                                      "1qr"
                                                      "1qq"
                                                      "1qp"
                                                      "1qo"
                                                      "1qn"
                                                      "1qm"
                                                      "1ql"
                                                      "1qk"
                                                      "1qj"
                                                      "1qi"
                                                      "1qh"
                                                      "1qg"
                                                      "1qf"
                                                      "1qe"
                                                      "1qd"
                                                      "1qc"
                                                      "1qb"
                                                      "1qa"
                                                      "1q9"
                                                      "1q8"
                                                      "1q7"
                                                      "1q6"
                                                      "1q5"
                                                      "1q4"
                                                      "1q3"
                                                      "1q2"
                                                      "1q1"
                                                      "1q0"
                                                      "1pz"
                                                      "1py"))
                                                   #(ribcage
                                                     (define-structure
                                                       define-expansion-accessors
                                                       define-expansion-constructors)
                                                     ((top) (top) (top))
                                                     ("1og" "1of" "1oe")))
                                                  (hygiene guile))
                                               '(())))
                                        #f)
                                      #f))
                                  #{tmp _85hotwsCta0JfYIjI4L9U}#)
                                #f)
                            (@apply
                              (lambda (#{x _85hotwsCta0JfYIjI4L$9}#
                                       #{dots _85hotwsCta0JfYIjI4L$$}#)
                                (call-with-values
                                  (lambda ()
                                    (#{cvt _85hotwsCta0JfYIjI4L4P}#
                                      #{x _85hotwsCta0JfYIjI4L$9}#
                                      (#{1+}# #{n _85hotwsCta0JfYIjI4L4T}#)
                                      #{ids _85hotwsCta0JfYIjI4L4U}#))
                                  (lambda (#{p _85hotwsCta0JfYIjI4L$@}#
                                           #{ids _85hotwsCta0JfYIjI4L@A}#)
                                    (values
                                      (if (eq? #{p _85hotwsCta0JfYIjI4L$@}#
                                               'any)
                                        'each-any
                                        (vector
                                          'each
                                          #{p _85hotwsCta0JfYIjI4L$@}#))
                                      #{ids _85hotwsCta0JfYIjI4L@A}#))))
                              #{tmp _85hotwsCta0JfYIjI4L9U}#)
                            (let ((#{tmp _85hotwsCta0JfYIjI4L@B}#
                                    ($sc-dispatch
                                      #{p _85hotwsCta0JfYIjI4L4S}#
                                      '(any any . any))))
                              (if (if #{tmp _85hotwsCta0JfYIjI4L@B}#
                                    (@apply
                                      (lambda (#{x _85hotwsCta0JfYIjI4L@F}#
                                               #{dots _85hotwsCta0JfYIjI4L@G}#
                                               #{ys _85hotwsCta0JfYIjI4L@H}#)
                                        (if (if (if (vector?
                                                      #{dots _85hotwsCta0JfYIjI4L@G}#)
                                                  (if (= (vector-length
                                                           #{dots _85hotwsCta0JfYIjI4L@G}#)
                                                         4)
                                                    (eq? (vector-ref
                                                           #{dots _85hotwsCta0JfYIjI4L@G}#
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (symbol?
                                                (vector-ref
                                                  #{dots _85hotwsCta0JfYIjI4L@G}#
                                                  1))
                                              #f)
                                          (if (eq? (if (if (vector?
                                                             #{dots _85hotwsCta0JfYIjI4L@G}#)
                                                         (if (= (vector-length
                                                                  #{dots _85hotwsCta0JfYIjI4L@G}#)
                                                                4)
                                                           (eq? (vector-ref
                                                                  #{dots _85hotwsCta0JfYIjI4L@G}#
                                                                  0)
                                                                'syntax-object)
                                                           #f)
                                                         #f)
                                                     (vector-ref
                                                       #{dots _85hotwsCta0JfYIjI4L@G}#
                                                       1)
                                                     #{dots _85hotwsCta0JfYIjI4L@G}#)
                                                   (if (if (= (vector-length
                                                                '#(syntax-object
                                                                   ...
                                                                   ((top)
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(x)
                                                                      #((top))
                                                                      #("2de"))
                                                                    #(ribcage
                                                                      (lambda-var-list
                                                                        gen-var
                                                                        strip
                                                                        expand-lambda-case
                                                                        lambda*-formals
                                                                        expand-simple-lambda
                                                                        lambda-formals
                                                                        ellipsis?
                                                                        expand-void
                                                                        eval-local-transformer
                                                                        expand-local-syntax
                                                                        expand-body
                                                                        expand-macro
                                                                        expand-application
                                                                        expand-expr
                                                                        expand
                                                                        syntax-type
                                                                        parse-when-list
                                                                        expand-install-global
                                                                        expand-top-sequence
                                                                        expand-sequence
                                                                        source-wrap
                                                                        wrap
                                                                        bound-id-member?
                                                                        distinct-bound-ids?
                                                                        valid-bound-ids?
                                                                        bound-id=?
                                                                        free-id=?
                                                                        with-transformer-environment
                                                                        transformer-environment
                                                                        resolve-identifier
                                                                        locally-bound-identifiers
                                                                        id-var-name
                                                                        same-marks?
                                                                        join-marks
                                                                        join-wraps
                                                                        smart-append
                                                                        make-binding-wrap
                                                                        extend-ribcage!
                                                                        make-empty-ribcage
                                                                        new-mark
                                                                        anti-mark
                                                                        the-anti-mark
                                                                        top-marked?
                                                                        top-wrap
                                                                        empty-wrap
                                                                        set-ribcage-labels!
                                                                        set-ribcage-marks!
                                                                        set-ribcage-symnames!
                                                                        ribcage-labels
                                                                        ribcage-marks
                                                                        ribcage-symnames
                                                                        ribcage?
                                                                        make-ribcage
                                                                        gen-labels
                                                                        gen-label
                                                                        make-rename
                                                                        rename-marks
                                                                        rename-new
                                                                        rename-old
                                                                        subst-rename?
                                                                        wrap-subst
                                                                        wrap-marks
                                                                        make-wrap
                                                                        id-sym-name&marks
                                                                        id-sym-name
                                                                        id?
                                                                        nonsymbol-id?
                                                                        global-extend
                                                                        lookup
                                                                        macros-only-env
                                                                        extend-var-env
                                                                        extend-env
                                                                        null-env
                                                                        binding-value
                                                                        binding-type
                                                                        make-binding
                                                                        arg-check
                                                                        source-annotation
                                                                        no-source
                                                                        set-syntax-object-module!
                                                                        set-syntax-object-wrap!
                                                                        set-syntax-object-expression!
                                                                        syntax-object-module
                                                                        syntax-object-wrap
                                                                        syntax-object-expression
                                                                        syntax-object?
                                                                        make-syntax-object
                                                                        build-lexical-var
                                                                        build-letrec
                                                                        build-named-let
                                                                        build-let
                                                                        build-sequence
                                                                        build-data
                                                                        build-primref
                                                                        build-lambda-case
                                                                        build-case-lambda
                                                                        build-simple-lambda
                                                                        build-global-definition
                                                                        build-global-assignment
                                                                        build-global-reference
                                                                        analyze-variable
                                                                        build-lexical-assignment
                                                                        build-lexical-reference
                                                                        build-dynlet
                                                                        build-conditional
                                                                        build-application
                                                                        build-void
                                                                        maybe-name-value!
                                                                        decorate-source
                                                                        get-global-definition-hook
                                                                        put-global-definition-hook
                                                                        gensym-hook
                                                                        local-eval-hook
                                                                        top-level-eval-hook
                                                                        fx<
                                                                        fx=
                                                                        fx-
                                                                        fx+
                                                                        set-lambda-meta!
                                                                        lambda-meta
                                                                        lambda?
                                                                        make-dynlet
                                                                        make-letrec
                                                                        make-let
                                                                        make-lambda-case
                                                                        make-lambda
                                                                        make-sequence
                                                                        make-application
                                                                        make-conditional
                                                                        make-toplevel-define
                                                                        make-toplevel-set
                                                                        make-toplevel-ref
                                                                        make-module-set
                                                                        make-module-ref
                                                                        make-lexical-set
                                                                        make-lexical-ref
                                                                        make-primitive-ref
                                                                        make-const
                                                                        make-void)
                                                                      ((top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                      ("1tt"
                                                                       "1ts"
                                                                       "1tr"
                                                                       "1tq"
                                                                       "1tp"
                                                                       "1to"
                                                                       "1tn"
                                                                       "1tm"
                                                                       "1tl"
                                                                       "1tk"
                                                                       "1tj"
                                                                       "1ti"
                                                                       "1th"
                                                                       "1tg"
                                                                       "1tf"
                                                                       "1te"
                                                                       "1td"
                                                                       "1tc"
                                                                       "1tb"
                                                                       "1ta"
                                                                       "1t9"
                                                                       "1t8"
                                                                       "1t7"
                                                                       "1t6"
                                                                       "1t5"
                                                                       "1t4"
                                                                       "1t3"
                                                                       "1t2"
                                                                       "1t1"
                                                                       "1t0"
                                                                       "1sz"
                                                                       "1sy"
                                                                       "1sx"
                                                                       "1sw"
                                                                       "1sv"
                                                                       "1su"
                                                                       "1st"
                                                                       "1ss"
                                                                       "1sr"
                                                                       "1sq"
                                                                       "1sp"
                                                                       "1so"
                                                                       "1sn"
                                                                       "1sm"
                                                                       "1sl"
                                                                       "1sk"
                                                                       "1sj"
                                                                       "1si"
                                                                       "1sh"
                                                                       "1sg"
                                                                       "1sf"
                                                                       "1se"
                                                                       "1sd"
                                                                       "1sc"
                                                                       "1sb"
                                                                       "1sa"
                                                                       "1s9"
                                                                       "1s8"
                                                                       "1s7"
                                                                       "1s6"
                                                                       "1s5"
                                                                       "1s4"
                                                                       "1s3"
                                                                       "1s2"
                                                                       "1s1"
                                                                       "1s0"
                                                                       "1rz"
                                                                       "1ry"
                                                                       "1rx"
                                                                       "1rw"
                                                                       "1rv"
                                                                       "1ru"
                                                                       "1rt"
                                                                       "1rs"
                                                                       "1rr"
                                                                       "1rq"
                                                                       "1rp"
                                                                       "1ro"
                                                                       "1rn"
                                                                       "1rm"
                                                                       "1rl"
                                                                       "1rk"
                                                                       "1rj"
                                                                       "1ri"
                                                                       "1rh"
                                                                       "1rg"
                                                                       "1rf"
                                                                       "1re"
                                                                       "1rd"
                                                                       "1rc"
                                                                       "1rb"
                                                                       "1ra"
                                                                       "1r9"
                                                                       "1r8"
                                                                       "1r7"
                                                                       "1r6"
                                                                       "1r5"
                                                                       "1r4"
                                                                       "1r3"
                                                                       "1r2"
                                                                       "1r1"
                                                                       "1r0"
                                                                       "1qz"
                                                                       "1qy"
                                                                       "1qx"
                                                                       "1qw"
                                                                       "1qv"
                                                                       "1qu"
                                                                       "1qt"
                                                                       "1qs"
                                                                       "1qr"
                                                                       "1qq"
                                                                       "1qp"
                                                                       "1qo"
                                                                       "1qn"
                                                                       "1qm"
                                                                       "1ql"
                                                                       "1qk"
                                                                       "1qj"
                                                                       "1qi"
                                                                       "1qh"
                                                                       "1qg"
                                                                       "1qf"
                                                                       "1qe"
                                                                       "1qd"
                                                                       "1qc"
                                                                       "1qb"
                                                                       "1qa"
                                                                       "1q9"
                                                                       "1q8"
                                                                       "1q7"
                                                                       "1q6"
                                                                       "1q5"
                                                                       "1q4"
                                                                       "1q3"
                                                                       "1q2"
                                                                       "1q1"
                                                                       "1q0"
                                                                       "1pz"
                                                                       "1py"))
                                                                    #(ribcage
                                                                      (define-structure
                                                                        define-expansion-accessors
                                                                        define-expansion-constructors)
                                                                      ((top)
                                                                       (top)
                                                                       (top))
                                                                      ("1og"
                                                                       "1of"
                                                                       "1oe")))
                                                                   (hygiene
                                                                     guile)))
                                                              4)
                                                         #t
                                                         #f)
                                                     '...
                                                     '#(syntax-object
                                                        ...
                                                        ((top)
                                                         #(ribcage () () ())
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("2de"))
                                                         #(ribcage
                                                           (lambda-var-list
                                                             gen-var
                                                             strip
                                                             expand-lambda-case
                                                             lambda*-formals
                                                             expand-simple-lambda
                                                             lambda-formals
                                                             ellipsis?
                                                             expand-void
                                                             eval-local-transformer
                                                             expand-local-syntax
                                                             expand-body
                                                             expand-macro
                                                             expand-application
                                                             expand-expr
                                                             expand
                                                             syntax-type
                                                             parse-when-list
                                                             expand-install-global
                                                             expand-top-sequence
                                                             expand-sequence
                                                             source-wrap
                                                             wrap
                                                             bound-id-member?
                                                             distinct-bound-ids?
                                                             valid-bound-ids?
                                                             bound-id=?
                                                             free-id=?
                                                             with-transformer-environment
                                                             transformer-environment
                                                             resolve-identifier
                                                             locally-bound-identifiers
                                                             id-var-name
                                                             same-marks?
                                                             join-marks
                                                             join-wraps
                                                             smart-append
                                                             make-binding-wrap
                                                             extend-ribcage!
                                                             make-empty-ribcage
                                                             new-mark
                                                             anti-mark
                                                             the-anti-mark
                                                             top-marked?
                                                             top-wrap
                                                             empty-wrap
                                                             set-ribcage-labels!
                                                             set-ribcage-marks!
                                                             set-ribcage-symnames!
                                                             ribcage-labels
                                                             ribcage-marks
                                                             ribcage-symnames
                                                             ribcage?
                                                             make-ribcage
                                                             gen-labels
                                                             gen-label
                                                             make-rename
                                                             rename-marks
                                                             rename-new
                                                             rename-old
                                                             subst-rename?
                                                             wrap-subst
                                                             wrap-marks
                                                             make-wrap
                                                             id-sym-name&marks
                                                             id-sym-name
                                                             id?
                                                             nonsymbol-id?
                                                             global-extend
                                                             lookup
                                                             macros-only-env
                                                             extend-var-env
                                                             extend-env
                                                             null-env
                                                             binding-value
                                                             binding-type
                                                             make-binding
                                                             arg-check
                                                             source-annotation
                                                             no-source
                                                             set-syntax-object-module!
                                                             set-syntax-object-wrap!
                                                             set-syntax-object-expression!
                                                             syntax-object-module
                                                             syntax-object-wrap
                                                             syntax-object-expression
                                                             syntax-object?
                                                             make-syntax-object
                                                             build-lexical-var
                                                             build-letrec
                                                             build-named-let
                                                             build-let
                                                             build-sequence
                                                             build-data
                                                             build-primref
                                                             build-lambda-case
                                                             build-case-lambda
                                                             build-simple-lambda
                                                             build-global-definition
                                                             build-global-assignment
                                                             build-global-reference
                                                             analyze-variable
                                                             build-lexical-assignment
                                                             build-lexical-reference
                                                             build-dynlet
                                                             build-conditional
                                                             build-application
                                                             build-void
                                                             maybe-name-value!
                                                             decorate-source
                                                             get-global-definition-hook
                                                             put-global-definition-hook
                                                             gensym-hook
                                                             local-eval-hook
                                                             top-level-eval-hook
                                                             fx<
                                                             fx=
                                                             fx-
                                                             fx+
                                                             set-lambda-meta!
                                                             lambda-meta
                                                             lambda?
                                                             make-dynlet
                                                             make-letrec
                                                             make-let
                                                             make-lambda-case
                                                             make-lambda
                                                             make-sequence
                                                             make-application
                                                             make-conditional
                                                             make-toplevel-define
                                                             make-toplevel-set
                                                             make-toplevel-ref
                                                             make-module-set
                                                             make-module-ref
                                                             make-lexical-set
                                                             make-lexical-ref
                                                             make-primitive-ref
                                                             make-const
                                                             make-void)
                                                           ((top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top))
                                                           ("1tt"
                                                            "1ts"
                                                            "1tr"
                                                            "1tq"
                                                            "1tp"
                                                            "1to"
                                                            "1tn"
                                                            "1tm"
                                                            "1tl"
                                                            "1tk"
                                                            "1tj"
                                                            "1ti"
                                                            "1th"
                                                            "1tg"
                                                            "1tf"
                                                            "1te"
                                                            "1td"
                                                            "1tc"
                                                            "1tb"
                                                            "1ta"
                                                            "1t9"
                                                            "1t8"
                                                            "1t7"
                                                            "1t6"
                                                            "1t5"
                                                            "1t4"
                                                            "1t3"
                                                            "1t2"
                                                            "1t1"
                                                            "1t0"
                                                            "1sz"
                                                            "1sy"
                                                            "1sx"
                                                            "1sw"
                                                            "1sv"
                                                            "1su"
                                                            "1st"
                                                            "1ss"
                                                            "1sr"
                                                            "1sq"
                                                            "1sp"
                                                            "1so"
                                                            "1sn"
                                                            "1sm"
                                                            "1sl"
                                                            "1sk"
                                                            "1sj"
                                                            "1si"
                                                            "1sh"
                                                            "1sg"
                                                            "1sf"
                                                            "1se"
                                                            "1sd"
                                                            "1sc"
                                                            "1sb"
                                                            "1sa"
                                                            "1s9"
                                                            "1s8"
                                                            "1s7"
                                                            "1s6"
                                                            "1s5"
                                                            "1s4"
                                                            "1s3"
                                                            "1s2"
                                                            "1s1"
                                                            "1s0"
                                                            "1rz"
                                                            "1ry"
                                                            "1rx"
                                                            "1rw"
                                                            "1rv"
                                                            "1ru"
                                                            "1rt"
                                                            "1rs"
                                                            "1rr"
                                                            "1rq"
                                                            "1rp"
                                                            "1ro"
                                                            "1rn"
                                                            "1rm"
                                                            "1rl"
                                                            "1rk"
                                                            "1rj"
                                                            "1ri"
                                                            "1rh"
                                                            "1rg"
                                                            "1rf"
                                                            "1re"
                                                            "1rd"
                                                            "1rc"
                                                            "1rb"
                                                            "1ra"
                                                            "1r9"
                                                            "1r8"
                                                            "1r7"
                                                            "1r6"
                                                            "1r5"
                                                            "1r4"
                                                            "1r3"
                                                            "1r2"
                                                            "1r1"
                                                            "1r0"
                                                            "1qz"
                                                            "1qy"
                                                            "1qx"
                                                            "1qw"
                                                            "1qv"
                                                            "1qu"
                                                            "1qt"
                                                            "1qs"
                                                            "1qr"
                                                            "1qq"
                                                            "1qp"
                                                            "1qo"
                                                            "1qn"
                                                            "1qm"
                                                            "1ql"
                                                            "1qk"
                                                            "1qj"
                                                            "1qi"
                                                            "1qh"
                                                            "1qg"
                                                            "1qf"
                                                            "1qe"
                                                            "1qd"
                                                            "1qc"
                                                            "1qb"
                                                            "1qa"
                                                            "1q9"
                                                            "1q8"
                                                            "1q7"
                                                            "1q6"
                                                            "1q5"
                                                            "1q4"
                                                            "1q3"
                                                            "1q2"
                                                            "1q1"
                                                            "1q0"
                                                            "1pz"
                                                            "1py"))
                                                         #(ribcage
                                                           (define-structure
                                                             define-expansion-accessors
                                                             define-expansion-constructors)
                                                           ((top) (top) (top))
                                                           ("1og"
                                                            "1of"
                                                            "1oe")))
                                                        (hygiene guile))))
                                            (eq? (#{id-var-name _85hotwsCta0JfYIjI4J36}#
                                                   #{dots _85hotwsCta0JfYIjI4L@G}#
                                                   '(()))
                                                 (#{id-var-name _85hotwsCta0JfYIjI4J36}#
                                                   '#(syntax-object
                                                      ...
                                                      ((top)
                                                       #(ribcage () () ())
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("2de"))
                                                       #(ribcage
                                                         (lambda-var-list
                                                           gen-var
                                                           strip
                                                           expand-lambda-case
                                                           lambda*-formals
                                                           expand-simple-lambda
                                                           lambda-formals
                                                           ellipsis?
                                                           expand-void
                                                           eval-local-transformer
                                                           expand-local-syntax
                                                           expand-body
                                                           expand-macro
                                                           expand-application
                                                           expand-expr
                                                           expand
                                                           syntax-type
                                                           parse-when-list
                                                           expand-install-global
                                                           expand-top-sequence
                                                           expand-sequence
                                                           source-wrap
                                                           wrap
                                                           bound-id-member?
                                                           distinct-bound-ids?
                                                           valid-bound-ids?
                                                           bound-id=?
                                                           free-id=?
                                                           with-transformer-environment
                                                           transformer-environment
                                                           resolve-identifier
                                                           locally-bound-identifiers
                                                           id-var-name
                                                           same-marks?
                                                           join-marks
                                                           join-wraps
                                                           smart-append
                                                           make-binding-wrap
                                                           extend-ribcage!
                                                           make-empty-ribcage
                                                           new-mark
                                                           anti-mark
                                                           the-anti-mark
                                                           top-marked?
                                                           top-wrap
                                                           empty-wrap
                                                           set-ribcage-labels!
                                                           set-ribcage-marks!
                                                           set-ribcage-symnames!
                                                           ribcage-labels
                                                           ribcage-marks
                                                           ribcage-symnames
                                                           ribcage?
                                                           make-ribcage
                                                           gen-labels
                                                           gen-label
                                                           make-rename
                                                           rename-marks
                                                           rename-new
                                                           rename-old
                                                           subst-rename?
                                                           wrap-subst
                                                           wrap-marks
                                                           make-wrap
                                                           id-sym-name&marks
                                                           id-sym-name
                                                           id?
                                                           nonsymbol-id?
                                                           global-extend
                                                           lookup
                                                           macros-only-env
                                                           extend-var-env
                                                           extend-env
                                                           null-env
                                                           binding-value
                                                           binding-type
                                                           make-binding
                                                           arg-check
                                                           source-annotation
                                                           no-source
                                                           set-syntax-object-module!
                                                           set-syntax-object-wrap!
                                                           set-syntax-object-expression!
                                                           syntax-object-module
                                                           syntax-object-wrap
                                                           syntax-object-expression
                                                           syntax-object?
                                                           make-syntax-object
                                                           build-lexical-var
                                                           build-letrec
                                                           build-named-let
                                                           build-let
                                                           build-sequence
                                                           build-data
                                                           build-primref
                                                           build-lambda-case
                                                           build-case-lambda
                                                           build-simple-lambda
                                                           build-global-definition
                                                           build-global-assignment
                                                           build-global-reference
                                                           analyze-variable
                                                           build-lexical-assignment
                                                           build-lexical-reference
                                                           build-dynlet
                                                           build-conditional
                                                           build-application
                                                           build-void
                                                           maybe-name-value!
                                                           decorate-source
                                                           get-global-definition-hook
                                                           put-global-definition-hook
                                                           gensym-hook
                                                           local-eval-hook
                                                           top-level-eval-hook
                                                           fx<
                                                           fx=
                                                           fx-
                                                           fx+
                                                           set-lambda-meta!
                                                           lambda-meta
                                                           lambda?
                                                           make-dynlet
                                                           make-letrec
                                                           make-let
                                                           make-lambda-case
                                                           make-lambda
                                                           make-sequence
                                                           make-application
                                                           make-conditional
                                                           make-toplevel-define
                                                           make-toplevel-set
                                                           make-toplevel-ref
                                                           make-module-set
                                                           make-module-ref
                                                           make-lexical-set
                                                           make-lexical-ref
                                                           make-primitive-ref
                                                           make-const
                                                           make-void)
                                                         ((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                         ("1tt"
                                                          "1ts"
                                                          "1tr"
                                                          "1tq"
                                                          "1tp"
                                                          "1to"
                                                          "1tn"
                                                          "1tm"
                                                          "1tl"
                                                          "1tk"
                                                          "1tj"
                                                          "1ti"
                                                          "1th"
                                                          "1tg"
                                                          "1tf"
                                                          "1te"
                                                          "1td"
                                                          "1tc"
                                                          "1tb"
                                                          "1ta"
                                                          "1t9"
                                                          "1t8"
                                                          "1t7"
                                                          "1t6"
                                                          "1t5"
                                                          "1t4"
                                                          "1t3"
                                                          "1t2"
                                                          "1t1"
                                                          "1t0"
                                                          "1sz"
                                                          "1sy"
                                                          "1sx"
                                                          "1sw"
                                                          "1sv"
                                                          "1su"
                                                          "1st"
                                                          "1ss"
                                                          "1sr"
                                                          "1sq"
                                                          "1sp"
                                                          "1so"
                                                          "1sn"
                                                          "1sm"
                                                          "1sl"
                                                          "1sk"
                                                          "1sj"
                                                          "1si"
                                                          "1sh"
                                                          "1sg"
                                                          "1sf"
                                                          "1se"
                                                          "1sd"
                                                          "1sc"
                                                          "1sb"
                                                          "1sa"
                                                          "1s9"
                                                          "1s8"
                                                          "1s7"
                                                          "1s6"
                                                          "1s5"
                                                          "1s4"
                                                          "1s3"
                                                          "1s2"
                                                          "1s1"
                                                          "1s0"
                                                          "1rz"
                                                          "1ry"
                                                          "1rx"
                                                          "1rw"
                                                          "1rv"
                                                          "1ru"
                                                          "1rt"
                                                          "1rs"
                                                          "1rr"
                                                          "1rq"
                                                          "1rp"
                                                          "1ro"
                                                          "1rn"
                                                          "1rm"
                                                          "1rl"
                                                          "1rk"
                                                          "1rj"
                                                          "1ri"
                                                          "1rh"
                                                          "1rg"
                                                          "1rf"
                                                          "1re"
                                                          "1rd"
                                                          "1rc"
                                                          "1rb"
                                                          "1ra"
                                                          "1r9"
                                                          "1r8"
                                                          "1r7"
                                                          "1r6"
                                                          "1r5"
                                                          "1r4"
                                                          "1r3"
                                                          "1r2"
                                                          "1r1"
                                                          "1r0"
                                                          "1qz"
                                                          "1qy"
                                                          "1qx"
                                                          "1qw"
                                                          "1qv"
                                                          "1qu"
                                                          "1qt"
                                                          "1qs"
                                                          "1qr"
                                                          "1qq"
                                                          "1qp"
                                                          "1qo"
                                                          "1qn"
                                                          "1qm"
                                                          "1ql"
                                                          "1qk"
                                                          "1qj"
                                                          "1qi"
                                                          "1qh"
                                                          "1qg"
                                                          "1qf"
                                                          "1qe"
                                                          "1qd"
                                                          "1qc"
                                                          "1qb"
                                                          "1qa"
                                                          "1q9"
                                                          "1q8"
                                                          "1q7"
                                                          "1q6"
                                                          "1q5"
                                                          "1q4"
                                                          "1q3"
                                                          "1q2"
                                                          "1q1"
                                                          "1q0"
                                                          "1pz"
                                                          "1py"))
                                                       #(ribcage
                                                         (define-structure
                                                           define-expansion-accessors
                                                           define-expansion-constructors)
                                                         ((top) (top) (top))
                                                         ("1og" "1of" "1oe")))
                                                      (hygiene guile))
                                                   '(())))
                                            #f)
                                          #f))
                                      #{tmp _85hotwsCta0JfYIjI4L@B}#)
                                    #f)
                                (@apply
                                  (lambda (#{x _85hotwsCta0JfYIjI4MAr}#
                                           #{dots _85hotwsCta0JfYIjI4MAs}#
                                           #{ys _85hotwsCta0JfYIjI4MAt}#)
                                    (call-with-values
                                      (lambda ()
                                        (#{cvt* _85hotwsCta0JfYIjI4L4N}#
                                          #{ys _85hotwsCta0JfYIjI4MAt}#
                                          #{n _85hotwsCta0JfYIjI4L4T}#
                                          #{ids _85hotwsCta0JfYIjI4L4U}#))
                                      (lambda (#{ys _85hotwsCta0JfYIjI4MAw}#
                                               #{ids _85hotwsCta0JfYIjI4MAx}#)
                                        (call-with-values
                                          (lambda ()
                                            (#{cvt _85hotwsCta0JfYIjI4L4P}#
                                              #{x _85hotwsCta0JfYIjI4MAr}#
                                              (#{1+}# #{n _85hotwsCta0JfYIjI4L4T}#)
                                              #{ids _85hotwsCta0JfYIjI4MAx}#))
                                          (lambda (#{x _85hotwsCta0JfYIjI4MAy}#
                                                   #{ids _85hotwsCta0JfYIjI4MAz}#)
                                            (call-with-values
                                              (lambda ()
                                                (#{v-reverse _85hotwsCta0JfYIjI4L4O}#
                                                  #{ys _85hotwsCta0JfYIjI4MAw}#))
                                              (lambda (#{ys _85hotwsCta0JfYIjI4MBU}#
                                                       #{e _85hotwsCta0JfYIjI4MBV}#)
                                                (values
                                                  (vector
                                                    'each+
                                                    #{x _85hotwsCta0JfYIjI4MAy}#
                                                    #{ys _85hotwsCta0JfYIjI4MBU}#
                                                    #{e _85hotwsCta0JfYIjI4MBV}#)
                                                  #{ids _85hotwsCta0JfYIjI4MAz}#))))))))
                                  #{tmp _85hotwsCta0JfYIjI4L@B}#)
                                (let ((#{tmp _85hotwsCta0JfYIjI4MBW}#
                                        ($sc-dispatch
                                          #{p _85hotwsCta0JfYIjI4L4S}#
                                          '(any . any))))
                                  (if #{tmp _85hotwsCta0JfYIjI4MBW}#
                                    (@apply
                                      (lambda (#{x _85hotwsCta0JfYIjI4MBa}#
                                               #{y _85hotwsCta0JfYIjI4MBb}#)
                                        (call-with-values
                                          (lambda ()
                                            (#{cvt _85hotwsCta0JfYIjI4L4P}#
                                              #{y _85hotwsCta0JfYIjI4MBb}#
                                              #{n _85hotwsCta0JfYIjI4L4T}#
                                              #{ids _85hotwsCta0JfYIjI4L4U}#))
                                          (lambda (#{y _85hotwsCta0JfYIjI4MBc}#
                                                   #{ids _85hotwsCta0JfYIjI4MBd}#)
                                            (call-with-values
                                              (lambda ()
                                                (#{cvt _85hotwsCta0JfYIjI4L4P}#
                                                  #{x _85hotwsCta0JfYIjI4MBa}#
                                                  #{n _85hotwsCta0JfYIjI4L4T}#
                                                  #{ids _85hotwsCta0JfYIjI4MBd}#))
                                              (lambda (#{x _85hotwsCta0JfYIjI4MBe}#
                                                       #{ids _85hotwsCta0JfYIjI4MBf}#)
                                                (values
                                                  (cons #{x _85hotwsCta0JfYIjI4MBe}#
                                                        #{y _85hotwsCta0JfYIjI4MBc}#)
                                                  #{ids _85hotwsCta0JfYIjI4MBf}#))))))
                                      #{tmp _85hotwsCta0JfYIjI4MBW}#)
                                    (let ((#{tmp _85hotwsCta0JfYIjI4MBg}#
                                            ($sc-dispatch
                                              #{p _85hotwsCta0JfYIjI4L4S}#
                                              '())))
                                      (if #{tmp _85hotwsCta0JfYIjI4MBg}#
                                        (@apply
                                          (lambda ()
                                            (values
                                              '()
                                              #{ids _85hotwsCta0JfYIjI4L4U}#))
                                          #{tmp _85hotwsCta0JfYIjI4MBg}#)
                                        (let ((#{tmp _85hotwsCta0JfYIjI4MBk}#
                                                ($sc-dispatch
                                                  #{p _85hotwsCta0JfYIjI4L4S}#
                                                  '#(vector each-any))))
                                          (if #{tmp _85hotwsCta0JfYIjI4MBk}#
                                            (@apply
                                              (lambda (#{x _85hotwsCta0JfYIjI4MBo}#)
                                                (call-with-values
                                                  (lambda ()
                                                    (#{cvt _85hotwsCta0JfYIjI4L4P}#
                                                      #{x _85hotwsCta0JfYIjI4MBo}#
                                                      #{n _85hotwsCta0JfYIjI4L4T}#
                                                      #{ids _85hotwsCta0JfYIjI4L4U}#))
                                                  (lambda (#{p _85hotwsCta0JfYIjI4MBp}#
                                                           #{ids _85hotwsCta0JfYIjI4MBq}#)
                                                    (values
                                                      (vector
                                                        'vector
                                                        #{p _85hotwsCta0JfYIjI4MBp}#)
                                                      #{ids _85hotwsCta0JfYIjI4MBq}#))))
                                              #{tmp _85hotwsCta0JfYIjI4MBk}#)
                                            (values
                                              (vector
                                                'atom
                                                (#{strip _85hotwsCta0JfYIjI4J4Y}#
                                                  #{p _85hotwsCta0JfYIjI4L4S}#
                                                  '(())))
                                              #{ids _85hotwsCta0JfYIjI4L4U}#)))))))))))))))
                 (#{cvt _85hotwsCta0JfYIjI4L4P}#
                   #{pattern _85hotwsCta0JfYIjI4L4L}#
                   0
                   '()))))
           (#{build-dispatch-call _85hotwsCta0JfYIjI4LfR}#
             (lambda (#{pvars _85hotwsCta0JfYIjI4MDb}#
                      #{exp _85hotwsCta0JfYIjI4MDc}#
                      #{y _85hotwsCta0JfYIjI4MDd}#
                      #{r _85hotwsCta0JfYIjI4MDe}#
                      #{mod _85hotwsCta0JfYIjI4MDf}#)
               (let ((#{ids _85hotwsCta0JfYIjI4MDg}#
                       (map car #{pvars _85hotwsCta0JfYIjI4MDb}#)))
                 (begin
                   (map cdr #{pvars _85hotwsCta0JfYIjI4MDb}#)
                   (let ((#{labels _85hotwsCta0JfYIjI4MDi}#
                           (#{gen-labels _85hotwsCta0JfYIjI4J3q}#
                             #{ids _85hotwsCta0JfYIjI4MDg}#))
                         (#{new-vars _85hotwsCta0JfYIjI4MDj}#
                           (map #{gen-var _85hotwsCta0JfYIjI4J4Z}#
                                #{ids _85hotwsCta0JfYIjI4MDg}#)))
                     (#{build-application _85hotwsCta0JfYIjI4J3G}#
                       #f
                       (if (equal? (module-name (current-module)) '(guile))
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 7)
                           #f
                           'apply)
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 5)
                           #f
                           '(guile)
                           'apply
                           #f))
                       (list (#{build-simple-lambda _85hotwsCta0JfYIjI4J3P}#
                               #f
                               (map syntax->datum
                                    #{ids _85hotwsCta0JfYIjI4MDg}#)
                               #f
                               #{new-vars _85hotwsCta0JfYIjI4MDj}#
                               '()
                               (#{expand _85hotwsCta0JfYIjI4J4L}#
                                 #{exp _85hotwsCta0JfYIjI4MDc}#
                                 (#{extend-env _85hotwsCta0JfYIjI4J3h}#
                                   #{labels _85hotwsCta0JfYIjI4MDi}#
                                   (map (lambda (#{var _85hotwsCta0JfYIjI4MIi}#
                                                 #{level _85hotwsCta0JfYIjI4MIj}#)
                                          (cons 'syntax
                                                (cons #{var _85hotwsCta0JfYIjI4MIi}#
                                                      #{level _85hotwsCta0JfYIjI4MIj}#)))
                                        #{new-vars _85hotwsCta0JfYIjI4MDj}#
                                        (map cdr
                                             #{pvars _85hotwsCta0JfYIjI4MDb}#))
                                   #{r _85hotwsCta0JfYIjI4MDe}#)
                                 (#{make-binding-wrap _85hotwsCta0JfYIjI4J31}#
                                   #{ids _85hotwsCta0JfYIjI4MDg}#
                                   #{labels _85hotwsCta0JfYIjI4MDi}#
                                   '(()))
                                 #{mod _85hotwsCta0JfYIjI4MDf}#))
                             #{y _85hotwsCta0JfYIjI4MDd}#)))))))
           (#{gen-clause _85hotwsCta0JfYIjI4LfS}#
             (lambda (#{x _85hotwsCta0JfYIjI4LuX}#
                      #{keys _85hotwsCta0JfYIjI4LuY}#
                      #{clauses _85hotwsCta0JfYIjI4LuZ}#
                      #{r _85hotwsCta0JfYIjI4Lua}#
                      #{pat _85hotwsCta0JfYIjI4Lub}#
                      #{fender _85hotwsCta0JfYIjI4Luc}#
                      #{exp _85hotwsCta0JfYIjI4Lud}#
                      #{mod _85hotwsCta0JfYIjI4Lue}#)
               (call-with-values
                 (lambda ()
                   (#{convert-pattern _85hotwsCta0JfYIjI4LfQ}#
                     #{pat _85hotwsCta0JfYIjI4Lub}#
                     #{keys _85hotwsCta0JfYIjI4LuY}#))
                 (lambda (#{p _85hotwsCta0JfYIjI4Lw5}#
                          #{pvars _85hotwsCta0JfYIjI4Lw6}#)
                   (if (not (#{distinct-bound-ids? _85hotwsCta0JfYIjI4J4C}#
                              (map car #{pvars _85hotwsCta0JfYIjI4Lw6}#)))
                     (syntax-violation
                       'syntax-case
                       "duplicate pattern variable"
                       #{pat _85hotwsCta0JfYIjI4Lub}#)
                     (if (not (and-map
                                (lambda (#{x _85hotwsCta0JfYIjI4Lyu}#)
                                  (not (let ((#{x _85hotwsCta0JfYIjI4Lyy}#
                                               (car #{x _85hotwsCta0JfYIjI4Lyu}#)))
                                         (if (if (if (vector?
                                                       #{x _85hotwsCta0JfYIjI4Lyy}#)
                                                   (if (= (vector-length
                                                            #{x _85hotwsCta0JfYIjI4Lyy}#)
                                                          4)
                                                     (eq? (vector-ref
                                                            #{x _85hotwsCta0JfYIjI4Lyy}#
                                                            0)
                                                          'syntax-object)
                                                     #f)
                                                   #f)
                                               (symbol?
                                                 (vector-ref
                                                   #{x _85hotwsCta0JfYIjI4Lyy}#
                                                   1))
                                               #f)
                                           (if (eq? (if (if (vector?
                                                              #{x _85hotwsCta0JfYIjI4Lyy}#)
                                                          (if (= (vector-length
                                                                   #{x _85hotwsCta0JfYIjI4Lyy}#)
                                                                 4)
                                                            (eq? (vector-ref
                                                                   #{x _85hotwsCta0JfYIjI4Lyy}#
                                                                   0)
                                                                 'syntax-object)
                                                            #f)
                                                          #f)
                                                      (vector-ref
                                                        #{x _85hotwsCta0JfYIjI4Lyy}#
                                                        1)
                                                      #{x _85hotwsCta0JfYIjI4Lyy}#)
                                                    (if (if (= (vector-length
                                                                 '#(syntax-object
                                                                    ...
                                                                    ((top)
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       #(x)
                                                                       #((top))
                                                                       #("2de"))
                                                                     #(ribcage
                                                                       (lambda-var-list
                                                                         gen-var
                                                                         strip
                                                                         expand-lambda-case
                                                                         lambda*-formals
                                                                         expand-simple-lambda
                                                                         lambda-formals
                                                                         ellipsis?
                                                                         expand-void
                                                                         eval-local-transformer
                                                                         expand-local-syntax
                                                                         expand-body
                                                                         expand-macro
                                                                         expand-application
                                                                         expand-expr
                                                                         expand
                                                                         syntax-type
                                                                         parse-when-list
                                                                         expand-install-global
                                                                         expand-top-sequence
                                                                         expand-sequence
                                                                         source-wrap
                                                                         wrap
                                                                         bound-id-member?
                                                                         distinct-bound-ids?
                                                                         valid-bound-ids?
                                                                         bound-id=?
                                                                         free-id=?
                                                                         with-transformer-environment
                                                                         transformer-environment
                                                                         resolve-identifier
                                                                         locally-bound-identifiers
                                                                         id-var-name
                                                                         same-marks?
                                                                         join-marks
                                                                         join-wraps
                                                                         smart-append
                                                                         make-binding-wrap
                                                                         extend-ribcage!
                                                                         make-empty-ribcage
                                                                         new-mark
                                                                         anti-mark
                                                                         the-anti-mark
                                                                         top-marked?
                                                                         top-wrap
                                                                         empty-wrap
                                                                         set-ribcage-labels!
                                                                         set-ribcage-marks!
                                                                         set-ribcage-symnames!
                                                                         ribcage-labels
                                                                         ribcage-marks
                                                                         ribcage-symnames
                                                                         ribcage?
                                                                         make-ribcage
                                                                         gen-labels
                                                                         gen-label
                                                                         make-rename
                                                                         rename-marks
                                                                         rename-new
                                                                         rename-old
                                                                         subst-rename?
                                                                         wrap-subst
                                                                         wrap-marks
                                                                         make-wrap
                                                                         id-sym-name&marks
                                                                         id-sym-name
                                                                         id?
                                                                         nonsymbol-id?
                                                                         global-extend
                                                                         lookup
                                                                         macros-only-env
                                                                         extend-var-env
                                                                         extend-env
                                                                         null-env
                                                                         binding-value
                                                                         binding-type
                                                                         make-binding
                                                                         arg-check
                                                                         source-annotation
                                                                         no-source
                                                                         set-syntax-object-module!
                                                                         set-syntax-object-wrap!
                                                                         set-syntax-object-expression!
                                                                         syntax-object-module
                                                                         syntax-object-wrap
                                                                         syntax-object-expression
                                                                         syntax-object?
                                                                         make-syntax-object
                                                                         build-lexical-var
                                                                         build-letrec
                                                                         build-named-let
                                                                         build-let
                                                                         build-sequence
                                                                         build-data
                                                                         build-primref
                                                                         build-lambda-case
                                                                         build-case-lambda
                                                                         build-simple-lambda
                                                                         build-global-definition
                                                                         build-global-assignment
                                                                         build-global-reference
                                                                         analyze-variable
                                                                         build-lexical-assignment
                                                                         build-lexical-reference
                                                                         build-dynlet
                                                                         build-conditional
                                                                         build-application
                                                                         build-void
                                                                         maybe-name-value!
                                                                         decorate-source
                                                                         get-global-definition-hook
                                                                         put-global-definition-hook
                                                                         gensym-hook
                                                                         local-eval-hook
                                                                         top-level-eval-hook
                                                                         fx<
                                                                         fx=
                                                                         fx-
                                                                         fx+
                                                                         set-lambda-meta!
                                                                         lambda-meta
                                                                         lambda?
                                                                         make-dynlet
                                                                         make-letrec
                                                                         make-let
                                                                         make-lambda-case
                                                                         make-lambda
                                                                         make-sequence
                                                                         make-application
                                                                         make-conditional
                                                                         make-toplevel-define
                                                                         make-toplevel-set
                                                                         make-toplevel-ref
                                                                         make-module-set
                                                                         make-module-ref
                                                                         make-lexical-set
                                                                         make-lexical-ref
                                                                         make-primitive-ref
                                                                         make-const
                                                                         make-void)
                                                                       ((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                       ("1tt"
                                                                        "1ts"
                                                                        "1tr"
                                                                        "1tq"
                                                                        "1tp"
                                                                        "1to"
                                                                        "1tn"
                                                                        "1tm"
                                                                        "1tl"
                                                                        "1tk"
                                                                        "1tj"
                                                                        "1ti"
                                                                        "1th"
                                                                        "1tg"
                                                                        "1tf"
                                                                        "1te"
                                                                        "1td"
                                                                        "1tc"
                                                                        "1tb"
                                                                        "1ta"
                                                                        "1t9"
                                                                        "1t8"
                                                                        "1t7"
                                                                        "1t6"
                                                                        "1t5"
                                                                        "1t4"
                                                                        "1t3"
                                                                        "1t2"
                                                                        "1t1"
                                                                        "1t0"
                                                                        "1sz"
                                                                        "1sy"
                                                                        "1sx"
                                                                        "1sw"
                                                                        "1sv"
                                                                        "1su"
                                                                        "1st"
                                                                        "1ss"
                                                                        "1sr"
                                                                        "1sq"
                                                                        "1sp"
                                                                        "1so"
                                                                        "1sn"
                                                                        "1sm"
                                                                        "1sl"
                                                                        "1sk"
                                                                        "1sj"
                                                                        "1si"
                                                                        "1sh"
                                                                        "1sg"
                                                                        "1sf"
                                                                        "1se"
                                                                        "1sd"
                                                                        "1sc"
                                                                        "1sb"
                                                                        "1sa"
                                                                        "1s9"
                                                                        "1s8"
                                                                        "1s7"
                                                                        "1s6"
                                                                        "1s5"
                                                                        "1s4"
                                                                        "1s3"
                                                                        "1s2"
                                                                        "1s1"
                                                                        "1s0"
                                                                        "1rz"
                                                                        "1ry"
                                                                        "1rx"
                                                                        "1rw"
                                                                        "1rv"
                                                                        "1ru"
                                                                        "1rt"
                                                                        "1rs"
                                                                        "1rr"
                                                                        "1rq"
                                                                        "1rp"
                                                                        "1ro"
                                                                        "1rn"
                                                                        "1rm"
                                                                        "1rl"
                                                                        "1rk"
                                                                        "1rj"
                                                                        "1ri"
                                                                        "1rh"
                                                                        "1rg"
                                                                        "1rf"
                                                                        "1re"
                                                                        "1rd"
                                                                        "1rc"
                                                                        "1rb"
                                                                        "1ra"
                                                                        "1r9"
                                                                        "1r8"
                                                                        "1r7"
                                                                        "1r6"
                                                                        "1r5"
                                                                        "1r4"
                                                                        "1r3"
                                                                        "1r2"
                                                                        "1r1"
                                                                        "1r0"
                                                                        "1qz"
                                                                        "1qy"
                                                                        "1qx"
                                                                        "1qw"
                                                                        "1qv"
                                                                        "1qu"
                                                                        "1qt"
                                                                        "1qs"
                                                                        "1qr"
                                                                        "1qq"
                                                                        "1qp"
                                                                        "1qo"
                                                                        "1qn"
                                                                        "1qm"
                                                                        "1ql"
                                                                        "1qk"
                                                                        "1qj"
                                                                        "1qi"
                                                                        "1qh"
                                                                        "1qg"
                                                                        "1qf"
                                                                        "1qe"
                                                                        "1qd"
                                                                        "1qc"
                                                                        "1qb"
                                                                        "1qa"
                                                                        "1q9"
                                                                        "1q8"
                                                                        "1q7"
                                                                        "1q6"
                                                                        "1q5"
                                                                        "1q4"
                                                                        "1q3"
                                                                        "1q2"
                                                                        "1q1"
                                                                        "1q0"
                                                                        "1pz"
                                                                        "1py"))
                                                                     #(ribcage
                                                                       (define-structure
                                                                         define-expansion-accessors
                                                                         define-expansion-constructors)
                                                                       ((top)
                                                                        (top)
                                                                        (top))
                                                                       ("1og"
                                                                        "1of"
                                                                        "1oe")))
                                                                    (hygiene
                                                                      guile)))
                                                               4)
                                                          #t
                                                          #f)
                                                      '...
                                                      '#(syntax-object
                                                         ...
                                                         ((top)
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(x)
                                                            #((top))
                                                            #("2de"))
                                                          #(ribcage
                                                            (lambda-var-list
                                                              gen-var
                                                              strip
                                                              expand-lambda-case
                                                              lambda*-formals
                                                              expand-simple-lambda
                                                              lambda-formals
                                                              ellipsis?
                                                              expand-void
                                                              eval-local-transformer
                                                              expand-local-syntax
                                                              expand-body
                                                              expand-macro
                                                              expand-application
                                                              expand-expr
                                                              expand
                                                              syntax-type
                                                              parse-when-list
                                                              expand-install-global
                                                              expand-top-sequence
                                                              expand-sequence
                                                              source-wrap
                                                              wrap
                                                              bound-id-member?
                                                              distinct-bound-ids?
                                                              valid-bound-ids?
                                                              bound-id=?
                                                              free-id=?
                                                              with-transformer-environment
                                                              transformer-environment
                                                              resolve-identifier
                                                              locally-bound-identifiers
                                                              id-var-name
                                                              same-marks?
                                                              join-marks
                                                              join-wraps
                                                              smart-append
                                                              make-binding-wrap
                                                              extend-ribcage!
                                                              make-empty-ribcage
                                                              new-mark
                                                              anti-mark
                                                              the-anti-mark
                                                              top-marked?
                                                              top-wrap
                                                              empty-wrap
                                                              set-ribcage-labels!
                                                              set-ribcage-marks!
                                                              set-ribcage-symnames!
                                                              ribcage-labels
                                                              ribcage-marks
                                                              ribcage-symnames
                                                              ribcage?
                                                              make-ribcage
                                                              gen-labels
                                                              gen-label
                                                              make-rename
                                                              rename-marks
                                                              rename-new
                                                              rename-old
                                                              subst-rename?
                                                              wrap-subst
                                                              wrap-marks
                                                              make-wrap
                                                              id-sym-name&marks
                                                              id-sym-name
                                                              id?
                                                              nonsymbol-id?
                                                              global-extend
                                                              lookup
                                                              macros-only-env
                                                              extend-var-env
                                                              extend-env
                                                              null-env
                                                              binding-value
                                                              binding-type
                                                              make-binding
                                                              arg-check
                                                              source-annotation
                                                              no-source
                                                              set-syntax-object-module!
                                                              set-syntax-object-wrap!
                                                              set-syntax-object-expression!
                                                              syntax-object-module
                                                              syntax-object-wrap
                                                              syntax-object-expression
                                                              syntax-object?
                                                              make-syntax-object
                                                              build-lexical-var
                                                              build-letrec
                                                              build-named-let
                                                              build-let
                                                              build-sequence
                                                              build-data
                                                              build-primref
                                                              build-lambda-case
                                                              build-case-lambda
                                                              build-simple-lambda
                                                              build-global-definition
                                                              build-global-assignment
                                                              build-global-reference
                                                              analyze-variable
                                                              build-lexical-assignment
                                                              build-lexical-reference
                                                              build-dynlet
                                                              build-conditional
                                                              build-application
                                                              build-void
                                                              maybe-name-value!
                                                              decorate-source
                                                              get-global-definition-hook
                                                              put-global-definition-hook
                                                              gensym-hook
                                                              local-eval-hook
                                                              top-level-eval-hook
                                                              fx<
                                                              fx=
                                                              fx-
                                                              fx+
                                                              set-lambda-meta!
                                                              lambda-meta
                                                              lambda?
                                                              make-dynlet
                                                              make-letrec
                                                              make-let
                                                              make-lambda-case
                                                              make-lambda
                                                              make-sequence
                                                              make-application
                                                              make-conditional
                                                              make-toplevel-define
                                                              make-toplevel-set
                                                              make-toplevel-ref
                                                              make-module-set
                                                              make-module-ref
                                                              make-lexical-set
                                                              make-lexical-ref
                                                              make-primitive-ref
                                                              make-const
                                                              make-void)
                                                            ((top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                            ("1tt"
                                                             "1ts"
                                                             "1tr"
                                                             "1tq"
                                                             "1tp"
                                                             "1to"
                                                             "1tn"
                                                             "1tm"
                                                             "1tl"
                                                             "1tk"
                                                             "1tj"
                                                             "1ti"
                                                             "1th"
                                                             "1tg"
                                                             "1tf"
                                                             "1te"
                                                             "1td"
                                                             "1tc"
                                                             "1tb"
                                                             "1ta"
                                                             "1t9"
                                                             "1t8"
                                                             "1t7"
                                                             "1t6"
                                                             "1t5"
                                                             "1t4"
                                                             "1t3"
                                                             "1t2"
                                                             "1t1"
                                                             "1t0"
                                                             "1sz"
                                                             "1sy"
                                                             "1sx"
                                                             "1sw"
                                                             "1sv"
                                                             "1su"
                                                             "1st"
                                                             "1ss"
                                                             "1sr"
                                                             "1sq"
                                                             "1sp"
                                                             "1so"
                                                             "1sn"
                                                             "1sm"
                                                             "1sl"
                                                             "1sk"
                                                             "1sj"
                                                             "1si"
                                                             "1sh"
                                                             "1sg"
                                                             "1sf"
                                                             "1se"
                                                             "1sd"
                                                             "1sc"
                                                             "1sb"
                                                             "1sa"
                                                             "1s9"
                                                             "1s8"
                                                             "1s7"
                                                             "1s6"
                                                             "1s5"
                                                             "1s4"
                                                             "1s3"
                                                             "1s2"
                                                             "1s1"
                                                             "1s0"
                                                             "1rz"
                                                             "1ry"
                                                             "1rx"
                                                             "1rw"
                                                             "1rv"
                                                             "1ru"
                                                             "1rt"
                                                             "1rs"
                                                             "1rr"
                                                             "1rq"
                                                             "1rp"
                                                             "1ro"
                                                             "1rn"
                                                             "1rm"
                                                             "1rl"
                                                             "1rk"
                                                             "1rj"
                                                             "1ri"
                                                             "1rh"
                                                             "1rg"
                                                             "1rf"
                                                             "1re"
                                                             "1rd"
                                                             "1rc"
                                                             "1rb"
                                                             "1ra"
                                                             "1r9"
                                                             "1r8"
                                                             "1r7"
                                                             "1r6"
                                                             "1r5"
                                                             "1r4"
                                                             "1r3"
                                                             "1r2"
                                                             "1r1"
                                                             "1r0"
                                                             "1qz"
                                                             "1qy"
                                                             "1qx"
                                                             "1qw"
                                                             "1qv"
                                                             "1qu"
                                                             "1qt"
                                                             "1qs"
                                                             "1qr"
                                                             "1qq"
                                                             "1qp"
                                                             "1qo"
                                                             "1qn"
                                                             "1qm"
                                                             "1ql"
                                                             "1qk"
                                                             "1qj"
                                                             "1qi"
                                                             "1qh"
                                                             "1qg"
                                                             "1qf"
                                                             "1qe"
                                                             "1qd"
                                                             "1qc"
                                                             "1qb"
                                                             "1qa"
                                                             "1q9"
                                                             "1q8"
                                                             "1q7"
                                                             "1q6"
                                                             "1q5"
                                                             "1q4"
                                                             "1q3"
                                                             "1q2"
                                                             "1q1"
                                                             "1q0"
                                                             "1pz"
                                                             "1py"))
                                                          #(ribcage
                                                            (define-structure
                                                              define-expansion-accessors
                                                              define-expansion-constructors)
                                                            ((top) (top) (top))
                                                            ("1og"
                                                             "1of"
                                                             "1oe")))
                                                         (hygiene guile))))
                                             (eq? (#{id-var-name _85hotwsCta0JfYIjI4J36}#
                                                    #{x _85hotwsCta0JfYIjI4Lyy}#
                                                    '(()))
                                                  (#{id-var-name _85hotwsCta0JfYIjI4J36}#
                                                    '#(syntax-object
                                                       ...
                                                       ((top)
                                                        #(ribcage () () ())
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(x)
                                                          #((top))
                                                          #("2de"))
                                                        #(ribcage
                                                          (lambda-var-list
                                                            gen-var
                                                            strip
                                                            expand-lambda-case
                                                            lambda*-formals
                                                            expand-simple-lambda
                                                            lambda-formals
                                                            ellipsis?
                                                            expand-void
                                                            eval-local-transformer
                                                            expand-local-syntax
                                                            expand-body
                                                            expand-macro
                                                            expand-application
                                                            expand-expr
                                                            expand
                                                            syntax-type
                                                            parse-when-list
                                                            expand-install-global
                                                            expand-top-sequence
                                                            expand-sequence
                                                            source-wrap
                                                            wrap
                                                            bound-id-member?
                                                            distinct-bound-ids?
                                                            valid-bound-ids?
                                                            bound-id=?
                                                            free-id=?
                                                            with-transformer-environment
                                                            transformer-environment
                                                            resolve-identifier
                                                            locally-bound-identifiers
                                                            id-var-name
                                                            same-marks?
                                                            join-marks
                                                            join-wraps
                                                            smart-append
                                                            make-binding-wrap
                                                            extend-ribcage!
                                                            make-empty-ribcage
                                                            new-mark
                                                            anti-mark
                                                            the-anti-mark
                                                            top-marked?
                                                            top-wrap
                                                            empty-wrap
                                                            set-ribcage-labels!
                                                            set-ribcage-marks!
                                                            set-ribcage-symnames!
                                                            ribcage-labels
                                                            ribcage-marks
                                                            ribcage-symnames
                                                            ribcage?
                                                            make-ribcage
                                                            gen-labels
                                                            gen-label
                                                            make-rename
                                                            rename-marks
                                                            rename-new
                                                            rename-old
                                                            subst-rename?
                                                            wrap-subst
                                                            wrap-marks
                                                            make-wrap
                                                            id-sym-name&marks
                                                            id-sym-name
                                                            id?
                                                            nonsymbol-id?
                                                            global-extend
                                                            lookup
                                                            macros-only-env
                                                            extend-var-env
                                                            extend-env
                                                            null-env
                                                            binding-value
                                                            binding-type
                                                            make-binding
                                                            arg-check
                                                            source-annotation
                                                            no-source
                                                            set-syntax-object-module!
                                                            set-syntax-object-wrap!
                                                            set-syntax-object-expression!
                                                            syntax-object-module
                                                            syntax-object-wrap
                                                            syntax-object-expression
                                                            syntax-object?
                                                            make-syntax-object
                                                            build-lexical-var
                                                            build-letrec
                                                            build-named-let
                                                            build-let
                                                            build-sequence
                                                            build-data
                                                            build-primref
                                                            build-lambda-case
                                                            build-case-lambda
                                                            build-simple-lambda
                                                            build-global-definition
                                                            build-global-assignment
                                                            build-global-reference
                                                            analyze-variable
                                                            build-lexical-assignment
                                                            build-lexical-reference
                                                            build-dynlet
                                                            build-conditional
                                                            build-application
                                                            build-void
                                                            maybe-name-value!
                                                            decorate-source
                                                            get-global-definition-hook
                                                            put-global-definition-hook
                                                            gensym-hook
                                                            local-eval-hook
                                                            top-level-eval-hook
                                                            fx<
                                                            fx=
                                                            fx-
                                                            fx+
                                                            set-lambda-meta!
                                                            lambda-meta
                                                            lambda?
                                                            make-dynlet
                                                            make-letrec
                                                            make-let
                                                            make-lambda-case
                                                            make-lambda
                                                            make-sequence
                                                            make-application
                                                            make-conditional
                                                            make-toplevel-define
                                                            make-toplevel-set
                                                            make-toplevel-ref
                                                            make-module-set
                                                            make-module-ref
                                                            make-lexical-set
                                                            make-lexical-ref
                                                            make-primitive-ref
                                                            make-const
                                                            make-void)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("1tt"
                                                           "1ts"
                                                           "1tr"
                                                           "1tq"
                                                           "1tp"
                                                           "1to"
                                                           "1tn"
                                                           "1tm"
                                                           "1tl"
                                                           "1tk"
                                                           "1tj"
                                                           "1ti"
                                                           "1th"
                                                           "1tg"
                                                           "1tf"
                                                           "1te"
                                                           "1td"
                                                           "1tc"
                                                           "1tb"
                                                           "1ta"
                                                           "1t9"
                                                           "1t8"
                                                           "1t7"
                                                           "1t6"
                                                           "1t5"
                                                           "1t4"
                                                           "1t3"
                                                           "1t2"
                                                           "1t1"
                                                           "1t0"
                                                           "1sz"
                                                           "1sy"
                                                           "1sx"
                                                           "1sw"
                                                           "1sv"
                                                           "1su"
                                                           "1st"
                                                           "1ss"
                                                           "1sr"
                                                           "1sq"
                                                           "1sp"
                                                           "1so"
                                                           "1sn"
                                                           "1sm"
                                                           "1sl"
                                                           "1sk"
                                                           "1sj"
                                                           "1si"
                                                           "1sh"
                                                           "1sg"
                                                           "1sf"
                                                           "1se"
                                                           "1sd"
                                                           "1sc"
                                                           "1sb"
                                                           "1sa"
                                                           "1s9"
                                                           "1s8"
                                                           "1s7"
                                                           "1s6"
                                                           "1s5"
                                                           "1s4"
                                                           "1s3"
                                                           "1s2"
                                                           "1s1"
                                                           "1s0"
                                                           "1rz"
                                                           "1ry"
                                                           "1rx"
                                                           "1rw"
                                                           "1rv"
                                                           "1ru"
                                                           "1rt"
                                                           "1rs"
                                                           "1rr"
                                                           "1rq"
                                                           "1rp"
                                                           "1ro"
                                                           "1rn"
                                                           "1rm"
                                                           "1rl"
                                                           "1rk"
                                                           "1rj"
                                                           "1ri"
                                                           "1rh"
                                                           "1rg"
                                                           "1rf"
                                                           "1re"
                                                           "1rd"
                                                           "1rc"
                                                           "1rb"
                                                           "1ra"
                                                           "1r9"
                                                           "1r8"
                                                           "1r7"
                                                           "1r6"
                                                           "1r5"
                                                           "1r4"
                                                           "1r3"
                                                           "1r2"
                                                           "1r1"
                                                           "1r0"
                                                           "1qz"
                                                           "1qy"
                                                           "1qx"
                                                           "1qw"
                                                           "1qv"
                                                           "1qu"
                                                           "1qt"
                                                           "1qs"
                                                           "1qr"
                                                           "1qq"
                                                           "1qp"
                                                           "1qo"
                                                           "1qn"
                                                           "1qm"
                                                           "1ql"
                                                           "1qk"
                                                           "1qj"
                                                           "1qi"
                                                           "1qh"
                                                           "1qg"
                                                           "1qf"
                                                           "1qe"
                                                           "1qd"
                                                           "1qc"
                                                           "1qb"
                                                           "1qa"
                                                           "1q9"
                                                           "1q8"
                                                           "1q7"
                                                           "1q6"
                                                           "1q5"
                                                           "1q4"
                                                           "1q3"
                                                           "1q2"
                                                           "1q1"
                                                           "1q0"
                                                           "1pz"
                                                           "1py"))
                                                        #(ribcage
                                                          (define-structure
                                                            define-expansion-accessors
                                                            define-expansion-constructors)
                                                          ((top) (top) (top))
                                                          ("1og" "1of" "1oe")))
                                                       (hygiene guile))
                                                    '(())))
                                             #f)
                                           #f))))
                                #{pvars _85hotwsCta0JfYIjI4Lw6}#))
                       (syntax-violation
                         'syntax-case
                         "misplaced ellipsis"
                         #{pat _85hotwsCta0JfYIjI4Lub}#)
                       (let ((#{y _85hotwsCta0JfYIjI4Lz$}#
                               (gensym
                                 (string-append (symbol->string 'tmp) " "))))
                         (#{build-application _85hotwsCta0JfYIjI4J3G}#
                           #f
                           (let ((#{req _85hotwsCta0JfYIjI4L2N}# (list 'tmp))
                                 (#{vars _85hotwsCta0JfYIjI4L2P}#
                                   (list #{y _85hotwsCta0JfYIjI4Lz$}#))
                                 (#{exp _85hotwsCta0JfYIjI4L2R}#
                                   (let ((#{y _85hotwsCta0JfYIjI4L2i}#
                                           (make-struct/no-tail
                                             (vector-ref %expanded-vtables 3)
                                             #f
                                             'tmp
                                             #{y _85hotwsCta0JfYIjI4Lz$}#)))
                                     (let ((#{test-exp _85hotwsCta0JfYIjI4L2m}#
                                             (let ((#{tmp _85hotwsCta0JfYIjI4L2v}#
                                                     ($sc-dispatch
                                                       #{fender _85hotwsCta0JfYIjI4Luc}#
                                                       '#(atom #t))))
                                               (if #{tmp _85hotwsCta0JfYIjI4L2v}#
                                                 (@apply
                                                   (lambda ()
                                                     #{y _85hotwsCta0JfYIjI4L2i}#)
                                                   #{tmp _85hotwsCta0JfYIjI4L2v}#)
                                                 (let ((#{then-exp _85hotwsCta0JfYIjI4L3B}#
                                                         (#{build-dispatch-call _85hotwsCta0JfYIjI4LfR}#
                                                           #{pvars _85hotwsCta0JfYIjI4Lw6}#
                                                           #{fender _85hotwsCta0JfYIjI4Luc}#
                                                           #{y _85hotwsCta0JfYIjI4L2i}#
                                                           #{r _85hotwsCta0JfYIjI4Lua}#
                                                           #{mod _85hotwsCta0JfYIjI4Lue}#))
                                                       (#{else-exp _85hotwsCta0JfYIjI4L3C}#
                                                         (make-struct/no-tail
                                                           (vector-ref
                                                             %expanded-vtables
                                                             1)
                                                           #f
                                                           #f)))
                                                   (make-struct/no-tail
                                                     (vector-ref
                                                       %expanded-vtables
                                                       10)
                                                     #f
                                                     #{y _85hotwsCta0JfYIjI4L2i}#
                                                     #{then-exp _85hotwsCta0JfYIjI4L3B}#
                                                     #{else-exp _85hotwsCta0JfYIjI4L3C}#)))))
                                           (#{then-exp _85hotwsCta0JfYIjI4L2n}#
                                             (#{build-dispatch-call _85hotwsCta0JfYIjI4LfR}#
                                               #{pvars _85hotwsCta0JfYIjI4Lw6}#
                                               #{exp _85hotwsCta0JfYIjI4Lud}#
                                               #{y _85hotwsCta0JfYIjI4L2i}#
                                               #{r _85hotwsCta0JfYIjI4Lua}#
                                               #{mod _85hotwsCta0JfYIjI4Lue}#))
                                           (#{else-exp _85hotwsCta0JfYIjI4L2o}#
                                             (#{gen-syntax-case _85hotwsCta0JfYIjI4LfT}#
                                               #{x _85hotwsCta0JfYIjI4LuX}#
                                               #{keys _85hotwsCta0JfYIjI4LuY}#
                                               #{clauses _85hotwsCta0JfYIjI4LuZ}#
                                               #{r _85hotwsCta0JfYIjI4Lua}#
                                               #{mod _85hotwsCta0JfYIjI4Lue}#)))
                                       (make-struct/no-tail
                                         (vector-ref %expanded-vtables 10)
                                         #f
                                         #{test-exp _85hotwsCta0JfYIjI4L2m}#
                                         #{then-exp _85hotwsCta0JfYIjI4L2n}#
                                         #{else-exp _85hotwsCta0JfYIjI4L2o}#)))))
                             (let ((#{body _85hotwsCta0JfYIjI4L2W}#
                                     (make-struct/no-tail
                                       (vector-ref %expanded-vtables 14)
                                       #f
                                       #{req _85hotwsCta0JfYIjI4L2N}#
                                       #f
                                       #f
                                       #f
                                       '()
                                       #{vars _85hotwsCta0JfYIjI4L2P}#
                                       #{exp _85hotwsCta0JfYIjI4L2R}#
                                       #f)))
                               (make-struct/no-tail
                                 (vector-ref %expanded-vtables 13)
                                 #f
                                 '()
                                 #{body _85hotwsCta0JfYIjI4L2W}#)))
                           (list (if (eq? #{p _85hotwsCta0JfYIjI4Lw5}# 'any)
                                   (let ((#{fun-exp _85hotwsCta0JfYIjI4L3Y}#
                                           (if (equal?
                                                 (module-name (current-module))
                                                 '(guile))
                                             (make-struct/no-tail
                                               (vector-ref %expanded-vtables 7)
                                               #f
                                               'list)
                                             (make-struct/no-tail
                                               (vector-ref %expanded-vtables 5)
                                               #f
                                               '(guile)
                                               'list
                                               #f)))
                                         (#{arg-exps _85hotwsCta0JfYIjI4L3Z}#
                                           (list #{x _85hotwsCta0JfYIjI4LuX}#)))
                                     (make-struct/no-tail
                                       (vector-ref %expanded-vtables 11)
                                       #f
                                       #{fun-exp _85hotwsCta0JfYIjI4L3Y}#
                                       #{arg-exps _85hotwsCta0JfYIjI4L3Z}#))
                                   (let ((#{fun-exp _85hotwsCta0JfYIjI4L3w}#
                                           (if (equal?
                                                 (module-name (current-module))
                                                 '(guile))
                                             (make-struct/no-tail
                                               (vector-ref %expanded-vtables 7)
                                               #f
                                               '$sc-dispatch)
                                             (make-struct/no-tail
                                               (vector-ref %expanded-vtables 5)
                                               #f
                                               '(guile)
                                               '$sc-dispatch
                                               #f)))
                                         (#{arg-exps _85hotwsCta0JfYIjI4L3x}#
                                           (list #{x _85hotwsCta0JfYIjI4LuX}#
                                                 (make-struct/no-tail
                                                   (vector-ref
                                                     %expanded-vtables
                                                     1)
                                                   #f
                                                   #{p _85hotwsCta0JfYIjI4Lw5}#))))
                                     (make-struct/no-tail
                                       (vector-ref %expanded-vtables 11)
                                       #f
                                       #{fun-exp _85hotwsCta0JfYIjI4L3w}#
                                       #{arg-exps _85hotwsCta0JfYIjI4L3x}#))))))))))))
           (#{gen-syntax-case _85hotwsCta0JfYIjI4LfT}#
             (lambda (#{x _85hotwsCta0JfYIjI4Lli}#
                      #{keys _85hotwsCta0JfYIjI4Llj}#
                      #{clauses _85hotwsCta0JfYIjI4Llk}#
                      #{r _85hotwsCta0JfYIjI4Lll}#
                      #{mod _85hotwsCta0JfYIjI4Llm}#)
               (if (null? #{clauses _85hotwsCta0JfYIjI4Llk}#)
                 (let ((#{fun-exp _85hotwsCta0JfYIjI4Llr}#
                         (if (equal? (module-name (current-module)) '(guile))
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 7)
                             #f
                             'syntax-violation)
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 5)
                             #f
                             '(guile)
                             'syntax-violation
                             #f)))
                       (#{arg-exps _85hotwsCta0JfYIjI4Lls}#
                         (list (make-struct/no-tail
                                 (vector-ref %expanded-vtables 1)
                                 #f
                                 #f)
                               (make-struct/no-tail
                                 (vector-ref %expanded-vtables 1)
                                 #f
                                 "source expression failed to match any pattern")
                               #{x _85hotwsCta0JfYIjI4Lli}#)))
                   (make-struct/no-tail
                     (vector-ref %expanded-vtables 11)
                     #f
                     #{fun-exp _85hotwsCta0JfYIjI4Llr}#
                     #{arg-exps _85hotwsCta0JfYIjI4Lls}#))
                 (let ((#{tmp _85hotwsCta0JfYIjI4LmN}#
                         (car #{clauses _85hotwsCta0JfYIjI4Llk}#)))
                   (let ((#{tmp _85hotwsCta0JfYIjI4LmO}#
                           ($sc-dispatch
                             #{tmp _85hotwsCta0JfYIjI4LmN}#
                             '(any any))))
                     (if #{tmp _85hotwsCta0JfYIjI4LmO}#
                       (@apply
                         (lambda (#{pat _85hotwsCta0JfYIjI4LmQ}#
                                  #{exp _85hotwsCta0JfYIjI4LmR}#)
                           (if (if (if (symbol? #{pat _85hotwsCta0JfYIjI4LmQ}#)
                                     #t
                                     (if (if (vector?
                                               #{pat _85hotwsCta0JfYIjI4LmQ}#)
                                           (if (= (vector-length
                                                    #{pat _85hotwsCta0JfYIjI4LmQ}#)
                                                  4)
                                             (eq? (vector-ref
                                                    #{pat _85hotwsCta0JfYIjI4LmQ}#
                                                    0)
                                                  'syntax-object)
                                             #f)
                                           #f)
                                       (symbol?
                                         (vector-ref
                                           #{pat _85hotwsCta0JfYIjI4LmQ}#
                                           1))
                                       #f))
                                 (and-map
                                   (lambda (#{x _85hotwsCta0JfYIjI4Lms}#)
                                     (not (if (eq? (if (if (vector?
                                                             #{pat _85hotwsCta0JfYIjI4LmQ}#)
                                                         (if (= (vector-length
                                                                  #{pat _85hotwsCta0JfYIjI4LmQ}#)
                                                                4)
                                                           (eq? (vector-ref
                                                                  #{pat _85hotwsCta0JfYIjI4LmQ}#
                                                                  0)
                                                                'syntax-object)
                                                           #f)
                                                         #f)
                                                     (vector-ref
                                                       #{pat _85hotwsCta0JfYIjI4LmQ}#
                                                       1)
                                                     #{pat _85hotwsCta0JfYIjI4LmQ}#)
                                                   (if (if (vector?
                                                             #{x _85hotwsCta0JfYIjI4Lms}#)
                                                         (if (= (vector-length
                                                                  #{x _85hotwsCta0JfYIjI4Lms}#)
                                                                4)
                                                           (eq? (vector-ref
                                                                  #{x _85hotwsCta0JfYIjI4Lms}#
                                                                  0)
                                                                'syntax-object)
                                                           #f)
                                                         #f)
                                                     (vector-ref
                                                       #{x _85hotwsCta0JfYIjI4Lms}#
                                                       1)
                                                     #{x _85hotwsCta0JfYIjI4Lms}#))
                                            (eq? (#{id-var-name _85hotwsCta0JfYIjI4J36}#
                                                   #{pat _85hotwsCta0JfYIjI4LmQ}#
                                                   '(()))
                                                 (#{id-var-name _85hotwsCta0JfYIjI4J36}#
                                                   #{x _85hotwsCta0JfYIjI4Lms}#
                                                   '(())))
                                            #f)))
                                   (cons '#(syntax-object
                                            ...
                                            ((top)
                                             #(ribcage
                                               #(pat exp)
                                               #((top) (top))
                                               #("2w6" "2w7"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x keys clauses r mod)
                                               #((top) (top) (top) (top) (top))
                                               #("2w1"
                                                 "2w2"
                                                 "2w3"
                                                 "2w4"
                                                 "2w5"))
                                             #(ribcage
                                               (gen-syntax-case
                                                 gen-clause
                                                 build-dispatch-call
                                                 convert-pattern)
                                               ((top) (top) (top) (top))
                                               ("2u0" "2tz" "2ty" "2tx"))
                                             #(ribcage
                                               (lambda-var-list
                                                 gen-var
                                                 strip
                                                 expand-lambda-case
                                                 lambda*-formals
                                                 expand-simple-lambda
                                                 lambda-formals
                                                 ellipsis?
                                                 expand-void
                                                 eval-local-transformer
                                                 expand-local-syntax
                                                 expand-body
                                                 expand-macro
                                                 expand-application
                                                 expand-expr
                                                 expand
                                                 syntax-type
                                                 parse-when-list
                                                 expand-install-global
                                                 expand-top-sequence
                                                 expand-sequence
                                                 source-wrap
                                                 wrap
                                                 bound-id-member?
                                                 distinct-bound-ids?
                                                 valid-bound-ids?
                                                 bound-id=?
                                                 free-id=?
                                                 with-transformer-environment
                                                 transformer-environment
                                                 resolve-identifier
                                                 locally-bound-identifiers
                                                 id-var-name
                                                 same-marks?
                                                 join-marks
                                                 join-wraps
                                                 smart-append
                                                 make-binding-wrap
                                                 extend-ribcage!
                                                 make-empty-ribcage
                                                 new-mark
                                                 anti-mark
                                                 the-anti-mark
                                                 top-marked?
                                                 top-wrap
                                                 empty-wrap
                                                 set-ribcage-labels!
                                                 set-ribcage-marks!
                                                 set-ribcage-symnames!
                                                 ribcage-labels
                                                 ribcage-marks
                                                 ribcage-symnames
                                                 ribcage?
                                                 make-ribcage
                                                 gen-labels
                                                 gen-label
                                                 make-rename
                                                 rename-marks
                                                 rename-new
                                                 rename-old
                                                 subst-rename?
                                                 wrap-subst
                                                 wrap-marks
                                                 make-wrap
                                                 id-sym-name&marks
                                                 id-sym-name
                                                 id?
                                                 nonsymbol-id?
                                                 global-extend
                                                 lookup
                                                 macros-only-env
                                                 extend-var-env
                                                 extend-env
                                                 null-env
                                                 binding-value
                                                 binding-type
                                                 make-binding
                                                 arg-check
                                                 source-annotation
                                                 no-source
                                                 set-syntax-object-module!
                                                 set-syntax-object-wrap!
                                                 set-syntax-object-expression!
                                                 syntax-object-module
                                                 syntax-object-wrap
                                                 syntax-object-expression
                                                 syntax-object?
                                                 make-syntax-object
                                                 build-lexical-var
                                                 build-letrec
                                                 build-named-let
                                                 build-let
                                                 build-sequence
                                                 build-data
                                                 build-primref
                                                 build-lambda-case
                                                 build-case-lambda
                                                 build-simple-lambda
                                                 build-global-definition
                                                 build-global-assignment
                                                 build-global-reference
                                                 analyze-variable
                                                 build-lexical-assignment
                                                 build-lexical-reference
                                                 build-dynlet
                                                 build-conditional
                                                 build-application
                                                 build-void
                                                 maybe-name-value!
                                                 decorate-source
                                                 get-global-definition-hook
                                                 put-global-definition-hook
                                                 gensym-hook
                                                 local-eval-hook
                                                 top-level-eval-hook
                                                 fx<
                                                 fx=
                                                 fx-
                                                 fx+
                                                 set-lambda-meta!
                                                 lambda-meta
                                                 lambda?
                                                 make-dynlet
                                                 make-letrec
                                                 make-let
                                                 make-lambda-case
                                                 make-lambda
                                                 make-sequence
                                                 make-application
                                                 make-conditional
                                                 make-toplevel-define
                                                 make-toplevel-set
                                                 make-toplevel-ref
                                                 make-module-set
                                                 make-module-ref
                                                 make-lexical-set
                                                 make-lexical-ref
                                                 make-primitive-ref
                                                 make-const
                                                 make-void)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("1tt"
                                                "1ts"
                                                "1tr"
                                                "1tq"
                                                "1tp"
                                                "1to"
                                                "1tn"
                                                "1tm"
                                                "1tl"
                                                "1tk"
                                                "1tj"
                                                "1ti"
                                                "1th"
                                                "1tg"
                                                "1tf"
                                                "1te"
                                                "1td"
                                                "1tc"
                                                "1tb"
                                                "1ta"
                                                "1t9"
                                                "1t8"
                                                "1t7"
                                                "1t6"
                                                "1t5"
                                                "1t4"
                                                "1t3"
                                                "1t2"
                                                "1t1"
                                                "1t0"
                                                "1sz"
                                                "1sy"
                                                "1sx"
                                                "1sw"
                                                "1sv"
                                                "1su"
                                                "1st"
                                                "1ss"
                                                "1sr"
                                                "1sq"
                                                "1sp"
                                                "1so"
                                                "1sn"
                                                "1sm"
                                                "1sl"
                                                "1sk"
                                                "1sj"
                                                "1si"
                                                "1sh"
                                                "1sg"
                                                "1sf"
                                                "1se"
                                                "1sd"
                                                "1sc"
                                                "1sb"
                                                "1sa"
                                                "1s9"
                                                "1s8"
                                                "1s7"
                                                "1s6"
                                                "1s5"
                                                "1s4"
                                                "1s3"
                                                "1s2"
                                                "1s1"
                                                "1s0"
                                                "1rz"
                                                "1ry"
                                                "1rx"
                                                "1rw"
                                                "1rv"
                                                "1ru"
                                                "1rt"
                                                "1rs"
                                                "1rr"
                                                "1rq"
                                                "1rp"
                                                "1ro"
                                                "1rn"
                                                "1rm"
                                                "1rl"
                                                "1rk"
                                                "1rj"
                                                "1ri"
                                                "1rh"
                                                "1rg"
                                                "1rf"
                                                "1re"
                                                "1rd"
                                                "1rc"
                                                "1rb"
                                                "1ra"
                                                "1r9"
                                                "1r8"
                                                "1r7"
                                                "1r6"
                                                "1r5"
                                                "1r4"
                                                "1r3"
                                                "1r2"
                                                "1r1"
                                                "1r0"
                                                "1qz"
                                                "1qy"
                                                "1qx"
                                                "1qw"
                                                "1qv"
                                                "1qu"
                                                "1qt"
                                                "1qs"
                                                "1qr"
                                                "1qq"
                                                "1qp"
                                                "1qo"
                                                "1qn"
                                                "1qm"
                                                "1ql"
                                                "1qk"
                                                "1qj"
                                                "1qi"
                                                "1qh"
                                                "1qg"
                                                "1qf"
                                                "1qe"
                                                "1qd"
                                                "1qc"
                                                "1qb"
                                                "1qa"
                                                "1q9"
                                                "1q8"
                                                "1q7"
                                                "1q6"
                                                "1q5"
                                                "1q4"
                                                "1q3"
                                                "1q2"
                                                "1q1"
                                                "1q0"
                                                "1pz"
                                                "1py"))
                                             #(ribcage
                                               (define-structure
                                                 define-expansion-accessors
                                                 define-expansion-constructors)
                                               ((top) (top) (top))
                                               ("1og" "1of" "1oe")))
                                            (hygiene guile))
                                         #{keys _85hotwsCta0JfYIjI4Llj}#))
                                 #f)
                             (if (if (eq? (if (if (= (vector-length
                                                       '#(syntax-object
                                                          pad
                                                          ((top)
                                                           #(ribcage
                                                             #(pat exp)
                                                             #((top) (top))
                                                             #("2w6" "2w7"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x
                                                               keys
                                                               clauses
                                                               r
                                                               mod)
                                                             #((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                             #("2w1"
                                                               "2w2"
                                                               "2w3"
                                                               "2w4"
                                                               "2w5"))
                                                           #(ribcage
                                                             (gen-syntax-case
                                                               gen-clause
                                                               build-dispatch-call
                                                               convert-pattern)
                                                             ((top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                             ("2u0"
                                                              "2tz"
                                                              "2ty"
                                                              "2tx"))
                                                           #(ribcage
                                                             (lambda-var-list
                                                               gen-var
                                                               strip
                                                               expand-lambda-case
                                                               lambda*-formals
                                                               expand-simple-lambda
                                                               lambda-formals
                                                               ellipsis?
                                                               expand-void
                                                               eval-local-transformer
                                                               expand-local-syntax
                                                               expand-body
                                                               expand-macro
                                                               expand-application
                                                               expand-expr
                                                               expand
                                                               syntax-type
                                                               parse-when-list
                                                               expand-install-global
                                                               expand-top-sequence
                                                               expand-sequence
                                                               source-wrap
                                                               wrap
                                                               bound-id-member?
                                                               distinct-bound-ids?
                                                               valid-bound-ids?
                                                               bound-id=?
                                                               free-id=?
                                                               with-transformer-environment
                                                               transformer-environment
                                                               resolve-identifier
                                                               locally-bound-identifiers
                                                               id-var-name
                                                               same-marks?
                                                               join-marks
                                                               join-wraps
                                                               smart-append
                                                               make-binding-wrap
                                                               extend-ribcage!
                                                               make-empty-ribcage
                                                               new-mark
                                                               anti-mark
                                                               the-anti-mark
                                                               top-marked?
                                                               top-wrap
                                                               empty-wrap
                                                               set-ribcage-labels!
                                                               set-ribcage-marks!
                                                               set-ribcage-symnames!
                                                               ribcage-labels
                                                               ribcage-marks
                                                               ribcage-symnames
                                                               ribcage?
                                                               make-ribcage
                                                               gen-labels
                                                               gen-label
                                                               make-rename
                                                               rename-marks
                                                               rename-new
                                                               rename-old
                                                               subst-rename?
                                                               wrap-subst
                                                               wrap-marks
                                                               make-wrap
                                                               id-sym-name&marks
                                                               id-sym-name
                                                               id?
                                                               nonsymbol-id?
                                                               global-extend
                                                               lookup
                                                               macros-only-env
                                                               extend-var-env
                                                               extend-env
                                                               null-env
                                                               binding-value
                                                               binding-type
                                                               make-binding
                                                               arg-check
                                                               source-annotation
                                                               no-source
                                                               set-syntax-object-module!
                                                               set-syntax-object-wrap!
                                                               set-syntax-object-expression!
                                                               syntax-object-module
                                                               syntax-object-wrap
                                                               syntax-object-expression
                                                               syntax-object?
                                                               make-syntax-object
                                                               build-lexical-var
                                                               build-letrec
                                                               build-named-let
                                                               build-let
                                                               build-sequence
                                                               build-data
                                                               build-primref
                                                               build-lambda-case
                                                               build-case-lambda
                                                               build-simple-lambda
                                                               build-global-definition
                                                               build-global-assignment
                                                               build-global-reference
                                                               analyze-variable
                                                               build-lexical-assignment
                                                               build-lexical-reference
                                                               build-dynlet
                                                               build-conditional
                                                               build-application
                                                               build-void
                                                               maybe-name-value!
                                                               decorate-source
                                                               get-global-definition-hook
                                                               put-global-definition-hook
                                                               gensym-hook
                                                               local-eval-hook
                                                               top-level-eval-hook
                                                               fx<
                                                               fx=
                                                               fx-
                                                               fx+
                                                               set-lambda-meta!
                                                               lambda-meta
                                                               lambda?
                                                               make-dynlet
                                                               make-letrec
                                                               make-let
                                                               make-lambda-case
                                                               make-lambda
                                                               make-sequence
                                                               make-application
                                                               make-conditional
                                                               make-toplevel-define
                                                               make-toplevel-set
                                                               make-toplevel-ref
                                                               make-module-set
                                                               make-module-ref
                                                               make-lexical-set
                                                               make-lexical-ref
                                                               make-primitive-ref
                                                               make-const
                                                               make-void)
                                                             ((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                             ("1tt"
                                                              "1ts"
                                                              "1tr"
                                                              "1tq"
                                                              "1tp"
                                                              "1to"
                                                              "1tn"
                                                              "1tm"
                                                              "1tl"
                                                              "1tk"
                                                              "1tj"
                                                              "1ti"
                                                              "1th"
                                                              "1tg"
                                                              "1tf"
                                                              "1te"
                                                              "1td"
                                                              "1tc"
                                                              "1tb"
                                                              "1ta"
                                                              "1t9"
                                                              "1t8"
                                                              "1t7"
                                                              "1t6"
                                                              "1t5"
                                                              "1t4"
                                                              "1t3"
                                                              "1t2"
                                                              "1t1"
                                                              "1t0"
                                                              "1sz"
                                                              "1sy"
                                                              "1sx"
                                                              "1sw"
                                                              "1sv"
                                                              "1su"
                                                              "1st"
                                                              "1ss"
                                                              "1sr"
                                                              "1sq"
                                                              "1sp"
                                                              "1so"
                                                              "1sn"
                                                              "1sm"
                                                              "1sl"
                                                              "1sk"
                                                              "1sj"
                                                              "1si"
                                                              "1sh"
                                                              "1sg"
                                                              "1sf"
                                                              "1se"
                                                              "1sd"
                                                              "1sc"
                                                              "1sb"
                                                              "1sa"
                                                              "1s9"
                                                              "1s8"
                                                              "1s7"
                                                              "1s6"
                                                              "1s5"
                                                              "1s4"
                                                              "1s3"
                                                              "1s2"
                                                              "1s1"
                                                              "1s0"
                                                              "1rz"
                                                              "1ry"
                                                              "1rx"
                                                              "1rw"
                                                              "1rv"
                                                              "1ru"
                                                              "1rt"
                                                              "1rs"
                                                              "1rr"
                                                              "1rq"
                                                              "1rp"
                                                              "1ro"
                                                              "1rn"
                                                              "1rm"
                                                              "1rl"
                                                              "1rk"
                                                              "1rj"
                                                              "1ri"
                                                              "1rh"
                                                              "1rg"
                                                              "1rf"
                                                              "1re"
                                                              "1rd"
                                                              "1rc"
                                                              "1rb"
                                                              "1ra"
                                                              "1r9"
                                                              "1r8"
                                                              "1r7"
                                                              "1r6"
                                                              "1r5"
                                                              "1r4"
                                                              "1r3"
                                                              "1r2"
                                                              "1r1"
                                                              "1r0"
                                                              "1qz"
                                                              "1qy"
                                                              "1qx"
                                                              "1qw"
                                                              "1qv"
                                                              "1qu"
                                                              "1qt"
                                                              "1qs"
                                                              "1qr"
                                                              "1qq"
                                                              "1qp"
                                                              "1qo"
                                                              "1qn"
                                                              "1qm"
                                                              "1ql"
                                                              "1qk"
                                                              "1qj"
                                                              "1qi"
                                                              "1qh"
                                                              "1qg"
                                                              "1qf"
                                                              "1qe"
                                                              "1qd"
                                                              "1qc"
                                                              "1qb"
                                                              "1qa"
                                                              "1q9"
                                                              "1q8"
                                                              "1q7"
                                                              "1q6"
                                                              "1q5"
                                                              "1q4"
                                                              "1q3"
                                                              "1q2"
                                                              "1q1"
                                                              "1q0"
                                                              "1pz"
                                                              "1py"))
                                                           #(ribcage
                                                             (define-structure
                                                               define-expansion-accessors
                                                               define-expansion-constructors)
                                                             ((top)
                                                              (top)
                                                              (top))
                                                             ("1og"
                                                              "1of"
                                                              "1oe")))
                                                          (hygiene guile)))
                                                     4)
                                                #t
                                                #f)
                                            'pad
                                            '#(syntax-object
                                               pad
                                               ((top)
                                                #(ribcage
                                                  #(pat exp)
                                                  #((top) (top))
                                                  #("2w6" "2w7"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(x keys clauses r mod)
                                                  #((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                  #("2w1"
                                                    "2w2"
                                                    "2w3"
                                                    "2w4"
                                                    "2w5"))
                                                #(ribcage
                                                  (gen-syntax-case
                                                    gen-clause
                                                    build-dispatch-call
                                                    convert-pattern)
                                                  ((top) (top) (top) (top))
                                                  ("2u0" "2tz" "2ty" "2tx"))
                                                #(ribcage
                                                  (lambda-var-list
                                                    gen-var
                                                    strip
                                                    expand-lambda-case
                                                    lambda*-formals
                                                    expand-simple-lambda
                                                    lambda-formals
                                                    ellipsis?
                                                    expand-void
                                                    eval-local-transformer
                                                    expand-local-syntax
                                                    expand-body
                                                    expand-macro
                                                    expand-application
                                                    expand-expr
                                                    expand
                                                    syntax-type
                                                    parse-when-list
                                                    expand-install-global
                                                    expand-top-sequence
                                                    expand-sequence
                                                    source-wrap
                                                    wrap
                                                    bound-id-member?
                                                    distinct-bound-ids?
                                                    valid-bound-ids?
                                                    bound-id=?
                                                    free-id=?
                                                    with-transformer-environment
                                                    transformer-environment
                                                    resolve-identifier
                                                    locally-bound-identifiers
                                                    id-var-name
                                                    same-marks?
                                                    join-marks
                                                    join-wraps
                                                    smart-append
                                                    make-binding-wrap
                                                    extend-ribcage!
                                                    make-empty-ribcage
                                                    new-mark
                                                    anti-mark
                                                    the-anti-mark
                                                    top-marked?
                                                    top-wrap
                                                    empty-wrap
                                                    set-ribcage-labels!
                                                    set-ribcage-marks!
                                                    set-ribcage-symnames!
                                                    ribcage-labels
                                                    ribcage-marks
                                                    ribcage-symnames
                                                    ribcage?
                                                    make-ribcage
                                                    gen-labels
                                                    gen-label
                                                    make-rename
                                                    rename-marks
                                                    rename-new
                                                    rename-old
                                                    subst-rename?
                                                    wrap-subst
                                                    wrap-marks
                                                    make-wrap
                                                    id-sym-name&marks
                                                    id-sym-name
                                                    id?
                                                    nonsymbol-id?
                                                    global-extend
                                                    lookup
                                                    macros-only-env
                                                    extend-var-env
                                                    extend-env
                                                    null-env
                                                    binding-value
                                                    binding-type
                                                    make-binding
                                                    arg-check
                                                    source-annotation
                                                    no-source
                                                    set-syntax-object-module!
                                                    set-syntax-object-wrap!
                                                    set-syntax-object-expression!
                                                    syntax-object-module
                                                    syntax-object-wrap
                                                    syntax-object-expression
                                                    syntax-object?
                                                    make-syntax-object
                                                    build-lexical-var
                                                    build-letrec
                                                    build-named-let
                                                    build-let
                                                    build-sequence
                                                    build-data
                                                    build-primref
                                                    build-lambda-case
                                                    build-case-lambda
                                                    build-simple-lambda
                                                    build-global-definition
                                                    build-global-assignment
                                                    build-global-reference
                                                    analyze-variable
                                                    build-lexical-assignment
                                                    build-lexical-reference
                                                    build-dynlet
                                                    build-conditional
                                                    build-application
                                                    build-void
                                                    maybe-name-value!
                                                    decorate-source
                                                    get-global-definition-hook
                                                    put-global-definition-hook
                                                    gensym-hook
                                                    local-eval-hook
                                                    top-level-eval-hook
                                                    fx<
                                                    fx=
                                                    fx-
                                                    fx+
                                                    set-lambda-meta!
                                                    lambda-meta
                                                    lambda?
                                                    make-dynlet
                                                    make-letrec
                                                    make-let
                                                    make-lambda-case
                                                    make-lambda
                                                    make-sequence
                                                    make-application
                                                    make-conditional
                                                    make-toplevel-define
                                                    make-toplevel-set
                                                    make-toplevel-ref
                                                    make-module-set
                                                    make-module-ref
                                                    make-lexical-set
                                                    make-lexical-ref
                                                    make-primitive-ref
                                                    make-const
                                                    make-void)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("1tt"
                                                   "1ts"
                                                   "1tr"
                                                   "1tq"
                                                   "1tp"
                                                   "1to"
                                                   "1tn"
                                                   "1tm"
                                                   "1tl"
                                                   "1tk"
                                                   "1tj"
                                                   "1ti"
                                                   "1th"
                                                   "1tg"
                                                   "1tf"
                                                   "1te"
                                                   "1td"
                                                   "1tc"
                                                   "1tb"
                                                   "1ta"
                                                   "1t9"
                                                   "1t8"
                                                   "1t7"
                                                   "1t6"
                                                   "1t5"
                                                   "1t4"
                                                   "1t3"
                                                   "1t2"
                                                   "1t1"
                                                   "1t0"
                                                   "1sz"
                                                   "1sy"
                                                   "1sx"
                                                   "1sw"
                                                   "1sv"
                                                   "1su"
                                                   "1st"
                                                   "1ss"
                                                   "1sr"
                                                   "1sq"
                                                   "1sp"
                                                   "1so"
                                                   "1sn"
                                                   "1sm"
                                                   "1sl"
                                                   "1sk"
                                                   "1sj"
                                                   "1si"
                                                   "1sh"
                                                   "1sg"
                                                   "1sf"
                                                   "1se"
                                                   "1sd"
                                                   "1sc"
                                                   "1sb"
                                                   "1sa"
                                                   "1s9"
                                                   "1s8"
                                                   "1s7"
                                                   "1s6"
                                                   "1s5"
                                                   "1s4"
                                                   "1s3"
                                                   "1s2"
                                                   "1s1"
                                                   "1s0"
                                                   "1rz"
                                                   "1ry"
                                                   "1rx"
                                                   "1rw"
                                                   "1rv"
                                                   "1ru"
                                                   "1rt"
                                                   "1rs"
                                                   "1rr"
                                                   "1rq"
                                                   "1rp"
                                                   "1ro"
                                                   "1rn"
                                                   "1rm"
                                                   "1rl"
                                                   "1rk"
                                                   "1rj"
                                                   "1ri"
                                                   "1rh"
                                                   "1rg"
                                                   "1rf"
                                                   "1re"
                                                   "1rd"
                                                   "1rc"
                                                   "1rb"
                                                   "1ra"
                                                   "1r9"
                                                   "1r8"
                                                   "1r7"
                                                   "1r6"
                                                   "1r5"
                                                   "1r4"
                                                   "1r3"
                                                   "1r2"
                                                   "1r1"
                                                   "1r0"
                                                   "1qz"
                                                   "1qy"
                                                   "1qx"
                                                   "1qw"
                                                   "1qv"
                                                   "1qu"
                                                   "1qt"
                                                   "1qs"
                                                   "1qr"
                                                   "1qq"
                                                   "1qp"
                                                   "1qo"
                                                   "1qn"
                                                   "1qm"
                                                   "1ql"
                                                   "1qk"
                                                   "1qj"
                                                   "1qi"
                                                   "1qh"
                                                   "1qg"
                                                   "1qf"
                                                   "1qe"
                                                   "1qd"
                                                   "1qc"
                                                   "1qb"
                                                   "1qa"
                                                   "1q9"
                                                   "1q8"
                                                   "1q7"
                                                   "1q6"
                                                   "1q5"
                                                   "1q4"
                                                   "1q3"
                                                   "1q2"
                                                   "1q1"
                                                   "1q0"
                                                   "1pz"
                                                   "1py"))
                                                #(ribcage
                                                  (define-structure
                                                    define-expansion-accessors
                                                    define-expansion-constructors)
                                                  ((top) (top) (top))
                                                  ("1og" "1of" "1oe")))
                                               (hygiene guile)))
                                          (if (if (= (vector-length
                                                       '#(syntax-object
                                                          _
                                                          ((top)
                                                           #(ribcage
                                                             #(pat exp)
                                                             #((top) (top))
                                                             #("2w6" "2w7"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x
                                                               keys
                                                               clauses
                                                               r
                                                               mod)
                                                             #((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                             #("2w1"
                                                               "2w2"
                                                               "2w3"
                                                               "2w4"
                                                               "2w5"))
                                                           #(ribcage
                                                             (gen-syntax-case
                                                               gen-clause
                                                               build-dispatch-call
                                                               convert-pattern)
                                                             ((top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                             ("2u0"
                                                              "2tz"
                                                              "2ty"
                                                              "2tx"))
                                                           #(ribcage
                                                             (lambda-var-list
                                                               gen-var
                                                               strip
                                                               expand-lambda-case
                                                               lambda*-formals
                                                               expand-simple-lambda
                                                               lambda-formals
                                                               ellipsis?
                                                               expand-void
                                                               eval-local-transformer
                                                               expand-local-syntax
                                                               expand-body
                                                               expand-macro
                                                               expand-application
                                                               expand-expr
                                                               expand
                                                               syntax-type
                                                               parse-when-list
                                                               expand-install-global
                                                               expand-top-sequence
                                                               expand-sequence
                                                               source-wrap
                                                               wrap
                                                               bound-id-member?
                                                               distinct-bound-ids?
                                                               valid-bound-ids?
                                                               bound-id=?
                                                               free-id=?
                                                               with-transformer-environment
                                                               transformer-environment
                                                               resolve-identifier
                                                               locally-bound-identifiers
                                                               id-var-name
                                                               same-marks?
                                                               join-marks
                                                               join-wraps
                                                               smart-append
                                                               make-binding-wrap
                                                               extend-ribcage!
                                                               make-empty-ribcage
                                                               new-mark
                                                               anti-mark
                                                               the-anti-mark
                                                               top-marked?
                                                               top-wrap
                                                               empty-wrap
                                                               set-ribcage-labels!
                                                               set-ribcage-marks!
                                                               set-ribcage-symnames!
                                                               ribcage-labels
                                                               ribcage-marks
                                                               ribcage-symnames
                                                               ribcage?
                                                               make-ribcage
                                                               gen-labels
                                                               gen-label
                                                               make-rename
                                                               rename-marks
                                                               rename-new
                                                               rename-old
                                                               subst-rename?
                                                               wrap-subst
                                                               wrap-marks
                                                               make-wrap
                                                               id-sym-name&marks
                                                               id-sym-name
                                                               id?
                                                               nonsymbol-id?
                                                               global-extend
                                                               lookup
                                                               macros-only-env
                                                               extend-var-env
                                                               extend-env
                                                               null-env
                                                               binding-value
                                                               binding-type
                                                               make-binding
                                                               arg-check
                                                               source-annotation
                                                               no-source
                                                               set-syntax-object-module!
                                                               set-syntax-object-wrap!
                                                               set-syntax-object-expression!
                                                               syntax-object-module
                                                               syntax-object-wrap
                                                               syntax-object-expression
                                                               syntax-object?
                                                               make-syntax-object
                                                               build-lexical-var
                                                               build-letrec
                                                               build-named-let
                                                               build-let
                                                               build-sequence
                                                               build-data
                                                               build-primref
                                                               build-lambda-case
                                                               build-case-lambda
                                                               build-simple-lambda
                                                               build-global-definition
                                                               build-global-assignment
                                                               build-global-reference
                                                               analyze-variable
                                                               build-lexical-assignment
                                                               build-lexical-reference
                                                               build-dynlet
                                                               build-conditional
                                                               build-application
                                                               build-void
                                                               maybe-name-value!
                                                               decorate-source
                                                               get-global-definition-hook
                                                               put-global-definition-hook
                                                               gensym-hook
                                                               local-eval-hook
                                                               top-level-eval-hook
                                                               fx<
                                                               fx=
                                                               fx-
                                                               fx+
                                                               set-lambda-meta!
                                                               lambda-meta
                                                               lambda?
                                                               make-dynlet
                                                               make-letrec
                                                               make-let
                                                               make-lambda-case
                                                               make-lambda
                                                               make-sequence
                                                               make-application
                                                               make-conditional
                                                               make-toplevel-define
                                                               make-toplevel-set
                                                               make-toplevel-ref
                                                               make-module-set
                                                               make-module-ref
                                                               make-lexical-set
                                                               make-lexical-ref
                                                               make-primitive-ref
                                                               make-const
                                                               make-void)
                                                             ((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                             ("1tt"
                                                              "1ts"
                                                              "1tr"
                                                              "1tq"
                                                              "1tp"
                                                              "1to"
                                                              "1tn"
                                                              "1tm"
                                                              "1tl"
                                                              "1tk"
                                                              "1tj"
                                                              "1ti"
                                                              "1th"
                                                              "1tg"
                                                              "1tf"
                                                              "1te"
                                                              "1td"
                                                              "1tc"
                                                              "1tb"
                                                              "1ta"
                                                              "1t9"
                                                              "1t8"
                                                              "1t7"
                                                              "1t6"
                                                              "1t5"
                                                              "1t4"
                                                              "1t3"
                                                              "1t2"
                                                              "1t1"
                                                              "1t0"
                                                              "1sz"
                                                              "1sy"
                                                              "1sx"
                                                              "1sw"
                                                              "1sv"
                                                              "1su"
                                                              "1st"
                                                              "1ss"
                                                              "1sr"
                                                              "1sq"
                                                              "1sp"
                                                              "1so"
                                                              "1sn"
                                                              "1sm"
                                                              "1sl"
                                                              "1sk"
                                                              "1sj"
                                                              "1si"
                                                              "1sh"
                                                              "1sg"
                                                              "1sf"
                                                              "1se"
                                                              "1sd"
                                                              "1sc"
                                                              "1sb"
                                                              "1sa"
                                                              "1s9"
                                                              "1s8"
                                                              "1s7"
                                                              "1s6"
                                                              "1s5"
                                                              "1s4"
                                                              "1s3"
                                                              "1s2"
                                                              "1s1"
                                                              "1s0"
                                                              "1rz"
                                                              "1ry"
                                                              "1rx"
                                                              "1rw"
                                                              "1rv"
                                                              "1ru"
                                                              "1rt"
                                                              "1rs"
                                                              "1rr"
                                                              "1rq"
                                                              "1rp"
                                                              "1ro"
                                                              "1rn"
                                                              "1rm"
                                                              "1rl"
                                                              "1rk"
                                                              "1rj"
                                                              "1ri"
                                                              "1rh"
                                                              "1rg"
                                                              "1rf"
                                                              "1re"
                                                              "1rd"
                                                              "1rc"
                                                              "1rb"
                                                              "1ra"
                                                              "1r9"
                                                              "1r8"
                                                              "1r7"
                                                              "1r6"
                                                              "1r5"
                                                              "1r4"
                                                              "1r3"
                                                              "1r2"
                                                              "1r1"
                                                              "1r0"
                                                              "1qz"
                                                              "1qy"
                                                              "1qx"
                                                              "1qw"
                                                              "1qv"
                                                              "1qu"
                                                              "1qt"
                                                              "1qs"
                                                              "1qr"
                                                              "1qq"
                                                              "1qp"
                                                              "1qo"
                                                              "1qn"
                                                              "1qm"
                                                              "1ql"
                                                              "1qk"
                                                              "1qj"
                                                              "1qi"
                                                              "1qh"
                                                              "1qg"
                                                              "1qf"
                                                              "1qe"
                                                              "1qd"
                                                              "1qc"
                                                              "1qb"
                                                              "1qa"
                                                              "1q9"
                                                              "1q8"
                                                              "1q7"
                                                              "1q6"
                                                              "1q5"
                                                              "1q4"
                                                              "1q3"
                                                              "1q2"
                                                              "1q1"
                                                              "1q0"
                                                              "1pz"
                                                              "1py"))
                                                           #(ribcage
                                                             (define-structure
                                                               define-expansion-accessors
                                                               define-expansion-constructors)
                                                             ((top)
                                                              (top)
                                                              (top))
                                                             ("1og"
                                                              "1of"
                                                              "1oe")))
                                                          (hygiene guile)))
                                                     4)
                                                #t
                                                #f)
                                            '_
                                            '#(syntax-object
                                               _
                                               ((top)
                                                #(ribcage
                                                  #(pat exp)
                                                  #((top) (top))
                                                  #("2w6" "2w7"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(x keys clauses r mod)
                                                  #((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                  #("2w1"
                                                    "2w2"
                                                    "2w3"
                                                    "2w4"
                                                    "2w5"))
                                                #(ribcage
                                                  (gen-syntax-case
                                                    gen-clause
                                                    build-dispatch-call
                                                    convert-pattern)
                                                  ((top) (top) (top) (top))
                                                  ("2u0" "2tz" "2ty" "2tx"))
                                                #(ribcage
                                                  (lambda-var-list
                                                    gen-var
                                                    strip
                                                    expand-lambda-case
                                                    lambda*-formals
                                                    expand-simple-lambda
                                                    lambda-formals
                                                    ellipsis?
                                                    expand-void
                                                    eval-local-transformer
                                                    expand-local-syntax
                                                    expand-body
                                                    expand-macro
                                                    expand-application
                                                    expand-expr
                                                    expand
                                                    syntax-type
                                                    parse-when-list
                                                    expand-install-global
                                                    expand-top-sequence
                                                    expand-sequence
                                                    source-wrap
                                                    wrap
                                                    bound-id-member?
                                                    distinct-bound-ids?
                                                    valid-bound-ids?
                                                    bound-id=?
                                                    free-id=?
                                                    with-transformer-environment
                                                    transformer-environment
                                                    resolve-identifier
                                                    locally-bound-identifiers
                                                    id-var-name
                                                    same-marks?
                                                    join-marks
                                                    join-wraps
                                                    smart-append
                                                    make-binding-wrap
                                                    extend-ribcage!
                                                    make-empty-ribcage
                                                    new-mark
                                                    anti-mark
                                                    the-anti-mark
                                                    top-marked?
                                                    top-wrap
                                                    empty-wrap
                                                    set-ribcage-labels!
                                                    set-ribcage-marks!
                                                    set-ribcage-symnames!
                                                    ribcage-labels
                                                    ribcage-marks
                                                    ribcage-symnames
                                                    ribcage?
                                                    make-ribcage
                                                    gen-labels
                                                    gen-label
                                                    make-rename
                                                    rename-marks
                                                    rename-new
                                                    rename-old
                                                    subst-rename?
                                                    wrap-subst
                                                    wrap-marks
                                                    make-wrap
                                                    id-sym-name&marks
                                                    id-sym-name
                                                    id?
                                                    nonsymbol-id?
                                                    global-extend
                                                    lookup
                                                    macros-only-env
                                                    extend-var-env
                                                    extend-env
                                                    null-env
                                                    binding-value
                                                    binding-type
                                                    make-binding
                                                    arg-check
                                                    source-annotation
                                                    no-source
                                                    set-syntax-object-module!
                                                    set-syntax-object-wrap!
                                                    set-syntax-object-expression!
                                                    syntax-object-module
                                                    syntax-object-wrap
                                                    syntax-object-expression
                                                    syntax-object?
                                                    make-syntax-object
                                                    build-lexical-var
                                                    build-letrec
                                                    build-named-let
                                                    build-let
                                                    build-sequence
                                                    build-data
                                                    build-primref
                                                    build-lambda-case
                                                    build-case-lambda
                                                    build-simple-lambda
                                                    build-global-definition
                                                    build-global-assignment
                                                    build-global-reference
                                                    analyze-variable
                                                    build-lexical-assignment
                                                    build-lexical-reference
                                                    build-dynlet
                                                    build-conditional
                                                    build-application
                                                    build-void
                                                    maybe-name-value!
                                                    decorate-source
                                                    get-global-definition-hook
                                                    put-global-definition-hook
                                                    gensym-hook
                                                    local-eval-hook
                                                    top-level-eval-hook
                                                    fx<
                                                    fx=
                                                    fx-
                                                    fx+
                                                    set-lambda-meta!
                                                    lambda-meta
                                                    lambda?
                                                    make-dynlet
                                                    make-letrec
                                                    make-let
                                                    make-lambda-case
                                                    make-lambda
                                                    make-sequence
                                                    make-application
                                                    make-conditional
                                                    make-toplevel-define
                                                    make-toplevel-set
                                                    make-toplevel-ref
                                                    make-module-set
                                                    make-module-ref
                                                    make-lexical-set
                                                    make-lexical-ref
                                                    make-primitive-ref
                                                    make-const
                                                    make-void)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("1tt"
                                                   "1ts"
                                                   "1tr"
                                                   "1tq"
                                                   "1tp"
                                                   "1to"
                                                   "1tn"
                                                   "1tm"
                                                   "1tl"
                                                   "1tk"
                                                   "1tj"
                                                   "1ti"
                                                   "1th"
                                                   "1tg"
                                                   "1tf"
                                                   "1te"
                                                   "1td"
                                                   "1tc"
                                                   "1tb"
                                                   "1ta"
                                                   "1t9"
                                                   "1t8"
                                                   "1t7"
                                                   "1t6"
                                                   "1t5"
                                                   "1t4"
                                                   "1t3"
                                                   "1t2"
                                                   "1t1"
                                                   "1t0"
                                                   "1sz"
                                                   "1sy"
                                                   "1sx"
                                                   "1sw"
                                                   "1sv"
                                                   "1su"
                                                   "1st"
                                                   "1ss"
                                                   "1sr"
                                                   "1sq"
                                                   "1sp"
                                                   "1so"
                                                   "1sn"
                                                   "1sm"
                                                   "1sl"
                                                   "1sk"
                                                   "1sj"
                                                   "1si"
                                                   "1sh"
                                                   "1sg"
                                                   "1sf"
                                                   "1se"
                                                   "1sd"
                                                   "1sc"
                                                   "1sb"
                                                   "1sa"
                                                   "1s9"
                                                   "1s8"
                                                   "1s7"
                                                   "1s6"
                                                   "1s5"
                                                   "1s4"
                                                   "1s3"
                                                   "1s2"
                                                   "1s1"
                                                   "1s0"
                                                   "1rz"
                                                   "1ry"
                                                   "1rx"
                                                   "1rw"
                                                   "1rv"
                                                   "1ru"
                                                   "1rt"
                                                   "1rs"
                                                   "1rr"
                                                   "1rq"
                                                   "1rp"
                                                   "1ro"
                                                   "1rn"
                                                   "1rm"
                                                   "1rl"
                                                   "1rk"
                                                   "1rj"
                                                   "1ri"
                                                   "1rh"
                                                   "1rg"
                                                   "1rf"
                                                   "1re"
                                                   "1rd"
                                                   "1rc"
                                                   "1rb"
                                                   "1ra"
                                                   "1r9"
                                                   "1r8"
                                                   "1r7"
                                                   "1r6"
                                                   "1r5"
                                                   "1r4"
                                                   "1r3"
                                                   "1r2"
                                                   "1r1"
                                                   "1r0"
                                                   "1qz"
                                                   "1qy"
                                                   "1qx"
                                                   "1qw"
                                                   "1qv"
                                                   "1qu"
                                                   "1qt"
                                                   "1qs"
                                                   "1qr"
                                                   "1qq"
                                                   "1qp"
                                                   "1qo"
                                                   "1qn"
                                                   "1qm"
                                                   "1ql"
                                                   "1qk"
                                                   "1qj"
                                                   "1qi"
                                                   "1qh"
                                                   "1qg"
                                                   "1qf"
                                                   "1qe"
                                                   "1qd"
                                                   "1qc"
                                                   "1qb"
                                                   "1qa"
                                                   "1q9"
                                                   "1q8"
                                                   "1q7"
                                                   "1q6"
                                                   "1q5"
                                                   "1q4"
                                                   "1q3"
                                                   "1q2"
                                                   "1q1"
                                                   "1q0"
                                                   "1pz"
                                                   "1py"))
                                                #(ribcage
                                                  (define-structure
                                                    define-expansion-accessors
                                                    define-expansion-constructors)
                                                  ((top) (top) (top))
                                                  ("1og" "1of" "1oe")))
                                               (hygiene guile))))
                                   (eq? (#{id-var-name _85hotwsCta0JfYIjI4J36}#
                                          '#(syntax-object
                                             pad
                                             ((top)
                                              #(ribcage
                                                #(pat exp)
                                                #((top) (top))
                                                #("2w6" "2w7"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(x keys clauses r mod)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("2w1"
                                                  "2w2"
                                                  "2w3"
                                                  "2w4"
                                                  "2w5"))
                                              #(ribcage
                                                (gen-syntax-case
                                                  gen-clause
                                                  build-dispatch-call
                                                  convert-pattern)
                                                ((top) (top) (top) (top))
                                                ("2u0" "2tz" "2ty" "2tx"))
                                              #(ribcage
                                                (lambda-var-list
                                                  gen-var
                                                  strip
                                                  expand-lambda-case
                                                  lambda*-formals
                                                  expand-simple-lambda
                                                  lambda-formals
                                                  ellipsis?
                                                  expand-void
                                                  eval-local-transformer
                                                  expand-local-syntax
                                                  expand-body
                                                  expand-macro
                                                  expand-application
                                                  expand-expr
                                                  expand
                                                  syntax-type
                                                  parse-when-list
                                                  expand-install-global
                                                  expand-top-sequence
                                                  expand-sequence
                                                  source-wrap
                                                  wrap
                                                  bound-id-member?
                                                  distinct-bound-ids?
                                                  valid-bound-ids?
                                                  bound-id=?
                                                  free-id=?
                                                  with-transformer-environment
                                                  transformer-environment
                                                  resolve-identifier
                                                  locally-bound-identifiers
                                                  id-var-name
                                                  same-marks?
                                                  join-marks
                                                  join-wraps
                                                  smart-append
                                                  make-binding-wrap
                                                  extend-ribcage!
                                                  make-empty-ribcage
                                                  new-mark
                                                  anti-mark
                                                  the-anti-mark
                                                  top-marked?
                                                  top-wrap
                                                  empty-wrap
                                                  set-ribcage-labels!
                                                  set-ribcage-marks!
                                                  set-ribcage-symnames!
                                                  ribcage-labels
                                                  ribcage-marks
                                                  ribcage-symnames
                                                  ribcage?
                                                  make-ribcage
                                                  gen-labels
                                                  gen-label
                                                  make-rename
                                                  rename-marks
                                                  rename-new
                                                  rename-old
                                                  subst-rename?
                                                  wrap-subst
                                                  wrap-marks
                                                  make-wrap
                                                  id-sym-name&marks
                                                  id-sym-name
                                                  id?
                                                  nonsymbol-id?
                                                  global-extend
                                                  lookup
                                                  macros-only-env
                                                  extend-var-env
                                                  extend-env
                                                  null-env
                                                  binding-value
                                                  binding-type
                                                  make-binding
                                                  arg-check
                                                  source-annotation
                                                  no-source
                                                  set-syntax-object-module!
                                                  set-syntax-object-wrap!
                                                  set-syntax-object-expression!
                                                  syntax-object-module
                                                  syntax-object-wrap
                                                  syntax-object-expression
                                                  syntax-object?
                                                  make-syntax-object
                                                  build-lexical-var
                                                  build-letrec
                                                  build-named-let
                                                  build-let
                                                  build-sequence
                                                  build-data
                                                  build-primref
                                                  build-lambda-case
                                                  build-case-lambda
                                                  build-simple-lambda
                                                  build-global-definition
                                                  build-global-assignment
                                                  build-global-reference
                                                  analyze-variable
                                                  build-lexical-assignment
                                                  build-lexical-reference
                                                  build-dynlet
                                                  build-conditional
                                                  build-application
                                                  build-void
                                                  maybe-name-value!
                                                  decorate-source
                                                  get-global-definition-hook
                                                  put-global-definition-hook
                                                  gensym-hook
                                                  local-eval-hook
                                                  top-level-eval-hook
                                                  fx<
                                                  fx=
                                                  fx-
                                                  fx+
                                                  set-lambda-meta!
                                                  lambda-meta
                                                  lambda?
                                                  make-dynlet
                                                  make-letrec
                                                  make-let
                                                  make-lambda-case
                                                  make-lambda
                                                  make-sequence
                                                  make-application
                                                  make-conditional
                                                  make-toplevel-define
                                                  make-toplevel-set
                                                  make-toplevel-ref
                                                  make-module-set
                                                  make-module-ref
                                                  make-lexical-set
                                                  make-lexical-ref
                                                  make-primitive-ref
                                                  make-const
                                                  make-void)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("1tt"
                                                 "1ts"
                                                 "1tr"
                                                 "1tq"
                                                 "1tp"
                                                 "1to"
                                                 "1tn"
                                                 "1tm"
                                                 "1tl"
                                                 "1tk"
                                                 "1tj"
                                                 "1ti"
                                                 "1th"
                                                 "1tg"
                                                 "1tf"
                                                 "1te"
                                                 "1td"
                                                 "1tc"
                                                 "1tb"
                                                 "1ta"
                                                 "1t9"
                                                 "1t8"
                                                 "1t7"
                                                 "1t6"
                                                 "1t5"
                                                 "1t4"
                                                 "1t3"
                                                 "1t2"
                                                 "1t1"
                                                 "1t0"
                                                 "1sz"
                                                 "1sy"
                                                 "1sx"
                                                 "1sw"
                                                 "1sv"
                                                 "1su"
                                                 "1st"
                                                 "1ss"
                                                 "1sr"
                                                 "1sq"
                                                 "1sp"
                                                 "1so"
                                                 "1sn"
                                                 "1sm"
                                                 "1sl"
                                                 "1sk"
                                                 "1sj"
                                                 "1si"
                                                 "1sh"
                                                 "1sg"
                                                 "1sf"
                                                 "1se"
                                                 "1sd"
                                                 "1sc"
                                                 "1sb"
                                                 "1sa"
                                                 "1s9"
                                                 "1s8"
                                                 "1s7"
                                                 "1s6"
                                                 "1s5"
                                                 "1s4"
                                                 "1s3"
                                                 "1s2"
                                                 "1s1"
                                                 "1s0"
                                                 "1rz"
                                                 "1ry"
                                                 "1rx"
                                                 "1rw"
                                                 "1rv"
                                                 "1ru"
                                                 "1rt"
                                                 "1rs"
                                                 "1rr"
                                                 "1rq"
                                                 "1rp"
                                                 "1ro"
                                                 "1rn"
                                                 "1rm"
                                                 "1rl"
                                                 "1rk"
                                                 "1rj"
                                                 "1ri"
                                                 "1rh"
                                                 "1rg"
                                                 "1rf"
                                                 "1re"
                                                 "1rd"
                                                 "1rc"
                                                 "1rb"
                                                 "1ra"
                                                 "1r9"
                                                 "1r8"
                                                 "1r7"
                                                 "1r6"
                                                 "1r5"
                                                 "1r4"
                                                 "1r3"
                                                 "1r2"
                                                 "1r1"
                                                 "1r0"
                                                 "1qz"
                                                 "1qy"
                                                 "1qx"
                                                 "1qw"
                                                 "1qv"
                                                 "1qu"
                                                 "1qt"
                                                 "1qs"
                                                 "1qr"
                                                 "1qq"
                                                 "1qp"
                                                 "1qo"
                                                 "1qn"
                                                 "1qm"
                                                 "1ql"
                                                 "1qk"
                                                 "1qj"
                                                 "1qi"
                                                 "1qh"
                                                 "1qg"
                                                 "1qf"
                                                 "1qe"
                                                 "1qd"
                                                 "1qc"
                                                 "1qb"
                                                 "1qa"
                                                 "1q9"
                                                 "1q8"
                                                 "1q7"
                                                 "1q6"
                                                 "1q5"
                                                 "1q4"
                                                 "1q3"
                                                 "1q2"
                                                 "1q1"
                                                 "1q0"
                                                 "1pz"
                                                 "1py"))
                                              #(ribcage
                                                (define-structure
                                                  define-expansion-accessors
                                                  define-expansion-constructors)
                                                ((top) (top) (top))
                                                ("1og" "1of" "1oe")))
                                             (hygiene guile))
                                          '(()))
                                        (#{id-var-name _85hotwsCta0JfYIjI4J36}#
                                          '#(syntax-object
                                             _
                                             ((top)
                                              #(ribcage
                                                #(pat exp)
                                                #((top) (top))
                                                #("2w6" "2w7"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(x keys clauses r mod)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("2w1"
                                                  "2w2"
                                                  "2w3"
                                                  "2w4"
                                                  "2w5"))
                                              #(ribcage
                                                (gen-syntax-case
                                                  gen-clause
                                                  build-dispatch-call
                                                  convert-pattern)
                                                ((top) (top) (top) (top))
                                                ("2u0" "2tz" "2ty" "2tx"))
                                              #(ribcage
                                                (lambda-var-list
                                                  gen-var
                                                  strip
                                                  expand-lambda-case
                                                  lambda*-formals
                                                  expand-simple-lambda
                                                  lambda-formals
                                                  ellipsis?
                                                  expand-void
                                                  eval-local-transformer
                                                  expand-local-syntax
                                                  expand-body
                                                  expand-macro
                                                  expand-application
                                                  expand-expr
                                                  expand
                                                  syntax-type
                                                  parse-when-list
                                                  expand-install-global
                                                  expand-top-sequence
                                                  expand-sequence
                                                  source-wrap
                                                  wrap
                                                  bound-id-member?
                                                  distinct-bound-ids?
                                                  valid-bound-ids?
                                                  bound-id=?
                                                  free-id=?
                                                  with-transformer-environment
                                                  transformer-environment
                                                  resolve-identifier
                                                  locally-bound-identifiers
                                                  id-var-name
                                                  same-marks?
                                                  join-marks
                                                  join-wraps
                                                  smart-append
                                                  make-binding-wrap
                                                  extend-ribcage!
                                                  make-empty-ribcage
                                                  new-mark
                                                  anti-mark
                                                  the-anti-mark
                                                  top-marked?
                                                  top-wrap
                                                  empty-wrap
                                                  set-ribcage-labels!
                                                  set-ribcage-marks!
                                                  set-ribcage-symnames!
                                                  ribcage-labels
                                                  ribcage-marks
                                                  ribcage-symnames
                                                  ribcage?
                                                  make-ribcage
                                                  gen-labels
                                                  gen-label
                                                  make-rename
                                                  rename-marks
                                                  rename-new
                                                  rename-old
                                                  subst-rename?
                                                  wrap-subst
                                                  wrap-marks
                                                  make-wrap
                                                  id-sym-name&marks
                                                  id-sym-name
                                                  id?
                                                  nonsymbol-id?
                                                  global-extend
                                                  lookup
                                                  macros-only-env
                                                  extend-var-env
                                                  extend-env
                                                  null-env
                                                  binding-value
                                                  binding-type
                                                  make-binding
                                                  arg-check
                                                  source-annotation
                                                  no-source
                                                  set-syntax-object-module!
                                                  set-syntax-object-wrap!
                                                  set-syntax-object-expression!
                                                  syntax-object-module
                                                  syntax-object-wrap
                                                  syntax-object-expression
                                                  syntax-object?
                                                  make-syntax-object
                                                  build-lexical-var
                                                  build-letrec
                                                  build-named-let
                                                  build-let
                                                  build-sequence
                                                  build-data
                                                  build-primref
                                                  build-lambda-case
                                                  build-case-lambda
                                                  build-simple-lambda
                                                  build-global-definition
                                                  build-global-assignment
                                                  build-global-reference
                                                  analyze-variable
                                                  build-lexical-assignment
                                                  build-lexical-reference
                                                  build-dynlet
                                                  build-conditional
                                                  build-application
                                                  build-void
                                                  maybe-name-value!
                                                  decorate-source
                                                  get-global-definition-hook
                                                  put-global-definition-hook
                                                  gensym-hook
                                                  local-eval-hook
                                                  top-level-eval-hook
                                                  fx<
                                                  fx=
                                                  fx-
                                                  fx+
                                                  set-lambda-meta!
                                                  lambda-meta
                                                  lambda?
                                                  make-dynlet
                                                  make-letrec
                                                  make-let
                                                  make-lambda-case
                                                  make-lambda
                                                  make-sequence
                                                  make-application
                                                  make-conditional
                                                  make-toplevel-define
                                                  make-toplevel-set
                                                  make-toplevel-ref
                                                  make-module-set
                                                  make-module-ref
                                                  make-lexical-set
                                                  make-lexical-ref
                                                  make-primitive-ref
                                                  make-const
                                                  make-void)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("1tt"
                                                 "1ts"
                                                 "1tr"
                                                 "1tq"
                                                 "1tp"
                                                 "1to"
                                                 "1tn"
                                                 "1tm"
                                                 "1tl"
                                                 "1tk"
                                                 "1tj"
                                                 "1ti"
                                                 "1th"
                                                 "1tg"
                                                 "1tf"
                                                 "1te"
                                                 "1td"
                                                 "1tc"
                                                 "1tb"
                                                 "1ta"
                                                 "1t9"
                                                 "1t8"
                                                 "1t7"
                                                 "1t6"
                                                 "1t5"
                                                 "1t4"
                                                 "1t3"
                                                 "1t2"
                                                 "1t1"
                                                 "1t0"
                                                 "1sz"
                                                 "1sy"
                                                 "1sx"
                                                 "1sw"
                                                 "1sv"
                                                 "1su"
                                                 "1st"
                                                 "1ss"
                                                 "1sr"
                                                 "1sq"
                                                 "1sp"
                                                 "1so"
                                                 "1sn"
                                                 "1sm"
                                                 "1sl"
                                                 "1sk"
                                                 "1sj"
                                                 "1si"
                                                 "1sh"
                                                 "1sg"
                                                 "1sf"
                                                 "1se"
                                                 "1sd"
                                                 "1sc"
                                                 "1sb"
                                                 "1sa"
                                                 "1s9"
                                                 "1s8"
                                                 "1s7"
                                                 "1s6"
                                                 "1s5"
                                                 "1s4"
                                                 "1s3"
                                                 "1s2"
                                                 "1s1"
                                                 "1s0"
                                                 "1rz"
                                                 "1ry"
                                                 "1rx"
                                                 "1rw"
                                                 "1rv"
                                                 "1ru"
                                                 "1rt"
                                                 "1rs"
                                                 "1rr"
                                                 "1rq"
                                                 "1rp"
                                                 "1ro"
                                                 "1rn"
                                                 "1rm"
                                                 "1rl"
                                                 "1rk"
                                                 "1rj"
                                                 "1ri"
                                                 "1rh"
                                                 "1rg"
                                                 "1rf"
                                                 "1re"
                                                 "1rd"
                                                 "1rc"
                                                 "1rb"
                                                 "1ra"
                                                 "1r9"
                                                 "1r8"
                                                 "1r7"
                                                 "1r6"
                                                 "1r5"
                                                 "1r4"
                                                 "1r3"
                                                 "1r2"
                                                 "1r1"
                                                 "1r0"
                                                 "1qz"
                                                 "1qy"
                                                 "1qx"
                                                 "1qw"
                                                 "1qv"
                                                 "1qu"
                                                 "1qt"
                                                 "1qs"
                                                 "1qr"
                                                 "1qq"
                                                 "1qp"
                                                 "1qo"
                                                 "1qn"
                                                 "1qm"
                                                 "1ql"
                                                 "1qk"
                                                 "1qj"
                                                 "1qi"
                                                 "1qh"
                                                 "1qg"
                                                 "1qf"
                                                 "1qe"
                                                 "1qd"
                                                 "1qc"
                                                 "1qb"
                                                 "1qa"
                                                 "1q9"
                                                 "1q8"
                                                 "1q7"
                                                 "1q6"
                                                 "1q5"
                                                 "1q4"
                                                 "1q3"
                                                 "1q2"
                                                 "1q1"
                                                 "1q0"
                                                 "1pz"
                                                 "1py"))
                                              #(ribcage
                                                (define-structure
                                                  define-expansion-accessors
                                                  define-expansion-constructors)
                                                ((top) (top) (top))
                                                ("1og" "1of" "1oe")))
                                             (hygiene guile))
                                          '(())))
                                   #f)
                               (#{expand _85hotwsCta0JfYIjI4J4L}#
                                 #{exp _85hotwsCta0JfYIjI4LmR}#
                                 #{r _85hotwsCta0JfYIjI4Lll}#
                                 '(())
                                 #{mod _85hotwsCta0JfYIjI4Llm}#)
                               (let ((#{labels _85hotwsCta0JfYIjI4Lpc}#
                                       (list (#{gen-label _85hotwsCta0JfYIjI4J3p}#)))
                                     (#{var _85hotwsCta0JfYIjI4Lpd}#
                                       (let ((#{id _85hotwsCta0JfYIjI4LqD}#
                                               (if (if (vector?
                                                         #{pat _85hotwsCta0JfYIjI4LmQ}#)
                                                     (if (= (vector-length
                                                              #{pat _85hotwsCta0JfYIjI4LmQ}#)
                                                            4)
                                                       (eq? (vector-ref
                                                              #{pat _85hotwsCta0JfYIjI4LmQ}#
                                                              0)
                                                            'syntax-object)
                                                       #f)
                                                     #f)
                                                 (vector-ref
                                                   #{pat _85hotwsCta0JfYIjI4LmQ}#
                                                   1)
                                                 #{pat _85hotwsCta0JfYIjI4LmQ}#)))
                                         (gensym
                                           (string-append
                                             (symbol->string
                                               #{id _85hotwsCta0JfYIjI4LqD}#)
                                             " ")))))
                                 (#{build-application _85hotwsCta0JfYIjI4J3G}#
                                   #f
                                   (#{build-simple-lambda _85hotwsCta0JfYIjI4J3P}#
                                     #f
                                     (list (syntax->datum
                                             #{pat _85hotwsCta0JfYIjI4LmQ}#))
                                     #f
                                     (list #{var _85hotwsCta0JfYIjI4Lpd}#)
                                     '()
                                     (#{expand _85hotwsCta0JfYIjI4J4L}#
                                       #{exp _85hotwsCta0JfYIjI4LmR}#
                                       (#{extend-env _85hotwsCta0JfYIjI4J3h}#
                                         #{labels _85hotwsCta0JfYIjI4Lpc}#
                                         (list (cons 'syntax
                                                     (cons #{var _85hotwsCta0JfYIjI4Lpd}#
                                                           0)))
                                         #{r _85hotwsCta0JfYIjI4Lll}#)
                                       (#{make-binding-wrap _85hotwsCta0JfYIjI4J31}#
                                         (list #{pat _85hotwsCta0JfYIjI4LmQ}#)
                                         #{labels _85hotwsCta0JfYIjI4Lpc}#
                                         '(()))
                                       #{mod _85hotwsCta0JfYIjI4Llm}#))
                                   (list #{x _85hotwsCta0JfYIjI4Lli}#))))
                             (#{gen-clause _85hotwsCta0JfYIjI4LfS}#
                               #{x _85hotwsCta0JfYIjI4Lli}#
                               #{keys _85hotwsCta0JfYIjI4Llj}#
                               (cdr #{clauses _85hotwsCta0JfYIjI4Llk}#)
                               #{r _85hotwsCta0JfYIjI4Lll}#
                               #{pat _85hotwsCta0JfYIjI4LmQ}#
                               #t
                               #{exp _85hotwsCta0JfYIjI4LmR}#
                               #{mod _85hotwsCta0JfYIjI4Llm}#)))
                         #{tmp _85hotwsCta0JfYIjI4LmO}#)
                       (let ((#{tmp _85hotwsCta0JfYIjI4LuP}#
                               ($sc-dispatch
                                 #{tmp _85hotwsCta0JfYIjI4LmN}#
                                 '(any any any))))
                         (if #{tmp _85hotwsCta0JfYIjI4LuP}#
                           (@apply
                             (lambda (#{pat _85hotwsCta0JfYIjI4LuR}#
                                      #{fender _85hotwsCta0JfYIjI4LuS}#
                                      #{exp _85hotwsCta0JfYIjI4LuT}#)
                               (#{gen-clause _85hotwsCta0JfYIjI4LfS}#
                                 #{x _85hotwsCta0JfYIjI4Lli}#
                                 #{keys _85hotwsCta0JfYIjI4Llj}#
                                 (cdr #{clauses _85hotwsCta0JfYIjI4Llk}#)
                                 #{r _85hotwsCta0JfYIjI4Lll}#
                                 #{pat _85hotwsCta0JfYIjI4LuR}#
                                 #{fender _85hotwsCta0JfYIjI4LuS}#
                                 #{exp _85hotwsCta0JfYIjI4LuT}#
                                 #{mod _85hotwsCta0JfYIjI4Llm}#))
                             #{tmp _85hotwsCta0JfYIjI4LuP}#)
                           (syntax-violation
                             'syntax-case
                             "invalid clause"
                             (car #{clauses _85hotwsCta0JfYIjI4Llk}#)))))))))))
          (lambda (#{e _85hotwsCta0JfYIjI4LfU}#
                   #{r _85hotwsCta0JfYIjI4LfV}#
                   #{w _85hotwsCta0JfYIjI4LfW}#
                   #{s _85hotwsCta0JfYIjI4LfX}#
                   #{mod _85hotwsCta0JfYIjI4LfY}#)
            (let ((#{e _85hotwsCta0JfYIjI4LfZ}#
                    (#{wrap _85hotwsCta0JfYIjI4J4E}#
                      (begin
                        (if (if (pair? #{e _85hotwsCta0JfYIjI4LfU}#)
                              #{s _85hotwsCta0JfYIjI4LfX}#
                              #f)
                          (set-source-properties!
                            #{e _85hotwsCta0JfYIjI4LfU}#
                            #{s _85hotwsCta0JfYIjI4LfX}#))
                        #{e _85hotwsCta0JfYIjI4LfU}#)
                      #{w _85hotwsCta0JfYIjI4LfW}#
                      #{mod _85hotwsCta0JfYIjI4LfY}#)))
              (let ((#{tmp _85hotwsCta0JfYIjI4Lfb}#
                      ($sc-dispatch
                        #{e _85hotwsCta0JfYIjI4LfZ}#
                        '(_ any each-any . each-any))))
                (if #{tmp _85hotwsCta0JfYIjI4Lfb}#
                  (@apply
                    (lambda (#{val _85hotwsCta0JfYIjI4Lf0}#
                             #{key _85hotwsCta0JfYIjI4Lf1}#
                             #{m _85hotwsCta0JfYIjI4Lf2}#)
                      (if (and-map
                            (lambda (#{x _85hotwsCta0JfYIjI4Lf3}#)
                              (if (if (symbol? #{x _85hotwsCta0JfYIjI4Lf3}#)
                                    #t
                                    (if (if (vector?
                                              #{x _85hotwsCta0JfYIjI4Lf3}#)
                                          (if (= (vector-length
                                                   #{x _85hotwsCta0JfYIjI4Lf3}#)
                                                 4)
                                            (eq? (vector-ref
                                                   #{x _85hotwsCta0JfYIjI4Lf3}#
                                                   0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (symbol?
                                        (vector-ref
                                          #{x _85hotwsCta0JfYIjI4Lf3}#
                                          1))
                                      #f))
                                (not (if (if (if (vector?
                                                   #{x _85hotwsCta0JfYIjI4Lf3}#)
                                               (if (= (vector-length
                                                        #{x _85hotwsCta0JfYIjI4Lf3}#)
                                                      4)
                                                 (eq? (vector-ref
                                                        #{x _85hotwsCta0JfYIjI4Lf3}#
                                                        0)
                                                      'syntax-object)
                                                 #f)
                                               #f)
                                           (symbol?
                                             (vector-ref
                                               #{x _85hotwsCta0JfYIjI4Lf3}#
                                               1))
                                           #f)
                                       (if (eq? (if (if (vector?
                                                          #{x _85hotwsCta0JfYIjI4Lf3}#)
                                                      (if (= (vector-length
                                                               #{x _85hotwsCta0JfYIjI4Lf3}#)
                                                             4)
                                                        (eq? (vector-ref
                                                               #{x _85hotwsCta0JfYIjI4Lf3}#
                                                               0)
                                                             'syntax-object)
                                                        #f)
                                                      #f)
                                                  (vector-ref
                                                    #{x _85hotwsCta0JfYIjI4Lf3}#
                                                    1)
                                                  #{x _85hotwsCta0JfYIjI4Lf3}#)
                                                (if (if (= (vector-length
                                                             '#(syntax-object
                                                                ...
                                                                ((top)
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("2de"))
                                                                 #(ribcage
                                                                   (lambda-var-list
                                                                     gen-var
                                                                     strip
                                                                     expand-lambda-case
                                                                     lambda*-formals
                                                                     expand-simple-lambda
                                                                     lambda-formals
                                                                     ellipsis?
                                                                     expand-void
                                                                     eval-local-transformer
                                                                     expand-local-syntax
                                                                     expand-body
                                                                     expand-macro
                                                                     expand-application
                                                                     expand-expr
                                                                     expand
                                                                     syntax-type
                                                                     parse-when-list
                                                                     expand-install-global
                                                                     expand-top-sequence
                                                                     expand-sequence
                                                                     source-wrap
                                                                     wrap
                                                                     bound-id-member?
                                                                     distinct-bound-ids?
                                                                     valid-bound-ids?
                                                                     bound-id=?
                                                                     free-id=?
                                                                     with-transformer-environment
                                                                     transformer-environment
                                                                     resolve-identifier
                                                                     locally-bound-identifiers
                                                                     id-var-name
                                                                     same-marks?
                                                                     join-marks
                                                                     join-wraps
                                                                     smart-append
                                                                     make-binding-wrap
                                                                     extend-ribcage!
                                                                     make-empty-ribcage
                                                                     new-mark
                                                                     anti-mark
                                                                     the-anti-mark
                                                                     top-marked?
                                                                     top-wrap
                                                                     empty-wrap
                                                                     set-ribcage-labels!
                                                                     set-ribcage-marks!
                                                                     set-ribcage-symnames!
                                                                     ribcage-labels
                                                                     ribcage-marks
                                                                     ribcage-symnames
                                                                     ribcage?
                                                                     make-ribcage
                                                                     gen-labels
                                                                     gen-label
                                                                     make-rename
                                                                     rename-marks
                                                                     rename-new
                                                                     rename-old
                                                                     subst-rename?
                                                                     wrap-subst
                                                                     wrap-marks
                                                                     make-wrap
                                                                     id-sym-name&marks
                                                                     id-sym-name
                                                                     id?
                                                                     nonsymbol-id?
                                                                     global-extend
                                                                     lookup
                                                                     macros-only-env
                                                                     extend-var-env
                                                                     extend-env
                                                                     null-env
                                                                     binding-value
                                                                     binding-type
                                                                     make-binding
                                                                     arg-check
                                                                     source-annotation
                                                                     no-source
                                                                     set-syntax-object-module!
                                                                     set-syntax-object-wrap!
                                                                     set-syntax-object-expression!
                                                                     syntax-object-module
                                                                     syntax-object-wrap
                                                                     syntax-object-expression
                                                                     syntax-object?
                                                                     make-syntax-object
                                                                     build-lexical-var
                                                                     build-letrec
                                                                     build-named-let
                                                                     build-let
                                                                     build-sequence
                                                                     build-data
                                                                     build-primref
                                                                     build-lambda-case
                                                                     build-case-lambda
                                                                     build-simple-lambda
                                                                     build-global-definition
                                                                     build-global-assignment
                                                                     build-global-reference
                                                                     analyze-variable
                                                                     build-lexical-assignment
                                                                     build-lexical-reference
                                                                     build-dynlet
                                                                     build-conditional
                                                                     build-application
                                                                     build-void
                                                                     maybe-name-value!
                                                                     decorate-source
                                                                     get-global-definition-hook
                                                                     put-global-definition-hook
                                                                     gensym-hook
                                                                     local-eval-hook
                                                                     top-level-eval-hook
                                                                     fx<
                                                                     fx=
                                                                     fx-
                                                                     fx+
                                                                     set-lambda-meta!
                                                                     lambda-meta
                                                                     lambda?
                                                                     make-dynlet
                                                                     make-letrec
                                                                     make-let
                                                                     make-lambda-case
                                                                     make-lambda
                                                                     make-sequence
                                                                     make-application
                                                                     make-conditional
                                                                     make-toplevel-define
                                                                     make-toplevel-set
                                                                     make-toplevel-ref
                                                                     make-module-set
                                                                     make-module-ref
                                                                     make-lexical-set
                                                                     make-lexical-ref
                                                                     make-primitive-ref
                                                                     make-const
                                                                     make-void)
                                                                   ((top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top))
                                                                   ("1tt"
                                                                    "1ts"
                                                                    "1tr"
                                                                    "1tq"
                                                                    "1tp"
                                                                    "1to"
                                                                    "1tn"
                                                                    "1tm"
                                                                    "1tl"
                                                                    "1tk"
                                                                    "1tj"
                                                                    "1ti"
                                                                    "1th"
                                                                    "1tg"
                                                                    "1tf"
                                                                    "1te"
                                                                    "1td"
                                                                    "1tc"
                                                                    "1tb"
                                                                    "1ta"
                                                                    "1t9"
                                                                    "1t8"
                                                                    "1t7"
                                                                    "1t6"
                                                                    "1t5"
                                                                    "1t4"
                                                                    "1t3"
                                                                    "1t2"
                                                                    "1t1"
                                                                    "1t0"
                                                                    "1sz"
                                                                    "1sy"
                                                                    "1sx"
                                                                    "1sw"
                                                                    "1sv"
                                                                    "1su"
                                                                    "1st"
                                                                    "1ss"
                                                                    "1sr"
                                                                    "1sq"
                                                                    "1sp"
                                                                    "1so"
                                                                    "1sn"
                                                                    "1sm"
                                                                    "1sl"
                                                                    "1sk"
                                                                    "1sj"
                                                                    "1si"
                                                                    "1sh"
                                                                    "1sg"
                                                                    "1sf"
                                                                    "1se"
                                                                    "1sd"
                                                                    "1sc"
                                                                    "1sb"
                                                                    "1sa"
                                                                    "1s9"
                                                                    "1s8"
                                                                    "1s7"
                                                                    "1s6"
                                                                    "1s5"
                                                                    "1s4"
                                                                    "1s3"
                                                                    "1s2"
                                                                    "1s1"
                                                                    "1s0"
                                                                    "1rz"
                                                                    "1ry"
                                                                    "1rx"
                                                                    "1rw"
                                                                    "1rv"
                                                                    "1ru"
                                                                    "1rt"
                                                                    "1rs"
                                                                    "1rr"
                                                                    "1rq"
                                                                    "1rp"
                                                                    "1ro"
                                                                    "1rn"
                                                                    "1rm"
                                                                    "1rl"
                                                                    "1rk"
                                                                    "1rj"
                                                                    "1ri"
                                                                    "1rh"
                                                                    "1rg"
                                                                    "1rf"
                                                                    "1re"
                                                                    "1rd"
                                                                    "1rc"
                                                                    "1rb"
                                                                    "1ra"
                                                                    "1r9"
                                                                    "1r8"
                                                                    "1r7"
                                                                    "1r6"
                                                                    "1r5"
                                                                    "1r4"
                                                                    "1r3"
                                                                    "1r2"
                                                                    "1r1"
                                                                    "1r0"
                                                                    "1qz"
                                                                    "1qy"
                                                                    "1qx"
                                                                    "1qw"
                                                                    "1qv"
                                                                    "1qu"
                                                                    "1qt"
                                                                    "1qs"
                                                                    "1qr"
                                                                    "1qq"
                                                                    "1qp"
                                                                    "1qo"
                                                                    "1qn"
                                                                    "1qm"
                                                                    "1ql"
                                                                    "1qk"
                                                                    "1qj"
                                                                    "1qi"
                                                                    "1qh"
                                                                    "1qg"
                                                                    "1qf"
                                                                    "1qe"
                                                                    "1qd"
                                                                    "1qc"
                                                                    "1qb"
                                                                    "1qa"
                                                                    "1q9"
                                                                    "1q8"
                                                                    "1q7"
                                                                    "1q6"
                                                                    "1q5"
                                                                    "1q4"
                                                                    "1q3"
                                                                    "1q2"
                                                                    "1q1"
                                                                    "1q0"
                                                                    "1pz"
                                                                    "1py"))
                                                                 #(ribcage
                                                                   (define-structure
                                                                     define-expansion-accessors
                                                                     define-expansion-constructors)
                                                                   ((top)
                                                                    (top)
                                                                    (top))
                                                                   ("1og"
                                                                    "1of"
                                                                    "1oe")))
                                                                (hygiene
                                                                  guile)))
                                                           4)
                                                      #t
                                                      #f)
                                                  '...
                                                  '#(syntax-object
                                                     ...
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(x)
                                                        #((top))
                                                        #("2de"))
                                                      #(ribcage
                                                        (lambda-var-list
                                                          gen-var
                                                          strip
                                                          expand-lambda-case
                                                          lambda*-formals
                                                          expand-simple-lambda
                                                          lambda-formals
                                                          ellipsis?
                                                          expand-void
                                                          eval-local-transformer
                                                          expand-local-syntax
                                                          expand-body
                                                          expand-macro
                                                          expand-application
                                                          expand-expr
                                                          expand
                                                          syntax-type
                                                          parse-when-list
                                                          expand-install-global
                                                          expand-top-sequence
                                                          expand-sequence
                                                          source-wrap
                                                          wrap
                                                          bound-id-member?
                                                          distinct-bound-ids?
                                                          valid-bound-ids?
                                                          bound-id=?
                                                          free-id=?
                                                          with-transformer-environment
                                                          transformer-environment
                                                          resolve-identifier
                                                          locally-bound-identifiers
                                                          id-var-name
                                                          same-marks?
                                                          join-marks
                                                          join-wraps
                                                          smart-append
                                                          make-binding-wrap
                                                          extend-ribcage!
                                                          make-empty-ribcage
                                                          new-mark
                                                          anti-mark
                                                          the-anti-mark
                                                          top-marked?
                                                          top-wrap
                                                          empty-wrap
                                                          set-ribcage-labels!
                                                          set-ribcage-marks!
                                                          set-ribcage-symnames!
                                                          ribcage-labels
                                                          ribcage-marks
                                                          ribcage-symnames
                                                          ribcage?
                                                          make-ribcage
                                                          gen-labels
                                                          gen-label
                                                          make-rename
                                                          rename-marks
                                                          rename-new
                                                          rename-old
                                                          subst-rename?
                                                          wrap-subst
                                                          wrap-marks
                                                          make-wrap
                                                          id-sym-name&marks
                                                          id-sym-name
                                                          id?
                                                          nonsymbol-id?
                                                          global-extend
                                                          lookup
                                                          macros-only-env
                                                          extend-var-env
                                                          extend-env
                                                          null-env
                                                          binding-value
                                                          binding-type
                                                          make-binding
                                                          arg-check
                                                          source-annotation
                                                          no-source
                                                          set-syntax-object-module!
                                                          set-syntax-object-wrap!
                                                          set-syntax-object-expression!
                                                          syntax-object-module
                                                          syntax-object-wrap
                                                          syntax-object-expression
                                                          syntax-object?
                                                          make-syntax-object
                                                          build-lexical-var
                                                          build-letrec
                                                          build-named-let
                                                          build-let
                                                          build-sequence
                                                          build-data
                                                          build-primref
                                                          build-lambda-case
                                                          build-case-lambda
                                                          build-simple-lambda
                                                          build-global-definition
                                                          build-global-assignment
                                                          build-global-reference
                                                          analyze-variable
                                                          build-lexical-assignment
                                                          build-lexical-reference
                                                          build-dynlet
                                                          build-conditional
                                                          build-application
                                                          build-void
                                                          maybe-name-value!
                                                          decorate-source
                                                          get-global-definition-hook
                                                          put-global-definition-hook
                                                          gensym-hook
                                                          local-eval-hook
                                                          top-level-eval-hook
                                                          fx<
                                                          fx=
                                                          fx-
                                                          fx+
                                                          set-lambda-meta!
                                                          lambda-meta
                                                          lambda?
                                                          make-dynlet
                                                          make-letrec
                                                          make-let
                                                          make-lambda-case
                                                          make-lambda
                                                          make-sequence
                                                          make-application
                                                          make-conditional
                                                          make-toplevel-define
                                                          make-toplevel-set
                                                          make-toplevel-ref
                                                          make-module-set
                                                          make-module-ref
                                                          make-lexical-set
                                                          make-lexical-ref
                                                          make-primitive-ref
                                                          make-const
                                                          make-void)
                                                        ((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                        ("1tt"
                                                         "1ts"
                                                         "1tr"
                                                         "1tq"
                                                         "1tp"
                                                         "1to"
                                                         "1tn"
                                                         "1tm"
                                                         "1tl"
                                                         "1tk"
                                                         "1tj"
                                                         "1ti"
                                                         "1th"
                                                         "1tg"
                                                         "1tf"
                                                         "1te"
                                                         "1td"
                                                         "1tc"
                                                         "1tb"
                                                         "1ta"
                                                         "1t9"
                                                         "1t8"
                                                         "1t7"
                                                         "1t6"
                                                         "1t5"
                                                         "1t4"
                                                         "1t3"
                                                         "1t2"
                                                         "1t1"
                                                         "1t0"
                                                         "1sz"
                                                         "1sy"
                                                         "1sx"
                                                         "1sw"
                                                         "1sv"
                                                         "1su"
                                                         "1st"
                                                         "1ss"
                                                         "1sr"
                                                         "1sq"
                                                         "1sp"
                                                         "1so"
                                                         "1sn"
                                                         "1sm"
                                                         "1sl"
                                                         "1sk"
                                                         "1sj"
                                                         "1si"
                                                         "1sh"
                                                         "1sg"
                                                         "1sf"
                                                         "1se"
                                                         "1sd"
                                                         "1sc"
                                                         "1sb"
                                                         "1sa"
                                                         "1s9"
                                                         "1s8"
                                                         "1s7"
                                                         "1s6"
                                                         "1s5"
                                                         "1s4"
                                                         "1s3"
                                                         "1s2"
                                                         "1s1"
                                                         "1s0"
                                                         "1rz"
                                                         "1ry"
                                                         "1rx"
                                                         "1rw"
                                                         "1rv"
                                                         "1ru"
                                                         "1rt"
                                                         "1rs"
                                                         "1rr"
                                                         "1rq"
                                                         "1rp"
                                                         "1ro"
                                                         "1rn"
                                                         "1rm"
                                                         "1rl"
                                                         "1rk"
                                                         "1rj"
                                                         "1ri"
                                                         "1rh"
                                                         "1rg"
                                                         "1rf"
                                                         "1re"
                                                         "1rd"
                                                         "1rc"
                                                         "1rb"
                                                         "1ra"
                                                         "1r9"
                                                         "1r8"
                                                         "1r7"
                                                         "1r6"
                                                         "1r5"
                                                         "1r4"
                                                         "1r3"
                                                         "1r2"
                                                         "1r1"
                                                         "1r0"
                                                         "1qz"
                                                         "1qy"
                                                         "1qx"
                                                         "1qw"
                                                         "1qv"
                                                         "1qu"
                                                         "1qt"
                                                         "1qs"
                                                         "1qr"
                                                         "1qq"
                                                         "1qp"
                                                         "1qo"
                                                         "1qn"
                                                         "1qm"
                                                         "1ql"
                                                         "1qk"
                                                         "1qj"
                                                         "1qi"
                                                         "1qh"
                                                         "1qg"
                                                         "1qf"
                                                         "1qe"
                                                         "1qd"
                                                         "1qc"
                                                         "1qb"
                                                         "1qa"
                                                         "1q9"
                                                         "1q8"
                                                         "1q7"
                                                         "1q6"
                                                         "1q5"
                                                         "1q4"
                                                         "1q3"
                                                         "1q2"
                                                         "1q1"
                                                         "1q0"
                                                         "1pz"
                                                         "1py"))
                                                      #(ribcage
                                                        (define-structure
                                                          define-expansion-accessors
                                                          define-expansion-constructors)
                                                        ((top) (top) (top))
                                                        ("1og" "1of" "1oe")))
                                                     (hygiene guile))))
                                         (eq? (#{id-var-name _85hotwsCta0JfYIjI4J36}#
                                                #{x _85hotwsCta0JfYIjI4Lf3}#
                                                '(()))
                                              (#{id-var-name _85hotwsCta0JfYIjI4J36}#
                                                '#(syntax-object
                                                   ...
                                                   ((top)
                                                    #(ribcage () () ())
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("2de"))
                                                    #(ribcage
                                                      (lambda-var-list
                                                        gen-var
                                                        strip
                                                        expand-lambda-case
                                                        lambda*-formals
                                                        expand-simple-lambda
                                                        lambda-formals
                                                        ellipsis?
                                                        expand-void
                                                        eval-local-transformer
                                                        expand-local-syntax
                                                        expand-body
                                                        expand-macro
                                                        expand-application
                                                        expand-expr
                                                        expand
                                                        syntax-type
                                                        parse-when-list
                                                        expand-install-global
                                                        expand-top-sequence
                                                        expand-sequence
                                                        source-wrap
                                                        wrap
                                                        bound-id-member?
                                                        distinct-bound-ids?
                                                        valid-bound-ids?
                                                        bound-id=?
                                                        free-id=?
                                                        with-transformer-environment
                                                        transformer-environment
                                                        resolve-identifier
                                                        locally-bound-identifiers
                                                        id-var-name
                                                        same-marks?
                                                        join-marks
                                                        join-wraps
                                                        smart-append
                                                        make-binding-wrap
                                                        extend-ribcage!
                                                        make-empty-ribcage
                                                        new-mark
                                                        anti-mark
                                                        the-anti-mark
                                                        top-marked?
                                                        top-wrap
                                                        empty-wrap
                                                        set-ribcage-labels!
                                                        set-ribcage-marks!
                                                        set-ribcage-symnames!
                                                        ribcage-labels
                                                        ribcage-marks
                                                        ribcage-symnames
                                                        ribcage?
                                                        make-ribcage
                                                        gen-labels
                                                        gen-label
                                                        make-rename
                                                        rename-marks
                                                        rename-new
                                                        rename-old
                                                        subst-rename?
                                                        wrap-subst
                                                        wrap-marks
                                                        make-wrap
                                                        id-sym-name&marks
                                                        id-sym-name
                                                        id?
                                                        nonsymbol-id?
                                                        global-extend
                                                        lookup
                                                        macros-only-env
                                                        extend-var-env
                                                        extend-env
                                                        null-env
                                                        binding-value
                                                        binding-type
                                                        make-binding
                                                        arg-check
                                                        source-annotation
                                                        no-source
                                                        set-syntax-object-module!
                                                        set-syntax-object-wrap!
                                                        set-syntax-object-expression!
                                                        syntax-object-module
                                                        syntax-object-wrap
                                                        syntax-object-expression
                                                        syntax-object?
                                                        make-syntax-object
                                                        build-lexical-var
                                                        build-letrec
                                                        build-named-let
                                                        build-let
                                                        build-sequence
                                                        build-data
                                                        build-primref
                                                        build-lambda-case
                                                        build-case-lambda
                                                        build-simple-lambda
                                                        build-global-definition
                                                        build-global-assignment
                                                        build-global-reference
                                                        analyze-variable
                                                        build-lexical-assignment
                                                        build-lexical-reference
                                                        build-dynlet
                                                        build-conditional
                                                        build-application
                                                        build-void
                                                        maybe-name-value!
                                                        decorate-source
                                                        get-global-definition-hook
                                                        put-global-definition-hook
                                                        gensym-hook
                                                        local-eval-hook
                                                        top-level-eval-hook
                                                        fx<
                                                        fx=
                                                        fx-
                                                        fx+
                                                        set-lambda-meta!
                                                        lambda-meta
                                                        lambda?
                                                        make-dynlet
                                                        make-letrec
                                                        make-let
                                                        make-lambda-case
                                                        make-lambda
                                                        make-sequence
                                                        make-application
                                                        make-conditional
                                                        make-toplevel-define
                                                        make-toplevel-set
                                                        make-toplevel-ref
                                                        make-module-set
                                                        make-module-ref
                                                        make-lexical-set
                                                        make-lexical-ref
                                                        make-primitive-ref
                                                        make-const
                                                        make-void)
                                                      ((top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top))
                                                      ("1tt"
                                                       "1ts"
                                                       "1tr"
                                                       "1tq"
                                                       "1tp"
                                                       "1to"
                                                       "1tn"
                                                       "1tm"
                                                       "1tl"
                                                       "1tk"
                                                       "1tj"
                                                       "1ti"
                                                       "1th"
                                                       "1tg"
                                                       "1tf"
                                                       "1te"
                                                       "1td"
                                                       "1tc"
                                                       "1tb"
                                                       "1ta"
                                                       "1t9"
                                                       "1t8"
                                                       "1t7"
                                                       "1t6"
                                                       "1t5"
                                                       "1t4"
                                                       "1t3"
                                                       "1t2"
                                                       "1t1"
                                                       "1t0"
                                                       "1sz"
                                                       "1sy"
                                                       "1sx"
                                                       "1sw"
                                                       "1sv"
                                                       "1su"
                                                       "1st"
                                                       "1ss"
                                                       "1sr"
                                                       "1sq"
                                                       "1sp"
                                                       "1so"
                                                       "1sn"
                                                       "1sm"
                                                       "1sl"
                                                       "1sk"
                                                       "1sj"
                                                       "1si"
                                                       "1sh"
                                                       "1sg"
                                                       "1sf"
                                                       "1se"
                                                       "1sd"
                                                       "1sc"
                                                       "1sb"
                                                       "1sa"
                                                       "1s9"
                                                       "1s8"
                                                       "1s7"
                                                       "1s6"
                                                       "1s5"
                                                       "1s4"
                                                       "1s3"
                                                       "1s2"
                                                       "1s1"
                                                       "1s0"
                                                       "1rz"
                                                       "1ry"
                                                       "1rx"
                                                       "1rw"
                                                       "1rv"
                                                       "1ru"
                                                       "1rt"
                                                       "1rs"
                                                       "1rr"
                                                       "1rq"
                                                       "1rp"
                                                       "1ro"
                                                       "1rn"
                                                       "1rm"
                                                       "1rl"
                                                       "1rk"
                                                       "1rj"
                                                       "1ri"
                                                       "1rh"
                                                       "1rg"
                                                       "1rf"
                                                       "1re"
                                                       "1rd"
                                                       "1rc"
                                                       "1rb"
                                                       "1ra"
                                                       "1r9"
                                                       "1r8"
                                                       "1r7"
                                                       "1r6"
                                                       "1r5"
                                                       "1r4"
                                                       "1r3"
                                                       "1r2"
                                                       "1r1"
                                                       "1r0"
                                                       "1qz"
                                                       "1qy"
                                                       "1qx"
                                                       "1qw"
                                                       "1qv"
                                                       "1qu"
                                                       "1qt"
                                                       "1qs"
                                                       "1qr"
                                                       "1qq"
                                                       "1qp"
                                                       "1qo"
                                                       "1qn"
                                                       "1qm"
                                                       "1ql"
                                                       "1qk"
                                                       "1qj"
                                                       "1qi"
                                                       "1qh"
                                                       "1qg"
                                                       "1qf"
                                                       "1qe"
                                                       "1qd"
                                                       "1qc"
                                                       "1qb"
                                                       "1qa"
                                                       "1q9"
                                                       "1q8"
                                                       "1q7"
                                                       "1q6"
                                                       "1q5"
                                                       "1q4"
                                                       "1q3"
                                                       "1q2"
                                                       "1q1"
                                                       "1q0"
                                                       "1pz"
                                                       "1py"))
                                                    #(ribcage
                                                      (define-structure
                                                        define-expansion-accessors
                                                        define-expansion-constructors)
                                                      ((top) (top) (top))
                                                      ("1og" "1of" "1oe")))
                                                   (hygiene guile))
                                                '(())))
                                         #f)
                                       #f))
                                #f))
                            #{key _85hotwsCta0JfYIjI4Lf1}#)
                        (let ((#{x _85hotwsCta0JfYIjI4Lh1}#
                                (gensym
                                  (string-append (symbol->string 'tmp) " "))))
                          (#{build-application _85hotwsCta0JfYIjI4J3G}#
                            #{s _85hotwsCta0JfYIjI4LfX}#
                            (let ((#{req _85hotwsCta0JfYIjI4Lj3}# (list 'tmp))
                                  (#{vars _85hotwsCta0JfYIjI4Lj5}#
                                    (list #{x _85hotwsCta0JfYIjI4Lh1}#))
                                  (#{exp _85hotwsCta0JfYIjI4Lj7}#
                                    (#{gen-syntax-case _85hotwsCta0JfYIjI4LfT}#
                                      (make-struct/no-tail
                                        (vector-ref %expanded-vtables 3)
                                        #f
                                        'tmp
                                        #{x _85hotwsCta0JfYIjI4Lh1}#)
                                      #{key _85hotwsCta0JfYIjI4Lf1}#
                                      #{m _85hotwsCta0JfYIjI4Lf2}#
                                      #{r _85hotwsCta0JfYIjI4LfV}#
                                      #{mod _85hotwsCta0JfYIjI4LfY}#)))
                              (let ((#{body _85hotwsCta0JfYIjI4LkA}#
                                      (make-struct/no-tail
                                        (vector-ref %expanded-vtables 14)
                                        #f
                                        #{req _85hotwsCta0JfYIjI4Lj3}#
                                        #f
                                        #f
                                        #f
                                        '()
                                        #{vars _85hotwsCta0JfYIjI4Lj5}#
                                        #{exp _85hotwsCta0JfYIjI4Lj7}#
                                        #f)))
                                (make-struct/no-tail
                                  (vector-ref %expanded-vtables 13)
                                  #f
                                  '()
                                  #{body _85hotwsCta0JfYIjI4LkA}#)))
                            (list (#{expand _85hotwsCta0JfYIjI4J4L}#
                                    #{val _85hotwsCta0JfYIjI4Lf0}#
                                    #{r _85hotwsCta0JfYIjI4LfV}#
                                    '(())
                                    #{mod _85hotwsCta0JfYIjI4LfY}#))))
                        (syntax-violation
                          'syntax-case
                          "invalid literals list"
                          #{e _85hotwsCta0JfYIjI4LfZ}#)))
                    #{tmp _85hotwsCta0JfYIjI4Lfb}#)
                  (syntax-violation
                    #f
                    "source expression failed to match any pattern"
                    #{e _85hotwsCta0JfYIjI4LfZ}#)))))))
      (set! macroexpand
        (lambda*
          (#{x _85hotwsCta0JfYIjI4MJo}#
            #:optional
            (#{m _85hotwsCta0JfYIjI4MJp}# 'e)
            (#{esew _85hotwsCta0JfYIjI4MJq}# '(eval)))
          (#{expand-top-sequence _85hotwsCta0JfYIjI4J4H}#
            (list #{x _85hotwsCta0JfYIjI4MJo}#)
            '()
            '((top))
            #f
            #{m _85hotwsCta0JfYIjI4MJp}#
            #{esew _85hotwsCta0JfYIjI4MJq}#
            (cons 'hygiene (module-name (current-module))))))
      (set! identifier?
        (lambda (#{x _85hotwsCta0JfYIjI4MJt}#)
          (if (if (vector? #{x _85hotwsCta0JfYIjI4MJt}#)
                (if (= (vector-length #{x _85hotwsCta0JfYIjI4MJt}#)
                       4)
                  (eq? (vector-ref #{x _85hotwsCta0JfYIjI4MJt}# 0)
                       'syntax-object)
                  #f)
                #f)
            (symbol?
              (vector-ref #{x _85hotwsCta0JfYIjI4MJt}# 1))
            #f)))
      (set! datum->syntax
        (lambda (#{id _85hotwsCta0JfYIjI4MKG}#
                 #{datum _85hotwsCta0JfYIjI4MKH}#)
          (let ((#{wrap _85hotwsCta0JfYIjI4MKM}#
                  (vector-ref #{id _85hotwsCta0JfYIjI4MKG}# 2))
                (#{module _85hotwsCta0JfYIjI4MKN}#
                  (vector-ref #{id _85hotwsCta0JfYIjI4MKG}# 3)))
            (vector
              'syntax-object
              #{datum _85hotwsCta0JfYIjI4MKH}#
              #{wrap _85hotwsCta0JfYIjI4MKM}#
              #{module _85hotwsCta0JfYIjI4MKN}#))))
      (set! syntax->datum
        (lambda (#{x _85hotwsCta0JfYIjI4MKU}#)
          (#{strip _85hotwsCta0JfYIjI4J4Y}#
            #{x _85hotwsCta0JfYIjI4MKU}#
            '(()))))
      (set! syntax-source
        (lambda (#{x _85hotwsCta0JfYIjI4MKX}#)
          (#{source-annotation _85hotwsCta0JfYIjI4J3g}#
            #{x _85hotwsCta0JfYIjI4MKX}#)))
      (set! syntax-local-binding
        (lambda (#{id _85hotwsCta0JfYIjI4MMw}#)
          (begin
            (if (not (if (if (vector? #{id _85hotwsCta0JfYIjI4MMw}#)
                           (if (= (vector-length #{id _85hotwsCta0JfYIjI4MMw}#)
                                  4)
                             (eq? (vector-ref #{id _85hotwsCta0JfYIjI4MMw}# 0)
                                  'syntax-object)
                             #f)
                           #f)
                       (symbol?
                         (vector-ref #{id _85hotwsCta0JfYIjI4MMw}# 1))
                       #f))
              (syntax-violation
                'syntax-local-binding
                "invalid argument"
                #{id _85hotwsCta0JfYIjI4MMw}#))
            ((fluid-ref
               #{transformer-environment _85hotwsCta0JfYIjI4J39}#)
             (lambda (#{e _85hotwsCta0JfYIjI4MNZ}#
                      #{r _85hotwsCta0JfYIjI4MNa}#
                      #{w _85hotwsCta0JfYIjI4MNb}#
                      #{s _85hotwsCta0JfYIjI4MNc}#
                      #{rib _85hotwsCta0JfYIjI4MNd}#
                      #{mod _85hotwsCta0JfYIjI4MNe}#)
               (call-with-values
                 (lambda ()
                   (let ((#{id _85hotwsCta0JfYIjI4MNh}#
                           (vector-ref #{id _85hotwsCta0JfYIjI4MMw}# 1))
                         (#{w _85hotwsCta0JfYIjI4MNi}#
                           (let ((#{w _85hotwsCta0JfYIjI4MNt}#
                                   (vector-ref
                                     #{id _85hotwsCta0JfYIjI4MMw}#
                                     2)))
                             (let ((#{ms _85hotwsCta0JfYIjI4MNu}#
                                     (car #{w _85hotwsCta0JfYIjI4MNt}#))
                                   (#{s _85hotwsCta0JfYIjI4MNv}#
                                     (cdr #{w _85hotwsCta0JfYIjI4MNt}#)))
                               (if (if (pair? #{ms _85hotwsCta0JfYIjI4MNu}#)
                                     (eq? (car #{ms _85hotwsCta0JfYIjI4MNu}#)
                                          #f)
                                     #f)
                                 (cons (cdr #{ms _85hotwsCta0JfYIjI4MNu}#)
                                       (if #{rib _85hotwsCta0JfYIjI4MNd}#
                                         (cons #{rib _85hotwsCta0JfYIjI4MNd}#
                                               (cdr #{s _85hotwsCta0JfYIjI4MNv}#))
                                         (cdr #{s _85hotwsCta0JfYIjI4MNv}#)))
                                 (cons #{ms _85hotwsCta0JfYIjI4MNu}#
                                       (if #{rib _85hotwsCta0JfYIjI4MNd}#
                                         (cons #{rib _85hotwsCta0JfYIjI4MNd}#
                                               #{s _85hotwsCta0JfYIjI4MNv}#)
                                         #{s _85hotwsCta0JfYIjI4MNv}#))))))
                         (#{mod _85hotwsCta0JfYIjI4MNk}#
                           (vector-ref #{id _85hotwsCta0JfYIjI4MMw}# 3)))
                     (let ((#{n _85hotwsCta0JfYIjI4MNn}#
                             (#{id-var-name _85hotwsCta0JfYIjI4J36}#
                               #{id _85hotwsCta0JfYIjI4MNh}#
                               #{w _85hotwsCta0JfYIjI4MNi}#)))
                       (if (symbol? #{n _85hotwsCta0JfYIjI4MNn}#)
                         (let ((#{mod _85hotwsCta0JfYIjI4MN1}#
                                 (if (if (vector?
                                           #{id _85hotwsCta0JfYIjI4MNh}#)
                                       (if (= (vector-length
                                                #{id _85hotwsCta0JfYIjI4MNh}#)
                                              4)
                                         (eq? (vector-ref
                                                #{id _85hotwsCta0JfYIjI4MNh}#
                                                0)
                                              'syntax-object)
                                         #f)
                                       #f)
                                   (vector-ref #{id _85hotwsCta0JfYIjI4MNh}# 3)
                                   #{mod _85hotwsCta0JfYIjI4MNk}#)))
                           (let ((#{b _85hotwsCta0JfYIjI4MN2}#
                                   (let ((#{t _85hotwsCta0JfYIjI4MN3}#
                                           (#{get-global-definition-hook _85hotwsCta0JfYIjI4J3C}#
                                             #{n _85hotwsCta0JfYIjI4MNn}#
                                             #{mod _85hotwsCta0JfYIjI4MN1}#)))
                                     (if #{t _85hotwsCta0JfYIjI4MN3}#
                                       #{t _85hotwsCta0JfYIjI4MN3}#
                                       '(global)))))
                             (if (eq? (car #{b _85hotwsCta0JfYIjI4MN2}#)
                                      'global)
                               (values
                                 'global
                                 #{n _85hotwsCta0JfYIjI4MNn}#
                                 #{mod _85hotwsCta0JfYIjI4MN1}#)
                               (values
                                 (car #{b _85hotwsCta0JfYIjI4MN2}#)
                                 (cdr #{b _85hotwsCta0JfYIjI4MN2}#)
                                 #{mod _85hotwsCta0JfYIjI4MN1}#))))
                         (if (string? #{n _85hotwsCta0JfYIjI4MNn}#)
                           (let ((#{mod _85hotwsCta0JfYIjI4MOR}#
                                   (if (if (vector?
                                             #{id _85hotwsCta0JfYIjI4MNh}#)
                                         (if (= (vector-length
                                                  #{id _85hotwsCta0JfYIjI4MNh}#)
                                                4)
                                           (eq? (vector-ref
                                                  #{id _85hotwsCta0JfYIjI4MNh}#
                                                  0)
                                                'syntax-object)
                                           #f)
                                         #f)
                                     (vector-ref
                                       #{id _85hotwsCta0JfYIjI4MNh}#
                                       3)
                                     #{mod _85hotwsCta0JfYIjI4MNk}#)))
                             (let ((#{b _85hotwsCta0JfYIjI4MOS}#
                                     (let ((#{t _85hotwsCta0JfYIjI4MOT}#
                                             (assq-ref
                                               #{r _85hotwsCta0JfYIjI4MNa}#
                                               #{n _85hotwsCta0JfYIjI4MNn}#)))
                                       (if #{t _85hotwsCta0JfYIjI4MOT}#
                                         #{t _85hotwsCta0JfYIjI4MOT}#
                                         '(displaced-lexical)))))
                               (values
                                 (car #{b _85hotwsCta0JfYIjI4MOS}#)
                                 (cdr #{b _85hotwsCta0JfYIjI4MOS}#)
                                 #{mod _85hotwsCta0JfYIjI4MOR}#)))
                           (error "unexpected id-var-name"
                                  #{id _85hotwsCta0JfYIjI4MNh}#
                                  #{w _85hotwsCta0JfYIjI4MNi}#
                                  #{n _85hotwsCta0JfYIjI4MNn}#))))))
                 (lambda (#{type _85hotwsCta0JfYIjI4MOg}#
                          #{value _85hotwsCta0JfYIjI4MOh}#
                          #{mod _85hotwsCta0JfYIjI4MOi}#)
                   (if (eqv? #{type _85hotwsCta0JfYIjI4MOg}# 'lexical)
                     (values
                       'lexical
                       #{value _85hotwsCta0JfYIjI4MOh}#)
                     (if (eqv? #{type _85hotwsCta0JfYIjI4MOg}# 'macro)
                       (values 'macro #{value _85hotwsCta0JfYIjI4MOh}#)
                       (if (eqv? #{type _85hotwsCta0JfYIjI4MOg}# 'syntax)
                         (values
                           'pattern-variable
                           #{value _85hotwsCta0JfYIjI4MOh}#)
                         (if (eqv? #{type _85hotwsCta0JfYIjI4MOg}#
                                   'displaced-lexical)
                           (values 'displaced-lexical #f)
                           (if (eqv? #{type _85hotwsCta0JfYIjI4MOg}# 'global)
                             (values
                               'global
                               (cons #{value _85hotwsCta0JfYIjI4MOh}#
                                     (cdr #{mod _85hotwsCta0JfYIjI4MOi}#)))
                             (values 'other #f)))))))))))))
      (set! syntax-locally-bound-identifiers
        (lambda (#{x _85hotwsCta0JfYIjI4MOt}#)
          (begin
            (if (not (if (if (vector? #{x _85hotwsCta0JfYIjI4MOt}#)
                           (if (= (vector-length #{x _85hotwsCta0JfYIjI4MOt}#)
                                  4)
                             (eq? (vector-ref #{x _85hotwsCta0JfYIjI4MOt}# 0)
                                  'syntax-object)
                             #f)
                           #f)
                       (symbol?
                         (vector-ref #{x _85hotwsCta0JfYIjI4MOt}# 1))
                       #f))
              (syntax-violation
                'syntax-locally-bound-identifiers
                "invalid argument"
                #{x _85hotwsCta0JfYIjI4MOt}#))
            (#{locally-bound-identifiers _85hotwsCta0JfYIjI4J37}#
              (vector-ref #{x _85hotwsCta0JfYIjI4MOt}# 2)
              (vector-ref #{x _85hotwsCta0JfYIjI4MOt}# 3)))))
      (set! generate-temporaries
        (lambda (#{ls _85hotwsCta0JfYIjI4MQY}#)
          (begin
            (if (not (list? #{ls _85hotwsCta0JfYIjI4MQY}#))
              (syntax-violation
                'generate-temporaries
                "invalid argument"
                #{ls _85hotwsCta0JfYIjI4MQY}#))
            (let ((#{mod _85hotwsCta0JfYIjI4MQg}#
                    (cons 'hygiene (module-name (current-module)))))
              (map (lambda (#{x _85hotwsCta0JfYIjI4MQh}#)
                     (#{wrap _85hotwsCta0JfYIjI4J4E}#
                       (gensym)
                       '((top))
                       #{mod _85hotwsCta0JfYIjI4MQg}#))
                   #{ls _85hotwsCta0JfYIjI4MQY}#)))))
      (set! free-identifier=?
        (lambda (#{x _85hotwsCta0JfYIjI4MQl}#
                 #{y _85hotwsCta0JfYIjI4MQm}#)
          (begin
            (if (not (if (if (vector? #{x _85hotwsCta0JfYIjI4MQl}#)
                           (if (= (vector-length #{x _85hotwsCta0JfYIjI4MQl}#)
                                  4)
                             (eq? (vector-ref #{x _85hotwsCta0JfYIjI4MQl}# 0)
                                  'syntax-object)
                             #f)
                           #f)
                       (symbol?
                         (vector-ref #{x _85hotwsCta0JfYIjI4MQl}# 1))
                       #f))
              (syntax-violation
                'free-identifier=?
                "invalid argument"
                #{x _85hotwsCta0JfYIjI4MQl}#))
            (if (not (if (if (vector? #{y _85hotwsCta0JfYIjI4MQm}#)
                           (if (= (vector-length #{y _85hotwsCta0JfYIjI4MQm}#)
                                  4)
                             (eq? (vector-ref #{y _85hotwsCta0JfYIjI4MQm}# 0)
                                  'syntax-object)
                             #f)
                           #f)
                       (symbol?
                         (vector-ref #{y _85hotwsCta0JfYIjI4MQm}# 1))
                       #f))
              (syntax-violation
                'free-identifier=?
                "invalid argument"
                #{y _85hotwsCta0JfYIjI4MQm}#))
            (if (eq? (if (if (vector? #{x _85hotwsCta0JfYIjI4MQl}#)
                           (if (= (vector-length #{x _85hotwsCta0JfYIjI4MQl}#)
                                  4)
                             (eq? (vector-ref #{x _85hotwsCta0JfYIjI4MQl}# 0)
                                  'syntax-object)
                             #f)
                           #f)
                       (vector-ref #{x _85hotwsCta0JfYIjI4MQl}# 1)
                       #{x _85hotwsCta0JfYIjI4MQl}#)
                     (if (if (vector? #{y _85hotwsCta0JfYIjI4MQm}#)
                           (if (= (vector-length #{y _85hotwsCta0JfYIjI4MQm}#)
                                  4)
                             (eq? (vector-ref #{y _85hotwsCta0JfYIjI4MQm}# 0)
                                  'syntax-object)
                             #f)
                           #f)
                       (vector-ref #{y _85hotwsCta0JfYIjI4MQm}# 1)
                       #{y _85hotwsCta0JfYIjI4MQm}#))
              (eq? (#{id-var-name _85hotwsCta0JfYIjI4J36}#
                     #{x _85hotwsCta0JfYIjI4MQl}#
                     '(()))
                   (#{id-var-name _85hotwsCta0JfYIjI4J36}#
                     #{y _85hotwsCta0JfYIjI4MQm}#
                     '(())))
              #f))))
      (set! bound-identifier=?
        (lambda (#{x _85hotwsCta0JfYIjI4MS8}#
                 #{y _85hotwsCta0JfYIjI4MS9}#)
          (begin
            (if (not (if (if (vector? #{x _85hotwsCta0JfYIjI4MS8}#)
                           (if (= (vector-length #{x _85hotwsCta0JfYIjI4MS8}#)
                                  4)
                             (eq? (vector-ref #{x _85hotwsCta0JfYIjI4MS8}# 0)
                                  'syntax-object)
                             #f)
                           #f)
                       (symbol?
                         (vector-ref #{x _85hotwsCta0JfYIjI4MS8}# 1))
                       #f))
              (syntax-violation
                'bound-identifier=?
                "invalid argument"
                #{x _85hotwsCta0JfYIjI4MS8}#))
            (if (not (if (if (vector? #{y _85hotwsCta0JfYIjI4MS9}#)
                           (if (= (vector-length #{y _85hotwsCta0JfYIjI4MS9}#)
                                  4)
                             (eq? (vector-ref #{y _85hotwsCta0JfYIjI4MS9}# 0)
                                  'syntax-object)
                             #f)
                           #f)
                       (symbol?
                         (vector-ref #{y _85hotwsCta0JfYIjI4MS9}# 1))
                       #f))
              (syntax-violation
                'bound-identifier=?
                "invalid argument"
                #{y _85hotwsCta0JfYIjI4MS9}#))
            (if (if (if (vector? #{x _85hotwsCta0JfYIjI4MS8}#)
                      (if (= (vector-length #{x _85hotwsCta0JfYIjI4MS8}#)
                             4)
                        (eq? (vector-ref #{x _85hotwsCta0JfYIjI4MS8}# 0)
                             'syntax-object)
                        #f)
                      #f)
                  (if (vector? #{y _85hotwsCta0JfYIjI4MS9}#)
                    (if (= (vector-length #{y _85hotwsCta0JfYIjI4MS9}#)
                           4)
                      (eq? (vector-ref #{y _85hotwsCta0JfYIjI4MS9}# 0)
                           'syntax-object)
                      #f)
                    #f)
                  #f)
              (if (eq? (vector-ref #{x _85hotwsCta0JfYIjI4MS8}# 1)
                       (vector-ref #{y _85hotwsCta0JfYIjI4MS9}# 1))
                (#{same-marks? _85hotwsCta0JfYIjI4J35}#
                  (car (vector-ref #{x _85hotwsCta0JfYIjI4MS8}# 2))
                  (car (vector-ref #{y _85hotwsCta0JfYIjI4MS9}# 2)))
                #f)
              (eq? #{x _85hotwsCta0JfYIjI4MS8}#
                   #{y _85hotwsCta0JfYIjI4MS9}#)))))
      (set! syntax-violation
        (lambda*
          (#{who _85hotwsCta0JfYIjI4MVC}#
            #{message _85hotwsCta0JfYIjI4MVD}#
            #{form _85hotwsCta0JfYIjI4MVE}#
            #:optional
            (#{subform _85hotwsCta0JfYIjI4MVF}# #f))
          (begin
            (if (not (if (not #{who _85hotwsCta0JfYIjI4MVC}#)
                       (not #{who _85hotwsCta0JfYIjI4MVC}#)
                       (let ((#{t _85hotwsCta0JfYIjI4MVX}#
                               (string? #{who _85hotwsCta0JfYIjI4MVC}#)))
                         (if #{t _85hotwsCta0JfYIjI4MVX}#
                           #{t _85hotwsCta0JfYIjI4MVX}#
                           (symbol? #{who _85hotwsCta0JfYIjI4MVC}#)))))
              (syntax-violation
                'syntax-violation
                "invalid argument"
                #{who _85hotwsCta0JfYIjI4MVC}#))
            (if (not (string? #{message _85hotwsCta0JfYIjI4MVD}#))
              (syntax-violation
                'syntax-violation
                "invalid argument"
                #{message _85hotwsCta0JfYIjI4MVD}#))
            (throw 'syntax-error
                   #{who _85hotwsCta0JfYIjI4MVC}#
                   #{message _85hotwsCta0JfYIjI4MVD}#
                   (#{source-annotation _85hotwsCta0JfYIjI4J3g}#
                     (if #{form _85hotwsCta0JfYIjI4MVE}#
                       #{form _85hotwsCta0JfYIjI4MVE}#
                       #{subform _85hotwsCta0JfYIjI4MVF}#))
                   (#{strip _85hotwsCta0JfYIjI4J4Y}#
                     #{form _85hotwsCta0JfYIjI4MVE}#
                     '(()))
                   (if #{subform _85hotwsCta0JfYIjI4MVF}#
                     (#{strip _85hotwsCta0JfYIjI4J4Y}#
                       #{subform _85hotwsCta0JfYIjI4MVF}#
                       '(()))
                     #f)))))
      (letrec*
        ((#{match-each _85hotwsCta0JfYIjI4MYi}#
           (lambda (#{e _85hotwsCta0JfYIjI4Mht}#
                    #{p _85hotwsCta0JfYIjI4Mhu}#
                    #{w _85hotwsCta0JfYIjI4Mhv}#
                    #{mod _85hotwsCta0JfYIjI4Mhw}#)
             (if (pair? #{e _85hotwsCta0JfYIjI4Mht}#)
               (let ((#{first _85hotwsCta0JfYIjI4Mhx}#
                       (#{match _85hotwsCta0JfYIjI4MYo}#
                         (car #{e _85hotwsCta0JfYIjI4Mht}#)
                         #{p _85hotwsCta0JfYIjI4Mhu}#
                         #{w _85hotwsCta0JfYIjI4Mhv}#
                         '()
                         #{mod _85hotwsCta0JfYIjI4Mhw}#)))
                 (if #{first _85hotwsCta0JfYIjI4Mhx}#
                   (let ((#{rest _85hotwsCta0JfYIjI4Mh0}#
                           (#{match-each _85hotwsCta0JfYIjI4MYi}#
                             (cdr #{e _85hotwsCta0JfYIjI4Mht}#)
                             #{p _85hotwsCta0JfYIjI4Mhu}#
                             #{w _85hotwsCta0JfYIjI4Mhv}#
                             #{mod _85hotwsCta0JfYIjI4Mhw}#)))
                     (if #{rest _85hotwsCta0JfYIjI4Mh0}#
                       (cons #{first _85hotwsCta0JfYIjI4Mhx}#
                             #{rest _85hotwsCta0JfYIjI4Mh0}#)
                       #f))
                   #f))
               (if (null? #{e _85hotwsCta0JfYIjI4Mht}#)
                 '()
                 (if (if (vector? #{e _85hotwsCta0JfYIjI4Mht}#)
                       (if (= (vector-length #{e _85hotwsCta0JfYIjI4Mht}#)
                              4)
                         (eq? (vector-ref #{e _85hotwsCta0JfYIjI4Mht}# 0)
                              'syntax-object)
                         #f)
                       #f)
                   (#{match-each _85hotwsCta0JfYIjI4MYi}#
                     (vector-ref #{e _85hotwsCta0JfYIjI4Mht}# 1)
                     #{p _85hotwsCta0JfYIjI4Mhu}#
                     (#{join-wraps _85hotwsCta0JfYIjI4J33}#
                       #{w _85hotwsCta0JfYIjI4Mhv}#
                       (vector-ref #{e _85hotwsCta0JfYIjI4Mht}# 2))
                     (vector-ref #{e _85hotwsCta0JfYIjI4Mht}# 3))
                   #f)))))
         (#{match-each-any _85hotwsCta0JfYIjI4MYk}#
           (lambda (#{e _85hotwsCta0JfYIjI4MiQ}#
                    #{w _85hotwsCta0JfYIjI4MiR}#
                    #{mod _85hotwsCta0JfYIjI4MiS}#)
             (if (pair? #{e _85hotwsCta0JfYIjI4MiQ}#)
               (let ((#{l _85hotwsCta0JfYIjI4MiT}#
                       (#{match-each-any _85hotwsCta0JfYIjI4MYk}#
                         (cdr #{e _85hotwsCta0JfYIjI4MiQ}#)
                         #{w _85hotwsCta0JfYIjI4MiR}#
                         #{mod _85hotwsCta0JfYIjI4MiS}#)))
                 (if #{l _85hotwsCta0JfYIjI4MiT}#
                   (cons (#{wrap _85hotwsCta0JfYIjI4J4E}#
                           (car #{e _85hotwsCta0JfYIjI4MiQ}#)
                           #{w _85hotwsCta0JfYIjI4MiR}#
                           #{mod _85hotwsCta0JfYIjI4MiS}#)
                         #{l _85hotwsCta0JfYIjI4MiT}#)
                   #f))
               (if (null? #{e _85hotwsCta0JfYIjI4MiQ}#)
                 '()
                 (if (if (vector? #{e _85hotwsCta0JfYIjI4MiQ}#)
                       (if (= (vector-length #{e _85hotwsCta0JfYIjI4MiQ}#)
                              4)
                         (eq? (vector-ref #{e _85hotwsCta0JfYIjI4MiQ}# 0)
                              'syntax-object)
                         #f)
                       #f)
                   (#{match-each-any _85hotwsCta0JfYIjI4MYk}#
                     (vector-ref #{e _85hotwsCta0JfYIjI4MiQ}# 1)
                     (#{join-wraps _85hotwsCta0JfYIjI4J33}#
                       #{w _85hotwsCta0JfYIjI4MiR}#
                       (vector-ref #{e _85hotwsCta0JfYIjI4MiQ}# 2))
                     #{mod _85hotwsCta0JfYIjI4MiS}#)
                   #f)))))
         (#{match-empty _85hotwsCta0JfYIjI4MYl}#
           (lambda (#{p _85hotwsCta0JfYIjI4Mir}#
                    #{r _85hotwsCta0JfYIjI4Mis}#)
             (if (null? #{p _85hotwsCta0JfYIjI4Mir}#)
               #{r _85hotwsCta0JfYIjI4Mis}#
               (if (eq? #{p _85hotwsCta0JfYIjI4Mir}# '_)
                 #{r _85hotwsCta0JfYIjI4Mis}#
                 (if (eq? #{p _85hotwsCta0JfYIjI4Mir}# 'any)
                   (cons '() #{r _85hotwsCta0JfYIjI4Mis}#)
                   (if (pair? #{p _85hotwsCta0JfYIjI4Mir}#)
                     (#{match-empty _85hotwsCta0JfYIjI4MYl}#
                       (car #{p _85hotwsCta0JfYIjI4Mir}#)
                       (#{match-empty _85hotwsCta0JfYIjI4MYl}#
                         (cdr #{p _85hotwsCta0JfYIjI4Mir}#)
                         #{r _85hotwsCta0JfYIjI4Mis}#))
                     (if (eq? #{p _85hotwsCta0JfYIjI4Mir}# 'each-any)
                       (cons '() #{r _85hotwsCta0JfYIjI4Mis}#)
                       (let ((#{atom-key _85hotwsCta0JfYIjI4Mit}#
                               (vector-ref #{p _85hotwsCta0JfYIjI4Mir}# 0)))
                         (if (eqv? #{atom-key _85hotwsCta0JfYIjI4Mit}# 'each)
                           (#{match-empty _85hotwsCta0JfYIjI4MYl}#
                             (vector-ref #{p _85hotwsCta0JfYIjI4Mir}# 1)
                             #{r _85hotwsCta0JfYIjI4Mis}#)
                           (if (eqv? #{atom-key _85hotwsCta0JfYIjI4Mit}#
                                     'each+)
                             (#{match-empty _85hotwsCta0JfYIjI4MYl}#
                               (vector-ref #{p _85hotwsCta0JfYIjI4Mir}# 1)
                               (#{match-empty _85hotwsCta0JfYIjI4MYl}#
                                 (reverse
                                   (vector-ref #{p _85hotwsCta0JfYIjI4Mir}# 2))
                                 (#{match-empty _85hotwsCta0JfYIjI4MYl}#
                                   (vector-ref #{p _85hotwsCta0JfYIjI4Mir}# 3)
                                   #{r _85hotwsCta0JfYIjI4Mis}#)))
                             (if (if (eqv? #{atom-key _85hotwsCta0JfYIjI4Mit}#
                                           'free-id)
                                   #t
                                   (eqv? #{atom-key _85hotwsCta0JfYIjI4Mit}#
                                         'atom))
                               #{r _85hotwsCta0JfYIjI4Mis}#
                               (if (eqv? #{atom-key _85hotwsCta0JfYIjI4Mit}#
                                         'vector)
                                 (#{match-empty _85hotwsCta0JfYIjI4MYl}#
                                   (vector-ref #{p _85hotwsCta0JfYIjI4Mir}# 1)
                                   #{r _85hotwsCta0JfYIjI4Mis}#)))))))))))))
         (#{combine _85hotwsCta0JfYIjI4MYm}#
           (lambda (#{r* _85hotwsCta0JfYIjI4MjA}#
                    #{r _85hotwsCta0JfYIjI4MjB}#)
             (if (null? (car #{r* _85hotwsCta0JfYIjI4MjA}#))
               #{r _85hotwsCta0JfYIjI4MjB}#
               (cons (map car #{r* _85hotwsCta0JfYIjI4MjA}#)
                     (#{combine _85hotwsCta0JfYIjI4MYm}#
                       (map cdr #{r* _85hotwsCta0JfYIjI4MjA}#)
                       #{r _85hotwsCta0JfYIjI4MjB}#)))))
         (#{match* _85hotwsCta0JfYIjI4MYn}#
           (lambda (#{e _85hotwsCta0JfYIjI4MZF}#
                    #{p _85hotwsCta0JfYIjI4MZG}#
                    #{w _85hotwsCta0JfYIjI4MZH}#
                    #{r _85hotwsCta0JfYIjI4MZI}#
                    #{mod _85hotwsCta0JfYIjI4MZJ}#)
             (if (null? #{p _85hotwsCta0JfYIjI4MZG}#)
               (if (null? #{e _85hotwsCta0JfYIjI4MZF}#)
                 #{r _85hotwsCta0JfYIjI4MZI}#
                 #f)
               (if (pair? #{p _85hotwsCta0JfYIjI4MZG}#)
                 (if (pair? #{e _85hotwsCta0JfYIjI4MZF}#)
                   (#{match _85hotwsCta0JfYIjI4MYo}#
                     (car #{e _85hotwsCta0JfYIjI4MZF}#)
                     (car #{p _85hotwsCta0JfYIjI4MZG}#)
                     #{w _85hotwsCta0JfYIjI4MZH}#
                     (#{match _85hotwsCta0JfYIjI4MYo}#
                       (cdr #{e _85hotwsCta0JfYIjI4MZF}#)
                       (cdr #{p _85hotwsCta0JfYIjI4MZG}#)
                       #{w _85hotwsCta0JfYIjI4MZH}#
                       #{r _85hotwsCta0JfYIjI4MZI}#
                       #{mod _85hotwsCta0JfYIjI4MZJ}#)
                     #{mod _85hotwsCta0JfYIjI4MZJ}#)
                   #f)
                 (if (eq? #{p _85hotwsCta0JfYIjI4MZG}# 'each-any)
                   (let ((#{l _85hotwsCta0JfYIjI4MZO}#
                           (#{match-each-any _85hotwsCta0JfYIjI4MYk}#
                             #{e _85hotwsCta0JfYIjI4MZF}#
                             #{w _85hotwsCta0JfYIjI4MZH}#
                             #{mod _85hotwsCta0JfYIjI4MZJ}#)))
                     (if #{l _85hotwsCta0JfYIjI4MZO}#
                       (cons #{l _85hotwsCta0JfYIjI4MZO}#
                             #{r _85hotwsCta0JfYIjI4MZI}#)
                       #f))
                   (let ((#{atom-key _85hotwsCta0JfYIjI4MZT}#
                           (vector-ref #{p _85hotwsCta0JfYIjI4MZG}# 0)))
                     (if (eqv? #{atom-key _85hotwsCta0JfYIjI4MZT}# 'each)
                       (if (null? #{e _85hotwsCta0JfYIjI4MZF}#)
                         (#{match-empty _85hotwsCta0JfYIjI4MYl}#
                           (vector-ref #{p _85hotwsCta0JfYIjI4MZG}# 1)
                           #{r _85hotwsCta0JfYIjI4MZI}#)
                         (let ((#{l _85hotwsCta0JfYIjI4MZa}#
                                 (#{match-each _85hotwsCta0JfYIjI4MYi}#
                                   #{e _85hotwsCta0JfYIjI4MZF}#
                                   (vector-ref #{p _85hotwsCta0JfYIjI4MZG}# 1)
                                   #{w _85hotwsCta0JfYIjI4MZH}#
                                   #{mod _85hotwsCta0JfYIjI4MZJ}#)))
                           (if #{l _85hotwsCta0JfYIjI4MZa}#
                             (letrec*
                               ((#{collect _85hotwsCta0JfYIjI4MZd}#
                                  (lambda (#{l _85hotwsCta0JfYIjI4MaQ}#)
                                    (if (null? (car #{l _85hotwsCta0JfYIjI4MaQ}#))
                                      #{r _85hotwsCta0JfYIjI4MZI}#
                                      (cons (map car
                                                 #{l _85hotwsCta0JfYIjI4MaQ}#)
                                            (#{collect _85hotwsCta0JfYIjI4MZd}#
                                              (map cdr
                                                   #{l _85hotwsCta0JfYIjI4MaQ}#)))))))
                               (#{collect _85hotwsCta0JfYIjI4MZd}#
                                 #{l _85hotwsCta0JfYIjI4MZa}#))
                             #f)))
                       (if (eqv? #{atom-key _85hotwsCta0JfYIjI4MZT}# 'each+)
                         (call-with-values
                           (lambda ()
                             (let ((#{x-pat _85hotwsCta0JfYIjI4MaZ}#
                                     (vector-ref
                                       #{p _85hotwsCta0JfYIjI4MZG}#
                                       1))
                                   (#{y-pat _85hotwsCta0JfYIjI4Maa}#
                                     (vector-ref
                                       #{p _85hotwsCta0JfYIjI4MZG}#
                                       2))
                                   (#{z-pat _85hotwsCta0JfYIjI4Mab}#
                                     (vector-ref
                                       #{p _85hotwsCta0JfYIjI4MZG}#
                                       3)))
                               (letrec*
                                 ((#{f _85hotwsCta0JfYIjI4Maf}#
                                    (lambda (#{e _85hotwsCta0JfYIjI4Mah}#
                                             #{w _85hotwsCta0JfYIjI4Mai}#)
                                      (if (pair? #{e _85hotwsCta0JfYIjI4Mah}#)
                                        (call-with-values
                                          (lambda ()
                                            (#{f _85hotwsCta0JfYIjI4Maf}#
                                              (cdr #{e _85hotwsCta0JfYIjI4Mah}#)
                                              #{w _85hotwsCta0JfYIjI4Mai}#))
                                          (lambda (#{xr* _85hotwsCta0JfYIjI4Maj}#
                                                   #{y-pat _85hotwsCta0JfYIjI4Mak}#
                                                   #{r _85hotwsCta0JfYIjI4Mal}#)
                                            (if #{r _85hotwsCta0JfYIjI4Mal}#
                                              (if (null? #{y-pat _85hotwsCta0JfYIjI4Mak}#)
                                                (let ((#{xr _85hotwsCta0JfYIjI4Mam}#
                                                        (#{match _85hotwsCta0JfYIjI4MYo}#
                                                          (car #{e _85hotwsCta0JfYIjI4Mah}#)
                                                          #{x-pat _85hotwsCta0JfYIjI4MaZ}#
                                                          #{w _85hotwsCta0JfYIjI4Mai}#
                                                          '()
                                                          #{mod _85hotwsCta0JfYIjI4MZJ}#)))
                                                  (if #{xr _85hotwsCta0JfYIjI4Mam}#
                                                    (values
                                                      (cons #{xr _85hotwsCta0JfYIjI4Mam}#
                                                            #{xr* _85hotwsCta0JfYIjI4Maj}#)
                                                      #{y-pat _85hotwsCta0JfYIjI4Mak}#
                                                      #{r _85hotwsCta0JfYIjI4Mal}#)
                                                    (values #f #f #f)))
                                                (values
                                                  '()
                                                  (cdr #{y-pat _85hotwsCta0JfYIjI4Mak}#)
                                                  (#{match _85hotwsCta0JfYIjI4MYo}#
                                                    (car #{e _85hotwsCta0JfYIjI4Mah}#)
                                                    (car #{y-pat _85hotwsCta0JfYIjI4Mak}#)
                                                    #{w _85hotwsCta0JfYIjI4Mai}#
                                                    #{r _85hotwsCta0JfYIjI4Mal}#
                                                    #{mod _85hotwsCta0JfYIjI4MZJ}#)))
                                              (values #f #f #f))))
                                        (if (if (vector?
                                                  #{e _85hotwsCta0JfYIjI4Mah}#)
                                              (if (= (vector-length
                                                       #{e _85hotwsCta0JfYIjI4Mah}#)
                                                     4)
                                                (eq? (vector-ref
                                                       #{e _85hotwsCta0JfYIjI4Mah}#
                                                       0)
                                                     'syntax-object)
                                                #f)
                                              #f)
                                          (#{f _85hotwsCta0JfYIjI4Maf}#
                                            (vector-ref
                                              #{e _85hotwsCta0JfYIjI4Mah}#
                                              1)
                                            (#{join-wraps _85hotwsCta0JfYIjI4J33}#
                                              #{w _85hotwsCta0JfYIjI4Mai}#
                                              #{e _85hotwsCta0JfYIjI4Mah}#))
                                          (values
                                            '()
                                            #{y-pat _85hotwsCta0JfYIjI4Maa}#
                                            (#{match _85hotwsCta0JfYIjI4MYo}#
                                              #{e _85hotwsCta0JfYIjI4Mah}#
                                              #{z-pat _85hotwsCta0JfYIjI4Mab}#
                                              #{w _85hotwsCta0JfYIjI4Mai}#
                                              #{r _85hotwsCta0JfYIjI4MZI}#
                                              #{mod _85hotwsCta0JfYIjI4MZJ}#)))))))
                                 (#{f _85hotwsCta0JfYIjI4Maf}#
                                   #{e _85hotwsCta0JfYIjI4MZF}#
                                   #{w _85hotwsCta0JfYIjI4MZH}#))))
                           (lambda (#{xr* _85hotwsCta0JfYIjI4MbA}#
                                    #{y-pat _85hotwsCta0JfYIjI4MbB}#
                                    #{r _85hotwsCta0JfYIjI4MbC}#)
                             (if #{r _85hotwsCta0JfYIjI4MbC}#
                               (if (null? #{y-pat _85hotwsCta0JfYIjI4MbB}#)
                                 (if (null? #{xr* _85hotwsCta0JfYIjI4MbA}#)
                                   (#{match-empty _85hotwsCta0JfYIjI4MYl}#
                                     (vector-ref
                                       #{p _85hotwsCta0JfYIjI4MZG}#
                                       1)
                                     #{r _85hotwsCta0JfYIjI4MbC}#)
                                   (#{combine _85hotwsCta0JfYIjI4MYm}#
                                     #{xr* _85hotwsCta0JfYIjI4MbA}#
                                     #{r _85hotwsCta0JfYIjI4MbC}#))
                                 #f)
                               #f)))
                         (if (eqv? #{atom-key _85hotwsCta0JfYIjI4MZT}#
                                   'free-id)
                           (if (if (symbol? #{e _85hotwsCta0JfYIjI4MZF}#)
                                 #t
                                 (if (if (vector? #{e _85hotwsCta0JfYIjI4MZF}#)
                                       (if (= (vector-length
                                                #{e _85hotwsCta0JfYIjI4MZF}#)
                                              4)
                                         (eq? (vector-ref
                                                #{e _85hotwsCta0JfYIjI4MZF}#
                                                0)
                                              'syntax-object)
                                         #f)
                                       #f)
                                   (symbol?
                                     (vector-ref
                                       #{e _85hotwsCta0JfYIjI4MZF}#
                                       1))
                                   #f))
                             (if (let ((#{i _85hotwsCta0JfYIjI4MgN}#
                                         (#{wrap _85hotwsCta0JfYIjI4J4E}#
                                           #{e _85hotwsCta0JfYIjI4MZF}#
                                           #{w _85hotwsCta0JfYIjI4MZH}#
                                           #{mod _85hotwsCta0JfYIjI4MZJ}#))
                                       (#{j _85hotwsCta0JfYIjI4MgO}#
                                         (vector-ref
                                           #{p _85hotwsCta0JfYIjI4MZG}#
                                           1)))
                                   (if (eq? (if (if (vector?
                                                      #{i _85hotwsCta0JfYIjI4MgN}#)
                                                  (if (= (vector-length
                                                           #{i _85hotwsCta0JfYIjI4MgN}#)
                                                         4)
                                                    (eq? (vector-ref
                                                           #{i _85hotwsCta0JfYIjI4MgN}#
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (vector-ref
                                                #{i _85hotwsCta0JfYIjI4MgN}#
                                                1)
                                              #{i _85hotwsCta0JfYIjI4MgN}#)
                                            (if (if (vector?
                                                      #{j _85hotwsCta0JfYIjI4MgO}#)
                                                  (if (= (vector-length
                                                           #{j _85hotwsCta0JfYIjI4MgO}#)
                                                         4)
                                                    (eq? (vector-ref
                                                           #{j _85hotwsCta0JfYIjI4MgO}#
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (vector-ref
                                                #{j _85hotwsCta0JfYIjI4MgO}#
                                                1)
                                              #{j _85hotwsCta0JfYIjI4MgO}#))
                                     (eq? (#{id-var-name _85hotwsCta0JfYIjI4J36}#
                                            #{i _85hotwsCta0JfYIjI4MgN}#
                                            '(()))
                                          (#{id-var-name _85hotwsCta0JfYIjI4J36}#
                                            #{j _85hotwsCta0JfYIjI4MgO}#
                                            '(())))
                                     #f))
                               #{r _85hotwsCta0JfYIjI4MZI}#
                               #f)
                             #f)
                           (if (eqv? #{atom-key _85hotwsCta0JfYIjI4MZT}# 'atom)
                             (if (equal?
                                   (vector-ref #{p _85hotwsCta0JfYIjI4MZG}# 1)
                                   (#{strip _85hotwsCta0JfYIjI4J4Y}#
                                     #{e _85hotwsCta0JfYIjI4MZF}#
                                     #{w _85hotwsCta0JfYIjI4MZH}#))
                               #{r _85hotwsCta0JfYIjI4MZI}#
                               #f)
                             (if (eqv? #{atom-key _85hotwsCta0JfYIjI4MZT}#
                                       'vector)
                               (if (vector? #{e _85hotwsCta0JfYIjI4MZF}#)
                                 (#{match _85hotwsCta0JfYIjI4MYo}#
                                   (vector->list #{e _85hotwsCta0JfYIjI4MZF}#)
                                   (vector-ref #{p _85hotwsCta0JfYIjI4MZG}# 1)
                                   #{w _85hotwsCta0JfYIjI4MZH}#
                                   #{r _85hotwsCta0JfYIjI4MZI}#
                                   #{mod _85hotwsCta0JfYIjI4MZJ}#)
                                 #f))))))))))))
         (#{match _85hotwsCta0JfYIjI4MYo}#
           (lambda (#{e _85hotwsCta0JfYIjI4MhK}#
                    #{p _85hotwsCta0JfYIjI4MhL}#
                    #{w _85hotwsCta0JfYIjI4MhM}#
                    #{r _85hotwsCta0JfYIjI4MhN}#
                    #{mod _85hotwsCta0JfYIjI4MhO}#)
             (if (not #{r _85hotwsCta0JfYIjI4MhN}#)
               #f
               (if (eq? #{p _85hotwsCta0JfYIjI4MhL}# '_)
                 #{r _85hotwsCta0JfYIjI4MhN}#
                 (if (eq? #{p _85hotwsCta0JfYIjI4MhL}# 'any)
                   (cons (#{wrap _85hotwsCta0JfYIjI4J4E}#
                           #{e _85hotwsCta0JfYIjI4MhK}#
                           #{w _85hotwsCta0JfYIjI4MhM}#
                           #{mod _85hotwsCta0JfYIjI4MhO}#)
                         #{r _85hotwsCta0JfYIjI4MhN}#)
                   (if (if (vector? #{e _85hotwsCta0JfYIjI4MhK}#)
                         (if (= (vector-length #{e _85hotwsCta0JfYIjI4MhK}#)
                                4)
                           (eq? (vector-ref #{e _85hotwsCta0JfYIjI4MhK}# 0)
                                'syntax-object)
                           #f)
                         #f)
                     (#{match* _85hotwsCta0JfYIjI4MYn}#
                       (vector-ref #{e _85hotwsCta0JfYIjI4MhK}# 1)
                       #{p _85hotwsCta0JfYIjI4MhL}#
                       (#{join-wraps _85hotwsCta0JfYIjI4J33}#
                         #{w _85hotwsCta0JfYIjI4MhM}#
                         (vector-ref #{e _85hotwsCta0JfYIjI4MhK}# 2))
                       #{r _85hotwsCta0JfYIjI4MhN}#
                       (vector-ref #{e _85hotwsCta0JfYIjI4MhK}# 3))
                     (#{match* _85hotwsCta0JfYIjI4MYn}#
                       #{e _85hotwsCta0JfYIjI4MhK}#
                       #{p _85hotwsCta0JfYIjI4MhL}#
                       #{w _85hotwsCta0JfYIjI4MhM}#
                       #{r _85hotwsCta0JfYIjI4MhN}#
                       #{mod _85hotwsCta0JfYIjI4MhO}#))))))))
        (set! $sc-dispatch
          (lambda (#{e _85hotwsCta0JfYIjI4MYp}#
                   #{p _85hotwsCta0JfYIjI4MYq}#)
            (if (eq? #{p _85hotwsCta0JfYIjI4MYq}# 'any)
              (list #{e _85hotwsCta0JfYIjI4MYp}#)
              (if (eq? #{p _85hotwsCta0JfYIjI4MYq}# '_)
                '()
                (if (if (vector? #{e _85hotwsCta0JfYIjI4MYp}#)
                      (if (= (vector-length #{e _85hotwsCta0JfYIjI4MYp}#)
                             4)
                        (eq? (vector-ref #{e _85hotwsCta0JfYIjI4MYp}# 0)
                             'syntax-object)
                        #f)
                      #f)
                  (#{match* _85hotwsCta0JfYIjI4MYn}#
                    (vector-ref #{e _85hotwsCta0JfYIjI4MYp}# 1)
                    #{p _85hotwsCta0JfYIjI4MYq}#
                    (vector-ref #{e _85hotwsCta0JfYIjI4MYp}# 2)
                    '()
                    (vector-ref #{e _85hotwsCta0JfYIjI4MYp}# 3))
                  (#{match* _85hotwsCta0JfYIjI4MYn}#
                    #{e _85hotwsCta0JfYIjI4MYp}#
                    #{p _85hotwsCta0JfYIjI4MYq}#
                    '(())
                    '()
                    #f))))))))))

(define with-syntax
  (make-syntax-transformer
    'with-syntax
    'macro
    (lambda (#{x _85hotwsCta0JfYIjI4PUl}#)
      (let ((#{tmp _85hotwsCta0JfYIjI4PUn}#
              ($sc-dispatch
                #{x _85hotwsCta0JfYIjI4PUl}#
                '(_ () any . each-any))))
        (if #{tmp _85hotwsCta0JfYIjI4PUn}#
          (@apply
            (lambda (#{e1 _85hotwsCta0JfYIjI4PUr}#
                     #{e2 _85hotwsCta0JfYIjI4PUs}#)
              (cons '#(syntax-object
                       let
                       ((top)
                        #(ribcage #(e1 e2) #((top) (top)) #("2zm" "2zn"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("2zl")))
                       (hygiene guile))
                    (cons '()
                          (cons #{e1 _85hotwsCta0JfYIjI4PUr}#
                                #{e2 _85hotwsCta0JfYIjI4PUs}#))))
            #{tmp _85hotwsCta0JfYIjI4PUn}#)
          (let ((#{tmp _85hotwsCta0JfYIjI4PUt}#
                  ($sc-dispatch
                    #{x _85hotwsCta0JfYIjI4PUl}#
                    '(_ ((any any)) any . each-any))))
            (if #{tmp _85hotwsCta0JfYIjI4PUt}#
              (@apply
                (lambda (#{out _85hotwsCta0JfYIjI4PUx}#
                         #{in _85hotwsCta0JfYIjI4PUy}#
                         #{e1 _85hotwsCta0JfYIjI4PUz}#
                         #{e2 _85hotwsCta0JfYIjI4PU0}#)
                  (list '#(syntax-object
                           syntax-case
                           ((top)
                            #(ribcage
                              #(out in e1 e2)
                              #((top) (top) (top) (top))
                              #("2zo" "2zp" "2zq" "2zr"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("2zl")))
                           (hygiene guile))
                        #{in _85hotwsCta0JfYIjI4PUy}#
                        '()
                        (list #{out _85hotwsCta0JfYIjI4PUx}#
                              (cons '#(syntax-object
                                       let
                                       ((top)
                                        #(ribcage
                                          #(out in e1 e2)
                                          #((top) (top) (top) (top))
                                          #("2zo" "2zp" "2zq" "2zr"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("2zl")))
                                       (hygiene guile))
                                    (cons '()
                                          (cons #{e1 _85hotwsCta0JfYIjI4PUz}#
                                                #{e2 _85hotwsCta0JfYIjI4PU0}#))))))
                #{tmp _85hotwsCta0JfYIjI4PUt}#)
              (let ((#{tmp _85hotwsCta0JfYIjI4PU1}#
                      ($sc-dispatch
                        #{x _85hotwsCta0JfYIjI4PUl}#
                        '(_ #(each (any any)) any . each-any))))
                (if #{tmp _85hotwsCta0JfYIjI4PU1}#
                  (@apply
                    (lambda (#{out _85hotwsCta0JfYIjI4PU5}#
                             #{in _85hotwsCta0JfYIjI4PU6}#
                             #{e1 _85hotwsCta0JfYIjI4PU7}#
                             #{e2 _85hotwsCta0JfYIjI4PU8}#)
                      (list '#(syntax-object
                               syntax-case
                               ((top)
                                #(ribcage
                                  #(out in e1 e2)
                                  #((top) (top) (top) (top))
                                  #("2zs" "2zt" "2zu" "2zv"))
                                #(ribcage () () ())
                                #(ribcage #(x) #((top)) #("2zl")))
                               (hygiene guile))
                            (cons '#(syntax-object
                                     list
                                     ((top)
                                      #(ribcage
                                        #(out in e1 e2)
                                        #((top) (top) (top) (top))
                                        #("2zs" "2zt" "2zu" "2zv"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("2zl")))
                                     (hygiene guile))
                                  #{in _85hotwsCta0JfYIjI4PU6}#)
                            '()
                            (list #{out _85hotwsCta0JfYIjI4PU5}#
                                  (cons '#(syntax-object
                                           let
                                           ((top)
                                            #(ribcage
                                              #(out in e1 e2)
                                              #((top) (top) (top) (top))
                                              #("2zs" "2zt" "2zu" "2zv"))
                                            #(ribcage () () ())
                                            #(ribcage #(x) #((top)) #("2zl")))
                                           (hygiene guile))
                                        (cons '()
                                              (cons #{e1 _85hotwsCta0JfYIjI4PU7}#
                                                    #{e2 _85hotwsCta0JfYIjI4PU8}#))))))
                    #{tmp _85hotwsCta0JfYIjI4PU1}#)
                  (syntax-violation
                    #f
                    "source expression failed to match any pattern"
                    #{x _85hotwsCta0JfYIjI4PUl}#))))))))))

(define syntax-rules
  (make-syntax-transformer
    'syntax-rules
    'macro
    (lambda (#{x _85hotwsCta0JfYIjI4PVj}#)
      (let ((#{tmp _85hotwsCta0JfYIjI4PVl}#
              ($sc-dispatch
                #{x _85hotwsCta0JfYIjI4PVj}#
                '(_ each-any . #(each ((any . any) any))))))
        (if #{tmp _85hotwsCta0JfYIjI4PVl}#
          (@apply
            (lambda (#{k _85hotwsCta0JfYIjI4PVp}#
                     #{keyword _85hotwsCta0JfYIjI4PVq}#
                     #{pattern _85hotwsCta0JfYIjI4PVr}#
                     #{template _85hotwsCta0JfYIjI4PVs}#)
              (list '#(syntax-object
                       lambda
                       ((top)
                        #(ribcage
                          #(k keyword pattern template)
                          #((top) (top) (top) (top))
                          #("2zx" "2zy" "2zz" "300"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("2zw")))
                       (hygiene guile))
                    '(#(syntax-object
                        x
                        ((top)
                         #(ribcage
                           #(k keyword pattern template)
                           #((top) (top) (top) (top))
                           #("2zx" "2zy" "2zz" "300"))
                         #(ribcage () () ())
                         #(ribcage #(x) #((top)) #("2zw")))
                        (hygiene guile)))
                    (vector
                      '(#(syntax-object
                          macro-type
                          ((top)
                           #(ribcage
                             #(k keyword pattern template)
                             #((top) (top) (top) (top))
                             #("2zx" "2zy" "2zz" "300"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("2zw")))
                          (hygiene guile))
                        .
                        #(syntax-object
                          syntax-rules
                          ((top)
                           #(ribcage
                             #(k keyword pattern template)
                             #((top) (top) (top) (top))
                             #("2zx" "2zy" "2zz" "300"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("2zw")))
                          (hygiene guile)))
                      (cons '#(syntax-object
                               patterns
                               ((top)
                                #(ribcage
                                  #(k keyword pattern template)
                                  #((top) (top) (top) (top))
                                  #("2zx" "2zy" "2zz" "300"))
                                #(ribcage () () ())
                                #(ribcage #(x) #((top)) #("2zw")))
                               (hygiene guile))
                            #{pattern _85hotwsCta0JfYIjI4PVr}#))
                    (cons '#(syntax-object
                             syntax-case
                             ((top)
                              #(ribcage
                                #(k keyword pattern template)
                                #((top) (top) (top) (top))
                                #("2zx" "2zy" "2zz" "300"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("2zw")))
                             (hygiene guile))
                          (cons '#(syntax-object
                                   x
                                   ((top)
                                    #(ribcage
                                      #(k keyword pattern template)
                                      #((top) (top) (top) (top))
                                      #("2zx" "2zy" "2zz" "300"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("2zw")))
                                   (hygiene guile))
                                (cons #{k _85hotwsCta0JfYIjI4PVp}#
                                      (map (lambda (#{tmp _85hotwsCta0JfYIjI4PVT _85hotwsCta0JfYIjI4PVt}#
                                                    #{tmp _85hotwsCta0JfYIjI4PVS _85hotwsCta0JfYIjI4PVu}#)
                                             (list (cons '#(syntax-object
                                                            dummy
                                                            ((top)
                                                             #(ribcage
                                                               #(k
                                                                 keyword
                                                                 pattern
                                                                 template)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("2zx"
                                                                 "2zy"
                                                                 "2zz"
                                                                 "300"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("2zw")))
                                                            (hygiene guile))
                                                         #{tmp _85hotwsCta0JfYIjI4PVS _85hotwsCta0JfYIjI4PVu}#)
                                                   (list '#(syntax-object
                                                            syntax
                                                            ((top)
                                                             #(ribcage
                                                               #(k
                                                                 keyword
                                                                 pattern
                                                                 template)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("2zx"
                                                                 "2zy"
                                                                 "2zz"
                                                                 "300"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("2zw")))
                                                            (hygiene guile))
                                                         #{tmp _85hotwsCta0JfYIjI4PVT _85hotwsCta0JfYIjI4PVt}#)))
                                           #{template _85hotwsCta0JfYIjI4PVs}#
                                           #{pattern _85hotwsCta0JfYIjI4PVr}#))))))
            #{tmp _85hotwsCta0JfYIjI4PVl}#)
          (let ((#{tmp _85hotwsCta0JfYIjI4PVv}#
                  ($sc-dispatch
                    #{x _85hotwsCta0JfYIjI4PVj}#
                    '(_ each-any any . #(each ((any . any) any))))))
            (if (if #{tmp _85hotwsCta0JfYIjI4PVv}#
                  (@apply
                    (lambda (#{k _85hotwsCta0JfYIjI4PVz}#
                             #{docstring _85hotwsCta0JfYIjI4PV0}#
                             #{keyword _85hotwsCta0JfYIjI4PV1}#
                             #{pattern _85hotwsCta0JfYIjI4PV2}#
                             #{template _85hotwsCta0JfYIjI4PV3}#)
                      (string?
                        (syntax->datum
                          #{docstring _85hotwsCta0JfYIjI4PV0}#)))
                    #{tmp _85hotwsCta0JfYIjI4PVv}#)
                  #f)
              (@apply
                (lambda (#{k _85hotwsCta0JfYIjI4PV4}#
                         #{docstring _85hotwsCta0JfYIjI4PV5}#
                         #{keyword _85hotwsCta0JfYIjI4PV6}#
                         #{pattern _85hotwsCta0JfYIjI4PV7}#
                         #{template _85hotwsCta0JfYIjI4PV8}#)
                  (list '#(syntax-object
                           lambda
                           ((top)
                            #(ribcage
                              #(k docstring keyword pattern template)
                              #((top) (top) (top) (top) (top))
                              #("306" "307" "308" "309" "30a"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("2zw")))
                           (hygiene guile))
                        '(#(syntax-object
                            x
                            ((top)
                             #(ribcage
                               #(k docstring keyword pattern template)
                               #((top) (top) (top) (top) (top))
                               #("306" "307" "308" "309" "30a"))
                             #(ribcage () () ())
                             #(ribcage #(x) #((top)) #("2zw")))
                            (hygiene guile)))
                        #{docstring _85hotwsCta0JfYIjI4PV5}#
                        (vector
                          '(#(syntax-object
                              macro-type
                              ((top)
                               #(ribcage
                                 #(k docstring keyword pattern template)
                                 #((top) (top) (top) (top) (top))
                                 #("306" "307" "308" "309" "30a"))
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("2zw")))
                              (hygiene guile))
                            .
                            #(syntax-object
                              syntax-rules
                              ((top)
                               #(ribcage
                                 #(k docstring keyword pattern template)
                                 #((top) (top) (top) (top) (top))
                                 #("306" "307" "308" "309" "30a"))
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("2zw")))
                              (hygiene guile)))
                          (cons '#(syntax-object
                                   patterns
                                   ((top)
                                    #(ribcage
                                      #(k docstring keyword pattern template)
                                      #((top) (top) (top) (top) (top))
                                      #("306" "307" "308" "309" "30a"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("2zw")))
                                   (hygiene guile))
                                #{pattern _85hotwsCta0JfYIjI4PV7}#))
                        (cons '#(syntax-object
                                 syntax-case
                                 ((top)
                                  #(ribcage
                                    #(k docstring keyword pattern template)
                                    #((top) (top) (top) (top) (top))
                                    #("306" "307" "308" "309" "30a"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("2zw")))
                                 (hygiene guile))
                              (cons '#(syntax-object
                                       x
                                       ((top)
                                        #(ribcage
                                          #(k
                                            docstring
                                            keyword
                                            pattern
                                            template)
                                          #((top) (top) (top) (top) (top))
                                          #("306" "307" "308" "309" "30a"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("2zw")))
                                       (hygiene guile))
                                    (cons #{k _85hotwsCta0JfYIjI4PV4}#
                                          (map (lambda (#{tmp _85hotwsCta0JfYIjI4PVi _85hotwsCta0JfYIjI4PV9}#
                                                        #{tmp _85hotwsCta0JfYIjI4PVh _85hotwsCta0JfYIjI4PV$}#)
                                                 (list (cons '#(syntax-object
                                                                dummy
                                                                ((top)
                                                                 #(ribcage
                                                                   #(k
                                                                     docstring
                                                                     keyword
                                                                     pattern
                                                                     template)
                                                                   #((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                   #("306"
                                                                     "307"
                                                                     "308"
                                                                     "309"
                                                                     "30a"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("2zw")))
                                                                (hygiene
                                                                  guile))
                                                             #{tmp _85hotwsCta0JfYIjI4PVh _85hotwsCta0JfYIjI4PV$}#)
                                                       (list '#(syntax-object
                                                                syntax
                                                                ((top)
                                                                 #(ribcage
                                                                   #(k
                                                                     docstring
                                                                     keyword
                                                                     pattern
                                                                     template)
                                                                   #((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                   #("306"
                                                                     "307"
                                                                     "308"
                                                                     "309"
                                                                     "30a"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("2zw")))
                                                                (hygiene
                                                                  guile))
                                                             #{tmp _85hotwsCta0JfYIjI4PVi _85hotwsCta0JfYIjI4PV9}#)))
                                               #{template _85hotwsCta0JfYIjI4PV8}#
                                               #{pattern _85hotwsCta0JfYIjI4PV7}#))))))
                #{tmp _85hotwsCta0JfYIjI4PVv}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{x _85hotwsCta0JfYIjI4PVj}#))))))))

(define define-syntax-rule
  (make-syntax-transformer
    'define-syntax-rule
    'macro
    (lambda (#{x _85hotwsCta0JfYIjI4PWX}#)
      (let ((#{tmp _85hotwsCta0JfYIjI4PWZ}#
              ($sc-dispatch
                #{x _85hotwsCta0JfYIjI4PWX}#
                '(_ (any . any) any))))
        (if #{tmp _85hotwsCta0JfYIjI4PWZ}#
          (@apply
            (lambda (#{name _85hotwsCta0JfYIjI4PWd}#
                     #{pattern _85hotwsCta0JfYIjI4PWe}#
                     #{template _85hotwsCta0JfYIjI4PWf}#)
              (list '#(syntax-object
                       define-syntax
                       ((top)
                        #(ribcage
                          #(name pattern template)
                          #((top) (top) (top))
                          #("30c" "30d" "30e"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("30b")))
                       (hygiene guile))
                    #{name _85hotwsCta0JfYIjI4PWd}#
                    (list '#(syntax-object
                             syntax-rules
                             ((top)
                              #(ribcage
                                #(name pattern template)
                                #((top) (top) (top))
                                #("30c" "30d" "30e"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("30b")))
                             (hygiene guile))
                          '()
                          (list (cons '#(syntax-object
                                         _
                                         ((top)
                                          #(ribcage
                                            #(name pattern template)
                                            #((top) (top) (top))
                                            #("30c" "30d" "30e"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("30b")))
                                         (hygiene guile))
                                      #{pattern _85hotwsCta0JfYIjI4PWe}#)
                                #{template _85hotwsCta0JfYIjI4PWf}#))))
            #{tmp _85hotwsCta0JfYIjI4PWZ}#)
          (let ((#{tmp _85hotwsCta0JfYIjI4PWg}#
                  ($sc-dispatch
                    #{x _85hotwsCta0JfYIjI4PWX}#
                    '(_ (any . any) any any))))
            (if (if #{tmp _85hotwsCta0JfYIjI4PWg}#
                  (@apply
                    (lambda (#{name _85hotwsCta0JfYIjI4PWk}#
                             #{pattern _85hotwsCta0JfYIjI4PWl}#
                             #{docstring _85hotwsCta0JfYIjI4PWm}#
                             #{template _85hotwsCta0JfYIjI4PWn}#)
                      (string?
                        (syntax->datum
                          #{docstring _85hotwsCta0JfYIjI4PWm}#)))
                    #{tmp _85hotwsCta0JfYIjI4PWg}#)
                  #f)
              (@apply
                (lambda (#{name _85hotwsCta0JfYIjI4PWo}#
                         #{pattern _85hotwsCta0JfYIjI4PWp}#
                         #{docstring _85hotwsCta0JfYIjI4PWq}#
                         #{template _85hotwsCta0JfYIjI4PWr}#)
                  (list '#(syntax-object
                           define-syntax
                           ((top)
                            #(ribcage
                              #(name pattern docstring template)
                              #((top) (top) (top) (top))
                              #("30j" "30k" "30l" "30m"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("30b")))
                           (hygiene guile))
                        #{name _85hotwsCta0JfYIjI4PWo}#
                        (list '#(syntax-object
                                 syntax-rules
                                 ((top)
                                  #(ribcage
                                    #(name pattern docstring template)
                                    #((top) (top) (top) (top))
                                    #("30j" "30k" "30l" "30m"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("30b")))
                                 (hygiene guile))
                              '()
                              #{docstring _85hotwsCta0JfYIjI4PWq}#
                              (list (cons '#(syntax-object
                                             _
                                             ((top)
                                              #(ribcage
                                                #(name
                                                  pattern
                                                  docstring
                                                  template)
                                                #((top) (top) (top) (top))
                                                #("30j" "30k" "30l" "30m"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(x)
                                                #((top))
                                                #("30b")))
                                             (hygiene guile))
                                          #{pattern _85hotwsCta0JfYIjI4PWp}#)
                                    #{template _85hotwsCta0JfYIjI4PWr}#))))
                #{tmp _85hotwsCta0JfYIjI4PWg}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{x _85hotwsCta0JfYIjI4PWX}#))))))))

(define let*
  (make-syntax-transformer
    'let*
    'macro
    (lambda (#{x _85hotwsCta0JfYIjI4PXN}#)
      (let ((#{tmp _85hotwsCta0JfYIjI4PXP}#
              ($sc-dispatch
                #{x _85hotwsCta0JfYIjI4PXN}#
                '(any #(each (any any)) any . each-any))))
        (if (if #{tmp _85hotwsCta0JfYIjI4PXP}#
              (@apply
                (lambda (#{let* _85hotwsCta0JfYIjI4PXT}#
                         #{x _85hotwsCta0JfYIjI4PXU}#
                         #{v _85hotwsCta0JfYIjI4PXV}#
                         #{e1 _85hotwsCta0JfYIjI4PXW}#
                         #{e2 _85hotwsCta0JfYIjI4PXX}#)
                  (and-map
                    identifier?
                    #{x _85hotwsCta0JfYIjI4PXU}#))
                #{tmp _85hotwsCta0JfYIjI4PXP}#)
              #f)
          (@apply
            (lambda (#{let* _85hotwsCta0JfYIjI4PXY}#
                     #{x _85hotwsCta0JfYIjI4PXZ}#
                     #{v _85hotwsCta0JfYIjI4PXa}#
                     #{e1 _85hotwsCta0JfYIjI4PXb}#
                     #{e2 _85hotwsCta0JfYIjI4PXc}#)
              (letrec*
                ((#{f _85hotwsCta0JfYIjI4PXd}#
                   (lambda (#{bindings _85hotwsCta0JfYIjI4PXg}#)
                     (if (null? #{bindings _85hotwsCta0JfYIjI4PXg}#)
                       (cons '#(syntax-object
                                let
                                ((top)
                                 #(ribcage () () ())
                                 #(ribcage
                                   #(f bindings)
                                   #((top) (top))
                                   #("30y" "30z"))
                                 #(ribcage
                                   #(let* x v e1 e2)
                                   #((top) (top) (top) (top) (top))
                                   #("30t" "30u" "30v" "30w" "30x"))
                                 #(ribcage () () ())
                                 #(ribcage #(x) #((top)) #("30n")))
                                (hygiene guile))
                             (cons '()
                                   (cons #{e1 _85hotwsCta0JfYIjI4PXb}#
                                         #{e2 _85hotwsCta0JfYIjI4PXc}#)))
                       (let ((#{tmp _85hotwsCta0JfYIjI4PXh}#
                               (list (#{f _85hotwsCta0JfYIjI4PXd}#
                                       (cdr #{bindings _85hotwsCta0JfYIjI4PXg}#))
                                     (car #{bindings _85hotwsCta0JfYIjI4PXg}#))))
                         (let ((#{tmp _85hotwsCta0JfYIjI4PXi}#
                                 ($sc-dispatch
                                   #{tmp _85hotwsCta0JfYIjI4PXh}#
                                   '(any any))))
                           (if #{tmp _85hotwsCta0JfYIjI4PXi}#
                             (@apply
                               (lambda (#{body _85hotwsCta0JfYIjI4PXk}#
                                        #{binding _85hotwsCta0JfYIjI4PXl}#)
                                 (list '#(syntax-object
                                          let
                                          ((top)
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(body binding)
                                             #((top) (top))
                                             #("310" "311"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(f bindings)
                                             #((top) (top))
                                             #("30y" "30z"))
                                           #(ribcage
                                             #(let* x v e1 e2)
                                             #((top) (top) (top) (top) (top))
                                             #("30t" "30u" "30v" "30w" "30x"))
                                           #(ribcage () () ())
                                           #(ribcage #(x) #((top)) #("30n")))
                                          (hygiene guile))
                                       (list #{binding _85hotwsCta0JfYIjI4PXl}#)
                                       #{body _85hotwsCta0JfYIjI4PXk}#))
                               #{tmp _85hotwsCta0JfYIjI4PXi}#)
                             (syntax-violation
                               #f
                               "source expression failed to match any pattern"
                               #{tmp _85hotwsCta0JfYIjI4PXh}#))))))))
                (#{f _85hotwsCta0JfYIjI4PXd}#
                  (map list
                       #{x _85hotwsCta0JfYIjI4PXZ}#
                       #{v _85hotwsCta0JfYIjI4PXa}#))))
            #{tmp _85hotwsCta0JfYIjI4PXP}#)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            #{x _85hotwsCta0JfYIjI4PXN}#))))))

(define do
  (make-syntax-transformer
    'do
    'macro
    (lambda (#{orig-x _85hotwsCta0JfYIjI4PYR}#)
      (let ((#{tmp _85hotwsCta0JfYIjI4PYT}#
              ($sc-dispatch
                #{orig-x _85hotwsCta0JfYIjI4PYR}#
                '(_ #(each (any any . any))
                    (any . each-any)
                    .
                    each-any))))
        (if #{tmp _85hotwsCta0JfYIjI4PYT}#
          (@apply
            (lambda (#{var _85hotwsCta0JfYIjI4PYX}#
                     #{init _85hotwsCta0JfYIjI4PYY}#
                     #{step _85hotwsCta0JfYIjI4PYZ}#
                     #{e0 _85hotwsCta0JfYIjI4PYa}#
                     #{e1 _85hotwsCta0JfYIjI4PYb}#
                     #{c _85hotwsCta0JfYIjI4PYc}#)
              (let ((#{tmp _85hotwsCta0JfYIjI4PYd}#
                      (map (lambda (#{v _85hotwsCta0JfYIjI4PYg}#
                                    #{s _85hotwsCta0JfYIjI4PYh}#)
                             (let ((#{tmp _85hotwsCta0JfYIjI4PYj}#
                                     ($sc-dispatch
                                       #{s _85hotwsCta0JfYIjI4PYh}#
                                       '())))
                               (if #{tmp _85hotwsCta0JfYIjI4PYj}#
                                 (@apply
                                   (lambda () #{v _85hotwsCta0JfYIjI4PYg}#)
                                   #{tmp _85hotwsCta0JfYIjI4PYj}#)
                                 (let ((#{tmp _85hotwsCta0JfYIjI4PYm}#
                                         ($sc-dispatch
                                           #{s _85hotwsCta0JfYIjI4PYh}#
                                           '(any))))
                                   (if #{tmp _85hotwsCta0JfYIjI4PYm}#
                                     (@apply
                                       (lambda (#{e _85hotwsCta0JfYIjI4PYp}#)
                                         #{e _85hotwsCta0JfYIjI4PYp}#)
                                       #{tmp _85hotwsCta0JfYIjI4PYm}#)
                                     (syntax-violation
                                       'do
                                       "bad step expression"
                                       #{orig-x _85hotwsCta0JfYIjI4PYR}#
                                       #{s _85hotwsCta0JfYIjI4PYh}#))))))
                           #{var _85hotwsCta0JfYIjI4PYX}#
                           #{step _85hotwsCta0JfYIjI4PYZ}#)))
                (let ((#{tmp _85hotwsCta0JfYIjI4PYe}#
                        ($sc-dispatch
                          #{tmp _85hotwsCta0JfYIjI4PYd}#
                          'each-any)))
                  (if #{tmp _85hotwsCta0JfYIjI4PYe}#
                    (@apply
                      (lambda (#{step _85hotwsCta0JfYIjI4PYv}#)
                        (let ((#{tmp _85hotwsCta0JfYIjI4PYx}#
                                ($sc-dispatch
                                  #{e1 _85hotwsCta0JfYIjI4PYb}#
                                  '())))
                          (if #{tmp _85hotwsCta0JfYIjI4PYx}#
                            (@apply
                              (lambda ()
                                (list '#(syntax-object
                                         let
                                         ((top)
                                          #(ribcage () () ())
                                          #(ribcage #(step) #((top)) #("319"))
                                          #(ribcage
                                            #(var init step e0 e1 c)
                                            #((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                            #("313"
                                              "314"
                                              "315"
                                              "316"
                                              "317"
                                              "318"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(orig-x)
                                            #((top))
                                            #("312")))
                                         (hygiene guile))
                                      '#(syntax-object
                                         doloop
                                         ((top)
                                          #(ribcage () () ())
                                          #(ribcage #(step) #((top)) #("319"))
                                          #(ribcage
                                            #(var init step e0 e1 c)
                                            #((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                            #("313"
                                              "314"
                                              "315"
                                              "316"
                                              "317"
                                              "318"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(orig-x)
                                            #((top))
                                            #("312")))
                                         (hygiene guile))
                                      (map list
                                           #{var _85hotwsCta0JfYIjI4PYX}#
                                           #{init _85hotwsCta0JfYIjI4PYY}#)
                                      (list '#(syntax-object
                                               if
                                               ((top)
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(step)
                                                  #((top))
                                                  #("319"))
                                                #(ribcage
                                                  #(var init step e0 e1 c)
                                                  #((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                  #("313"
                                                    "314"
                                                    "315"
                                                    "316"
                                                    "317"
                                                    "318"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(orig-x)
                                                  #((top))
                                                  #("312")))
                                               (hygiene guile))
                                            (list '#(syntax-object
                                                     not
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(step)
                                                        #((top))
                                                        #("319"))
                                                      #(ribcage
                                                        #(var
                                                          init
                                                          step
                                                          e0
                                                          e1
                                                          c)
                                                        #((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                        #("313"
                                                          "314"
                                                          "315"
                                                          "316"
                                                          "317"
                                                          "318"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(orig-x)
                                                        #((top))
                                                        #("312")))
                                                     (hygiene guile))
                                                  #{e0 _85hotwsCta0JfYIjI4PYa}#)
                                            (cons '#(syntax-object
                                                     begin
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(step)
                                                        #((top))
                                                        #("319"))
                                                      #(ribcage
                                                        #(var
                                                          init
                                                          step
                                                          e0
                                                          e1
                                                          c)
                                                        #((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                        #("313"
                                                          "314"
                                                          "315"
                                                          "316"
                                                          "317"
                                                          "318"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(orig-x)
                                                        #((top))
                                                        #("312")))
                                                     (hygiene guile))
                                                  (append
                                                    #{c _85hotwsCta0JfYIjI4PYc}#
                                                    (list (cons '#(syntax-object
                                                                   doloop
                                                                   ((top)
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(step)
                                                                      #((top))
                                                                      #("319"))
                                                                    #(ribcage
                                                                      #(var
                                                                        init
                                                                        step
                                                                        e0
                                                                        e1
                                                                        c)
                                                                      #((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                      #("313"
                                                                        "314"
                                                                        "315"
                                                                        "316"
                                                                        "317"
                                                                        "318"))
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(orig-x)
                                                                      #((top))
                                                                      #("312")))
                                                                   (hygiene
                                                                     guile))
                                                                #{step _85hotwsCta0JfYIjI4PYv}#)))))))
                              #{tmp _85hotwsCta0JfYIjI4PYx}#)
                            (let ((#{tmp _85hotwsCta0JfYIjI4PY1}#
                                    ($sc-dispatch
                                      #{e1 _85hotwsCta0JfYIjI4PYb}#
                                      '(any . each-any))))
                              (if #{tmp _85hotwsCta0JfYIjI4PY1}#
                                (@apply
                                  (lambda (#{e1 _85hotwsCta0JfYIjI4PY5}#
                                           #{e2 _85hotwsCta0JfYIjI4PY6}#)
                                    (list '#(syntax-object
                                             let
                                             ((top)
                                              #(ribcage
                                                #(e1 e2)
                                                #((top) (top))
                                                #("31a" "31b"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(step)
                                                #((top))
                                                #("319"))
                                              #(ribcage
                                                #(var init step e0 e1 c)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("313"
                                                  "314"
                                                  "315"
                                                  "316"
                                                  "317"
                                                  "318"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(orig-x)
                                                #((top))
                                                #("312")))
                                             (hygiene guile))
                                          '#(syntax-object
                                             doloop
                                             ((top)
                                              #(ribcage
                                                #(e1 e2)
                                                #((top) (top))
                                                #("31a" "31b"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(step)
                                                #((top))
                                                #("319"))
                                              #(ribcage
                                                #(var init step e0 e1 c)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("313"
                                                  "314"
                                                  "315"
                                                  "316"
                                                  "317"
                                                  "318"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(orig-x)
                                                #((top))
                                                #("312")))
                                             (hygiene guile))
                                          (map list
                                               #{var _85hotwsCta0JfYIjI4PYX}#
                                               #{init _85hotwsCta0JfYIjI4PYY}#)
                                          (list '#(syntax-object
                                                   if
                                                   ((top)
                                                    #(ribcage
                                                      #(e1 e2)
                                                      #((top) (top))
                                                      #("31a" "31b"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(step)
                                                      #((top))
                                                      #("319"))
                                                    #(ribcage
                                                      #(var init step e0 e1 c)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("313"
                                                        "314"
                                                        "315"
                                                        "316"
                                                        "317"
                                                        "318"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(orig-x)
                                                      #((top))
                                                      #("312")))
                                                   (hygiene guile))
                                                #{e0 _85hotwsCta0JfYIjI4PYa}#
                                                (cons '#(syntax-object
                                                         begin
                                                         ((top)
                                                          #(ribcage
                                                            #(e1 e2)
                                                            #((top) (top))
                                                            #("31a" "31b"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(step)
                                                            #((top))
                                                            #("319"))
                                                          #(ribcage
                                                            #(var
                                                              init
                                                              step
                                                              e0
                                                              e1
                                                              c)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("313"
                                                              "314"
                                                              "315"
                                                              "316"
                                                              "317"
                                                              "318"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(orig-x)
                                                            #((top))
                                                            #("312")))
                                                         (hygiene guile))
                                                      (cons #{e1 _85hotwsCta0JfYIjI4PY5}#
                                                            #{e2 _85hotwsCta0JfYIjI4PY6}#))
                                                (cons '#(syntax-object
                                                         begin
                                                         ((top)
                                                          #(ribcage
                                                            #(e1 e2)
                                                            #((top) (top))
                                                            #("31a" "31b"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(step)
                                                            #((top))
                                                            #("319"))
                                                          #(ribcage
                                                            #(var
                                                              init
                                                              step
                                                              e0
                                                              e1
                                                              c)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("313"
                                                              "314"
                                                              "315"
                                                              "316"
                                                              "317"
                                                              "318"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(orig-x)
                                                            #((top))
                                                            #("312")))
                                                         (hygiene guile))
                                                      (append
                                                        #{c _85hotwsCta0JfYIjI4PYc}#
                                                        (list (cons '#(syntax-object
                                                                       doloop
                                                                       ((top)
                                                                        #(ribcage
                                                                          #(e1
                                                                            e2)
                                                                          #((top)
                                                                            (top))
                                                                          #("31a"
                                                                            "31b"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(step)
                                                                          #((top))
                                                                          #("319"))
                                                                        #(ribcage
                                                                          #(var
                                                                            init
                                                                            step
                                                                            e0
                                                                            e1
                                                                            c)
                                                                          #((top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top))
                                                                          #("313"
                                                                            "314"
                                                                            "315"
                                                                            "316"
                                                                            "317"
                                                                            "318"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(orig-x)
                                                                          #((top))
                                                                          #("312")))
                                                                       (hygiene
                                                                         guile))
                                                                    #{step _85hotwsCta0JfYIjI4PYv}#)))))))
                                  #{tmp _85hotwsCta0JfYIjI4PY1}#)
                                (syntax-violation
                                  #f
                                  "source expression failed to match any pattern"
                                  #{e1 _85hotwsCta0JfYIjI4PYb}#))))))
                      #{tmp _85hotwsCta0JfYIjI4PYe}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp _85hotwsCta0JfYIjI4PYd}#)))))
            #{tmp _85hotwsCta0JfYIjI4PYT}#)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            #{orig-x _85hotwsCta0JfYIjI4PYR}#))))))

(define quasiquote
  (make-syntax-transformer
    'quasiquote
    'macro
    (letrec*
      ((#{quasi _85hotwsCta0JfYIjI4PcJ}#
         (lambda (#{p _85hotwsCta0JfYIjI4Pch}#
                  #{lev _85hotwsCta0JfYIjI4Pci}#)
           (let ((#{tmp _85hotwsCta0JfYIjI4Pck}#
                   ($sc-dispatch
                     #{p _85hotwsCta0JfYIjI4Pch}#
                     '(#(free-id
                         #(syntax-object
                           unquote
                           ((top)
                            #(ribcage () () ())
                            #(ribcage #(p lev) #((top) (top)) #("31n" "31o"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("31m" "31l" "31k" "31j" "31i" "31h" "31g")))
                           (hygiene guile)))
                       any))))
             (if #{tmp _85hotwsCta0JfYIjI4Pck}#
               (@apply
                 (lambda (#{p _85hotwsCta0JfYIjI4Pco}#)
                   (if (= #{lev _85hotwsCta0JfYIjI4Pci}# 0)
                     (list '#(syntax-object
                              "value"
                              ((top)
                               #(ribcage #(p) #((top)) #("31p"))
                               #(ribcage () () ())
                               #(ribcage
                                 #(p lev)
                                 #((top) (top))
                                 #("31n" "31o"))
                               #(ribcage
                                 (emit quasivector
                                       quasilist*
                                       quasiappend
                                       quasicons
                                       vquasi
                                       quasi)
                                 ((top) (top) (top) (top) (top) (top) (top))
                                 ("31m" "31l" "31k" "31j" "31i" "31h" "31g")))
                              (hygiene guile))
                           #{p _85hotwsCta0JfYIjI4Pco}#)
                     (#{quasicons _85hotwsCta0JfYIjI4PcL}#
                       '(#(syntax-object
                           "quote"
                           ((top)
                            #(ribcage #(p) #((top)) #("31p"))
                            #(ribcage () () ())
                            #(ribcage #(p lev) #((top) (top)) #("31n" "31o"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("31m" "31l" "31k" "31j" "31i" "31h" "31g")))
                           (hygiene guile))
                         #(syntax-object
                           unquote
                           ((top)
                            #(ribcage #(p) #((top)) #("31p"))
                            #(ribcage () () ())
                            #(ribcage #(p lev) #((top) (top)) #("31n" "31o"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("31m" "31l" "31k" "31j" "31i" "31h" "31g")))
                           (hygiene guile)))
                       (#{quasi _85hotwsCta0JfYIjI4PcJ}#
                         (list #{p _85hotwsCta0JfYIjI4Pco}#)
                         (#{1-}# #{lev _85hotwsCta0JfYIjI4Pci}#)))))
                 #{tmp _85hotwsCta0JfYIjI4Pck}#)
               (let ((#{tmp _85hotwsCta0JfYIjI4Pcr}#
                       ($sc-dispatch
                         #{p _85hotwsCta0JfYIjI4Pch}#
                         '(#(free-id
                             #(syntax-object
                               quasiquote
                               ((top)
                                #(ribcage () () ())
                                #(ribcage
                                  #(p lev)
                                  #((top) (top))
                                  #("31n" "31o"))
                                #(ribcage
                                  (emit quasivector
                                        quasilist*
                                        quasiappend
                                        quasicons
                                        vquasi
                                        quasi)
                                  ((top) (top) (top) (top) (top) (top) (top))
                                  ("31m" "31l" "31k" "31j" "31i" "31h" "31g")))
                               (hygiene guile)))
                           any))))
                 (if #{tmp _85hotwsCta0JfYIjI4Pcr}#
                   (@apply
                     (lambda (#{p _85hotwsCta0JfYIjI4Pcv}#)
                       (#{quasicons _85hotwsCta0JfYIjI4PcL}#
                         '(#(syntax-object
                             "quote"
                             ((top)
                              #(ribcage #(p) #((top)) #("31q"))
                              #(ribcage () () ())
                              #(ribcage #(p lev) #((top) (top)) #("31n" "31o"))
                              #(ribcage
                                (emit quasivector
                                      quasilist*
                                      quasiappend
                                      quasicons
                                      vquasi
                                      quasi)
                                ((top) (top) (top) (top) (top) (top) (top))
                                ("31m" "31l" "31k" "31j" "31i" "31h" "31g")))
                             (hygiene guile))
                           #(syntax-object
                             quasiquote
                             ((top)
                              #(ribcage #(p) #((top)) #("31q"))
                              #(ribcage () () ())
                              #(ribcage #(p lev) #((top) (top)) #("31n" "31o"))
                              #(ribcage
                                (emit quasivector
                                      quasilist*
                                      quasiappend
                                      quasicons
                                      vquasi
                                      quasi)
                                ((top) (top) (top) (top) (top) (top) (top))
                                ("31m" "31l" "31k" "31j" "31i" "31h" "31g")))
                             (hygiene guile)))
                         (#{quasi _85hotwsCta0JfYIjI4PcJ}#
                           (list #{p _85hotwsCta0JfYIjI4Pcv}#)
                           (#{1+}# #{lev _85hotwsCta0JfYIjI4Pci}#))))
                     #{tmp _85hotwsCta0JfYIjI4Pcr}#)
                   (let ((#{tmp _85hotwsCta0JfYIjI4Pcy}#
                           ($sc-dispatch
                             #{p _85hotwsCta0JfYIjI4Pch}#
                             '(any . any))))
                     (if #{tmp _85hotwsCta0JfYIjI4Pcy}#
                       (@apply
                         (lambda (#{p _85hotwsCta0JfYIjI4Pc2}#
                                  #{q _85hotwsCta0JfYIjI4Pc3}#)
                           (let ((#{tmp _85hotwsCta0JfYIjI4Pc5}#
                                   ($sc-dispatch
                                     #{p _85hotwsCta0JfYIjI4Pc2}#
                                     '(#(free-id
                                         #(syntax-object
                                           unquote
                                           ((top)
                                            #(ribcage
                                              #(p q)
                                              #((top) (top))
                                              #("31r" "31s"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(p lev)
                                              #((top) (top))
                                              #("31n" "31o"))
                                            #(ribcage
                                              (emit quasivector
                                                    quasilist*
                                                    quasiappend
                                                    quasicons
                                                    vquasi
                                                    quasi)
                                              ((top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top))
                                              ("31m"
                                               "31l"
                                               "31k"
                                               "31j"
                                               "31i"
                                               "31h"
                                               "31g")))
                                           (hygiene guile)))
                                       .
                                       each-any))))
                             (if #{tmp _85hotwsCta0JfYIjI4Pc5}#
                               (@apply
                                 (lambda (#{p _85hotwsCta0JfYIjI4Pc9}#)
                                   (if (= #{lev _85hotwsCta0JfYIjI4Pci}# 0)
                                     (#{quasilist* _85hotwsCta0JfYIjI4PcN}#
                                       (map (lambda (#{tmp _85hotwsCta0JfYIjI4PZe _85hotwsCta0JfYIjI4Pdh}#)
                                              (list '#(syntax-object
                                                       "value"
                                                       ((top)
                                                        #(ribcage
                                                          #(p)
                                                          #((top))
                                                          #("31t"))
                                                        #(ribcage
                                                          #(p q)
                                                          #((top) (top))
                                                          #("31r" "31s"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(p lev)
                                                          #((top) (top))
                                                          #("31n" "31o"))
                                                        #(ribcage
                                                          (emit quasivector
                                                                quasilist*
                                                                quasiappend
                                                                quasicons
                                                                vquasi
                                                                quasi)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("31m"
                                                           "31l"
                                                           "31k"
                                                           "31j"
                                                           "31i"
                                                           "31h"
                                                           "31g")))
                                                       (hygiene guile))
                                                    #{tmp _85hotwsCta0JfYIjI4PZe _85hotwsCta0JfYIjI4Pdh}#))
                                            #{p _85hotwsCta0JfYIjI4Pc9}#)
                                       (#{quasi _85hotwsCta0JfYIjI4PcJ}#
                                         #{q _85hotwsCta0JfYIjI4Pc3}#
                                         #{lev _85hotwsCta0JfYIjI4Pci}#))
                                     (#{quasicons _85hotwsCta0JfYIjI4PcL}#
                                       (#{quasicons _85hotwsCta0JfYIjI4PcL}#
                                         '(#(syntax-object
                                             "quote"
                                             ((top)
                                              #(ribcage #(p) #((top)) #("31t"))
                                              #(ribcage
                                                #(p q)
                                                #((top) (top))
                                                #("31r" "31s"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(p lev)
                                                #((top) (top))
                                                #("31n" "31o"))
                                              #(ribcage
                                                (emit quasivector
                                                      quasilist*
                                                      quasiappend
                                                      quasicons
                                                      vquasi
                                                      quasi)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("31m"
                                                 "31l"
                                                 "31k"
                                                 "31j"
                                                 "31i"
                                                 "31h"
                                                 "31g")))
                                             (hygiene guile))
                                           #(syntax-object
                                             unquote
                                             ((top)
                                              #(ribcage #(p) #((top)) #("31t"))
                                              #(ribcage
                                                #(p q)
                                                #((top) (top))
                                                #("31r" "31s"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(p lev)
                                                #((top) (top))
                                                #("31n" "31o"))
                                              #(ribcage
                                                (emit quasivector
                                                      quasilist*
                                                      quasiappend
                                                      quasicons
                                                      vquasi
                                                      quasi)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("31m"
                                                 "31l"
                                                 "31k"
                                                 "31j"
                                                 "31i"
                                                 "31h"
                                                 "31g")))
                                             (hygiene guile)))
                                         (#{quasi _85hotwsCta0JfYIjI4PcJ}#
                                           #{p _85hotwsCta0JfYIjI4Pc9}#
                                           (#{1-}# #{lev _85hotwsCta0JfYIjI4Pci}#)))
                                       (#{quasi _85hotwsCta0JfYIjI4PcJ}#
                                         #{q _85hotwsCta0JfYIjI4Pc3}#
                                         #{lev _85hotwsCta0JfYIjI4Pci}#))))
                                 #{tmp _85hotwsCta0JfYIjI4Pc5}#)
                               (let ((#{tmp _85hotwsCta0JfYIjI4Pdm}#
                                       ($sc-dispatch
                                         #{p _85hotwsCta0JfYIjI4Pc2}#
                                         '(#(free-id
                                             #(syntax-object
                                               unquote-splicing
                                               ((top)
                                                #(ribcage
                                                  #(p q)
                                                  #((top) (top))
                                                  #("31r" "31s"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(p lev)
                                                  #((top) (top))
                                                  #("31n" "31o"))
                                                #(ribcage
                                                  (emit quasivector
                                                        quasilist*
                                                        quasiappend
                                                        quasicons
                                                        vquasi
                                                        quasi)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("31m"
                                                   "31l"
                                                   "31k"
                                                   "31j"
                                                   "31i"
                                                   "31h"
                                                   "31g")))
                                               (hygiene guile)))
                                           .
                                           each-any))))
                                 (if #{tmp _85hotwsCta0JfYIjI4Pdm}#
                                   (@apply
                                     (lambda (#{p _85hotwsCta0JfYIjI4Pdq}#)
                                       (if (= #{lev _85hotwsCta0JfYIjI4Pci}# 0)
                                         (#{quasiappend _85hotwsCta0JfYIjI4PcM}#
                                           (map (lambda (#{tmp _85hotwsCta0JfYIjI4PZi _85hotwsCta0JfYIjI4Pdt}#)
                                                  (list '#(syntax-object
                                                           "value"
                                                           ((top)
                                                            #(ribcage
                                                              #(p)
                                                              #((top))
                                                              #("31u"))
                                                            #(ribcage
                                                              #(p q)
                                                              #((top) (top))
                                                              #("31r" "31s"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(p lev)
                                                              #((top) (top))
                                                              #("31n" "31o"))
                                                            #(ribcage
                                                              (emit quasivector
                                                                    quasilist*
                                                                    quasiappend
                                                                    quasicons
                                                                    vquasi
                                                                    quasi)
                                                              ((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                              ("31m"
                                                               "31l"
                                                               "31k"
                                                               "31j"
                                                               "31i"
                                                               "31h"
                                                               "31g")))
                                                           (hygiene guile))
                                                        #{tmp _85hotwsCta0JfYIjI4PZi _85hotwsCta0JfYIjI4Pdt}#))
                                                #{p _85hotwsCta0JfYIjI4Pdq}#)
                                           (#{quasi _85hotwsCta0JfYIjI4PcJ}#
                                             #{q _85hotwsCta0JfYIjI4Pc3}#
                                             #{lev _85hotwsCta0JfYIjI4Pci}#))
                                         (#{quasicons _85hotwsCta0JfYIjI4PcL}#
                                           (#{quasicons _85hotwsCta0JfYIjI4PcL}#
                                             '(#(syntax-object
                                                 "quote"
                                                 ((top)
                                                  #(ribcage
                                                    #(p)
                                                    #((top))
                                                    #("31u"))
                                                  #(ribcage
                                                    #(p q)
                                                    #((top) (top))
                                                    #("31r" "31s"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(p lev)
                                                    #((top) (top))
                                                    #("31n" "31o"))
                                                  #(ribcage
                                                    (emit quasivector
                                                          quasilist*
                                                          quasiappend
                                                          quasicons
                                                          vquasi
                                                          quasi)
                                                    ((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                    ("31m"
                                                     "31l"
                                                     "31k"
                                                     "31j"
                                                     "31i"
                                                     "31h"
                                                     "31g")))
                                                 (hygiene guile))
                                               #(syntax-object
                                                 unquote-splicing
                                                 ((top)
                                                  #(ribcage
                                                    #(p)
                                                    #((top))
                                                    #("31u"))
                                                  #(ribcage
                                                    #(p q)
                                                    #((top) (top))
                                                    #("31r" "31s"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(p lev)
                                                    #((top) (top))
                                                    #("31n" "31o"))
                                                  #(ribcage
                                                    (emit quasivector
                                                          quasilist*
                                                          quasiappend
                                                          quasicons
                                                          vquasi
                                                          quasi)
                                                    ((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                    ("31m"
                                                     "31l"
                                                     "31k"
                                                     "31j"
                                                     "31i"
                                                     "31h"
                                                     "31g")))
                                                 (hygiene guile)))
                                             (#{quasi _85hotwsCta0JfYIjI4PcJ}#
                                               #{p _85hotwsCta0JfYIjI4Pdq}#
                                               (#{1-}# #{lev _85hotwsCta0JfYIjI4Pci}#)))
                                           (#{quasi _85hotwsCta0JfYIjI4PcJ}#
                                             #{q _85hotwsCta0JfYIjI4Pc3}#
                                             #{lev _85hotwsCta0JfYIjI4Pci}#))))
                                     #{tmp _85hotwsCta0JfYIjI4Pdm}#)
                                   (#{quasicons _85hotwsCta0JfYIjI4PcL}#
                                     (#{quasi _85hotwsCta0JfYIjI4PcJ}#
                                       #{p _85hotwsCta0JfYIjI4Pc2}#
                                       #{lev _85hotwsCta0JfYIjI4Pci}#)
                                     (#{quasi _85hotwsCta0JfYIjI4PcJ}#
                                       #{q _85hotwsCta0JfYIjI4Pc3}#
                                       #{lev _85hotwsCta0JfYIjI4Pci}#)))))))
                         #{tmp _85hotwsCta0JfYIjI4Pcy}#)
                       (let ((#{tmp _85hotwsCta0JfYIjI4Pd7}#
                               ($sc-dispatch
                                 #{p _85hotwsCta0JfYIjI4Pch}#
                                 '#(vector each-any))))
                         (if #{tmp _85hotwsCta0JfYIjI4Pd7}#
                           (@apply
                             (lambda (#{x _85hotwsCta0JfYIjI4Pd@}#)
                               (let ((#{x _85hotwsCta0JfYIjI4PeC}#
                                       (#{vquasi _85hotwsCta0JfYIjI4PcK}#
                                         #{x _85hotwsCta0JfYIjI4Pd@}#
                                         #{lev _85hotwsCta0JfYIjI4Pci}#)))
                                 (let ((#{tmp _85hotwsCta0JfYIjI4PeE}#
                                         ($sc-dispatch
                                           #{x _85hotwsCta0JfYIjI4PeC}#
                                           '(#(atom "quote") each-any))))
                                   (if #{tmp _85hotwsCta0JfYIjI4PeE}#
                                     (@apply
                                       (lambda (#{x _85hotwsCta0JfYIjI4PeI}#)
                                         (list '#(syntax-object
                                                  "quote"
                                                  ((top)
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("32q"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("32p"))
                                                   #(ribcage
                                                     (emit quasivector
                                                           quasilist*
                                                           quasiappend
                                                           quasicons
                                                           vquasi
                                                           quasi)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("31m"
                                                      "31l"
                                                      "31k"
                                                      "31j"
                                                      "31i"
                                                      "31h"
                                                      "31g")))
                                                  (hygiene guile))
                                               (list->vector
                                                 #{x _85hotwsCta0JfYIjI4PeI}#)))
                                       #{tmp _85hotwsCta0JfYIjI4PeE}#)
                                     (letrec*
                                       ((#{f _85hotwsCta0JfYIjI4PeK}#
                                          (lambda (#{y _85hotwsCta0JfYIjI4PeW}#
                                                   #{k _85hotwsCta0JfYIjI4PeX}#)
                                            (let ((#{tmp _85hotwsCta0JfYIjI4PeZ}#
                                                    ($sc-dispatch
                                                      #{y _85hotwsCta0JfYIjI4PeW}#
                                                      '(#(atom "quote")
                                                        each-any))))
                                              (if #{tmp _85hotwsCta0JfYIjI4PeZ}#
                                                (@apply
                                                  (lambda (#{y _85hotwsCta0JfYIjI4Pec}#)
                                                    (#{k _85hotwsCta0JfYIjI4PeX}#
                                                      (map (lambda (#{tmp _85hotwsCta0JfYIjI4Pa9 _85hotwsCta0JfYIjI4Ped}#)
                                                             (list '#(syntax-object
                                                                      "quote"
                                                                      ((top)
                                                                       #(ribcage
                                                                         #(y)
                                                                         #((top))
                                                                         #("32x"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(f
                                                                           y
                                                                           k)
                                                                         #((top)
                                                                           (top)
                                                                           (top))
                                                                         #("32s"
                                                                           "32t"
                                                                           "32u"))
                                                                       #(ribcage
                                                                         #(_)
                                                                         #((top))
                                                                         #("32r"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(x)
                                                                         #((top))
                                                                         #("32p"))
                                                                       #(ribcage
                                                                         (emit quasivector
                                                                               quasilist*
                                                                               quasiappend
                                                                               quasicons
                                                                               vquasi
                                                                               quasi)
                                                                         ((top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top))
                                                                         ("31m"
                                                                          "31l"
                                                                          "31k"
                                                                          "31j"
                                                                          "31i"
                                                                          "31h"
                                                                          "31g")))
                                                                      (hygiene
                                                                        guile))
                                                                   #{tmp _85hotwsCta0JfYIjI4Pa9 _85hotwsCta0JfYIjI4Ped}#))
                                                           #{y _85hotwsCta0JfYIjI4Pec}#)))
                                                  #{tmp _85hotwsCta0JfYIjI4PeZ}#)
                                                (let ((#{tmp _85hotwsCta0JfYIjI4Pee}#
                                                        ($sc-dispatch
                                                          #{y _85hotwsCta0JfYIjI4PeW}#
                                                          '(#(atom "list")
                                                            .
                                                            each-any))))
                                                  (if #{tmp _85hotwsCta0JfYIjI4Pee}#
                                                    (@apply
                                                      (lambda (#{y _85hotwsCta0JfYIjI4Peh}#)
                                                        (#{k _85hotwsCta0JfYIjI4PeX}#
                                                          #{y _85hotwsCta0JfYIjI4Peh}#))
                                                      #{tmp _85hotwsCta0JfYIjI4Pee}#)
                                                    (let ((#{tmp _85hotwsCta0JfYIjI4Pei}#
                                                            ($sc-dispatch
                                                              #{y _85hotwsCta0JfYIjI4PeW}#
                                                              '(#(atom "list*")
                                                                .
                                                                #(each+
                                                                  any
                                                                  (any)
                                                                  ())))))
                                                      (if #{tmp _85hotwsCta0JfYIjI4Pei}#
                                                        (@apply
                                                          (lambda (#{y _85hotwsCta0JfYIjI4Pel}#
                                                                   #{z _85hotwsCta0JfYIjI4Pem}#)
                                                            (#{f _85hotwsCta0JfYIjI4PeK}#
                                                              #{z _85hotwsCta0JfYIjI4Pem}#
                                                              (lambda (#{ls _85hotwsCta0JfYIjI4Pen}#)
                                                                (#{k _85hotwsCta0JfYIjI4PeX}#
                                                                  (append
                                                                    #{y _85hotwsCta0JfYIjI4Pel}#
                                                                    #{ls _85hotwsCta0JfYIjI4Pen}#)))))
                                                          #{tmp _85hotwsCta0JfYIjI4Pei}#)
                                                        (list '#(syntax-object
                                                                 "list->vector"
                                                                 ((top)
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(#{ g_85hotwsCta0JfYIjI4PbH}#)
                                                                    #((m_85hotwsCta0JfYIjI4PbI
                                                                        top))
                                                                    #("333"))
                                                                  #(ribcage
                                                                    #(else)
                                                                    #((top))
                                                                    #("332"))
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(f y k)
                                                                    #((top)
                                                                      (top)
                                                                      (top))
                                                                    #("32s"
                                                                      "32t"
                                                                      "32u"))
                                                                  #(ribcage
                                                                    #(_)
                                                                    #((top))
                                                                    #("32r"))
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(x)
                                                                    #((top))
                                                                    #("32p"))
                                                                  #(ribcage
                                                                    (emit quasivector
                                                                          quasilist*
                                                                          quasiappend
                                                                          quasicons
                                                                          vquasi
                                                                          quasi)
                                                                    ((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                    ("31m"
                                                                     "31l"
                                                                     "31k"
                                                                     "31j"
                                                                     "31i"
                                                                     "31h"
                                                                     "31g")))
                                                                 (hygiene
                                                                   guile))
                                                              #{x _85hotwsCta0JfYIjI4PeC}#))))))))))
                                       (#{f _85hotwsCta0JfYIjI4PeK}#
                                         #{x _85hotwsCta0JfYIjI4PeC}#
                                         (lambda (#{ls _85hotwsCta0JfYIjI4PeM}#)
                                           (let ((#{tmp _85hotwsCta0JfYIjI4PeO}#
                                                   ($sc-dispatch
                                                     #{ls _85hotwsCta0JfYIjI4PeM}#
                                                     'each-any)))
                                             (if #{tmp _85hotwsCta0JfYIjI4PeO}#
                                               (@apply
                                                 (lambda (#{ g_85hotwsCta0JfYIjI4Paz _85hotwsCta0JfYIjI4PeR}#)
                                                   (cons '#(syntax-object
                                                            "vector"
                                                            ((top)
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(#{ g_85hotwsCta0JfYIjI4Paz}#)
                                                               #((m_85hotwsCta0JfYIjI4Pa0
                                                                   top))
                                                               #("32w"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(ls)
                                                               #((top))
                                                               #("32v"))
                                                             #(ribcage
                                                               #(_)
                                                               #((top))
                                                               #("32r"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("32p"))
                                                             #(ribcage
                                                               (emit quasivector
                                                                     quasilist*
                                                                     quasiappend
                                                                     quasicons
                                                                     vquasi
                                                                     quasi)
                                                               ((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                               ("31m"
                                                                "31l"
                                                                "31k"
                                                                "31j"
                                                                "31i"
                                                                "31h"
                                                                "31g")))
                                                            (hygiene guile))
                                                         #{ g_85hotwsCta0JfYIjI4Paz _85hotwsCta0JfYIjI4PeR}#))
                                                 #{tmp _85hotwsCta0JfYIjI4PeO}#)
                                               (syntax-violation
                                                 #f
                                                 "source expression failed to match any pattern"
                                                 #{ls _85hotwsCta0JfYIjI4PeM}#))))))))))
                             #{tmp _85hotwsCta0JfYIjI4Pd7}#)
                           (list '#(syntax-object
                                    "quote"
                                    ((top)
                                     #(ribcage #(p) #((top)) #("31x"))
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(p lev)
                                       #((top) (top))
                                       #("31n" "31o"))
                                     #(ribcage
                                       (emit quasivector
                                             quasilist*
                                             quasiappend
                                             quasicons
                                             vquasi
                                             quasi)
                                       ((top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top))
                                       ("31m"
                                        "31l"
                                        "31k"
                                        "31j"
                                        "31i"
                                        "31h"
                                        "31g")))
                                    (hygiene guile))
                                 #{p _85hotwsCta0JfYIjI4Pch}#)))))))))))
       (#{vquasi _85hotwsCta0JfYIjI4PcK}#
         (lambda (#{p _85hotwsCta0JfYIjI4PfD}#
                  #{lev _85hotwsCta0JfYIjI4PfE}#)
           (let ((#{tmp _85hotwsCta0JfYIjI4PfG}#
                   ($sc-dispatch
                     #{p _85hotwsCta0JfYIjI4PfD}#
                     '(any . any))))
             (if #{tmp _85hotwsCta0JfYIjI4PfG}#
               (@apply
                 (lambda (#{p _85hotwsCta0JfYIjI4PfK}#
                          #{q _85hotwsCta0JfYIjI4PfL}#)
                   (let ((#{tmp _85hotwsCta0JfYIjI4PfN}#
                           ($sc-dispatch
                             #{p _85hotwsCta0JfYIjI4PfK}#
                             '(#(free-id
                                 #(syntax-object
                                   unquote
                                   ((top)
                                    #(ribcage
                                      #(p q)
                                      #((top) (top))
                                      #("320" "321"))
                                    #(ribcage () () ())
                                    #(ribcage
                                      #(p lev)
                                      #((top) (top))
                                      #("31y" "31z"))
                                    #(ribcage
                                      (emit quasivector
                                            quasilist*
                                            quasiappend
                                            quasicons
                                            vquasi
                                            quasi)
                                      ((top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top))
                                      ("31m"
                                       "31l"
                                       "31k"
                                       "31j"
                                       "31i"
                                       "31h"
                                       "31g")))
                                   (hygiene guile)))
                               .
                               each-any))))
                     (if #{tmp _85hotwsCta0JfYIjI4PfN}#
                       (@apply
                         (lambda (#{p _85hotwsCta0JfYIjI4PfR}#)
                           (if (= #{lev _85hotwsCta0JfYIjI4PfE}# 0)
                             (#{quasilist* _85hotwsCta0JfYIjI4PcN}#
                               (map (lambda (#{tmp _85hotwsCta0JfYIjI4PZy _85hotwsCta0JfYIjI4Pf1}#)
                                      (list '#(syntax-object
                                               "value"
                                               ((top)
                                                #(ribcage
                                                  #(p)
                                                  #((top))
                                                  #("322"))
                                                #(ribcage
                                                  #(p q)
                                                  #((top) (top))
                                                  #("320" "321"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(p lev)
                                                  #((top) (top))
                                                  #("31y" "31z"))
                                                #(ribcage
                                                  (emit quasivector
                                                        quasilist*
                                                        quasiappend
                                                        quasicons
                                                        vquasi
                                                        quasi)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("31m"
                                                   "31l"
                                                   "31k"
                                                   "31j"
                                                   "31i"
                                                   "31h"
                                                   "31g")))
                                               (hygiene guile))
                                            #{tmp _85hotwsCta0JfYIjI4PZy _85hotwsCta0JfYIjI4Pf1}#))
                                    #{p _85hotwsCta0JfYIjI4PfR}#)
                               (#{vquasi _85hotwsCta0JfYIjI4PcK}#
                                 #{q _85hotwsCta0JfYIjI4PfL}#
                                 #{lev _85hotwsCta0JfYIjI4PfE}#))
                             (#{quasicons _85hotwsCta0JfYIjI4PcL}#
                               (#{quasicons _85hotwsCta0JfYIjI4PcL}#
                                 '(#(syntax-object
                                     "quote"
                                     ((top)
                                      #(ribcage #(p) #((top)) #("322"))
                                      #(ribcage
                                        #(p q)
                                        #((top) (top))
                                        #("320" "321"))
                                      #(ribcage () () ())
                                      #(ribcage
                                        #(p lev)
                                        #((top) (top))
                                        #("31y" "31z"))
                                      #(ribcage
                                        (emit quasivector
                                              quasilist*
                                              quasiappend
                                              quasicons
                                              vquasi
                                              quasi)
                                        ((top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top))
                                        ("31m"
                                         "31l"
                                         "31k"
                                         "31j"
                                         "31i"
                                         "31h"
                                         "31g")))
                                     (hygiene guile))
                                   #(syntax-object
                                     unquote
                                     ((top)
                                      #(ribcage #(p) #((top)) #("322"))
                                      #(ribcage
                                        #(p q)
                                        #((top) (top))
                                        #("320" "321"))
                                      #(ribcage () () ())
                                      #(ribcage
                                        #(p lev)
                                        #((top) (top))
                                        #("31y" "31z"))
                                      #(ribcage
                                        (emit quasivector
                                              quasilist*
                                              quasiappend
                                              quasicons
                                              vquasi
                                              quasi)
                                        ((top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top))
                                        ("31m"
                                         "31l"
                                         "31k"
                                         "31j"
                                         "31i"
                                         "31h"
                                         "31g")))
                                     (hygiene guile)))
                                 (#{quasi _85hotwsCta0JfYIjI4PcJ}#
                                   #{p _85hotwsCta0JfYIjI4PfR}#
                                   (#{1-}# #{lev _85hotwsCta0JfYIjI4PfE}#)))
                               (#{vquasi _85hotwsCta0JfYIjI4PcK}#
                                 #{q _85hotwsCta0JfYIjI4PfL}#
                                 #{lev _85hotwsCta0JfYIjI4PfE}#))))
                         #{tmp _85hotwsCta0JfYIjI4PfN}#)
                       (let ((#{tmp _85hotwsCta0JfYIjI4Pf8}#
                               ($sc-dispatch
                                 #{p _85hotwsCta0JfYIjI4PfK}#
                                 '(#(free-id
                                     #(syntax-object
                                       unquote-splicing
                                       ((top)
                                        #(ribcage
                                          #(p q)
                                          #((top) (top))
                                          #("320" "321"))
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(p lev)
                                          #((top) (top))
                                          #("31y" "31z"))
                                        #(ribcage
                                          (emit quasivector
                                                quasilist*
                                                quasiappend
                                                quasicons
                                                vquasi
                                                quasi)
                                          ((top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top))
                                          ("31m"
                                           "31l"
                                           "31k"
                                           "31j"
                                           "31i"
                                           "31h"
                                           "31g")))
                                       (hygiene guile)))
                                   .
                                   each-any))))
                         (if #{tmp _85hotwsCta0JfYIjI4Pf8}#
                           (@apply
                             (lambda (#{p _85hotwsCta0JfYIjI4PgA}#)
                               (if (= #{lev _85hotwsCta0JfYIjI4PfE}# 0)
                                 (#{quasiappend _85hotwsCta0JfYIjI4PcM}#
                                   (map (lambda (#{tmp _85hotwsCta0JfYIjI4PZ2 _85hotwsCta0JfYIjI4PgD}#)
                                          (list '#(syntax-object
                                                   "value"
                                                   ((top)
                                                    #(ribcage
                                                      #(p)
                                                      #((top))
                                                      #("323"))
                                                    #(ribcage
                                                      #(p q)
                                                      #((top) (top))
                                                      #("320" "321"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(p lev)
                                                      #((top) (top))
                                                      #("31y" "31z"))
                                                    #(ribcage
                                                      (emit quasivector
                                                            quasilist*
                                                            quasiappend
                                                            quasicons
                                                            vquasi
                                                            quasi)
                                                      ((top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top))
                                                      ("31m"
                                                       "31l"
                                                       "31k"
                                                       "31j"
                                                       "31i"
                                                       "31h"
                                                       "31g")))
                                                   (hygiene guile))
                                                #{tmp _85hotwsCta0JfYIjI4PZ2 _85hotwsCta0JfYIjI4PgD}#))
                                        #{p _85hotwsCta0JfYIjI4PgA}#)
                                   (#{vquasi _85hotwsCta0JfYIjI4PcK}#
                                     #{q _85hotwsCta0JfYIjI4PfL}#
                                     #{lev _85hotwsCta0JfYIjI4PfE}#))
                                 (#{quasicons _85hotwsCta0JfYIjI4PcL}#
                                   (#{quasicons _85hotwsCta0JfYIjI4PcL}#
                                     '(#(syntax-object
                                         "quote"
                                         ((top)
                                          #(ribcage #(p) #((top)) #("323"))
                                          #(ribcage
                                            #(p q)
                                            #((top) (top))
                                            #("320" "321"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(p lev)
                                            #((top) (top))
                                            #("31y" "31z"))
                                          #(ribcage
                                            (emit quasivector
                                                  quasilist*
                                                  quasiappend
                                                  quasicons
                                                  vquasi
                                                  quasi)
                                            ((top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top))
                                            ("31m"
                                             "31l"
                                             "31k"
                                             "31j"
                                             "31i"
                                             "31h"
                                             "31g")))
                                         (hygiene guile))
                                       #(syntax-object
                                         unquote-splicing
                                         ((top)
                                          #(ribcage #(p) #((top)) #("323"))
                                          #(ribcage
                                            #(p q)
                                            #((top) (top))
                                            #("320" "321"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(p lev)
                                            #((top) (top))
                                            #("31y" "31z"))
                                          #(ribcage
                                            (emit quasivector
                                                  quasilist*
                                                  quasiappend
                                                  quasicons
                                                  vquasi
                                                  quasi)
                                            ((top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top))
                                            ("31m"
                                             "31l"
                                             "31k"
                                             "31j"
                                             "31i"
                                             "31h"
                                             "31g")))
                                         (hygiene guile)))
                                     (#{quasi _85hotwsCta0JfYIjI4PcJ}#
                                       #{p _85hotwsCta0JfYIjI4PgA}#
                                       (#{1-}# #{lev _85hotwsCta0JfYIjI4PfE}#)))
                                   (#{vquasi _85hotwsCta0JfYIjI4PcK}#
                                     #{q _85hotwsCta0JfYIjI4PfL}#
                                     #{lev _85hotwsCta0JfYIjI4PfE}#))))
                             #{tmp _85hotwsCta0JfYIjI4Pf8}#)
                           (#{quasicons _85hotwsCta0JfYIjI4PcL}#
                             (#{quasi _85hotwsCta0JfYIjI4PcJ}#
                               #{p _85hotwsCta0JfYIjI4PfK}#
                               #{lev _85hotwsCta0JfYIjI4PfE}#)
                             (#{vquasi _85hotwsCta0JfYIjI4PcK}#
                               #{q _85hotwsCta0JfYIjI4PfL}#
                               #{lev _85hotwsCta0JfYIjI4PfE}#)))))))
                 #{tmp _85hotwsCta0JfYIjI4PfG}#)
               (let ((#{tmp _85hotwsCta0JfYIjI4PgV}#
                       ($sc-dispatch #{p _85hotwsCta0JfYIjI4PfD}# '())))
                 (if #{tmp _85hotwsCta0JfYIjI4PgV}#
                   (@apply
                     (lambda ()
                       '(#(syntax-object
                           "quote"
                           ((top)
                            #(ribcage () () ())
                            #(ribcage #(p lev) #((top) (top)) #("31y" "31z"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("31m" "31l" "31k" "31j" "31i" "31h" "31g")))
                           (hygiene guile))
                         ()))
                     #{tmp _85hotwsCta0JfYIjI4PgV}#)
                   (syntax-violation
                     #f
                     "source expression failed to match any pattern"
                     #{p _85hotwsCta0JfYIjI4PfD}#)))))))
       (#{quasicons _85hotwsCta0JfYIjI4PcL}#
         (lambda (#{x _85hotwsCta0JfYIjI4Pgi}#
                  #{y _85hotwsCta0JfYIjI4Pgj}#)
           (let ((#{tmp _85hotwsCta0JfYIjI4Pgk}#
                   (list #{x _85hotwsCta0JfYIjI4Pgi}#
                         #{y _85hotwsCta0JfYIjI4Pgj}#)))
             (let ((#{tmp _85hotwsCta0JfYIjI4Pgl}#
                     ($sc-dispatch
                       #{tmp _85hotwsCta0JfYIjI4Pgk}#
                       '(any any))))
               (if #{tmp _85hotwsCta0JfYIjI4Pgl}#
                 (@apply
                   (lambda (#{x _85hotwsCta0JfYIjI4Pgn}#
                            #{y _85hotwsCta0JfYIjI4Pgo}#)
                     (let ((#{tmp _85hotwsCta0JfYIjI4Pgq}#
                             ($sc-dispatch
                               #{y _85hotwsCta0JfYIjI4Pgo}#
                               '(#(atom "quote") any))))
                       (if #{tmp _85hotwsCta0JfYIjI4Pgq}#
                         (@apply
                           (lambda (#{dy _85hotwsCta0JfYIjI4Pgu}#)
                             (let ((#{tmp _85hotwsCta0JfYIjI4Pgw}#
                                     ($sc-dispatch
                                       #{x _85hotwsCta0JfYIjI4Pgn}#
                                       '(#(atom "quote") any))))
                               (if #{tmp _85hotwsCta0JfYIjI4Pgw}#
                                 (@apply
                                   (lambda (#{dx _85hotwsCta0JfYIjI4Pg0}#)
                                     (list '#(syntax-object
                                              "quote"
                                              ((top)
                                               #(ribcage
                                                 #(dx)
                                                 #((top))
                                                 #("32a"))
                                               #(ribcage
                                                 #(dy)
                                                 #((top))
                                                 #("329"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("327" "328"))
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("325" "326"))
                                               #(ribcage
                                                 (emit quasivector
                                                       quasilist*
                                                       quasiappend
                                                       quasicons
                                                       vquasi
                                                       quasi)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("31m"
                                                  "31l"
                                                  "31k"
                                                  "31j"
                                                  "31i"
                                                  "31h"
                                                  "31g")))
                                              (hygiene guile))
                                           (cons #{dx _85hotwsCta0JfYIjI4Pg0}#
                                                 #{dy _85hotwsCta0JfYIjI4Pgu}#)))
                                   #{tmp _85hotwsCta0JfYIjI4Pgw}#)
                                 (if (null? #{dy _85hotwsCta0JfYIjI4Pgu}#)
                                   (list '#(syntax-object
                                            "list"
                                            ((top)
                                             #(ribcage #(_) #((top)) #("32b"))
                                             #(ribcage #(dy) #((top)) #("329"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("327" "328"))
                                             #(ribcage () () ())
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("325" "326"))
                                             #(ribcage
                                               (emit quasivector
                                                     quasilist*
                                                     quasiappend
                                                     quasicons
                                                     vquasi
                                                     quasi)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("31m"
                                                "31l"
                                                "31k"
                                                "31j"
                                                "31i"
                                                "31h"
                                                "31g")))
                                            (hygiene guile))
                                         #{x _85hotwsCta0JfYIjI4Pgn}#)
                                   (list '#(syntax-object
                                            "list*"
                                            ((top)
                                             #(ribcage #(_) #((top)) #("32b"))
                                             #(ribcage #(dy) #((top)) #("329"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("327" "328"))
                                             #(ribcage () () ())
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("325" "326"))
                                             #(ribcage
                                               (emit quasivector
                                                     quasilist*
                                                     quasiappend
                                                     quasicons
                                                     vquasi
                                                     quasi)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("31m"
                                                "31l"
                                                "31k"
                                                "31j"
                                                "31i"
                                                "31h"
                                                "31g")))
                                            (hygiene guile))
                                         #{x _85hotwsCta0JfYIjI4Pgn}#
                                         #{y _85hotwsCta0JfYIjI4Pgo}#)))))
                           #{tmp _85hotwsCta0JfYIjI4Pgq}#)
                         (let ((#{tmp _85hotwsCta0JfYIjI4Pg5}#
                                 ($sc-dispatch
                                   #{y _85hotwsCta0JfYIjI4Pgo}#
                                   '(#(atom "list") . any))))
                           (if #{tmp _85hotwsCta0JfYIjI4Pg5}#
                             (@apply
                               (lambda (#{stuff _85hotwsCta0JfYIjI4Pg9}#)
                                 (cons '#(syntax-object
                                          "list"
                                          ((top)
                                           #(ribcage
                                             #(stuff)
                                             #((top))
                                             #("32c"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("327" "328"))
                                           #(ribcage () () ())
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("325" "326"))
                                           #(ribcage
                                             (emit quasivector
                                                   quasilist*
                                                   quasiappend
                                                   quasicons
                                                   vquasi
                                                   quasi)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("31m"
                                              "31l"
                                              "31k"
                                              "31j"
                                              "31i"
                                              "31h"
                                              "31g")))
                                          (hygiene guile))
                                       (cons #{x _85hotwsCta0JfYIjI4Pgn}#
                                             #{stuff _85hotwsCta0JfYIjI4Pg9}#)))
                               #{tmp _85hotwsCta0JfYIjI4Pg5}#)
                             (let ((#{tmp _85hotwsCta0JfYIjI4Pg$}#
                                     ($sc-dispatch
                                       #{y _85hotwsCta0JfYIjI4Pgo}#
                                       '(#(atom "list*") . any))))
                               (if #{tmp _85hotwsCta0JfYIjI4Pg$}#
                                 (@apply
                                   (lambda (#{stuff _85hotwsCta0JfYIjI4PhC}#)
                                     (cons '#(syntax-object
                                              "list*"
                                              ((top)
                                               #(ribcage
                                                 #(stuff)
                                                 #((top))
                                                 #("32d"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("327" "328"))
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("325" "326"))
                                               #(ribcage
                                                 (emit quasivector
                                                       quasilist*
                                                       quasiappend
                                                       quasicons
                                                       vquasi
                                                       quasi)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("31m"
                                                  "31l"
                                                  "31k"
                                                  "31j"
                                                  "31i"
                                                  "31h"
                                                  "31g")))
                                              (hygiene guile))
                                           (cons #{x _85hotwsCta0JfYIjI4Pgn}#
                                                 #{stuff _85hotwsCta0JfYIjI4PhC}#)))
                                   #{tmp _85hotwsCta0JfYIjI4Pg$}#)
                                 (list '#(syntax-object
                                          "list*"
                                          ((top)
                                           #(ribcage #(_) #((top)) #("32e"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("327" "328"))
                                           #(ribcage () () ())
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("325" "326"))
                                           #(ribcage
                                             (emit quasivector
                                                   quasilist*
                                                   quasiappend
                                                   quasicons
                                                   vquasi
                                                   quasi)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("31m"
                                              "31l"
                                              "31k"
                                              "31j"
                                              "31i"
                                              "31h"
                                              "31g")))
                                          (hygiene guile))
                                       #{x _85hotwsCta0JfYIjI4Pgn}#
                                       #{y _85hotwsCta0JfYIjI4Pgo}#))))))))
                   #{tmp _85hotwsCta0JfYIjI4Pgl}#)
                 (syntax-violation
                   #f
                   "source expression failed to match any pattern"
                   #{tmp _85hotwsCta0JfYIjI4Pgk}#))))))
       (#{quasiappend _85hotwsCta0JfYIjI4PcM}#
         (lambda (#{x _85hotwsCta0JfYIjI4PhN}#
                  #{y _85hotwsCta0JfYIjI4PhO}#)
           (let ((#{tmp _85hotwsCta0JfYIjI4PhQ}#
                   ($sc-dispatch
                     #{y _85hotwsCta0JfYIjI4PhO}#
                     '(#(atom "quote") ()))))
             (if #{tmp _85hotwsCta0JfYIjI4PhQ}#
               (@apply
                 (lambda ()
                   (if (null? #{x _85hotwsCta0JfYIjI4PhN}#)
                     '(#(syntax-object
                         "quote"
                         ((top)
                          #(ribcage () () ())
                          #(ribcage #(x y) #((top) (top)) #("32f" "32g"))
                          #(ribcage
                            (emit quasivector
                                  quasilist*
                                  quasiappend
                                  quasicons
                                  vquasi
                                  quasi)
                            ((top) (top) (top) (top) (top) (top) (top))
                            ("31m" "31l" "31k" "31j" "31i" "31h" "31g")))
                         (hygiene guile))
                       ())
                     (if (null? (cdr #{x _85hotwsCta0JfYIjI4PhN}#))
                       (car #{x _85hotwsCta0JfYIjI4PhN}#)
                       (let ((#{tmp _85hotwsCta0JfYIjI4PhV}#
                               ($sc-dispatch
                                 #{x _85hotwsCta0JfYIjI4PhN}#
                                 'each-any)))
                         (if #{tmp _85hotwsCta0JfYIjI4PhV}#
                           (@apply
                             (lambda (#{p _85hotwsCta0JfYIjI4PhZ}#)
                               (cons '#(syntax-object
                                        "append"
                                        ((top)
                                         #(ribcage () () ())
                                         #(ribcage #(p) #((top)) #("32h"))
                                         #(ribcage () () ())
                                         #(ribcage
                                           #(x y)
                                           #((top) (top))
                                           #("32f" "32g"))
                                         #(ribcage
                                           (emit quasivector
                                                 quasilist*
                                                 quasiappend
                                                 quasicons
                                                 vquasi
                                                 quasi)
                                           ((top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top))
                                           ("31m"
                                            "31l"
                                            "31k"
                                            "31j"
                                            "31i"
                                            "31h"
                                            "31g")))
                                        (hygiene guile))
                                     #{p _85hotwsCta0JfYIjI4PhZ}#))
                             #{tmp _85hotwsCta0JfYIjI4PhV}#)
                           (syntax-violation
                             #f
                             "source expression failed to match any pattern"
                             #{x _85hotwsCta0JfYIjI4PhN}#))))))
                 #{tmp _85hotwsCta0JfYIjI4PhQ}#)
               (if (null? #{x _85hotwsCta0JfYIjI4PhN}#)
                 #{y _85hotwsCta0JfYIjI4PhO}#
                 (let ((#{tmp _85hotwsCta0JfYIjI4Phh}#
                         (list #{x _85hotwsCta0JfYIjI4PhN}#
                               #{y _85hotwsCta0JfYIjI4PhO}#)))
                   (let ((#{tmp _85hotwsCta0JfYIjI4Phi}#
                           ($sc-dispatch
                             #{tmp _85hotwsCta0JfYIjI4Phh}#
                             '(each-any any))))
                     (if #{tmp _85hotwsCta0JfYIjI4Phi}#
                       (@apply
                         (lambda (#{p _85hotwsCta0JfYIjI4Phk}#
                                  #{y _85hotwsCta0JfYIjI4Phl}#)
                           (cons '#(syntax-object
                                    "append"
                                    ((top)
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(p y)
                                       #((top) (top))
                                       #("32j" "32k"))
                                     #(ribcage #(_) #((top)) #("32i"))
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(x y)
                                       #((top) (top))
                                       #("32f" "32g"))
                                     #(ribcage
                                       (emit quasivector
                                             quasilist*
                                             quasiappend
                                             quasicons
                                             vquasi
                                             quasi)
                                       ((top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top))
                                       ("31m"
                                        "31l"
                                        "31k"
                                        "31j"
                                        "31i"
                                        "31h"
                                        "31g")))
                                    (hygiene guile))
                                 (append
                                   #{p _85hotwsCta0JfYIjI4Phk}#
                                   (list #{y _85hotwsCta0JfYIjI4Phl}#))))
                         #{tmp _85hotwsCta0JfYIjI4Phi}#)
                       (syntax-violation
                         #f
                         "source expression failed to match any pattern"
                         #{tmp _85hotwsCta0JfYIjI4Phh}#)))))))))
       (#{quasilist* _85hotwsCta0JfYIjI4PcN}#
         (lambda (#{x _85hotwsCta0JfYIjI4Php}#
                  #{y _85hotwsCta0JfYIjI4Phq}#)
           (letrec*
             ((#{f _85hotwsCta0JfYIjI4Phr}#
                (lambda (#{x _85hotwsCta0JfYIjI4PjE}#)
                  (if (null? #{x _85hotwsCta0JfYIjI4PjE}#)
                    #{y _85hotwsCta0JfYIjI4Phq}#
                    (#{quasicons _85hotwsCta0JfYIjI4PcL}#
                      (car #{x _85hotwsCta0JfYIjI4PjE}#)
                      (#{f _85hotwsCta0JfYIjI4Phr}#
                        (cdr #{x _85hotwsCta0JfYIjI4PjE}#)))))))
             (#{f _85hotwsCta0JfYIjI4Phr}#
               #{x _85hotwsCta0JfYIjI4Php}#))))
       (#{emit _85hotwsCta0JfYIjI4PcP}#
         (lambda (#{x _85hotwsCta0JfYIjI4PjH}#)
           (let ((#{tmp _85hotwsCta0JfYIjI4PjJ}#
                   ($sc-dispatch
                     #{x _85hotwsCta0JfYIjI4PjH}#
                     '(#(atom "quote") any))))
             (if #{tmp _85hotwsCta0JfYIjI4PjJ}#
               (@apply
                 (lambda (#{x _85hotwsCta0JfYIjI4PjN}#)
                   (list '#(syntax-object
                            quote
                            ((top)
                             #(ribcage #(x) #((top)) #("335"))
                             #(ribcage () () ())
                             #(ribcage #(x) #((top)) #("334"))
                             #(ribcage
                               (emit quasivector
                                     quasilist*
                                     quasiappend
                                     quasicons
                                     vquasi
                                     quasi)
                               ((top) (top) (top) (top) (top) (top) (top))
                               ("31m" "31l" "31k" "31j" "31i" "31h" "31g")))
                            (hygiene guile))
                         #{x _85hotwsCta0JfYIjI4PjN}#))
                 #{tmp _85hotwsCta0JfYIjI4PjJ}#)
               (let ((#{tmp _85hotwsCta0JfYIjI4PjO}#
                       ($sc-dispatch
                         #{x _85hotwsCta0JfYIjI4PjH}#
                         '(#(atom "list") . each-any))))
                 (if #{tmp _85hotwsCta0JfYIjI4PjO}#
                   (@apply
                     (lambda (#{x _85hotwsCta0JfYIjI4PjS}#)
                       (let ((#{tmp _85hotwsCta0JfYIjI4PjT}#
                               (map #{emit _85hotwsCta0JfYIjI4PcP}#
                                    #{x _85hotwsCta0JfYIjI4PjS}#)))
                         (let ((#{tmp _85hotwsCta0JfYIjI4PjU}#
                                 ($sc-dispatch
                                   #{tmp _85hotwsCta0JfYIjI4PjT}#
                                   'each-any)))
                           (if #{tmp _85hotwsCta0JfYIjI4PjU}#
                             (@apply
                               (lambda (#{ g_85hotwsCta0JfYIjI4PbS _85hotwsCta0JfYIjI4PjW}#)
                                 (cons '#(syntax-object
                                          list
                                          ((top)
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(#{ g_85hotwsCta0JfYIjI4PbS}#)
                                             #((m_85hotwsCta0JfYIjI4PbT top))
                                             #("337"))
                                           #(ribcage #(x) #((top)) #("336"))
                                           #(ribcage () () ())
                                           #(ribcage #(x) #((top)) #("334"))
                                           #(ribcage
                                             (emit quasivector
                                                   quasilist*
                                                   quasiappend
                                                   quasicons
                                                   vquasi
                                                   quasi)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("31m"
                                              "31l"
                                              "31k"
                                              "31j"
                                              "31i"
                                              "31h"
                                              "31g")))
                                          (hygiene guile))
                                       #{ g_85hotwsCta0JfYIjI4PbS _85hotwsCta0JfYIjI4PjW}#))
                               #{tmp _85hotwsCta0JfYIjI4PjU}#)
                             (syntax-violation
                               #f
                               "source expression failed to match any pattern"
                               #{tmp _85hotwsCta0JfYIjI4PjT}#)))))
                     #{tmp _85hotwsCta0JfYIjI4PjO}#)
                   (let ((#{tmp _85hotwsCta0JfYIjI4PjX}#
                           ($sc-dispatch
                             #{x _85hotwsCta0JfYIjI4PjH}#
                             '(#(atom "list*") . #(each+ any (any) ())))))
                     (if #{tmp _85hotwsCta0JfYIjI4PjX}#
                       (@apply
                         (lambda (#{x _85hotwsCta0JfYIjI4Pjb}#
                                  #{y _85hotwsCta0JfYIjI4Pjc}#)
                           (letrec*
                             ((#{f _85hotwsCta0JfYIjI4Pjd}#
                                (lambda (#{x* _85hotwsCta0JfYIjI4Pjg}#)
                                  (if (null? #{x* _85hotwsCta0JfYIjI4Pjg}#)
                                    (#{emit _85hotwsCta0JfYIjI4PcP}#
                                      #{y _85hotwsCta0JfYIjI4Pjc}#)
                                    (let ((#{tmp _85hotwsCta0JfYIjI4Pjh}#
                                            (list (#{emit _85hotwsCta0JfYIjI4PcP}#
                                                    (car #{x* _85hotwsCta0JfYIjI4Pjg}#))
                                                  (#{f _85hotwsCta0JfYIjI4Pjd}#
                                                    (cdr #{x* _85hotwsCta0JfYIjI4Pjg}#)))))
                                      (let ((#{tmp _85hotwsCta0JfYIjI4Pji}#
                                              ($sc-dispatch
                                                #{tmp _85hotwsCta0JfYIjI4Pjh}#
                                                '(any any))))
                                        (if #{tmp _85hotwsCta0JfYIjI4Pji}#
                                          (@apply
                                            (lambda (#{ g_85hotwsCta0JfYIjI4Pbh _85hotwsCta0JfYIjI4Pjk}#
                                                     #{ g_85hotwsCta0JfYIjI4Pbg _85hotwsCta0JfYIjI4Pjl}#)
                                              (list '#(syntax-object
                                                       cons
                                                       ((top)
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(#{ g_85hotwsCta0JfYIjI4Pbh}#
                                                            #{ g_85hotwsCta0JfYIjI4Pbg}#)
                                                          #((m_85hotwsCta0JfYIjI4Pbi
                                                              top)
                                                            (m_85hotwsCta0JfYIjI4Pbi
                                                              top))
                                                          #("33c" "33d"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(f x*)
                                                          #((top) (top))
                                                          #("33a" "33b"))
                                                        #(ribcage
                                                          #(x y)
                                                          #((top) (top))
                                                          #("338" "339"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(x)
                                                          #((top))
                                                          #("334"))
                                                        #(ribcage
                                                          (emit quasivector
                                                                quasilist*
                                                                quasiappend
                                                                quasicons
                                                                vquasi
                                                                quasi)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("31m"
                                                           "31l"
                                                           "31k"
                                                           "31j"
                                                           "31i"
                                                           "31h"
                                                           "31g")))
                                                       (hygiene guile))
                                                    #{ g_85hotwsCta0JfYIjI4Pbh _85hotwsCta0JfYIjI4Pjk}#
                                                    #{ g_85hotwsCta0JfYIjI4Pbg _85hotwsCta0JfYIjI4Pjl}#))
                                            #{tmp _85hotwsCta0JfYIjI4Pji}#)
                                          (syntax-violation
                                            #f
                                            "source expression failed to match any pattern"
                                            #{tmp _85hotwsCta0JfYIjI4Pjh}#))))))))
                             (#{f _85hotwsCta0JfYIjI4Pjd}#
                               #{x _85hotwsCta0JfYIjI4Pjb}#)))
                         #{tmp _85hotwsCta0JfYIjI4PjX}#)
                       (let ((#{tmp _85hotwsCta0JfYIjI4Pjm}#
                               ($sc-dispatch
                                 #{x _85hotwsCta0JfYIjI4PjH}#
                                 '(#(atom "append") . each-any))))
                         (if #{tmp _85hotwsCta0JfYIjI4Pjm}#
                           (@apply
                             (lambda (#{x _85hotwsCta0JfYIjI4Pjq}#)
                               (let ((#{tmp _85hotwsCta0JfYIjI4Pjr}#
                                       (map #{emit _85hotwsCta0JfYIjI4PcP}#
                                            #{x _85hotwsCta0JfYIjI4Pjq}#)))
                                 (let ((#{tmp _85hotwsCta0JfYIjI4Pjs}#
                                         ($sc-dispatch
                                           #{tmp _85hotwsCta0JfYIjI4Pjr}#
                                           'each-any)))
                                   (if #{tmp _85hotwsCta0JfYIjI4Pjs}#
                                     (@apply
                                       (lambda (#{ g_85hotwsCta0JfYIjI4Pbq _85hotwsCta0JfYIjI4Pju}#)
                                         (cons '#(syntax-object
                                                  append
                                                  ((top)
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(#{ g_85hotwsCta0JfYIjI4Pbq}#)
                                                     #((m_85hotwsCta0JfYIjI4Pbr
                                                         top))
                                                     #("33f"))
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("33e"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("334"))
                                                   #(ribcage
                                                     (emit quasivector
                                                           quasilist*
                                                           quasiappend
                                                           quasicons
                                                           vquasi
                                                           quasi)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("31m"
                                                      "31l"
                                                      "31k"
                                                      "31j"
                                                      "31i"
                                                      "31h"
                                                      "31g")))
                                                  (hygiene guile))
                                               #{ g_85hotwsCta0JfYIjI4Pbq _85hotwsCta0JfYIjI4Pju}#))
                                       #{tmp _85hotwsCta0JfYIjI4Pjs}#)
                                     (syntax-violation
                                       #f
                                       "source expression failed to match any pattern"
                                       #{tmp _85hotwsCta0JfYIjI4Pjr}#)))))
                             #{tmp _85hotwsCta0JfYIjI4Pjm}#)
                           (let ((#{tmp _85hotwsCta0JfYIjI4Pjv}#
                                   ($sc-dispatch
                                     #{x _85hotwsCta0JfYIjI4PjH}#
                                     '(#(atom "vector") . each-any))))
                             (if #{tmp _85hotwsCta0JfYIjI4Pjv}#
                               (@apply
                                 (lambda (#{x _85hotwsCta0JfYIjI4Pjz}#)
                                   (let ((#{tmp _85hotwsCta0JfYIjI4Pj0}#
                                           (map #{emit _85hotwsCta0JfYIjI4PcP}#
                                                #{x _85hotwsCta0JfYIjI4Pjz}#)))
                                     (let ((#{tmp _85hotwsCta0JfYIjI4Pj1}#
                                             ($sc-dispatch
                                               #{tmp _85hotwsCta0JfYIjI4Pj0}#
                                               'each-any)))
                                       (if #{tmp _85hotwsCta0JfYIjI4Pj1}#
                                         (@apply
                                           (lambda (#{ g_85hotwsCta0JfYIjI4Pb0 _85hotwsCta0JfYIjI4Pj3}#)
                                             (cons '#(syntax-object
                                                      vector
                                                      ((top)
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(#{ g_85hotwsCta0JfYIjI4Pb0}#)
                                                         #((m_85hotwsCta0JfYIjI4Pb1
                                                             top))
                                                         #("33h"))
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("33g"))
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("334"))
                                                       #(ribcage
                                                         (emit quasivector
                                                               quasilist*
                                                               quasiappend
                                                               quasicons
                                                               vquasi
                                                               quasi)
                                                         ((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                         ("31m"
                                                          "31l"
                                                          "31k"
                                                          "31j"
                                                          "31i"
                                                          "31h"
                                                          "31g")))
                                                      (hygiene guile))
                                                   #{ g_85hotwsCta0JfYIjI4Pb0 _85hotwsCta0JfYIjI4Pj3}#))
                                           #{tmp _85hotwsCta0JfYIjI4Pj1}#)
                                         (syntax-violation
                                           #f
                                           "source expression failed to match any pattern"
                                           #{tmp _85hotwsCta0JfYIjI4Pj0}#)))))
                                 #{tmp _85hotwsCta0JfYIjI4Pjv}#)
                               (let ((#{tmp _85hotwsCta0JfYIjI4Pj4}#
                                       ($sc-dispatch
                                         #{x _85hotwsCta0JfYIjI4PjH}#
                                         '(#(atom "list->vector") any))))
                                 (if #{tmp _85hotwsCta0JfYIjI4Pj4}#
                                   (@apply
                                     (lambda (#{x _85hotwsCta0JfYIjI4Pj8}#)
                                       (let ((#{tmp _85hotwsCta0JfYIjI4Pj9}#
                                               (#{emit _85hotwsCta0JfYIjI4PcP}#
                                                 #{x _85hotwsCta0JfYIjI4Pj8}#)))
                                         (list '#(syntax-object
                                                  list->vector
                                                  ((top)
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(#{ g_85hotwsCta0JfYIjI4Pb$}#)
                                                     #((m_85hotwsCta0JfYIjI4Pb@
                                                         top))
                                                     #("33j"))
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("33i"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("334"))
                                                   #(ribcage
                                                     (emit quasivector
                                                           quasilist*
                                                           quasiappend
                                                           quasicons
                                                           vquasi
                                                           quasi)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("31m"
                                                      "31l"
                                                      "31k"
                                                      "31j"
                                                      "31i"
                                                      "31h"
                                                      "31g")))
                                                  (hygiene guile))
                                               #{tmp _85hotwsCta0JfYIjI4Pj9}#)))
                                     #{tmp _85hotwsCta0JfYIjI4Pj4}#)
                                   (let ((#{tmp _85hotwsCta0JfYIjI4PkA}#
                                           ($sc-dispatch
                                             #{x _85hotwsCta0JfYIjI4PjH}#
                                             '(#(atom "value") any))))
                                     (if #{tmp _85hotwsCta0JfYIjI4PkA}#
                                       (@apply
                                         (lambda (#{x _85hotwsCta0JfYIjI4PkE}#)
                                           #{x _85hotwsCta0JfYIjI4PkE}#)
                                         #{tmp _85hotwsCta0JfYIjI4PkA}#)
                                       (syntax-violation
                                         #f
                                         "source expression failed to match any pattern"
                                         #{x _85hotwsCta0JfYIjI4PjH}#))))))))))))))))))
      (lambda (#{x _85hotwsCta0JfYIjI4PcQ}#)
        (let ((#{tmp _85hotwsCta0JfYIjI4PcS}#
                ($sc-dispatch
                  #{x _85hotwsCta0JfYIjI4PcQ}#
                  '(_ any))))
          (if #{tmp _85hotwsCta0JfYIjI4PcS}#
            (@apply
              (lambda (#{e _85hotwsCta0JfYIjI4PcW}#)
                (#{emit _85hotwsCta0JfYIjI4PcP}#
                  (#{quasi _85hotwsCta0JfYIjI4PcJ}#
                    #{e _85hotwsCta0JfYIjI4PcW}#
                    0)))
              #{tmp _85hotwsCta0JfYIjI4PcS}#)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              #{x _85hotwsCta0JfYIjI4PcQ}#)))))))

(define include
  (make-syntax-transformer
    'include
    'macro
    (lambda (#{x _85hotwsCta0JfYIjI4Pkv}#)
      (letrec*
        ((#{read-file _85hotwsCta0JfYIjI4Pkw}#
           (lambda (#{fn _85hotwsCta0JfYIjI4Pmd}#
                    #{k _85hotwsCta0JfYIjI4Pme}#)
             (let ((#{p _85hotwsCta0JfYIjI4Pmf}#
                     (open-input-file #{fn _85hotwsCta0JfYIjI4Pmd}#)))
               (letrec*
                 ((#{f _85hotwsCta0JfYIjI4Pmg}#
                    (lambda (#{x _85hotwsCta0JfYIjI4PnW}#
                             #{result _85hotwsCta0JfYIjI4PnX}#)
                      (if (eof-object? #{x _85hotwsCta0JfYIjI4PnW}#)
                        (begin
                          (close-input-port #{p _85hotwsCta0JfYIjI4Pmf}#)
                          (reverse #{result _85hotwsCta0JfYIjI4PnX}#))
                        (#{f _85hotwsCta0JfYIjI4Pmg}#
                          (read #{p _85hotwsCta0JfYIjI4Pmf}#)
                          (cons (datum->syntax
                                  #{k _85hotwsCta0JfYIjI4Pme}#
                                  #{x _85hotwsCta0JfYIjI4PnW}#)
                                #{result _85hotwsCta0JfYIjI4PnX}#))))))
                 (#{f _85hotwsCta0JfYIjI4Pmg}#
                   (read #{p _85hotwsCta0JfYIjI4Pmf}#)
                   '()))))))
        (let ((#{tmp _85hotwsCta0JfYIjI4Pky}#
                ($sc-dispatch
                  #{x _85hotwsCta0JfYIjI4Pkv}#
                  '(any any))))
          (if #{tmp _85hotwsCta0JfYIjI4Pky}#
            (@apply
              (lambda (#{k _85hotwsCta0JfYIjI4Pk2}#
                       #{filename _85hotwsCta0JfYIjI4Pk3}#)
                (let ((#{fn _85hotwsCta0JfYIjI4Pk4}#
                        (syntax->datum
                          #{filename _85hotwsCta0JfYIjI4Pk3}#)))
                  (let ((#{tmp _85hotwsCta0JfYIjI4Pk5}#
                          (#{read-file _85hotwsCta0JfYIjI4Pkw}#
                            #{fn _85hotwsCta0JfYIjI4Pk4}#
                            #{filename _85hotwsCta0JfYIjI4Pk3}#)))
                    (let ((#{tmp _85hotwsCta0JfYIjI4Pk6}#
                            ($sc-dispatch
                              #{tmp _85hotwsCta0JfYIjI4Pk5}#
                              'each-any)))
                      (if #{tmp _85hotwsCta0JfYIjI4Pk6}#
                        (@apply
                          (lambda (#{exp _85hotwsCta0JfYIjI4PlM}#)
                            (cons '#(syntax-object
                                     begin
                                     ((top)
                                      #(ribcage () () ())
                                      #(ribcage #(exp) #((top)) #("33y"))
                                      #(ribcage () () ())
                                      #(ribcage () () ())
                                      #(ribcage #(fn) #((top)) #("33x"))
                                      #(ribcage
                                        #(k filename)
                                        #((top) (top))
                                        #("33v" "33w"))
                                      #(ribcage (read-file) ((top)) ("33o"))
                                      #(ribcage #(x) #((top)) #("33n")))
                                     (hygiene guile))
                                  #{exp _85hotwsCta0JfYIjI4PlM}#))
                          #{tmp _85hotwsCta0JfYIjI4Pk6}#)
                        (syntax-violation
                          #f
                          "source expression failed to match any pattern"
                          #{tmp _85hotwsCta0JfYIjI4Pk5}#))))))
              #{tmp _85hotwsCta0JfYIjI4Pky}#)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              #{x _85hotwsCta0JfYIjI4Pkv}#)))))))

(define include-from-path
  (make-syntax-transformer
    'include-from-path
    'macro
    (lambda (#{x _85hotwsCta0JfYIjI4Pnk}#)
      (let ((#{tmp _85hotwsCta0JfYIjI4Pnm}#
              ($sc-dispatch
                #{x _85hotwsCta0JfYIjI4Pnk}#
                '(any any))))
        (if #{tmp _85hotwsCta0JfYIjI4Pnm}#
          (@apply
            (lambda (#{k _85hotwsCta0JfYIjI4Pnq}#
                     #{filename _85hotwsCta0JfYIjI4Pnr}#)
              (let ((#{fn _85hotwsCta0JfYIjI4Pns}#
                      (syntax->datum
                        #{filename _85hotwsCta0JfYIjI4Pnr}#)))
                (let ((#{tmp _85hotwsCta0JfYIjI4Pnt}#
                        (datum->syntax
                          #{filename _85hotwsCta0JfYIjI4Pnr}#
                          (let ((#{t _85hotwsCta0JfYIjI4Pnw}#
                                  (%search-load-path
                                    #{fn _85hotwsCta0JfYIjI4Pns}#)))
                            (if #{t _85hotwsCta0JfYIjI4Pnw}#
                              #{t _85hotwsCta0JfYIjI4Pnw}#
                              (syntax-violation
                                'include-from-path
                                "file not found in path"
                                #{x _85hotwsCta0JfYIjI4Pnk}#
                                #{filename _85hotwsCta0JfYIjI4Pnr}#))))))
                  (list '#(syntax-object
                           include
                           ((top)
                            #(ribcage () () ())
                            #(ribcage #(fn) #((top)) #("343"))
                            #(ribcage () () ())
                            #(ribcage () () ())
                            #(ribcage #(fn) #((top)) #("342"))
                            #(ribcage
                              #(k filename)
                              #((top) (top))
                              #("340" "341"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("33z")))
                           (hygiene guile))
                        #{tmp _85hotwsCta0JfYIjI4Pnt}#))))
            #{tmp _85hotwsCta0JfYIjI4Pnm}#)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            #{x _85hotwsCta0JfYIjI4Pnk}#))))))

(define unquote
  (make-syntax-transformer
    'unquote
    'macro
    (lambda (#{x _85hotwsCta0JfYIjI4Pn4}#)
      (syntax-violation
        'unquote
        "expression not valid outside of quasiquote"
        #{x _85hotwsCta0JfYIjI4Pn4}#))))

(define unquote-splicing
  (make-syntax-transformer
    'unquote-splicing
    'macro
    (lambda (#{x _85hotwsCta0JfYIjI4Pn6}#)
      (syntax-violation
        'unquote-splicing
        "expression not valid outside of quasiquote"
        #{x _85hotwsCta0JfYIjI4Pn6}#))))

(define case
  (make-syntax-transformer
    'case
    'macro
    (lambda (#{x _85hotwsCta0JfYIjI4Pof}#)
      (let ((#{tmp _85hotwsCta0JfYIjI4Poh}#
              ($sc-dispatch
                #{x _85hotwsCta0JfYIjI4Pof}#
                '(_ any any . each-any))))
        (if #{tmp _85hotwsCta0JfYIjI4Poh}#
          (@apply
            (lambda (#{e _85hotwsCta0JfYIjI4Pol}#
                     #{m1 _85hotwsCta0JfYIjI4Pom}#
                     #{m2 _85hotwsCta0JfYIjI4Pon}#)
              (let ((#{tmp _85hotwsCta0JfYIjI4Poo}#
                      (letrec*
                        ((#{f _85hotwsCta0JfYIjI4PpS}#
                           (lambda (#{clause _85hotwsCta0JfYIjI4PpV}#
                                    #{clauses _85hotwsCta0JfYIjI4PpW}#)
                             (if (null? #{clauses _85hotwsCta0JfYIjI4PpW}#)
                               (let ((#{tmp _85hotwsCta0JfYIjI4PpY}#
                                       ($sc-dispatch
                                         #{clause _85hotwsCta0JfYIjI4PpV}#
                                         '(#(free-id
                                             #(syntax-object
                                               else
                                               ((top)
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(f clause clauses)
                                                  #((top) (top) (top))
                                                  #("34c" "34d" "34e"))
                                                #(ribcage
                                                  #(e m1 m2)
                                                  #((top) (top) (top))
                                                  #("348" "349" "34a"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(x)
                                                  #((top))
                                                  #("347")))
                                               (hygiene guile)))
                                           any
                                           .
                                           each-any))))
                                 (if #{tmp _85hotwsCta0JfYIjI4PpY}#
                                   (@apply
                                     (lambda (#{e1 _85hotwsCta0JfYIjI4Ppc}#
                                              #{e2 _85hotwsCta0JfYIjI4Ppd}#)
                                       (cons '#(syntax-object
                                                begin
                                                ((top)
                                                 #(ribcage
                                                   #(e1 e2)
                                                   #((top) (top))
                                                   #("34f" "34g"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(f clause clauses)
                                                   #((top) (top) (top))
                                                   #("34c" "34d" "34e"))
                                                 #(ribcage
                                                   #(e m1 m2)
                                                   #((top) (top) (top))
                                                   #("348" "349" "34a"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("347")))
                                                (hygiene guile))
                                             (cons #{e1 _85hotwsCta0JfYIjI4Ppc}#
                                                   #{e2 _85hotwsCta0JfYIjI4Ppd}#)))
                                     #{tmp _85hotwsCta0JfYIjI4PpY}#)
                                   (let ((#{tmp _85hotwsCta0JfYIjI4Ppe}#
                                           ($sc-dispatch
                                             #{clause _85hotwsCta0JfYIjI4PpV}#
                                             '(each-any any . each-any))))
                                     (if #{tmp _85hotwsCta0JfYIjI4Ppe}#
                                       (@apply
                                         (lambda (#{k _85hotwsCta0JfYIjI4Ppi}#
                                                  #{e1 _85hotwsCta0JfYIjI4Ppj}#
                                                  #{e2 _85hotwsCta0JfYIjI4Ppk}#)
                                           (list '#(syntax-object
                                                    if
                                                    ((top)
                                                     #(ribcage
                                                       #(k e1 e2)
                                                       #((top) (top) (top))
                                                       #("34h" "34i" "34j"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(f clause clauses)
                                                       #((top) (top) (top))
                                                       #("34c" "34d" "34e"))
                                                     #(ribcage
                                                       #(e m1 m2)
                                                       #((top) (top) (top))
                                                       #("348" "349" "34a"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("347")))
                                                    (hygiene guile))
                                                 (list '#(syntax-object
                                                          memv
                                                          ((top)
                                                           #(ribcage
                                                             #(k e1 e2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("34h"
                                                               "34i"
                                                               "34j"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(f
                                                               clause
                                                               clauses)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("34c"
                                                               "34d"
                                                               "34e"))
                                                           #(ribcage
                                                             #(e m1 m2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("348"
                                                               "349"
                                                               "34a"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("347")))
                                                          (hygiene guile))
                                                       '#(syntax-object
                                                          t
                                                          ((top)
                                                           #(ribcage
                                                             #(k e1 e2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("34h"
                                                               "34i"
                                                               "34j"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(f
                                                               clause
                                                               clauses)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("34c"
                                                               "34d"
                                                               "34e"))
                                                           #(ribcage
                                                             #(e m1 m2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("348"
                                                               "349"
                                                               "34a"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("347")))
                                                          (hygiene guile))
                                                       (list '#(syntax-object
                                                                quote
                                                                ((top)
                                                                 #(ribcage
                                                                   #(k e1 e2)
                                                                   #((top)
                                                                     (top)
                                                                     (top))
                                                                   #("34h"
                                                                     "34i"
                                                                     "34j"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(f
                                                                     clause
                                                                     clauses)
                                                                   #((top)
                                                                     (top)
                                                                     (top))
                                                                   #("34c"
                                                                     "34d"
                                                                     "34e"))
                                                                 #(ribcage
                                                                   #(e m1 m2)
                                                                   #((top)
                                                                     (top)
                                                                     (top))
                                                                   #("348"
                                                                     "349"
                                                                     "34a"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("347")))
                                                                (hygiene
                                                                  guile))
                                                             #{k _85hotwsCta0JfYIjI4Ppi}#))
                                                 (cons '#(syntax-object
                                                          begin
                                                          ((top)
                                                           #(ribcage
                                                             #(k e1 e2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("34h"
                                                               "34i"
                                                               "34j"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(f
                                                               clause
                                                               clauses)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("34c"
                                                               "34d"
                                                               "34e"))
                                                           #(ribcage
                                                             #(e m1 m2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("348"
                                                               "349"
                                                               "34a"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("347")))
                                                          (hygiene guile))
                                                       (cons #{e1 _85hotwsCta0JfYIjI4Ppj}#
                                                             #{e2 _85hotwsCta0JfYIjI4Ppk}#))))
                                         #{tmp _85hotwsCta0JfYIjI4Ppe}#)
                                       (syntax-violation
                                         'case
                                         "bad clause"
                                         #{x _85hotwsCta0JfYIjI4Pof}#
                                         #{clause _85hotwsCta0JfYIjI4PpV}#)))))
                               (let ((#{tmp _85hotwsCta0JfYIjI4Pps}#
                                       (#{f _85hotwsCta0JfYIjI4PpS}#
                                         (car #{clauses _85hotwsCta0JfYIjI4PpW}#)
                                         (cdr #{clauses _85hotwsCta0JfYIjI4PpW}#))))
                                 (let ((#{tmp _85hotwsCta0JfYIjI4Ppv}#
                                         ($sc-dispatch
                                           #{clause _85hotwsCta0JfYIjI4PpV}#
                                           '(each-any any . each-any))))
                                   (if #{tmp _85hotwsCta0JfYIjI4Ppv}#
                                     (@apply
                                       (lambda (#{k _85hotwsCta0JfYIjI4Ppz}#
                                                #{e1 _85hotwsCta0JfYIjI4Pp0}#
                                                #{e2 _85hotwsCta0JfYIjI4Pp1}#)
                                         (list '#(syntax-object
                                                  if
                                                  ((top)
                                                   #(ribcage
                                                     #(k e1 e2)
                                                     #((top) (top) (top))
                                                     #("34m" "34n" "34o"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(rest)
                                                     #((top))
                                                     #("34l"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(f clause clauses)
                                                     #((top) (top) (top))
                                                     #("34c" "34d" "34e"))
                                                   #(ribcage
                                                     #(e m1 m2)
                                                     #((top) (top) (top))
                                                     #("348" "349" "34a"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("347")))
                                                  (hygiene guile))
                                               (list '#(syntax-object
                                                        memv
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("34m"
                                                             "34n"
                                                             "34o"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(rest)
                                                           #((top))
                                                           #("34l"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("34c"
                                                             "34d"
                                                             "34e"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("348"
                                                             "349"
                                                             "34a"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("347")))
                                                        (hygiene guile))
                                                     '#(syntax-object
                                                        t
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("34m"
                                                             "34n"
                                                             "34o"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(rest)
                                                           #((top))
                                                           #("34l"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("34c"
                                                             "34d"
                                                             "34e"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("348"
                                                             "349"
                                                             "34a"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("347")))
                                                        (hygiene guile))
                                                     (list '#(syntax-object
                                                              quote
                                                              ((top)
                                                               #(ribcage
                                                                 #(k e1 e2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("34m"
                                                                   "34n"
                                                                   "34o"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(rest)
                                                                 #((top))
                                                                 #("34l"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(f
                                                                   clause
                                                                   clauses)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("34c"
                                                                   "34d"
                                                                   "34e"))
                                                               #(ribcage
                                                                 #(e m1 m2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("348"
                                                                   "349"
                                                                   "34a"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(x)
                                                                 #((top))
                                                                 #("347")))
                                                              (hygiene guile))
                                                           #{k _85hotwsCta0JfYIjI4Ppz}#))
                                               (cons '#(syntax-object
                                                        begin
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("34m"
                                                             "34n"
                                                             "34o"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(rest)
                                                           #((top))
                                                           #("34l"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("34c"
                                                             "34d"
                                                             "34e"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("348"
                                                             "349"
                                                             "34a"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("347")))
                                                        (hygiene guile))
                                                     (cons #{e1 _85hotwsCta0JfYIjI4Pp0}#
                                                           #{e2 _85hotwsCta0JfYIjI4Pp1}#))
                                               #{tmp _85hotwsCta0JfYIjI4Pps}#))
                                       #{tmp _85hotwsCta0JfYIjI4Ppv}#)
                                     (syntax-violation
                                       'case
                                       "bad clause"
                                       #{x _85hotwsCta0JfYIjI4Pof}#
                                       #{clause _85hotwsCta0JfYIjI4PpV}#))))))))
                        (#{f _85hotwsCta0JfYIjI4PpS}#
                          #{m1 _85hotwsCta0JfYIjI4Pom}#
                          #{m2 _85hotwsCta0JfYIjI4Pon}#))))
                (let ((#{body _85hotwsCta0JfYIjI4Pop}#
                        #{tmp _85hotwsCta0JfYIjI4Poo}#))
                  (list '#(syntax-object
                           let
                           ((top)
                            #(ribcage () () ())
                            #(ribcage #(body) #((top)) #("34b"))
                            #(ribcage
                              #(e m1 m2)
                              #((top) (top) (top))
                              #("348" "349" "34a"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("347")))
                           (hygiene guile))
                        (list (list '#(syntax-object
                                       t
                                       ((top)
                                        #(ribcage () () ())
                                        #(ribcage #(body) #((top)) #("34b"))
                                        #(ribcage
                                          #(e m1 m2)
                                          #((top) (top) (top))
                                          #("348" "349" "34a"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("347")))
                                       (hygiene guile))
                                    #{e _85hotwsCta0JfYIjI4Pol}#))
                        #{body _85hotwsCta0JfYIjI4Pop}#))))
            #{tmp _85hotwsCta0JfYIjI4Poh}#)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            #{x _85hotwsCta0JfYIjI4Pof}#))))))

(define make-variable-transformer
  (lambda (#{proc _85hotwsCta0JfYIjI4PqE}#)
    (if (procedure? #{proc _85hotwsCta0JfYIjI4PqE}#)
      (letrec*
        ((#{trans _85hotwsCta0JfYIjI4PqF}#
           (lambda (#{x _85hotwsCta0JfYIjI4PqL}#)
             (#{proc _85hotwsCta0JfYIjI4PqE}#
               #{x _85hotwsCta0JfYIjI4PqL}#))))
        (begin
          (set-procedure-property!
            #{trans _85hotwsCta0JfYIjI4PqF}#
            'variable-transformer
            #t)
          #{trans _85hotwsCta0JfYIjI4PqF}#))
      (error "variable transformer not a procedure"
             #{proc _85hotwsCta0JfYIjI4PqE}#))))

(define identifier-syntax
  (make-syntax-transformer
    'identifier-syntax
    'macro
    (lambda (#{x _85hotwsCta0JfYIjI4Pqf}#)
      (let ((#{tmp _85hotwsCta0JfYIjI4Pqh}#
              ($sc-dispatch
                #{x _85hotwsCta0JfYIjI4Pqf}#
                '(_ any))))
        (if #{tmp _85hotwsCta0JfYIjI4Pqh}#
          (@apply
            (lambda (#{e _85hotwsCta0JfYIjI4Pql}#)
              (list '#(syntax-object
                       lambda
                       ((top)
                        #(ribcage #(e) #((top)) #("34u"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("34t")))
                       (hygiene guile))
                    '(#(syntax-object
                        x
                        ((top)
                         #(ribcage #(e) #((top)) #("34u"))
                         #(ribcage () () ())
                         #(ribcage #(x) #((top)) #("34t")))
                        (hygiene guile)))
                    '#((#(syntax-object
                          macro-type
                          ((top)
                           #(ribcage #(e) #((top)) #("34u"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("34t")))
                          (hygiene guile))
                        .
                        #(syntax-object
                          identifier-syntax
                          ((top)
                           #(ribcage #(e) #((top)) #("34u"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("34t")))
                          (hygiene guile))))
                    (list '#(syntax-object
                             syntax-case
                             ((top)
                              #(ribcage #(e) #((top)) #("34u"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("34t")))
                             (hygiene guile))
                          '#(syntax-object
                             x
                             ((top)
                              #(ribcage #(e) #((top)) #("34u"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("34t")))
                             (hygiene guile))
                          '()
                          (list '#(syntax-object
                                   id
                                   ((top)
                                    #(ribcage #(e) #((top)) #("34u"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("34t")))
                                   (hygiene guile))
                                '(#(syntax-object
                                    identifier?
                                    ((top)
                                     #(ribcage #(e) #((top)) #("34u"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("34t")))
                                    (hygiene guile))
                                  (#(syntax-object
                                     syntax
                                     ((top)
                                      #(ribcage #(e) #((top)) #("34u"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("34t")))
                                     (hygiene guile))
                                   #(syntax-object
                                     id
                                     ((top)
                                      #(ribcage #(e) #((top)) #("34u"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("34t")))
                                     (hygiene guile))))
                                (list '#(syntax-object
                                         syntax
                                         ((top)
                                          #(ribcage #(e) #((top)) #("34u"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("34t")))
                                         (hygiene guile))
                                      #{e _85hotwsCta0JfYIjI4Pql}#))
                          (list '(#(syntax-object
                                    _
                                    ((top)
                                     #(ribcage #(e) #((top)) #("34u"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("34t")))
                                    (hygiene guile))
                                  #(syntax-object
                                    x
                                    ((top)
                                     #(ribcage #(e) #((top)) #("34u"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("34t")))
                                    (hygiene guile))
                                  #(syntax-object
                                    ...
                                    ((top)
                                     #(ribcage #(e) #((top)) #("34u"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("34t")))
                                    (hygiene guile)))
                                (list '#(syntax-object
                                         syntax
                                         ((top)
                                          #(ribcage #(e) #((top)) #("34u"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("34t")))
                                         (hygiene guile))
                                      (cons #{e _85hotwsCta0JfYIjI4Pql}#
                                            '(#(syntax-object
                                                x
                                                ((top)
                                                 #(ribcage
                                                   #(e)
                                                   #((top))
                                                   #("34u"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("34t")))
                                                (hygiene guile))
                                              #(syntax-object
                                                ...
                                                ((top)
                                                 #(ribcage
                                                   #(e)
                                                   #((top))
                                                   #("34u"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("34t")))
                                                (hygiene guile)))))))))
            #{tmp _85hotwsCta0JfYIjI4Pqh}#)
          (let ((#{tmp _85hotwsCta0JfYIjI4Pqm}#
                  ($sc-dispatch
                    #{x _85hotwsCta0JfYIjI4Pqf}#
                    '(_ (any any)
                        ((#(free-id
                            #(syntax-object
                              set!
                              ((top)
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("34t")))
                              (hygiene guile)))
                          any
                          any)
                         any)))))
            (if (if #{tmp _85hotwsCta0JfYIjI4Pqm}#
                  (@apply
                    (lambda (#{id _85hotwsCta0JfYIjI4Pqq}#
                             #{exp1 _85hotwsCta0JfYIjI4Pqr}#
                             #{var _85hotwsCta0JfYIjI4Pqs}#
                             #{val _85hotwsCta0JfYIjI4Pqt}#
                             #{exp2 _85hotwsCta0JfYIjI4Pqu}#)
                      (if (identifier? #{id _85hotwsCta0JfYIjI4Pqq}#)
                        (identifier? #{var _85hotwsCta0JfYIjI4Pqs}#)
                        #f))
                    #{tmp _85hotwsCta0JfYIjI4Pqm}#)
                  #f)
              (@apply
                (lambda (#{id _85hotwsCta0JfYIjI4Pqv}#
                         #{exp1 _85hotwsCta0JfYIjI4Pqw}#
                         #{var _85hotwsCta0JfYIjI4Pqx}#
                         #{val _85hotwsCta0JfYIjI4Pqy}#
                         #{exp2 _85hotwsCta0JfYIjI4Pqz}#)
                  (list '#(syntax-object
                           make-variable-transformer
                           ((top)
                            #(ribcage
                              #(id exp1 var val exp2)
                              #((top) (top) (top) (top) (top))
                              #("350" "351" "352" "353" "354"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("34t")))
                           (hygiene guile))
                        (list '#(syntax-object
                                 lambda
                                 ((top)
                                  #(ribcage
                                    #(id exp1 var val exp2)
                                    #((top) (top) (top) (top) (top))
                                    #("350" "351" "352" "353" "354"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("34t")))
                                 (hygiene guile))
                              '(#(syntax-object
                                  x
                                  ((top)
                                   #(ribcage
                                     #(id exp1 var val exp2)
                                     #((top) (top) (top) (top) (top))
                                     #("350" "351" "352" "353" "354"))
                                   #(ribcage () () ())
                                   #(ribcage #(x) #((top)) #("34t")))
                                  (hygiene guile)))
                              '#((#(syntax-object
                                    macro-type
                                    ((top)
                                     #(ribcage
                                       #(id exp1 var val exp2)
                                       #((top) (top) (top) (top) (top))
                                       #("350" "351" "352" "353" "354"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("34t")))
                                    (hygiene guile))
                                  .
                                  #(syntax-object
                                    variable-transformer
                                    ((top)
                                     #(ribcage
                                       #(id exp1 var val exp2)
                                       #((top) (top) (top) (top) (top))
                                       #("350" "351" "352" "353" "354"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("34t")))
                                    (hygiene guile))))
                              (list '#(syntax-object
                                       syntax-case
                                       ((top)
                                        #(ribcage
                                          #(id exp1 var val exp2)
                                          #((top) (top) (top) (top) (top))
                                          #("350" "351" "352" "353" "354"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("34t")))
                                       (hygiene guile))
                                    '#(syntax-object
                                       x
                                       ((top)
                                        #(ribcage
                                          #(id exp1 var val exp2)
                                          #((top) (top) (top) (top) (top))
                                          #("350" "351" "352" "353" "354"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("34t")))
                                       (hygiene guile))
                                    '(#(syntax-object
                                        set!
                                        ((top)
                                         #(ribcage
                                           #(id exp1 var val exp2)
                                           #((top) (top) (top) (top) (top))
                                           #("350" "351" "352" "353" "354"))
                                         #(ribcage () () ())
                                         #(ribcage #(x) #((top)) #("34t")))
                                        (hygiene guile)))
                                    (list (list '#(syntax-object
                                                   set!
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("350"
                                                        "351"
                                                        "352"
                                                        "353"
                                                        "354"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("34t")))
                                                   (hygiene guile))
                                                #{var _85hotwsCta0JfYIjI4Pqx}#
                                                #{val _85hotwsCta0JfYIjI4Pqy}#)
                                          (list '#(syntax-object
                                                   syntax
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("350"
                                                        "351"
                                                        "352"
                                                        "353"
                                                        "354"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("34t")))
                                                   (hygiene guile))
                                                #{exp2 _85hotwsCta0JfYIjI4Pqz}#))
                                    (list (cons #{id _85hotwsCta0JfYIjI4Pqv}#
                                                '(#(syntax-object
                                                    x
                                                    ((top)
                                                     #(ribcage
                                                       #(id exp1 var val exp2)
                                                       #((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                       #("350"
                                                         "351"
                                                         "352"
                                                         "353"
                                                         "354"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("34t")))
                                                    (hygiene guile))
                                                  #(syntax-object
                                                    ...
                                                    ((top)
                                                     #(ribcage
                                                       #(id exp1 var val exp2)
                                                       #((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                       #("350"
                                                         "351"
                                                         "352"
                                                         "353"
                                                         "354"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("34t")))
                                                    (hygiene guile))))
                                          (list '#(syntax-object
                                                   syntax
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("350"
                                                        "351"
                                                        "352"
                                                        "353"
                                                        "354"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("34t")))
                                                   (hygiene guile))
                                                (cons #{exp1 _85hotwsCta0JfYIjI4Pqw}#
                                                      '(#(syntax-object
                                                          x
                                                          ((top)
                                                           #(ribcage
                                                             #(id
                                                               exp1
                                                               var
                                                               val
                                                               exp2)
                                                             #((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                             #("350"
                                                               "351"
                                                               "352"
                                                               "353"
                                                               "354"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("34t")))
                                                          (hygiene guile))
                                                        #(syntax-object
                                                          ...
                                                          ((top)
                                                           #(ribcage
                                                             #(id
                                                               exp1
                                                               var
                                                               val
                                                               exp2)
                                                             #((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                             #("350"
                                                               "351"
                                                               "352"
                                                               "353"
                                                               "354"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("34t")))
                                                          (hygiene guile))))))
                                    (list #{id _85hotwsCta0JfYIjI4Pqv}#
                                          (list '#(syntax-object
                                                   identifier?
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("350"
                                                        "351"
                                                        "352"
                                                        "353"
                                                        "354"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("34t")))
                                                   (hygiene guile))
                                                (list '#(syntax-object
                                                         syntax
                                                         ((top)
                                                          #(ribcage
                                                            #(id
                                                              exp1
                                                              var
                                                              val
                                                              exp2)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("350"
                                                              "351"
                                                              "352"
                                                              "353"
                                                              "354"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(x)
                                                            #((top))
                                                            #("34t")))
                                                         (hygiene guile))
                                                      #{id _85hotwsCta0JfYIjI4Pqv}#))
                                          (list '#(syntax-object
                                                   syntax
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("350"
                                                        "351"
                                                        "352"
                                                        "353"
                                                        "354"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("34t")))
                                                   (hygiene guile))
                                                #{exp1 _85hotwsCta0JfYIjI4Pqw}#))))))
                #{tmp _85hotwsCta0JfYIjI4Pqm}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{x _85hotwsCta0JfYIjI4Pqf}#))))))))

(define define*
  (make-syntax-transformer
    'define*
    'macro
    (lambda (#{x _85hotwsCta0JfYIjI4PrK}#)
      (let ((#{tmp _85hotwsCta0JfYIjI4PrM}#
              ($sc-dispatch
                #{x _85hotwsCta0JfYIjI4PrK}#
                '(_ (any . any) any . each-any))))
        (if #{tmp _85hotwsCta0JfYIjI4PrM}#
          (@apply
            (lambda (#{id _85hotwsCta0JfYIjI4PrQ}#
                     #{args _85hotwsCta0JfYIjI4PrR}#
                     #{b0 _85hotwsCta0JfYIjI4PrS}#
                     #{b1 _85hotwsCta0JfYIjI4PrT}#)
              (list '#(syntax-object
                       define
                       ((top)
                        #(ribcage
                          #(id args b0 b1)
                          #((top) (top) (top) (top))
                          #("356" "357" "358" "359"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("355")))
                       (hygiene guile))
                    #{id _85hotwsCta0JfYIjI4PrQ}#
                    (cons '#(syntax-object
                             lambda*
                             ((top)
                              #(ribcage
                                #(id args b0 b1)
                                #((top) (top) (top) (top))
                                #("356" "357" "358" "359"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("355")))
                             (hygiene guile))
                          (cons #{args _85hotwsCta0JfYIjI4PrR}#
                                (cons #{b0 _85hotwsCta0JfYIjI4PrS}#
                                      #{b1 _85hotwsCta0JfYIjI4PrT}#)))))
            #{tmp _85hotwsCta0JfYIjI4PrM}#)
          (let ((#{tmp _85hotwsCta0JfYIjI4PrU}#
                  ($sc-dispatch
                    #{x _85hotwsCta0JfYIjI4PrK}#
                    '(_ any any))))
            (if (if #{tmp _85hotwsCta0JfYIjI4PrU}#
                  (@apply
                    (lambda (#{id _85hotwsCta0JfYIjI4PrY}#
                             #{val _85hotwsCta0JfYIjI4PrZ}#)
                      (identifier?
                        '#(syntax-object
                           x
                           ((top)
                            #(ribcage
                              #(id val)
                              #((top) (top))
                              #("35a" "35b"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("355")))
                           (hygiene guile))))
                    #{tmp _85hotwsCta0JfYIjI4PrU}#)
                  #f)
              (@apply
                (lambda (#{id _85hotwsCta0JfYIjI4Pra}#
                         #{val _85hotwsCta0JfYIjI4Prb}#)
                  (list '#(syntax-object
                           define
                           ((top)
                            #(ribcage
                              #(id val)
                              #((top) (top))
                              #("35c" "35d"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("355")))
                           (hygiene guile))
                        #{id _85hotwsCta0JfYIjI4Pra}#
                        #{val _85hotwsCta0JfYIjI4Prb}#))
                #{tmp _85hotwsCta0JfYIjI4PrU}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{x _85hotwsCta0JfYIjI4PrK}#))))))))

