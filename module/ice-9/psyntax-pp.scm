(eval-when (compile) (set-current-module (resolve-module (quote (guile)))))
(if #f #f)

(let ((session-id-4255 (if #f #f))
      (transformer-environment-4316 (if #f #f)))
  (letrec*
    ((top-level-eval-hook-4253
       (lambda (x-27423 mod-27424)
         (primitive-eval x-27423)))
     (get-global-definition-hook-4257
       (lambda (symbol-15686 module-15687)
         (begin
           (if (if (not module-15687) (current-module) #f)
             (warn "module system is booted, we should have a module"
                   symbol-15686))
           (let ((v-15688
                   (module-variable
                     (if module-15687
                       (resolve-module (cdr module-15687))
                       (current-module))
                     symbol-15686)))
             (if v-15688
               (if (variable-bound? v-15688)
                 (let ((val-15690 (variable-ref v-15688)))
                   (if (macro? val-15690)
                     (if (macro-type val-15690)
                       (cons (macro-type val-15690)
                             (macro-binding val-15690))
                       #f)
                     #f))
                 #f)
               #f)))))
     (maybe-name-value!-4259
       (lambda (name-15967 val-15968)
         (if (if (struct? val-15968)
               (eq? (struct-vtable val-15968)
                    (vector-ref %expanded-vtables 13))
               #f)
           (let ((meta-15975 (struct-ref val-15968 1)))
             (if (not (assq 'name meta-15975))
               (let ((v-15980
                       (cons (cons 'name name-15967) meta-15975)))
                 (struct-set! val-15968 1 v-15980)))))))
     (build-application-4261
       (lambda (source-15692 fun-exp-15693 arg-exps-15694)
         (make-struct/no-tail
           (vector-ref %expanded-vtables 11)
           source-15692
           fun-exp-15693
           arg-exps-15694)))
     (build-conditional-4262
       (lambda (source-15700
                test-exp-15701
                then-exp-15702
                else-exp-15703)
         (make-struct/no-tail
           (vector-ref %expanded-vtables 10)
           source-15700
           test-exp-15701
           then-exp-15702
           else-exp-15703)))
     (build-dynlet-4263
       (lambda (source-15710 fluids-15711 vals-15712 body-15713)
         (make-struct/no-tail
           (vector-ref %expanded-vtables 17)
           source-15710
           fluids-15711
           vals-15712
           body-15713)))
     (build-lexical-reference-4264
       (lambda (type-27425 source-27426 name-27427 var-27428)
         (make-struct/no-tail
           (vector-ref %expanded-vtables 3)
           source-27426
           name-27427
           var-27428)))
     (build-lexical-assignment-4265
       (lambda (source-15720 name-15721 var-15722 exp-15723)
         (begin
           (if (if (struct? exp-15723)
                 (eq? (struct-vtable exp-15723)
                      (vector-ref %expanded-vtables 13))
                 #f)
             (let ((meta-15739 (struct-ref exp-15723 1)))
               (if (not (assq 'name meta-15739))
                 (let ((v-15746
                         (cons (cons 'name name-15721) meta-15739)))
                   (struct-set! exp-15723 1 v-15746)))))
           (make-struct/no-tail
             (vector-ref %expanded-vtables 4)
             source-15720
             name-15721
             var-15722
             exp-15723))))
     (analyze-variable-4266
       (lambda (mod-27434
                var-27435
                modref-cont-27436
                bare-cont-27437)
         (if (not mod-27434)
           (bare-cont-27437 var-27435)
           (let ((kind-27438 (car mod-27434))
                 (mod-27439 (cdr mod-27434)))
             (if (eqv? kind-27438 'public)
               (modref-cont-27436 mod-27439 var-27435 #t)
               (if (eqv? kind-27438 'private)
                 (if (not (equal? mod-27439 (module-name (current-module))))
                   (modref-cont-27436 mod-27439 var-27435 #f)
                   (bare-cont-27437 var-27435))
                 (if (eqv? kind-27438 'bare)
                   (bare-cont-27437 var-27435)
                   (if (eqv? kind-27438 'hygiene)
                     (if (if (not (equal?
                                    mod-27439
                                    (module-name (current-module))))
                           (module-variable
                             (resolve-module mod-27439)
                             var-27435)
                           #f)
                       (modref-cont-27436 mod-27439 var-27435 #f)
                       (bare-cont-27437 var-27435))
                     (syntax-violation
                       #f
                       "bad module kind"
                       var-27435
                       mod-27439)))))))))
     (build-global-reference-4267
       (lambda (source-27466 var-27467 mod-27468)
         (analyze-variable-4266
           mod-27468
           var-27467
           (lambda (mod-27471 var-27472 public?-27473)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 5)
               source-27466
               mod-27471
               var-27472
               public?-27473))
           (lambda (var-27481)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 7)
               source-27466
               var-27481)))))
     (build-global-assignment-4268
       (lambda (source-15755 var-15756 exp-15757 mod-15758)
         (begin
           (if (if (struct? exp-15757)
                 (eq? (struct-vtable exp-15757)
                      (vector-ref %expanded-vtables 13))
                 #f)
             (let ((meta-15774 (struct-ref exp-15757 1)))
               (if (not (assq 'name meta-15774))
                 (let ((v-15781
                         (cons (cons 'name var-15756) meta-15774)))
                   (struct-set! exp-15757 1 v-15781)))))
           (analyze-variable-4266
             mod-15758
             var-15756
             (lambda (mod-15786 var-15787 public?-15788)
               (make-struct/no-tail
                 (vector-ref %expanded-vtables 6)
                 source-15755
                 mod-15786
                 var-15787
                 public?-15788
                 exp-15757))
             (lambda (var-15796)
               (make-struct/no-tail
                 (vector-ref %expanded-vtables 8)
                 source-15755
                 var-15796
                 exp-15757))))))
     (build-global-definition-4269
       (lambda (source-27487 var-27488 exp-27489)
         (begin
           (if (if (struct? exp-27489)
                 (eq? (struct-vtable exp-27489)
                      (vector-ref %expanded-vtables 13))
                 #f)
             (let ((meta-27505 (struct-ref exp-27489 1)))
               (if (not (assq 'name meta-27505))
                 (let ((v-27512
                         (cons (cons 'name var-27488) meta-27505)))
                   (struct-set! exp-27489 1 v-27512)))))
           (make-struct/no-tail
             (vector-ref %expanded-vtables 9)
             source-27487
             var-27488
             exp-27489))))
     (build-simple-lambda-4270
       (lambda (src-15802
                req-15803
                rest-15804
                vars-15805
                meta-15806
                exp-15807)
         (let ((body-15813
                 (make-struct/no-tail
                   (vector-ref %expanded-vtables 14)
                   src-15802
                   req-15803
                   #f
                   rest-15804
                   #f
                   '()
                   vars-15805
                   exp-15807
                   #f)))
           (make-struct/no-tail
             (vector-ref %expanded-vtables 13)
             src-15802
             meta-15806
             body-15813))))
     (build-sequence-4275
       (lambda (src-27520 exps-27521)
         (if (null? (cdr exps-27521))
           (car exps-27521)
           (make-struct/no-tail
             (vector-ref %expanded-vtables 12)
             src-27520
             exps-27521))))
     (build-let-4276
       (lambda (src-15825
                ids-15826
                vars-15827
                val-exps-15828
                body-exp-15829)
         (begin
           (for-each
             maybe-name-value!-4259
             ids-15826
             val-exps-15828)
           (if (null? vars-15827)
             body-exp-15829
             (make-struct/no-tail
               (vector-ref %expanded-vtables 15)
               src-15825
               ids-15826
               vars-15827
               val-exps-15828
               body-exp-15829)))))
     (build-named-let-4277
       (lambda (src-15853
                ids-15854
                vars-15855
                val-exps-15856
                body-exp-15857)
         (let ((f-15858 (car vars-15855))
               (f-name-15859 (car ids-15854))
               (vars-15860 (cdr vars-15855))
               (ids-15861 (cdr ids-15854)))
           (let ((proc-15862
                   (let ((body-15882
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 14)
                             src-15853
                             ids-15861
                             #f
                             #f
                             #f
                             '()
                             vars-15860
                             body-exp-15857
                             #f)))
                     (make-struct/no-tail
                       (vector-ref %expanded-vtables 13)
                       src-15853
                       '()
                       body-15882))))
             (begin
               (if (if (struct? proc-15862)
                     (eq? (struct-vtable proc-15862)
                          (vector-ref %expanded-vtables 13))
                     #f)
                 (let ((meta-15906 (struct-ref proc-15862 1)))
                   (if (not (assq 'name meta-15906))
                     (let ((v-15913
                             (cons (cons 'name f-name-15859) meta-15906)))
                       (struct-set! proc-15862 1 v-15913)))))
               (for-each
                 maybe-name-value!-4259
                 ids-15861
                 val-exps-15856)
               (let ((names-15937 (list f-name-15859))
                     (gensyms-15938 (list f-15858))
                     (vals-15939 (list proc-15862))
                     (body-15940
                       (let ((fun-exp-15944
                               (make-struct/no-tail
                                 (vector-ref %expanded-vtables 3)
                                 src-15853
                                 f-name-15859
                                 f-15858)))
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 11)
                           src-15853
                           fun-exp-15944
                           val-exps-15856))))
                 (make-struct/no-tail
                   (vector-ref %expanded-vtables 16)
                   src-15853
                   #f
                   names-15937
                   gensyms-15938
                   vals-15939
                   body-15940)))))))
     (build-letrec-4278
       (lambda (src-15960
                in-order?-15961
                ids-15962
                vars-15963
                val-exps-15964
                body-exp-15965)
         (if (null? vars-15963)
           body-exp-15965
           (begin
             (for-each
               maybe-name-value!-4259
               ids-15962
               val-exps-15964)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 16)
               src-15960
               in-order?-15961
               ids-15962
               vars-15963
               val-exps-15964
               body-exp-15965)))))
     (source-annotation-4287
       (lambda (x-15991)
         (if (if (vector? x-15991)
               (if (= (vector-length x-15991) 4)
                 (eq? (vector-ref x-15991 0) 'syntax-object)
                 #f)
               #f)
           (source-annotation-4287 (vector-ref x-15991 1))
           (if (pair? x-15991)
             (let ((props-16006 (source-properties x-15991)))
               (if (pair? props-16006) props-16006 #f))
             #f))))
     (extend-env-4288
       (lambda (labels-16008 bindings-16009 r-16010)
         (if (null? labels-16008)
           r-16010
           (extend-env-4288
             (cdr labels-16008)
             (cdr bindings-16009)
             (cons (cons (car labels-16008) (car bindings-16009))
                   r-16010)))))
     (extend-var-env-4289
       (lambda (labels-16011 vars-16012 r-16013)
         (if (null? labels-16011)
           r-16013
           (extend-var-env-4289
             (cdr labels-16011)
             (cdr vars-16012)
             (cons (cons (car labels-16011)
                         (cons 'lexical (car vars-16012)))
                   r-16013)))))
     (macros-only-env-4290
       (lambda (r-16014)
         (if (null? r-16014)
           '()
           (let ((a-16015 (car r-16014)))
             (if (eq? (car (cdr a-16015)) 'macro)
               (cons a-16015
                     (macros-only-env-4290 (cdr r-16014)))
               (macros-only-env-4290 (cdr r-16014)))))))
     (global-extend-4292
       (lambda (type-16017 sym-16018 val-16019)
         (module-define!
           (current-module)
           sym-16018
           (make-syntax-transformer
             sym-16018
             type-16017
             val-16019))))
     (id?-4294
       (lambda (x-9600)
         (if (symbol? x-9600)
           #t
           (if (if (vector? x-9600)
                 (if (= (vector-length x-9600) 4)
                   (eq? (vector-ref x-9600 0) 'syntax-object)
                   #f)
                 #f)
             (symbol? (vector-ref x-9600 1))
             #f))))
     (gen-labels-4297
       (lambda (ls-16029)
         (if (null? ls-16029)
           '()
           (cons (string-append
                   "l-"
                   (session-id-4255)
                   (symbol->string (gensym "-")))
                 (gen-labels-4297 (cdr ls-16029))))))
     (make-binding-wrap-4308
       (lambda (ids-16033 labels-16034 w-16035)
         (if (null? ids-16033)
           w-16035
           (cons (car w-16035)
                 (cons (let ((labelvec-16036 (list->vector labels-16034)))
                         (let ((n-16037 (vector-length labelvec-16036)))
                           (let ((symnamevec-16038 (make-vector n-16037))
                                 (marksvec-16039 (make-vector n-16037)))
                             (begin
                               (letrec*
                                 ((f-16040
                                    (lambda (ids-16043 i-16044)
                                      (if (not (null? ids-16043))
                                        (call-with-values
                                          (lambda ()
                                            (let ((x-16047 (car ids-16043)))
                                              (if (if (vector? x-16047)
                                                    (if (= (vector-length
                                                             x-16047)
                                                           4)
                                                      (eq? (vector-ref
                                                             x-16047
                                                             0)
                                                           'syntax-object)
                                                      #f)
                                                    #f)
                                                (values
                                                  (vector-ref x-16047 1)
                                                  (let ((m1-16063
                                                          (car w-16035))
                                                        (m2-16064
                                                          (car (vector-ref
                                                                 x-16047
                                                                 2))))
                                                    (if (null? m2-16064)
                                                      m1-16063
                                                      (append
                                                        m1-16063
                                                        m2-16064))))
                                                (values
                                                  x-16047
                                                  (car w-16035)))))
                                          (lambda (symname-16084 marks-16085)
                                            (begin
                                              (vector-set!
                                                symnamevec-16038
                                                i-16044
                                                symname-16084)
                                              (vector-set!
                                                marksvec-16039
                                                i-16044
                                                marks-16085)
                                              (f-16040
                                                (cdr ids-16043)
                                                (#{1+}# i-16044)))))))))
                                 (f-16040 ids-16033 0))
                               (vector
                                 'ribcage
                                 symnamevec-16038
                                 marksvec-16039
                                 labelvec-16036)))))
                       (cdr w-16035))))))
     (join-wraps-4310
       (lambda (w1-16094 w2-16095)
         (let ((m1-16096 (car w1-16094))
               (s1-16097 (cdr w1-16094)))
           (if (null? m1-16096)
             (if (null? s1-16097)
               w2-16095
               (cons (car w2-16095)
                     (let ((m2-16104 (cdr w2-16095)))
                       (if (null? m2-16104)
                         s1-16097
                         (append s1-16097 m2-16104)))))
             (cons (let ((m2-16113 (car w2-16095)))
                     (if (null? m2-16113)
                       m1-16096
                       (append m1-16096 m2-16113)))
                   (let ((m2-16122 (cdr w2-16095)))
                     (if (null? m2-16122)
                       s1-16097
                       (append s1-16097 m2-16122))))))))
     (same-marks?-4312
       (lambda (x-16127 y-16128)
         (if (eq? x-16127 y-16128)
           (eq? x-16127 y-16128)
           (if (not (null? x-16127))
             (if (not (null? y-16128))
               (if (eq? (car x-16127) (car y-16128))
                 (same-marks?-4312 (cdr x-16127) (cdr y-16128))
                 #f)
               #f)
             #f))))
     (id-var-name-4313
       (lambda (id-16136 w-16137)
         (letrec*
           ((search-16138
              (lambda (sym-16199 subst-16200 marks-16201)
                (if (null? subst-16200)
                  (values #f marks-16201)
                  (let ((fst-16202 (car subst-16200)))
                    (if (eq? fst-16202 'shift)
                      (search-16138
                        sym-16199
                        (cdr subst-16200)
                        (cdr marks-16201))
                      (let ((symnames-16204 (vector-ref fst-16202 1)))
                        (if (vector? symnames-16204)
                          (let ((n-16216 (vector-length symnames-16204)))
                            (letrec*
                              ((f-16217
                                 (lambda (i-16219)
                                   (if (= i-16219 n-16216)
                                     (search-16138
                                       sym-16199
                                       (cdr subst-16200)
                                       marks-16201)
                                     (if (if (eq? (vector-ref
                                                    symnames-16204
                                                    i-16219)
                                                  sym-16199)
                                           (same-marks?-4312
                                             marks-16201
                                             (vector-ref
                                               (vector-ref fst-16202 2)
                                               i-16219))
                                           #f)
                                       (values
                                         (vector-ref
                                           (vector-ref fst-16202 3)
                                           i-16219)
                                         marks-16201)
                                       (f-16217 (#{1+}# i-16219)))))))
                              (f-16217 0)))
                          (letrec*
                            ((f-16252
                               (lambda (symnames-16254 i-16255)
                                 (if (null? symnames-16254)
                                   (search-16138
                                     sym-16199
                                     (cdr subst-16200)
                                     marks-16201)
                                   (if (if (eq? (car symnames-16254) sym-16199)
                                         (same-marks?-4312
                                           marks-16201
                                           (list-ref
                                             (vector-ref fst-16202 2)
                                             i-16255))
                                         #f)
                                     (values
                                       (list-ref
                                         (vector-ref fst-16202 3)
                                         i-16255)
                                       marks-16201)
                                     (f-16252
                                       (cdr symnames-16254)
                                       (#{1+}# i-16255)))))))
                            (f-16252 symnames-16204 0))))))))))
           (if (symbol? id-16136)
             (let ((t-16141
                     (search-16138
                       id-16136
                       (cdr w-16137)
                       (car w-16137))))
               (if t-16141 t-16141 id-16136))
             (if (if (vector? id-16136)
                   (if (= (vector-length id-16136) 4)
                     (eq? (vector-ref id-16136 0) 'syntax-object)
                     #f)
                   #f)
               (let ((id-16156 (vector-ref id-16136 1))
                     (w1-16157 (vector-ref id-16136 2)))
                 (let ((marks-16158
                         (let ((m1-16168 (car w-16137))
                               (m2-16169 (car w1-16157)))
                           (if (null? m2-16169)
                             m1-16168
                             (append m1-16168 m2-16169)))))
                   (call-with-values
                     (lambda ()
                       (search-16138 id-16156 (cdr w-16137) marks-16158))
                     (lambda (new-id-16185 marks-16186)
                       (if new-id-16185
                         new-id-16185
                         (let ((t-16194
                                 (search-16138
                                   id-16156
                                   (cdr w1-16157)
                                   marks-16186)))
                           (if t-16194 t-16194 id-16156)))))))
               (syntax-violation
                 'id-var-name
                 "invalid id"
                 id-16136))))))
     (locally-bound-identifiers-4314
       (lambda (w-16277 mod-16278)
         (letrec*
           ((scan-16279
              (lambda (subst-16284 results-16285)
                (if (null? subst-16284)
                  results-16285
                  (let ((fst-16286 (car subst-16284)))
                    (if (eq? fst-16286 'shift)
                      (scan-16279 (cdr subst-16284) results-16285)
                      (let ((symnames-16288 (vector-ref fst-16286 1))
                            (marks-16289 (vector-ref fst-16286 2)))
                        (if (vector? symnames-16288)
                          (scan-vector-rib-16281
                            subst-16284
                            symnames-16288
                            marks-16289
                            results-16285)
                          (scan-list-rib-16280
                            subst-16284
                            symnames-16288
                            marks-16289
                            results-16285))))))))
            (scan-list-rib-16280
              (lambda (subst-16387
                       symnames-16388
                       marks-16389
                       results-16390)
                (letrec*
                  ((f-16391
                     (lambda (symnames-16491 marks-16492 results-16493)
                       (if (null? symnames-16491)
                         (scan-16279 (cdr subst-16387) results-16493)
                         (f-16391
                           (cdr symnames-16491)
                           (cdr marks-16492)
                           (cons (wrap-4323
                                   (car symnames-16491)
                                   (let ((w-16501
                                           (cons (car marks-16492)
                                                 subst-16387)))
                                     (cons (cons #f (car w-16501))
                                           (cons 'shift (cdr w-16501))))
                                   mod-16278)
                                 results-16493))))))
                  (f-16391
                    symnames-16388
                    marks-16389
                    results-16390))))
            (scan-vector-rib-16281
              (lambda (subst-16502
                       symnames-16503
                       marks-16504
                       results-16505)
                (let ((n-16506 (vector-length symnames-16503)))
                  (letrec*
                    ((f-16507
                       (lambda (i-16590 results-16591)
                         (if (= i-16590 n-16506)
                           (scan-16279 (cdr subst-16502) results-16591)
                           (f-16507
                             (#{1+}# i-16590)
                             (cons (wrap-4323
                                     (vector-ref symnames-16503 i-16590)
                                     (let ((w-16599
                                             (cons (vector-ref
                                                     marks-16504
                                                     i-16590)
                                                   subst-16502)))
                                       (cons (cons #f (car w-16599))
                                             (cons 'shift (cdr w-16599))))
                                     mod-16278)
                                   results-16591))))))
                    (f-16507 0 results-16505))))))
           (scan-16279 (cdr w-16277) '()))))
     (valid-bound-ids?-4320
       (lambda (ids-16600)
         (if (letrec*
               ((all-ids?-16601
                  (lambda (ids-16763)
                    (if (null? ids-16763)
                      (null? ids-16763)
                      (if (let ((x-16774 (car ids-16763)))
                            (if (symbol? x-16774)
                              #t
                              (if (if (vector? x-16774)
                                    (if (= (vector-length x-16774) 4)
                                      (eq? (vector-ref x-16774 0)
                                           'syntax-object)
                                      #f)
                                    #f)
                                (symbol? (vector-ref x-16774 1))
                                #f)))
                        (all-ids?-16601 (cdr ids-16763))
                        #f)))))
               (all-ids?-16601 ids-16600))
           (distinct-bound-ids?-4321 ids-16600)
           #f)))
     (distinct-bound-ids?-4321
       (lambda (ids-16902)
         (letrec*
           ((distinct?-16903
              (lambda (ids-17015)
                (if (null? ids-17015)
                  (null? ids-17015)
                  (if (not (bound-id-member?-4322
                             (car ids-17015)
                             (cdr ids-17015)))
                    (distinct?-16903 (cdr ids-17015))
                    #f)))))
           (distinct?-16903 ids-16902))))
     (bound-id-member?-4322
       (lambda (x-17225 list-17226)
         (if (not (null? list-17226))
           (let ((t-17227
                   (let ((j-17308 (car list-17226)))
                     (if (if (if (vector? x-17225)
                               (if (= (vector-length x-17225) 4)
                                 (eq? (vector-ref x-17225 0) 'syntax-object)
                                 #f)
                               #f)
                           (if (vector? j-17308)
                             (if (= (vector-length j-17308) 4)
                               (eq? (vector-ref j-17308 0) 'syntax-object)
                               #f)
                             #f)
                           #f)
                       (if (eq? (vector-ref x-17225 1)
                                (vector-ref j-17308 1))
                         (same-marks?-4312
                           (car (vector-ref x-17225 2))
                           (car (vector-ref j-17308 2)))
                         #f)
                       (eq? x-17225 j-17308)))))
             (if t-17227
               t-17227
               (bound-id-member?-4322 x-17225 (cdr list-17226))))
           #f)))
     (wrap-4323
       (lambda (x-17352 w-17353 defmod-17354)
         (if (if (null? (car w-17353))
               (null? (cdr w-17353))
               #f)
           x-17352
           (if (if (vector? x-17352)
                 (if (= (vector-length x-17352) 4)
                   (eq? (vector-ref x-17352 0) 'syntax-object)
                   #f)
                 #f)
             (let ((expression-17368 (vector-ref x-17352 1))
                   (wrap-17369
                     (join-wraps-4310 w-17353 (vector-ref x-17352 2)))
                   (module-17370 (vector-ref x-17352 3)))
               (vector
                 'syntax-object
                 expression-17368
                 wrap-17369
                 module-17370))
             (if (null? x-17352)
               x-17352
               (vector
                 'syntax-object
                 x-17352
                 w-17353
                 defmod-17354))))))
     (source-wrap-4324
       (lambda (x-17387 w-17388 s-17389 defmod-17390)
         (wrap-4323
           (begin
             (if (if (pair? x-17387) s-17389 #f)
               (set-source-properties! x-17387 s-17389))
             x-17387)
           w-17388
           defmod-17390)))
     (expand-sequence-4325
       (lambda (body-27526 r-27527 w-27528 s-27529 mod-27530)
         (build-sequence-4275
           s-27529
           (letrec*
             ((dobody-27610
                (lambda (body-27950 r-27951 w-27952 mod-27953)
                  (if (null? body-27950)
                    '()
                    (let ((first-27954
                            (let ((e-27958 (car body-27950)))
                              (call-with-values
                                (lambda ()
                                  (syntax-type-4329
                                    e-27958
                                    r-27951
                                    w-27952
                                    (source-annotation-4287 e-27958)
                                    #f
                                    mod-27953
                                    #f))
                                (lambda (type-27965
                                         value-27966
                                         form-27967
                                         e-27968
                                         w-27969
                                         s-27970
                                         mod-27971)
                                  (expand-expr-4331
                                    type-27965
                                    value-27966
                                    form-27967
                                    e-27968
                                    r-27951
                                    w-27969
                                    s-27970
                                    mod-27971))))))
                      (cons first-27954
                            (dobody-27610
                              (cdr body-27950)
                              r-27951
                              w-27952
                              mod-27953)))))))
             (dobody-27610
               body-27526
               r-27527
               w-27528
               mod-27530)))))
     (expand-top-sequence-4326
       (lambda (body-17408
                r-17409
                w-17410
                s-17411
                m-17412
                esew-17413
                mod-17414)
         (letrec*
           ((scan-17415
              (lambda (body-17546
                       r-17547
                       w-17548
                       s-17549
                       m-17550
                       esew-17551
                       mod-17552
                       exps-17553)
                (if (null? body-17546)
                  exps-17553
                  (call-with-values
                    (lambda ()
                      (call-with-values
                        (lambda ()
                          (let ((e-17554 (car body-17546)))
                            (syntax-type-4329
                              e-17554
                              r-17547
                              w-17548
                              (let ((t-17558 (source-annotation-4287 e-17554)))
                                (if t-17558 t-17558 s-17549))
                              #f
                              mod-17552
                              #f)))
                        (lambda (type-17793
                                 value-17794
                                 form-17795
                                 e-17796
                                 w-17797
                                 s-17798
                                 mod-17799)
                          (if (eqv? type-17793 'begin-form)
                            (let ((tmp-17808 ($sc-dispatch e-17796 '(_))))
                              (if tmp-17808
                                (@apply (lambda () exps-17553) tmp-17808)
                                (let ((tmp-17812
                                        ($sc-dispatch
                                          e-17796
                                          '(_ any . each-any))))
                                  (if tmp-17812
                                    (@apply
                                      (lambda (e1-17816 e2-17817)
                                        (scan-17415
                                          (cons e1-17816 e2-17817)
                                          r-17547
                                          w-17797
                                          s-17798
                                          m-17550
                                          esew-17551
                                          mod-17799
                                          exps-17553))
                                      tmp-17812)
                                    (syntax-violation
                                      #f
                                      "source expression failed to match any pattern"
                                      e-17796)))))
                            (if (eqv? type-17793 'local-syntax-form)
                              (expand-local-syntax-4335
                                value-17794
                                e-17796
                                r-17547
                                w-17797
                                s-17798
                                mod-17799
                                (lambda (body-17835
                                         r-17836
                                         w-17837
                                         s-17838
                                         mod-17839)
                                  (scan-17415
                                    body-17835
                                    r-17836
                                    w-17837
                                    s-17838
                                    m-17550
                                    esew-17551
                                    mod-17839
                                    exps-17553)))
                              (if (eqv? type-17793 'eval-when-form)
                                (let ((tmp-17847
                                        ($sc-dispatch
                                          e-17796
                                          '(_ each-any any . each-any))))
                                  (if tmp-17847
                                    (@apply
                                      (lambda (x-17851 e1-17852 e2-17853)
                                        (let ((when-list-17854
                                                (parse-when-list-4328
                                                  e-17796
                                                  x-17851))
                                              (body-17855
                                                (cons e1-17852 e2-17853)))
                                          (if (eq? m-17550 'e)
                                            (if (memq 'eval when-list-17854)
                                              (scan-17415
                                                body-17855
                                                r-17547
                                                w-17797
                                                s-17798
                                                (if (memq 'expand
                                                          when-list-17854)
                                                  'c&e
                                                  'e)
                                                '(eval)
                                                mod-17799
                                                exps-17553)
                                              (begin
                                                (if (memq 'expand
                                                          when-list-17854)
                                                  (let ((x-17932
                                                          (expand-top-sequence-4326
                                                            body-17855
                                                            r-17547
                                                            w-17797
                                                            s-17798
                                                            'e
                                                            '(eval)
                                                            mod-17799)))
                                                    (primitive-eval x-17932)))
                                                exps-17553))
                                            (if (memq 'load when-list-17854)
                                              (if (let ((t-17958
                                                          (memq 'compile
                                                                when-list-17854)))
                                                    (if t-17958
                                                      t-17958
                                                      (let ((t-18007
                                                              (memq 'expand
                                                                    when-list-17854)))
                                                        (if t-18007
                                                          t-18007
                                                          (if (eq? m-17550
                                                                   'c&e)
                                                            (memq 'eval
                                                                  when-list-17854)
                                                            #f)))))
                                                (scan-17415
                                                  body-17855
                                                  r-17547
                                                  w-17797
                                                  s-17798
                                                  'c&e
                                                  '(compile load)
                                                  mod-17799
                                                  exps-17553)
                                                (if (if (eq? m-17550 'c)
                                                      #t
                                                      (eq? m-17550 'c&e))
                                                  (scan-17415
                                                    body-17855
                                                    r-17547
                                                    w-17797
                                                    s-17798
                                                    'c
                                                    '(load)
                                                    mod-17799
                                                    exps-17553)
                                                  exps-17553))
                                              (if (let ((t-18136
                                                          (memq 'compile
                                                                when-list-17854)))
                                                    (if t-18136
                                                      t-18136
                                                      (let ((t-18185
                                                              (memq 'expand
                                                                    when-list-17854)))
                                                        (if t-18185
                                                          t-18185
                                                          (if (eq? m-17550
                                                                   'c&e)
                                                            (memq 'eval
                                                                  when-list-17854)
                                                            #f)))))
                                                (begin
                                                  (let ((x-18309
                                                          (expand-top-sequence-4326
                                                            body-17855
                                                            r-17547
                                                            w-17797
                                                            s-17798
                                                            'e
                                                            '(eval)
                                                            mod-17799)))
                                                    (primitive-eval x-18309))
                                                  exps-17553)
                                                exps-17553)))))
                                      tmp-17847)
                                    (syntax-violation
                                      #f
                                      "source expression failed to match any pattern"
                                      e-17796)))
                                (if (if (eqv? type-17793 'define-syntax-form)
                                      #t
                                      (eqv? type-17793
                                            'define-syntax-parameter-form))
                                  (let ((n-18358
                                          (id-var-name-4313
                                            value-17794
                                            w-17797))
                                        (r-18359
                                          (macros-only-env-4290 r-17547)))
                                    (if (eqv? m-17550 'c)
                                      (if (memq 'compile esew-17551)
                                        (let ((e-18367
                                                (expand-install-global-4327
                                                  n-18358
                                                  (expand-4330
                                                    e-17796
                                                    r-18359
                                                    w-17797
                                                    mod-17799))))
                                          (begin
                                            (top-level-eval-hook-4253
                                              e-18367
                                              mod-17799)
                                            (if (memq 'load esew-17551)
                                              (cons e-18367 exps-17553)
                                              exps-17553)))
                                        (if (memq 'load esew-17551)
                                          (cons (expand-install-global-4327
                                                  n-18358
                                                  (expand-4330
                                                    e-17796
                                                    r-18359
                                                    w-17797
                                                    mod-17799))
                                                exps-17553)
                                          exps-17553))
                                      (if (eqv? m-17550 'c&e)
                                        (let ((e-19012
                                                (expand-install-global-4327
                                                  n-18358
                                                  (expand-4330
                                                    e-17796
                                                    r-18359
                                                    w-17797
                                                    mod-17799))))
                                          (begin
                                            (top-level-eval-hook-4253
                                              e-19012
                                              mod-17799)
                                            (cons e-19012 exps-17553)))
                                        (begin
                                          (if (memq 'eval esew-17551)
                                            (top-level-eval-hook-4253
                                              (expand-install-global-4327
                                                n-18358
                                                (expand-4330
                                                  e-17796
                                                  r-18359
                                                  w-17797
                                                  mod-17799))
                                              mod-17799))
                                          exps-17553))))
                                  (if (eqv? type-17793 'define-form)
                                    (let ((n-19689
                                            (id-var-name-4313
                                              value-17794
                                              w-17797)))
                                      (let ((type-19690
                                              (car (let ((t-19698
                                                           (assq n-19689
                                                                 r-17547)))
                                                     (if t-19698
                                                       (cdr t-19698)
                                                       (if (symbol? n-19689)
                                                         (let ((t-19704
                                                                 (get-global-definition-hook-4257
                                                                   n-19689
                                                                   mod-17799)))
                                                           (if t-19704
                                                             t-19704
                                                             '(global)))
                                                         '(displaced-lexical)))))))
                                        (if (if (eqv? type-19690 'global)
                                              #t
                                              (if (eqv? type-19690 'core)
                                                #t
                                                (if (eqv? type-19690 'macro)
                                                  #t
                                                  (eqv? type-19690
                                                        'module-ref))))
                                          (begin
                                            (if (if (if (eq? m-17550 'c)
                                                      #t
                                                      (eq? m-17550 'c&e))
                                                  (if (not (module-local-variable
                                                             (current-module)
                                                             n-19689))
                                                    (current-module)
                                                    #f)
                                                  #f)
                                              (let ((old-19737
                                                      (module-variable
                                                        (current-module)
                                                        n-19689)))
                                                (if (if (variable? old-19737)
                                                      (variable-bound?
                                                        old-19737)
                                                      #f)
                                                  (module-define!
                                                    (current-module)
                                                    n-19689
                                                    (variable-ref old-19737))
                                                  (module-add!
                                                    (current-module)
                                                    n-19689
                                                    (make-undefined-variable)))))
                                            (cons (if (eq? m-17550 'c&e)
                                                    (let ((x-20178
                                                            (build-global-definition-4269
                                                              s-17798
                                                              n-19689
                                                              (expand-4330
                                                                e-17796
                                                                r-17547
                                                                w-17797
                                                                mod-17799))))
                                                      (begin
                                                        (top-level-eval-hook-4253
                                                          x-20178
                                                          mod-17799)
                                                        x-20178))
                                                    (lambda ()
                                                      (build-global-definition-4269
                                                        s-17798
                                                        n-19689
                                                        (expand-4330
                                                          e-17796
                                                          r-17547
                                                          w-17797
                                                          mod-17799))))
                                                  exps-17553))
                                          (if (eqv? type-19690
                                                    'displaced-lexical)
                                            (syntax-violation
                                              #f
                                              "identifier out of context"
                                              (wrap-4323
                                                (begin
                                                  (if (if (pair? form-17795)
                                                        s-17798
                                                        #f)
                                                    (set-source-properties!
                                                      form-17795
                                                      s-17798))
                                                  form-17795)
                                                w-17797
                                                mod-17799)
                                              (wrap-4323
                                                value-17794
                                                w-17797
                                                mod-17799))
                                            (syntax-violation
                                              #f
                                              "cannot define keyword at top level"
                                              (wrap-4323
                                                (begin
                                                  (if (if (pair? form-17795)
                                                        s-17798
                                                        #f)
                                                    (set-source-properties!
                                                      form-17795
                                                      s-17798))
                                                  form-17795)
                                                w-17797
                                                mod-17799)
                                              (wrap-4323
                                                value-17794
                                                w-17797
                                                mod-17799))))))
                                    (cons (if (eq? m-17550 'c&e)
                                            (let ((x-20680
                                                    (expand-expr-4331
                                                      type-17793
                                                      value-17794
                                                      form-17795
                                                      e-17796
                                                      r-17547
                                                      w-17797
                                                      s-17798
                                                      mod-17799)))
                                              (begin
                                                (primitive-eval x-20680)
                                                x-20680))
                                            (lambda ()
                                              (expand-expr-4331
                                                type-17793
                                                value-17794
                                                form-17795
                                                e-17796
                                                r-17547
                                                w-17797
                                                s-17798
                                                mod-17799)))
                                          exps-17553)))))))))
                    (lambda (exps-20685)
                      (scan-17415
                        (cdr body-17546)
                        r-17547
                        w-17548
                        s-17549
                        m-17550
                        esew-17551
                        mod-17552
                        exps-20685)))))))
           (call-with-values
             (lambda ()
               (scan-17415
                 body-17408
                 r-17409
                 w-17410
                 s-17411
                 m-17412
                 esew-17413
                 mod-17414
                 '()))
             (lambda (exps-17418)
               (if (null? exps-17418)
                 (make-struct/no-tail
                   (vector-ref %expanded-vtables 0)
                   s-17411)
                 (build-sequence-4275
                   s-17411
                   (letrec*
                     ((lp-17458
                        (lambda (in-17542 out-17543)
                          (if (null? in-17542)
                            out-17543
                            (let ((e-17544 (car in-17542)))
                              (lp-17458
                                (cdr in-17542)
                                (cons (if (procedure? e-17544)
                                        (e-17544)
                                        e-17544)
                                      out-17543)))))))
                     (lp-17458 exps-17418 '())))))))))
     (expand-install-global-4327
       (lambda (name-20686 e-20687)
         (let ((exp-20693
                 (let ((fun-exp-20703
                         (if (equal? (module-name (current-module)) '(guile))
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 7)
                             #f
                             'make-syntax-transformer)
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 5)
                             #f
                             '(guile)
                             'make-syntax-transformer
                             #f)))
                       (arg-exps-20704
                         (list (make-struct/no-tail
                                 (vector-ref %expanded-vtables 1)
                                 #f
                                 name-20686)
                               (make-struct/no-tail
                                 (vector-ref %expanded-vtables 1)
                                 #f
                                 'macro)
                               e-20687)))
                   (make-struct/no-tail
                     (vector-ref %expanded-vtables 11)
                     #f
                     fun-exp-20703
                     arg-exps-20704))))
           (begin
             (if (if (struct? exp-20693)
                   (eq? (struct-vtable exp-20693)
                        (vector-ref %expanded-vtables 13))
                   #f)
               (let ((meta-20745 (struct-ref exp-20693 1)))
                 (if (not (assq 'name meta-20745))
                   (let ((v-20752
                           (cons (cons 'name name-20686) meta-20745)))
                     (struct-set! exp-20693 1 v-20752)))))
             (make-struct/no-tail
               (vector-ref %expanded-vtables 9)
               #f
               name-20686
               exp-20693)))))
     (parse-when-list-4328
       (lambda (e-20763 when-list-20764)
         (let ((result-20765 (strip-4343 when-list-20764 '(()))))
           (letrec*
             ((lp-20766
                (lambda (l-20820)
                  (if (null? l-20820)
                    result-20765
                    (if (let ((t-20822 (car l-20820)))
                          (if (eq? t-20822 'compile)
                            #t
                            (if (eq? t-20822 'load)
                              #t
                              (if (eq? t-20822 'eval)
                                #t
                                (eq? t-20822 'expand)))))
                      (lp-20766 (cdr l-20820))
                      (syntax-violation
                        'eval-when
                        "invalid situation"
                        e-20763
                        (car l-20820)))))))
             (lp-20766 result-20765)))))
     (syntax-type-4329
       (lambda (e-20824
                r-20825
                w-20826
                s-20827
                rib-20828
                mod-20829
                for-car?-20830)
         (if (symbol? e-20824)
           (let ((n-20831 (id-var-name-4313 e-20824 w-20826)))
             (let ((b-20832
                     (let ((t-20841 (assq n-20831 r-20825)))
                       (if t-20841
                         (cdr t-20841)
                         (if (symbol? n-20831)
                           (let ((t-20847
                                   (get-global-definition-hook-4257
                                     n-20831
                                     mod-20829)))
                             (if t-20847 t-20847 '(global)))
                           '(displaced-lexical))))))
               (let ((type-20833 (car b-20832)))
                 (if (eqv? type-20833 'lexical)
                   (values
                     type-20833
                     (cdr b-20832)
                     e-20824
                     e-20824
                     w-20826
                     s-20827
                     mod-20829)
                   (if (eqv? type-20833 'global)
                     (values
                       type-20833
                       n-20831
                       e-20824
                       e-20824
                       w-20826
                       s-20827
                       mod-20829)
                     (if (eqv? type-20833 'macro)
                       (if for-car?-20830
                         (values
                           type-20833
                           (cdr b-20832)
                           e-20824
                           e-20824
                           w-20826
                           s-20827
                           mod-20829)
                         (syntax-type-4329
                           (expand-macro-4333
                             (cdr b-20832)
                             e-20824
                             r-20825
                             w-20826
                             s-20827
                             rib-20828
                             mod-20829)
                           r-20825
                           '(())
                           s-20827
                           rib-20828
                           mod-20829
                           #f))
                       (values
                         type-20833
                         (cdr b-20832)
                         e-20824
                         e-20824
                         w-20826
                         s-20827
                         mod-20829)))))))
           (if (pair? e-20824)
             (let ((first-20875 (car e-20824)))
               (call-with-values
                 (lambda ()
                   (syntax-type-4329
                     first-20875
                     r-20825
                     w-20826
                     s-20827
                     rib-20828
                     mod-20829
                     #t))
                 (lambda (ftype-20877
                          fval-20878
                          fform-20879
                          fe-20880
                          fw-20881
                          fs-20882
                          fmod-20883)
                   (if (eqv? ftype-20877 'lexical)
                     (values
                       'lexical-call
                       fval-20878
                       e-20824
                       e-20824
                       w-20826
                       s-20827
                       mod-20829)
                     (if (eqv? ftype-20877 'global)
                       (values
                         'global-call
                         (vector
                           'syntax-object
                           fval-20878
                           w-20826
                           fmod-20883)
                         e-20824
                         e-20824
                         w-20826
                         s-20827
                         mod-20829)
                       (if (eqv? ftype-20877 'macro)
                         (syntax-type-4329
                           (expand-macro-4333
                             fval-20878
                             e-20824
                             r-20825
                             w-20826
                             s-20827
                             rib-20828
                             mod-20829)
                           r-20825
                           '(())
                           s-20827
                           rib-20828
                           mod-20829
                           for-car?-20830)
                         (if (eqv? ftype-20877 'module-ref)
                           (call-with-values
                             (lambda () (fval-20878 e-20824 r-20825 w-20826))
                             (lambda (e-20917
                                      r-20918
                                      w-20919
                                      s-20920
                                      mod-20921)
                               (syntax-type-4329
                                 e-20917
                                 r-20918
                                 w-20919
                                 s-20920
                                 rib-20828
                                 mod-20921
                                 for-car?-20830)))
                           (if (eqv? ftype-20877 'core)
                             (values
                               'core-form
                               fval-20878
                               e-20824
                               e-20824
                               w-20826
                               s-20827
                               mod-20829)
                             (if (eqv? ftype-20877 'local-syntax)
                               (values
                                 'local-syntax-form
                                 fval-20878
                                 e-20824
                                 e-20824
                                 w-20826
                                 s-20827
                                 mod-20829)
                               (if (eqv? ftype-20877 'begin)
                                 (values
                                   'begin-form
                                   #f
                                   e-20824
                                   e-20824
                                   w-20826
                                   s-20827
                                   mod-20829)
                                 (if (eqv? ftype-20877 'eval-when)
                                   (values
                                     'eval-when-form
                                     #f
                                     e-20824
                                     e-20824
                                     w-20826
                                     s-20827
                                     mod-20829)
                                   (if (eqv? ftype-20877 'define)
                                     (let ((tmp-20953
                                             ($sc-dispatch
                                               e-20824
                                               '(_ any any))))
                                       (if (if tmp-20953
                                             (@apply
                                               (lambda (name-20957 val-20958)
                                                 (if (symbol? name-20957)
                                                   #t
                                                   (if (if (vector? name-20957)
                                                         (if (= (vector-length
                                                                  name-20957)
                                                                4)
                                                           (eq? (vector-ref
                                                                  name-20957
                                                                  0)
                                                                'syntax-object)
                                                           #f)
                                                         #f)
                                                     (symbol?
                                                       (vector-ref
                                                         name-20957
                                                         1))
                                                     #f)))
                                               tmp-20953)
                                             #f)
                                         (@apply
                                           (lambda (name-20985 val-20986)
                                             (values
                                               'define-form
                                               name-20985
                                               e-20824
                                               val-20986
                                               w-20826
                                               s-20827
                                               mod-20829))
                                           tmp-20953)
                                         (let ((tmp-20987
                                                 ($sc-dispatch
                                                   e-20824
                                                   '(_ (any . any)
                                                       any
                                                       .
                                                       each-any))))
                                           (if (if tmp-20987
                                                 (@apply
                                                   (lambda (name-20991
                                                            args-20992
                                                            e1-20993
                                                            e2-20994)
                                                     (if (if (symbol?
                                                               name-20991)
                                                           #t
                                                           (if (if (vector?
                                                                     name-20991)
                                                                 (if (= (vector-length
                                                                          name-20991)
                                                                        4)
                                                                   (eq? (vector-ref
                                                                          name-20991
                                                                          0)
                                                                        'syntax-object)
                                                                   #f)
                                                                 #f)
                                                             (symbol?
                                                               (vector-ref
                                                                 name-20991
                                                                 1))
                                                             #f))
                                                       (valid-bound-ids?-4320
                                                         (letrec*
                                                           ((lvl-21143
                                                              (lambda (vars-21145
                                                                       ls-21146
                                                                       w-21147)
                                                                (if (pair? vars-21145)
                                                                  (lvl-21143
                                                                    (cdr vars-21145)
                                                                    (cons (wrap-4323
                                                                            (car vars-21145)
                                                                            w-21147
                                                                            #f)
                                                                          ls-21146)
                                                                    w-21147)
                                                                  (if (if (symbol?
                                                                            vars-21145)
                                                                        #t
                                                                        (if (if (vector?
                                                                                  vars-21145)
                                                                              (if (= (vector-length
                                                                                       vars-21145)
                                                                                     4)
                                                                                (eq? (vector-ref
                                                                                       vars-21145
                                                                                       0)
                                                                                     'syntax-object)
                                                                                #f)
                                                                              #f)
                                                                          (symbol?
                                                                            (vector-ref
                                                                              vars-21145
                                                                              1))
                                                                          #f))
                                                                    (cons (wrap-4323
                                                                            vars-21145
                                                                            w-21147
                                                                            #f)
                                                                          ls-21146)
                                                                    (if (null? vars-21145)
                                                                      ls-21146
                                                                      (if (if (vector?
                                                                                vars-21145)
                                                                            (if (= (vector-length
                                                                                     vars-21145)
                                                                                   4)
                                                                              (eq? (vector-ref
                                                                                     vars-21145
                                                                                     0)
                                                                                   'syntax-object)
                                                                              #f)
                                                                            #f)
                                                                        (lvl-21143
                                                                          (vector-ref
                                                                            vars-21145
                                                                            1)
                                                                          ls-21146
                                                                          (join-wraps-4310
                                                                            w-21147
                                                                            (vector-ref
                                                                              vars-21145
                                                                              2)))
                                                                        (cons vars-21145
                                                                              ls-21146))))))))
                                                           (lvl-21143
                                                             args-20992
                                                             '()
                                                             '(()))))
                                                       #f))
                                                   tmp-20987)
                                                 #f)
                                             (@apply
                                               (lambda (name-21191
                                                        args-21192
                                                        e1-21193
                                                        e2-21194)
                                                 (values
                                                   'define-form
                                                   (wrap-4323
                                                     name-21191
                                                     w-20826
                                                     mod-20829)
                                                   (wrap-4323
                                                     e-20824
                                                     w-20826
                                                     mod-20829)
                                                   (let ((e-21202
                                                           (cons '#(syntax-object
                                                                    lambda
                                                                    ((top)
                                                                     #(ribcage
                                                                       #(name
                                                                         args
                                                                         e1
                                                                         e2)
                                                                       #((top)
                                                                         (top)
                                                                         (top)
                                                                         (top))
                                                                       #("l-*-1901"
                                                                         "l-*-1902"
                                                                         "l-*-1903"
                                                                         "l-*-1904"))
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       #(key)
                                                                       #((m-*-1866
                                                                           top))
                                                                       #("l-*-1867"))
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       #(ftype
                                                                         fval
                                                                         fform
                                                                         fe
                                                                         fw
                                                                         fs
                                                                         fmod)
                                                                       #((top)
                                                                         (top)
                                                                         (top)
                                                                         (top)
                                                                         (top)
                                                                         (top)
                                                                         (top))
                                                                       #("l-*-1859"
                                                                         "l-*-1860"
                                                                         "l-*-1861"
                                                                         "l-*-1862"
                                                                         "l-*-1863"
                                                                         "l-*-1864"
                                                                         "l-*-1865"))
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       #(first)
                                                                       #((top))
                                                                       #("l-*-1850"))
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       #(e
                                                                         r
                                                                         w
                                                                         s
                                                                         rib
                                                                         mod
                                                                         for-car?)
                                                                       #((top)
                                                                         (top)
                                                                         (top)
                                                                         (top)
                                                                         (top)
                                                                         (top)
                                                                         (top))
                                                                       #("l-*-1826"
                                                                         "l-*-1827"
                                                                         "l-*-1828"
                                                                         "l-*-1829"
                                                                         "l-*-1830"
                                                                         "l-*-1831"
                                                                         "l-*-1832"))
                                                                     #(ribcage
                                                                       (lambda-var-list
                                                                         gen-var
                                                                         strip
                                                                         expand-lambda-case
                                                                         lambda*-formals
                                                                         expand-simple-lambda
                                                                         lambda-formals
                                                                         ellipsis?
                                                                         expand-void
                                                                         eval-local-transformer
                                                                         expand-local-syntax
                                                                         expand-body
                                                                         expand-macro
                                                                         expand-application
                                                                         expand-expr
                                                                         expand
                                                                         syntax-type
                                                                         parse-when-list
                                                                         expand-install-global
                                                                         expand-top-sequence
                                                                         expand-sequence
                                                                         source-wrap
                                                                         wrap
                                                                         bound-id-member?
                                                                         distinct-bound-ids?
                                                                         valid-bound-ids?
                                                                         bound-id=?
                                                                         free-id=?
                                                                         with-transformer-environment
                                                                         transformer-environment
                                                                         resolve-identifier
                                                                         locally-bound-identifiers
                                                                         id-var-name
                                                                         same-marks?
                                                                         join-marks
                                                                         join-wraps
                                                                         smart-append
                                                                         make-binding-wrap
                                                                         extend-ribcage!
                                                                         make-empty-ribcage
                                                                         new-mark
                                                                         anti-mark
                                                                         the-anti-mark
                                                                         top-marked?
                                                                         top-wrap
                                                                         empty-wrap
                                                                         set-ribcage-labels!
                                                                         set-ribcage-marks!
                                                                         set-ribcage-symnames!
                                                                         ribcage-labels
                                                                         ribcage-marks
                                                                         ribcage-symnames
                                                                         ribcage?
                                                                         make-ribcage
                                                                         gen-labels
                                                                         gen-label
                                                                         make-rename
                                                                         rename-marks
                                                                         rename-new
                                                                         rename-old
                                                                         subst-rename?
                                                                         wrap-subst
                                                                         wrap-marks
                                                                         make-wrap
                                                                         id-sym-name&marks
                                                                         id-sym-name
                                                                         id?
                                                                         nonsymbol-id?
                                                                         global-extend
                                                                         lookup
                                                                         macros-only-env
                                                                         extend-var-env
                                                                         extend-env
                                                                         null-env
                                                                         binding-value
                                                                         binding-type
                                                                         make-binding
                                                                         arg-check
                                                                         source-annotation
                                                                         no-source
                                                                         set-syntax-object-module!
                                                                         set-syntax-object-wrap!
                                                                         set-syntax-object-expression!
                                                                         syntax-object-module
                                                                         syntax-object-wrap
                                                                         syntax-object-expression
                                                                         syntax-object?
                                                                         make-syntax-object
                                                                         build-lexical-var
                                                                         build-letrec
                                                                         build-named-let
                                                                         build-let
                                                                         build-sequence
                                                                         build-data
                                                                         build-primref
                                                                         build-lambda-case
                                                                         build-case-lambda
                                                                         build-simple-lambda
                                                                         build-global-definition
                                                                         build-global-assignment
                                                                         build-global-reference
                                                                         analyze-variable
                                                                         build-lexical-assignment
                                                                         build-lexical-reference
                                                                         build-dynlet
                                                                         build-conditional
                                                                         build-application
                                                                         build-void
                                                                         maybe-name-value!
                                                                         decorate-source
                                                                         get-global-definition-hook
                                                                         put-global-definition-hook
                                                                         session-id
                                                                         local-eval-hook
                                                                         top-level-eval-hook
                                                                         fx<
                                                                         fx=
                                                                         fx-
                                                                         fx+
                                                                         set-lambda-meta!
                                                                         lambda-meta
                                                                         lambda?
                                                                         make-dynlet
                                                                         make-letrec
                                                                         make-let
                                                                         make-lambda-case
                                                                         make-lambda
                                                                         make-sequence
                                                                         make-application
                                                                         make-conditional
                                                                         make-toplevel-define
                                                                         make-toplevel-set
                                                                         make-toplevel-ref
                                                                         make-module-set
                                                                         make-module-ref
                                                                         make-lexical-set
                                                                         make-lexical-ref
                                                                         make-primitive-ref
                                                                         make-const
                                                                         make-void)
                                                                       ((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                       ("l-*-476"
                                                                        "l-*-474"
                                                                        "l-*-472"
                                                                        "l-*-470"
                                                                        "l-*-468"
                                                                        "l-*-466"
                                                                        "l-*-464"
                                                                        "l-*-462"
                                                                        "l-*-460"
                                                                        "l-*-458"
                                                                        "l-*-456"
                                                                        "l-*-454"
                                                                        "l-*-452"
                                                                        "l-*-450"
                                                                        "l-*-448"
                                                                        "l-*-446"
                                                                        "l-*-444"
                                                                        "l-*-442"
                                                                        "l-*-440"
                                                                        "l-*-438"
                                                                        "l-*-436"
                                                                        "l-*-434"
                                                                        "l-*-432"
                                                                        "l-*-430"
                                                                        "l-*-428"
                                                                        "l-*-426"
                                                                        "l-*-424"
                                                                        "l-*-422"
                                                                        "l-*-420"
                                                                        "l-*-418"
                                                                        "l-*-416"
                                                                        "l-*-414"
                                                                        "l-*-412"
                                                                        "l-*-410"
                                                                        "l-*-408"
                                                                        "l-*-406"
                                                                        "l-*-404"
                                                                        "l-*-402"
                                                                        "l-*-400"
                                                                        "l-*-399"
                                                                        "l-*-397"
                                                                        "l-*-394"
                                                                        "l-*-393"
                                                                        "l-*-392"
                                                                        "l-*-390"
                                                                        "l-*-389"
                                                                        "l-*-387"
                                                                        "l-*-385"
                                                                        "l-*-383"
                                                                        "l-*-381"
                                                                        "l-*-379"
                                                                        "l-*-377"
                                                                        "l-*-375"
                                                                        "l-*-373"
                                                                        "l-*-370"
                                                                        "l-*-368"
                                                                        "l-*-367"
                                                                        "l-*-365"
                                                                        "l-*-363"
                                                                        "l-*-361"
                                                                        "l-*-359"
                                                                        "l-*-358"
                                                                        "l-*-357"
                                                                        "l-*-356"
                                                                        "l-*-354"
                                                                        "l-*-353"
                                                                        "l-*-350"
                                                                        "l-*-348"
                                                                        "l-*-346"
                                                                        "l-*-344"
                                                                        "l-*-342"
                                                                        "l-*-340"
                                                                        "l-*-338"
                                                                        "l-*-337"
                                                                        "l-*-336"
                                                                        "l-*-334"
                                                                        "l-*-332"
                                                                        "l-*-331"
                                                                        "l-*-328"
                                                                        "l-*-327"
                                                                        "l-*-325"
                                                                        "l-*-323"
                                                                        "l-*-321"
                                                                        "l-*-319"
                                                                        "l-*-317"
                                                                        "l-*-315"
                                                                        "l-*-313"
                                                                        "l-*-311"
                                                                        "l-*-309"
                                                                        "l-*-306"
                                                                        "l-*-304"
                                                                        "l-*-302"
                                                                        "l-*-300"
                                                                        "l-*-298"
                                                                        "l-*-296"
                                                                        "l-*-294"
                                                                        "l-*-292"
                                                                        "l-*-290"
                                                                        "l-*-288"
                                                                        "l-*-286"
                                                                        "l-*-284"
                                                                        "l-*-282"
                                                                        "l-*-280"
                                                                        "l-*-278"
                                                                        "l-*-276"
                                                                        "l-*-274"
                                                                        "l-*-272"
                                                                        "l-*-270"
                                                                        "l-*-268"
                                                                        "l-*-266"
                                                                        "l-*-264"
                                                                        "l-*-262"
                                                                        "l-*-260"
                                                                        "l-*-258"
                                                                        "l-*-256"
                                                                        "l-*-255"
                                                                        "l-*-254"
                                                                        "l-*-253"
                                                                        "l-*-252"
                                                                        "l-*-250"
                                                                        "l-*-248"
                                                                        "l-*-246"
                                                                        "l-*-243"
                                                                        "l-*-241"
                                                                        "l-*-239"
                                                                        "l-*-237"
                                                                        "l-*-235"
                                                                        "l-*-233"
                                                                        "l-*-231"
                                                                        "l-*-229"
                                                                        "l-*-227"
                                                                        "l-*-225"
                                                                        "l-*-223"
                                                                        "l-*-221"
                                                                        "l-*-219"
                                                                        "l-*-217"
                                                                        "l-*-215"
                                                                        "l-*-213"
                                                                        "l-*-211"
                                                                        "l-*-209"))
                                                                     #(ribcage
                                                                       (define-structure
                                                                         define-expansion-accessors
                                                                         define-expansion-constructors)
                                                                       ((top)
                                                                        (top)
                                                                        (top))
                                                                       ("l-*-47"
                                                                        "l-*-46"
                                                                        "l-*-45")))
                                                                    (hygiene
                                                                      guile))
                                                                 (wrap-4323
                                                                   (cons args-21192
                                                                         (cons e1-21193
                                                                               e2-21194))
                                                                   w-20826
                                                                   mod-20829))))
                                                     (begin
                                                       (if (if (pair? e-21202)
                                                             s-20827
                                                             #f)
                                                         (set-source-properties!
                                                           e-21202
                                                           s-20827))
                                                       e-21202))
                                                   '(())
                                                   s-20827
                                                   mod-20829))
                                               tmp-20987)
                                             (let ((tmp-21209
                                                     ($sc-dispatch
                                                       e-20824
                                                       '(_ any))))
                                               (if (if tmp-21209
                                                     (@apply
                                                       (lambda (name-21213)
                                                         (if (symbol?
                                                               name-21213)
                                                           #t
                                                           (if (if (vector?
                                                                     name-21213)
                                                                 (if (= (vector-length
                                                                          name-21213)
                                                                        4)
                                                                   (eq? (vector-ref
                                                                          name-21213
                                                                          0)
                                                                        'syntax-object)
                                                                   #f)
                                                                 #f)
                                                             (symbol?
                                                               (vector-ref
                                                                 name-21213
                                                                 1))
                                                             #f)))
                                                       tmp-21209)
                                                     #f)
                                                 (@apply
                                                   (lambda (name-21240)
                                                     (values
                                                       'define-form
                                                       (wrap-4323
                                                         name-21240
                                                         w-20826
                                                         mod-20829)
                                                       (wrap-4323
                                                         e-20824
                                                         w-20826
                                                         mod-20829)
                                                       '(#(syntax-object
                                                           if
                                                           ((top)
                                                            #(ribcage
                                                              #(name)
                                                              #((top))
                                                              #("l-*-1914"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(key)
                                                              #((m-*-1866 top))
                                                              #("l-*-1867"))
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(ftype
                                                                fval
                                                                fform
                                                                fe
                                                                fw
                                                                fs
                                                                fmod)
                                                              #((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                              #("l-*-1859"
                                                                "l-*-1860"
                                                                "l-*-1861"
                                                                "l-*-1862"
                                                                "l-*-1863"
                                                                "l-*-1864"
                                                                "l-*-1865"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(first)
                                                              #((top))
                                                              #("l-*-1850"))
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(e
                                                                r
                                                                w
                                                                s
                                                                rib
                                                                mod
                                                                for-car?)
                                                              #((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                              #("l-*-1826"
                                                                "l-*-1827"
                                                                "l-*-1828"
                                                                "l-*-1829"
                                                                "l-*-1830"
                                                                "l-*-1831"
                                                                "l-*-1832"))
                                                            #(ribcage
                                                              (lambda-var-list
                                                                gen-var
                                                                strip
                                                                expand-lambda-case
                                                                lambda*-formals
                                                                expand-simple-lambda
                                                                lambda-formals
                                                                ellipsis?
                                                                expand-void
                                                                eval-local-transformer
                                                                expand-local-syntax
                                                                expand-body
                                                                expand-macro
                                                                expand-application
                                                                expand-expr
                                                                expand
                                                                syntax-type
                                                                parse-when-list
                                                                expand-install-global
                                                                expand-top-sequence
                                                                expand-sequence
                                                                source-wrap
                                                                wrap
                                                                bound-id-member?
                                                                distinct-bound-ids?
                                                                valid-bound-ids?
                                                                bound-id=?
                                                                free-id=?
                                                                with-transformer-environment
                                                                transformer-environment
                                                                resolve-identifier
                                                                locally-bound-identifiers
                                                                id-var-name
                                                                same-marks?
                                                                join-marks
                                                                join-wraps
                                                                smart-append
                                                                make-binding-wrap
                                                                extend-ribcage!
                                                                make-empty-ribcage
                                                                new-mark
                                                                anti-mark
                                                                the-anti-mark
                                                                top-marked?
                                                                top-wrap
                                                                empty-wrap
                                                                set-ribcage-labels!
                                                                set-ribcage-marks!
                                                                set-ribcage-symnames!
                                                                ribcage-labels
                                                                ribcage-marks
                                                                ribcage-symnames
                                                                ribcage?
                                                                make-ribcage
                                                                gen-labels
                                                                gen-label
                                                                make-rename
                                                                rename-marks
                                                                rename-new
                                                                rename-old
                                                                subst-rename?
                                                                wrap-subst
                                                                wrap-marks
                                                                make-wrap
                                                                id-sym-name&marks
                                                                id-sym-name
                                                                id?
                                                                nonsymbol-id?
                                                                global-extend
                                                                lookup
                                                                macros-only-env
                                                                extend-var-env
                                                                extend-env
                                                                null-env
                                                                binding-value
                                                                binding-type
                                                                make-binding
                                                                arg-check
                                                                source-annotation
                                                                no-source
                                                                set-syntax-object-module!
                                                                set-syntax-object-wrap!
                                                                set-syntax-object-expression!
                                                                syntax-object-module
                                                                syntax-object-wrap
                                                                syntax-object-expression
                                                                syntax-object?
                                                                make-syntax-object
                                                                build-lexical-var
                                                                build-letrec
                                                                build-named-let
                                                                build-let
                                                                build-sequence
                                                                build-data
                                                                build-primref
                                                                build-lambda-case
                                                                build-case-lambda
                                                                build-simple-lambda
                                                                build-global-definition
                                                                build-global-assignment
                                                                build-global-reference
                                                                analyze-variable
                                                                build-lexical-assignment
                                                                build-lexical-reference
                                                                build-dynlet
                                                                build-conditional
                                                                build-application
                                                                build-void
                                                                maybe-name-value!
                                                                decorate-source
                                                                get-global-definition-hook
                                                                put-global-definition-hook
                                                                session-id
                                                                local-eval-hook
                                                                top-level-eval-hook
                                                                fx<
                                                                fx=
                                                                fx-
                                                                fx+
                                                                set-lambda-meta!
                                                                lambda-meta
                                                                lambda?
                                                                make-dynlet
                                                                make-letrec
                                                                make-let
                                                                make-lambda-case
                                                                make-lambda
                                                                make-sequence
                                                                make-application
                                                                make-conditional
                                                                make-toplevel-define
                                                                make-toplevel-set
                                                                make-toplevel-ref
                                                                make-module-set
                                                                make-module-ref
                                                                make-lexical-set
                                                                make-lexical-ref
                                                                make-primitive-ref
                                                                make-const
                                                                make-void)
                                                              ((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                              ("l-*-476"
                                                               "l-*-474"
                                                               "l-*-472"
                                                               "l-*-470"
                                                               "l-*-468"
                                                               "l-*-466"
                                                               "l-*-464"
                                                               "l-*-462"
                                                               "l-*-460"
                                                               "l-*-458"
                                                               "l-*-456"
                                                               "l-*-454"
                                                               "l-*-452"
                                                               "l-*-450"
                                                               "l-*-448"
                                                               "l-*-446"
                                                               "l-*-444"
                                                               "l-*-442"
                                                               "l-*-440"
                                                               "l-*-438"
                                                               "l-*-436"
                                                               "l-*-434"
                                                               "l-*-432"
                                                               "l-*-430"
                                                               "l-*-428"
                                                               "l-*-426"
                                                               "l-*-424"
                                                               "l-*-422"
                                                               "l-*-420"
                                                               "l-*-418"
                                                               "l-*-416"
                                                               "l-*-414"
                                                               "l-*-412"
                                                               "l-*-410"
                                                               "l-*-408"
                                                               "l-*-406"
                                                               "l-*-404"
                                                               "l-*-402"
                                                               "l-*-400"
                                                               "l-*-399"
                                                               "l-*-397"
                                                               "l-*-394"
                                                               "l-*-393"
                                                               "l-*-392"
                                                               "l-*-390"
                                                               "l-*-389"
                                                               "l-*-387"
                                                               "l-*-385"
                                                               "l-*-383"
                                                               "l-*-381"
                                                               "l-*-379"
                                                               "l-*-377"
                                                               "l-*-375"
                                                               "l-*-373"
                                                               "l-*-370"
                                                               "l-*-368"
                                                               "l-*-367"
                                                               "l-*-365"
                                                               "l-*-363"
                                                               "l-*-361"
                                                               "l-*-359"
                                                               "l-*-358"
                                                               "l-*-357"
                                                               "l-*-356"
                                                               "l-*-354"
                                                               "l-*-353"
                                                               "l-*-350"
                                                               "l-*-348"
                                                               "l-*-346"
                                                               "l-*-344"
                                                               "l-*-342"
                                                               "l-*-340"
                                                               "l-*-338"
                                                               "l-*-337"
                                                               "l-*-336"
                                                               "l-*-334"
                                                               "l-*-332"
                                                               "l-*-331"
                                                               "l-*-328"
                                                               "l-*-327"
                                                               "l-*-325"
                                                               "l-*-323"
                                                               "l-*-321"
                                                               "l-*-319"
                                                               "l-*-317"
                                                               "l-*-315"
                                                               "l-*-313"
                                                               "l-*-311"
                                                               "l-*-309"
                                                               "l-*-306"
                                                               "l-*-304"
                                                               "l-*-302"
                                                               "l-*-300"
                                                               "l-*-298"
                                                               "l-*-296"
                                                               "l-*-294"
                                                               "l-*-292"
                                                               "l-*-290"
                                                               "l-*-288"
                                                               "l-*-286"
                                                               "l-*-284"
                                                               "l-*-282"
                                                               "l-*-280"
                                                               "l-*-278"
                                                               "l-*-276"
                                                               "l-*-274"
                                                               "l-*-272"
                                                               "l-*-270"
                                                               "l-*-268"
                                                               "l-*-266"
                                                               "l-*-264"
                                                               "l-*-262"
                                                               "l-*-260"
                                                               "l-*-258"
                                                               "l-*-256"
                                                               "l-*-255"
                                                               "l-*-254"
                                                               "l-*-253"
                                                               "l-*-252"
                                                               "l-*-250"
                                                               "l-*-248"
                                                               "l-*-246"
                                                               "l-*-243"
                                                               "l-*-241"
                                                               "l-*-239"
                                                               "l-*-237"
                                                               "l-*-235"
                                                               "l-*-233"
                                                               "l-*-231"
                                                               "l-*-229"
                                                               "l-*-227"
                                                               "l-*-225"
                                                               "l-*-223"
                                                               "l-*-221"
                                                               "l-*-219"
                                                               "l-*-217"
                                                               "l-*-215"
                                                               "l-*-213"
                                                               "l-*-211"
                                                               "l-*-209"))
                                                            #(ribcage
                                                              (define-structure
                                                                define-expansion-accessors
                                                                define-expansion-constructors)
                                                              ((top)
                                                               (top)
                                                               (top))
                                                              ("l-*-47"
                                                               "l-*-46"
                                                               "l-*-45")))
                                                           (hygiene guile))
                                                         #(syntax-object
                                                           #f
                                                           ((top)
                                                            #(ribcage
                                                              #(name)
                                                              #((top))
                                                              #("l-*-1914"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(key)
                                                              #((m-*-1866 top))
                                                              #("l-*-1867"))
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(ftype
                                                                fval
                                                                fform
                                                                fe
                                                                fw
                                                                fs
                                                                fmod)
                                                              #((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                              #("l-*-1859"
                                                                "l-*-1860"
                                                                "l-*-1861"
                                                                "l-*-1862"
                                                                "l-*-1863"
                                                                "l-*-1864"
                                                                "l-*-1865"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(first)
                                                              #((top))
                                                              #("l-*-1850"))
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(e
                                                                r
                                                                w
                                                                s
                                                                rib
                                                                mod
                                                                for-car?)
                                                              #((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                              #("l-*-1826"
                                                                "l-*-1827"
                                                                "l-*-1828"
                                                                "l-*-1829"
                                                                "l-*-1830"
                                                                "l-*-1831"
                                                                "l-*-1832"))
                                                            #(ribcage
                                                              (lambda-var-list
                                                                gen-var
                                                                strip
                                                                expand-lambda-case
                                                                lambda*-formals
                                                                expand-simple-lambda
                                                                lambda-formals
                                                                ellipsis?
                                                                expand-void
                                                                eval-local-transformer
                                                                expand-local-syntax
                                                                expand-body
                                                                expand-macro
                                                                expand-application
                                                                expand-expr
                                                                expand
                                                                syntax-type
                                                                parse-when-list
                                                                expand-install-global
                                                                expand-top-sequence
                                                                expand-sequence
                                                                source-wrap
                                                                wrap
                                                                bound-id-member?
                                                                distinct-bound-ids?
                                                                valid-bound-ids?
                                                                bound-id=?
                                                                free-id=?
                                                                with-transformer-environment
                                                                transformer-environment
                                                                resolve-identifier
                                                                locally-bound-identifiers
                                                                id-var-name
                                                                same-marks?
                                                                join-marks
                                                                join-wraps
                                                                smart-append
                                                                make-binding-wrap
                                                                extend-ribcage!
                                                                make-empty-ribcage
                                                                new-mark
                                                                anti-mark
                                                                the-anti-mark
                                                                top-marked?
                                                                top-wrap
                                                                empty-wrap
                                                                set-ribcage-labels!
                                                                set-ribcage-marks!
                                                                set-ribcage-symnames!
                                                                ribcage-labels
                                                                ribcage-marks
                                                                ribcage-symnames
                                                                ribcage?
                                                                make-ribcage
                                                                gen-labels
                                                                gen-label
                                                                make-rename
                                                                rename-marks
                                                                rename-new
                                                                rename-old
                                                                subst-rename?
                                                                wrap-subst
                                                                wrap-marks
                                                                make-wrap
                                                                id-sym-name&marks
                                                                id-sym-name
                                                                id?
                                                                nonsymbol-id?
                                                                global-extend
                                                                lookup
                                                                macros-only-env
                                                                extend-var-env
                                                                extend-env
                                                                null-env
                                                                binding-value
                                                                binding-type
                                                                make-binding
                                                                arg-check
                                                                source-annotation
                                                                no-source
                                                                set-syntax-object-module!
                                                                set-syntax-object-wrap!
                                                                set-syntax-object-expression!
                                                                syntax-object-module
                                                                syntax-object-wrap
                                                                syntax-object-expression
                                                                syntax-object?
                                                                make-syntax-object
                                                                build-lexical-var
                                                                build-letrec
                                                                build-named-let
                                                                build-let
                                                                build-sequence
                                                                build-data
                                                                build-primref
                                                                build-lambda-case
                                                                build-case-lambda
                                                                build-simple-lambda
                                                                build-global-definition
                                                                build-global-assignment
                                                                build-global-reference
                                                                analyze-variable
                                                                build-lexical-assignment
                                                                build-lexical-reference
                                                                build-dynlet
                                                                build-conditional
                                                                build-application
                                                                build-void
                                                                maybe-name-value!
                                                                decorate-source
                                                                get-global-definition-hook
                                                                put-global-definition-hook
                                                                session-id
                                                                local-eval-hook
                                                                top-level-eval-hook
                                                                fx<
                                                                fx=
                                                                fx-
                                                                fx+
                                                                set-lambda-meta!
                                                                lambda-meta
                                                                lambda?
                                                                make-dynlet
                                                                make-letrec
                                                                make-let
                                                                make-lambda-case
                                                                make-lambda
                                                                make-sequence
                                                                make-application
                                                                make-conditional
                                                                make-toplevel-define
                                                                make-toplevel-set
                                                                make-toplevel-ref
                                                                make-module-set
                                                                make-module-ref
                                                                make-lexical-set
                                                                make-lexical-ref
                                                                make-primitive-ref
                                                                make-const
                                                                make-void)
                                                              ((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                              ("l-*-476"
                                                               "l-*-474"
                                                               "l-*-472"
                                                               "l-*-470"
                                                               "l-*-468"
                                                               "l-*-466"
                                                               "l-*-464"
                                                               "l-*-462"
                                                               "l-*-460"
                                                               "l-*-458"
                                                               "l-*-456"
                                                               "l-*-454"
                                                               "l-*-452"
                                                               "l-*-450"
                                                               "l-*-448"
                                                               "l-*-446"
                                                               "l-*-444"
                                                               "l-*-442"
                                                               "l-*-440"
                                                               "l-*-438"
                                                               "l-*-436"
                                                               "l-*-434"
                                                               "l-*-432"
                                                               "l-*-430"
                                                               "l-*-428"
                                                               "l-*-426"
                                                               "l-*-424"
                                                               "l-*-422"
                                                               "l-*-420"
                                                               "l-*-418"
                                                               "l-*-416"
                                                               "l-*-414"
                                                               "l-*-412"
                                                               "l-*-410"
                                                               "l-*-408"
                                                               "l-*-406"
                                                               "l-*-404"
                                                               "l-*-402"
                                                               "l-*-400"
                                                               "l-*-399"
                                                               "l-*-397"
                                                               "l-*-394"
                                                               "l-*-393"
                                                               "l-*-392"
                                                               "l-*-390"
                                                               "l-*-389"
                                                               "l-*-387"
                                                               "l-*-385"
                                                               "l-*-383"
                                                               "l-*-381"
                                                               "l-*-379"
                                                               "l-*-377"
                                                               "l-*-375"
                                                               "l-*-373"
                                                               "l-*-370"
                                                               "l-*-368"
                                                               "l-*-367"
                                                               "l-*-365"
                                                               "l-*-363"
                                                               "l-*-361"
                                                               "l-*-359"
                                                               "l-*-358"
                                                               "l-*-357"
                                                               "l-*-356"
                                                               "l-*-354"
                                                               "l-*-353"
                                                               "l-*-350"
                                                               "l-*-348"
                                                               "l-*-346"
                                                               "l-*-344"
                                                               "l-*-342"
                                                               "l-*-340"
                                                               "l-*-338"
                                                               "l-*-337"
                                                               "l-*-336"
                                                               "l-*-334"
                                                               "l-*-332"
                                                               "l-*-331"
                                                               "l-*-328"
                                                               "l-*-327"
                                                               "l-*-325"
                                                               "l-*-323"
                                                               "l-*-321"
                                                               "l-*-319"
                                                               "l-*-317"
                                                               "l-*-315"
                                                               "l-*-313"
                                                               "l-*-311"
                                                               "l-*-309"
                                                               "l-*-306"
                                                               "l-*-304"
                                                               "l-*-302"
                                                               "l-*-300"
                                                               "l-*-298"
                                                               "l-*-296"
                                                               "l-*-294"
                                                               "l-*-292"
                                                               "l-*-290"
                                                               "l-*-288"
                                                               "l-*-286"
                                                               "l-*-284"
                                                               "l-*-282"
                                                               "l-*-280"
                                                               "l-*-278"
                                                               "l-*-276"
                                                               "l-*-274"
                                                               "l-*-272"
                                                               "l-*-270"
                                                               "l-*-268"
                                                               "l-*-266"
                                                               "l-*-264"
                                                               "l-*-262"
                                                               "l-*-260"
                                                               "l-*-258"
                                                               "l-*-256"
                                                               "l-*-255"
                                                               "l-*-254"
                                                               "l-*-253"
                                                               "l-*-252"
                                                               "l-*-250"
                                                               "l-*-248"
                                                               "l-*-246"
                                                               "l-*-243"
                                                               "l-*-241"
                                                               "l-*-239"
                                                               "l-*-237"
                                                               "l-*-235"
                                                               "l-*-233"
                                                               "l-*-231"
                                                               "l-*-229"
                                                               "l-*-227"
                                                               "l-*-225"
                                                               "l-*-223"
                                                               "l-*-221"
                                                               "l-*-219"
                                                               "l-*-217"
                                                               "l-*-215"
                                                               "l-*-213"
                                                               "l-*-211"
                                                               "l-*-209"))
                                                            #(ribcage
                                                              (define-structure
                                                                define-expansion-accessors
                                                                define-expansion-constructors)
                                                              ((top)
                                                               (top)
                                                               (top))
                                                              ("l-*-47"
                                                               "l-*-46"
                                                               "l-*-45")))
                                                           (hygiene guile))
                                                         #(syntax-object
                                                           #f
                                                           ((top)
                                                            #(ribcage
                                                              #(name)
                                                              #((top))
                                                              #("l-*-1914"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(key)
                                                              #((m-*-1866 top))
                                                              #("l-*-1867"))
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(ftype
                                                                fval
                                                                fform
                                                                fe
                                                                fw
                                                                fs
                                                                fmod)
                                                              #((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                              #("l-*-1859"
                                                                "l-*-1860"
                                                                "l-*-1861"
                                                                "l-*-1862"
                                                                "l-*-1863"
                                                                "l-*-1864"
                                                                "l-*-1865"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(first)
                                                              #((top))
                                                              #("l-*-1850"))
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(e
                                                                r
                                                                w
                                                                s
                                                                rib
                                                                mod
                                                                for-car?)
                                                              #((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                              #("l-*-1826"
                                                                "l-*-1827"
                                                                "l-*-1828"
                                                                "l-*-1829"
                                                                "l-*-1830"
                                                                "l-*-1831"
                                                                "l-*-1832"))
                                                            #(ribcage
                                                              (lambda-var-list
                                                                gen-var
                                                                strip
                                                                expand-lambda-case
                                                                lambda*-formals
                                                                expand-simple-lambda
                                                                lambda-formals
                                                                ellipsis?
                                                                expand-void
                                                                eval-local-transformer
                                                                expand-local-syntax
                                                                expand-body
                                                                expand-macro
                                                                expand-application
                                                                expand-expr
                                                                expand
                                                                syntax-type
                                                                parse-when-list
                                                                expand-install-global
                                                                expand-top-sequence
                                                                expand-sequence
                                                                source-wrap
                                                                wrap
                                                                bound-id-member?
                                                                distinct-bound-ids?
                                                                valid-bound-ids?
                                                                bound-id=?
                                                                free-id=?
                                                                with-transformer-environment
                                                                transformer-environment
                                                                resolve-identifier
                                                                locally-bound-identifiers
                                                                id-var-name
                                                                same-marks?
                                                                join-marks
                                                                join-wraps
                                                                smart-append
                                                                make-binding-wrap
                                                                extend-ribcage!
                                                                make-empty-ribcage
                                                                new-mark
                                                                anti-mark
                                                                the-anti-mark
                                                                top-marked?
                                                                top-wrap
                                                                empty-wrap
                                                                set-ribcage-labels!
                                                                set-ribcage-marks!
                                                                set-ribcage-symnames!
                                                                ribcage-labels
                                                                ribcage-marks
                                                                ribcage-symnames
                                                                ribcage?
                                                                make-ribcage
                                                                gen-labels
                                                                gen-label
                                                                make-rename
                                                                rename-marks
                                                                rename-new
                                                                rename-old
                                                                subst-rename?
                                                                wrap-subst
                                                                wrap-marks
                                                                make-wrap
                                                                id-sym-name&marks
                                                                id-sym-name
                                                                id?
                                                                nonsymbol-id?
                                                                global-extend
                                                                lookup
                                                                macros-only-env
                                                                extend-var-env
                                                                extend-env
                                                                null-env
                                                                binding-value
                                                                binding-type
                                                                make-binding
                                                                arg-check
                                                                source-annotation
                                                                no-source
                                                                set-syntax-object-module!
                                                                set-syntax-object-wrap!
                                                                set-syntax-object-expression!
                                                                syntax-object-module
                                                                syntax-object-wrap
                                                                syntax-object-expression
                                                                syntax-object?
                                                                make-syntax-object
                                                                build-lexical-var
                                                                build-letrec
                                                                build-named-let
                                                                build-let
                                                                build-sequence
                                                                build-data
                                                                build-primref
                                                                build-lambda-case
                                                                build-case-lambda
                                                                build-simple-lambda
                                                                build-global-definition
                                                                build-global-assignment
                                                                build-global-reference
                                                                analyze-variable
                                                                build-lexical-assignment
                                                                build-lexical-reference
                                                                build-dynlet
                                                                build-conditional
                                                                build-application
                                                                build-void
                                                                maybe-name-value!
                                                                decorate-source
                                                                get-global-definition-hook
                                                                put-global-definition-hook
                                                                session-id
                                                                local-eval-hook
                                                                top-level-eval-hook
                                                                fx<
                                                                fx=
                                                                fx-
                                                                fx+
                                                                set-lambda-meta!
                                                                lambda-meta
                                                                lambda?
                                                                make-dynlet
                                                                make-letrec
                                                                make-let
                                                                make-lambda-case
                                                                make-lambda
                                                                make-sequence
                                                                make-application
                                                                make-conditional
                                                                make-toplevel-define
                                                                make-toplevel-set
                                                                make-toplevel-ref
                                                                make-module-set
                                                                make-module-ref
                                                                make-lexical-set
                                                                make-lexical-ref
                                                                make-primitive-ref
                                                                make-const
                                                                make-void)
                                                              ((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                              ("l-*-476"
                                                               "l-*-474"
                                                               "l-*-472"
                                                               "l-*-470"
                                                               "l-*-468"
                                                               "l-*-466"
                                                               "l-*-464"
                                                               "l-*-462"
                                                               "l-*-460"
                                                               "l-*-458"
                                                               "l-*-456"
                                                               "l-*-454"
                                                               "l-*-452"
                                                               "l-*-450"
                                                               "l-*-448"
                                                               "l-*-446"
                                                               "l-*-444"
                                                               "l-*-442"
                                                               "l-*-440"
                                                               "l-*-438"
                                                               "l-*-436"
                                                               "l-*-434"
                                                               "l-*-432"
                                                               "l-*-430"
                                                               "l-*-428"
                                                               "l-*-426"
                                                               "l-*-424"
                                                               "l-*-422"
                                                               "l-*-420"
                                                               "l-*-418"
                                                               "l-*-416"
                                                               "l-*-414"
                                                               "l-*-412"
                                                               "l-*-410"
                                                               "l-*-408"
                                                               "l-*-406"
                                                               "l-*-404"
                                                               "l-*-402"
                                                               "l-*-400"
                                                               "l-*-399"
                                                               "l-*-397"
                                                               "l-*-394"
                                                               "l-*-393"
                                                               "l-*-392"
                                                               "l-*-390"
                                                               "l-*-389"
                                                               "l-*-387"
                                                               "l-*-385"
                                                               "l-*-383"
                                                               "l-*-381"
                                                               "l-*-379"
                                                               "l-*-377"
                                                               "l-*-375"
                                                               "l-*-373"
                                                               "l-*-370"
                                                               "l-*-368"
                                                               "l-*-367"
                                                               "l-*-365"
                                                               "l-*-363"
                                                               "l-*-361"
                                                               "l-*-359"
                                                               "l-*-358"
                                                               "l-*-357"
                                                               "l-*-356"
                                                               "l-*-354"
                                                               "l-*-353"
                                                               "l-*-350"
                                                               "l-*-348"
                                                               "l-*-346"
                                                               "l-*-344"
                                                               "l-*-342"
                                                               "l-*-340"
                                                               "l-*-338"
                                                               "l-*-337"
                                                               "l-*-336"
                                                               "l-*-334"
                                                               "l-*-332"
                                                               "l-*-331"
                                                               "l-*-328"
                                                               "l-*-327"
                                                               "l-*-325"
                                                               "l-*-323"
                                                               "l-*-321"
                                                               "l-*-319"
                                                               "l-*-317"
                                                               "l-*-315"
                                                               "l-*-313"
                                                               "l-*-311"
                                                               "l-*-309"
                                                               "l-*-306"
                                                               "l-*-304"
                                                               "l-*-302"
                                                               "l-*-300"
                                                               "l-*-298"
                                                               "l-*-296"
                                                               "l-*-294"
                                                               "l-*-292"
                                                               "l-*-290"
                                                               "l-*-288"
                                                               "l-*-286"
                                                               "l-*-284"
                                                               "l-*-282"
                                                               "l-*-280"
                                                               "l-*-278"
                                                               "l-*-276"
                                                               "l-*-274"
                                                               "l-*-272"
                                                               "l-*-270"
                                                               "l-*-268"
                                                               "l-*-266"
                                                               "l-*-264"
                                                               "l-*-262"
                                                               "l-*-260"
                                                               "l-*-258"
                                                               "l-*-256"
                                                               "l-*-255"
                                                               "l-*-254"
                                                               "l-*-253"
                                                               "l-*-252"
                                                               "l-*-250"
                                                               "l-*-248"
                                                               "l-*-246"
                                                               "l-*-243"
                                                               "l-*-241"
                                                               "l-*-239"
                                                               "l-*-237"
                                                               "l-*-235"
                                                               "l-*-233"
                                                               "l-*-231"
                                                               "l-*-229"
                                                               "l-*-227"
                                                               "l-*-225"
                                                               "l-*-223"
                                                               "l-*-221"
                                                               "l-*-219"
                                                               "l-*-217"
                                                               "l-*-215"
                                                               "l-*-213"
                                                               "l-*-211"
                                                               "l-*-209"))
                                                            #(ribcage
                                                              (define-structure
                                                                define-expansion-accessors
                                                                define-expansion-constructors)
                                                              ((top)
                                                               (top)
                                                               (top))
                                                              ("l-*-47"
                                                               "l-*-46"
                                                               "l-*-45")))
                                                           (hygiene guile)))
                                                       '(())
                                                       s-20827
                                                       mod-20829))
                                                   tmp-21209)
                                                 (syntax-violation
                                                   #f
                                                   "source expression failed to match any pattern"
                                                   e-20824)))))))
                                     (if (eqv? ftype-20877 'define-syntax)
                                       (let ((tmp-21264
                                               ($sc-dispatch
                                                 e-20824
                                                 '(_ any any))))
                                         (if (if tmp-21264
                                               (@apply
                                                 (lambda (name-21268 val-21269)
                                                   (if (symbol? name-21268)
                                                     #t
                                                     (if (if (vector?
                                                               name-21268)
                                                           (if (= (vector-length
                                                                    name-21268)
                                                                  4)
                                                             (eq? (vector-ref
                                                                    name-21268
                                                                    0)
                                                                  'syntax-object)
                                                             #f)
                                                           #f)
                                                       (symbol?
                                                         (vector-ref
                                                           name-21268
                                                           1))
                                                       #f)))
                                                 tmp-21264)
                                               #f)
                                           (@apply
                                             (lambda (name-21296 val-21297)
                                               (values
                                                 'define-syntax-form
                                                 name-21296
                                                 e-20824
                                                 val-21297
                                                 w-20826
                                                 s-20827
                                                 mod-20829))
                                             tmp-21264)
                                           (syntax-violation
                                             #f
                                             "source expression failed to match any pattern"
                                             e-20824)))
                                       (if (eqv? ftype-20877
                                                 'define-syntax-parameter)
                                         (let ((tmp-21311
                                                 ($sc-dispatch
                                                   e-20824
                                                   '(_ any any))))
                                           (if (if tmp-21311
                                                 (@apply
                                                   (lambda (name-21315
                                                            val-21316)
                                                     (if (symbol? name-21315)
                                                       #t
                                                       (if (if (vector?
                                                                 name-21315)
                                                             (if (= (vector-length
                                                                      name-21315)
                                                                    4)
                                                               (eq? (vector-ref
                                                                      name-21315
                                                                      0)
                                                                    'syntax-object)
                                                               #f)
                                                             #f)
                                                         (symbol?
                                                           (vector-ref
                                                             name-21315
                                                             1))
                                                         #f)))
                                                   tmp-21311)
                                                 #f)
                                             (@apply
                                               (lambda (name-21343 val-21344)
                                                 (values
                                                   'define-syntax-parameter-form
                                                   name-21343
                                                   e-20824
                                                   val-21344
                                                   w-20826
                                                   s-20827
                                                   mod-20829))
                                               tmp-21311)
                                             (syntax-violation
                                               #f
                                               "source expression failed to match any pattern"
                                               e-20824)))
                                         (values
                                           'call
                                           #f
                                           e-20824
                                           e-20824
                                           w-20826
                                           s-20827
                                           mod-20829)))))))))))))))
             (if (if (vector? e-20824)
                   (if (= (vector-length e-20824) 4)
                     (eq? (vector-ref e-20824 0) 'syntax-object)
                     #f)
                   #f)
               (syntax-type-4329
                 (vector-ref e-20824 1)
                 r-20825
                 (join-wraps-4310 w-20826 (vector-ref e-20824 2))
                 (let ((t-21371 (source-annotation-4287 e-20824)))
                   (if t-21371 t-21371 s-20827))
                 rib-20828
                 (let ((t-21606 (vector-ref e-20824 3)))
                   (if t-21606 t-21606 mod-20829))
                 for-car?-20830)
               (if (self-evaluating? e-20824)
                 (values
                   'constant
                   #f
                   e-20824
                   e-20824
                   w-20826
                   s-20827
                   mod-20829)
                 (values
                   'other
                   #f
                   e-20824
                   e-20824
                   w-20826
                   s-20827
                   mod-20829)))))))
     (expand-4330
       (lambda (e-21615 r-21616 w-21617 mod-21618)
         (call-with-values
           (lambda ()
             (syntax-type-4329
               e-21615
               r-21616
               w-21617
               (source-annotation-4287 e-21615)
               #f
               mod-21618
               #f))
           (lambda (type-21773
                    value-21774
                    form-21775
                    e-21776
                    w-21777
                    s-21778
                    mod-21779)
             (expand-expr-4331
               type-21773
               value-21774
               form-21775
               e-21776
               r-21616
               w-21777
               s-21778
               mod-21779)))))
     (expand-expr-4331
       (lambda (type-21782
                value-21783
                form-21784
                e-21785
                r-21786
                w-21787
                s-21788
                mod-21789)
         (if (eqv? type-21782 'lexical)
           (make-struct/no-tail
             (vector-ref %expanded-vtables 3)
             s-21788
             e-21785
             value-21783)
           (if (if (eqv? type-21782 'core)
                 #t
                 (eqv? type-21782 'core-form))
             (value-21783
               e-21785
               r-21786
               w-21787
               s-21788
               mod-21789)
             (if (eqv? type-21782 'module-ref)
               (call-with-values
                 (lambda () (value-21783 e-21785 r-21786 w-21787))
                 (lambda (e-21825 r-21826 w-21827 s-21828 mod-21829)
                   (expand-4330 e-21825 r-21826 w-21827 mod-21829)))
               (if (eqv? type-21782 'lexical-call)
                 (expand-application-4332
                   (let ((id-21907 (car e-21785)))
                     (build-lexical-reference-4264
                       'fun
                       (source-annotation-4287 id-21907)
                       (if (if (vector? id-21907)
                             (if (= (vector-length id-21907) 4)
                               (eq? (vector-ref id-21907 0) 'syntax-object)
                               #f)
                             #f)
                         (syntax->datum id-21907)
                         id-21907)
                       value-21783))
                   e-21785
                   r-21786
                   w-21787
                   s-21788
                   mod-21789)
                 (if (eqv? type-21782 'global-call)
                   (expand-application-4332
                     (build-global-reference-4267
                       (source-annotation-4287 (car e-21785))
                       (if (if (vector? value-21783)
                             (if (= (vector-length value-21783) 4)
                               (eq? (vector-ref value-21783 0) 'syntax-object)
                               #f)
                             #f)
                         (vector-ref value-21783 1)
                         value-21783)
                       (if (if (vector? value-21783)
                             (if (= (vector-length value-21783) 4)
                               (eq? (vector-ref value-21783 0) 'syntax-object)
                               #f)
                             #f)
                         (vector-ref value-21783 3)
                         mod-21789))
                     e-21785
                     r-21786
                     w-21787
                     s-21788
                     mod-21789)
                   (if (eqv? type-21782 'constant)
                     (let ((exp-22250
                             (strip-4343
                               (wrap-4323
                                 (begin
                                   (if (if (pair? e-21785) s-21788 #f)
                                     (set-source-properties! e-21785 s-21788))
                                   e-21785)
                                 w-21787
                                 mod-21789)
                               '(()))))
                       (make-struct/no-tail
                         (vector-ref %expanded-vtables 1)
                         s-21788
                         exp-22250))
                     (if (eqv? type-21782 'global)
                       (analyze-variable-4266
                         mod-21789
                         value-21783
                         (lambda (mod-22289 var-22290 public?-22291)
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 5)
                             s-21788
                             mod-22289
                             var-22290
                             public?-22291))
                         (lambda (var-22300)
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 7)
                             s-21788
                             var-22300)))
                       (if (eqv? type-21782 'call)
                         (expand-application-4332
                           (expand-4330
                             (car e-21785)
                             r-21786
                             w-21787
                             mod-21789)
                           e-21785
                           r-21786
                           w-21787
                           s-21788
                           mod-21789)
                         (if (eqv? type-21782 'begin-form)
                           (let ((tmp-22381
                                   ($sc-dispatch e-21785 '(_ any . each-any))))
                             (if tmp-22381
                               (@apply
                                 (lambda (e1-22385 e2-22386)
                                   (expand-sequence-4325
                                     (cons e1-22385 e2-22386)
                                     r-21786
                                     w-21787
                                     s-21788
                                     mod-21789))
                                 tmp-22381)
                               (let ((tmp-22473 ($sc-dispatch e-21785 '(_))))
                                 (if tmp-22473
                                   (@apply
                                     (lambda ()
                                       (if (include-deprecated-features)
                                         (begin
                                           (issue-deprecation-warning
                                             "Sequences of zero expressions are deprecated.  Use *unspecified*.")
                                           (make-struct/no-tail
                                             (vector-ref %expanded-vtables 0)
                                             #f))
                                         (syntax-violation
                                           #f
                                           "sequence of zero expressions"
                                           (wrap-4323
                                             (begin
                                               (if (if (pair? e-21785)
                                                     s-21788
                                                     #f)
                                                 (set-source-properties!
                                                   e-21785
                                                   s-21788))
                                               e-21785)
                                             w-21787
                                             mod-21789))))
                                     tmp-22473)
                                   (syntax-violation
                                     #f
                                     "source expression failed to match any pattern"
                                     e-21785)))))
                           (if (eqv? type-21782 'local-syntax-form)
                             (expand-local-syntax-4335
                               value-21783
                               e-21785
                               r-21786
                               w-21787
                               s-21788
                               mod-21789
                               expand-sequence-4325)
                             (if (eqv? type-21782 'eval-when-form)
                               (let ((tmp-22590
                                       ($sc-dispatch
                                         e-21785
                                         '(_ each-any any . each-any))))
                                 (if tmp-22590
                                   (@apply
                                     (lambda (x-22594 e1-22595 e2-22596)
                                       (let ((when-list-22597
                                               (parse-when-list-4328
                                                 e-21785
                                                 x-22594)))
                                         (if (memq 'eval when-list-22597)
                                           (expand-sequence-4325
                                             (cons e1-22595 e2-22596)
                                             r-21786
                                             w-21787
                                             s-21788
                                             mod-21789)
                                           (make-struct/no-tail
                                             (vector-ref %expanded-vtables 0)
                                             #f))))
                                     tmp-22590)
                                   (syntax-violation
                                     #f
                                     "source expression failed to match any pattern"
                                     e-21785)))
                               (if (if (eqv? type-21782 'define-form)
                                     #t
                                     (if (eqv? type-21782 'define-syntax-form)
                                       #t
                                       (eqv? type-21782
                                             'define-syntax-parameter-form)))
                                 (syntax-violation
                                   #f
                                   "definition in expression context, where definitions are not allowed,"
                                   (wrap-4323
                                     (begin
                                       (if (if (pair? form-21784) s-21788 #f)
                                         (set-source-properties!
                                           form-21784
                                           s-21788))
                                       form-21784)
                                     w-21787
                                     mod-21789))
                                 (if (eqv? type-21782 'syntax)
                                   (syntax-violation
                                     #f
                                     "reference to pattern variable outside syntax form"
                                     (wrap-4323
                                       (begin
                                         (if (if (pair? e-21785) s-21788 #f)
                                           (set-source-properties!
                                             e-21785
                                             s-21788))
                                         e-21785)
                                       w-21787
                                       mod-21789))
                                   (if (eqv? type-21782 'displaced-lexical)
                                     (syntax-violation
                                       #f
                                       "reference to identifier outside its scope"
                                       (wrap-4323
                                         (begin
                                           (if (if (pair? e-21785) s-21788 #f)
                                             (set-source-properties!
                                               e-21785
                                               s-21788))
                                           e-21785)
                                         w-21787
                                         mod-21789))
                                     (syntax-violation
                                       #f
                                       "unexpected syntax"
                                       (wrap-4323
                                         (begin
                                           (if (if (pair? e-21785) s-21788 #f)
                                             (set-source-properties!
                                               e-21785
                                               s-21788))
                                           e-21785)
                                         w-21787
                                         mod-21789))))))))))))))))))
     (expand-application-4332
       (lambda (x-22866
                e-22867
                r-22868
                w-22869
                s-22870
                mod-22871)
         (let ((tmp-22873
                 ($sc-dispatch e-22867 '(any . each-any))))
           (if tmp-22873
             (@apply
               (lambda (e0-22877 e1-22878)
                 (build-application-4261
                   s-22870
                   x-22866
                   (map (lambda (e-22958)
                          (expand-4330 e-22958 r-22868 w-22869 mod-22871))
                        e1-22878)))
               tmp-22873)
             (syntax-violation
               #f
               "source expression failed to match any pattern"
               e-22867)))))
     (expand-macro-4333
       (lambda (p-23034
                e-23035
                r-23036
                w-23037
                s-23038
                rib-23039
                mod-23040)
         (letrec*
           ((rebuild-macro-output-23041
              (lambda (x-23074 m-23075)
                (if (pair? x-23074)
                  (let ((e-23079
                          (cons (rebuild-macro-output-23041
                                  (car x-23074)
                                  m-23075)
                                (rebuild-macro-output-23041
                                  (cdr x-23074)
                                  m-23075))))
                    (begin
                      (if (if (pair? e-23079) s-23038 #f)
                        (set-source-properties! e-23079 s-23038))
                      e-23079))
                  (if (if (vector? x-23074)
                        (if (= (vector-length x-23074) 4)
                          (eq? (vector-ref x-23074 0) 'syntax-object)
                          #f)
                        #f)
                    (let ((w-23095 (vector-ref x-23074 2)))
                      (let ((ms-23096 (car w-23095))
                            (ss-23097 (cdr w-23095)))
                        (if (if (pair? ms-23096) (eq? (car ms-23096) #f) #f)
                          (let ((expression-23105 (vector-ref x-23074 1))
                                (wrap-23106
                                  (cons (cdr ms-23096)
                                        (if rib-23039
                                          (cons rib-23039 (cdr ss-23097))
                                          (cdr ss-23097))))
                                (module-23107 (vector-ref x-23074 3)))
                            (vector
                              'syntax-object
                              expression-23105
                              wrap-23106
                              module-23107))
                          (let ((expression-23117
                                  (let ((e-23122 (vector-ref x-23074 1)))
                                    (begin
                                      (if (if (pair? e-23122) s-23038 #f)
                                        (set-source-properties!
                                          e-23122
                                          s-23038))
                                      e-23122)))
                                (wrap-23118
                                  (cons (cons m-23075 ms-23096)
                                        (if rib-23039
                                          (cons rib-23039
                                                (cons 'shift ss-23097))
                                          (cons 'shift ss-23097))))
                                (module-23119 (vector-ref x-23074 3)))
                            (vector
                              'syntax-object
                              expression-23117
                              wrap-23118
                              module-23119)))))
                    (if (vector? x-23074)
                      (let ((n-23134 (vector-length x-23074)))
                        (let ((v-23135
                                (let ((e-23143 (make-vector n-23134)))
                                  (begin
                                    (if (if (pair? e-23143) s-23038 #f)
                                      (set-source-properties! e-23143 s-23038))
                                    e-23143))))
                          (letrec*
                            ((loop-23136
                               (lambda (i-23188)
                                 (if (= i-23188 n-23134)
                                   v-23135
                                   (begin
                                     (vector-set!
                                       v-23135
                                       i-23188
                                       (rebuild-macro-output-23041
                                         (vector-ref x-23074 i-23188)
                                         m-23075))
                                     (loop-23136 (#{1+}# i-23188)))))))
                            (loop-23136 0))))
                      (if (symbol? x-23074)
                        (syntax-violation
                          #f
                          "encountered raw symbol in macro output"
                          (let ((s-23194 (cdr w-23037)))
                            (wrap-4323
                              (begin
                                (if (if (pair? e-23035) s-23194 #f)
                                  (set-source-properties! e-23035 s-23194))
                                e-23035)
                              w-23037
                              mod-23040))
                          x-23074)
                        (begin
                          (if (if (pair? x-23074) s-23038 #f)
                            (set-source-properties! x-23074 s-23038))
                          x-23074))))))))
           (with-fluids
             ((transformer-environment-4316
                (lambda (k-23042)
                  (k-23042
                    e-23035
                    r-23036
                    w-23037
                    s-23038
                    rib-23039
                    mod-23040))))
             (rebuild-macro-output-23041
               (p-23034
                 (let ((w-23049
                         (cons (cons #f (car w-23037))
                               (cons 'shift (cdr w-23037)))))
                   (wrap-4323
                     (begin
                       (if (if (pair? e-23035) s-23038 #f)
                         (set-source-properties! e-23035 s-23038))
                       e-23035)
                     w-23049
                     mod-23040)))
               (gensym
                 (string-append "m-" (session-id-4255) "-")))))))
     (expand-body-4334
       (lambda (body-23226
                outer-form-23227
                r-23228
                w-23229
                mod-23230)
         (let ((r-23231
                 (cons '("placeholder" placeholder) r-23228)))
           (let ((ribcage-23232 (vector 'ribcage '() '() '())))
             (let ((w-23233
                     (cons (car w-23229)
                           (cons ribcage-23232 (cdr w-23229)))))
               (letrec*
                 ((parse-23234
                    (lambda (body-23247
                             ids-23248
                             labels-23249
                             var-ids-23250
                             vars-23251
                             vals-23252
                             bindings-23253)
                      (if (null? body-23247)
                        (syntax-violation
                          #f
                          "no expressions in body"
                          outer-form-23227)
                        (let ((e-23254 (cdr (car body-23247)))
                              (er-23255 (car (car body-23247))))
                          (call-with-values
                            (lambda ()
                              (syntax-type-4329
                                e-23254
                                er-23255
                                '(())
                                (source-annotation-4287 er-23255)
                                ribcage-23232
                                mod-23230
                                #f))
                            (lambda (type-23412
                                     value-23413
                                     form-23414
                                     e-23415
                                     w-23416
                                     s-23417
                                     mod-23418)
                              (if (eqv? type-23412 'define-form)
                                (let ((id-23426
                                        (wrap-4323
                                          value-23413
                                          w-23416
                                          mod-23418))
                                      (label-23427
                                        (string-append
                                          "l-"
                                          (session-id-4255)
                                          (symbol->string (gensym "-")))))
                                  (let ((var-23428
                                          (let ((id-23488
                                                  (if (if (vector? id-23426)
                                                        (if (= (vector-length
                                                                 id-23426)
                                                               4)
                                                          (eq? (vector-ref
                                                                 id-23426
                                                                 0)
                                                               'syntax-object)
                                                          #f)
                                                        #f)
                                                    (vector-ref id-23426 1)
                                                    id-23426)))
                                            (gensym
                                              (string-append
                                                (symbol->string id-23488)
                                                "-")))))
                                    (begin
                                      (let ((update-23478
                                              (cons (vector-ref id-23426 1)
                                                    (vector-ref
                                                      ribcage-23232
                                                      1))))
                                        (vector-set!
                                          ribcage-23232
                                          1
                                          update-23478))
                                      (let ((update-23480
                                              (cons (car (vector-ref
                                                           id-23426
                                                           2))
                                                    (vector-ref
                                                      ribcage-23232
                                                      2))))
                                        (vector-set!
                                          ribcage-23232
                                          2
                                          update-23480))
                                      (let ((update-23482
                                              (cons label-23427
                                                    (vector-ref
                                                      ribcage-23232
                                                      3))))
                                        (vector-set!
                                          ribcage-23232
                                          3
                                          update-23482))
                                      (parse-23234
                                        (cdr body-23247)
                                        (cons id-23426 ids-23248)
                                        (cons label-23427 labels-23249)
                                        (cons id-23426 var-ids-23250)
                                        (cons var-23428 vars-23251)
                                        (cons (cons er-23255
                                                    (wrap-4323
                                                      e-23415
                                                      w-23416
                                                      mod-23418))
                                              vals-23252)
                                        (cons (cons 'lexical var-23428)
                                              bindings-23253)))))
                                (if (if (eqv? type-23412 'define-syntax-form)
                                      #t
                                      (eqv? type-23412
                                            'define-syntax-parameter-form))
                                  (let ((id-23524
                                          (wrap-4323
                                            value-23413
                                            w-23416
                                            mod-23418))
                                        (label-23525
                                          (string-append
                                            "l-"
                                            (session-id-4255)
                                            (symbol->string (gensym "-")))))
                                    (begin
                                      (let ((update-23575
                                              (cons (vector-ref id-23524 1)
                                                    (vector-ref
                                                      ribcage-23232
                                                      1))))
                                        (vector-set!
                                          ribcage-23232
                                          1
                                          update-23575))
                                      (let ((update-23577
                                              (cons (car (vector-ref
                                                           id-23524
                                                           2))
                                                    (vector-ref
                                                      ribcage-23232
                                                      2))))
                                        (vector-set!
                                          ribcage-23232
                                          2
                                          update-23577))
                                      (let ((update-23579
                                              (cons label-23525
                                                    (vector-ref
                                                      ribcage-23232
                                                      3))))
                                        (vector-set!
                                          ribcage-23232
                                          3
                                          update-23579))
                                      (parse-23234
                                        (cdr body-23247)
                                        (cons id-23524 ids-23248)
                                        (cons label-23525 labels-23249)
                                        var-ids-23250
                                        vars-23251
                                        vals-23252
                                        (cons (cons 'macro
                                                    (cons er-23255
                                                          (wrap-4323
                                                            e-23415
                                                            w-23416
                                                            mod-23418)))
                                              bindings-23253))))
                                  (if (eqv? type-23412 'begin-form)
                                    (let ((tmp-23590
                                            ($sc-dispatch
                                              e-23415
                                              '(_ . each-any))))
                                      (if tmp-23590
                                        (@apply
                                          (lambda (e1-23594)
                                            (parse-23234
                                              (letrec*
                                                ((f-23595
                                                   (lambda (forms-23658)
                                                     (if (null? forms-23658)
                                                       (cdr body-23247)
                                                       (cons (cons er-23255
                                                                   (wrap-4323
                                                                     (car forms-23658)
                                                                     w-23416
                                                                     mod-23418))
                                                             (f-23595
                                                               (cdr forms-23658)))))))
                                                (f-23595 e1-23594))
                                              ids-23248
                                              labels-23249
                                              var-ids-23250
                                              vars-23251
                                              vals-23252
                                              bindings-23253))
                                          tmp-23590)
                                        (syntax-violation
                                          #f
                                          "source expression failed to match any pattern"
                                          e-23415)))
                                    (if (eqv? type-23412 'local-syntax-form)
                                      (expand-local-syntax-4335
                                        value-23413
                                        e-23415
                                        er-23255
                                        w-23416
                                        s-23417
                                        mod-23418
                                        (lambda (forms-23675
                                                 er-23676
                                                 w-23677
                                                 s-23678
                                                 mod-23679)
                                          (parse-23234
                                            (letrec*
                                              ((f-23680
                                                 (lambda (forms-23743)
                                                   (if (null? forms-23743)
                                                     (cdr body-23247)
                                                     (cons (cons er-23676
                                                                 (wrap-4323
                                                                   (car forms-23743)
                                                                   w-23677
                                                                   mod-23679))
                                                           (f-23680
                                                             (cdr forms-23743)))))))
                                              (f-23680 forms-23675))
                                            ids-23248
                                            labels-23249
                                            var-ids-23250
                                            vars-23251
                                            vals-23252
                                            bindings-23253)))
                                      (if (null? ids-23248)
                                        (build-sequence-4275
                                          #f
                                          (map (lambda (x-23808)
                                                 (let ((e-23812 (cdr x-23808))
                                                       (r-23813 (car x-23808)))
                                                   (call-with-values
                                                     (lambda ()
                                                       (syntax-type-4329
                                                         e-23812
                                                         r-23813
                                                         '(())
                                                         (source-annotation-4287
                                                           e-23812)
                                                         #f
                                                         mod-23418
                                                         #f))
                                                     (lambda (type-23817
                                                              value-23818
                                                              form-23819
                                                              e-23820
                                                              w-23821
                                                              s-23822
                                                              mod-23823)
                                                       (expand-expr-4331
                                                         type-23817
                                                         value-23818
                                                         form-23819
                                                         e-23820
                                                         r-23813
                                                         w-23821
                                                         s-23822
                                                         mod-23823)))))
                                               (cons (cons er-23255
                                                           (wrap-4323
                                                             (begin
                                                               (if (if (pair? e-23415)
                                                                     s-23417
                                                                     #f)
                                                                 (set-source-properties!
                                                                   e-23415
                                                                   s-23417))
                                                               e-23415)
                                                             w-23416
                                                             mod-23418))
                                                     (cdr body-23247))))
                                        (begin
                                          (if (not (valid-bound-ids?-4320
                                                     ids-23248))
                                            (syntax-violation
                                              #f
                                              "invalid or duplicate identifier in definition"
                                              outer-form-23227))
                                          (letrec*
                                            ((loop-23924
                                               (lambda (bs-23927
                                                        er-cache-23928
                                                        r-cache-23929)
                                                 (if (not (null? bs-23927))
                                                   (let ((b-23930
                                                           (car bs-23927)))
                                                     (if (eq? (car b-23930)
                                                              'macro)
                                                       (let ((er-23932
                                                               (car (cdr b-23930))))
                                                         (let ((r-cache-23933
                                                                 (if (eq? er-23932
                                                                          er-cache-23928)
                                                                   r-cache-23929
                                                                   (macros-only-env-4290
                                                                     er-23932))))
                                                           (begin
                                                             (set-cdr!
                                                               b-23930
                                                               (eval-local-transformer-4336
                                                                 (expand-4330
                                                                   (cdr (cdr b-23930))
                                                                   r-cache-23933
                                                                   '(())
                                                                   mod-23418)
                                                                 mod-23418))
                                                             (loop-23924
                                                               (cdr bs-23927)
                                                               er-23932
                                                               r-cache-23933))))
                                                       (loop-23924
                                                         (cdr bs-23927)
                                                         er-cache-23928
                                                         r-cache-23929)))))))
                                            (loop-23924 bindings-23253 #f #f))
                                          (set-cdr!
                                            r-23231
                                            (extend-env-4288
                                              labels-23249
                                              bindings-23253
                                              (cdr r-23231)))
                                          (build-letrec-4278
                                            #f
                                            #t
                                            (reverse
                                              (map syntax->datum
                                                   var-ids-23250))
                                            (reverse vars-23251)
                                            (map (lambda (x-24276)
                                                   (let ((e-24280
                                                           (cdr x-24276))
                                                         (r-24281
                                                           (car x-24276)))
                                                     (call-with-values
                                                       (lambda ()
                                                         (syntax-type-4329
                                                           e-24280
                                                           r-24281
                                                           '(())
                                                           (source-annotation-4287
                                                             e-24280)
                                                           #f
                                                           mod-23418
                                                           #f))
                                                       (lambda (type-24285
                                                                value-24286
                                                                form-24287
                                                                e-24288
                                                                w-24289
                                                                s-24290
                                                                mod-24291)
                                                         (expand-expr-4331
                                                           type-24285
                                                           value-24286
                                                           form-24287
                                                           e-24288
                                                           r-24281
                                                           w-24289
                                                           s-24290
                                                           mod-24291)))))
                                                 (reverse vals-23252))
                                            (let ((exps-24297
                                                    (map (lambda (x-24298)
                                                           (let ((e-24301
                                                                   (cdr x-24298))
                                                                 (r-24302
                                                                   (car x-24298)))
                                                             (call-with-values
                                                               (lambda ()
                                                                 (syntax-type-4329
                                                                   e-24301
                                                                   r-24302
                                                                   '(())
                                                                   (source-annotation-4287
                                                                     e-24301)
                                                                   #f
                                                                   mod-23418
                                                                   #f))
                                                               (lambda (type-24306
                                                                        value-24307
                                                                        form-24308
                                                                        e-24309
                                                                        w-24310
                                                                        s-24311
                                                                        mod-24312)
                                                                 (expand-expr-4331
                                                                   type-24306
                                                                   value-24307
                                                                   form-24308
                                                                   e-24309
                                                                   r-24302
                                                                   w-24310
                                                                   s-24311
                                                                   mod-24312)))))
                                                         (cons (cons er-23255
                                                                     (wrap-4323
                                                                       (begin
                                                                         (if (if (pair? e-23415)
                                                                               s-23417
                                                                               #f)
                                                                           (set-source-properties!
                                                                             e-23415
                                                                             s-23417))
                                                                         e-23415)
                                                                       w-23416
                                                                       mod-23418))
                                                               (cdr body-23247)))))
                                              (if (null? (cdr exps-24297))
                                                (car exps-24297)
                                                (make-struct/no-tail
                                                  (vector-ref
                                                    %expanded-vtables
                                                    12)
                                                  #f
                                                  exps-24297)))))))))))))))))
                 (parse-23234
                   (map (lambda (x-23237)
                          (cons r-23231
                                (wrap-4323 x-23237 w-23233 mod-23230)))
                        body-23226)
                   '()
                   '()
                   '()
                   '()
                   '()
                   '())))))))
     (expand-local-syntax-4335
       (lambda (rec?-24338
                e-24339
                r-24340
                w-24341
                s-24342
                mod-24343
                k-24344)
         (let ((tmp-24346
                 ($sc-dispatch
                   e-24339
                   '(_ #(each (any any)) any . each-any))))
           (if tmp-24346
             (@apply
               (lambda (id-24350 val-24351 e1-24352 e2-24353)
                 (if (not (valid-bound-ids?-4320 id-24350))
                   (syntax-violation
                     #f
                     "duplicate bound keyword"
                     e-24339)
                   (let ((labels-24443 (gen-labels-4297 id-24350)))
                     (let ((new-w-24444
                             (make-binding-wrap-4308
                               id-24350
                               labels-24443
                               w-24341)))
                       (k-24344
                         (cons e1-24352 e2-24353)
                         (extend-env-4288
                           labels-24443
                           (let ((trans-r-24480
                                   (macros-only-env-4290 r-24340)))
                             (begin
                               (if rec?-24338 new-w-24444 w-24341)
                               (map (lambda (x-24481)
                                      (cons 'macro
                                            (eval-local-transformer-4336
                                              (expand-4330
                                                x-24481
                                                trans-r-24480
                                                (values
                                                  (if rec?-24338
                                                    new-w-24444
                                                    w-24341))
                                                mod-24343)
                                              mod-24343)))
                                    val-24351)))
                           r-24340)
                         new-w-24444
                         s-24342
                         mod-24343)))))
               tmp-24346)
             (syntax-violation
               #f
               "bad local syntax definition"
               (wrap-4323
                 (begin
                   (if (if (pair? e-24339) s-24342 #f)
                     (set-source-properties! e-24339 s-24342))
                   e-24339)
                 w-24341
                 mod-24343))))))
     (eval-local-transformer-4336
       (lambda (expanded-24761 mod-24762)
         (let ((p-24763 (primitive-eval expanded-24761)))
           (if (procedure? p-24763)
             p-24763
             (syntax-violation
               #f
               "nonprocedure transformer"
               p-24763)))))
     (ellipsis?-4338
       (lambda (x-4999)
         (if (if (if (vector? x-4999)
                   (if (= (vector-length x-4999) 4)
                     (eq? (vector-ref x-4999 0) 'syntax-object)
                     #f)
                   #f)
               (symbol? (vector-ref x-4999 1))
               #f)
           (if (eq? (if (if (vector? x-4999)
                          (if (= (vector-length x-4999) 4)
                            (eq? (vector-ref x-4999 0) 'syntax-object)
                            #f)
                          #f)
                      (vector-ref x-4999 1)
                      x-4999)
                    (if (if (= (vector-length
                                 '#(syntax-object
                                    ...
                                    ((top)
                                     #(ribcage () () ())
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("l-*-2266"))
                                     #(ribcage
                                       (lambda-var-list
                                         gen-var
                                         strip
                                         expand-lambda-case
                                         lambda*-formals
                                         expand-simple-lambda
                                         lambda-formals
                                         ellipsis?
                                         expand-void
                                         eval-local-transformer
                                         expand-local-syntax
                                         expand-body
                                         expand-macro
                                         expand-application
                                         expand-expr
                                         expand
                                         syntax-type
                                         parse-when-list
                                         expand-install-global
                                         expand-top-sequence
                                         expand-sequence
                                         source-wrap
                                         wrap
                                         bound-id-member?
                                         distinct-bound-ids?
                                         valid-bound-ids?
                                         bound-id=?
                                         free-id=?
                                         with-transformer-environment
                                         transformer-environment
                                         resolve-identifier
                                         locally-bound-identifiers
                                         id-var-name
                                         same-marks?
                                         join-marks
                                         join-wraps
                                         smart-append
                                         make-binding-wrap
                                         extend-ribcage!
                                         make-empty-ribcage
                                         new-mark
                                         anti-mark
                                         the-anti-mark
                                         top-marked?
                                         top-wrap
                                         empty-wrap
                                         set-ribcage-labels!
                                         set-ribcage-marks!
                                         set-ribcage-symnames!
                                         ribcage-labels
                                         ribcage-marks
                                         ribcage-symnames
                                         ribcage?
                                         make-ribcage
                                         gen-labels
                                         gen-label
                                         make-rename
                                         rename-marks
                                         rename-new
                                         rename-old
                                         subst-rename?
                                         wrap-subst
                                         wrap-marks
                                         make-wrap
                                         id-sym-name&marks
                                         id-sym-name
                                         id?
                                         nonsymbol-id?
                                         global-extend
                                         lookup
                                         macros-only-env
                                         extend-var-env
                                         extend-env
                                         null-env
                                         binding-value
                                         binding-type
                                         make-binding
                                         arg-check
                                         source-annotation
                                         no-source
                                         set-syntax-object-module!
                                         set-syntax-object-wrap!
                                         set-syntax-object-expression!
                                         syntax-object-module
                                         syntax-object-wrap
                                         syntax-object-expression
                                         syntax-object?
                                         make-syntax-object
                                         build-lexical-var
                                         build-letrec
                                         build-named-let
                                         build-let
                                         build-sequence
                                         build-data
                                         build-primref
                                         build-lambda-case
                                         build-case-lambda
                                         build-simple-lambda
                                         build-global-definition
                                         build-global-assignment
                                         build-global-reference
                                         analyze-variable
                                         build-lexical-assignment
                                         build-lexical-reference
                                         build-dynlet
                                         build-conditional
                                         build-application
                                         build-void
                                         maybe-name-value!
                                         decorate-source
                                         get-global-definition-hook
                                         put-global-definition-hook
                                         session-id
                                         local-eval-hook
                                         top-level-eval-hook
                                         fx<
                                         fx=
                                         fx-
                                         fx+
                                         set-lambda-meta!
                                         lambda-meta
                                         lambda?
                                         make-dynlet
                                         make-letrec
                                         make-let
                                         make-lambda-case
                                         make-lambda
                                         make-sequence
                                         make-application
                                         make-conditional
                                         make-toplevel-define
                                         make-toplevel-set
                                         make-toplevel-ref
                                         make-module-set
                                         make-module-ref
                                         make-lexical-set
                                         make-lexical-ref
                                         make-primitive-ref
                                         make-const
                                         make-void)
                                       ((top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top))
                                       ("l-*-476"
                                        "l-*-474"
                                        "l-*-472"
                                        "l-*-470"
                                        "l-*-468"
                                        "l-*-466"
                                        "l-*-464"
                                        "l-*-462"
                                        "l-*-460"
                                        "l-*-458"
                                        "l-*-456"
                                        "l-*-454"
                                        "l-*-452"
                                        "l-*-450"
                                        "l-*-448"
                                        "l-*-446"
                                        "l-*-444"
                                        "l-*-442"
                                        "l-*-440"
                                        "l-*-438"
                                        "l-*-436"
                                        "l-*-434"
                                        "l-*-432"
                                        "l-*-430"
                                        "l-*-428"
                                        "l-*-426"
                                        "l-*-424"
                                        "l-*-422"
                                        "l-*-420"
                                        "l-*-418"
                                        "l-*-416"
                                        "l-*-414"
                                        "l-*-412"
                                        "l-*-410"
                                        "l-*-408"
                                        "l-*-406"
                                        "l-*-404"
                                        "l-*-402"
                                        "l-*-400"
                                        "l-*-399"
                                        "l-*-397"
                                        "l-*-394"
                                        "l-*-393"
                                        "l-*-392"
                                        "l-*-390"
                                        "l-*-389"
                                        "l-*-387"
                                        "l-*-385"
                                        "l-*-383"
                                        "l-*-381"
                                        "l-*-379"
                                        "l-*-377"
                                        "l-*-375"
                                        "l-*-373"
                                        "l-*-370"
                                        "l-*-368"
                                        "l-*-367"
                                        "l-*-365"
                                        "l-*-363"
                                        "l-*-361"
                                        "l-*-359"
                                        "l-*-358"
                                        "l-*-357"
                                        "l-*-356"
                                        "l-*-354"
                                        "l-*-353"
                                        "l-*-350"
                                        "l-*-348"
                                        "l-*-346"
                                        "l-*-344"
                                        "l-*-342"
                                        "l-*-340"
                                        "l-*-338"
                                        "l-*-337"
                                        "l-*-336"
                                        "l-*-334"
                                        "l-*-332"
                                        "l-*-331"
                                        "l-*-328"
                                        "l-*-327"
                                        "l-*-325"
                                        "l-*-323"
                                        "l-*-321"
                                        "l-*-319"
                                        "l-*-317"
                                        "l-*-315"
                                        "l-*-313"
                                        "l-*-311"
                                        "l-*-309"
                                        "l-*-306"
                                        "l-*-304"
                                        "l-*-302"
                                        "l-*-300"
                                        "l-*-298"
                                        "l-*-296"
                                        "l-*-294"
                                        "l-*-292"
                                        "l-*-290"
                                        "l-*-288"
                                        "l-*-286"
                                        "l-*-284"
                                        "l-*-282"
                                        "l-*-280"
                                        "l-*-278"
                                        "l-*-276"
                                        "l-*-274"
                                        "l-*-272"
                                        "l-*-270"
                                        "l-*-268"
                                        "l-*-266"
                                        "l-*-264"
                                        "l-*-262"
                                        "l-*-260"
                                        "l-*-258"
                                        "l-*-256"
                                        "l-*-255"
                                        "l-*-254"
                                        "l-*-253"
                                        "l-*-252"
                                        "l-*-250"
                                        "l-*-248"
                                        "l-*-246"
                                        "l-*-243"
                                        "l-*-241"
                                        "l-*-239"
                                        "l-*-237"
                                        "l-*-235"
                                        "l-*-233"
                                        "l-*-231"
                                        "l-*-229"
                                        "l-*-227"
                                        "l-*-225"
                                        "l-*-223"
                                        "l-*-221"
                                        "l-*-219"
                                        "l-*-217"
                                        "l-*-215"
                                        "l-*-213"
                                        "l-*-211"
                                        "l-*-209"))
                                     #(ribcage
                                       (define-structure
                                         define-expansion-accessors
                                         define-expansion-constructors)
                                       ((top) (top) (top))
                                       ("l-*-47" "l-*-46" "l-*-45")))
                                    (hygiene guile)))
                               4)
                          #t
                          #f)
                      '...
                      '#(syntax-object
                         ...
                         ((top)
                          #(ribcage () () ())
                          #(ribcage () () ())
                          #(ribcage #(x) #((top)) #("l-*-2266"))
                          #(ribcage
                            (lambda-var-list
                              gen-var
                              strip
                              expand-lambda-case
                              lambda*-formals
                              expand-simple-lambda
                              lambda-formals
                              ellipsis?
                              expand-void
                              eval-local-transformer
                              expand-local-syntax
                              expand-body
                              expand-macro
                              expand-application
                              expand-expr
                              expand
                              syntax-type
                              parse-when-list
                              expand-install-global
                              expand-top-sequence
                              expand-sequence
                              source-wrap
                              wrap
                              bound-id-member?
                              distinct-bound-ids?
                              valid-bound-ids?
                              bound-id=?
                              free-id=?
                              with-transformer-environment
                              transformer-environment
                              resolve-identifier
                              locally-bound-identifiers
                              id-var-name
                              same-marks?
                              join-marks
                              join-wraps
                              smart-append
                              make-binding-wrap
                              extend-ribcage!
                              make-empty-ribcage
                              new-mark
                              anti-mark
                              the-anti-mark
                              top-marked?
                              top-wrap
                              empty-wrap
                              set-ribcage-labels!
                              set-ribcage-marks!
                              set-ribcage-symnames!
                              ribcage-labels
                              ribcage-marks
                              ribcage-symnames
                              ribcage?
                              make-ribcage
                              gen-labels
                              gen-label
                              make-rename
                              rename-marks
                              rename-new
                              rename-old
                              subst-rename?
                              wrap-subst
                              wrap-marks
                              make-wrap
                              id-sym-name&marks
                              id-sym-name
                              id?
                              nonsymbol-id?
                              global-extend
                              lookup
                              macros-only-env
                              extend-var-env
                              extend-env
                              null-env
                              binding-value
                              binding-type
                              make-binding
                              arg-check
                              source-annotation
                              no-source
                              set-syntax-object-module!
                              set-syntax-object-wrap!
                              set-syntax-object-expression!
                              syntax-object-module
                              syntax-object-wrap
                              syntax-object-expression
                              syntax-object?
                              make-syntax-object
                              build-lexical-var
                              build-letrec
                              build-named-let
                              build-let
                              build-sequence
                              build-data
                              build-primref
                              build-lambda-case
                              build-case-lambda
                              build-simple-lambda
                              build-global-definition
                              build-global-assignment
                              build-global-reference
                              analyze-variable
                              build-lexical-assignment
                              build-lexical-reference
                              build-dynlet
                              build-conditional
                              build-application
                              build-void
                              maybe-name-value!
                              decorate-source
                              get-global-definition-hook
                              put-global-definition-hook
                              session-id
                              local-eval-hook
                              top-level-eval-hook
                              fx<
                              fx=
                              fx-
                              fx+
                              set-lambda-meta!
                              lambda-meta
                              lambda?
                              make-dynlet
                              make-letrec
                              make-let
                              make-lambda-case
                              make-lambda
                              make-sequence
                              make-application
                              make-conditional
                              make-toplevel-define
                              make-toplevel-set
                              make-toplevel-ref
                              make-module-set
                              make-module-ref
                              make-lexical-set
                              make-lexical-ref
                              make-primitive-ref
                              make-const
                              make-void)
                            ((top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top))
                            ("l-*-476"
                             "l-*-474"
                             "l-*-472"
                             "l-*-470"
                             "l-*-468"
                             "l-*-466"
                             "l-*-464"
                             "l-*-462"
                             "l-*-460"
                             "l-*-458"
                             "l-*-456"
                             "l-*-454"
                             "l-*-452"
                             "l-*-450"
                             "l-*-448"
                             "l-*-446"
                             "l-*-444"
                             "l-*-442"
                             "l-*-440"
                             "l-*-438"
                             "l-*-436"
                             "l-*-434"
                             "l-*-432"
                             "l-*-430"
                             "l-*-428"
                             "l-*-426"
                             "l-*-424"
                             "l-*-422"
                             "l-*-420"
                             "l-*-418"
                             "l-*-416"
                             "l-*-414"
                             "l-*-412"
                             "l-*-410"
                             "l-*-408"
                             "l-*-406"
                             "l-*-404"
                             "l-*-402"
                             "l-*-400"
                             "l-*-399"
                             "l-*-397"
                             "l-*-394"
                             "l-*-393"
                             "l-*-392"
                             "l-*-390"
                             "l-*-389"
                             "l-*-387"
                             "l-*-385"
                             "l-*-383"
                             "l-*-381"
                             "l-*-379"
                             "l-*-377"
                             "l-*-375"
                             "l-*-373"
                             "l-*-370"
                             "l-*-368"
                             "l-*-367"
                             "l-*-365"
                             "l-*-363"
                             "l-*-361"
                             "l-*-359"
                             "l-*-358"
                             "l-*-357"
                             "l-*-356"
                             "l-*-354"
                             "l-*-353"
                             "l-*-350"
                             "l-*-348"
                             "l-*-346"
                             "l-*-344"
                             "l-*-342"
                             "l-*-340"
                             "l-*-338"
                             "l-*-337"
                             "l-*-336"
                             "l-*-334"
                             "l-*-332"
                             "l-*-331"
                             "l-*-328"
                             "l-*-327"
                             "l-*-325"
                             "l-*-323"
                             "l-*-321"
                             "l-*-319"
                             "l-*-317"
                             "l-*-315"
                             "l-*-313"
                             "l-*-311"
                             "l-*-309"
                             "l-*-306"
                             "l-*-304"
                             "l-*-302"
                             "l-*-300"
                             "l-*-298"
                             "l-*-296"
                             "l-*-294"
                             "l-*-292"
                             "l-*-290"
                             "l-*-288"
                             "l-*-286"
                             "l-*-284"
                             "l-*-282"
                             "l-*-280"
                             "l-*-278"
                             "l-*-276"
                             "l-*-274"
                             "l-*-272"
                             "l-*-270"
                             "l-*-268"
                             "l-*-266"
                             "l-*-264"
                             "l-*-262"
                             "l-*-260"
                             "l-*-258"
                             "l-*-256"
                             "l-*-255"
                             "l-*-254"
                             "l-*-253"
                             "l-*-252"
                             "l-*-250"
                             "l-*-248"
                             "l-*-246"
                             "l-*-243"
                             "l-*-241"
                             "l-*-239"
                             "l-*-237"
                             "l-*-235"
                             "l-*-233"
                             "l-*-231"
                             "l-*-229"
                             "l-*-227"
                             "l-*-225"
                             "l-*-223"
                             "l-*-221"
                             "l-*-219"
                             "l-*-217"
                             "l-*-215"
                             "l-*-213"
                             "l-*-211"
                             "l-*-209"))
                          #(ribcage
                            (define-structure
                              define-expansion-accessors
                              define-expansion-constructors)
                            ((top) (top) (top))
                            ("l-*-47" "l-*-46" "l-*-45")))
                         (hygiene guile))))
             (eq? (id-var-name-4313 x-4999 '(()))
                  (id-var-name-4313
                    '#(syntax-object
                       ...
                       ((top)
                        #(ribcage () () ())
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("l-*-2266"))
                        #(ribcage
                          (lambda-var-list
                            gen-var
                            strip
                            expand-lambda-case
                            lambda*-formals
                            expand-simple-lambda
                            lambda-formals
                            ellipsis?
                            expand-void
                            eval-local-transformer
                            expand-local-syntax
                            expand-body
                            expand-macro
                            expand-application
                            expand-expr
                            expand
                            syntax-type
                            parse-when-list
                            expand-install-global
                            expand-top-sequence
                            expand-sequence
                            source-wrap
                            wrap
                            bound-id-member?
                            distinct-bound-ids?
                            valid-bound-ids?
                            bound-id=?
                            free-id=?
                            with-transformer-environment
                            transformer-environment
                            resolve-identifier
                            locally-bound-identifiers
                            id-var-name
                            same-marks?
                            join-marks
                            join-wraps
                            smart-append
                            make-binding-wrap
                            extend-ribcage!
                            make-empty-ribcage
                            new-mark
                            anti-mark
                            the-anti-mark
                            top-marked?
                            top-wrap
                            empty-wrap
                            set-ribcage-labels!
                            set-ribcage-marks!
                            set-ribcage-symnames!
                            ribcage-labels
                            ribcage-marks
                            ribcage-symnames
                            ribcage?
                            make-ribcage
                            gen-labels
                            gen-label
                            make-rename
                            rename-marks
                            rename-new
                            rename-old
                            subst-rename?
                            wrap-subst
                            wrap-marks
                            make-wrap
                            id-sym-name&marks
                            id-sym-name
                            id?
                            nonsymbol-id?
                            global-extend
                            lookup
                            macros-only-env
                            extend-var-env
                            extend-env
                            null-env
                            binding-value
                            binding-type
                            make-binding
                            arg-check
                            source-annotation
                            no-source
                            set-syntax-object-module!
                            set-syntax-object-wrap!
                            set-syntax-object-expression!
                            syntax-object-module
                            syntax-object-wrap
                            syntax-object-expression
                            syntax-object?
                            make-syntax-object
                            build-lexical-var
                            build-letrec
                            build-named-let
                            build-let
                            build-sequence
                            build-data
                            build-primref
                            build-lambda-case
                            build-case-lambda
                            build-simple-lambda
                            build-global-definition
                            build-global-assignment
                            build-global-reference
                            analyze-variable
                            build-lexical-assignment
                            build-lexical-reference
                            build-dynlet
                            build-conditional
                            build-application
                            build-void
                            maybe-name-value!
                            decorate-source
                            get-global-definition-hook
                            put-global-definition-hook
                            session-id
                            local-eval-hook
                            top-level-eval-hook
                            fx<
                            fx=
                            fx-
                            fx+
                            set-lambda-meta!
                            lambda-meta
                            lambda?
                            make-dynlet
                            make-letrec
                            make-let
                            make-lambda-case
                            make-lambda
                            make-sequence
                            make-application
                            make-conditional
                            make-toplevel-define
                            make-toplevel-set
                            make-toplevel-ref
                            make-module-set
                            make-module-ref
                            make-lexical-set
                            make-lexical-ref
                            make-primitive-ref
                            make-const
                            make-void)
                          ((top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top))
                          ("l-*-476"
                           "l-*-474"
                           "l-*-472"
                           "l-*-470"
                           "l-*-468"
                           "l-*-466"
                           "l-*-464"
                           "l-*-462"
                           "l-*-460"
                           "l-*-458"
                           "l-*-456"
                           "l-*-454"
                           "l-*-452"
                           "l-*-450"
                           "l-*-448"
                           "l-*-446"
                           "l-*-444"
                           "l-*-442"
                           "l-*-440"
                           "l-*-438"
                           "l-*-436"
                           "l-*-434"
                           "l-*-432"
                           "l-*-430"
                           "l-*-428"
                           "l-*-426"
                           "l-*-424"
                           "l-*-422"
                           "l-*-420"
                           "l-*-418"
                           "l-*-416"
                           "l-*-414"
                           "l-*-412"
                           "l-*-410"
                           "l-*-408"
                           "l-*-406"
                           "l-*-404"
                           "l-*-402"
                           "l-*-400"
                           "l-*-399"
                           "l-*-397"
                           "l-*-394"
                           "l-*-393"
                           "l-*-392"
                           "l-*-390"
                           "l-*-389"
                           "l-*-387"
                           "l-*-385"
                           "l-*-383"
                           "l-*-381"
                           "l-*-379"
                           "l-*-377"
                           "l-*-375"
                           "l-*-373"
                           "l-*-370"
                           "l-*-368"
                           "l-*-367"
                           "l-*-365"
                           "l-*-363"
                           "l-*-361"
                           "l-*-359"
                           "l-*-358"
                           "l-*-357"
                           "l-*-356"
                           "l-*-354"
                           "l-*-353"
                           "l-*-350"
                           "l-*-348"
                           "l-*-346"
                           "l-*-344"
                           "l-*-342"
                           "l-*-340"
                           "l-*-338"
                           "l-*-337"
                           "l-*-336"
                           "l-*-334"
                           "l-*-332"
                           "l-*-331"
                           "l-*-328"
                           "l-*-327"
                           "l-*-325"
                           "l-*-323"
                           "l-*-321"
                           "l-*-319"
                           "l-*-317"
                           "l-*-315"
                           "l-*-313"
                           "l-*-311"
                           "l-*-309"
                           "l-*-306"
                           "l-*-304"
                           "l-*-302"
                           "l-*-300"
                           "l-*-298"
                           "l-*-296"
                           "l-*-294"
                           "l-*-292"
                           "l-*-290"
                           "l-*-288"
                           "l-*-286"
                           "l-*-284"
                           "l-*-282"
                           "l-*-280"
                           "l-*-278"
                           "l-*-276"
                           "l-*-274"
                           "l-*-272"
                           "l-*-270"
                           "l-*-268"
                           "l-*-266"
                           "l-*-264"
                           "l-*-262"
                           "l-*-260"
                           "l-*-258"
                           "l-*-256"
                           "l-*-255"
                           "l-*-254"
                           "l-*-253"
                           "l-*-252"
                           "l-*-250"
                           "l-*-248"
                           "l-*-246"
                           "l-*-243"
                           "l-*-241"
                           "l-*-239"
                           "l-*-237"
                           "l-*-235"
                           "l-*-233"
                           "l-*-231"
                           "l-*-229"
                           "l-*-227"
                           "l-*-225"
                           "l-*-223"
                           "l-*-221"
                           "l-*-219"
                           "l-*-217"
                           "l-*-215"
                           "l-*-213"
                           "l-*-211"
                           "l-*-209"))
                        #(ribcage
                          (define-structure
                            define-expansion-accessors
                            define-expansion-constructors)
                          ((top) (top) (top))
                          ("l-*-47" "l-*-46" "l-*-45")))
                       (hygiene guile))
                    '(())))
             #f)
           #f)))
     (lambda-formals-4339
       (lambda (orig-args-24768)
         (letrec*
           ((req-24769
              (lambda (args-24773 rreq-24774)
                (let ((tmp-24776 ($sc-dispatch args-24773 '())))
                  (if tmp-24776
                    (@apply
                      (lambda () (check-24770 (reverse rreq-24774) #f))
                      tmp-24776)
                    (let ((tmp-24899
                            ($sc-dispatch args-24773 '(any . any))))
                      (if (if tmp-24899
                            (@apply
                              (lambda (a-24903 b-24904)
                                (if (symbol? a-24903)
                                  #t
                                  (if (if (vector? a-24903)
                                        (if (= (vector-length a-24903) 4)
                                          (eq? (vector-ref a-24903 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (symbol? (vector-ref a-24903 1))
                                    #f)))
                              tmp-24899)
                            #f)
                        (@apply
                          (lambda (a-24931 b-24932)
                            (req-24769 b-24932 (cons a-24931 rreq-24774)))
                          tmp-24899)
                        (let ((tmp-24933 (list args-24773)))
                          (if (@apply
                                (lambda (r-24935)
                                  (if (symbol? r-24935)
                                    #t
                                    (if (if (vector? r-24935)
                                          (if (= (vector-length r-24935) 4)
                                            (eq? (vector-ref r-24935 0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (symbol? (vector-ref r-24935 1))
                                      #f)))
                                tmp-24933)
                            (@apply
                              (lambda (r-24965)
                                (check-24770 (reverse rreq-24774) r-24965))
                              tmp-24933)
                            (syntax-violation
                              'lambda
                              "invalid argument list"
                              orig-args-24768
                              args-24773)))))))))
            (check-24770
              (lambda (req-25096 rest-25097)
                (if (distinct-bound-ids?-4321
                      (if rest-25097
                        (cons rest-25097 req-25096)
                        req-25096))
                  (values req-25096 #f rest-25097 #f)
                  (syntax-violation
                    'lambda
                    "duplicate identifier in argument list"
                    orig-args-24768)))))
           (req-24769 orig-args-24768 '()))))
     (expand-simple-lambda-4340
       (lambda (e-25213
                r-25214
                w-25215
                s-25216
                mod-25217
                req-25218
                rest-25219
                meta-25220
                body-25221)
         (let ((ids-25222
                 (if rest-25219
                   (append req-25218 (list rest-25219))
                   req-25218)))
           (let ((vars-25223 (map gen-var-4344 ids-25222)))
             (let ((labels-25224 (gen-labels-4297 ids-25222)))
               (build-simple-lambda-4270
                 s-25216
                 (map syntax->datum req-25218)
                 (if rest-25219 (syntax->datum rest-25219) #f)
                 vars-25223
                 meta-25220
                 (expand-body-4334
                   body-25221
                   (wrap-4323
                     (begin
                       (if (if (pair? e-25213) s-25216 #f)
                         (set-source-properties! e-25213 s-25216))
                       e-25213)
                     w-25215
                     mod-25217)
                   (extend-var-env-4289
                     labels-25224
                     vars-25223
                     r-25214)
                   (make-binding-wrap-4308
                     ids-25222
                     labels-25224
                     w-25215)
                   mod-25217)))))))
     (lambda*-formals-4341
       (lambda (orig-args-25504)
         (letrec*
           ((req-25505
              (lambda (args-25512 rreq-25513)
                (let ((tmp-25515 ($sc-dispatch args-25512 '())))
                  (if tmp-25515
                    (@apply
                      (lambda ()
                        (check-25509 (reverse rreq-25513) '() #f '()))
                      tmp-25515)
                    (let ((tmp-25521
                            ($sc-dispatch args-25512 '(any . any))))
                      (if (if tmp-25521
                            (@apply
                              (lambda (a-25525 b-25526)
                                (if (symbol? a-25525)
                                  #t
                                  (if (if (vector? a-25525)
                                        (if (= (vector-length a-25525) 4)
                                          (eq? (vector-ref a-25525 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (symbol? (vector-ref a-25525 1))
                                    #f)))
                              tmp-25521)
                            #f)
                        (@apply
                          (lambda (a-25553 b-25554)
                            (req-25505 b-25554 (cons a-25553 rreq-25513)))
                          tmp-25521)
                        (let ((tmp-25555
                                ($sc-dispatch args-25512 '(any . any))))
                          (if (if tmp-25555
                                (@apply
                                  (lambda (a-25559 b-25560)
                                    (eq? (syntax->datum a-25559) #:optional))
                                  tmp-25555)
                                #f)
                            (@apply
                              (lambda (a-25561 b-25562)
                                (opt-25506 b-25562 (reverse rreq-25513) '()))
                              tmp-25555)
                            (let ((tmp-25565
                                    ($sc-dispatch args-25512 '(any . any))))
                              (if (if tmp-25565
                                    (@apply
                                      (lambda (a-25569 b-25570)
                                        (eq? (syntax->datum a-25569) #:key))
                                      tmp-25565)
                                    #f)
                                (@apply
                                  (lambda (a-25571 b-25572)
                                    (key-25507
                                      b-25572
                                      (reverse rreq-25513)
                                      '()
                                      '()))
                                  tmp-25565)
                                (let ((tmp-25575
                                        ($sc-dispatch args-25512 '(any any))))
                                  (if (if tmp-25575
                                        (@apply
                                          (lambda (a-25579 b-25580)
                                            (eq? (syntax->datum a-25579)
                                                 #:rest))
                                          tmp-25575)
                                        #f)
                                    (@apply
                                      (lambda (a-25581 b-25582)
                                        (rest-25508
                                          b-25582
                                          (reverse rreq-25513)
                                          '()
                                          '()))
                                      tmp-25575)
                                    (let ((tmp-25585 (list args-25512)))
                                      (if (@apply
                                            (lambda (r-25587)
                                              (if (symbol? r-25587)
                                                #t
                                                (if (if (vector? r-25587)
                                                      (if (= (vector-length
                                                               r-25587)
                                                             4)
                                                        (eq? (vector-ref
                                                               r-25587
                                                               0)
                                                             'syntax-object)
                                                        #f)
                                                      #f)
                                                  (symbol?
                                                    (vector-ref r-25587 1))
                                                  #f)))
                                            tmp-25585)
                                        (@apply
                                          (lambda (r-25617)
                                            (rest-25508
                                              r-25617
                                              (reverse rreq-25513)
                                              '()
                                              '()))
                                          tmp-25585)
                                        (syntax-violation
                                          'lambda*
                                          "invalid argument list"
                                          orig-args-25504
                                          args-25512)))))))))))))))
            (opt-25506
              (lambda (args-25636 req-25637 ropt-25638)
                (let ((tmp-25640 ($sc-dispatch args-25636 '())))
                  (if tmp-25640
                    (@apply
                      (lambda ()
                        (check-25509
                          req-25637
                          (reverse ropt-25638)
                          #f
                          '()))
                      tmp-25640)
                    (let ((tmp-25646
                            ($sc-dispatch args-25636 '(any . any))))
                      (if (if tmp-25646
                            (@apply
                              (lambda (a-25650 b-25651)
                                (if (symbol? a-25650)
                                  #t
                                  (if (if (vector? a-25650)
                                        (if (= (vector-length a-25650) 4)
                                          (eq? (vector-ref a-25650 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (symbol? (vector-ref a-25650 1))
                                    #f)))
                              tmp-25646)
                            #f)
                        (@apply
                          (lambda (a-25678 b-25679)
                            (opt-25506
                              b-25679
                              req-25637
                              (cons (cons a-25678
                                          '(#(syntax-object
                                              #f
                                              ((top)
                                               #(ribcage
                                                 #(a b)
                                                 #((top) (top))
                                                 #("l-*-2403" "l-*-2404"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(args req ropt)
                                                 #((top) (top) (top))
                                                 #("l-*-2393"
                                                   "l-*-2394"
                                                   "l-*-2395"))
                                               #(ribcage
                                                 (check rest key opt req)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("l-*-2339"
                                                  "l-*-2337"
                                                  "l-*-2335"
                                                  "l-*-2333"
                                                  "l-*-2331"))
                                               #(ribcage
                                                 #(orig-args)
                                                 #((top))
                                                 #("l-*-2330"))
                                               #(ribcage
                                                 (lambda-var-list
                                                   gen-var
                                                   strip
                                                   expand-lambda-case
                                                   lambda*-formals
                                                   expand-simple-lambda
                                                   lambda-formals
                                                   ellipsis?
                                                   expand-void
                                                   eval-local-transformer
                                                   expand-local-syntax
                                                   expand-body
                                                   expand-macro
                                                   expand-application
                                                   expand-expr
                                                   expand
                                                   syntax-type
                                                   parse-when-list
                                                   expand-install-global
                                                   expand-top-sequence
                                                   expand-sequence
                                                   source-wrap
                                                   wrap
                                                   bound-id-member?
                                                   distinct-bound-ids?
                                                   valid-bound-ids?
                                                   bound-id=?
                                                   free-id=?
                                                   with-transformer-environment
                                                   transformer-environment
                                                   resolve-identifier
                                                   locally-bound-identifiers
                                                   id-var-name
                                                   same-marks?
                                                   join-marks
                                                   join-wraps
                                                   smart-append
                                                   make-binding-wrap
                                                   extend-ribcage!
                                                   make-empty-ribcage
                                                   new-mark
                                                   anti-mark
                                                   the-anti-mark
                                                   top-marked?
                                                   top-wrap
                                                   empty-wrap
                                                   set-ribcage-labels!
                                                   set-ribcage-marks!
                                                   set-ribcage-symnames!
                                                   ribcage-labels
                                                   ribcage-marks
                                                   ribcage-symnames
                                                   ribcage?
                                                   make-ribcage
                                                   gen-labels
                                                   gen-label
                                                   make-rename
                                                   rename-marks
                                                   rename-new
                                                   rename-old
                                                   subst-rename?
                                                   wrap-subst
                                                   wrap-marks
                                                   make-wrap
                                                   id-sym-name&marks
                                                   id-sym-name
                                                   id?
                                                   nonsymbol-id?
                                                   global-extend
                                                   lookup
                                                   macros-only-env
                                                   extend-var-env
                                                   extend-env
                                                   null-env
                                                   binding-value
                                                   binding-type
                                                   make-binding
                                                   arg-check
                                                   source-annotation
                                                   no-source
                                                   set-syntax-object-module!
                                                   set-syntax-object-wrap!
                                                   set-syntax-object-expression!
                                                   syntax-object-module
                                                   syntax-object-wrap
                                                   syntax-object-expression
                                                   syntax-object?
                                                   make-syntax-object
                                                   build-lexical-var
                                                   build-letrec
                                                   build-named-let
                                                   build-let
                                                   build-sequence
                                                   build-data
                                                   build-primref
                                                   build-lambda-case
                                                   build-case-lambda
                                                   build-simple-lambda
                                                   build-global-definition
                                                   build-global-assignment
                                                   build-global-reference
                                                   analyze-variable
                                                   build-lexical-assignment
                                                   build-lexical-reference
                                                   build-dynlet
                                                   build-conditional
                                                   build-application
                                                   build-void
                                                   maybe-name-value!
                                                   decorate-source
                                                   get-global-definition-hook
                                                   put-global-definition-hook
                                                   session-id
                                                   local-eval-hook
                                                   top-level-eval-hook
                                                   fx<
                                                   fx=
                                                   fx-
                                                   fx+
                                                   set-lambda-meta!
                                                   lambda-meta
                                                   lambda?
                                                   make-dynlet
                                                   make-letrec
                                                   make-let
                                                   make-lambda-case
                                                   make-lambda
                                                   make-sequence
                                                   make-application
                                                   make-conditional
                                                   make-toplevel-define
                                                   make-toplevel-set
                                                   make-toplevel-ref
                                                   make-module-set
                                                   make-module-ref
                                                   make-lexical-set
                                                   make-lexical-ref
                                                   make-primitive-ref
                                                   make-const
                                                   make-void)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("l-*-476"
                                                  "l-*-474"
                                                  "l-*-472"
                                                  "l-*-470"
                                                  "l-*-468"
                                                  "l-*-466"
                                                  "l-*-464"
                                                  "l-*-462"
                                                  "l-*-460"
                                                  "l-*-458"
                                                  "l-*-456"
                                                  "l-*-454"
                                                  "l-*-452"
                                                  "l-*-450"
                                                  "l-*-448"
                                                  "l-*-446"
                                                  "l-*-444"
                                                  "l-*-442"
                                                  "l-*-440"
                                                  "l-*-438"
                                                  "l-*-436"
                                                  "l-*-434"
                                                  "l-*-432"
                                                  "l-*-430"
                                                  "l-*-428"
                                                  "l-*-426"
                                                  "l-*-424"
                                                  "l-*-422"
                                                  "l-*-420"
                                                  "l-*-418"
                                                  "l-*-416"
                                                  "l-*-414"
                                                  "l-*-412"
                                                  "l-*-410"
                                                  "l-*-408"
                                                  "l-*-406"
                                                  "l-*-404"
                                                  "l-*-402"
                                                  "l-*-400"
                                                  "l-*-399"
                                                  "l-*-397"
                                                  "l-*-394"
                                                  "l-*-393"
                                                  "l-*-392"
                                                  "l-*-390"
                                                  "l-*-389"
                                                  "l-*-387"
                                                  "l-*-385"
                                                  "l-*-383"
                                                  "l-*-381"
                                                  "l-*-379"
                                                  "l-*-377"
                                                  "l-*-375"
                                                  "l-*-373"
                                                  "l-*-370"
                                                  "l-*-368"
                                                  "l-*-367"
                                                  "l-*-365"
                                                  "l-*-363"
                                                  "l-*-361"
                                                  "l-*-359"
                                                  "l-*-358"
                                                  "l-*-357"
                                                  "l-*-356"
                                                  "l-*-354"
                                                  "l-*-353"
                                                  "l-*-350"
                                                  "l-*-348"
                                                  "l-*-346"
                                                  "l-*-344"
                                                  "l-*-342"
                                                  "l-*-340"
                                                  "l-*-338"
                                                  "l-*-337"
                                                  "l-*-336"
                                                  "l-*-334"
                                                  "l-*-332"
                                                  "l-*-331"
                                                  "l-*-328"
                                                  "l-*-327"
                                                  "l-*-325"
                                                  "l-*-323"
                                                  "l-*-321"
                                                  "l-*-319"
                                                  "l-*-317"
                                                  "l-*-315"
                                                  "l-*-313"
                                                  "l-*-311"
                                                  "l-*-309"
                                                  "l-*-306"
                                                  "l-*-304"
                                                  "l-*-302"
                                                  "l-*-300"
                                                  "l-*-298"
                                                  "l-*-296"
                                                  "l-*-294"
                                                  "l-*-292"
                                                  "l-*-290"
                                                  "l-*-288"
                                                  "l-*-286"
                                                  "l-*-284"
                                                  "l-*-282"
                                                  "l-*-280"
                                                  "l-*-278"
                                                  "l-*-276"
                                                  "l-*-274"
                                                  "l-*-272"
                                                  "l-*-270"
                                                  "l-*-268"
                                                  "l-*-266"
                                                  "l-*-264"
                                                  "l-*-262"
                                                  "l-*-260"
                                                  "l-*-258"
                                                  "l-*-256"
                                                  "l-*-255"
                                                  "l-*-254"
                                                  "l-*-253"
                                                  "l-*-252"
                                                  "l-*-250"
                                                  "l-*-248"
                                                  "l-*-246"
                                                  "l-*-243"
                                                  "l-*-241"
                                                  "l-*-239"
                                                  "l-*-237"
                                                  "l-*-235"
                                                  "l-*-233"
                                                  "l-*-231"
                                                  "l-*-229"
                                                  "l-*-227"
                                                  "l-*-225"
                                                  "l-*-223"
                                                  "l-*-221"
                                                  "l-*-219"
                                                  "l-*-217"
                                                  "l-*-215"
                                                  "l-*-213"
                                                  "l-*-211"
                                                  "l-*-209"))
                                               #(ribcage
                                                 (define-structure
                                                   define-expansion-accessors
                                                   define-expansion-constructors)
                                                 ((top) (top) (top))
                                                 ("l-*-47" "l-*-46" "l-*-45")))
                                              (hygiene guile))))
                                    ropt-25638)))
                          tmp-25646)
                        (let ((tmp-25680
                                ($sc-dispatch args-25636 '((any any) . any))))
                          (if (if tmp-25680
                                (@apply
                                  (lambda (a-25684 init-25685 b-25686)
                                    (if (symbol? a-25684)
                                      #t
                                      (if (if (vector? a-25684)
                                            (if (= (vector-length a-25684) 4)
                                              (eq? (vector-ref a-25684 0)
                                                   'syntax-object)
                                              #f)
                                            #f)
                                        (symbol? (vector-ref a-25684 1))
                                        #f)))
                                  tmp-25680)
                                #f)
                            (@apply
                              (lambda (a-25713 init-25714 b-25715)
                                (opt-25506
                                  b-25715
                                  req-25637
                                  (cons (list a-25713 init-25714) ropt-25638)))
                              tmp-25680)
                            (let ((tmp-25716
                                    ($sc-dispatch args-25636 '(any . any))))
                              (if (if tmp-25716
                                    (@apply
                                      (lambda (a-25720 b-25721)
                                        (eq? (syntax->datum a-25720) #:key))
                                      tmp-25716)
                                    #f)
                                (@apply
                                  (lambda (a-25722 b-25723)
                                    (key-25507
                                      b-25723
                                      req-25637
                                      (reverse ropt-25638)
                                      '()))
                                  tmp-25716)
                                (let ((tmp-25726
                                        ($sc-dispatch args-25636 '(any any))))
                                  (if (if tmp-25726
                                        (@apply
                                          (lambda (a-25730 b-25731)
                                            (eq? (syntax->datum a-25730)
                                                 #:rest))
                                          tmp-25726)
                                        #f)
                                    (@apply
                                      (lambda (a-25732 b-25733)
                                        (rest-25508
                                          b-25733
                                          req-25637
                                          (reverse ropt-25638)
                                          '()))
                                      tmp-25726)
                                    (let ((tmp-25736 (list args-25636)))
                                      (if (@apply
                                            (lambda (r-25738)
                                              (if (symbol? r-25738)
                                                #t
                                                (if (if (vector? r-25738)
                                                      (if (= (vector-length
                                                               r-25738)
                                                             4)
                                                        (eq? (vector-ref
                                                               r-25738
                                                               0)
                                                             'syntax-object)
                                                        #f)
                                                      #f)
                                                  (symbol?
                                                    (vector-ref r-25738 1))
                                                  #f)))
                                            tmp-25736)
                                        (@apply
                                          (lambda (r-25768)
                                            (rest-25508
                                              r-25768
                                              req-25637
                                              (reverse ropt-25638)
                                              '()))
                                          tmp-25736)
                                        (syntax-violation
                                          'lambda*
                                          "invalid optional argument list"
                                          orig-args-25504
                                          args-25636)))))))))))))))
            (key-25507
              (lambda (args-25787 req-25788 opt-25789 rkey-25790)
                (let ((tmp-25792 ($sc-dispatch args-25787 '())))
                  (if tmp-25792
                    (@apply
                      (lambda ()
                        (check-25509
                          req-25788
                          opt-25789
                          #f
                          (cons #f (reverse rkey-25790))))
                      tmp-25792)
                    (let ((tmp-25798
                            ($sc-dispatch args-25787 '(any . any))))
                      (if (if tmp-25798
                            (@apply
                              (lambda (a-25802 b-25803)
                                (if (symbol? a-25802)
                                  #t
                                  (if (if (vector? a-25802)
                                        (if (= (vector-length a-25802) 4)
                                          (eq? (vector-ref a-25802 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (symbol? (vector-ref a-25802 1))
                                    #f)))
                              tmp-25798)
                            #f)
                        (@apply
                          (lambda (a-25830 b-25831)
                            (let ((tmp-25832
                                    (symbol->keyword (syntax->datum a-25830))))
                              (key-25507
                                b-25831
                                req-25788
                                opt-25789
                                (cons (cons tmp-25832
                                            (cons a-25830
                                                  '(#(syntax-object
                                                      #f
                                                      ((top)
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(k)
                                                         #((top))
                                                         #("l-*-2466"))
                                                       #(ribcage
                                                         #(a b)
                                                         #((top) (top))
                                                         #("l-*-2460"
                                                           "l-*-2461"))
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(args req opt rkey)
                                                         #((top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                         #("l-*-2449"
                                                           "l-*-2450"
                                                           "l-*-2451"
                                                           "l-*-2452"))
                                                       #(ribcage
                                                         (check rest
                                                                key
                                                                opt
                                                                req)
                                                         ((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                         ("l-*-2339"
                                                          "l-*-2337"
                                                          "l-*-2335"
                                                          "l-*-2333"
                                                          "l-*-2331"))
                                                       #(ribcage
                                                         #(orig-args)
                                                         #((top))
                                                         #("l-*-2330"))
                                                       #(ribcage
                                                         (lambda-var-list
                                                           gen-var
                                                           strip
                                                           expand-lambda-case
                                                           lambda*-formals
                                                           expand-simple-lambda
                                                           lambda-formals
                                                           ellipsis?
                                                           expand-void
                                                           eval-local-transformer
                                                           expand-local-syntax
                                                           expand-body
                                                           expand-macro
                                                           expand-application
                                                           expand-expr
                                                           expand
                                                           syntax-type
                                                           parse-when-list
                                                           expand-install-global
                                                           expand-top-sequence
                                                           expand-sequence
                                                           source-wrap
                                                           wrap
                                                           bound-id-member?
                                                           distinct-bound-ids?
                                                           valid-bound-ids?
                                                           bound-id=?
                                                           free-id=?
                                                           with-transformer-environment
                                                           transformer-environment
                                                           resolve-identifier
                                                           locally-bound-identifiers
                                                           id-var-name
                                                           same-marks?
                                                           join-marks
                                                           join-wraps
                                                           smart-append
                                                           make-binding-wrap
                                                           extend-ribcage!
                                                           make-empty-ribcage
                                                           new-mark
                                                           anti-mark
                                                           the-anti-mark
                                                           top-marked?
                                                           top-wrap
                                                           empty-wrap
                                                           set-ribcage-labels!
                                                           set-ribcage-marks!
                                                           set-ribcage-symnames!
                                                           ribcage-labels
                                                           ribcage-marks
                                                           ribcage-symnames
                                                           ribcage?
                                                           make-ribcage
                                                           gen-labels
                                                           gen-label
                                                           make-rename
                                                           rename-marks
                                                           rename-new
                                                           rename-old
                                                           subst-rename?
                                                           wrap-subst
                                                           wrap-marks
                                                           make-wrap
                                                           id-sym-name&marks
                                                           id-sym-name
                                                           id?
                                                           nonsymbol-id?
                                                           global-extend
                                                           lookup
                                                           macros-only-env
                                                           extend-var-env
                                                           extend-env
                                                           null-env
                                                           binding-value
                                                           binding-type
                                                           make-binding
                                                           arg-check
                                                           source-annotation
                                                           no-source
                                                           set-syntax-object-module!
                                                           set-syntax-object-wrap!
                                                           set-syntax-object-expression!
                                                           syntax-object-module
                                                           syntax-object-wrap
                                                           syntax-object-expression
                                                           syntax-object?
                                                           make-syntax-object
                                                           build-lexical-var
                                                           build-letrec
                                                           build-named-let
                                                           build-let
                                                           build-sequence
                                                           build-data
                                                           build-primref
                                                           build-lambda-case
                                                           build-case-lambda
                                                           build-simple-lambda
                                                           build-global-definition
                                                           build-global-assignment
                                                           build-global-reference
                                                           analyze-variable
                                                           build-lexical-assignment
                                                           build-lexical-reference
                                                           build-dynlet
                                                           build-conditional
                                                           build-application
                                                           build-void
                                                           maybe-name-value!
                                                           decorate-source
                                                           get-global-definition-hook
                                                           put-global-definition-hook
                                                           session-id
                                                           local-eval-hook
                                                           top-level-eval-hook
                                                           fx<
                                                           fx=
                                                           fx-
                                                           fx+
                                                           set-lambda-meta!
                                                           lambda-meta
                                                           lambda?
                                                           make-dynlet
                                                           make-letrec
                                                           make-let
                                                           make-lambda-case
                                                           make-lambda
                                                           make-sequence
                                                           make-application
                                                           make-conditional
                                                           make-toplevel-define
                                                           make-toplevel-set
                                                           make-toplevel-ref
                                                           make-module-set
                                                           make-module-ref
                                                           make-lexical-set
                                                           make-lexical-ref
                                                           make-primitive-ref
                                                           make-const
                                                           make-void)
                                                         ((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                         ("l-*-476"
                                                          "l-*-474"
                                                          "l-*-472"
                                                          "l-*-470"
                                                          "l-*-468"
                                                          "l-*-466"
                                                          "l-*-464"
                                                          "l-*-462"
                                                          "l-*-460"
                                                          "l-*-458"
                                                          "l-*-456"
                                                          "l-*-454"
                                                          "l-*-452"
                                                          "l-*-450"
                                                          "l-*-448"
                                                          "l-*-446"
                                                          "l-*-444"
                                                          "l-*-442"
                                                          "l-*-440"
                                                          "l-*-438"
                                                          "l-*-436"
                                                          "l-*-434"
                                                          "l-*-432"
                                                          "l-*-430"
                                                          "l-*-428"
                                                          "l-*-426"
                                                          "l-*-424"
                                                          "l-*-422"
                                                          "l-*-420"
                                                          "l-*-418"
                                                          "l-*-416"
                                                          "l-*-414"
                                                          "l-*-412"
                                                          "l-*-410"
                                                          "l-*-408"
                                                          "l-*-406"
                                                          "l-*-404"
                                                          "l-*-402"
                                                          "l-*-400"
                                                          "l-*-399"
                                                          "l-*-397"
                                                          "l-*-394"
                                                          "l-*-393"
                                                          "l-*-392"
                                                          "l-*-390"
                                                          "l-*-389"
                                                          "l-*-387"
                                                          "l-*-385"
                                                          "l-*-383"
                                                          "l-*-381"
                                                          "l-*-379"
                                                          "l-*-377"
                                                          "l-*-375"
                                                          "l-*-373"
                                                          "l-*-370"
                                                          "l-*-368"
                                                          "l-*-367"
                                                          "l-*-365"
                                                          "l-*-363"
                                                          "l-*-361"
                                                          "l-*-359"
                                                          "l-*-358"
                                                          "l-*-357"
                                                          "l-*-356"
                                                          "l-*-354"
                                                          "l-*-353"
                                                          "l-*-350"
                                                          "l-*-348"
                                                          "l-*-346"
                                                          "l-*-344"
                                                          "l-*-342"
                                                          "l-*-340"
                                                          "l-*-338"
                                                          "l-*-337"
                                                          "l-*-336"
                                                          "l-*-334"
                                                          "l-*-332"
                                                          "l-*-331"
                                                          "l-*-328"
                                                          "l-*-327"
                                                          "l-*-325"
                                                          "l-*-323"
                                                          "l-*-321"
                                                          "l-*-319"
                                                          "l-*-317"
                                                          "l-*-315"
                                                          "l-*-313"
                                                          "l-*-311"
                                                          "l-*-309"
                                                          "l-*-306"
                                                          "l-*-304"
                                                          "l-*-302"
                                                          "l-*-300"
                                                          "l-*-298"
                                                          "l-*-296"
                                                          "l-*-294"
                                                          "l-*-292"
                                                          "l-*-290"
                                                          "l-*-288"
                                                          "l-*-286"
                                                          "l-*-284"
                                                          "l-*-282"
                                                          "l-*-280"
                                                          "l-*-278"
                                                          "l-*-276"
                                                          "l-*-274"
                                                          "l-*-272"
                                                          "l-*-270"
                                                          "l-*-268"
                                                          "l-*-266"
                                                          "l-*-264"
                                                          "l-*-262"
                                                          "l-*-260"
                                                          "l-*-258"
                                                          "l-*-256"
                                                          "l-*-255"
                                                          "l-*-254"
                                                          "l-*-253"
                                                          "l-*-252"
                                                          "l-*-250"
                                                          "l-*-248"
                                                          "l-*-246"
                                                          "l-*-243"
                                                          "l-*-241"
                                                          "l-*-239"
                                                          "l-*-237"
                                                          "l-*-235"
                                                          "l-*-233"
                                                          "l-*-231"
                                                          "l-*-229"
                                                          "l-*-227"
                                                          "l-*-225"
                                                          "l-*-223"
                                                          "l-*-221"
                                                          "l-*-219"
                                                          "l-*-217"
                                                          "l-*-215"
                                                          "l-*-213"
                                                          "l-*-211"
                                                          "l-*-209"))
                                                       #(ribcage
                                                         (define-structure
                                                           define-expansion-accessors
                                                           define-expansion-constructors)
                                                         ((top) (top) (top))
                                                         ("l-*-47"
                                                          "l-*-46"
                                                          "l-*-45")))
                                                      (hygiene guile)))))
                                      rkey-25790))))
                          tmp-25798)
                        (let ((tmp-25835
                                ($sc-dispatch args-25787 '((any any) . any))))
                          (if (if tmp-25835
                                (@apply
                                  (lambda (a-25839 init-25840 b-25841)
                                    (if (symbol? a-25839)
                                      #t
                                      (if (if (vector? a-25839)
                                            (if (= (vector-length a-25839) 4)
                                              (eq? (vector-ref a-25839 0)
                                                   'syntax-object)
                                              #f)
                                            #f)
                                        (symbol? (vector-ref a-25839 1))
                                        #f)))
                                  tmp-25835)
                                #f)
                            (@apply
                              (lambda (a-25868 init-25869 b-25870)
                                (let ((tmp-25871
                                        (symbol->keyword
                                          (syntax->datum a-25868))))
                                  (key-25507
                                    b-25870
                                    req-25788
                                    opt-25789
                                    (cons (list tmp-25871 a-25868 init-25869)
                                          rkey-25790))))
                              tmp-25835)
                            (let ((tmp-25874
                                    ($sc-dispatch
                                      args-25787
                                      '((any any any) . any))))
                              (if (if tmp-25874
                                    (@apply
                                      (lambda (a-25878
                                               init-25879
                                               k-25880
                                               b-25881)
                                        (if (if (symbol? a-25878)
                                              #t
                                              (if (if (vector? a-25878)
                                                    (if (= (vector-length
                                                             a-25878)
                                                           4)
                                                      (eq? (vector-ref
                                                             a-25878
                                                             0)
                                                           'syntax-object)
                                                      #f)
                                                    #f)
                                                (symbol?
                                                  (vector-ref a-25878 1))
                                                #f))
                                          (keyword? (syntax->datum k-25880))
                                          #f))
                                      tmp-25874)
                                    #f)
                                (@apply
                                  (lambda (a-25908 init-25909 k-25910 b-25911)
                                    (key-25507
                                      b-25911
                                      req-25788
                                      opt-25789
                                      (cons (list k-25910 a-25908 init-25909)
                                            rkey-25790)))
                                  tmp-25874)
                                (let ((tmp-25912
                                        ($sc-dispatch args-25787 '(any))))
                                  (if (if tmp-25912
                                        (@apply
                                          (lambda (aok-25916)
                                            (eq? (syntax->datum aok-25916)
                                                 #:allow-other-keys))
                                          tmp-25912)
                                        #f)
                                    (@apply
                                      (lambda (aok-25917)
                                        (check-25509
                                          req-25788
                                          opt-25789
                                          #f
                                          (cons #t (reverse rkey-25790))))
                                      tmp-25912)
                                    (let ((tmp-25920
                                            ($sc-dispatch
                                              args-25787
                                              '(any any any))))
                                      (if (if tmp-25920
                                            (@apply
                                              (lambda (aok-25924
                                                       a-25925
                                                       b-25926)
                                                (if (eq? (syntax->datum
                                                           aok-25924)
                                                         #:allow-other-keys)
                                                  (eq? (syntax->datum a-25925)
                                                       #:rest)
                                                  #f))
                                              tmp-25920)
                                            #f)
                                        (@apply
                                          (lambda (aok-25927 a-25928 b-25929)
                                            (rest-25508
                                              b-25929
                                              req-25788
                                              opt-25789
                                              (cons #t (reverse rkey-25790))))
                                          tmp-25920)
                                        (let ((tmp-25932
                                                ($sc-dispatch
                                                  args-25787
                                                  '(any . any))))
                                          (if (if tmp-25932
                                                (@apply
                                                  (lambda (aok-25936 r-25937)
                                                    (if (eq? (syntax->datum
                                                               aok-25936)
                                                             #:allow-other-keys)
                                                      (if (symbol? r-25937)
                                                        #t
                                                        (if (if (vector?
                                                                  r-25937)
                                                              (if (= (vector-length
                                                                       r-25937)
                                                                     4)
                                                                (eq? (vector-ref
                                                                       r-25937
                                                                       0)
                                                                     'syntax-object)
                                                                #f)
                                                              #f)
                                                          (symbol?
                                                            (vector-ref
                                                              r-25937
                                                              1))
                                                          #f))
                                                      #f))
                                                  tmp-25932)
                                                #f)
                                            (@apply
                                              (lambda (aok-25964 r-25965)
                                                (rest-25508
                                                  r-25965
                                                  req-25788
                                                  opt-25789
                                                  (cons #t
                                                        (reverse rkey-25790))))
                                              tmp-25932)
                                            (let ((tmp-25968
                                                    ($sc-dispatch
                                                      args-25787
                                                      '(any any))))
                                              (if (if tmp-25968
                                                    (@apply
                                                      (lambda (a-25972 b-25973)
                                                        (eq? (syntax->datum
                                                               a-25972)
                                                             #:rest))
                                                      tmp-25968)
                                                    #f)
                                                (@apply
                                                  (lambda (a-25974 b-25975)
                                                    (rest-25508
                                                      b-25975
                                                      req-25788
                                                      opt-25789
                                                      (cons #f
                                                            (reverse
                                                              rkey-25790))))
                                                  tmp-25968)
                                                (let ((tmp-25978
                                                        (list args-25787)))
                                                  (if (@apply
                                                        (lambda (r-25980)
                                                          (if (symbol? r-25980)
                                                            #t
                                                            (if (if (vector?
                                                                      r-25980)
                                                                  (if (= (vector-length
                                                                           r-25980)
                                                                         4)
                                                                    (eq? (vector-ref
                                                                           r-25980
                                                                           0)
                                                                         'syntax-object)
                                                                    #f)
                                                                  #f)
                                                              (symbol?
                                                                (vector-ref
                                                                  r-25980
                                                                  1))
                                                              #f)))
                                                        tmp-25978)
                                                    (@apply
                                                      (lambda (r-26010)
                                                        (rest-25508
                                                          r-26010
                                                          req-25788
                                                          opt-25789
                                                          (cons #f
                                                                (reverse
                                                                  rkey-25790))))
                                                      tmp-25978)
                                                    (syntax-violation
                                                      'lambda*
                                                      "invalid keyword argument list"
                                                      orig-args-25504
                                                      args-25787)))))))))))))))))))))
            (rest-25508
              (lambda (args-26038 req-26039 opt-26040 kw-26041)
                (let ((tmp-26043 (list args-26038)))
                  (if (@apply
                        (lambda (r-26045)
                          (if (symbol? r-26045)
                            #t
                            (if (if (vector? r-26045)
                                  (if (= (vector-length r-26045) 4)
                                    (eq? (vector-ref r-26045 0) 'syntax-object)
                                    #f)
                                  #f)
                              (symbol? (vector-ref r-26045 1))
                              #f)))
                        tmp-26043)
                    (@apply
                      (lambda (r-26075)
                        (check-25509
                          req-26039
                          opt-26040
                          r-26075
                          kw-26041))
                      tmp-26043)
                    (syntax-violation
                      'lambda*
                      "invalid rest argument"
                      orig-args-25504
                      args-26038)))))
            (check-25509
              (lambda (req-26079 opt-26080 rest-26081 kw-26082)
                (if (distinct-bound-ids?-4321
                      (append
                        req-26079
                        (map car opt-26080)
                        (if rest-26081 (list rest-26081) '())
                        (if (pair? kw-26082)
                          (map cadr (cdr kw-26082))
                          '())))
                  (values req-26079 opt-26080 rest-26081 kw-26082)
                  (syntax-violation
                    'lambda*
                    "duplicate identifier in argument list"
                    orig-args-25504)))))
           (req-25505 orig-args-25504 '()))))
     (expand-lambda-case-4342
       (lambda (e-26198
                r-26199
                w-26200
                s-26201
                mod-26202
                get-formals-26203
                clauses-26204)
         (letrec*
           ((parse-req-26205
              (lambda (req-26336
                       opt-26337
                       rest-26338
                       kw-26339
                       body-26340)
                (let ((vars-26341 (map gen-var-4344 req-26336))
                      (labels-26342 (gen-labels-4297 req-26336)))
                  (let ((r*-26343
                          (extend-var-env-4289
                            labels-26342
                            vars-26341
                            r-26199))
                        (w*-26344
                          (make-binding-wrap-4308
                            req-26336
                            labels-26342
                            w-26200)))
                    (parse-opt-26206
                      (map syntax->datum req-26336)
                      opt-26337
                      rest-26338
                      kw-26339
                      body-26340
                      (reverse vars-26341)
                      r*-26343
                      w*-26344
                      '()
                      '())))))
            (parse-opt-26206
              (lambda (req-26530
                       opt-26531
                       rest-26532
                       kw-26533
                       body-26534
                       vars-26535
                       r*-26536
                       w*-26537
                       out-26538
                       inits-26539)
                (if (pair? opt-26531)
                  (let ((tmp-26540 (car opt-26531)))
                    (let ((tmp-26541 ($sc-dispatch tmp-26540 '(any any))))
                      (if tmp-26541
                        (@apply
                          (lambda (id-26543 i-26544)
                            (let ((v-26545
                                    (let ((id-26553
                                            (if (if (vector? id-26543)
                                                  (if (= (vector-length
                                                           id-26543)
                                                         4)
                                                    (eq? (vector-ref
                                                           id-26543
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (vector-ref id-26543 1)
                                              id-26543)))
                                      (gensym
                                        (string-append
                                          (symbol->string id-26553)
                                          "-")))))
                              (let ((l-26546 (gen-labels-4297 (list v-26545))))
                                (let ((r**-26547
                                        (extend-var-env-4289
                                          l-26546
                                          (list v-26545)
                                          r*-26536)))
                                  (let ((w**-26548
                                          (make-binding-wrap-4308
                                            (list id-26543)
                                            l-26546
                                            w*-26537)))
                                    (parse-opt-26206
                                      req-26530
                                      (cdr opt-26531)
                                      rest-26532
                                      kw-26533
                                      body-26534
                                      (cons v-26545 vars-26535)
                                      r**-26547
                                      w**-26548
                                      (cons (syntax->datum id-26543) out-26538)
                                      (cons (expand-4330
                                              i-26544
                                              r*-26536
                                              w*-26537
                                              mod-26202)
                                            inits-26539)))))))
                          tmp-26541)
                        (syntax-violation
                          #f
                          "source expression failed to match any pattern"
                          tmp-26540))))
                  (if rest-26532
                    (let ((v-26791
                            (let ((id-26801
                                    (if (if (vector? rest-26532)
                                          (if (= (vector-length rest-26532) 4)
                                            (eq? (vector-ref rest-26532 0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (vector-ref rest-26532 1)
                                      rest-26532)))
                              (gensym
                                (string-append
                                  (symbol->string id-26801)
                                  "-")))))
                      (let ((l-26792 (gen-labels-4297 (list v-26791))))
                        (let ((r*-26793
                                (extend-var-env-4289
                                  l-26792
                                  (list v-26791)
                                  r*-26536)))
                          (let ((w*-26794
                                  (make-binding-wrap-4308
                                    (list rest-26532)
                                    l-26792
                                    w*-26537)))
                            (parse-kw-26207
                              req-26530
                              (if (pair? out-26538) (reverse out-26538) #f)
                              (syntax->datum rest-26532)
                              (if (pair? kw-26533) (cdr kw-26533) kw-26533)
                              body-26534
                              (cons v-26791 vars-26535)
                              r*-26793
                              w*-26794
                              (if (pair? kw-26533) (car kw-26533) #f)
                              '()
                              inits-26539)))))
                    (parse-kw-26207
                      req-26530
                      (if (pair? out-26538) (reverse out-26538) #f)
                      #f
                      (if (pair? kw-26533) (cdr kw-26533) kw-26533)
                      body-26534
                      vars-26535
                      r*-26536
                      w*-26537
                      (if (pair? kw-26533) (car kw-26533) #f)
                      '()
                      inits-26539)))))
            (parse-kw-26207
              (lambda (req-26972
                       opt-26973
                       rest-26974
                       kw-26975
                       body-26976
                       vars-26977
                       r*-26978
                       w*-26979
                       aok-26980
                       out-26981
                       inits-26982)
                (if (pair? kw-26975)
                  (let ((tmp-26983 (car kw-26975)))
                    (let ((tmp-26984
                            ($sc-dispatch tmp-26983 '(any any any))))
                      (if tmp-26984
                        (@apply
                          (lambda (k-26986 id-26987 i-26988)
                            (let ((v-26989
                                    (let ((id-26997
                                            (if (if (vector? id-26987)
                                                  (if (= (vector-length
                                                           id-26987)
                                                         4)
                                                    (eq? (vector-ref
                                                           id-26987
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (vector-ref id-26987 1)
                                              id-26987)))
                                      (gensym
                                        (string-append
                                          (symbol->string id-26997)
                                          "-")))))
                              (let ((l-26990 (gen-labels-4297 (list v-26989))))
                                (let ((r**-26991
                                        (extend-var-env-4289
                                          l-26990
                                          (list v-26989)
                                          r*-26978)))
                                  (let ((w**-26992
                                          (make-binding-wrap-4308
                                            (list id-26987)
                                            l-26990
                                            w*-26979)))
                                    (parse-kw-26207
                                      req-26972
                                      opt-26973
                                      rest-26974
                                      (cdr kw-26975)
                                      body-26976
                                      (cons v-26989 vars-26977)
                                      r**-26991
                                      w**-26992
                                      aok-26980
                                      (cons (list (syntax->datum k-26986)
                                                  (syntax->datum id-26987)
                                                  v-26989)
                                            out-26981)
                                      (cons (expand-4330
                                              i-26988
                                              r*-26978
                                              w*-26979
                                              mod-26202)
                                            inits-26982)))))))
                          tmp-26984)
                        (syntax-violation
                          #f
                          "source expression failed to match any pattern"
                          tmp-26983))))
                  (parse-body-26208
                    req-26972
                    opt-26973
                    rest-26974
                    (if (if aok-26980 aok-26980 (pair? out-26981))
                      (cons aok-26980 (reverse out-26981))
                      #f)
                    body-26976
                    (reverse vars-26977)
                    r*-26978
                    w*-26979
                    (reverse inits-26982)
                    '()))))
            (parse-body-26208
              (lambda (req-27244
                       opt-27245
                       rest-27246
                       kw-27247
                       body-27248
                       vars-27249
                       r*-27250
                       w*-27251
                       inits-27252
                       meta-27253)
                (let ((tmp-27255
                        ($sc-dispatch body-27248 '(any any . each-any))))
                  (if (if tmp-27255
                        (@apply
                          (lambda (docstring-27259 e1-27260 e2-27261)
                            (string? (syntax->datum docstring-27259)))
                          tmp-27255)
                        #f)
                    (@apply
                      (lambda (docstring-27262 e1-27263 e2-27264)
                        (parse-body-26208
                          req-27244
                          opt-27245
                          rest-27246
                          kw-27247
                          (cons e1-27263 e2-27264)
                          vars-27249
                          r*-27250
                          w*-27251
                          inits-27252
                          (append
                            meta-27253
                            (list (cons 'documentation
                                        (syntax->datum docstring-27262))))))
                      tmp-27255)
                    (let ((tmp-27265
                            ($sc-dispatch
                              body-27248
                              '(#(vector #(each (any . any)))
                                any
                                .
                                each-any))))
                      (if tmp-27265
                        (@apply
                          (lambda (k-27269 v-27270 e1-27271 e2-27272)
                            (parse-body-26208
                              req-27244
                              opt-27245
                              rest-27246
                              kw-27247
                              (cons e1-27271 e2-27272)
                              vars-27249
                              r*-27250
                              w*-27251
                              inits-27252
                              (append
                                meta-27253
                                (syntax->datum (map cons k-27269 v-27270)))))
                          tmp-27265)
                        (let ((tmp-27273
                                ($sc-dispatch body-27248 '(any . each-any))))
                          (if tmp-27273
                            (@apply
                              (lambda (e1-27277 e2-27278)
                                (values
                                  meta-27253
                                  req-27244
                                  opt-27245
                                  rest-27246
                                  kw-27247
                                  inits-27252
                                  vars-27249
                                  (expand-body-4334
                                    (cons e1-27277 e2-27278)
                                    (wrap-4323
                                      (begin
                                        (if (if (pair? e-26198) s-26201 #f)
                                          (set-source-properties!
                                            e-26198
                                            s-26201))
                                        e-26198)
                                      w-26200
                                      mod-26202)
                                    r*-27250
                                    w*-27251
                                    mod-26202)))
                              tmp-27273)
                            (syntax-violation
                              #f
                              "source expression failed to match any pattern"
                              body-27248))))))))))
           (let ((tmp-26210 ($sc-dispatch clauses-26204 '())))
             (if tmp-26210
               (@apply (lambda () (values '() #f)) tmp-26210)
               (let ((tmp-26214
                       ($sc-dispatch
                         clauses-26204
                         '((any any . each-any)
                           .
                           #(each (any any . each-any))))))
                 (if tmp-26214
                   (@apply
                     (lambda (args-26218
                              e1-26219
                              e2-26220
                              args*-26221
                              e1*-26222
                              e2*-26223)
                       (call-with-values
                         (lambda () (get-formals-26203 args-26218))
                         (lambda (req-26224 opt-26225 rest-26226 kw-26227)
                           (call-with-values
                             (lambda ()
                               (parse-req-26205
                                 req-26224
                                 opt-26225
                                 rest-26226
                                 kw-26227
                                 (cons e1-26219 e2-26220)))
                             (lambda (meta-26292
                                      req-26293
                                      opt-26294
                                      rest-26295
                                      kw-26296
                                      inits-26297
                                      vars-26298
                                      body-26299)
                               (call-with-values
                                 (lambda ()
                                   (expand-lambda-case-4342
                                     e-26198
                                     r-26199
                                     w-26200
                                     s-26201
                                     mod-26202
                                     get-formals-26203
                                     (map (lambda (tmp-2801-26300
                                                   tmp-2800-26301
                                                   tmp-2799-26302)
                                            (cons tmp-2799-26302
                                                  (cons tmp-2800-26301
                                                        tmp-2801-26300)))
                                          e2*-26223
                                          e1*-26222
                                          args*-26221)))
                                 (lambda (meta*-26303 else*-26304)
                                   (values
                                     (append meta-26292 meta*-26303)
                                     (make-struct/no-tail
                                       (vector-ref %expanded-vtables 14)
                                       s-26201
                                       req-26293
                                       opt-26294
                                       rest-26295
                                       kw-26296
                                       inits-26297
                                       vars-26298
                                       body-26299
                                       else*-26304)))))))))
                     tmp-26214)
                   (syntax-violation
                     #f
                     "source expression failed to match any pattern"
                     clauses-26204))))))))
     (strip-4343
       (lambda (x-27315 w-27316)
         (if (memq 'top (car w-27316))
           x-27315
           (letrec*
             ((f-27317
                (lambda (x-27320)
                  (if (if (vector? x-27320)
                        (if (= (vector-length x-27320) 4)
                          (eq? (vector-ref x-27320 0) 'syntax-object)
                          #f)
                        #f)
                    (strip-4343
                      (vector-ref x-27320 1)
                      (vector-ref x-27320 2))
                    (if (pair? x-27320)
                      (let ((a-27339 (f-27317 (car x-27320)))
                            (d-27340 (f-27317 (cdr x-27320))))
                        (if (if (eq? a-27339 (car x-27320))
                              (eq? d-27340 (cdr x-27320))
                              #f)
                          x-27320
                          (cons a-27339 d-27340)))
                      (if (vector? x-27320)
                        (let ((old-27343 (vector->list x-27320)))
                          (let ((new-27344 (map f-27317 old-27343)))
                            (letrec*
                              ((lp-27345
                                 (lambda (l1-27421 l2-27422)
                                   (if (null? l1-27421)
                                     x-27320
                                     (if (eq? (car l1-27421) (car l2-27422))
                                       (lp-27345 (cdr l1-27421) (cdr l2-27422))
                                       (list->vector new-27344))))))
                              (lp-27345 old-27343 new-27344))))
                        x-27320))))))
             (f-27317 x-27315)))))
     (gen-var-4344
       (lambda (id-26348)
         (let ((id-26349
                 (if (if (vector? id-26348)
                       (if (= (vector-length id-26348) 4)
                         (eq? (vector-ref id-26348 0) 'syntax-object)
                         #f)
                       #f)
                   (vector-ref id-26348 1)
                   id-26348)))
           (gensym
             (string-append (symbol->string id-26349) "-"))))))
    (begin
      (set! session-id-4255
        (let ((v-15684
                (module-variable
                  (current-module)
                  'syntax-session-id)))
          (lambda () ((variable-ref v-15684)))))
      (set! transformer-environment-4316
        (make-fluid
          (lambda (k-14716)
            (error "called outside the dynamic extent of a syntax transformer"))))
      (module-define!
        (current-module)
        'letrec-syntax
        (make-syntax-transformer
          'letrec-syntax
          'local-syntax
          #t))
      (module-define!
        (current-module)
        'let-syntax
        (make-syntax-transformer
          'let-syntax
          'local-syntax
          #f))
      (global-extend-4292
        'core
        'syntax-parameterize
        (lambda (e-4465 r-4466 w-4467 s-4468 mod-4469)
          (let ((tmp-4471
                  ($sc-dispatch
                    e-4465
                    '(_ #(each (any any)) any . each-any))))
            (if (if tmp-4471
                  (@apply
                    (lambda (var-4475 val-4476 e1-4477 e2-4478)
                      (valid-bound-ids?-4320 var-4475))
                    tmp-4471)
                  #f)
              (@apply
                (lambda (var-4556 val-4557 e1-4558 e2-4559)
                  (let ((names-4560
                          (map (lambda (x-4610)
                                 (id-var-name-4313 x-4610 w-4467))
                               var-4556)))
                    (begin
                      (for-each
                        (lambda (id-4561 n-4562)
                          (let ((key-4563
                                  (car (let ((t-4570 (assq n-4562 r-4466)))
                                         (if t-4570
                                           (cdr t-4570)
                                           (if (symbol? n-4562)
                                             (let ((t-4575
                                                     (get-global-definition-hook-4257
                                                       n-4562
                                                       mod-4469)))
                                               (if t-4575 t-4575 '(global)))
                                             '(displaced-lexical)))))))
                            (if (eqv? key-4563 'displaced-lexical)
                              (syntax-violation
                                'syntax-parameterize
                                "identifier out of context"
                                e-4465
                                (wrap-4323
                                  (begin
                                    (if (if (pair? id-4561) s-4468 #f)
                                      (set-source-properties! id-4561 s-4468))
                                    id-4561)
                                  w-4467
                                  mod-4469)))))
                        var-4556
                        names-4560)
                      (expand-body-4334
                        (cons e1-4558 e2-4559)
                        (wrap-4323
                          (begin
                            (if (if (pair? e-4465) s-4468 #f)
                              (set-source-properties! e-4465 s-4468))
                            e-4465)
                          w-4467
                          mod-4469)
                        (extend-env-4288
                          names-4560
                          (let ((trans-r-4696 (macros-only-env-4290 r-4466)))
                            (map (lambda (x-4697)
                                   (cons 'macro
                                         (eval-local-transformer-4336
                                           (expand-4330
                                             x-4697
                                             trans-r-4696
                                             w-4467
                                             mod-4469)
                                           mod-4469)))
                                 val-4557))
                          r-4466)
                        w-4467
                        mod-4469))))
                tmp-4471)
              (syntax-violation
                'syntax-parameterize
                "bad syntax"
                (wrap-4323
                  (begin
                    (if (if (pair? e-4465) s-4468 #f)
                      (set-source-properties! e-4465 s-4468))
                    e-4465)
                  w-4467
                  mod-4469))))))
      (module-define!
        (current-module)
        'quote
        (make-syntax-transformer
          'quote
          'core
          (lambda (e-4906 r-4907 w-4908 s-4909 mod-4910)
            (let ((tmp-4912 ($sc-dispatch e-4906 '(_ any))))
              (if tmp-4912
                (@apply
                  (lambda (e-4915)
                    (let ((exp-4919 (strip-4343 e-4915 w-4908)))
                      (make-struct/no-tail
                        (vector-ref %expanded-vtables 1)
                        s-4909
                        exp-4919)))
                  tmp-4912)
                (syntax-violation
                  'quote
                  "bad syntax"
                  (wrap-4323
                    (begin
                      (if (if (pair? e-4906) s-4909 #f)
                        (set-source-properties! e-4906 s-4909))
                      e-4906)
                    w-4908
                    mod-4910)))))))
      (global-extend-4292
        'core
        'syntax
        (letrec*
          ((gen-syntax-5139
             (lambda (src-5241
                      e-5242
                      r-5243
                      maps-5244
                      ellipsis?-5245
                      mod-5246)
               (if (if (symbol? e-5242)
                     #t
                     (if (if (vector? e-5242)
                           (if (= (vector-length e-5242) 4)
                             (eq? (vector-ref e-5242 0) 'syntax-object)
                             #f)
                           #f)
                       (symbol? (vector-ref e-5242 1))
                       #f))
                 (let ((label-5273 (id-var-name-4313 e-5242 '(()))))
                   (let ((b-5274
                           (let ((t-5281 (assq label-5273 r-5243)))
                             (if t-5281
                               (cdr t-5281)
                               (if (symbol? label-5273)
                                 (let ((t-5287
                                         (get-global-definition-hook-4257
                                           label-5273
                                           mod-5246)))
                                   (if t-5287 t-5287 '(global)))
                                 '(displaced-lexical))))))
                     (if (eq? (car b-5274) 'syntax)
                       (call-with-values
                         (lambda ()
                           (let ((var.lev-5296 (cdr b-5274)))
                             (gen-ref-5140
                               src-5241
                               (car var.lev-5296)
                               (cdr var.lev-5296)
                               maps-5244)))
                         (lambda (var-5300 maps-5301)
                           (values (list 'ref var-5300) maps-5301)))
                       (if (ellipsis?-5245 e-5242)
                         (syntax-violation
                           'syntax
                           "misplaced ellipsis"
                           src-5241)
                         (values (list 'quote e-5242) maps-5244)))))
                 (let ((tmp-5303 ($sc-dispatch e-5242 '(any any))))
                   (if (if tmp-5303
                         (@apply
                           (lambda (dots-5307 e-5308)
                             (ellipsis?-5245 dots-5307))
                           tmp-5303)
                         #f)
                     (@apply
                       (lambda (dots-5309 e-5310)
                         (gen-syntax-5139
                           src-5241
                           e-5310
                           r-5243
                           maps-5244
                           (lambda (x-5311) #f)
                           mod-5246))
                       tmp-5303)
                     (let ((tmp-5312 ($sc-dispatch e-5242 '(any any . any))))
                       (if (if tmp-5312
                             (@apply
                               (lambda (x-5316 dots-5317 y-5318)
                                 (ellipsis?-5245 dots-5317))
                               tmp-5312)
                             #f)
                         (@apply
                           (lambda (x-5319 dots-5320 y-5321)
                             (letrec*
                               ((f-5322
                                  (lambda (y-5330 k-5331)
                                    (let ((tmp-5333
                                            ($sc-dispatch
                                              y-5330
                                              '(any . any))))
                                      (if (if tmp-5333
                                            (@apply
                                              (lambda (dots-5337 y-5338)
                                                (ellipsis?-5245 dots-5337))
                                              tmp-5333)
                                            #f)
                                        (@apply
                                          (lambda (dots-5339 y-5340)
                                            (f-5322
                                              y-5340
                                              (lambda (maps-5341)
                                                (call-with-values
                                                  (lambda ()
                                                    (k-5331
                                                      (cons '() maps-5341)))
                                                  (lambda (x-5342 maps-5343)
                                                    (if (null? (car maps-5343))
                                                      (syntax-violation
                                                        'syntax
                                                        "extra ellipsis"
                                                        src-5241)
                                                      (values
                                                        (let ((map-env-5347
                                                                (car maps-5343)))
                                                          (list 'apply
                                                                '(primitive
                                                                   append)
                                                                (gen-map-5142
                                                                  x-5342
                                                                  map-env-5347)))
                                                        (cdr maps-5343))))))))
                                          tmp-5333)
                                        (call-with-values
                                          (lambda ()
                                            (gen-syntax-5139
                                              src-5241
                                              y-5330
                                              r-5243
                                              maps-5244
                                              ellipsis?-5245
                                              mod-5246))
                                          (lambda (y-5350 maps-5351)
                                            (call-with-values
                                              (lambda () (k-5331 maps-5351))
                                              (lambda (x-5352 maps-5353)
                                                (values
                                                  (if (equal? y-5350 ''())
                                                    x-5352
                                                    (list 'append
                                                          x-5352
                                                          y-5350))
                                                  maps-5353))))))))))
                               (f-5322
                                 y-5321
                                 (lambda (maps-5325)
                                   (call-with-values
                                     (lambda ()
                                       (gen-syntax-5139
                                         src-5241
                                         x-5319
                                         r-5243
                                         (cons '() maps-5325)
                                         ellipsis?-5245
                                         mod-5246))
                                     (lambda (x-5326 maps-5327)
                                       (if (null? (car maps-5327))
                                         (syntax-violation
                                           'syntax
                                           "extra ellipsis"
                                           src-5241)
                                         (values
                                           (gen-map-5142
                                             x-5326
                                             (car maps-5327))
                                           (cdr maps-5327)))))))))
                           tmp-5312)
                         (let ((tmp-5369 ($sc-dispatch e-5242 '(any . any))))
                           (if tmp-5369
                             (@apply
                               (lambda (x-5373 y-5374)
                                 (call-with-values
                                   (lambda ()
                                     (gen-syntax-5139
                                       src-5241
                                       x-5373
                                       r-5243
                                       maps-5244
                                       ellipsis?-5245
                                       mod-5246))
                                   (lambda (x-5375 maps-5376)
                                     (call-with-values
                                       (lambda ()
                                         (gen-syntax-5139
                                           src-5241
                                           y-5374
                                           r-5243
                                           maps-5376
                                           ellipsis?-5245
                                           mod-5246))
                                       (lambda (y-5377 maps-5378)
                                         (values
                                           (let ((key-5383 (car y-5377)))
                                             (if (eqv? key-5383 'quote)
                                               (if (eq? (car x-5375) 'quote)
                                                 (list 'quote
                                                       (cons (car (cdr x-5375))
                                                             (car (cdr y-5377))))
                                                 (if (eq? (car (cdr y-5377))
                                                          '())
                                                   (list 'list x-5375)
                                                   (list 'cons x-5375 y-5377)))
                                               (if (eqv? key-5383 'list)
                                                 (cons 'list
                                                       (cons x-5375
                                                             (cdr y-5377)))
                                                 (list 'cons x-5375 y-5377))))
                                           maps-5378))))))
                               tmp-5369)
                             (let ((tmp-5412
                                     ($sc-dispatch
                                       e-5242
                                       '#(vector (any . each-any)))))
                               (if tmp-5412
                                 (@apply
                                   (lambda (e1-5416 e2-5417)
                                     (call-with-values
                                       (lambda ()
                                         (gen-syntax-5139
                                           src-5241
                                           (cons e1-5416 e2-5417)
                                           r-5243
                                           maps-5244
                                           ellipsis?-5245
                                           mod-5246))
                                       (lambda (e-5418 maps-5419)
                                         (values
                                           (if (eq? (car e-5418) 'list)
                                             (cons 'vector (cdr e-5418))
                                             (if (eq? (car e-5418) 'quote)
                                               (list 'quote
                                                     (list->vector
                                                       (car (cdr e-5418))))
                                               (list 'list->vector e-5418)))
                                           maps-5419))))
                                   tmp-5412)
                                 (values
                                   (list 'quote e-5242)
                                   maps-5244))))))))))))
           (gen-ref-5140
             (lambda (src-5446 var-5447 level-5448 maps-5449)
               (if (= level-5448 0)
                 (values var-5447 maps-5449)
                 (if (null? maps-5449)
                   (syntax-violation
                     'syntax
                     "missing ellipsis"
                     src-5446)
                   (call-with-values
                     (lambda ()
                       (gen-ref-5140
                         src-5446
                         var-5447
                         (#{1-}# level-5448)
                         (cdr maps-5449)))
                     (lambda (outer-var-5450 outer-maps-5451)
                       (let ((b-5452 (assq outer-var-5450 (car maps-5449))))
                         (if b-5452
                           (values (cdr b-5452) maps-5449)
                           (let ((inner-var-5454
                                   (gensym
                                     (string-append
                                       (symbol->string 'tmp)
                                       "-"))))
                             (values
                               inner-var-5454
                               (cons (cons (cons outer-var-5450 inner-var-5454)
                                           (car maps-5449))
                                     outer-maps-5451)))))))))))
           (gen-map-5142
             (lambda (e-5468 map-env-5469)
               (let ((formals-5470 (map cdr map-env-5469))
                     (actuals-5471
                       (map (lambda (x-5473) (list 'ref (car x-5473)))
                            map-env-5469)))
                 (if (eq? (car e-5468) 'ref)
                   (car actuals-5471)
                   (if (and-map
                         (lambda (x-5474)
                           (if (eq? (car x-5474) 'ref)
                             (memq (car (cdr x-5474)) formals-5470)
                             #f))
                         (cdr e-5468))
                     (cons 'map
                           (cons (list 'primitive (car e-5468))
                                 (map (let ((r-5476
                                              (map cons
                                                   formals-5470
                                                   actuals-5471)))
                                        (lambda (x-5477)
                                          (cdr (assq (car (cdr x-5477))
                                                     r-5476))))
                                      (cdr e-5468))))
                     (cons 'map
                           (cons (list 'lambda formals-5470 e-5468)
                                 actuals-5471)))))))
           (regen-5146
             (lambda (x-5479)
               (let ((key-5480 (car x-5479)))
                 (if (eqv? key-5480 'ref)
                   (let ((name-5490 (car (cdr x-5479)))
                         (var-5491 (car (cdr x-5479))))
                     (make-struct/no-tail
                       (vector-ref %expanded-vtables 3)
                       #f
                       name-5490
                       var-5491))
                   (if (eqv? key-5480 'primitive)
                     (let ((name-5503 (car (cdr x-5479))))
                       (if (equal? (module-name (current-module)) '(guile))
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 7)
                           #f
                           name-5503)
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 5)
                           #f
                           '(guile)
                           name-5503
                           #f)))
                     (if (eqv? key-5480 'quote)
                       (let ((exp-5521 (car (cdr x-5479))))
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 1)
                           #f
                           exp-5521))
                       (if (eqv? key-5480 'lambda)
                         (if (list? (car (cdr x-5479)))
                           (let ((req-5532 (car (cdr x-5479)))
                                 (vars-5534 (car (cdr x-5479)))
                                 (exp-5536
                                   (regen-5146 (car (cdr (cdr x-5479))))))
                             (let ((body-5541
                                     (make-struct/no-tail
                                       (vector-ref %expanded-vtables 14)
                                       #f
                                       req-5532
                                       #f
                                       #f
                                       #f
                                       '()
                                       vars-5534
                                       exp-5536
                                       #f)))
                               (make-struct/no-tail
                                 (vector-ref %expanded-vtables 13)
                                 #f
                                 '()
                                 body-5541)))
                           (error "how did we get here" x-5479))
                         (let ((fun-exp-5557
                                 (let ((name-5566 (car x-5479)))
                                   (if (equal?
                                         (module-name (current-module))
                                         '(guile))
                                     (make-struct/no-tail
                                       (vector-ref %expanded-vtables 7)
                                       #f
                                       name-5566)
                                     (make-struct/no-tail
                                       (vector-ref %expanded-vtables 5)
                                       #f
                                       '(guile)
                                       name-5566
                                       #f))))
                               (arg-exps-5558 (map regen-5146 (cdr x-5479))))
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 11)
                             #f
                             fun-exp-5557
                             arg-exps-5558))))))))))
          (lambda (e-5147 r-5148 w-5149 s-5150 mod-5151)
            (let ((e-5152
                    (wrap-4323
                      (begin
                        (if (if (pair? e-5147) s-5150 #f)
                          (set-source-properties! e-5147 s-5150))
                        e-5147)
                      w-5149
                      mod-5151)))
              (let ((tmp-5154 ($sc-dispatch e-5152 '(_ any))))
                (if tmp-5154
                  (@apply
                    (lambda (x-5179)
                      (call-with-values
                        (lambda ()
                          (gen-syntax-5139
                            e-5152
                            x-5179
                            r-5148
                            '()
                            ellipsis?-4338
                            mod-5151))
                        (lambda (e-5233 maps-5234) (regen-5146 e-5233))))
                    tmp-5154)
                  (syntax-violation
                    'syntax
                    "bad `syntax' form"
                    e-5152)))))))
      (global-extend-4292
        'core
        'lambda
        (lambda (e-5754 r-5755 w-5756 s-5757 mod-5758)
          (let ((tmp-5760
                  ($sc-dispatch e-5754 '(_ any any . each-any))))
            (if tmp-5760
              (@apply
                (lambda (args-5764 e1-5765 e2-5766)
                  (call-with-values
                    (lambda () (lambda-formals-4339 args-5764))
                    (lambda (req-5769 opt-5770 rest-5771 kw-5772)
                      (letrec*
                        ((lp-5773
                           (lambda (body-5776 meta-5777)
                             (let ((tmp-5779
                                     ($sc-dispatch
                                       body-5776
                                       '(any any . each-any))))
                               (if (if tmp-5779
                                     (@apply
                                       (lambda (docstring-5783 e1-5784 e2-5785)
                                         (string?
                                           (syntax->datum docstring-5783)))
                                       tmp-5779)
                                     #f)
                                 (@apply
                                   (lambda (docstring-5786 e1-5787 e2-5788)
                                     (lp-5773
                                       (cons e1-5787 e2-5788)
                                       (append
                                         meta-5777
                                         (list (cons 'documentation
                                                     (syntax->datum
                                                       docstring-5786))))))
                                   tmp-5779)
                                 (let ((tmp-5789
                                         ($sc-dispatch
                                           body-5776
                                           '(#(vector #(each (any . any)))
                                             any
                                             .
                                             each-any))))
                                   (if tmp-5789
                                     (@apply
                                       (lambda (k-5793 v-5794 e1-5795 e2-5796)
                                         (lp-5773
                                           (cons e1-5795 e2-5796)
                                           (append
                                             meta-5777
                                             (syntax->datum
                                               (map cons k-5793 v-5794)))))
                                       tmp-5789)
                                     (expand-simple-lambda-4340
                                       e-5754
                                       r-5755
                                       w-5756
                                       s-5757
                                       mod-5758
                                       req-5769
                                       rest-5771
                                       meta-5777
                                       body-5776))))))))
                        (lp-5773 (cons e1-5765 e2-5766) '())))))
                tmp-5760)
              (syntax-violation 'lambda "bad lambda" e-5754)))))
      (global-extend-4292
        'core
        'lambda*
        (lambda (e-6085 r-6086 w-6087 s-6088 mod-6089)
          (let ((tmp-6091
                  ($sc-dispatch e-6085 '(_ any any . each-any))))
            (if tmp-6091
              (@apply
                (lambda (args-6095 e1-6096 e2-6097)
                  (call-with-values
                    (lambda ()
                      (expand-lambda-case-4342
                        e-6085
                        r-6086
                        w-6087
                        s-6088
                        mod-6089
                        lambda*-formals-4341
                        (list (cons args-6095 (cons e1-6096 e2-6097)))))
                    (lambda (meta-6100 lcase-6101)
                      (make-struct/no-tail
                        (vector-ref %expanded-vtables 13)
                        s-6088
                        meta-6100
                        lcase-6101))))
                tmp-6091)
              (syntax-violation 'lambda "bad lambda*" e-6085)))))
      (global-extend-4292
        'core
        'case-lambda
        (lambda (e-6271 r-6272 w-6273 s-6274 mod-6275)
          (let ((tmp-6277
                  ($sc-dispatch
                    e-6271
                    '(_ (any any . each-any)
                        .
                        #(each (any any . each-any))))))
            (if tmp-6277
              (@apply
                (lambda (args-6281
                         e1-6282
                         e2-6283
                         args*-6284
                         e1*-6285
                         e2*-6286)
                  (call-with-values
                    (lambda ()
                      (expand-lambda-case-4342
                        e-6271
                        r-6272
                        w-6273
                        s-6274
                        mod-6275
                        lambda-formals-4339
                        (cons (cons args-6281 (cons e1-6282 e2-6283))
                              (map (lambda (tmp-3269-6289
                                            tmp-3268-6290
                                            tmp-3267-6291)
                                     (cons tmp-3267-6291
                                           (cons tmp-3268-6290 tmp-3269-6289)))
                                   e2*-6286
                                   e1*-6285
                                   args*-6284))))
                    (lambda (meta-6292 lcase-6293)
                      (make-struct/no-tail
                        (vector-ref %expanded-vtables 13)
                        s-6274
                        meta-6292
                        lcase-6293))))
                tmp-6277)
              (syntax-violation
                'case-lambda
                "bad case-lambda"
                e-6271)))))
      (global-extend-4292
        'core
        'case-lambda*
        (lambda (e-6455 r-6456 w-6457 s-6458 mod-6459)
          (let ((tmp-6461
                  ($sc-dispatch
                    e-6455
                    '(_ (any any . each-any)
                        .
                        #(each (any any . each-any))))))
            (if tmp-6461
              (@apply
                (lambda (args-6465
                         e1-6466
                         e2-6467
                         args*-6468
                         e1*-6469
                         e2*-6470)
                  (call-with-values
                    (lambda ()
                      (expand-lambda-case-4342
                        e-6455
                        r-6456
                        w-6457
                        s-6458
                        mod-6459
                        lambda*-formals-4341
                        (cons (cons args-6465 (cons e1-6466 e2-6467))
                              (map (lambda (tmp-3304-6473
                                            tmp-3303-6474
                                            tmp-3302-6475)
                                     (cons tmp-3302-6475
                                           (cons tmp-3303-6474 tmp-3304-6473)))
                                   e2*-6470
                                   e1*-6469
                                   args*-6468))))
                    (lambda (meta-6476 lcase-6477)
                      (make-struct/no-tail
                        (vector-ref %expanded-vtables 13)
                        s-6458
                        meta-6476
                        lcase-6477))))
                tmp-6461)
              (syntax-violation
                'case-lambda
                "bad case-lambda*"
                e-6455)))))
      (global-extend-4292
        'core
        'let
        (letrec*
          ((expand-let-6668
             (lambda (e-6817
                      r-6818
                      w-6819
                      s-6820
                      mod-6821
                      constructor-6822
                      ids-6823
                      vals-6824
                      exps-6825)
               (if (not (valid-bound-ids?-4320 ids-6823))
                 (syntax-violation
                   'let
                   "duplicate bound variable"
                   e-6817)
                 (let ((labels-6903 (gen-labels-4297 ids-6823))
                       (new-vars-6904 (map gen-var-4344 ids-6823)))
                   (let ((nw-6905
                           (make-binding-wrap-4308
                             ids-6823
                             labels-6903
                             w-6819))
                         (nr-6906
                           (extend-var-env-4289
                             labels-6903
                             new-vars-6904
                             r-6818)))
                     (constructor-6822
                       s-6820
                       (map syntax->datum ids-6823)
                       new-vars-6904
                       (map (lambda (x-6923)
                              (expand-4330 x-6923 r-6818 w-6819 mod-6821))
                            vals-6824)
                       (expand-body-4334
                         exps-6825
                         (source-wrap-4324 e-6817 nw-6905 s-6820 mod-6821)
                         nr-6906
                         nw-6905
                         mod-6821))))))))
          (lambda (e-6669 r-6670 w-6671 s-6672 mod-6673)
            (let ((tmp-6675
                    ($sc-dispatch
                      e-6669
                      '(_ #(each (any any)) any . each-any))))
              (if (if tmp-6675
                    (@apply
                      (lambda (id-6679 val-6680 e1-6681 e2-6682)
                        (and-map id?-4294 id-6679))
                      tmp-6675)
                    #f)
                (@apply
                  (lambda (id-6698 val-6699 e1-6700 e2-6701)
                    (expand-let-6668
                      e-6669
                      r-6670
                      w-6671
                      s-6672
                      mod-6673
                      build-let-4276
                      id-6698
                      val-6699
                      (cons e1-6700 e2-6701)))
                  tmp-6675)
                (let ((tmp-6731
                        ($sc-dispatch
                          e-6669
                          '(_ any #(each (any any)) any . each-any))))
                  (if (if tmp-6731
                        (@apply
                          (lambda (f-6735 id-6736 val-6737 e1-6738 e2-6739)
                            (if (if (symbol? f-6735)
                                  #t
                                  (if (if (vector? f-6735)
                                        (if (= (vector-length f-6735) 4)
                                          (eq? (vector-ref f-6735 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (symbol? (vector-ref f-6735 1))
                                    #f))
                              (and-map id?-4294 id-6736)
                              #f))
                          tmp-6731)
                        #f)
                    (@apply
                      (lambda (f-6781 id-6782 val-6783 e1-6784 e2-6785)
                        (expand-let-6668
                          e-6669
                          r-6670
                          w-6671
                          s-6672
                          mod-6673
                          build-named-let-4277
                          (cons f-6781 id-6782)
                          val-6783
                          (cons e1-6784 e2-6785)))
                      tmp-6731)
                    (syntax-violation
                      'let
                      "bad let"
                      (wrap-4323
                        (begin
                          (if (if (pair? e-6669) s-6672 #f)
                            (set-source-properties! e-6669 s-6672))
                          e-6669)
                        w-6671
                        mod-6673)))))))))
      (global-extend-4292
        'core
        'letrec
        (lambda (e-7335 r-7336 w-7337 s-7338 mod-7339)
          (let ((tmp-7341
                  ($sc-dispatch
                    e-7335
                    '(_ #(each (any any)) any . each-any))))
            (if (if tmp-7341
                  (@apply
                    (lambda (id-7345 val-7346 e1-7347 e2-7348)
                      (and-map id?-4294 id-7345))
                    tmp-7341)
                  #f)
              (@apply
                (lambda (id-7364 val-7365 e1-7366 e2-7367)
                  (if (not (valid-bound-ids?-4320 id-7364))
                    (syntax-violation
                      'letrec
                      "duplicate bound variable"
                      e-7335)
                    (let ((labels-7457 (gen-labels-4297 id-7364))
                          (new-vars-7458 (map gen-var-4344 id-7364)))
                      (let ((w-7459
                              (make-binding-wrap-4308
                                id-7364
                                labels-7457
                                w-7337))
                            (r-7460
                              (extend-var-env-4289
                                labels-7457
                                new-vars-7458
                                r-7336)))
                        (build-letrec-4278
                          s-7338
                          #f
                          (map syntax->datum id-7364)
                          new-vars-7458
                          (map (lambda (x-7545)
                                 (expand-4330 x-7545 r-7460 w-7459 mod-7339))
                               val-7365)
                          (expand-body-4334
                            (cons e1-7366 e2-7367)
                            (wrap-4323
                              (begin
                                (if (if (pair? e-7335) s-7338 #f)
                                  (set-source-properties! e-7335 s-7338))
                                e-7335)
                              w-7459
                              mod-7339)
                            r-7460
                            w-7459
                            mod-7339))))))
                tmp-7341)
              (syntax-violation
                'letrec
                "bad letrec"
                (wrap-4323
                  (begin
                    (if (if (pair? e-7335) s-7338 #f)
                      (set-source-properties! e-7335 s-7338))
                    e-7335)
                  w-7337
                  mod-7339))))))
      (global-extend-4292
        'core
        'letrec*
        (lambda (e-7940 r-7941 w-7942 s-7943 mod-7944)
          (let ((tmp-7946
                  ($sc-dispatch
                    e-7940
                    '(_ #(each (any any)) any . each-any))))
            (if (if tmp-7946
                  (@apply
                    (lambda (id-7950 val-7951 e1-7952 e2-7953)
                      (and-map id?-4294 id-7950))
                    tmp-7946)
                  #f)
              (@apply
                (lambda (id-7969 val-7970 e1-7971 e2-7972)
                  (if (not (valid-bound-ids?-4320 id-7969))
                    (syntax-violation
                      'letrec*
                      "duplicate bound variable"
                      e-7940)
                    (let ((labels-8062 (gen-labels-4297 id-7969))
                          (new-vars-8063 (map gen-var-4344 id-7969)))
                      (let ((w-8064
                              (make-binding-wrap-4308
                                id-7969
                                labels-8062
                                w-7942))
                            (r-8065
                              (extend-var-env-4289
                                labels-8062
                                new-vars-8063
                                r-7941)))
                        (build-letrec-4278
                          s-7943
                          #t
                          (map syntax->datum id-7969)
                          new-vars-8063
                          (map (lambda (x-8150)
                                 (expand-4330 x-8150 r-8065 w-8064 mod-7944))
                               val-7970)
                          (expand-body-4334
                            (cons e1-7971 e2-7972)
                            (wrap-4323
                              (begin
                                (if (if (pair? e-7940) s-7943 #f)
                                  (set-source-properties! e-7940 s-7943))
                                e-7940)
                              w-8064
                              mod-7944)
                            r-8065
                            w-8064
                            mod-7944))))))
                tmp-7946)
              (syntax-violation
                'letrec*
                "bad letrec*"
                (wrap-4323
                  (begin
                    (if (if (pair? e-7940) s-7943 #f)
                      (set-source-properties! e-7940 s-7943))
                    e-7940)
                  w-7942
                  mod-7944))))))
      (global-extend-4292
        'core
        'set!
        (lambda (e-8584 r-8585 w-8586 s-8587 mod-8588)
          (let ((tmp-8590 ($sc-dispatch e-8584 '(_ any any))))
            (if (if tmp-8590
                  (@apply
                    (lambda (id-8594 val-8595)
                      (if (symbol? id-8594)
                        #t
                        (if (if (vector? id-8594)
                              (if (= (vector-length id-8594) 4)
                                (eq? (vector-ref id-8594 0) 'syntax-object)
                                #f)
                              #f)
                          (symbol? (vector-ref id-8594 1))
                          #f)))
                    tmp-8590)
                  #f)
              (@apply
                (lambda (id-8622 val-8623)
                  (let ((n-8624 (id-var-name-4313 id-8622 w-8586))
                        (id-mod-8625
                          (if (if (vector? id-8622)
                                (if (= (vector-length id-8622) 4)
                                  (eq? (vector-ref id-8622 0) 'syntax-object)
                                  #f)
                                #f)
                            (vector-ref id-8622 3)
                            mod-8588)))
                    (let ((b-8626
                            (let ((t-8667 (assq n-8624 r-8585)))
                              (if t-8667
                                (cdr t-8667)
                                (if (symbol? n-8624)
                                  (let ((t-8672
                                          (get-global-definition-hook-4257
                                            n-8624
                                            id-mod-8625)))
                                    (if t-8672 t-8672 '(global)))
                                  '(displaced-lexical))))))
                      (let ((key-8627 (car b-8626)))
                        (if (eqv? key-8627 'lexical)
                          (build-lexical-assignment-4265
                            s-8587
                            (syntax->datum id-8622)
                            (cdr b-8626)
                            (expand-4330 val-8623 r-8585 w-8586 mod-8588))
                          (if (eqv? key-8627 'global)
                            (build-global-assignment-4268
                              s-8587
                              n-8624
                              (expand-4330 val-8623 r-8585 w-8586 mod-8588)
                              id-mod-8625)
                            (if (eqv? key-8627 'macro)
                              (let ((p-8986 (cdr b-8626)))
                                (if (procedure-property
                                      p-8986
                                      'variable-transformer)
                                  (expand-4330
                                    (expand-macro-4333
                                      p-8986
                                      e-8584
                                      r-8585
                                      w-8586
                                      s-8587
                                      #f
                                      mod-8588)
                                    r-8585
                                    '(())
                                    mod-8588)
                                  (syntax-violation
                                    'set!
                                    "not a variable transformer"
                                    (wrap-4323 e-8584 w-8586 mod-8588)
                                    (wrap-4323 id-8622 w-8586 id-mod-8625))))
                              (if (eqv? key-8627 'displaced-lexical)
                                (syntax-violation
                                  'set!
                                  "identifier out of context"
                                  (wrap-4323 id-8622 w-8586 mod-8588))
                                (syntax-violation
                                  'set!
                                  "bad set!"
                                  (wrap-4323
                                    (begin
                                      (if (if (pair? e-8584) s-8587 #f)
                                        (set-source-properties! e-8584 s-8587))
                                      e-8584)
                                    w-8586
                                    mod-8588))))))))))
                tmp-8590)
              (let ((tmp-9081
                      ($sc-dispatch e-8584 '(_ (any . each-any) any))))
                (if tmp-9081
                  (@apply
                    (lambda (head-9085 tail-9086 val-9087)
                      (call-with-values
                        (lambda ()
                          (syntax-type-4329
                            head-9085
                            r-8585
                            '(())
                            #f
                            #f
                            mod-8588
                            #t))
                        (lambda (type-9090
                                 value-9091
                                 formform-9092
                                 ee-9093
                                 ww-9094
                                 ss-9095
                                 modmod-9096)
                          (if (eqv? type-9090 'module-ref)
                            (let ((val-9102
                                    (expand-4330
                                      val-9087
                                      r-8585
                                      w-8586
                                      mod-8588)))
                              (call-with-values
                                (lambda ()
                                  (value-9091
                                    (cons head-9085 tail-9086)
                                    r-8585
                                    w-8586))
                                (lambda (e-9103 r-9104 w-9105 s*-9106 mod-9107)
                                  (let ((tmp-9109 (list e-9103)))
                                    (if (@apply
                                          (lambda (e-9111)
                                            (if (symbol? e-9111)
                                              #t
                                              (if (if (vector? e-9111)
                                                    (if (= (vector-length
                                                             e-9111)
                                                           4)
                                                      (eq? (vector-ref
                                                             e-9111
                                                             0)
                                                           'syntax-object)
                                                      #f)
                                                    #f)
                                                (symbol? (vector-ref e-9111 1))
                                                #f)))
                                          tmp-9109)
                                      (@apply
                                        (lambda (e-9141)
                                          (build-global-assignment-4268
                                            s-8587
                                            (syntax->datum e-9141)
                                            val-9102
                                            mod-9107))
                                        tmp-9109)
                                      (syntax-violation
                                        #f
                                        "source expression failed to match any pattern"
                                        e-9103))))))
                            (build-application-4261
                              s-8587
                              (let ((e-9366
                                      (list '#(syntax-object
                                               setter
                                               ((top)
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(key)
                                                  #((m-*-3553 top))
                                                  #("l-*-3554"))
                                                #(ribcage () () ())
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(type
                                                    value
                                                    formform
                                                    ee
                                                    ww
                                                    ss
                                                    modmod)
                                                  #((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                  #("l-*-3546"
                                                    "l-*-3547"
                                                    "l-*-3548"
                                                    "l-*-3549"
                                                    "l-*-3550"
                                                    "l-*-3551"
                                                    "l-*-3552"))
                                                #(ribcage
                                                  #(head tail val)
                                                  #((top) (top) (top))
                                                  #("l-*-3531"
                                                    "l-*-3532"
                                                    "l-*-3533"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(e r w s mod)
                                                  #((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                  #("l-*-3500"
                                                    "l-*-3501"
                                                    "l-*-3502"
                                                    "l-*-3503"
                                                    "l-*-3504"))
                                                #(ribcage
                                                  (lambda-var-list
                                                    gen-var
                                                    strip
                                                    expand-lambda-case
                                                    lambda*-formals
                                                    expand-simple-lambda
                                                    lambda-formals
                                                    ellipsis?
                                                    expand-void
                                                    eval-local-transformer
                                                    expand-local-syntax
                                                    expand-body
                                                    expand-macro
                                                    expand-application
                                                    expand-expr
                                                    expand
                                                    syntax-type
                                                    parse-when-list
                                                    expand-install-global
                                                    expand-top-sequence
                                                    expand-sequence
                                                    source-wrap
                                                    wrap
                                                    bound-id-member?
                                                    distinct-bound-ids?
                                                    valid-bound-ids?
                                                    bound-id=?
                                                    free-id=?
                                                    with-transformer-environment
                                                    transformer-environment
                                                    resolve-identifier
                                                    locally-bound-identifiers
                                                    id-var-name
                                                    same-marks?
                                                    join-marks
                                                    join-wraps
                                                    smart-append
                                                    make-binding-wrap
                                                    extend-ribcage!
                                                    make-empty-ribcage
                                                    new-mark
                                                    anti-mark
                                                    the-anti-mark
                                                    top-marked?
                                                    top-wrap
                                                    empty-wrap
                                                    set-ribcage-labels!
                                                    set-ribcage-marks!
                                                    set-ribcage-symnames!
                                                    ribcage-labels
                                                    ribcage-marks
                                                    ribcage-symnames
                                                    ribcage?
                                                    make-ribcage
                                                    gen-labels
                                                    gen-label
                                                    make-rename
                                                    rename-marks
                                                    rename-new
                                                    rename-old
                                                    subst-rename?
                                                    wrap-subst
                                                    wrap-marks
                                                    make-wrap
                                                    id-sym-name&marks
                                                    id-sym-name
                                                    id?
                                                    nonsymbol-id?
                                                    global-extend
                                                    lookup
                                                    macros-only-env
                                                    extend-var-env
                                                    extend-env
                                                    null-env
                                                    binding-value
                                                    binding-type
                                                    make-binding
                                                    arg-check
                                                    source-annotation
                                                    no-source
                                                    set-syntax-object-module!
                                                    set-syntax-object-wrap!
                                                    set-syntax-object-expression!
                                                    syntax-object-module
                                                    syntax-object-wrap
                                                    syntax-object-expression
                                                    syntax-object?
                                                    make-syntax-object
                                                    build-lexical-var
                                                    build-letrec
                                                    build-named-let
                                                    build-let
                                                    build-sequence
                                                    build-data
                                                    build-primref
                                                    build-lambda-case
                                                    build-case-lambda
                                                    build-simple-lambda
                                                    build-global-definition
                                                    build-global-assignment
                                                    build-global-reference
                                                    analyze-variable
                                                    build-lexical-assignment
                                                    build-lexical-reference
                                                    build-dynlet
                                                    build-conditional
                                                    build-application
                                                    build-void
                                                    maybe-name-value!
                                                    decorate-source
                                                    get-global-definition-hook
                                                    put-global-definition-hook
                                                    session-id
                                                    local-eval-hook
                                                    top-level-eval-hook
                                                    fx<
                                                    fx=
                                                    fx-
                                                    fx+
                                                    set-lambda-meta!
                                                    lambda-meta
                                                    lambda?
                                                    make-dynlet
                                                    make-letrec
                                                    make-let
                                                    make-lambda-case
                                                    make-lambda
                                                    make-sequence
                                                    make-application
                                                    make-conditional
                                                    make-toplevel-define
                                                    make-toplevel-set
                                                    make-toplevel-ref
                                                    make-module-set
                                                    make-module-ref
                                                    make-lexical-set
                                                    make-lexical-ref
                                                    make-primitive-ref
                                                    make-const
                                                    make-void)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("l-*-476"
                                                   "l-*-474"
                                                   "l-*-472"
                                                   "l-*-470"
                                                   "l-*-468"
                                                   "l-*-466"
                                                   "l-*-464"
                                                   "l-*-462"
                                                   "l-*-460"
                                                   "l-*-458"
                                                   "l-*-456"
                                                   "l-*-454"
                                                   "l-*-452"
                                                   "l-*-450"
                                                   "l-*-448"
                                                   "l-*-446"
                                                   "l-*-444"
                                                   "l-*-442"
                                                   "l-*-440"
                                                   "l-*-438"
                                                   "l-*-436"
                                                   "l-*-434"
                                                   "l-*-432"
                                                   "l-*-430"
                                                   "l-*-428"
                                                   "l-*-426"
                                                   "l-*-424"
                                                   "l-*-422"
                                                   "l-*-420"
                                                   "l-*-418"
                                                   "l-*-416"
                                                   "l-*-414"
                                                   "l-*-412"
                                                   "l-*-410"
                                                   "l-*-408"
                                                   "l-*-406"
                                                   "l-*-404"
                                                   "l-*-402"
                                                   "l-*-400"
                                                   "l-*-399"
                                                   "l-*-397"
                                                   "l-*-394"
                                                   "l-*-393"
                                                   "l-*-392"
                                                   "l-*-390"
                                                   "l-*-389"
                                                   "l-*-387"
                                                   "l-*-385"
                                                   "l-*-383"
                                                   "l-*-381"
                                                   "l-*-379"
                                                   "l-*-377"
                                                   "l-*-375"
                                                   "l-*-373"
                                                   "l-*-370"
                                                   "l-*-368"
                                                   "l-*-367"
                                                   "l-*-365"
                                                   "l-*-363"
                                                   "l-*-361"
                                                   "l-*-359"
                                                   "l-*-358"
                                                   "l-*-357"
                                                   "l-*-356"
                                                   "l-*-354"
                                                   "l-*-353"
                                                   "l-*-350"
                                                   "l-*-348"
                                                   "l-*-346"
                                                   "l-*-344"
                                                   "l-*-342"
                                                   "l-*-340"
                                                   "l-*-338"
                                                   "l-*-337"
                                                   "l-*-336"
                                                   "l-*-334"
                                                   "l-*-332"
                                                   "l-*-331"
                                                   "l-*-328"
                                                   "l-*-327"
                                                   "l-*-325"
                                                   "l-*-323"
                                                   "l-*-321"
                                                   "l-*-319"
                                                   "l-*-317"
                                                   "l-*-315"
                                                   "l-*-313"
                                                   "l-*-311"
                                                   "l-*-309"
                                                   "l-*-306"
                                                   "l-*-304"
                                                   "l-*-302"
                                                   "l-*-300"
                                                   "l-*-298"
                                                   "l-*-296"
                                                   "l-*-294"
                                                   "l-*-292"
                                                   "l-*-290"
                                                   "l-*-288"
                                                   "l-*-286"
                                                   "l-*-284"
                                                   "l-*-282"
                                                   "l-*-280"
                                                   "l-*-278"
                                                   "l-*-276"
                                                   "l-*-274"
                                                   "l-*-272"
                                                   "l-*-270"
                                                   "l-*-268"
                                                   "l-*-266"
                                                   "l-*-264"
                                                   "l-*-262"
                                                   "l-*-260"
                                                   "l-*-258"
                                                   "l-*-256"
                                                   "l-*-255"
                                                   "l-*-254"
                                                   "l-*-253"
                                                   "l-*-252"
                                                   "l-*-250"
                                                   "l-*-248"
                                                   "l-*-246"
                                                   "l-*-243"
                                                   "l-*-241"
                                                   "l-*-239"
                                                   "l-*-237"
                                                   "l-*-235"
                                                   "l-*-233"
                                                   "l-*-231"
                                                   "l-*-229"
                                                   "l-*-227"
                                                   "l-*-225"
                                                   "l-*-223"
                                                   "l-*-221"
                                                   "l-*-219"
                                                   "l-*-217"
                                                   "l-*-215"
                                                   "l-*-213"
                                                   "l-*-211"
                                                   "l-*-209"))
                                                #(ribcage
                                                  (define-structure
                                                    define-expansion-accessors
                                                    define-expansion-constructors)
                                                  ((top) (top) (top))
                                                  ("l-*-47"
                                                   "l-*-46"
                                                   "l-*-45")))
                                               (hygiene guile))
                                            head-9085)))
                                (call-with-values
                                  (lambda ()
                                    (syntax-type-4329
                                      e-9366
                                      r-8585
                                      w-8586
                                      (source-annotation-4287 e-9366)
                                      #f
                                      mod-8588
                                      #f))
                                  (lambda (type-9373
                                           value-9374
                                           form-9375
                                           e-9376
                                           w-9377
                                           s-9378
                                           mod-9379)
                                    (expand-expr-4331
                                      type-9373
                                      value-9374
                                      form-9375
                                      e-9376
                                      r-8585
                                      w-9377
                                      s-9378
                                      mod-9379))))
                              (map (lambda (e-9383)
                                     (call-with-values
                                       (lambda ()
                                         (syntax-type-4329
                                           e-9383
                                           r-8585
                                           w-8586
                                           (source-annotation-4287 e-9383)
                                           #f
                                           mod-8588
                                           #f))
                                       (lambda (type-9398
                                                value-9399
                                                form-9400
                                                e-9401
                                                w-9402
                                                s-9403
                                                mod-9404)
                                         (expand-expr-4331
                                           type-9398
                                           value-9399
                                           form-9400
                                           e-9401
                                           r-8585
                                           w-9402
                                           s-9403
                                           mod-9404))))
                                   (append tail-9086 (list val-9087))))))))
                    tmp-9081)
                  (syntax-violation
                    'set!
                    "bad set!"
                    (wrap-4323
                      (begin
                        (if (if (pair? e-8584) s-8587 #f)
                          (set-source-properties! e-8584 s-8587))
                        e-8584)
                      w-8586
                      mod-8588))))))))
      (module-define!
        (current-module)
        '@
        (make-syntax-transformer
          '@
          'module-ref
          (lambda (e-9447 r-9448 w-9449)
            (let ((tmp-9451
                    ($sc-dispatch e-9447 '(_ each-any any))))
              (if (if tmp-9451
                    (@apply
                      (lambda (mod-9454 id-9455)
                        (if (and-map id?-4294 mod-9454)
                          (if (symbol? id-9455)
                            #t
                            (if (if (vector? id-9455)
                                  (if (= (vector-length id-9455) 4)
                                    (eq? (vector-ref id-9455 0) 'syntax-object)
                                    #f)
                                  #f)
                              (symbol? (vector-ref id-9455 1))
                              #f))
                          #f))
                      tmp-9451)
                    #f)
                (@apply
                  (lambda (mod-9495 id-9496)
                    (values
                      (syntax->datum id-9496)
                      r-9448
                      w-9449
                      #f
                      (syntax->datum
                        (cons '#(syntax-object
                                 public
                                 ((top)
                                  #(ribcage
                                    #(mod id)
                                    #((top) (top))
                                    #("l-*-3595" "l-*-3596"))
                                  #(ribcage () () ())
                                  #(ribcage
                                    #(e r w)
                                    #((top) (top) (top))
                                    #("l-*-3583" "l-*-3584" "l-*-3585"))
                                  #(ribcage
                                    (lambda-var-list
                                      gen-var
                                      strip
                                      expand-lambda-case
                                      lambda*-formals
                                      expand-simple-lambda
                                      lambda-formals
                                      ellipsis?
                                      expand-void
                                      eval-local-transformer
                                      expand-local-syntax
                                      expand-body
                                      expand-macro
                                      expand-application
                                      expand-expr
                                      expand
                                      syntax-type
                                      parse-when-list
                                      expand-install-global
                                      expand-top-sequence
                                      expand-sequence
                                      source-wrap
                                      wrap
                                      bound-id-member?
                                      distinct-bound-ids?
                                      valid-bound-ids?
                                      bound-id=?
                                      free-id=?
                                      with-transformer-environment
                                      transformer-environment
                                      resolve-identifier
                                      locally-bound-identifiers
                                      id-var-name
                                      same-marks?
                                      join-marks
                                      join-wraps
                                      smart-append
                                      make-binding-wrap
                                      extend-ribcage!
                                      make-empty-ribcage
                                      new-mark
                                      anti-mark
                                      the-anti-mark
                                      top-marked?
                                      top-wrap
                                      empty-wrap
                                      set-ribcage-labels!
                                      set-ribcage-marks!
                                      set-ribcage-symnames!
                                      ribcage-labels
                                      ribcage-marks
                                      ribcage-symnames
                                      ribcage?
                                      make-ribcage
                                      gen-labels
                                      gen-label
                                      make-rename
                                      rename-marks
                                      rename-new
                                      rename-old
                                      subst-rename?
                                      wrap-subst
                                      wrap-marks
                                      make-wrap
                                      id-sym-name&marks
                                      id-sym-name
                                      id?
                                      nonsymbol-id?
                                      global-extend
                                      lookup
                                      macros-only-env
                                      extend-var-env
                                      extend-env
                                      null-env
                                      binding-value
                                      binding-type
                                      make-binding
                                      arg-check
                                      source-annotation
                                      no-source
                                      set-syntax-object-module!
                                      set-syntax-object-wrap!
                                      set-syntax-object-expression!
                                      syntax-object-module
                                      syntax-object-wrap
                                      syntax-object-expression
                                      syntax-object?
                                      make-syntax-object
                                      build-lexical-var
                                      build-letrec
                                      build-named-let
                                      build-let
                                      build-sequence
                                      build-data
                                      build-primref
                                      build-lambda-case
                                      build-case-lambda
                                      build-simple-lambda
                                      build-global-definition
                                      build-global-assignment
                                      build-global-reference
                                      analyze-variable
                                      build-lexical-assignment
                                      build-lexical-reference
                                      build-dynlet
                                      build-conditional
                                      build-application
                                      build-void
                                      maybe-name-value!
                                      decorate-source
                                      get-global-definition-hook
                                      put-global-definition-hook
                                      session-id
                                      local-eval-hook
                                      top-level-eval-hook
                                      fx<
                                      fx=
                                      fx-
                                      fx+
                                      set-lambda-meta!
                                      lambda-meta
                                      lambda?
                                      make-dynlet
                                      make-letrec
                                      make-let
                                      make-lambda-case
                                      make-lambda
                                      make-sequence
                                      make-application
                                      make-conditional
                                      make-toplevel-define
                                      make-toplevel-set
                                      make-toplevel-ref
                                      make-module-set
                                      make-module-ref
                                      make-lexical-set
                                      make-lexical-ref
                                      make-primitive-ref
                                      make-const
                                      make-void)
                                    ((top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top))
                                    ("l-*-476"
                                     "l-*-474"
                                     "l-*-472"
                                     "l-*-470"
                                     "l-*-468"
                                     "l-*-466"
                                     "l-*-464"
                                     "l-*-462"
                                     "l-*-460"
                                     "l-*-458"
                                     "l-*-456"
                                     "l-*-454"
                                     "l-*-452"
                                     "l-*-450"
                                     "l-*-448"
                                     "l-*-446"
                                     "l-*-444"
                                     "l-*-442"
                                     "l-*-440"
                                     "l-*-438"
                                     "l-*-436"
                                     "l-*-434"
                                     "l-*-432"
                                     "l-*-430"
                                     "l-*-428"
                                     "l-*-426"
                                     "l-*-424"
                                     "l-*-422"
                                     "l-*-420"
                                     "l-*-418"
                                     "l-*-416"
                                     "l-*-414"
                                     "l-*-412"
                                     "l-*-410"
                                     "l-*-408"
                                     "l-*-406"
                                     "l-*-404"
                                     "l-*-402"
                                     "l-*-400"
                                     "l-*-399"
                                     "l-*-397"
                                     "l-*-394"
                                     "l-*-393"
                                     "l-*-392"
                                     "l-*-390"
                                     "l-*-389"
                                     "l-*-387"
                                     "l-*-385"
                                     "l-*-383"
                                     "l-*-381"
                                     "l-*-379"
                                     "l-*-377"
                                     "l-*-375"
                                     "l-*-373"
                                     "l-*-370"
                                     "l-*-368"
                                     "l-*-367"
                                     "l-*-365"
                                     "l-*-363"
                                     "l-*-361"
                                     "l-*-359"
                                     "l-*-358"
                                     "l-*-357"
                                     "l-*-356"
                                     "l-*-354"
                                     "l-*-353"
                                     "l-*-350"
                                     "l-*-348"
                                     "l-*-346"
                                     "l-*-344"
                                     "l-*-342"
                                     "l-*-340"
                                     "l-*-338"
                                     "l-*-337"
                                     "l-*-336"
                                     "l-*-334"
                                     "l-*-332"
                                     "l-*-331"
                                     "l-*-328"
                                     "l-*-327"
                                     "l-*-325"
                                     "l-*-323"
                                     "l-*-321"
                                     "l-*-319"
                                     "l-*-317"
                                     "l-*-315"
                                     "l-*-313"
                                     "l-*-311"
                                     "l-*-309"
                                     "l-*-306"
                                     "l-*-304"
                                     "l-*-302"
                                     "l-*-300"
                                     "l-*-298"
                                     "l-*-296"
                                     "l-*-294"
                                     "l-*-292"
                                     "l-*-290"
                                     "l-*-288"
                                     "l-*-286"
                                     "l-*-284"
                                     "l-*-282"
                                     "l-*-280"
                                     "l-*-278"
                                     "l-*-276"
                                     "l-*-274"
                                     "l-*-272"
                                     "l-*-270"
                                     "l-*-268"
                                     "l-*-266"
                                     "l-*-264"
                                     "l-*-262"
                                     "l-*-260"
                                     "l-*-258"
                                     "l-*-256"
                                     "l-*-255"
                                     "l-*-254"
                                     "l-*-253"
                                     "l-*-252"
                                     "l-*-250"
                                     "l-*-248"
                                     "l-*-246"
                                     "l-*-243"
                                     "l-*-241"
                                     "l-*-239"
                                     "l-*-237"
                                     "l-*-235"
                                     "l-*-233"
                                     "l-*-231"
                                     "l-*-229"
                                     "l-*-227"
                                     "l-*-225"
                                     "l-*-223"
                                     "l-*-221"
                                     "l-*-219"
                                     "l-*-217"
                                     "l-*-215"
                                     "l-*-213"
                                     "l-*-211"
                                     "l-*-209"))
                                  #(ribcage
                                    (define-structure
                                      define-expansion-accessors
                                      define-expansion-constructors)
                                    ((top) (top) (top))
                                    ("l-*-47" "l-*-46" "l-*-45")))
                                 (hygiene guile))
                              mod-9495))))
                  tmp-9451)
                (syntax-violation
                  #f
                  "source expression failed to match any pattern"
                  e-9447))))))
      (global-extend-4292
        'module-ref
        '@@
        (lambda (e-9588 r-9589 w-9590)
          (letrec*
            ((remodulate-9591
               (lambda (x-9626 mod-9627)
                 (if (pair? x-9626)
                   (cons (remodulate-9591 (car x-9626) mod-9627)
                         (remodulate-9591 (cdr x-9626) mod-9627))
                   (if (if (vector? x-9626)
                         (if (= (vector-length x-9626) 4)
                           (eq? (vector-ref x-9626 0) 'syntax-object)
                           #f)
                         #f)
                     (let ((expression-9641
                             (remodulate-9591 (vector-ref x-9626 1) mod-9627))
                           (wrap-9642 (vector-ref x-9626 2)))
                       (vector
                         'syntax-object
                         expression-9641
                         wrap-9642
                         mod-9627))
                     (if (vector? x-9626)
                       (let ((n-9650 (vector-length x-9626)))
                         (let ((v-9651 (make-vector n-9650)))
                           (letrec*
                             ((loop-9652
                                (lambda (i-9699)
                                  (if (= i-9699 n-9650)
                                    v-9651
                                    (begin
                                      (vector-set!
                                        v-9651
                                        i-9699
                                        (remodulate-9591
                                          (vector-ref x-9626 i-9699)
                                          mod-9627))
                                      (loop-9652 (#{1+}# i-9699)))))))
                             (loop-9652 0))))
                       x-9626))))))
            (let ((tmp-9593
                    ($sc-dispatch e-9588 '(_ each-any any))))
              (if (if tmp-9593
                    (@apply
                      (lambda (mod-9597 exp-9598)
                        (and-map id?-4294 mod-9597))
                      tmp-9593)
                    #f)
                (@apply
                  (lambda (mod-9614 exp-9615)
                    (let ((mod-9616
                            (syntax->datum
                              (cons '#(syntax-object
                                       private
                                       ((top)
                                        #(ribcage
                                          #(mod exp)
                                          #((top) (top))
                                          #("l-*-3633" "l-*-3634"))
                                        #(ribcage
                                          (remodulate)
                                          ((top))
                                          ("l-*-3606"))
                                        #(ribcage
                                          #(e r w)
                                          #((top) (top) (top))
                                          #("l-*-3603" "l-*-3604" "l-*-3605"))
                                        #(ribcage
                                          (lambda-var-list
                                            gen-var
                                            strip
                                            expand-lambda-case
                                            lambda*-formals
                                            expand-simple-lambda
                                            lambda-formals
                                            ellipsis?
                                            expand-void
                                            eval-local-transformer
                                            expand-local-syntax
                                            expand-body
                                            expand-macro
                                            expand-application
                                            expand-expr
                                            expand
                                            syntax-type
                                            parse-when-list
                                            expand-install-global
                                            expand-top-sequence
                                            expand-sequence
                                            source-wrap
                                            wrap
                                            bound-id-member?
                                            distinct-bound-ids?
                                            valid-bound-ids?
                                            bound-id=?
                                            free-id=?
                                            with-transformer-environment
                                            transformer-environment
                                            resolve-identifier
                                            locally-bound-identifiers
                                            id-var-name
                                            same-marks?
                                            join-marks
                                            join-wraps
                                            smart-append
                                            make-binding-wrap
                                            extend-ribcage!
                                            make-empty-ribcage
                                            new-mark
                                            anti-mark
                                            the-anti-mark
                                            top-marked?
                                            top-wrap
                                            empty-wrap
                                            set-ribcage-labels!
                                            set-ribcage-marks!
                                            set-ribcage-symnames!
                                            ribcage-labels
                                            ribcage-marks
                                            ribcage-symnames
                                            ribcage?
                                            make-ribcage
                                            gen-labels
                                            gen-label
                                            make-rename
                                            rename-marks
                                            rename-new
                                            rename-old
                                            subst-rename?
                                            wrap-subst
                                            wrap-marks
                                            make-wrap
                                            id-sym-name&marks
                                            id-sym-name
                                            id?
                                            nonsymbol-id?
                                            global-extend
                                            lookup
                                            macros-only-env
                                            extend-var-env
                                            extend-env
                                            null-env
                                            binding-value
                                            binding-type
                                            make-binding
                                            arg-check
                                            source-annotation
                                            no-source
                                            set-syntax-object-module!
                                            set-syntax-object-wrap!
                                            set-syntax-object-expression!
                                            syntax-object-module
                                            syntax-object-wrap
                                            syntax-object-expression
                                            syntax-object?
                                            make-syntax-object
                                            build-lexical-var
                                            build-letrec
                                            build-named-let
                                            build-let
                                            build-sequence
                                            build-data
                                            build-primref
                                            build-lambda-case
                                            build-case-lambda
                                            build-simple-lambda
                                            build-global-definition
                                            build-global-assignment
                                            build-global-reference
                                            analyze-variable
                                            build-lexical-assignment
                                            build-lexical-reference
                                            build-dynlet
                                            build-conditional
                                            build-application
                                            build-void
                                            maybe-name-value!
                                            decorate-source
                                            get-global-definition-hook
                                            put-global-definition-hook
                                            session-id
                                            local-eval-hook
                                            top-level-eval-hook
                                            fx<
                                            fx=
                                            fx-
                                            fx+
                                            set-lambda-meta!
                                            lambda-meta
                                            lambda?
                                            make-dynlet
                                            make-letrec
                                            make-let
                                            make-lambda-case
                                            make-lambda
                                            make-sequence
                                            make-application
                                            make-conditional
                                            make-toplevel-define
                                            make-toplevel-set
                                            make-toplevel-ref
                                            make-module-set
                                            make-module-ref
                                            make-lexical-set
                                            make-lexical-ref
                                            make-primitive-ref
                                            make-const
                                            make-void)
                                          ((top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top))
                                          ("l-*-476"
                                           "l-*-474"
                                           "l-*-472"
                                           "l-*-470"
                                           "l-*-468"
                                           "l-*-466"
                                           "l-*-464"
                                           "l-*-462"
                                           "l-*-460"
                                           "l-*-458"
                                           "l-*-456"
                                           "l-*-454"
                                           "l-*-452"
                                           "l-*-450"
                                           "l-*-448"
                                           "l-*-446"
                                           "l-*-444"
                                           "l-*-442"
                                           "l-*-440"
                                           "l-*-438"
                                           "l-*-436"
                                           "l-*-434"
                                           "l-*-432"
                                           "l-*-430"
                                           "l-*-428"
                                           "l-*-426"
                                           "l-*-424"
                                           "l-*-422"
                                           "l-*-420"
                                           "l-*-418"
                                           "l-*-416"
                                           "l-*-414"
                                           "l-*-412"
                                           "l-*-410"
                                           "l-*-408"
                                           "l-*-406"
                                           "l-*-404"
                                           "l-*-402"
                                           "l-*-400"
                                           "l-*-399"
                                           "l-*-397"
                                           "l-*-394"
                                           "l-*-393"
                                           "l-*-392"
                                           "l-*-390"
                                           "l-*-389"
                                           "l-*-387"
                                           "l-*-385"
                                           "l-*-383"
                                           "l-*-381"
                                           "l-*-379"
                                           "l-*-377"
                                           "l-*-375"
                                           "l-*-373"
                                           "l-*-370"
                                           "l-*-368"
                                           "l-*-367"
                                           "l-*-365"
                                           "l-*-363"
                                           "l-*-361"
                                           "l-*-359"
                                           "l-*-358"
                                           "l-*-357"
                                           "l-*-356"
                                           "l-*-354"
                                           "l-*-353"
                                           "l-*-350"
                                           "l-*-348"
                                           "l-*-346"
                                           "l-*-344"
                                           "l-*-342"
                                           "l-*-340"
                                           "l-*-338"
                                           "l-*-337"
                                           "l-*-336"
                                           "l-*-334"
                                           "l-*-332"
                                           "l-*-331"
                                           "l-*-328"
                                           "l-*-327"
                                           "l-*-325"
                                           "l-*-323"
                                           "l-*-321"
                                           "l-*-319"
                                           "l-*-317"
                                           "l-*-315"
                                           "l-*-313"
                                           "l-*-311"
                                           "l-*-309"
                                           "l-*-306"
                                           "l-*-304"
                                           "l-*-302"
                                           "l-*-300"
                                           "l-*-298"
                                           "l-*-296"
                                           "l-*-294"
                                           "l-*-292"
                                           "l-*-290"
                                           "l-*-288"
                                           "l-*-286"
                                           "l-*-284"
                                           "l-*-282"
                                           "l-*-280"
                                           "l-*-278"
                                           "l-*-276"
                                           "l-*-274"
                                           "l-*-272"
                                           "l-*-270"
                                           "l-*-268"
                                           "l-*-266"
                                           "l-*-264"
                                           "l-*-262"
                                           "l-*-260"
                                           "l-*-258"
                                           "l-*-256"
                                           "l-*-255"
                                           "l-*-254"
                                           "l-*-253"
                                           "l-*-252"
                                           "l-*-250"
                                           "l-*-248"
                                           "l-*-246"
                                           "l-*-243"
                                           "l-*-241"
                                           "l-*-239"
                                           "l-*-237"
                                           "l-*-235"
                                           "l-*-233"
                                           "l-*-231"
                                           "l-*-229"
                                           "l-*-227"
                                           "l-*-225"
                                           "l-*-223"
                                           "l-*-221"
                                           "l-*-219"
                                           "l-*-217"
                                           "l-*-215"
                                           "l-*-213"
                                           "l-*-211"
                                           "l-*-209"))
                                        #(ribcage
                                          (define-structure
                                            define-expansion-accessors
                                            define-expansion-constructors)
                                          ((top) (top) (top))
                                          ("l-*-47" "l-*-46" "l-*-45")))
                                       (hygiene guile))
                                    mod-9614))))
                      (values
                        (remodulate-9591 exp-9615 mod-9616)
                        r-9589
                        w-9590
                        (source-annotation-4287 exp-9615)
                        mod-9616)))
                  tmp-9593)
                (syntax-violation
                  #f
                  "source expression failed to match any pattern"
                  e-9588))))))
      (global-extend-4292
        'core
        'if
        (lambda (e-9800 r-9801 w-9802 s-9803 mod-9804)
          (let ((tmp-9806 ($sc-dispatch e-9800 '(_ any any))))
            (if tmp-9806
              (@apply
                (lambda (test-9810 then-9811)
                  (build-conditional-4262
                    s-9803
                    (expand-4330 test-9810 r-9801 w-9802 mod-9804)
                    (expand-4330 then-9811 r-9801 w-9802 mod-9804)
                    (make-struct/no-tail
                      (vector-ref %expanded-vtables 0)
                      #f)))
                tmp-9806)
              (let ((tmp-10036
                      ($sc-dispatch e-9800 '(_ any any any))))
                (if tmp-10036
                  (@apply
                    (lambda (test-10040 then-10041 else-10042)
                      (build-conditional-4262
                        s-9803
                        (expand-4330 test-10040 r-9801 w-9802 mod-9804)
                        (expand-4330 then-10041 r-9801 w-9802 mod-9804)
                        (expand-4330 else-10042 r-9801 w-9802 mod-9804)))
                    tmp-10036)
                  (syntax-violation
                    #f
                    "source expression failed to match any pattern"
                    e-9800)))))))
      (global-extend-4292
        'core
        'with-fluids
        (lambda (e-10441 r-10442 w-10443 s-10444 mod-10445)
          (let ((tmp-10447
                  ($sc-dispatch
                    e-10441
                    '(_ #(each (any any)) any . each-any))))
            (if tmp-10447
              (@apply
                (lambda (fluid-10451 val-10452 b-10453 b*-10454)
                  (build-dynlet-4263
                    s-10444
                    (map (lambda (x-10535)
                           (expand-4330 x-10535 r-10442 w-10443 mod-10445))
                         fluid-10451)
                    (map (lambda (x-10605)
                           (expand-4330 x-10605 r-10442 w-10443 mod-10445))
                         val-10452)
                    (expand-body-4334
                      (cons b-10453 b*-10454)
                      (wrap-4323
                        (begin
                          (if (if (pair? e-10441) s-10444 #f)
                            (set-source-properties! e-10441 s-10444))
                          e-10441)
                        w-10443
                        mod-10445)
                      r-10442
                      w-10443
                      mod-10445)))
                tmp-10447)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                e-10441)))))
      (module-define!
        (current-module)
        'begin
        (make-syntax-transformer 'begin 'begin '()))
      (module-define!
        (current-module)
        'define
        (make-syntax-transformer 'define 'define '()))
      (module-define!
        (current-module)
        'define-syntax
        (make-syntax-transformer
          'define-syntax
          'define-syntax
          '()))
      (module-define!
        (current-module)
        'define-syntax-parameter
        (make-syntax-transformer
          'define-syntax-parameter
          'define-syntax-parameter
          '()))
      (module-define!
        (current-module)
        'eval-when
        (make-syntax-transformer
          'eval-when
          'eval-when
          '()))
      (global-extend-4292
        'core
        'syntax-case
        (letrec*
          ((convert-pattern-10973
             (lambda (pattern-12570 keys-12571)
               (letrec*
                 ((cvt*-12572
                    (lambda (p*-13196 n-13197 ids-13198)
                      (if (not (pair? p*-13196))
                        (cvt-12574 p*-13196 n-13197 ids-13198)
                        (call-with-values
                          (lambda ()
                            (cvt*-12572 (cdr p*-13196) n-13197 ids-13198))
                          (lambda (y-13201 ids-13202)
                            (call-with-values
                              (lambda ()
                                (cvt-12574 (car p*-13196) n-13197 ids-13202))
                              (lambda (x-13205 ids-13206)
                                (values
                                  (cons x-13205 y-13201)
                                  ids-13206))))))))
                  (v-reverse-12573
                    (lambda (x-13207)
                      (letrec*
                        ((loop-13208
                           (lambda (r-13288 x-13289)
                             (if (not (pair? x-13289))
                               (values r-13288 x-13289)
                               (loop-13208
                                 (cons (car x-13289) r-13288)
                                 (cdr x-13289))))))
                        (loop-13208 '() x-13207))))
                  (cvt-12574
                    (lambda (p-12577 n-12578 ids-12579)
                      (if (if (symbol? p-12577)
                            #t
                            (if (if (vector? p-12577)
                                  (if (= (vector-length p-12577) 4)
                                    (eq? (vector-ref p-12577 0) 'syntax-object)
                                    #f)
                                  #f)
                              (symbol? (vector-ref p-12577 1))
                              #f))
                        (if (bound-id-member?-4322 p-12577 keys-12571)
                          (values (vector 'free-id p-12577) ids-12579)
                          (if (if (eq? (if (if (vector? p-12577)
                                             (if (= (vector-length p-12577) 4)
                                               (eq? (vector-ref p-12577 0)
                                                    'syntax-object)
                                               #f)
                                             #f)
                                         (vector-ref p-12577 1)
                                         p-12577)
                                       (if (if (= (vector-length
                                                    '#(syntax-object
                                                       _
                                                       ((top)
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(p n ids)
                                                          #((top) (top) (top))
                                                          #("l-*-3734"
                                                            "l-*-3735"
                                                            "l-*-3736"))
                                                        #(ribcage
                                                          (cvt v-reverse cvt*)
                                                          ((top) (top) (top))
                                                          ("l-*-3707"
                                                           "l-*-3705"
                                                           "l-*-3703"))
                                                        #(ribcage
                                                          #(pattern keys)
                                                          #((top) (top))
                                                          #("l-*-3701"
                                                            "l-*-3702"))
                                                        #(ribcage
                                                          (gen-syntax-case
                                                            gen-clause
                                                            build-dispatch-call
                                                            convert-pattern)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("l-*-3697"
                                                           "l-*-3695"
                                                           "l-*-3693"
                                                           "l-*-3691"))
                                                        #(ribcage
                                                          (lambda-var-list
                                                            gen-var
                                                            strip
                                                            expand-lambda-case
                                                            lambda*-formals
                                                            expand-simple-lambda
                                                            lambda-formals
                                                            ellipsis?
                                                            expand-void
                                                            eval-local-transformer
                                                            expand-local-syntax
                                                            expand-body
                                                            expand-macro
                                                            expand-application
                                                            expand-expr
                                                            expand
                                                            syntax-type
                                                            parse-when-list
                                                            expand-install-global
                                                            expand-top-sequence
                                                            expand-sequence
                                                            source-wrap
                                                            wrap
                                                            bound-id-member?
                                                            distinct-bound-ids?
                                                            valid-bound-ids?
                                                            bound-id=?
                                                            free-id=?
                                                            with-transformer-environment
                                                            transformer-environment
                                                            resolve-identifier
                                                            locally-bound-identifiers
                                                            id-var-name
                                                            same-marks?
                                                            join-marks
                                                            join-wraps
                                                            smart-append
                                                            make-binding-wrap
                                                            extend-ribcage!
                                                            make-empty-ribcage
                                                            new-mark
                                                            anti-mark
                                                            the-anti-mark
                                                            top-marked?
                                                            top-wrap
                                                            empty-wrap
                                                            set-ribcage-labels!
                                                            set-ribcage-marks!
                                                            set-ribcage-symnames!
                                                            ribcage-labels
                                                            ribcage-marks
                                                            ribcage-symnames
                                                            ribcage?
                                                            make-ribcage
                                                            gen-labels
                                                            gen-label
                                                            make-rename
                                                            rename-marks
                                                            rename-new
                                                            rename-old
                                                            subst-rename?
                                                            wrap-subst
                                                            wrap-marks
                                                            make-wrap
                                                            id-sym-name&marks
                                                            id-sym-name
                                                            id?
                                                            nonsymbol-id?
                                                            global-extend
                                                            lookup
                                                            macros-only-env
                                                            extend-var-env
                                                            extend-env
                                                            null-env
                                                            binding-value
                                                            binding-type
                                                            make-binding
                                                            arg-check
                                                            source-annotation
                                                            no-source
                                                            set-syntax-object-module!
                                                            set-syntax-object-wrap!
                                                            set-syntax-object-expression!
                                                            syntax-object-module
                                                            syntax-object-wrap
                                                            syntax-object-expression
                                                            syntax-object?
                                                            make-syntax-object
                                                            build-lexical-var
                                                            build-letrec
                                                            build-named-let
                                                            build-let
                                                            build-sequence
                                                            build-data
                                                            build-primref
                                                            build-lambda-case
                                                            build-case-lambda
                                                            build-simple-lambda
                                                            build-global-definition
                                                            build-global-assignment
                                                            build-global-reference
                                                            analyze-variable
                                                            build-lexical-assignment
                                                            build-lexical-reference
                                                            build-dynlet
                                                            build-conditional
                                                            build-application
                                                            build-void
                                                            maybe-name-value!
                                                            decorate-source
                                                            get-global-definition-hook
                                                            put-global-definition-hook
                                                            session-id
                                                            local-eval-hook
                                                            top-level-eval-hook
                                                            fx<
                                                            fx=
                                                            fx-
                                                            fx+
                                                            set-lambda-meta!
                                                            lambda-meta
                                                            lambda?
                                                            make-dynlet
                                                            make-letrec
                                                            make-let
                                                            make-lambda-case
                                                            make-lambda
                                                            make-sequence
                                                            make-application
                                                            make-conditional
                                                            make-toplevel-define
                                                            make-toplevel-set
                                                            make-toplevel-ref
                                                            make-module-set
                                                            make-module-ref
                                                            make-lexical-set
                                                            make-lexical-ref
                                                            make-primitive-ref
                                                            make-const
                                                            make-void)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("l-*-476"
                                                           "l-*-474"
                                                           "l-*-472"
                                                           "l-*-470"
                                                           "l-*-468"
                                                           "l-*-466"
                                                           "l-*-464"
                                                           "l-*-462"
                                                           "l-*-460"
                                                           "l-*-458"
                                                           "l-*-456"
                                                           "l-*-454"
                                                           "l-*-452"
                                                           "l-*-450"
                                                           "l-*-448"
                                                           "l-*-446"
                                                           "l-*-444"
                                                           "l-*-442"
                                                           "l-*-440"
                                                           "l-*-438"
                                                           "l-*-436"
                                                           "l-*-434"
                                                           "l-*-432"
                                                           "l-*-430"
                                                           "l-*-428"
                                                           "l-*-426"
                                                           "l-*-424"
                                                           "l-*-422"
                                                           "l-*-420"
                                                           "l-*-418"
                                                           "l-*-416"
                                                           "l-*-414"
                                                           "l-*-412"
                                                           "l-*-410"
                                                           "l-*-408"
                                                           "l-*-406"
                                                           "l-*-404"
                                                           "l-*-402"
                                                           "l-*-400"
                                                           "l-*-399"
                                                           "l-*-397"
                                                           "l-*-394"
                                                           "l-*-393"
                                                           "l-*-392"
                                                           "l-*-390"
                                                           "l-*-389"
                                                           "l-*-387"
                                                           "l-*-385"
                                                           "l-*-383"
                                                           "l-*-381"
                                                           "l-*-379"
                                                           "l-*-377"
                                                           "l-*-375"
                                                           "l-*-373"
                                                           "l-*-370"
                                                           "l-*-368"
                                                           "l-*-367"
                                                           "l-*-365"
                                                           "l-*-363"
                                                           "l-*-361"
                                                           "l-*-359"
                                                           "l-*-358"
                                                           "l-*-357"
                                                           "l-*-356"
                                                           "l-*-354"
                                                           "l-*-353"
                                                           "l-*-350"
                                                           "l-*-348"
                                                           "l-*-346"
                                                           "l-*-344"
                                                           "l-*-342"
                                                           "l-*-340"
                                                           "l-*-338"
                                                           "l-*-337"
                                                           "l-*-336"
                                                           "l-*-334"
                                                           "l-*-332"
                                                           "l-*-331"
                                                           "l-*-328"
                                                           "l-*-327"
                                                           "l-*-325"
                                                           "l-*-323"
                                                           "l-*-321"
                                                           "l-*-319"
                                                           "l-*-317"
                                                           "l-*-315"
                                                           "l-*-313"
                                                           "l-*-311"
                                                           "l-*-309"
                                                           "l-*-306"
                                                           "l-*-304"
                                                           "l-*-302"
                                                           "l-*-300"
                                                           "l-*-298"
                                                           "l-*-296"
                                                           "l-*-294"
                                                           "l-*-292"
                                                           "l-*-290"
                                                           "l-*-288"
                                                           "l-*-286"
                                                           "l-*-284"
                                                           "l-*-282"
                                                           "l-*-280"
                                                           "l-*-278"
                                                           "l-*-276"
                                                           "l-*-274"
                                                           "l-*-272"
                                                           "l-*-270"
                                                           "l-*-268"
                                                           "l-*-266"
                                                           "l-*-264"
                                                           "l-*-262"
                                                           "l-*-260"
                                                           "l-*-258"
                                                           "l-*-256"
                                                           "l-*-255"
                                                           "l-*-254"
                                                           "l-*-253"
                                                           "l-*-252"
                                                           "l-*-250"
                                                           "l-*-248"
                                                           "l-*-246"
                                                           "l-*-243"
                                                           "l-*-241"
                                                           "l-*-239"
                                                           "l-*-237"
                                                           "l-*-235"
                                                           "l-*-233"
                                                           "l-*-231"
                                                           "l-*-229"
                                                           "l-*-227"
                                                           "l-*-225"
                                                           "l-*-223"
                                                           "l-*-221"
                                                           "l-*-219"
                                                           "l-*-217"
                                                           "l-*-215"
                                                           "l-*-213"
                                                           "l-*-211"
                                                           "l-*-209"))
                                                        #(ribcage
                                                          (define-structure
                                                            define-expansion-accessors
                                                            define-expansion-constructors)
                                                          ((top) (top) (top))
                                                          ("l-*-47"
                                                           "l-*-46"
                                                           "l-*-45")))
                                                       (hygiene guile)))
                                                  4)
                                             #t
                                             #f)
                                         '_
                                         '#(syntax-object
                                            _
                                            ((top)
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(p n ids)
                                               #((top) (top) (top))
                                               #("l-*-3734"
                                                 "l-*-3735"
                                                 "l-*-3736"))
                                             #(ribcage
                                               (cvt v-reverse cvt*)
                                               ((top) (top) (top))
                                               ("l-*-3707"
                                                "l-*-3705"
                                                "l-*-3703"))
                                             #(ribcage
                                               #(pattern keys)
                                               #((top) (top))
                                               #("l-*-3701" "l-*-3702"))
                                             #(ribcage
                                               (gen-syntax-case
                                                 gen-clause
                                                 build-dispatch-call
                                                 convert-pattern)
                                               ((top) (top) (top) (top))
                                               ("l-*-3697"
                                                "l-*-3695"
                                                "l-*-3693"
                                                "l-*-3691"))
                                             #(ribcage
                                               (lambda-var-list
                                                 gen-var
                                                 strip
                                                 expand-lambda-case
                                                 lambda*-formals
                                                 expand-simple-lambda
                                                 lambda-formals
                                                 ellipsis?
                                                 expand-void
                                                 eval-local-transformer
                                                 expand-local-syntax
                                                 expand-body
                                                 expand-macro
                                                 expand-application
                                                 expand-expr
                                                 expand
                                                 syntax-type
                                                 parse-when-list
                                                 expand-install-global
                                                 expand-top-sequence
                                                 expand-sequence
                                                 source-wrap
                                                 wrap
                                                 bound-id-member?
                                                 distinct-bound-ids?
                                                 valid-bound-ids?
                                                 bound-id=?
                                                 free-id=?
                                                 with-transformer-environment
                                                 transformer-environment
                                                 resolve-identifier
                                                 locally-bound-identifiers
                                                 id-var-name
                                                 same-marks?
                                                 join-marks
                                                 join-wraps
                                                 smart-append
                                                 make-binding-wrap
                                                 extend-ribcage!
                                                 make-empty-ribcage
                                                 new-mark
                                                 anti-mark
                                                 the-anti-mark
                                                 top-marked?
                                                 top-wrap
                                                 empty-wrap
                                                 set-ribcage-labels!
                                                 set-ribcage-marks!
                                                 set-ribcage-symnames!
                                                 ribcage-labels
                                                 ribcage-marks
                                                 ribcage-symnames
                                                 ribcage?
                                                 make-ribcage
                                                 gen-labels
                                                 gen-label
                                                 make-rename
                                                 rename-marks
                                                 rename-new
                                                 rename-old
                                                 subst-rename?
                                                 wrap-subst
                                                 wrap-marks
                                                 make-wrap
                                                 id-sym-name&marks
                                                 id-sym-name
                                                 id?
                                                 nonsymbol-id?
                                                 global-extend
                                                 lookup
                                                 macros-only-env
                                                 extend-var-env
                                                 extend-env
                                                 null-env
                                                 binding-value
                                                 binding-type
                                                 make-binding
                                                 arg-check
                                                 source-annotation
                                                 no-source
                                                 set-syntax-object-module!
                                                 set-syntax-object-wrap!
                                                 set-syntax-object-expression!
                                                 syntax-object-module
                                                 syntax-object-wrap
                                                 syntax-object-expression
                                                 syntax-object?
                                                 make-syntax-object
                                                 build-lexical-var
                                                 build-letrec
                                                 build-named-let
                                                 build-let
                                                 build-sequence
                                                 build-data
                                                 build-primref
                                                 build-lambda-case
                                                 build-case-lambda
                                                 build-simple-lambda
                                                 build-global-definition
                                                 build-global-assignment
                                                 build-global-reference
                                                 analyze-variable
                                                 build-lexical-assignment
                                                 build-lexical-reference
                                                 build-dynlet
                                                 build-conditional
                                                 build-application
                                                 build-void
                                                 maybe-name-value!
                                                 decorate-source
                                                 get-global-definition-hook
                                                 put-global-definition-hook
                                                 session-id
                                                 local-eval-hook
                                                 top-level-eval-hook
                                                 fx<
                                                 fx=
                                                 fx-
                                                 fx+
                                                 set-lambda-meta!
                                                 lambda-meta
                                                 lambda?
                                                 make-dynlet
                                                 make-letrec
                                                 make-let
                                                 make-lambda-case
                                                 make-lambda
                                                 make-sequence
                                                 make-application
                                                 make-conditional
                                                 make-toplevel-define
                                                 make-toplevel-set
                                                 make-toplevel-ref
                                                 make-module-set
                                                 make-module-ref
                                                 make-lexical-set
                                                 make-lexical-ref
                                                 make-primitive-ref
                                                 make-const
                                                 make-void)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("l-*-476"
                                                "l-*-474"
                                                "l-*-472"
                                                "l-*-470"
                                                "l-*-468"
                                                "l-*-466"
                                                "l-*-464"
                                                "l-*-462"
                                                "l-*-460"
                                                "l-*-458"
                                                "l-*-456"
                                                "l-*-454"
                                                "l-*-452"
                                                "l-*-450"
                                                "l-*-448"
                                                "l-*-446"
                                                "l-*-444"
                                                "l-*-442"
                                                "l-*-440"
                                                "l-*-438"
                                                "l-*-436"
                                                "l-*-434"
                                                "l-*-432"
                                                "l-*-430"
                                                "l-*-428"
                                                "l-*-426"
                                                "l-*-424"
                                                "l-*-422"
                                                "l-*-420"
                                                "l-*-418"
                                                "l-*-416"
                                                "l-*-414"
                                                "l-*-412"
                                                "l-*-410"
                                                "l-*-408"
                                                "l-*-406"
                                                "l-*-404"
                                                "l-*-402"
                                                "l-*-400"
                                                "l-*-399"
                                                "l-*-397"
                                                "l-*-394"
                                                "l-*-393"
                                                "l-*-392"
                                                "l-*-390"
                                                "l-*-389"
                                                "l-*-387"
                                                "l-*-385"
                                                "l-*-383"
                                                "l-*-381"
                                                "l-*-379"
                                                "l-*-377"
                                                "l-*-375"
                                                "l-*-373"
                                                "l-*-370"
                                                "l-*-368"
                                                "l-*-367"
                                                "l-*-365"
                                                "l-*-363"
                                                "l-*-361"
                                                "l-*-359"
                                                "l-*-358"
                                                "l-*-357"
                                                "l-*-356"
                                                "l-*-354"
                                                "l-*-353"
                                                "l-*-350"
                                                "l-*-348"
                                                "l-*-346"
                                                "l-*-344"
                                                "l-*-342"
                                                "l-*-340"
                                                "l-*-338"
                                                "l-*-337"
                                                "l-*-336"
                                                "l-*-334"
                                                "l-*-332"
                                                "l-*-331"
                                                "l-*-328"
                                                "l-*-327"
                                                "l-*-325"
                                                "l-*-323"
                                                "l-*-321"
                                                "l-*-319"
                                                "l-*-317"
                                                "l-*-315"
                                                "l-*-313"
                                                "l-*-311"
                                                "l-*-309"
                                                "l-*-306"
                                                "l-*-304"
                                                "l-*-302"
                                                "l-*-300"
                                                "l-*-298"
                                                "l-*-296"
                                                "l-*-294"
                                                "l-*-292"
                                                "l-*-290"
                                                "l-*-288"
                                                "l-*-286"
                                                "l-*-284"
                                                "l-*-282"
                                                "l-*-280"
                                                "l-*-278"
                                                "l-*-276"
                                                "l-*-274"
                                                "l-*-272"
                                                "l-*-270"
                                                "l-*-268"
                                                "l-*-266"
                                                "l-*-264"
                                                "l-*-262"
                                                "l-*-260"
                                                "l-*-258"
                                                "l-*-256"
                                                "l-*-255"
                                                "l-*-254"
                                                "l-*-253"
                                                "l-*-252"
                                                "l-*-250"
                                                "l-*-248"
                                                "l-*-246"
                                                "l-*-243"
                                                "l-*-241"
                                                "l-*-239"
                                                "l-*-237"
                                                "l-*-235"
                                                "l-*-233"
                                                "l-*-231"
                                                "l-*-229"
                                                "l-*-227"
                                                "l-*-225"
                                                "l-*-223"
                                                "l-*-221"
                                                "l-*-219"
                                                "l-*-217"
                                                "l-*-215"
                                                "l-*-213"
                                                "l-*-211"
                                                "l-*-209"))
                                             #(ribcage
                                               (define-structure
                                                 define-expansion-accessors
                                                 define-expansion-constructors)
                                               ((top) (top) (top))
                                               ("l-*-47" "l-*-46" "l-*-45")))
                                            (hygiene guile))))
                                (eq? (id-var-name-4313 p-12577 '(()))
                                     (id-var-name-4313
                                       '#(syntax-object
                                          _
                                          ((top)
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(p n ids)
                                             #((top) (top) (top))
                                             #("l-*-3734"
                                               "l-*-3735"
                                               "l-*-3736"))
                                           #(ribcage
                                             (cvt v-reverse cvt*)
                                             ((top) (top) (top))
                                             ("l-*-3707"
                                              "l-*-3705"
                                              "l-*-3703"))
                                           #(ribcage
                                             #(pattern keys)
                                             #((top) (top))
                                             #("l-*-3701" "l-*-3702"))
                                           #(ribcage
                                             (gen-syntax-case
                                               gen-clause
                                               build-dispatch-call
                                               convert-pattern)
                                             ((top) (top) (top) (top))
                                             ("l-*-3697"
                                              "l-*-3695"
                                              "l-*-3693"
                                              "l-*-3691"))
                                           #(ribcage
                                             (lambda-var-list
                                               gen-var
                                               strip
                                               expand-lambda-case
                                               lambda*-formals
                                               expand-simple-lambda
                                               lambda-formals
                                               ellipsis?
                                               expand-void
                                               eval-local-transformer
                                               expand-local-syntax
                                               expand-body
                                               expand-macro
                                               expand-application
                                               expand-expr
                                               expand
                                               syntax-type
                                               parse-when-list
                                               expand-install-global
                                               expand-top-sequence
                                               expand-sequence
                                               source-wrap
                                               wrap
                                               bound-id-member?
                                               distinct-bound-ids?
                                               valid-bound-ids?
                                               bound-id=?
                                               free-id=?
                                               with-transformer-environment
                                               transformer-environment
                                               resolve-identifier
                                               locally-bound-identifiers
                                               id-var-name
                                               same-marks?
                                               join-marks
                                               join-wraps
                                               smart-append
                                               make-binding-wrap
                                               extend-ribcage!
                                               make-empty-ribcage
                                               new-mark
                                               anti-mark
                                               the-anti-mark
                                               top-marked?
                                               top-wrap
                                               empty-wrap
                                               set-ribcage-labels!
                                               set-ribcage-marks!
                                               set-ribcage-symnames!
                                               ribcage-labels
                                               ribcage-marks
                                               ribcage-symnames
                                               ribcage?
                                               make-ribcage
                                               gen-labels
                                               gen-label
                                               make-rename
                                               rename-marks
                                               rename-new
                                               rename-old
                                               subst-rename?
                                               wrap-subst
                                               wrap-marks
                                               make-wrap
                                               id-sym-name&marks
                                               id-sym-name
                                               id?
                                               nonsymbol-id?
                                               global-extend
                                               lookup
                                               macros-only-env
                                               extend-var-env
                                               extend-env
                                               null-env
                                               binding-value
                                               binding-type
                                               make-binding
                                               arg-check
                                               source-annotation
                                               no-source
                                               set-syntax-object-module!
                                               set-syntax-object-wrap!
                                               set-syntax-object-expression!
                                               syntax-object-module
                                               syntax-object-wrap
                                               syntax-object-expression
                                               syntax-object?
                                               make-syntax-object
                                               build-lexical-var
                                               build-letrec
                                               build-named-let
                                               build-let
                                               build-sequence
                                               build-data
                                               build-primref
                                               build-lambda-case
                                               build-case-lambda
                                               build-simple-lambda
                                               build-global-definition
                                               build-global-assignment
                                               build-global-reference
                                               analyze-variable
                                               build-lexical-assignment
                                               build-lexical-reference
                                               build-dynlet
                                               build-conditional
                                               build-application
                                               build-void
                                               maybe-name-value!
                                               decorate-source
                                               get-global-definition-hook
                                               put-global-definition-hook
                                               session-id
                                               local-eval-hook
                                               top-level-eval-hook
                                               fx<
                                               fx=
                                               fx-
                                               fx+
                                               set-lambda-meta!
                                               lambda-meta
                                               lambda?
                                               make-dynlet
                                               make-letrec
                                               make-let
                                               make-lambda-case
                                               make-lambda
                                               make-sequence
                                               make-application
                                               make-conditional
                                               make-toplevel-define
                                               make-toplevel-set
                                               make-toplevel-ref
                                               make-module-set
                                               make-module-ref
                                               make-lexical-set
                                               make-lexical-ref
                                               make-primitive-ref
                                               make-const
                                               make-void)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("l-*-476"
                                              "l-*-474"
                                              "l-*-472"
                                              "l-*-470"
                                              "l-*-468"
                                              "l-*-466"
                                              "l-*-464"
                                              "l-*-462"
                                              "l-*-460"
                                              "l-*-458"
                                              "l-*-456"
                                              "l-*-454"
                                              "l-*-452"
                                              "l-*-450"
                                              "l-*-448"
                                              "l-*-446"
                                              "l-*-444"
                                              "l-*-442"
                                              "l-*-440"
                                              "l-*-438"
                                              "l-*-436"
                                              "l-*-434"
                                              "l-*-432"
                                              "l-*-430"
                                              "l-*-428"
                                              "l-*-426"
                                              "l-*-424"
                                              "l-*-422"
                                              "l-*-420"
                                              "l-*-418"
                                              "l-*-416"
                                              "l-*-414"
                                              "l-*-412"
                                              "l-*-410"
                                              "l-*-408"
                                              "l-*-406"
                                              "l-*-404"
                                              "l-*-402"
                                              "l-*-400"
                                              "l-*-399"
                                              "l-*-397"
                                              "l-*-394"
                                              "l-*-393"
                                              "l-*-392"
                                              "l-*-390"
                                              "l-*-389"
                                              "l-*-387"
                                              "l-*-385"
                                              "l-*-383"
                                              "l-*-381"
                                              "l-*-379"
                                              "l-*-377"
                                              "l-*-375"
                                              "l-*-373"
                                              "l-*-370"
                                              "l-*-368"
                                              "l-*-367"
                                              "l-*-365"
                                              "l-*-363"
                                              "l-*-361"
                                              "l-*-359"
                                              "l-*-358"
                                              "l-*-357"
                                              "l-*-356"
                                              "l-*-354"
                                              "l-*-353"
                                              "l-*-350"
                                              "l-*-348"
                                              "l-*-346"
                                              "l-*-344"
                                              "l-*-342"
                                              "l-*-340"
                                              "l-*-338"
                                              "l-*-337"
                                              "l-*-336"
                                              "l-*-334"
                                              "l-*-332"
                                              "l-*-331"
                                              "l-*-328"
                                              "l-*-327"
                                              "l-*-325"
                                              "l-*-323"
                                              "l-*-321"
                                              "l-*-319"
                                              "l-*-317"
                                              "l-*-315"
                                              "l-*-313"
                                              "l-*-311"
                                              "l-*-309"
                                              "l-*-306"
                                              "l-*-304"
                                              "l-*-302"
                                              "l-*-300"
                                              "l-*-298"
                                              "l-*-296"
                                              "l-*-294"
                                              "l-*-292"
                                              "l-*-290"
                                              "l-*-288"
                                              "l-*-286"
                                              "l-*-284"
                                              "l-*-282"
                                              "l-*-280"
                                              "l-*-278"
                                              "l-*-276"
                                              "l-*-274"
                                              "l-*-272"
                                              "l-*-270"
                                              "l-*-268"
                                              "l-*-266"
                                              "l-*-264"
                                              "l-*-262"
                                              "l-*-260"
                                              "l-*-258"
                                              "l-*-256"
                                              "l-*-255"
                                              "l-*-254"
                                              "l-*-253"
                                              "l-*-252"
                                              "l-*-250"
                                              "l-*-248"
                                              "l-*-246"
                                              "l-*-243"
                                              "l-*-241"
                                              "l-*-239"
                                              "l-*-237"
                                              "l-*-235"
                                              "l-*-233"
                                              "l-*-231"
                                              "l-*-229"
                                              "l-*-227"
                                              "l-*-225"
                                              "l-*-223"
                                              "l-*-221"
                                              "l-*-219"
                                              "l-*-217"
                                              "l-*-215"
                                              "l-*-213"
                                              "l-*-211"
                                              "l-*-209"))
                                           #(ribcage
                                             (define-structure
                                               define-expansion-accessors
                                               define-expansion-constructors)
                                             ((top) (top) (top))
                                             ("l-*-47" "l-*-46" "l-*-45")))
                                          (hygiene guile))
                                       '(())))
                                #f)
                            (values '_ ids-12579)
                            (values
                              'any
                              (cons (cons p-12577 n-12578) ids-12579))))
                        (let ((tmp-12899 ($sc-dispatch p-12577 '(any any))))
                          (if (if tmp-12899
                                (@apply
                                  (lambda (x-12903 dots-12904)
                                    (if (if (if (vector? dots-12904)
                                              (if (= (vector-length dots-12904)
                                                     4)
                                                (eq? (vector-ref dots-12904 0)
                                                     'syntax-object)
                                                #f)
                                              #f)
                                          (symbol? (vector-ref dots-12904 1))
                                          #f)
                                      (if (eq? (if (if (vector? dots-12904)
                                                     (if (= (vector-length
                                                              dots-12904)
                                                            4)
                                                       (eq? (vector-ref
                                                              dots-12904
                                                              0)
                                                            'syntax-object)
                                                       #f)
                                                     #f)
                                                 (vector-ref dots-12904 1)
                                                 dots-12904)
                                               (if (if (= (vector-length
                                                            '#(syntax-object
                                                               ...
                                                               ((top)
                                                                #(ribcage
                                                                  ()
                                                                  ()
                                                                  ())
                                                                #(ribcage
                                                                  ()
                                                                  ()
                                                                  ())
                                                                #(ribcage
                                                                  #(x)
                                                                  #((top))
                                                                  #("l-*-2266"))
                                                                #(ribcage
                                                                  (lambda-var-list
                                                                    gen-var
                                                                    strip
                                                                    expand-lambda-case
                                                                    lambda*-formals
                                                                    expand-simple-lambda
                                                                    lambda-formals
                                                                    ellipsis?
                                                                    expand-void
                                                                    eval-local-transformer
                                                                    expand-local-syntax
                                                                    expand-body
                                                                    expand-macro
                                                                    expand-application
                                                                    expand-expr
                                                                    expand
                                                                    syntax-type
                                                                    parse-when-list
                                                                    expand-install-global
                                                                    expand-top-sequence
                                                                    expand-sequence
                                                                    source-wrap
                                                                    wrap
                                                                    bound-id-member?
                                                                    distinct-bound-ids?
                                                                    valid-bound-ids?
                                                                    bound-id=?
                                                                    free-id=?
                                                                    with-transformer-environment
                                                                    transformer-environment
                                                                    resolve-identifier
                                                                    locally-bound-identifiers
                                                                    id-var-name
                                                                    same-marks?
                                                                    join-marks
                                                                    join-wraps
                                                                    smart-append
                                                                    make-binding-wrap
                                                                    extend-ribcage!
                                                                    make-empty-ribcage
                                                                    new-mark
                                                                    anti-mark
                                                                    the-anti-mark
                                                                    top-marked?
                                                                    top-wrap
                                                                    empty-wrap
                                                                    set-ribcage-labels!
                                                                    set-ribcage-marks!
                                                                    set-ribcage-symnames!
                                                                    ribcage-labels
                                                                    ribcage-marks
                                                                    ribcage-symnames
                                                                    ribcage?
                                                                    make-ribcage
                                                                    gen-labels
                                                                    gen-label
                                                                    make-rename
                                                                    rename-marks
                                                                    rename-new
                                                                    rename-old
                                                                    subst-rename?
                                                                    wrap-subst
                                                                    wrap-marks
                                                                    make-wrap
                                                                    id-sym-name&marks
                                                                    id-sym-name
                                                                    id?
                                                                    nonsymbol-id?
                                                                    global-extend
                                                                    lookup
                                                                    macros-only-env
                                                                    extend-var-env
                                                                    extend-env
                                                                    null-env
                                                                    binding-value
                                                                    binding-type
                                                                    make-binding
                                                                    arg-check
                                                                    source-annotation
                                                                    no-source
                                                                    set-syntax-object-module!
                                                                    set-syntax-object-wrap!
                                                                    set-syntax-object-expression!
                                                                    syntax-object-module
                                                                    syntax-object-wrap
                                                                    syntax-object-expression
                                                                    syntax-object?
                                                                    make-syntax-object
                                                                    build-lexical-var
                                                                    build-letrec
                                                                    build-named-let
                                                                    build-let
                                                                    build-sequence
                                                                    build-data
                                                                    build-primref
                                                                    build-lambda-case
                                                                    build-case-lambda
                                                                    build-simple-lambda
                                                                    build-global-definition
                                                                    build-global-assignment
                                                                    build-global-reference
                                                                    analyze-variable
                                                                    build-lexical-assignment
                                                                    build-lexical-reference
                                                                    build-dynlet
                                                                    build-conditional
                                                                    build-application
                                                                    build-void
                                                                    maybe-name-value!
                                                                    decorate-source
                                                                    get-global-definition-hook
                                                                    put-global-definition-hook
                                                                    session-id
                                                                    local-eval-hook
                                                                    top-level-eval-hook
                                                                    fx<
                                                                    fx=
                                                                    fx-
                                                                    fx+
                                                                    set-lambda-meta!
                                                                    lambda-meta
                                                                    lambda?
                                                                    make-dynlet
                                                                    make-letrec
                                                                    make-let
                                                                    make-lambda-case
                                                                    make-lambda
                                                                    make-sequence
                                                                    make-application
                                                                    make-conditional
                                                                    make-toplevel-define
                                                                    make-toplevel-set
                                                                    make-toplevel-ref
                                                                    make-module-set
                                                                    make-module-ref
                                                                    make-lexical-set
                                                                    make-lexical-ref
                                                                    make-primitive-ref
                                                                    make-const
                                                                    make-void)
                                                                  ((top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top))
                                                                  ("l-*-476"
                                                                   "l-*-474"
                                                                   "l-*-472"
                                                                   "l-*-470"
                                                                   "l-*-468"
                                                                   "l-*-466"
                                                                   "l-*-464"
                                                                   "l-*-462"
                                                                   "l-*-460"
                                                                   "l-*-458"
                                                                   "l-*-456"
                                                                   "l-*-454"
                                                                   "l-*-452"
                                                                   "l-*-450"
                                                                   "l-*-448"
                                                                   "l-*-446"
                                                                   "l-*-444"
                                                                   "l-*-442"
                                                                   "l-*-440"
                                                                   "l-*-438"
                                                                   "l-*-436"
                                                                   "l-*-434"
                                                                   "l-*-432"
                                                                   "l-*-430"
                                                                   "l-*-428"
                                                                   "l-*-426"
                                                                   "l-*-424"
                                                                   "l-*-422"
                                                                   "l-*-420"
                                                                   "l-*-418"
                                                                   "l-*-416"
                                                                   "l-*-414"
                                                                   "l-*-412"
                                                                   "l-*-410"
                                                                   "l-*-408"
                                                                   "l-*-406"
                                                                   "l-*-404"
                                                                   "l-*-402"
                                                                   "l-*-400"
                                                                   "l-*-399"
                                                                   "l-*-397"
                                                                   "l-*-394"
                                                                   "l-*-393"
                                                                   "l-*-392"
                                                                   "l-*-390"
                                                                   "l-*-389"
                                                                   "l-*-387"
                                                                   "l-*-385"
                                                                   "l-*-383"
                                                                   "l-*-381"
                                                                   "l-*-379"
                                                                   "l-*-377"
                                                                   "l-*-375"
                                                                   "l-*-373"
                                                                   "l-*-370"
                                                                   "l-*-368"
                                                                   "l-*-367"
                                                                   "l-*-365"
                                                                   "l-*-363"
                                                                   "l-*-361"
                                                                   "l-*-359"
                                                                   "l-*-358"
                                                                   "l-*-357"
                                                                   "l-*-356"
                                                                   "l-*-354"
                                                                   "l-*-353"
                                                                   "l-*-350"
                                                                   "l-*-348"
                                                                   "l-*-346"
                                                                   "l-*-344"
                                                                   "l-*-342"
                                                                   "l-*-340"
                                                                   "l-*-338"
                                                                   "l-*-337"
                                                                   "l-*-336"
                                                                   "l-*-334"
                                                                   "l-*-332"
                                                                   "l-*-331"
                                                                   "l-*-328"
                                                                   "l-*-327"
                                                                   "l-*-325"
                                                                   "l-*-323"
                                                                   "l-*-321"
                                                                   "l-*-319"
                                                                   "l-*-317"
                                                                   "l-*-315"
                                                                   "l-*-313"
                                                                   "l-*-311"
                                                                   "l-*-309"
                                                                   "l-*-306"
                                                                   "l-*-304"
                                                                   "l-*-302"
                                                                   "l-*-300"
                                                                   "l-*-298"
                                                                   "l-*-296"
                                                                   "l-*-294"
                                                                   "l-*-292"
                                                                   "l-*-290"
                                                                   "l-*-288"
                                                                   "l-*-286"
                                                                   "l-*-284"
                                                                   "l-*-282"
                                                                   "l-*-280"
                                                                   "l-*-278"
                                                                   "l-*-276"
                                                                   "l-*-274"
                                                                   "l-*-272"
                                                                   "l-*-270"
                                                                   "l-*-268"
                                                                   "l-*-266"
                                                                   "l-*-264"
                                                                   "l-*-262"
                                                                   "l-*-260"
                                                                   "l-*-258"
                                                                   "l-*-256"
                                                                   "l-*-255"
                                                                   "l-*-254"
                                                                   "l-*-253"
                                                                   "l-*-252"
                                                                   "l-*-250"
                                                                   "l-*-248"
                                                                   "l-*-246"
                                                                   "l-*-243"
                                                                   "l-*-241"
                                                                   "l-*-239"
                                                                   "l-*-237"
                                                                   "l-*-235"
                                                                   "l-*-233"
                                                                   "l-*-231"
                                                                   "l-*-229"
                                                                   "l-*-227"
                                                                   "l-*-225"
                                                                   "l-*-223"
                                                                   "l-*-221"
                                                                   "l-*-219"
                                                                   "l-*-217"
                                                                   "l-*-215"
                                                                   "l-*-213"
                                                                   "l-*-211"
                                                                   "l-*-209"))
                                                                #(ribcage
                                                                  (define-structure
                                                                    define-expansion-accessors
                                                                    define-expansion-constructors)
                                                                  ((top)
                                                                   (top)
                                                                   (top))
                                                                  ("l-*-47"
                                                                   "l-*-46"
                                                                   "l-*-45")))
                                                               (hygiene
                                                                 guile)))
                                                          4)
                                                     #t
                                                     #f)
                                                 '...
                                                 '#(syntax-object
                                                    ...
                                                    ((top)
                                                     #(ribcage () () ())
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("l-*-2266"))
                                                     #(ribcage
                                                       (lambda-var-list
                                                         gen-var
                                                         strip
                                                         expand-lambda-case
                                                         lambda*-formals
                                                         expand-simple-lambda
                                                         lambda-formals
                                                         ellipsis?
                                                         expand-void
                                                         eval-local-transformer
                                                         expand-local-syntax
                                                         expand-body
                                                         expand-macro
                                                         expand-application
                                                         expand-expr
                                                         expand
                                                         syntax-type
                                                         parse-when-list
                                                         expand-install-global
                                                         expand-top-sequence
                                                         expand-sequence
                                                         source-wrap
                                                         wrap
                                                         bound-id-member?
                                                         distinct-bound-ids?
                                                         valid-bound-ids?
                                                         bound-id=?
                                                         free-id=?
                                                         with-transformer-environment
                                                         transformer-environment
                                                         resolve-identifier
                                                         locally-bound-identifiers
                                                         id-var-name
                                                         same-marks?
                                                         join-marks
                                                         join-wraps
                                                         smart-append
                                                         make-binding-wrap
                                                         extend-ribcage!
                                                         make-empty-ribcage
                                                         new-mark
                                                         anti-mark
                                                         the-anti-mark
                                                         top-marked?
                                                         top-wrap
                                                         empty-wrap
                                                         set-ribcage-labels!
                                                         set-ribcage-marks!
                                                         set-ribcage-symnames!
                                                         ribcage-labels
                                                         ribcage-marks
                                                         ribcage-symnames
                                                         ribcage?
                                                         make-ribcage
                                                         gen-labels
                                                         gen-label
                                                         make-rename
                                                         rename-marks
                                                         rename-new
                                                         rename-old
                                                         subst-rename?
                                                         wrap-subst
                                                         wrap-marks
                                                         make-wrap
                                                         id-sym-name&marks
                                                         id-sym-name
                                                         id?
                                                         nonsymbol-id?
                                                         global-extend
                                                         lookup
                                                         macros-only-env
                                                         extend-var-env
                                                         extend-env
                                                         null-env
                                                         binding-value
                                                         binding-type
                                                         make-binding
                                                         arg-check
                                                         source-annotation
                                                         no-source
                                                         set-syntax-object-module!
                                                         set-syntax-object-wrap!
                                                         set-syntax-object-expression!
                                                         syntax-object-module
                                                         syntax-object-wrap
                                                         syntax-object-expression
                                                         syntax-object?
                                                         make-syntax-object
                                                         build-lexical-var
                                                         build-letrec
                                                         build-named-let
                                                         build-let
                                                         build-sequence
                                                         build-data
                                                         build-primref
                                                         build-lambda-case
                                                         build-case-lambda
                                                         build-simple-lambda
                                                         build-global-definition
                                                         build-global-assignment
                                                         build-global-reference
                                                         analyze-variable
                                                         build-lexical-assignment
                                                         build-lexical-reference
                                                         build-dynlet
                                                         build-conditional
                                                         build-application
                                                         build-void
                                                         maybe-name-value!
                                                         decorate-source
                                                         get-global-definition-hook
                                                         put-global-definition-hook
                                                         session-id
                                                         local-eval-hook
                                                         top-level-eval-hook
                                                         fx<
                                                         fx=
                                                         fx-
                                                         fx+
                                                         set-lambda-meta!
                                                         lambda-meta
                                                         lambda?
                                                         make-dynlet
                                                         make-letrec
                                                         make-let
                                                         make-lambda-case
                                                         make-lambda
                                                         make-sequence
                                                         make-application
                                                         make-conditional
                                                         make-toplevel-define
                                                         make-toplevel-set
                                                         make-toplevel-ref
                                                         make-module-set
                                                         make-module-ref
                                                         make-lexical-set
                                                         make-lexical-ref
                                                         make-primitive-ref
                                                         make-const
                                                         make-void)
                                                       ((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                       ("l-*-476"
                                                        "l-*-474"
                                                        "l-*-472"
                                                        "l-*-470"
                                                        "l-*-468"
                                                        "l-*-466"
                                                        "l-*-464"
                                                        "l-*-462"
                                                        "l-*-460"
                                                        "l-*-458"
                                                        "l-*-456"
                                                        "l-*-454"
                                                        "l-*-452"
                                                        "l-*-450"
                                                        "l-*-448"
                                                        "l-*-446"
                                                        "l-*-444"
                                                        "l-*-442"
                                                        "l-*-440"
                                                        "l-*-438"
                                                        "l-*-436"
                                                        "l-*-434"
                                                        "l-*-432"
                                                        "l-*-430"
                                                        "l-*-428"
                                                        "l-*-426"
                                                        "l-*-424"
                                                        "l-*-422"
                                                        "l-*-420"
                                                        "l-*-418"
                                                        "l-*-416"
                                                        "l-*-414"
                                                        "l-*-412"
                                                        "l-*-410"
                                                        "l-*-408"
                                                        "l-*-406"
                                                        "l-*-404"
                                                        "l-*-402"
                                                        "l-*-400"
                                                        "l-*-399"
                                                        "l-*-397"
                                                        "l-*-394"
                                                        "l-*-393"
                                                        "l-*-392"
                                                        "l-*-390"
                                                        "l-*-389"
                                                        "l-*-387"
                                                        "l-*-385"
                                                        "l-*-383"
                                                        "l-*-381"
                                                        "l-*-379"
                                                        "l-*-377"
                                                        "l-*-375"
                                                        "l-*-373"
                                                        "l-*-370"
                                                        "l-*-368"
                                                        "l-*-367"
                                                        "l-*-365"
                                                        "l-*-363"
                                                        "l-*-361"
                                                        "l-*-359"
                                                        "l-*-358"
                                                        "l-*-357"
                                                        "l-*-356"
                                                        "l-*-354"
                                                        "l-*-353"
                                                        "l-*-350"
                                                        "l-*-348"
                                                        "l-*-346"
                                                        "l-*-344"
                                                        "l-*-342"
                                                        "l-*-340"
                                                        "l-*-338"
                                                        "l-*-337"
                                                        "l-*-336"
                                                        "l-*-334"
                                                        "l-*-332"
                                                        "l-*-331"
                                                        "l-*-328"
                                                        "l-*-327"
                                                        "l-*-325"
                                                        "l-*-323"
                                                        "l-*-321"
                                                        "l-*-319"
                                                        "l-*-317"
                                                        "l-*-315"
                                                        "l-*-313"
                                                        "l-*-311"
                                                        "l-*-309"
                                                        "l-*-306"
                                                        "l-*-304"
                                                        "l-*-302"
                                                        "l-*-300"
                                                        "l-*-298"
                                                        "l-*-296"
                                                        "l-*-294"
                                                        "l-*-292"
                                                        "l-*-290"
                                                        "l-*-288"
                                                        "l-*-286"
                                                        "l-*-284"
                                                        "l-*-282"
                                                        "l-*-280"
                                                        "l-*-278"
                                                        "l-*-276"
                                                        "l-*-274"
                                                        "l-*-272"
                                                        "l-*-270"
                                                        "l-*-268"
                                                        "l-*-266"
                                                        "l-*-264"
                                                        "l-*-262"
                                                        "l-*-260"
                                                        "l-*-258"
                                                        "l-*-256"
                                                        "l-*-255"
                                                        "l-*-254"
                                                        "l-*-253"
                                                        "l-*-252"
                                                        "l-*-250"
                                                        "l-*-248"
                                                        "l-*-246"
                                                        "l-*-243"
                                                        "l-*-241"
                                                        "l-*-239"
                                                        "l-*-237"
                                                        "l-*-235"
                                                        "l-*-233"
                                                        "l-*-231"
                                                        "l-*-229"
                                                        "l-*-227"
                                                        "l-*-225"
                                                        "l-*-223"
                                                        "l-*-221"
                                                        "l-*-219"
                                                        "l-*-217"
                                                        "l-*-215"
                                                        "l-*-213"
                                                        "l-*-211"
                                                        "l-*-209"))
                                                     #(ribcage
                                                       (define-structure
                                                         define-expansion-accessors
                                                         define-expansion-constructors)
                                                       ((top) (top) (top))
                                                       ("l-*-47"
                                                        "l-*-46"
                                                        "l-*-45")))
                                                    (hygiene guile))))
                                        (eq? (id-var-name-4313
                                               dots-12904
                                               '(()))
                                             (id-var-name-4313
                                               '#(syntax-object
                                                  ...
                                                  ((top)
                                                   #(ribcage () () ())
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("l-*-2266"))
                                                   #(ribcage
                                                     (lambda-var-list
                                                       gen-var
                                                       strip
                                                       expand-lambda-case
                                                       lambda*-formals
                                                       expand-simple-lambda
                                                       lambda-formals
                                                       ellipsis?
                                                       expand-void
                                                       eval-local-transformer
                                                       expand-local-syntax
                                                       expand-body
                                                       expand-macro
                                                       expand-application
                                                       expand-expr
                                                       expand
                                                       syntax-type
                                                       parse-when-list
                                                       expand-install-global
                                                       expand-top-sequence
                                                       expand-sequence
                                                       source-wrap
                                                       wrap
                                                       bound-id-member?
                                                       distinct-bound-ids?
                                                       valid-bound-ids?
                                                       bound-id=?
                                                       free-id=?
                                                       with-transformer-environment
                                                       transformer-environment
                                                       resolve-identifier
                                                       locally-bound-identifiers
                                                       id-var-name
                                                       same-marks?
                                                       join-marks
                                                       join-wraps
                                                       smart-append
                                                       make-binding-wrap
                                                       extend-ribcage!
                                                       make-empty-ribcage
                                                       new-mark
                                                       anti-mark
                                                       the-anti-mark
                                                       top-marked?
                                                       top-wrap
                                                       empty-wrap
                                                       set-ribcage-labels!
                                                       set-ribcage-marks!
                                                       set-ribcage-symnames!
                                                       ribcage-labels
                                                       ribcage-marks
                                                       ribcage-symnames
                                                       ribcage?
                                                       make-ribcage
                                                       gen-labels
                                                       gen-label
                                                       make-rename
                                                       rename-marks
                                                       rename-new
                                                       rename-old
                                                       subst-rename?
                                                       wrap-subst
                                                       wrap-marks
                                                       make-wrap
                                                       id-sym-name&marks
                                                       id-sym-name
                                                       id?
                                                       nonsymbol-id?
                                                       global-extend
                                                       lookup
                                                       macros-only-env
                                                       extend-var-env
                                                       extend-env
                                                       null-env
                                                       binding-value
                                                       binding-type
                                                       make-binding
                                                       arg-check
                                                       source-annotation
                                                       no-source
                                                       set-syntax-object-module!
                                                       set-syntax-object-wrap!
                                                       set-syntax-object-expression!
                                                       syntax-object-module
                                                       syntax-object-wrap
                                                       syntax-object-expression
                                                       syntax-object?
                                                       make-syntax-object
                                                       build-lexical-var
                                                       build-letrec
                                                       build-named-let
                                                       build-let
                                                       build-sequence
                                                       build-data
                                                       build-primref
                                                       build-lambda-case
                                                       build-case-lambda
                                                       build-simple-lambda
                                                       build-global-definition
                                                       build-global-assignment
                                                       build-global-reference
                                                       analyze-variable
                                                       build-lexical-assignment
                                                       build-lexical-reference
                                                       build-dynlet
                                                       build-conditional
                                                       build-application
                                                       build-void
                                                       maybe-name-value!
                                                       decorate-source
                                                       get-global-definition-hook
                                                       put-global-definition-hook
                                                       session-id
                                                       local-eval-hook
                                                       top-level-eval-hook
                                                       fx<
                                                       fx=
                                                       fx-
                                                       fx+
                                                       set-lambda-meta!
                                                       lambda-meta
                                                       lambda?
                                                       make-dynlet
                                                       make-letrec
                                                       make-let
                                                       make-lambda-case
                                                       make-lambda
                                                       make-sequence
                                                       make-application
                                                       make-conditional
                                                       make-toplevel-define
                                                       make-toplevel-set
                                                       make-toplevel-ref
                                                       make-module-set
                                                       make-module-ref
                                                       make-lexical-set
                                                       make-lexical-ref
                                                       make-primitive-ref
                                                       make-const
                                                       make-void)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("l-*-476"
                                                      "l-*-474"
                                                      "l-*-472"
                                                      "l-*-470"
                                                      "l-*-468"
                                                      "l-*-466"
                                                      "l-*-464"
                                                      "l-*-462"
                                                      "l-*-460"
                                                      "l-*-458"
                                                      "l-*-456"
                                                      "l-*-454"
                                                      "l-*-452"
                                                      "l-*-450"
                                                      "l-*-448"
                                                      "l-*-446"
                                                      "l-*-444"
                                                      "l-*-442"
                                                      "l-*-440"
                                                      "l-*-438"
                                                      "l-*-436"
                                                      "l-*-434"
                                                      "l-*-432"
                                                      "l-*-430"
                                                      "l-*-428"
                                                      "l-*-426"
                                                      "l-*-424"
                                                      "l-*-422"
                                                      "l-*-420"
                                                      "l-*-418"
                                                      "l-*-416"
                                                      "l-*-414"
                                                      "l-*-412"
                                                      "l-*-410"
                                                      "l-*-408"
                                                      "l-*-406"
                                                      "l-*-404"
                                                      "l-*-402"
                                                      "l-*-400"
                                                      "l-*-399"
                                                      "l-*-397"
                                                      "l-*-394"
                                                      "l-*-393"
                                                      "l-*-392"
                                                      "l-*-390"
                                                      "l-*-389"
                                                      "l-*-387"
                                                      "l-*-385"
                                                      "l-*-383"
                                                      "l-*-381"
                                                      "l-*-379"
                                                      "l-*-377"
                                                      "l-*-375"
                                                      "l-*-373"
                                                      "l-*-370"
                                                      "l-*-368"
                                                      "l-*-367"
                                                      "l-*-365"
                                                      "l-*-363"
                                                      "l-*-361"
                                                      "l-*-359"
                                                      "l-*-358"
                                                      "l-*-357"
                                                      "l-*-356"
                                                      "l-*-354"
                                                      "l-*-353"
                                                      "l-*-350"
                                                      "l-*-348"
                                                      "l-*-346"
                                                      "l-*-344"
                                                      "l-*-342"
                                                      "l-*-340"
                                                      "l-*-338"
                                                      "l-*-337"
                                                      "l-*-336"
                                                      "l-*-334"
                                                      "l-*-332"
                                                      "l-*-331"
                                                      "l-*-328"
                                                      "l-*-327"
                                                      "l-*-325"
                                                      "l-*-323"
                                                      "l-*-321"
                                                      "l-*-319"
                                                      "l-*-317"
                                                      "l-*-315"
                                                      "l-*-313"
                                                      "l-*-311"
                                                      "l-*-309"
                                                      "l-*-306"
                                                      "l-*-304"
                                                      "l-*-302"
                                                      "l-*-300"
                                                      "l-*-298"
                                                      "l-*-296"
                                                      "l-*-294"
                                                      "l-*-292"
                                                      "l-*-290"
                                                      "l-*-288"
                                                      "l-*-286"
                                                      "l-*-284"
                                                      "l-*-282"
                                                      "l-*-280"
                                                      "l-*-278"
                                                      "l-*-276"
                                                      "l-*-274"
                                                      "l-*-272"
                                                      "l-*-270"
                                                      "l-*-268"
                                                      "l-*-266"
                                                      "l-*-264"
                                                      "l-*-262"
                                                      "l-*-260"
                                                      "l-*-258"
                                                      "l-*-256"
                                                      "l-*-255"
                                                      "l-*-254"
                                                      "l-*-253"
                                                      "l-*-252"
                                                      "l-*-250"
                                                      "l-*-248"
                                                      "l-*-246"
                                                      "l-*-243"
                                                      "l-*-241"
                                                      "l-*-239"
                                                      "l-*-237"
                                                      "l-*-235"
                                                      "l-*-233"
                                                      "l-*-231"
                                                      "l-*-229"
                                                      "l-*-227"
                                                      "l-*-225"
                                                      "l-*-223"
                                                      "l-*-221"
                                                      "l-*-219"
                                                      "l-*-217"
                                                      "l-*-215"
                                                      "l-*-213"
                                                      "l-*-211"
                                                      "l-*-209"))
                                                   #(ribcage
                                                     (define-structure
                                                       define-expansion-accessors
                                                       define-expansion-constructors)
                                                     ((top) (top) (top))
                                                     ("l-*-47"
                                                      "l-*-46"
                                                      "l-*-45")))
                                                  (hygiene guile))
                                               '(())))
                                        #f)
                                      #f))
                                  tmp-12899)
                                #f)
                            (@apply
                              (lambda (x-13004 dots-13005)
                                (call-with-values
                                  (lambda ()
                                    (cvt-12574
                                      x-13004
                                      (#{1+}# n-12578)
                                      ids-12579))
                                  (lambda (p-13006 ids-13007)
                                    (values
                                      (if (eq? p-13006 'any)
                                        'each-any
                                        (vector 'each p-13006))
                                      ids-13007))))
                              tmp-12899)
                            (let ((tmp-13008
                                    ($sc-dispatch p-12577 '(any any . any))))
                              (if (if tmp-13008
                                    (@apply
                                      (lambda (x-13012 dots-13013 ys-13014)
                                        (if (if (if (vector? dots-13013)
                                                  (if (= (vector-length
                                                           dots-13013)
                                                         4)
                                                    (eq? (vector-ref
                                                           dots-13013
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (symbol?
                                                (vector-ref dots-13013 1))
                                              #f)
                                          (if (eq? (if (if (vector? dots-13013)
                                                         (if (= (vector-length
                                                                  dots-13013)
                                                                4)
                                                           (eq? (vector-ref
                                                                  dots-13013
                                                                  0)
                                                                'syntax-object)
                                                           #f)
                                                         #f)
                                                     (vector-ref dots-13013 1)
                                                     dots-13013)
                                                   (if (if (= (vector-length
                                                                '#(syntax-object
                                                                   ...
                                                                   ((top)
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(x)
                                                                      #((top))
                                                                      #("l-*-2266"))
                                                                    #(ribcage
                                                                      (lambda-var-list
                                                                        gen-var
                                                                        strip
                                                                        expand-lambda-case
                                                                        lambda*-formals
                                                                        expand-simple-lambda
                                                                        lambda-formals
                                                                        ellipsis?
                                                                        expand-void
                                                                        eval-local-transformer
                                                                        expand-local-syntax
                                                                        expand-body
                                                                        expand-macro
                                                                        expand-application
                                                                        expand-expr
                                                                        expand
                                                                        syntax-type
                                                                        parse-when-list
                                                                        expand-install-global
                                                                        expand-top-sequence
                                                                        expand-sequence
                                                                        source-wrap
                                                                        wrap
                                                                        bound-id-member?
                                                                        distinct-bound-ids?
                                                                        valid-bound-ids?
                                                                        bound-id=?
                                                                        free-id=?
                                                                        with-transformer-environment
                                                                        transformer-environment
                                                                        resolve-identifier
                                                                        locally-bound-identifiers
                                                                        id-var-name
                                                                        same-marks?
                                                                        join-marks
                                                                        join-wraps
                                                                        smart-append
                                                                        make-binding-wrap
                                                                        extend-ribcage!
                                                                        make-empty-ribcage
                                                                        new-mark
                                                                        anti-mark
                                                                        the-anti-mark
                                                                        top-marked?
                                                                        top-wrap
                                                                        empty-wrap
                                                                        set-ribcage-labels!
                                                                        set-ribcage-marks!
                                                                        set-ribcage-symnames!
                                                                        ribcage-labels
                                                                        ribcage-marks
                                                                        ribcage-symnames
                                                                        ribcage?
                                                                        make-ribcage
                                                                        gen-labels
                                                                        gen-label
                                                                        make-rename
                                                                        rename-marks
                                                                        rename-new
                                                                        rename-old
                                                                        subst-rename?
                                                                        wrap-subst
                                                                        wrap-marks
                                                                        make-wrap
                                                                        id-sym-name&marks
                                                                        id-sym-name
                                                                        id?
                                                                        nonsymbol-id?
                                                                        global-extend
                                                                        lookup
                                                                        macros-only-env
                                                                        extend-var-env
                                                                        extend-env
                                                                        null-env
                                                                        binding-value
                                                                        binding-type
                                                                        make-binding
                                                                        arg-check
                                                                        source-annotation
                                                                        no-source
                                                                        set-syntax-object-module!
                                                                        set-syntax-object-wrap!
                                                                        set-syntax-object-expression!
                                                                        syntax-object-module
                                                                        syntax-object-wrap
                                                                        syntax-object-expression
                                                                        syntax-object?
                                                                        make-syntax-object
                                                                        build-lexical-var
                                                                        build-letrec
                                                                        build-named-let
                                                                        build-let
                                                                        build-sequence
                                                                        build-data
                                                                        build-primref
                                                                        build-lambda-case
                                                                        build-case-lambda
                                                                        build-simple-lambda
                                                                        build-global-definition
                                                                        build-global-assignment
                                                                        build-global-reference
                                                                        analyze-variable
                                                                        build-lexical-assignment
                                                                        build-lexical-reference
                                                                        build-dynlet
                                                                        build-conditional
                                                                        build-application
                                                                        build-void
                                                                        maybe-name-value!
                                                                        decorate-source
                                                                        get-global-definition-hook
                                                                        put-global-definition-hook
                                                                        session-id
                                                                        local-eval-hook
                                                                        top-level-eval-hook
                                                                        fx<
                                                                        fx=
                                                                        fx-
                                                                        fx+
                                                                        set-lambda-meta!
                                                                        lambda-meta
                                                                        lambda?
                                                                        make-dynlet
                                                                        make-letrec
                                                                        make-let
                                                                        make-lambda-case
                                                                        make-lambda
                                                                        make-sequence
                                                                        make-application
                                                                        make-conditional
                                                                        make-toplevel-define
                                                                        make-toplevel-set
                                                                        make-toplevel-ref
                                                                        make-module-set
                                                                        make-module-ref
                                                                        make-lexical-set
                                                                        make-lexical-ref
                                                                        make-primitive-ref
                                                                        make-const
                                                                        make-void)
                                                                      ((top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                      ("l-*-476"
                                                                       "l-*-474"
                                                                       "l-*-472"
                                                                       "l-*-470"
                                                                       "l-*-468"
                                                                       "l-*-466"
                                                                       "l-*-464"
                                                                       "l-*-462"
                                                                       "l-*-460"
                                                                       "l-*-458"
                                                                       "l-*-456"
                                                                       "l-*-454"
                                                                       "l-*-452"
                                                                       "l-*-450"
                                                                       "l-*-448"
                                                                       "l-*-446"
                                                                       "l-*-444"
                                                                       "l-*-442"
                                                                       "l-*-440"
                                                                       "l-*-438"
                                                                       "l-*-436"
                                                                       "l-*-434"
                                                                       "l-*-432"
                                                                       "l-*-430"
                                                                       "l-*-428"
                                                                       "l-*-426"
                                                                       "l-*-424"
                                                                       "l-*-422"
                                                                       "l-*-420"
                                                                       "l-*-418"
                                                                       "l-*-416"
                                                                       "l-*-414"
                                                                       "l-*-412"
                                                                       "l-*-410"
                                                                       "l-*-408"
                                                                       "l-*-406"
                                                                       "l-*-404"
                                                                       "l-*-402"
                                                                       "l-*-400"
                                                                       "l-*-399"
                                                                       "l-*-397"
                                                                       "l-*-394"
                                                                       "l-*-393"
                                                                       "l-*-392"
                                                                       "l-*-390"
                                                                       "l-*-389"
                                                                       "l-*-387"
                                                                       "l-*-385"
                                                                       "l-*-383"
                                                                       "l-*-381"
                                                                       "l-*-379"
                                                                       "l-*-377"
                                                                       "l-*-375"
                                                                       "l-*-373"
                                                                       "l-*-370"
                                                                       "l-*-368"
                                                                       "l-*-367"
                                                                       "l-*-365"
                                                                       "l-*-363"
                                                                       "l-*-361"
                                                                       "l-*-359"
                                                                       "l-*-358"
                                                                       "l-*-357"
                                                                       "l-*-356"
                                                                       "l-*-354"
                                                                       "l-*-353"
                                                                       "l-*-350"
                                                                       "l-*-348"
                                                                       "l-*-346"
                                                                       "l-*-344"
                                                                       "l-*-342"
                                                                       "l-*-340"
                                                                       "l-*-338"
                                                                       "l-*-337"
                                                                       "l-*-336"
                                                                       "l-*-334"
                                                                       "l-*-332"
                                                                       "l-*-331"
                                                                       "l-*-328"
                                                                       "l-*-327"
                                                                       "l-*-325"
                                                                       "l-*-323"
                                                                       "l-*-321"
                                                                       "l-*-319"
                                                                       "l-*-317"
                                                                       "l-*-315"
                                                                       "l-*-313"
                                                                       "l-*-311"
                                                                       "l-*-309"
                                                                       "l-*-306"
                                                                       "l-*-304"
                                                                       "l-*-302"
                                                                       "l-*-300"
                                                                       "l-*-298"
                                                                       "l-*-296"
                                                                       "l-*-294"
                                                                       "l-*-292"
                                                                       "l-*-290"
                                                                       "l-*-288"
                                                                       "l-*-286"
                                                                       "l-*-284"
                                                                       "l-*-282"
                                                                       "l-*-280"
                                                                       "l-*-278"
                                                                       "l-*-276"
                                                                       "l-*-274"
                                                                       "l-*-272"
                                                                       "l-*-270"
                                                                       "l-*-268"
                                                                       "l-*-266"
                                                                       "l-*-264"
                                                                       "l-*-262"
                                                                       "l-*-260"
                                                                       "l-*-258"
                                                                       "l-*-256"
                                                                       "l-*-255"
                                                                       "l-*-254"
                                                                       "l-*-253"
                                                                       "l-*-252"
                                                                       "l-*-250"
                                                                       "l-*-248"
                                                                       "l-*-246"
                                                                       "l-*-243"
                                                                       "l-*-241"
                                                                       "l-*-239"
                                                                       "l-*-237"
                                                                       "l-*-235"
                                                                       "l-*-233"
                                                                       "l-*-231"
                                                                       "l-*-229"
                                                                       "l-*-227"
                                                                       "l-*-225"
                                                                       "l-*-223"
                                                                       "l-*-221"
                                                                       "l-*-219"
                                                                       "l-*-217"
                                                                       "l-*-215"
                                                                       "l-*-213"
                                                                       "l-*-211"
                                                                       "l-*-209"))
                                                                    #(ribcage
                                                                      (define-structure
                                                                        define-expansion-accessors
                                                                        define-expansion-constructors)
                                                                      ((top)
                                                                       (top)
                                                                       (top))
                                                                      ("l-*-47"
                                                                       "l-*-46"
                                                                       "l-*-45")))
                                                                   (hygiene
                                                                     guile)))
                                                              4)
                                                         #t
                                                         #f)
                                                     '...
                                                     '#(syntax-object
                                                        ...
                                                        ((top)
                                                         #(ribcage () () ())
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("l-*-2266"))
                                                         #(ribcage
                                                           (lambda-var-list
                                                             gen-var
                                                             strip
                                                             expand-lambda-case
                                                             lambda*-formals
                                                             expand-simple-lambda
                                                             lambda-formals
                                                             ellipsis?
                                                             expand-void
                                                             eval-local-transformer
                                                             expand-local-syntax
                                                             expand-body
                                                             expand-macro
                                                             expand-application
                                                             expand-expr
                                                             expand
                                                             syntax-type
                                                             parse-when-list
                                                             expand-install-global
                                                             expand-top-sequence
                                                             expand-sequence
                                                             source-wrap
                                                             wrap
                                                             bound-id-member?
                                                             distinct-bound-ids?
                                                             valid-bound-ids?
                                                             bound-id=?
                                                             free-id=?
                                                             with-transformer-environment
                                                             transformer-environment
                                                             resolve-identifier
                                                             locally-bound-identifiers
                                                             id-var-name
                                                             same-marks?
                                                             join-marks
                                                             join-wraps
                                                             smart-append
                                                             make-binding-wrap
                                                             extend-ribcage!
                                                             make-empty-ribcage
                                                             new-mark
                                                             anti-mark
                                                             the-anti-mark
                                                             top-marked?
                                                             top-wrap
                                                             empty-wrap
                                                             set-ribcage-labels!
                                                             set-ribcage-marks!
                                                             set-ribcage-symnames!
                                                             ribcage-labels
                                                             ribcage-marks
                                                             ribcage-symnames
                                                             ribcage?
                                                             make-ribcage
                                                             gen-labels
                                                             gen-label
                                                             make-rename
                                                             rename-marks
                                                             rename-new
                                                             rename-old
                                                             subst-rename?
                                                             wrap-subst
                                                             wrap-marks
                                                             make-wrap
                                                             id-sym-name&marks
                                                             id-sym-name
                                                             id?
                                                             nonsymbol-id?
                                                             global-extend
                                                             lookup
                                                             macros-only-env
                                                             extend-var-env
                                                             extend-env
                                                             null-env
                                                             binding-value
                                                             binding-type
                                                             make-binding
                                                             arg-check
                                                             source-annotation
                                                             no-source
                                                             set-syntax-object-module!
                                                             set-syntax-object-wrap!
                                                             set-syntax-object-expression!
                                                             syntax-object-module
                                                             syntax-object-wrap
                                                             syntax-object-expression
                                                             syntax-object?
                                                             make-syntax-object
                                                             build-lexical-var
                                                             build-letrec
                                                             build-named-let
                                                             build-let
                                                             build-sequence
                                                             build-data
                                                             build-primref
                                                             build-lambda-case
                                                             build-case-lambda
                                                             build-simple-lambda
                                                             build-global-definition
                                                             build-global-assignment
                                                             build-global-reference
                                                             analyze-variable
                                                             build-lexical-assignment
                                                             build-lexical-reference
                                                             build-dynlet
                                                             build-conditional
                                                             build-application
                                                             build-void
                                                             maybe-name-value!
                                                             decorate-source
                                                             get-global-definition-hook
                                                             put-global-definition-hook
                                                             session-id
                                                             local-eval-hook
                                                             top-level-eval-hook
                                                             fx<
                                                             fx=
                                                             fx-
                                                             fx+
                                                             set-lambda-meta!
                                                             lambda-meta
                                                             lambda?
                                                             make-dynlet
                                                             make-letrec
                                                             make-let
                                                             make-lambda-case
                                                             make-lambda
                                                             make-sequence
                                                             make-application
                                                             make-conditional
                                                             make-toplevel-define
                                                             make-toplevel-set
                                                             make-toplevel-ref
                                                             make-module-set
                                                             make-module-ref
                                                             make-lexical-set
                                                             make-lexical-ref
                                                             make-primitive-ref
                                                             make-const
                                                             make-void)
                                                           ((top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top))
                                                           ("l-*-476"
                                                            "l-*-474"
                                                            "l-*-472"
                                                            "l-*-470"
                                                            "l-*-468"
                                                            "l-*-466"
                                                            "l-*-464"
                                                            "l-*-462"
                                                            "l-*-460"
                                                            "l-*-458"
                                                            "l-*-456"
                                                            "l-*-454"
                                                            "l-*-452"
                                                            "l-*-450"
                                                            "l-*-448"
                                                            "l-*-446"
                                                            "l-*-444"
                                                            "l-*-442"
                                                            "l-*-440"
                                                            "l-*-438"
                                                            "l-*-436"
                                                            "l-*-434"
                                                            "l-*-432"
                                                            "l-*-430"
                                                            "l-*-428"
                                                            "l-*-426"
                                                            "l-*-424"
                                                            "l-*-422"
                                                            "l-*-420"
                                                            "l-*-418"
                                                            "l-*-416"
                                                            "l-*-414"
                                                            "l-*-412"
                                                            "l-*-410"
                                                            "l-*-408"
                                                            "l-*-406"
                                                            "l-*-404"
                                                            "l-*-402"
                                                            "l-*-400"
                                                            "l-*-399"
                                                            "l-*-397"
                                                            "l-*-394"
                                                            "l-*-393"
                                                            "l-*-392"
                                                            "l-*-390"
                                                            "l-*-389"
                                                            "l-*-387"
                                                            "l-*-385"
                                                            "l-*-383"
                                                            "l-*-381"
                                                            "l-*-379"
                                                            "l-*-377"
                                                            "l-*-375"
                                                            "l-*-373"
                                                            "l-*-370"
                                                            "l-*-368"
                                                            "l-*-367"
                                                            "l-*-365"
                                                            "l-*-363"
                                                            "l-*-361"
                                                            "l-*-359"
                                                            "l-*-358"
                                                            "l-*-357"
                                                            "l-*-356"
                                                            "l-*-354"
                                                            "l-*-353"
                                                            "l-*-350"
                                                            "l-*-348"
                                                            "l-*-346"
                                                            "l-*-344"
                                                            "l-*-342"
                                                            "l-*-340"
                                                            "l-*-338"
                                                            "l-*-337"
                                                            "l-*-336"
                                                            "l-*-334"
                                                            "l-*-332"
                                                            "l-*-331"
                                                            "l-*-328"
                                                            "l-*-327"
                                                            "l-*-325"
                                                            "l-*-323"
                                                            "l-*-321"
                                                            "l-*-319"
                                                            "l-*-317"
                                                            "l-*-315"
                                                            "l-*-313"
                                                            "l-*-311"
                                                            "l-*-309"
                                                            "l-*-306"
                                                            "l-*-304"
                                                            "l-*-302"
                                                            "l-*-300"
                                                            "l-*-298"
                                                            "l-*-296"
                                                            "l-*-294"
                                                            "l-*-292"
                                                            "l-*-290"
                                                            "l-*-288"
                                                            "l-*-286"
                                                            "l-*-284"
                                                            "l-*-282"
                                                            "l-*-280"
                                                            "l-*-278"
                                                            "l-*-276"
                                                            "l-*-274"
                                                            "l-*-272"
                                                            "l-*-270"
                                                            "l-*-268"
                                                            "l-*-266"
                                                            "l-*-264"
                                                            "l-*-262"
                                                            "l-*-260"
                                                            "l-*-258"
                                                            "l-*-256"
                                                            "l-*-255"
                                                            "l-*-254"
                                                            "l-*-253"
                                                            "l-*-252"
                                                            "l-*-250"
                                                            "l-*-248"
                                                            "l-*-246"
                                                            "l-*-243"
                                                            "l-*-241"
                                                            "l-*-239"
                                                            "l-*-237"
                                                            "l-*-235"
                                                            "l-*-233"
                                                            "l-*-231"
                                                            "l-*-229"
                                                            "l-*-227"
                                                            "l-*-225"
                                                            "l-*-223"
                                                            "l-*-221"
                                                            "l-*-219"
                                                            "l-*-217"
                                                            "l-*-215"
                                                            "l-*-213"
                                                            "l-*-211"
                                                            "l-*-209"))
                                                         #(ribcage
                                                           (define-structure
                                                             define-expansion-accessors
                                                             define-expansion-constructors)
                                                           ((top) (top) (top))
                                                           ("l-*-47"
                                                            "l-*-46"
                                                            "l-*-45")))
                                                        (hygiene guile))))
                                            (eq? (id-var-name-4313
                                                   dots-13013
                                                   '(()))
                                                 (id-var-name-4313
                                                   '#(syntax-object
                                                      ...
                                                      ((top)
                                                       #(ribcage () () ())
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("l-*-2266"))
                                                       #(ribcage
                                                         (lambda-var-list
                                                           gen-var
                                                           strip
                                                           expand-lambda-case
                                                           lambda*-formals
                                                           expand-simple-lambda
                                                           lambda-formals
                                                           ellipsis?
                                                           expand-void
                                                           eval-local-transformer
                                                           expand-local-syntax
                                                           expand-body
                                                           expand-macro
                                                           expand-application
                                                           expand-expr
                                                           expand
                                                           syntax-type
                                                           parse-when-list
                                                           expand-install-global
                                                           expand-top-sequence
                                                           expand-sequence
                                                           source-wrap
                                                           wrap
                                                           bound-id-member?
                                                           distinct-bound-ids?
                                                           valid-bound-ids?
                                                           bound-id=?
                                                           free-id=?
                                                           with-transformer-environment
                                                           transformer-environment
                                                           resolve-identifier
                                                           locally-bound-identifiers
                                                           id-var-name
                                                           same-marks?
                                                           join-marks
                                                           join-wraps
                                                           smart-append
                                                           make-binding-wrap
                                                           extend-ribcage!
                                                           make-empty-ribcage
                                                           new-mark
                                                           anti-mark
                                                           the-anti-mark
                                                           top-marked?
                                                           top-wrap
                                                           empty-wrap
                                                           set-ribcage-labels!
                                                           set-ribcage-marks!
                                                           set-ribcage-symnames!
                                                           ribcage-labels
                                                           ribcage-marks
                                                           ribcage-symnames
                                                           ribcage?
                                                           make-ribcage
                                                           gen-labels
                                                           gen-label
                                                           make-rename
                                                           rename-marks
                                                           rename-new
                                                           rename-old
                                                           subst-rename?
                                                           wrap-subst
                                                           wrap-marks
                                                           make-wrap
                                                           id-sym-name&marks
                                                           id-sym-name
                                                           id?
                                                           nonsymbol-id?
                                                           global-extend
                                                           lookup
                                                           macros-only-env
                                                           extend-var-env
                                                           extend-env
                                                           null-env
                                                           binding-value
                                                           binding-type
                                                           make-binding
                                                           arg-check
                                                           source-annotation
                                                           no-source
                                                           set-syntax-object-module!
                                                           set-syntax-object-wrap!
                                                           set-syntax-object-expression!
                                                           syntax-object-module
                                                           syntax-object-wrap
                                                           syntax-object-expression
                                                           syntax-object?
                                                           make-syntax-object
                                                           build-lexical-var
                                                           build-letrec
                                                           build-named-let
                                                           build-let
                                                           build-sequence
                                                           build-data
                                                           build-primref
                                                           build-lambda-case
                                                           build-case-lambda
                                                           build-simple-lambda
                                                           build-global-definition
                                                           build-global-assignment
                                                           build-global-reference
                                                           analyze-variable
                                                           build-lexical-assignment
                                                           build-lexical-reference
                                                           build-dynlet
                                                           build-conditional
                                                           build-application
                                                           build-void
                                                           maybe-name-value!
                                                           decorate-source
                                                           get-global-definition-hook
                                                           put-global-definition-hook
                                                           session-id
                                                           local-eval-hook
                                                           top-level-eval-hook
                                                           fx<
                                                           fx=
                                                           fx-
                                                           fx+
                                                           set-lambda-meta!
                                                           lambda-meta
                                                           lambda?
                                                           make-dynlet
                                                           make-letrec
                                                           make-let
                                                           make-lambda-case
                                                           make-lambda
                                                           make-sequence
                                                           make-application
                                                           make-conditional
                                                           make-toplevel-define
                                                           make-toplevel-set
                                                           make-toplevel-ref
                                                           make-module-set
                                                           make-module-ref
                                                           make-lexical-set
                                                           make-lexical-ref
                                                           make-primitive-ref
                                                           make-const
                                                           make-void)
                                                         ((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                         ("l-*-476"
                                                          "l-*-474"
                                                          "l-*-472"
                                                          "l-*-470"
                                                          "l-*-468"
                                                          "l-*-466"
                                                          "l-*-464"
                                                          "l-*-462"
                                                          "l-*-460"
                                                          "l-*-458"
                                                          "l-*-456"
                                                          "l-*-454"
                                                          "l-*-452"
                                                          "l-*-450"
                                                          "l-*-448"
                                                          "l-*-446"
                                                          "l-*-444"
                                                          "l-*-442"
                                                          "l-*-440"
                                                          "l-*-438"
                                                          "l-*-436"
                                                          "l-*-434"
                                                          "l-*-432"
                                                          "l-*-430"
                                                          "l-*-428"
                                                          "l-*-426"
                                                          "l-*-424"
                                                          "l-*-422"
                                                          "l-*-420"
                                                          "l-*-418"
                                                          "l-*-416"
                                                          "l-*-414"
                                                          "l-*-412"
                                                          "l-*-410"
                                                          "l-*-408"
                                                          "l-*-406"
                                                          "l-*-404"
                                                          "l-*-402"
                                                          "l-*-400"
                                                          "l-*-399"
                                                          "l-*-397"
                                                          "l-*-394"
                                                          "l-*-393"
                                                          "l-*-392"
                                                          "l-*-390"
                                                          "l-*-389"
                                                          "l-*-387"
                                                          "l-*-385"
                                                          "l-*-383"
                                                          "l-*-381"
                                                          "l-*-379"
                                                          "l-*-377"
                                                          "l-*-375"
                                                          "l-*-373"
                                                          "l-*-370"
                                                          "l-*-368"
                                                          "l-*-367"
                                                          "l-*-365"
                                                          "l-*-363"
                                                          "l-*-361"
                                                          "l-*-359"
                                                          "l-*-358"
                                                          "l-*-357"
                                                          "l-*-356"
                                                          "l-*-354"
                                                          "l-*-353"
                                                          "l-*-350"
                                                          "l-*-348"
                                                          "l-*-346"
                                                          "l-*-344"
                                                          "l-*-342"
                                                          "l-*-340"
                                                          "l-*-338"
                                                          "l-*-337"
                                                          "l-*-336"
                                                          "l-*-334"
                                                          "l-*-332"
                                                          "l-*-331"
                                                          "l-*-328"
                                                          "l-*-327"
                                                          "l-*-325"
                                                          "l-*-323"
                                                          "l-*-321"
                                                          "l-*-319"
                                                          "l-*-317"
                                                          "l-*-315"
                                                          "l-*-313"
                                                          "l-*-311"
                                                          "l-*-309"
                                                          "l-*-306"
                                                          "l-*-304"
                                                          "l-*-302"
                                                          "l-*-300"
                                                          "l-*-298"
                                                          "l-*-296"
                                                          "l-*-294"
                                                          "l-*-292"
                                                          "l-*-290"
                                                          "l-*-288"
                                                          "l-*-286"
                                                          "l-*-284"
                                                          "l-*-282"
                                                          "l-*-280"
                                                          "l-*-278"
                                                          "l-*-276"
                                                          "l-*-274"
                                                          "l-*-272"
                                                          "l-*-270"
                                                          "l-*-268"
                                                          "l-*-266"
                                                          "l-*-264"
                                                          "l-*-262"
                                                          "l-*-260"
                                                          "l-*-258"
                                                          "l-*-256"
                                                          "l-*-255"
                                                          "l-*-254"
                                                          "l-*-253"
                                                          "l-*-252"
                                                          "l-*-250"
                                                          "l-*-248"
                                                          "l-*-246"
                                                          "l-*-243"
                                                          "l-*-241"
                                                          "l-*-239"
                                                          "l-*-237"
                                                          "l-*-235"
                                                          "l-*-233"
                                                          "l-*-231"
                                                          "l-*-229"
                                                          "l-*-227"
                                                          "l-*-225"
                                                          "l-*-223"
                                                          "l-*-221"
                                                          "l-*-219"
                                                          "l-*-217"
                                                          "l-*-215"
                                                          "l-*-213"
                                                          "l-*-211"
                                                          "l-*-209"))
                                                       #(ribcage
                                                         (define-structure
                                                           define-expansion-accessors
                                                           define-expansion-constructors)
                                                         ((top) (top) (top))
                                                         ("l-*-47"
                                                          "l-*-46"
                                                          "l-*-45")))
                                                      (hygiene guile))
                                                   '(())))
                                            #f)
                                          #f))
                                      tmp-13008)
                                    #f)
                                (@apply
                                  (lambda (x-13114 dots-13115 ys-13116)
                                    (call-with-values
                                      (lambda ()
                                        (cvt*-12572
                                          ys-13116
                                          n-12578
                                          ids-12579))
                                      (lambda (ys-13119 ids-13120)
                                        (call-with-values
                                          (lambda ()
                                            (cvt-12574
                                              x-13114
                                              (#{1+}# n-12578)
                                              ids-13120))
                                          (lambda (x-13121 ids-13122)
                                            (call-with-values
                                              (lambda ()
                                                (v-reverse-12573 ys-13119))
                                              (lambda (ys-13155 e-13156)
                                                (values
                                                  (vector
                                                    'each+
                                                    x-13121
                                                    ys-13155
                                                    e-13156)
                                                  ids-13122))))))))
                                  tmp-13008)
                                (let ((tmp-13157
                                        ($sc-dispatch p-12577 '(any . any))))
                                  (if tmp-13157
                                    (@apply
                                      (lambda (x-13161 y-13162)
                                        (call-with-values
                                          (lambda ()
                                            (cvt-12574
                                              y-13162
                                              n-12578
                                              ids-12579))
                                          (lambda (y-13163 ids-13164)
                                            (call-with-values
                                              (lambda ()
                                                (cvt-12574
                                                  x-13161
                                                  n-12578
                                                  ids-13164))
                                              (lambda (x-13165 ids-13166)
                                                (values
                                                  (cons x-13165 y-13163)
                                                  ids-13166))))))
                                      tmp-13157)
                                    (let ((tmp-13167
                                            ($sc-dispatch p-12577 '())))
                                      (if tmp-13167
                                        (@apply
                                          (lambda () (values '() ids-12579))
                                          tmp-13167)
                                        (let ((tmp-13171
                                                ($sc-dispatch
                                                  p-12577
                                                  '#(vector each-any))))
                                          (if tmp-13171
                                            (@apply
                                              (lambda (x-13175)
                                                (call-with-values
                                                  (lambda ()
                                                    (cvt-12574
                                                      x-13175
                                                      n-12578
                                                      ids-12579))
                                                  (lambda (p-13176 ids-13177)
                                                    (values
                                                      (vector 'vector p-13176)
                                                      ids-13177))))
                                              tmp-13171)
                                            (values
                                              (vector
                                                'atom
                                                (strip-4343 p-12577 '(())))
                                              ids-12579)))))))))))))))
                 (cvt-12574 pattern-12570 0 '()))))
           (build-dispatch-call-10974
             (lambda (pvars-13290 exp-13291 y-13292 r-13293 mod-13294)
               (let ((ids-13295 (map car pvars-13290)))
                 (begin
                   (map cdr pvars-13290)
                   (let ((labels-13297 (gen-labels-4297 ids-13295))
                         (new-vars-13298 (map gen-var-4344 ids-13295)))
                     (build-application-4261
                       #f
                       (if (equal? (module-name (current-module)) '(guile))
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 7)
                           #f
                           'apply)
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 5)
                           #f
                           '(guile)
                           'apply
                           #f))
                       (list (build-simple-lambda-4270
                               #f
                               (map syntax->datum ids-13295)
                               #f
                               new-vars-13298
                               '()
                               (expand-4330
                                 exp-13291
                                 (extend-env-4288
                                   labels-13297
                                   (map (lambda (var-13621 level-13622)
                                          (cons 'syntax
                                                (cons var-13621 level-13622)))
                                        new-vars-13298
                                        (map cdr pvars-13290))
                                   r-13293)
                                 (make-binding-wrap-4308
                                   ids-13295
                                   labels-13297
                                   '(()))
                                 mod-13294))
                             y-13292)))))))
           (gen-clause-10975
             (lambda (x-11942
                      keys-11943
                      clauses-11944
                      r-11945
                      pat-11946
                      fender-11947
                      exp-11948
                      mod-11949)
               (call-with-values
                 (lambda ()
                   (convert-pattern-10973 pat-11946 keys-11943))
                 (lambda (p-12104 pvars-12105)
                   (if (not (distinct-bound-ids?-4321 (map car pvars-12105)))
                     (syntax-violation
                       'syntax-case
                       "duplicate pattern variable"
                       pat-11946)
                     (if (not (and-map
                                (lambda (x-12221)
                                  (not (let ((x-12225 (car x-12221)))
                                         (if (if (if (vector? x-12225)
                                                   (if (= (vector-length
                                                            x-12225)
                                                          4)
                                                     (eq? (vector-ref
                                                            x-12225
                                                            0)
                                                          'syntax-object)
                                                     #f)
                                                   #f)
                                               (symbol? (vector-ref x-12225 1))
                                               #f)
                                           (if (eq? (if (if (vector? x-12225)
                                                          (if (= (vector-length
                                                                   x-12225)
                                                                 4)
                                                            (eq? (vector-ref
                                                                   x-12225
                                                                   0)
                                                                 'syntax-object)
                                                            #f)
                                                          #f)
                                                      (vector-ref x-12225 1)
                                                      x-12225)
                                                    (if (if (= (vector-length
                                                                 '#(syntax-object
                                                                    ...
                                                                    ((top)
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       #(x)
                                                                       #((top))
                                                                       #("l-*-2266"))
                                                                     #(ribcage
                                                                       (lambda-var-list
                                                                         gen-var
                                                                         strip
                                                                         expand-lambda-case
                                                                         lambda*-formals
                                                                         expand-simple-lambda
                                                                         lambda-formals
                                                                         ellipsis?
                                                                         expand-void
                                                                         eval-local-transformer
                                                                         expand-local-syntax
                                                                         expand-body
                                                                         expand-macro
                                                                         expand-application
                                                                         expand-expr
                                                                         expand
                                                                         syntax-type
                                                                         parse-when-list
                                                                         expand-install-global
                                                                         expand-top-sequence
                                                                         expand-sequence
                                                                         source-wrap
                                                                         wrap
                                                                         bound-id-member?
                                                                         distinct-bound-ids?
                                                                         valid-bound-ids?
                                                                         bound-id=?
                                                                         free-id=?
                                                                         with-transformer-environment
                                                                         transformer-environment
                                                                         resolve-identifier
                                                                         locally-bound-identifiers
                                                                         id-var-name
                                                                         same-marks?
                                                                         join-marks
                                                                         join-wraps
                                                                         smart-append
                                                                         make-binding-wrap
                                                                         extend-ribcage!
                                                                         make-empty-ribcage
                                                                         new-mark
                                                                         anti-mark
                                                                         the-anti-mark
                                                                         top-marked?
                                                                         top-wrap
                                                                         empty-wrap
                                                                         set-ribcage-labels!
                                                                         set-ribcage-marks!
                                                                         set-ribcage-symnames!
                                                                         ribcage-labels
                                                                         ribcage-marks
                                                                         ribcage-symnames
                                                                         ribcage?
                                                                         make-ribcage
                                                                         gen-labels
                                                                         gen-label
                                                                         make-rename
                                                                         rename-marks
                                                                         rename-new
                                                                         rename-old
                                                                         subst-rename?
                                                                         wrap-subst
                                                                         wrap-marks
                                                                         make-wrap
                                                                         id-sym-name&marks
                                                                         id-sym-name
                                                                         id?
                                                                         nonsymbol-id?
                                                                         global-extend
                                                                         lookup
                                                                         macros-only-env
                                                                         extend-var-env
                                                                         extend-env
                                                                         null-env
                                                                         binding-value
                                                                         binding-type
                                                                         make-binding
                                                                         arg-check
                                                                         source-annotation
                                                                         no-source
                                                                         set-syntax-object-module!
                                                                         set-syntax-object-wrap!
                                                                         set-syntax-object-expression!
                                                                         syntax-object-module
                                                                         syntax-object-wrap
                                                                         syntax-object-expression
                                                                         syntax-object?
                                                                         make-syntax-object
                                                                         build-lexical-var
                                                                         build-letrec
                                                                         build-named-let
                                                                         build-let
                                                                         build-sequence
                                                                         build-data
                                                                         build-primref
                                                                         build-lambda-case
                                                                         build-case-lambda
                                                                         build-simple-lambda
                                                                         build-global-definition
                                                                         build-global-assignment
                                                                         build-global-reference
                                                                         analyze-variable
                                                                         build-lexical-assignment
                                                                         build-lexical-reference
                                                                         build-dynlet
                                                                         build-conditional
                                                                         build-application
                                                                         build-void
                                                                         maybe-name-value!
                                                                         decorate-source
                                                                         get-global-definition-hook
                                                                         put-global-definition-hook
                                                                         session-id
                                                                         local-eval-hook
                                                                         top-level-eval-hook
                                                                         fx<
                                                                         fx=
                                                                         fx-
                                                                         fx+
                                                                         set-lambda-meta!
                                                                         lambda-meta
                                                                         lambda?
                                                                         make-dynlet
                                                                         make-letrec
                                                                         make-let
                                                                         make-lambda-case
                                                                         make-lambda
                                                                         make-sequence
                                                                         make-application
                                                                         make-conditional
                                                                         make-toplevel-define
                                                                         make-toplevel-set
                                                                         make-toplevel-ref
                                                                         make-module-set
                                                                         make-module-ref
                                                                         make-lexical-set
                                                                         make-lexical-ref
                                                                         make-primitive-ref
                                                                         make-const
                                                                         make-void)
                                                                       ((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                       ("l-*-476"
                                                                        "l-*-474"
                                                                        "l-*-472"
                                                                        "l-*-470"
                                                                        "l-*-468"
                                                                        "l-*-466"
                                                                        "l-*-464"
                                                                        "l-*-462"
                                                                        "l-*-460"
                                                                        "l-*-458"
                                                                        "l-*-456"
                                                                        "l-*-454"
                                                                        "l-*-452"
                                                                        "l-*-450"
                                                                        "l-*-448"
                                                                        "l-*-446"
                                                                        "l-*-444"
                                                                        "l-*-442"
                                                                        "l-*-440"
                                                                        "l-*-438"
                                                                        "l-*-436"
                                                                        "l-*-434"
                                                                        "l-*-432"
                                                                        "l-*-430"
                                                                        "l-*-428"
                                                                        "l-*-426"
                                                                        "l-*-424"
                                                                        "l-*-422"
                                                                        "l-*-420"
                                                                        "l-*-418"
                                                                        "l-*-416"
                                                                        "l-*-414"
                                                                        "l-*-412"
                                                                        "l-*-410"
                                                                        "l-*-408"
                                                                        "l-*-406"
                                                                        "l-*-404"
                                                                        "l-*-402"
                                                                        "l-*-400"
                                                                        "l-*-399"
                                                                        "l-*-397"
                                                                        "l-*-394"
                                                                        "l-*-393"
                                                                        "l-*-392"
                                                                        "l-*-390"
                                                                        "l-*-389"
                                                                        "l-*-387"
                                                                        "l-*-385"
                                                                        "l-*-383"
                                                                        "l-*-381"
                                                                        "l-*-379"
                                                                        "l-*-377"
                                                                        "l-*-375"
                                                                        "l-*-373"
                                                                        "l-*-370"
                                                                        "l-*-368"
                                                                        "l-*-367"
                                                                        "l-*-365"
                                                                        "l-*-363"
                                                                        "l-*-361"
                                                                        "l-*-359"
                                                                        "l-*-358"
                                                                        "l-*-357"
                                                                        "l-*-356"
                                                                        "l-*-354"
                                                                        "l-*-353"
                                                                        "l-*-350"
                                                                        "l-*-348"
                                                                        "l-*-346"
                                                                        "l-*-344"
                                                                        "l-*-342"
                                                                        "l-*-340"
                                                                        "l-*-338"
                                                                        "l-*-337"
                                                                        "l-*-336"
                                                                        "l-*-334"
                                                                        "l-*-332"
                                                                        "l-*-331"
                                                                        "l-*-328"
                                                                        "l-*-327"
                                                                        "l-*-325"
                                                                        "l-*-323"
                                                                        "l-*-321"
                                                                        "l-*-319"
                                                                        "l-*-317"
                                                                        "l-*-315"
                                                                        "l-*-313"
                                                                        "l-*-311"
                                                                        "l-*-309"
                                                                        "l-*-306"
                                                                        "l-*-304"
                                                                        "l-*-302"
                                                                        "l-*-300"
                                                                        "l-*-298"
                                                                        "l-*-296"
                                                                        "l-*-294"
                                                                        "l-*-292"
                                                                        "l-*-290"
                                                                        "l-*-288"
                                                                        "l-*-286"
                                                                        "l-*-284"
                                                                        "l-*-282"
                                                                        "l-*-280"
                                                                        "l-*-278"
                                                                        "l-*-276"
                                                                        "l-*-274"
                                                                        "l-*-272"
                                                                        "l-*-270"
                                                                        "l-*-268"
                                                                        "l-*-266"
                                                                        "l-*-264"
                                                                        "l-*-262"
                                                                        "l-*-260"
                                                                        "l-*-258"
                                                                        "l-*-256"
                                                                        "l-*-255"
                                                                        "l-*-254"
                                                                        "l-*-253"
                                                                        "l-*-252"
                                                                        "l-*-250"
                                                                        "l-*-248"
                                                                        "l-*-246"
                                                                        "l-*-243"
                                                                        "l-*-241"
                                                                        "l-*-239"
                                                                        "l-*-237"
                                                                        "l-*-235"
                                                                        "l-*-233"
                                                                        "l-*-231"
                                                                        "l-*-229"
                                                                        "l-*-227"
                                                                        "l-*-225"
                                                                        "l-*-223"
                                                                        "l-*-221"
                                                                        "l-*-219"
                                                                        "l-*-217"
                                                                        "l-*-215"
                                                                        "l-*-213"
                                                                        "l-*-211"
                                                                        "l-*-209"))
                                                                     #(ribcage
                                                                       (define-structure
                                                                         define-expansion-accessors
                                                                         define-expansion-constructors)
                                                                       ((top)
                                                                        (top)
                                                                        (top))
                                                                       ("l-*-47"
                                                                        "l-*-46"
                                                                        "l-*-45")))
                                                                    (hygiene
                                                                      guile)))
                                                               4)
                                                          #t
                                                          #f)
                                                      '...
                                                      '#(syntax-object
                                                         ...
                                                         ((top)
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(x)
                                                            #((top))
                                                            #("l-*-2266"))
                                                          #(ribcage
                                                            (lambda-var-list
                                                              gen-var
                                                              strip
                                                              expand-lambda-case
                                                              lambda*-formals
                                                              expand-simple-lambda
                                                              lambda-formals
                                                              ellipsis?
                                                              expand-void
                                                              eval-local-transformer
                                                              expand-local-syntax
                                                              expand-body
                                                              expand-macro
                                                              expand-application
                                                              expand-expr
                                                              expand
                                                              syntax-type
                                                              parse-when-list
                                                              expand-install-global
                                                              expand-top-sequence
                                                              expand-sequence
                                                              source-wrap
                                                              wrap
                                                              bound-id-member?
                                                              distinct-bound-ids?
                                                              valid-bound-ids?
                                                              bound-id=?
                                                              free-id=?
                                                              with-transformer-environment
                                                              transformer-environment
                                                              resolve-identifier
                                                              locally-bound-identifiers
                                                              id-var-name
                                                              same-marks?
                                                              join-marks
                                                              join-wraps
                                                              smart-append
                                                              make-binding-wrap
                                                              extend-ribcage!
                                                              make-empty-ribcage
                                                              new-mark
                                                              anti-mark
                                                              the-anti-mark
                                                              top-marked?
                                                              top-wrap
                                                              empty-wrap
                                                              set-ribcage-labels!
                                                              set-ribcage-marks!
                                                              set-ribcage-symnames!
                                                              ribcage-labels
                                                              ribcage-marks
                                                              ribcage-symnames
                                                              ribcage?
                                                              make-ribcage
                                                              gen-labels
                                                              gen-label
                                                              make-rename
                                                              rename-marks
                                                              rename-new
                                                              rename-old
                                                              subst-rename?
                                                              wrap-subst
                                                              wrap-marks
                                                              make-wrap
                                                              id-sym-name&marks
                                                              id-sym-name
                                                              id?
                                                              nonsymbol-id?
                                                              global-extend
                                                              lookup
                                                              macros-only-env
                                                              extend-var-env
                                                              extend-env
                                                              null-env
                                                              binding-value
                                                              binding-type
                                                              make-binding
                                                              arg-check
                                                              source-annotation
                                                              no-source
                                                              set-syntax-object-module!
                                                              set-syntax-object-wrap!
                                                              set-syntax-object-expression!
                                                              syntax-object-module
                                                              syntax-object-wrap
                                                              syntax-object-expression
                                                              syntax-object?
                                                              make-syntax-object
                                                              build-lexical-var
                                                              build-letrec
                                                              build-named-let
                                                              build-let
                                                              build-sequence
                                                              build-data
                                                              build-primref
                                                              build-lambda-case
                                                              build-case-lambda
                                                              build-simple-lambda
                                                              build-global-definition
                                                              build-global-assignment
                                                              build-global-reference
                                                              analyze-variable
                                                              build-lexical-assignment
                                                              build-lexical-reference
                                                              build-dynlet
                                                              build-conditional
                                                              build-application
                                                              build-void
                                                              maybe-name-value!
                                                              decorate-source
                                                              get-global-definition-hook
                                                              put-global-definition-hook
                                                              session-id
                                                              local-eval-hook
                                                              top-level-eval-hook
                                                              fx<
                                                              fx=
                                                              fx-
                                                              fx+
                                                              set-lambda-meta!
                                                              lambda-meta
                                                              lambda?
                                                              make-dynlet
                                                              make-letrec
                                                              make-let
                                                              make-lambda-case
                                                              make-lambda
                                                              make-sequence
                                                              make-application
                                                              make-conditional
                                                              make-toplevel-define
                                                              make-toplevel-set
                                                              make-toplevel-ref
                                                              make-module-set
                                                              make-module-ref
                                                              make-lexical-set
                                                              make-lexical-ref
                                                              make-primitive-ref
                                                              make-const
                                                              make-void)
                                                            ((top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                            ("l-*-476"
                                                             "l-*-474"
                                                             "l-*-472"
                                                             "l-*-470"
                                                             "l-*-468"
                                                             "l-*-466"
                                                             "l-*-464"
                                                             "l-*-462"
                                                             "l-*-460"
                                                             "l-*-458"
                                                             "l-*-456"
                                                             "l-*-454"
                                                             "l-*-452"
                                                             "l-*-450"
                                                             "l-*-448"
                                                             "l-*-446"
                                                             "l-*-444"
                                                             "l-*-442"
                                                             "l-*-440"
                                                             "l-*-438"
                                                             "l-*-436"
                                                             "l-*-434"
                                                             "l-*-432"
                                                             "l-*-430"
                                                             "l-*-428"
                                                             "l-*-426"
                                                             "l-*-424"
                                                             "l-*-422"
                                                             "l-*-420"
                                                             "l-*-418"
                                                             "l-*-416"
                                                             "l-*-414"
                                                             "l-*-412"
                                                             "l-*-410"
                                                             "l-*-408"
                                                             "l-*-406"
                                                             "l-*-404"
                                                             "l-*-402"
                                                             "l-*-400"
                                                             "l-*-399"
                                                             "l-*-397"
                                                             "l-*-394"
                                                             "l-*-393"
                                                             "l-*-392"
                                                             "l-*-390"
                                                             "l-*-389"
                                                             "l-*-387"
                                                             "l-*-385"
                                                             "l-*-383"
                                                             "l-*-381"
                                                             "l-*-379"
                                                             "l-*-377"
                                                             "l-*-375"
                                                             "l-*-373"
                                                             "l-*-370"
                                                             "l-*-368"
                                                             "l-*-367"
                                                             "l-*-365"
                                                             "l-*-363"
                                                             "l-*-361"
                                                             "l-*-359"
                                                             "l-*-358"
                                                             "l-*-357"
                                                             "l-*-356"
                                                             "l-*-354"
                                                             "l-*-353"
                                                             "l-*-350"
                                                             "l-*-348"
                                                             "l-*-346"
                                                             "l-*-344"
                                                             "l-*-342"
                                                             "l-*-340"
                                                             "l-*-338"
                                                             "l-*-337"
                                                             "l-*-336"
                                                             "l-*-334"
                                                             "l-*-332"
                                                             "l-*-331"
                                                             "l-*-328"
                                                             "l-*-327"
                                                             "l-*-325"
                                                             "l-*-323"
                                                             "l-*-321"
                                                             "l-*-319"
                                                             "l-*-317"
                                                             "l-*-315"
                                                             "l-*-313"
                                                             "l-*-311"
                                                             "l-*-309"
                                                             "l-*-306"
                                                             "l-*-304"
                                                             "l-*-302"
                                                             "l-*-300"
                                                             "l-*-298"
                                                             "l-*-296"
                                                             "l-*-294"
                                                             "l-*-292"
                                                             "l-*-290"
                                                             "l-*-288"
                                                             "l-*-286"
                                                             "l-*-284"
                                                             "l-*-282"
                                                             "l-*-280"
                                                             "l-*-278"
                                                             "l-*-276"
                                                             "l-*-274"
                                                             "l-*-272"
                                                             "l-*-270"
                                                             "l-*-268"
                                                             "l-*-266"
                                                             "l-*-264"
                                                             "l-*-262"
                                                             "l-*-260"
                                                             "l-*-258"
                                                             "l-*-256"
                                                             "l-*-255"
                                                             "l-*-254"
                                                             "l-*-253"
                                                             "l-*-252"
                                                             "l-*-250"
                                                             "l-*-248"
                                                             "l-*-246"
                                                             "l-*-243"
                                                             "l-*-241"
                                                             "l-*-239"
                                                             "l-*-237"
                                                             "l-*-235"
                                                             "l-*-233"
                                                             "l-*-231"
                                                             "l-*-229"
                                                             "l-*-227"
                                                             "l-*-225"
                                                             "l-*-223"
                                                             "l-*-221"
                                                             "l-*-219"
                                                             "l-*-217"
                                                             "l-*-215"
                                                             "l-*-213"
                                                             "l-*-211"
                                                             "l-*-209"))
                                                          #(ribcage
                                                            (define-structure
                                                              define-expansion-accessors
                                                              define-expansion-constructors)
                                                            ((top) (top) (top))
                                                            ("l-*-47"
                                                             "l-*-46"
                                                             "l-*-45")))
                                                         (hygiene guile))))
                                             (eq? (id-var-name-4313
                                                    x-12225
                                                    '(()))
                                                  (id-var-name-4313
                                                    '#(syntax-object
                                                       ...
                                                       ((top)
                                                        #(ribcage () () ())
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(x)
                                                          #((top))
                                                          #("l-*-2266"))
                                                        #(ribcage
                                                          (lambda-var-list
                                                            gen-var
                                                            strip
                                                            expand-lambda-case
                                                            lambda*-formals
                                                            expand-simple-lambda
                                                            lambda-formals
                                                            ellipsis?
                                                            expand-void
                                                            eval-local-transformer
                                                            expand-local-syntax
                                                            expand-body
                                                            expand-macro
                                                            expand-application
                                                            expand-expr
                                                            expand
                                                            syntax-type
                                                            parse-when-list
                                                            expand-install-global
                                                            expand-top-sequence
                                                            expand-sequence
                                                            source-wrap
                                                            wrap
                                                            bound-id-member?
                                                            distinct-bound-ids?
                                                            valid-bound-ids?
                                                            bound-id=?
                                                            free-id=?
                                                            with-transformer-environment
                                                            transformer-environment
                                                            resolve-identifier
                                                            locally-bound-identifiers
                                                            id-var-name
                                                            same-marks?
                                                            join-marks
                                                            join-wraps
                                                            smart-append
                                                            make-binding-wrap
                                                            extend-ribcage!
                                                            make-empty-ribcage
                                                            new-mark
                                                            anti-mark
                                                            the-anti-mark
                                                            top-marked?
                                                            top-wrap
                                                            empty-wrap
                                                            set-ribcage-labels!
                                                            set-ribcage-marks!
                                                            set-ribcage-symnames!
                                                            ribcage-labels
                                                            ribcage-marks
                                                            ribcage-symnames
                                                            ribcage?
                                                            make-ribcage
                                                            gen-labels
                                                            gen-label
                                                            make-rename
                                                            rename-marks
                                                            rename-new
                                                            rename-old
                                                            subst-rename?
                                                            wrap-subst
                                                            wrap-marks
                                                            make-wrap
                                                            id-sym-name&marks
                                                            id-sym-name
                                                            id?
                                                            nonsymbol-id?
                                                            global-extend
                                                            lookup
                                                            macros-only-env
                                                            extend-var-env
                                                            extend-env
                                                            null-env
                                                            binding-value
                                                            binding-type
                                                            make-binding
                                                            arg-check
                                                            source-annotation
                                                            no-source
                                                            set-syntax-object-module!
                                                            set-syntax-object-wrap!
                                                            set-syntax-object-expression!
                                                            syntax-object-module
                                                            syntax-object-wrap
                                                            syntax-object-expression
                                                            syntax-object?
                                                            make-syntax-object
                                                            build-lexical-var
                                                            build-letrec
                                                            build-named-let
                                                            build-let
                                                            build-sequence
                                                            build-data
                                                            build-primref
                                                            build-lambda-case
                                                            build-case-lambda
                                                            build-simple-lambda
                                                            build-global-definition
                                                            build-global-assignment
                                                            build-global-reference
                                                            analyze-variable
                                                            build-lexical-assignment
                                                            build-lexical-reference
                                                            build-dynlet
                                                            build-conditional
                                                            build-application
                                                            build-void
                                                            maybe-name-value!
                                                            decorate-source
                                                            get-global-definition-hook
                                                            put-global-definition-hook
                                                            session-id
                                                            local-eval-hook
                                                            top-level-eval-hook
                                                            fx<
                                                            fx=
                                                            fx-
                                                            fx+
                                                            set-lambda-meta!
                                                            lambda-meta
                                                            lambda?
                                                            make-dynlet
                                                            make-letrec
                                                            make-let
                                                            make-lambda-case
                                                            make-lambda
                                                            make-sequence
                                                            make-application
                                                            make-conditional
                                                            make-toplevel-define
                                                            make-toplevel-set
                                                            make-toplevel-ref
                                                            make-module-set
                                                            make-module-ref
                                                            make-lexical-set
                                                            make-lexical-ref
                                                            make-primitive-ref
                                                            make-const
                                                            make-void)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("l-*-476"
                                                           "l-*-474"
                                                           "l-*-472"
                                                           "l-*-470"
                                                           "l-*-468"
                                                           "l-*-466"
                                                           "l-*-464"
                                                           "l-*-462"
                                                           "l-*-460"
                                                           "l-*-458"
                                                           "l-*-456"
                                                           "l-*-454"
                                                           "l-*-452"
                                                           "l-*-450"
                                                           "l-*-448"
                                                           "l-*-446"
                                                           "l-*-444"
                                                           "l-*-442"
                                                           "l-*-440"
                                                           "l-*-438"
                                                           "l-*-436"
                                                           "l-*-434"
                                                           "l-*-432"
                                                           "l-*-430"
                                                           "l-*-428"
                                                           "l-*-426"
                                                           "l-*-424"
                                                           "l-*-422"
                                                           "l-*-420"
                                                           "l-*-418"
                                                           "l-*-416"
                                                           "l-*-414"
                                                           "l-*-412"
                                                           "l-*-410"
                                                           "l-*-408"
                                                           "l-*-406"
                                                           "l-*-404"
                                                           "l-*-402"
                                                           "l-*-400"
                                                           "l-*-399"
                                                           "l-*-397"
                                                           "l-*-394"
                                                           "l-*-393"
                                                           "l-*-392"
                                                           "l-*-390"
                                                           "l-*-389"
                                                           "l-*-387"
                                                           "l-*-385"
                                                           "l-*-383"
                                                           "l-*-381"
                                                           "l-*-379"
                                                           "l-*-377"
                                                           "l-*-375"
                                                           "l-*-373"
                                                           "l-*-370"
                                                           "l-*-368"
                                                           "l-*-367"
                                                           "l-*-365"
                                                           "l-*-363"
                                                           "l-*-361"
                                                           "l-*-359"
                                                           "l-*-358"
                                                           "l-*-357"
                                                           "l-*-356"
                                                           "l-*-354"
                                                           "l-*-353"
                                                           "l-*-350"
                                                           "l-*-348"
                                                           "l-*-346"
                                                           "l-*-344"
                                                           "l-*-342"
                                                           "l-*-340"
                                                           "l-*-338"
                                                           "l-*-337"
                                                           "l-*-336"
                                                           "l-*-334"
                                                           "l-*-332"
                                                           "l-*-331"
                                                           "l-*-328"
                                                           "l-*-327"
                                                           "l-*-325"
                                                           "l-*-323"
                                                           "l-*-321"
                                                           "l-*-319"
                                                           "l-*-317"
                                                           "l-*-315"
                                                           "l-*-313"
                                                           "l-*-311"
                                                           "l-*-309"
                                                           "l-*-306"
                                                           "l-*-304"
                                                           "l-*-302"
                                                           "l-*-300"
                                                           "l-*-298"
                                                           "l-*-296"
                                                           "l-*-294"
                                                           "l-*-292"
                                                           "l-*-290"
                                                           "l-*-288"
                                                           "l-*-286"
                                                           "l-*-284"
                                                           "l-*-282"
                                                           "l-*-280"
                                                           "l-*-278"
                                                           "l-*-276"
                                                           "l-*-274"
                                                           "l-*-272"
                                                           "l-*-270"
                                                           "l-*-268"
                                                           "l-*-266"
                                                           "l-*-264"
                                                           "l-*-262"
                                                           "l-*-260"
                                                           "l-*-258"
                                                           "l-*-256"
                                                           "l-*-255"
                                                           "l-*-254"
                                                           "l-*-253"
                                                           "l-*-252"
                                                           "l-*-250"
                                                           "l-*-248"
                                                           "l-*-246"
                                                           "l-*-243"
                                                           "l-*-241"
                                                           "l-*-239"
                                                           "l-*-237"
                                                           "l-*-235"
                                                           "l-*-233"
                                                           "l-*-231"
                                                           "l-*-229"
                                                           "l-*-227"
                                                           "l-*-225"
                                                           "l-*-223"
                                                           "l-*-221"
                                                           "l-*-219"
                                                           "l-*-217"
                                                           "l-*-215"
                                                           "l-*-213"
                                                           "l-*-211"
                                                           "l-*-209"))
                                                        #(ribcage
                                                          (define-structure
                                                            define-expansion-accessors
                                                            define-expansion-constructors)
                                                          ((top) (top) (top))
                                                          ("l-*-47"
                                                           "l-*-46"
                                                           "l-*-45")))
                                                       (hygiene guile))
                                                    '(())))
                                             #f)
                                           #f))))
                                pvars-12105))
                       (syntax-violation
                         'syntax-case
                         "misplaced ellipsis"
                         pat-11946)
                       (let ((y-12301
                               (gensym
                                 (string-append (symbol->string 'tmp) "-"))))
                         (build-application-4261
                           #f
                           (let ((req-12444 (list 'tmp))
                                 (vars-12446 (list y-12301))
                                 (exp-12448
                                   (let ((y-12465
                                           (make-struct/no-tail
                                             (vector-ref %expanded-vtables 3)
                                             #f
                                             'tmp
                                             y-12301)))
                                     (let ((test-exp-12469
                                             (let ((tmp-12478
                                                     ($sc-dispatch
                                                       fender-11947
                                                       '#(atom #t))))
                                               (if tmp-12478
                                                 (@apply
                                                   (lambda () y-12465)
                                                   tmp-12478)
                                                 (let ((then-exp-12496
                                                         (build-dispatch-call-10974
                                                           pvars-12105
                                                           fender-11947
                                                           y-12465
                                                           r-11945
                                                           mod-11949))
                                                       (else-exp-12497
                                                         (make-struct/no-tail
                                                           (vector-ref
                                                             %expanded-vtables
                                                             1)
                                                           #f
                                                           #f)))
                                                   (make-struct/no-tail
                                                     (vector-ref
                                                       %expanded-vtables
                                                       10)
                                                     #f
                                                     y-12465
                                                     then-exp-12496
                                                     else-exp-12497)))))
                                           (then-exp-12470
                                             (build-dispatch-call-10974
                                               pvars-12105
                                               exp-11948
                                               y-12465
                                               r-11945
                                               mod-11949))
                                           (else-exp-12471
                                             (gen-syntax-case-10976
                                               x-11942
                                               keys-11943
                                               clauses-11944
                                               r-11945
                                               mod-11949)))
                                       (make-struct/no-tail
                                         (vector-ref %expanded-vtables 10)
                                         #f
                                         test-exp-12469
                                         then-exp-12470
                                         else-exp-12471)))))
                             (let ((body-12453
                                     (make-struct/no-tail
                                       (vector-ref %expanded-vtables 14)
                                       #f
                                       req-12444
                                       #f
                                       #f
                                       #f
                                       '()
                                       vars-12446
                                       exp-12448
                                       #f)))
                               (make-struct/no-tail
                                 (vector-ref %expanded-vtables 13)
                                 #f
                                 '()
                                 body-12453)))
                           (list (if (eq? p-12104 'any)
                                   (let ((fun-exp-12519
                                           (if (equal?
                                                 (module-name (current-module))
                                                 '(guile))
                                             (make-struct/no-tail
                                               (vector-ref %expanded-vtables 7)
                                               #f
                                               'list)
                                             (make-struct/no-tail
                                               (vector-ref %expanded-vtables 5)
                                               #f
                                               '(guile)
                                               'list
                                               #f)))
                                         (arg-exps-12520 (list x-11942)))
                                     (make-struct/no-tail
                                       (vector-ref %expanded-vtables 11)
                                       #f
                                       fun-exp-12519
                                       arg-exps-12520))
                                   (let ((fun-exp-12543
                                           (if (equal?
                                                 (module-name (current-module))
                                                 '(guile))
                                             (make-struct/no-tail
                                               (vector-ref %expanded-vtables 7)
                                               #f
                                               '$sc-dispatch)
                                             (make-struct/no-tail
                                               (vector-ref %expanded-vtables 5)
                                               #f
                                               '(guile)
                                               '$sc-dispatch
                                               #f)))
                                         (arg-exps-12544
                                           (list x-11942
                                                 (make-struct/no-tail
                                                   (vector-ref
                                                     %expanded-vtables
                                                     1)
                                                   #f
                                                   p-12104))))
                                     (make-struct/no-tail
                                       (vector-ref %expanded-vtables 11)
                                       #f
                                       fun-exp-12543
                                       arg-exps-12544))))))))))))
           (gen-syntax-case-10976
             (lambda (x-11375
                      keys-11376
                      clauses-11377
                      r-11378
                      mod-11379)
               (if (null? clauses-11377)
                 (let ((fun-exp-11384
                         (if (equal? (module-name (current-module)) '(guile))
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 7)
                             #f
                             'syntax-violation)
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 5)
                             #f
                             '(guile)
                             'syntax-violation
                             #f)))
                       (arg-exps-11385
                         (list (make-struct/no-tail
                                 (vector-ref %expanded-vtables 1)
                                 #f
                                 #f)
                               (make-struct/no-tail
                                 (vector-ref %expanded-vtables 1)
                                 #f
                                 "source expression failed to match any pattern")
                               x-11375)))
                   (make-struct/no-tail
                     (vector-ref %expanded-vtables 11)
                     #f
                     fun-exp-11384
                     arg-exps-11385))
                 (let ((tmp-11418 (car clauses-11377)))
                   (let ((tmp-11419 ($sc-dispatch tmp-11418 '(any any))))
                     (if tmp-11419
                       (@apply
                         (lambda (pat-11421 exp-11422)
                           (if (if (if (symbol? pat-11421)
                                     #t
                                     (if (if (vector? pat-11421)
                                           (if (= (vector-length pat-11421) 4)
                                             (eq? (vector-ref pat-11421 0)
                                                  'syntax-object)
                                             #f)
                                           #f)
                                       (symbol? (vector-ref pat-11421 1))
                                       #f))
                                 (and-map
                                   (lambda (x-11449)
                                     (not (if (eq? (if (if (vector? pat-11421)
                                                         (if (= (vector-length
                                                                  pat-11421)
                                                                4)
                                                           (eq? (vector-ref
                                                                  pat-11421
                                                                  0)
                                                                'syntax-object)
                                                           #f)
                                                         #f)
                                                     (vector-ref pat-11421 1)
                                                     pat-11421)
                                                   (if (if (vector? x-11449)
                                                         (if (= (vector-length
                                                                  x-11449)
                                                                4)
                                                           (eq? (vector-ref
                                                                  x-11449
                                                                  0)
                                                                'syntax-object)
                                                           #f)
                                                         #f)
                                                     (vector-ref x-11449 1)
                                                     x-11449))
                                            (eq? (id-var-name-4313
                                                   pat-11421
                                                   '(()))
                                                 (id-var-name-4313
                                                   x-11449
                                                   '(())))
                                            #f)))
                                   (cons '#(syntax-object
                                            ...
                                            ((top)
                                             #(ribcage
                                               #(pat exp)
                                               #((top) (top))
                                               #("l-*-3890" "l-*-3891"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x keys clauses r mod)
                                               #((top) (top) (top) (top) (top))
                                               #("l-*-3879"
                                                 "l-*-3880"
                                                 "l-*-3881"
                                                 "l-*-3882"
                                                 "l-*-3883"))
                                             #(ribcage
                                               (gen-syntax-case
                                                 gen-clause
                                                 build-dispatch-call
                                                 convert-pattern)
                                               ((top) (top) (top) (top))
                                               ("l-*-3697"
                                                "l-*-3695"
                                                "l-*-3693"
                                                "l-*-3691"))
                                             #(ribcage
                                               (lambda-var-list
                                                 gen-var
                                                 strip
                                                 expand-lambda-case
                                                 lambda*-formals
                                                 expand-simple-lambda
                                                 lambda-formals
                                                 ellipsis?
                                                 expand-void
                                                 eval-local-transformer
                                                 expand-local-syntax
                                                 expand-body
                                                 expand-macro
                                                 expand-application
                                                 expand-expr
                                                 expand
                                                 syntax-type
                                                 parse-when-list
                                                 expand-install-global
                                                 expand-top-sequence
                                                 expand-sequence
                                                 source-wrap
                                                 wrap
                                                 bound-id-member?
                                                 distinct-bound-ids?
                                                 valid-bound-ids?
                                                 bound-id=?
                                                 free-id=?
                                                 with-transformer-environment
                                                 transformer-environment
                                                 resolve-identifier
                                                 locally-bound-identifiers
                                                 id-var-name
                                                 same-marks?
                                                 join-marks
                                                 join-wraps
                                                 smart-append
                                                 make-binding-wrap
                                                 extend-ribcage!
                                                 make-empty-ribcage
                                                 new-mark
                                                 anti-mark
                                                 the-anti-mark
                                                 top-marked?
                                                 top-wrap
                                                 empty-wrap
                                                 set-ribcage-labels!
                                                 set-ribcage-marks!
                                                 set-ribcage-symnames!
                                                 ribcage-labels
                                                 ribcage-marks
                                                 ribcage-symnames
                                                 ribcage?
                                                 make-ribcage
                                                 gen-labels
                                                 gen-label
                                                 make-rename
                                                 rename-marks
                                                 rename-new
                                                 rename-old
                                                 subst-rename?
                                                 wrap-subst
                                                 wrap-marks
                                                 make-wrap
                                                 id-sym-name&marks
                                                 id-sym-name
                                                 id?
                                                 nonsymbol-id?
                                                 global-extend
                                                 lookup
                                                 macros-only-env
                                                 extend-var-env
                                                 extend-env
                                                 null-env
                                                 binding-value
                                                 binding-type
                                                 make-binding
                                                 arg-check
                                                 source-annotation
                                                 no-source
                                                 set-syntax-object-module!
                                                 set-syntax-object-wrap!
                                                 set-syntax-object-expression!
                                                 syntax-object-module
                                                 syntax-object-wrap
                                                 syntax-object-expression
                                                 syntax-object?
                                                 make-syntax-object
                                                 build-lexical-var
                                                 build-letrec
                                                 build-named-let
                                                 build-let
                                                 build-sequence
                                                 build-data
                                                 build-primref
                                                 build-lambda-case
                                                 build-case-lambda
                                                 build-simple-lambda
                                                 build-global-definition
                                                 build-global-assignment
                                                 build-global-reference
                                                 analyze-variable
                                                 build-lexical-assignment
                                                 build-lexical-reference
                                                 build-dynlet
                                                 build-conditional
                                                 build-application
                                                 build-void
                                                 maybe-name-value!
                                                 decorate-source
                                                 get-global-definition-hook
                                                 put-global-definition-hook
                                                 session-id
                                                 local-eval-hook
                                                 top-level-eval-hook
                                                 fx<
                                                 fx=
                                                 fx-
                                                 fx+
                                                 set-lambda-meta!
                                                 lambda-meta
                                                 lambda?
                                                 make-dynlet
                                                 make-letrec
                                                 make-let
                                                 make-lambda-case
                                                 make-lambda
                                                 make-sequence
                                                 make-application
                                                 make-conditional
                                                 make-toplevel-define
                                                 make-toplevel-set
                                                 make-toplevel-ref
                                                 make-module-set
                                                 make-module-ref
                                                 make-lexical-set
                                                 make-lexical-ref
                                                 make-primitive-ref
                                                 make-const
                                                 make-void)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("l-*-476"
                                                "l-*-474"
                                                "l-*-472"
                                                "l-*-470"
                                                "l-*-468"
                                                "l-*-466"
                                                "l-*-464"
                                                "l-*-462"
                                                "l-*-460"
                                                "l-*-458"
                                                "l-*-456"
                                                "l-*-454"
                                                "l-*-452"
                                                "l-*-450"
                                                "l-*-448"
                                                "l-*-446"
                                                "l-*-444"
                                                "l-*-442"
                                                "l-*-440"
                                                "l-*-438"
                                                "l-*-436"
                                                "l-*-434"
                                                "l-*-432"
                                                "l-*-430"
                                                "l-*-428"
                                                "l-*-426"
                                                "l-*-424"
                                                "l-*-422"
                                                "l-*-420"
                                                "l-*-418"
                                                "l-*-416"
                                                "l-*-414"
                                                "l-*-412"
                                                "l-*-410"
                                                "l-*-408"
                                                "l-*-406"
                                                "l-*-404"
                                                "l-*-402"
                                                "l-*-400"
                                                "l-*-399"
                                                "l-*-397"
                                                "l-*-394"
                                                "l-*-393"
                                                "l-*-392"
                                                "l-*-390"
                                                "l-*-389"
                                                "l-*-387"
                                                "l-*-385"
                                                "l-*-383"
                                                "l-*-381"
                                                "l-*-379"
                                                "l-*-377"
                                                "l-*-375"
                                                "l-*-373"
                                                "l-*-370"
                                                "l-*-368"
                                                "l-*-367"
                                                "l-*-365"
                                                "l-*-363"
                                                "l-*-361"
                                                "l-*-359"
                                                "l-*-358"
                                                "l-*-357"
                                                "l-*-356"
                                                "l-*-354"
                                                "l-*-353"
                                                "l-*-350"
                                                "l-*-348"
                                                "l-*-346"
                                                "l-*-344"
                                                "l-*-342"
                                                "l-*-340"
                                                "l-*-338"
                                                "l-*-337"
                                                "l-*-336"
                                                "l-*-334"
                                                "l-*-332"
                                                "l-*-331"
                                                "l-*-328"
                                                "l-*-327"
                                                "l-*-325"
                                                "l-*-323"
                                                "l-*-321"
                                                "l-*-319"
                                                "l-*-317"
                                                "l-*-315"
                                                "l-*-313"
                                                "l-*-311"
                                                "l-*-309"
                                                "l-*-306"
                                                "l-*-304"
                                                "l-*-302"
                                                "l-*-300"
                                                "l-*-298"
                                                "l-*-296"
                                                "l-*-294"
                                                "l-*-292"
                                                "l-*-290"
                                                "l-*-288"
                                                "l-*-286"
                                                "l-*-284"
                                                "l-*-282"
                                                "l-*-280"
                                                "l-*-278"
                                                "l-*-276"
                                                "l-*-274"
                                                "l-*-272"
                                                "l-*-270"
                                                "l-*-268"
                                                "l-*-266"
                                                "l-*-264"
                                                "l-*-262"
                                                "l-*-260"
                                                "l-*-258"
                                                "l-*-256"
                                                "l-*-255"
                                                "l-*-254"
                                                "l-*-253"
                                                "l-*-252"
                                                "l-*-250"
                                                "l-*-248"
                                                "l-*-246"
                                                "l-*-243"
                                                "l-*-241"
                                                "l-*-239"
                                                "l-*-237"
                                                "l-*-235"
                                                "l-*-233"
                                                "l-*-231"
                                                "l-*-229"
                                                "l-*-227"
                                                "l-*-225"
                                                "l-*-223"
                                                "l-*-221"
                                                "l-*-219"
                                                "l-*-217"
                                                "l-*-215"
                                                "l-*-213"
                                                "l-*-211"
                                                "l-*-209"))
                                             #(ribcage
                                               (define-structure
                                                 define-expansion-accessors
                                                 define-expansion-constructors)
                                               ((top) (top) (top))
                                               ("l-*-47" "l-*-46" "l-*-45")))
                                            (hygiene guile))
                                         keys-11376))
                                 #f)
                             (if (if (eq? (if (if (= (vector-length
                                                       '#(syntax-object
                                                          pad
                                                          ((top)
                                                           #(ribcage
                                                             #(pat exp)
                                                             #((top) (top))
                                                             #("l-*-3890"
                                                               "l-*-3891"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x
                                                               keys
                                                               clauses
                                                               r
                                                               mod)
                                                             #((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                             #("l-*-3879"
                                                               "l-*-3880"
                                                               "l-*-3881"
                                                               "l-*-3882"
                                                               "l-*-3883"))
                                                           #(ribcage
                                                             (gen-syntax-case
                                                               gen-clause
                                                               build-dispatch-call
                                                               convert-pattern)
                                                             ((top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                             ("l-*-3697"
                                                              "l-*-3695"
                                                              "l-*-3693"
                                                              "l-*-3691"))
                                                           #(ribcage
                                                             (lambda-var-list
                                                               gen-var
                                                               strip
                                                               expand-lambda-case
                                                               lambda*-formals
                                                               expand-simple-lambda
                                                               lambda-formals
                                                               ellipsis?
                                                               expand-void
                                                               eval-local-transformer
                                                               expand-local-syntax
                                                               expand-body
                                                               expand-macro
                                                               expand-application
                                                               expand-expr
                                                               expand
                                                               syntax-type
                                                               parse-when-list
                                                               expand-install-global
                                                               expand-top-sequence
                                                               expand-sequence
                                                               source-wrap
                                                               wrap
                                                               bound-id-member?
                                                               distinct-bound-ids?
                                                               valid-bound-ids?
                                                               bound-id=?
                                                               free-id=?
                                                               with-transformer-environment
                                                               transformer-environment
                                                               resolve-identifier
                                                               locally-bound-identifiers
                                                               id-var-name
                                                               same-marks?
                                                               join-marks
                                                               join-wraps
                                                               smart-append
                                                               make-binding-wrap
                                                               extend-ribcage!
                                                               make-empty-ribcage
                                                               new-mark
                                                               anti-mark
                                                               the-anti-mark
                                                               top-marked?
                                                               top-wrap
                                                               empty-wrap
                                                               set-ribcage-labels!
                                                               set-ribcage-marks!
                                                               set-ribcage-symnames!
                                                               ribcage-labels
                                                               ribcage-marks
                                                               ribcage-symnames
                                                               ribcage?
                                                               make-ribcage
                                                               gen-labels
                                                               gen-label
                                                               make-rename
                                                               rename-marks
                                                               rename-new
                                                               rename-old
                                                               subst-rename?
                                                               wrap-subst
                                                               wrap-marks
                                                               make-wrap
                                                               id-sym-name&marks
                                                               id-sym-name
                                                               id?
                                                               nonsymbol-id?
                                                               global-extend
                                                               lookup
                                                               macros-only-env
                                                               extend-var-env
                                                               extend-env
                                                               null-env
                                                               binding-value
                                                               binding-type
                                                               make-binding
                                                               arg-check
                                                               source-annotation
                                                               no-source
                                                               set-syntax-object-module!
                                                               set-syntax-object-wrap!
                                                               set-syntax-object-expression!
                                                               syntax-object-module
                                                               syntax-object-wrap
                                                               syntax-object-expression
                                                               syntax-object?
                                                               make-syntax-object
                                                               build-lexical-var
                                                               build-letrec
                                                               build-named-let
                                                               build-let
                                                               build-sequence
                                                               build-data
                                                               build-primref
                                                               build-lambda-case
                                                               build-case-lambda
                                                               build-simple-lambda
                                                               build-global-definition
                                                               build-global-assignment
                                                               build-global-reference
                                                               analyze-variable
                                                               build-lexical-assignment
                                                               build-lexical-reference
                                                               build-dynlet
                                                               build-conditional
                                                               build-application
                                                               build-void
                                                               maybe-name-value!
                                                               decorate-source
                                                               get-global-definition-hook
                                                               put-global-definition-hook
                                                               session-id
                                                               local-eval-hook
                                                               top-level-eval-hook
                                                               fx<
                                                               fx=
                                                               fx-
                                                               fx+
                                                               set-lambda-meta!
                                                               lambda-meta
                                                               lambda?
                                                               make-dynlet
                                                               make-letrec
                                                               make-let
                                                               make-lambda-case
                                                               make-lambda
                                                               make-sequence
                                                               make-application
                                                               make-conditional
                                                               make-toplevel-define
                                                               make-toplevel-set
                                                               make-toplevel-ref
                                                               make-module-set
                                                               make-module-ref
                                                               make-lexical-set
                                                               make-lexical-ref
                                                               make-primitive-ref
                                                               make-const
                                                               make-void)
                                                             ((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                             ("l-*-476"
                                                              "l-*-474"
                                                              "l-*-472"
                                                              "l-*-470"
                                                              "l-*-468"
                                                              "l-*-466"
                                                              "l-*-464"
                                                              "l-*-462"
                                                              "l-*-460"
                                                              "l-*-458"
                                                              "l-*-456"
                                                              "l-*-454"
                                                              "l-*-452"
                                                              "l-*-450"
                                                              "l-*-448"
                                                              "l-*-446"
                                                              "l-*-444"
                                                              "l-*-442"
                                                              "l-*-440"
                                                              "l-*-438"
                                                              "l-*-436"
                                                              "l-*-434"
                                                              "l-*-432"
                                                              "l-*-430"
                                                              "l-*-428"
                                                              "l-*-426"
                                                              "l-*-424"
                                                              "l-*-422"
                                                              "l-*-420"
                                                              "l-*-418"
                                                              "l-*-416"
                                                              "l-*-414"
                                                              "l-*-412"
                                                              "l-*-410"
                                                              "l-*-408"
                                                              "l-*-406"
                                                              "l-*-404"
                                                              "l-*-402"
                                                              "l-*-400"
                                                              "l-*-399"
                                                              "l-*-397"
                                                              "l-*-394"
                                                              "l-*-393"
                                                              "l-*-392"
                                                              "l-*-390"
                                                              "l-*-389"
                                                              "l-*-387"
                                                              "l-*-385"
                                                              "l-*-383"
                                                              "l-*-381"
                                                              "l-*-379"
                                                              "l-*-377"
                                                              "l-*-375"
                                                              "l-*-373"
                                                              "l-*-370"
                                                              "l-*-368"
                                                              "l-*-367"
                                                              "l-*-365"
                                                              "l-*-363"
                                                              "l-*-361"
                                                              "l-*-359"
                                                              "l-*-358"
                                                              "l-*-357"
                                                              "l-*-356"
                                                              "l-*-354"
                                                              "l-*-353"
                                                              "l-*-350"
                                                              "l-*-348"
                                                              "l-*-346"
                                                              "l-*-344"
                                                              "l-*-342"
                                                              "l-*-340"
                                                              "l-*-338"
                                                              "l-*-337"
                                                              "l-*-336"
                                                              "l-*-334"
                                                              "l-*-332"
                                                              "l-*-331"
                                                              "l-*-328"
                                                              "l-*-327"
                                                              "l-*-325"
                                                              "l-*-323"
                                                              "l-*-321"
                                                              "l-*-319"
                                                              "l-*-317"
                                                              "l-*-315"
                                                              "l-*-313"
                                                              "l-*-311"
                                                              "l-*-309"
                                                              "l-*-306"
                                                              "l-*-304"
                                                              "l-*-302"
                                                              "l-*-300"
                                                              "l-*-298"
                                                              "l-*-296"
                                                              "l-*-294"
                                                              "l-*-292"
                                                              "l-*-290"
                                                              "l-*-288"
                                                              "l-*-286"
                                                              "l-*-284"
                                                              "l-*-282"
                                                              "l-*-280"
                                                              "l-*-278"
                                                              "l-*-276"
                                                              "l-*-274"
                                                              "l-*-272"
                                                              "l-*-270"
                                                              "l-*-268"
                                                              "l-*-266"
                                                              "l-*-264"
                                                              "l-*-262"
                                                              "l-*-260"
                                                              "l-*-258"
                                                              "l-*-256"
                                                              "l-*-255"
                                                              "l-*-254"
                                                              "l-*-253"
                                                              "l-*-252"
                                                              "l-*-250"
                                                              "l-*-248"
                                                              "l-*-246"
                                                              "l-*-243"
                                                              "l-*-241"
                                                              "l-*-239"
                                                              "l-*-237"
                                                              "l-*-235"
                                                              "l-*-233"
                                                              "l-*-231"
                                                              "l-*-229"
                                                              "l-*-227"
                                                              "l-*-225"
                                                              "l-*-223"
                                                              "l-*-221"
                                                              "l-*-219"
                                                              "l-*-217"
                                                              "l-*-215"
                                                              "l-*-213"
                                                              "l-*-211"
                                                              "l-*-209"))
                                                           #(ribcage
                                                             (define-structure
                                                               define-expansion-accessors
                                                               define-expansion-constructors)
                                                             ((top)
                                                              (top)
                                                              (top))
                                                             ("l-*-47"
                                                              "l-*-46"
                                                              "l-*-45")))
                                                          (hygiene guile)))
                                                     4)
                                                #t
                                                #f)
                                            'pad
                                            '#(syntax-object
                                               pad
                                               ((top)
                                                #(ribcage
                                                  #(pat exp)
                                                  #((top) (top))
                                                  #("l-*-3890" "l-*-3891"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(x keys clauses r mod)
                                                  #((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                  #("l-*-3879"
                                                    "l-*-3880"
                                                    "l-*-3881"
                                                    "l-*-3882"
                                                    "l-*-3883"))
                                                #(ribcage
                                                  (gen-syntax-case
                                                    gen-clause
                                                    build-dispatch-call
                                                    convert-pattern)
                                                  ((top) (top) (top) (top))
                                                  ("l-*-3697"
                                                   "l-*-3695"
                                                   "l-*-3693"
                                                   "l-*-3691"))
                                                #(ribcage
                                                  (lambda-var-list
                                                    gen-var
                                                    strip
                                                    expand-lambda-case
                                                    lambda*-formals
                                                    expand-simple-lambda
                                                    lambda-formals
                                                    ellipsis?
                                                    expand-void
                                                    eval-local-transformer
                                                    expand-local-syntax
                                                    expand-body
                                                    expand-macro
                                                    expand-application
                                                    expand-expr
                                                    expand
                                                    syntax-type
                                                    parse-when-list
                                                    expand-install-global
                                                    expand-top-sequence
                                                    expand-sequence
                                                    source-wrap
                                                    wrap
                                                    bound-id-member?
                                                    distinct-bound-ids?
                                                    valid-bound-ids?
                                                    bound-id=?
                                                    free-id=?
                                                    with-transformer-environment
                                                    transformer-environment
                                                    resolve-identifier
                                                    locally-bound-identifiers
                                                    id-var-name
                                                    same-marks?
                                                    join-marks
                                                    join-wraps
                                                    smart-append
                                                    make-binding-wrap
                                                    extend-ribcage!
                                                    make-empty-ribcage
                                                    new-mark
                                                    anti-mark
                                                    the-anti-mark
                                                    top-marked?
                                                    top-wrap
                                                    empty-wrap
                                                    set-ribcage-labels!
                                                    set-ribcage-marks!
                                                    set-ribcage-symnames!
                                                    ribcage-labels
                                                    ribcage-marks
                                                    ribcage-symnames
                                                    ribcage?
                                                    make-ribcage
                                                    gen-labels
                                                    gen-label
                                                    make-rename
                                                    rename-marks
                                                    rename-new
                                                    rename-old
                                                    subst-rename?
                                                    wrap-subst
                                                    wrap-marks
                                                    make-wrap
                                                    id-sym-name&marks
                                                    id-sym-name
                                                    id?
                                                    nonsymbol-id?
                                                    global-extend
                                                    lookup
                                                    macros-only-env
                                                    extend-var-env
                                                    extend-env
                                                    null-env
                                                    binding-value
                                                    binding-type
                                                    make-binding
                                                    arg-check
                                                    source-annotation
                                                    no-source
                                                    set-syntax-object-module!
                                                    set-syntax-object-wrap!
                                                    set-syntax-object-expression!
                                                    syntax-object-module
                                                    syntax-object-wrap
                                                    syntax-object-expression
                                                    syntax-object?
                                                    make-syntax-object
                                                    build-lexical-var
                                                    build-letrec
                                                    build-named-let
                                                    build-let
                                                    build-sequence
                                                    build-data
                                                    build-primref
                                                    build-lambda-case
                                                    build-case-lambda
                                                    build-simple-lambda
                                                    build-global-definition
                                                    build-global-assignment
                                                    build-global-reference
                                                    analyze-variable
                                                    build-lexical-assignment
                                                    build-lexical-reference
                                                    build-dynlet
                                                    build-conditional
                                                    build-application
                                                    build-void
                                                    maybe-name-value!
                                                    decorate-source
                                                    get-global-definition-hook
                                                    put-global-definition-hook
                                                    session-id
                                                    local-eval-hook
                                                    top-level-eval-hook
                                                    fx<
                                                    fx=
                                                    fx-
                                                    fx+
                                                    set-lambda-meta!
                                                    lambda-meta
                                                    lambda?
                                                    make-dynlet
                                                    make-letrec
                                                    make-let
                                                    make-lambda-case
                                                    make-lambda
                                                    make-sequence
                                                    make-application
                                                    make-conditional
                                                    make-toplevel-define
                                                    make-toplevel-set
                                                    make-toplevel-ref
                                                    make-module-set
                                                    make-module-ref
                                                    make-lexical-set
                                                    make-lexical-ref
                                                    make-primitive-ref
                                                    make-const
                                                    make-void)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("l-*-476"
                                                   "l-*-474"
                                                   "l-*-472"
                                                   "l-*-470"
                                                   "l-*-468"
                                                   "l-*-466"
                                                   "l-*-464"
                                                   "l-*-462"
                                                   "l-*-460"
                                                   "l-*-458"
                                                   "l-*-456"
                                                   "l-*-454"
                                                   "l-*-452"
                                                   "l-*-450"
                                                   "l-*-448"
                                                   "l-*-446"
                                                   "l-*-444"
                                                   "l-*-442"
                                                   "l-*-440"
                                                   "l-*-438"
                                                   "l-*-436"
                                                   "l-*-434"
                                                   "l-*-432"
                                                   "l-*-430"
                                                   "l-*-428"
                                                   "l-*-426"
                                                   "l-*-424"
                                                   "l-*-422"
                                                   "l-*-420"
                                                   "l-*-418"
                                                   "l-*-416"
                                                   "l-*-414"
                                                   "l-*-412"
                                                   "l-*-410"
                                                   "l-*-408"
                                                   "l-*-406"
                                                   "l-*-404"
                                                   "l-*-402"
                                                   "l-*-400"
                                                   "l-*-399"
                                                   "l-*-397"
                                                   "l-*-394"
                                                   "l-*-393"
                                                   "l-*-392"
                                                   "l-*-390"
                                                   "l-*-389"
                                                   "l-*-387"
                                                   "l-*-385"
                                                   "l-*-383"
                                                   "l-*-381"
                                                   "l-*-379"
                                                   "l-*-377"
                                                   "l-*-375"
                                                   "l-*-373"
                                                   "l-*-370"
                                                   "l-*-368"
                                                   "l-*-367"
                                                   "l-*-365"
                                                   "l-*-363"
                                                   "l-*-361"
                                                   "l-*-359"
                                                   "l-*-358"
                                                   "l-*-357"
                                                   "l-*-356"
                                                   "l-*-354"
                                                   "l-*-353"
                                                   "l-*-350"
                                                   "l-*-348"
                                                   "l-*-346"
                                                   "l-*-344"
                                                   "l-*-342"
                                                   "l-*-340"
                                                   "l-*-338"
                                                   "l-*-337"
                                                   "l-*-336"
                                                   "l-*-334"
                                                   "l-*-332"
                                                   "l-*-331"
                                                   "l-*-328"
                                                   "l-*-327"
                                                   "l-*-325"
                                                   "l-*-323"
                                                   "l-*-321"
                                                   "l-*-319"
                                                   "l-*-317"
                                                   "l-*-315"
                                                   "l-*-313"
                                                   "l-*-311"
                                                   "l-*-309"
                                                   "l-*-306"
                                                   "l-*-304"
                                                   "l-*-302"
                                                   "l-*-300"
                                                   "l-*-298"
                                                   "l-*-296"
                                                   "l-*-294"
                                                   "l-*-292"
                                                   "l-*-290"
                                                   "l-*-288"
                                                   "l-*-286"
                                                   "l-*-284"
                                                   "l-*-282"
                                                   "l-*-280"
                                                   "l-*-278"
                                                   "l-*-276"
                                                   "l-*-274"
                                                   "l-*-272"
                                                   "l-*-270"
                                                   "l-*-268"
                                                   "l-*-266"
                                                   "l-*-264"
                                                   "l-*-262"
                                                   "l-*-260"
                                                   "l-*-258"
                                                   "l-*-256"
                                                   "l-*-255"
                                                   "l-*-254"
                                                   "l-*-253"
                                                   "l-*-252"
                                                   "l-*-250"
                                                   "l-*-248"
                                                   "l-*-246"
                                                   "l-*-243"
                                                   "l-*-241"
                                                   "l-*-239"
                                                   "l-*-237"
                                                   "l-*-235"
                                                   "l-*-233"
                                                   "l-*-231"
                                                   "l-*-229"
                                                   "l-*-227"
                                                   "l-*-225"
                                                   "l-*-223"
                                                   "l-*-221"
                                                   "l-*-219"
                                                   "l-*-217"
                                                   "l-*-215"
                                                   "l-*-213"
                                                   "l-*-211"
                                                   "l-*-209"))
                                                #(ribcage
                                                  (define-structure
                                                    define-expansion-accessors
                                                    define-expansion-constructors)
                                                  ((top) (top) (top))
                                                  ("l-*-47"
                                                   "l-*-46"
                                                   "l-*-45")))
                                               (hygiene guile)))
                                          (if (if (= (vector-length
                                                       '#(syntax-object
                                                          _
                                                          ((top)
                                                           #(ribcage
                                                             #(pat exp)
                                                             #((top) (top))
                                                             #("l-*-3890"
                                                               "l-*-3891"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x
                                                               keys
                                                               clauses
                                                               r
                                                               mod)
                                                             #((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                             #("l-*-3879"
                                                               "l-*-3880"
                                                               "l-*-3881"
                                                               "l-*-3882"
                                                               "l-*-3883"))
                                                           #(ribcage
                                                             (gen-syntax-case
                                                               gen-clause
                                                               build-dispatch-call
                                                               convert-pattern)
                                                             ((top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                             ("l-*-3697"
                                                              "l-*-3695"
                                                              "l-*-3693"
                                                              "l-*-3691"))
                                                           #(ribcage
                                                             (lambda-var-list
                                                               gen-var
                                                               strip
                                                               expand-lambda-case
                                                               lambda*-formals
                                                               expand-simple-lambda
                                                               lambda-formals
                                                               ellipsis?
                                                               expand-void
                                                               eval-local-transformer
                                                               expand-local-syntax
                                                               expand-body
                                                               expand-macro
                                                               expand-application
                                                               expand-expr
                                                               expand
                                                               syntax-type
                                                               parse-when-list
                                                               expand-install-global
                                                               expand-top-sequence
                                                               expand-sequence
                                                               source-wrap
                                                               wrap
                                                               bound-id-member?
                                                               distinct-bound-ids?
                                                               valid-bound-ids?
                                                               bound-id=?
                                                               free-id=?
                                                               with-transformer-environment
                                                               transformer-environment
                                                               resolve-identifier
                                                               locally-bound-identifiers
                                                               id-var-name
                                                               same-marks?
                                                               join-marks
                                                               join-wraps
                                                               smart-append
                                                               make-binding-wrap
                                                               extend-ribcage!
                                                               make-empty-ribcage
                                                               new-mark
                                                               anti-mark
                                                               the-anti-mark
                                                               top-marked?
                                                               top-wrap
                                                               empty-wrap
                                                               set-ribcage-labels!
                                                               set-ribcage-marks!
                                                               set-ribcage-symnames!
                                                               ribcage-labels
                                                               ribcage-marks
                                                               ribcage-symnames
                                                               ribcage?
                                                               make-ribcage
                                                               gen-labels
                                                               gen-label
                                                               make-rename
                                                               rename-marks
                                                               rename-new
                                                               rename-old
                                                               subst-rename?
                                                               wrap-subst
                                                               wrap-marks
                                                               make-wrap
                                                               id-sym-name&marks
                                                               id-sym-name
                                                               id?
                                                               nonsymbol-id?
                                                               global-extend
                                                               lookup
                                                               macros-only-env
                                                               extend-var-env
                                                               extend-env
                                                               null-env
                                                               binding-value
                                                               binding-type
                                                               make-binding
                                                               arg-check
                                                               source-annotation
                                                               no-source
                                                               set-syntax-object-module!
                                                               set-syntax-object-wrap!
                                                               set-syntax-object-expression!
                                                               syntax-object-module
                                                               syntax-object-wrap
                                                               syntax-object-expression
                                                               syntax-object?
                                                               make-syntax-object
                                                               build-lexical-var
                                                               build-letrec
                                                               build-named-let
                                                               build-let
                                                               build-sequence
                                                               build-data
                                                               build-primref
                                                               build-lambda-case
                                                               build-case-lambda
                                                               build-simple-lambda
                                                               build-global-definition
                                                               build-global-assignment
                                                               build-global-reference
                                                               analyze-variable
                                                               build-lexical-assignment
                                                               build-lexical-reference
                                                               build-dynlet
                                                               build-conditional
                                                               build-application
                                                               build-void
                                                               maybe-name-value!
                                                               decorate-source
                                                               get-global-definition-hook
                                                               put-global-definition-hook
                                                               session-id
                                                               local-eval-hook
                                                               top-level-eval-hook
                                                               fx<
                                                               fx=
                                                               fx-
                                                               fx+
                                                               set-lambda-meta!
                                                               lambda-meta
                                                               lambda?
                                                               make-dynlet
                                                               make-letrec
                                                               make-let
                                                               make-lambda-case
                                                               make-lambda
                                                               make-sequence
                                                               make-application
                                                               make-conditional
                                                               make-toplevel-define
                                                               make-toplevel-set
                                                               make-toplevel-ref
                                                               make-module-set
                                                               make-module-ref
                                                               make-lexical-set
                                                               make-lexical-ref
                                                               make-primitive-ref
                                                               make-const
                                                               make-void)
                                                             ((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                             ("l-*-476"
                                                              "l-*-474"
                                                              "l-*-472"
                                                              "l-*-470"
                                                              "l-*-468"
                                                              "l-*-466"
                                                              "l-*-464"
                                                              "l-*-462"
                                                              "l-*-460"
                                                              "l-*-458"
                                                              "l-*-456"
                                                              "l-*-454"
                                                              "l-*-452"
                                                              "l-*-450"
                                                              "l-*-448"
                                                              "l-*-446"
                                                              "l-*-444"
                                                              "l-*-442"
                                                              "l-*-440"
                                                              "l-*-438"
                                                              "l-*-436"
                                                              "l-*-434"
                                                              "l-*-432"
                                                              "l-*-430"
                                                              "l-*-428"
                                                              "l-*-426"
                                                              "l-*-424"
                                                              "l-*-422"
                                                              "l-*-420"
                                                              "l-*-418"
                                                              "l-*-416"
                                                              "l-*-414"
                                                              "l-*-412"
                                                              "l-*-410"
                                                              "l-*-408"
                                                              "l-*-406"
                                                              "l-*-404"
                                                              "l-*-402"
                                                              "l-*-400"
                                                              "l-*-399"
                                                              "l-*-397"
                                                              "l-*-394"
                                                              "l-*-393"
                                                              "l-*-392"
                                                              "l-*-390"
                                                              "l-*-389"
                                                              "l-*-387"
                                                              "l-*-385"
                                                              "l-*-383"
                                                              "l-*-381"
                                                              "l-*-379"
                                                              "l-*-377"
                                                              "l-*-375"
                                                              "l-*-373"
                                                              "l-*-370"
                                                              "l-*-368"
                                                              "l-*-367"
                                                              "l-*-365"
                                                              "l-*-363"
                                                              "l-*-361"
                                                              "l-*-359"
                                                              "l-*-358"
                                                              "l-*-357"
                                                              "l-*-356"
                                                              "l-*-354"
                                                              "l-*-353"
                                                              "l-*-350"
                                                              "l-*-348"
                                                              "l-*-346"
                                                              "l-*-344"
                                                              "l-*-342"
                                                              "l-*-340"
                                                              "l-*-338"
                                                              "l-*-337"
                                                              "l-*-336"
                                                              "l-*-334"
                                                              "l-*-332"
                                                              "l-*-331"
                                                              "l-*-328"
                                                              "l-*-327"
                                                              "l-*-325"
                                                              "l-*-323"
                                                              "l-*-321"
                                                              "l-*-319"
                                                              "l-*-317"
                                                              "l-*-315"
                                                              "l-*-313"
                                                              "l-*-311"
                                                              "l-*-309"
                                                              "l-*-306"
                                                              "l-*-304"
                                                              "l-*-302"
                                                              "l-*-300"
                                                              "l-*-298"
                                                              "l-*-296"
                                                              "l-*-294"
                                                              "l-*-292"
                                                              "l-*-290"
                                                              "l-*-288"
                                                              "l-*-286"
                                                              "l-*-284"
                                                              "l-*-282"
                                                              "l-*-280"
                                                              "l-*-278"
                                                              "l-*-276"
                                                              "l-*-274"
                                                              "l-*-272"
                                                              "l-*-270"
                                                              "l-*-268"
                                                              "l-*-266"
                                                              "l-*-264"
                                                              "l-*-262"
                                                              "l-*-260"
                                                              "l-*-258"
                                                              "l-*-256"
                                                              "l-*-255"
                                                              "l-*-254"
                                                              "l-*-253"
                                                              "l-*-252"
                                                              "l-*-250"
                                                              "l-*-248"
                                                              "l-*-246"
                                                              "l-*-243"
                                                              "l-*-241"
                                                              "l-*-239"
                                                              "l-*-237"
                                                              "l-*-235"
                                                              "l-*-233"
                                                              "l-*-231"
                                                              "l-*-229"
                                                              "l-*-227"
                                                              "l-*-225"
                                                              "l-*-223"
                                                              "l-*-221"
                                                              "l-*-219"
                                                              "l-*-217"
                                                              "l-*-215"
                                                              "l-*-213"
                                                              "l-*-211"
                                                              "l-*-209"))
                                                           #(ribcage
                                                             (define-structure
                                                               define-expansion-accessors
                                                               define-expansion-constructors)
                                                             ((top)
                                                              (top)
                                                              (top))
                                                             ("l-*-47"
                                                              "l-*-46"
                                                              "l-*-45")))
                                                          (hygiene guile)))
                                                     4)
                                                #t
                                                #f)
                                            '_
                                            '#(syntax-object
                                               _
                                               ((top)
                                                #(ribcage
                                                  #(pat exp)
                                                  #((top) (top))
                                                  #("l-*-3890" "l-*-3891"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(x keys clauses r mod)
                                                  #((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                  #("l-*-3879"
                                                    "l-*-3880"
                                                    "l-*-3881"
                                                    "l-*-3882"
                                                    "l-*-3883"))
                                                #(ribcage
                                                  (gen-syntax-case
                                                    gen-clause
                                                    build-dispatch-call
                                                    convert-pattern)
                                                  ((top) (top) (top) (top))
                                                  ("l-*-3697"
                                                   "l-*-3695"
                                                   "l-*-3693"
                                                   "l-*-3691"))
                                                #(ribcage
                                                  (lambda-var-list
                                                    gen-var
                                                    strip
                                                    expand-lambda-case
                                                    lambda*-formals
                                                    expand-simple-lambda
                                                    lambda-formals
                                                    ellipsis?
                                                    expand-void
                                                    eval-local-transformer
                                                    expand-local-syntax
                                                    expand-body
                                                    expand-macro
                                                    expand-application
                                                    expand-expr
                                                    expand
                                                    syntax-type
                                                    parse-when-list
                                                    expand-install-global
                                                    expand-top-sequence
                                                    expand-sequence
                                                    source-wrap
                                                    wrap
                                                    bound-id-member?
                                                    distinct-bound-ids?
                                                    valid-bound-ids?
                                                    bound-id=?
                                                    free-id=?
                                                    with-transformer-environment
                                                    transformer-environment
                                                    resolve-identifier
                                                    locally-bound-identifiers
                                                    id-var-name
                                                    same-marks?
                                                    join-marks
                                                    join-wraps
                                                    smart-append
                                                    make-binding-wrap
                                                    extend-ribcage!
                                                    make-empty-ribcage
                                                    new-mark
                                                    anti-mark
                                                    the-anti-mark
                                                    top-marked?
                                                    top-wrap
                                                    empty-wrap
                                                    set-ribcage-labels!
                                                    set-ribcage-marks!
                                                    set-ribcage-symnames!
                                                    ribcage-labels
                                                    ribcage-marks
                                                    ribcage-symnames
                                                    ribcage?
                                                    make-ribcage
                                                    gen-labels
                                                    gen-label
                                                    make-rename
                                                    rename-marks
                                                    rename-new
                                                    rename-old
                                                    subst-rename?
                                                    wrap-subst
                                                    wrap-marks
                                                    make-wrap
                                                    id-sym-name&marks
                                                    id-sym-name
                                                    id?
                                                    nonsymbol-id?
                                                    global-extend
                                                    lookup
                                                    macros-only-env
                                                    extend-var-env
                                                    extend-env
                                                    null-env
                                                    binding-value
                                                    binding-type
                                                    make-binding
                                                    arg-check
                                                    source-annotation
                                                    no-source
                                                    set-syntax-object-module!
                                                    set-syntax-object-wrap!
                                                    set-syntax-object-expression!
                                                    syntax-object-module
                                                    syntax-object-wrap
                                                    syntax-object-expression
                                                    syntax-object?
                                                    make-syntax-object
                                                    build-lexical-var
                                                    build-letrec
                                                    build-named-let
                                                    build-let
                                                    build-sequence
                                                    build-data
                                                    build-primref
                                                    build-lambda-case
                                                    build-case-lambda
                                                    build-simple-lambda
                                                    build-global-definition
                                                    build-global-assignment
                                                    build-global-reference
                                                    analyze-variable
                                                    build-lexical-assignment
                                                    build-lexical-reference
                                                    build-dynlet
                                                    build-conditional
                                                    build-application
                                                    build-void
                                                    maybe-name-value!
                                                    decorate-source
                                                    get-global-definition-hook
                                                    put-global-definition-hook
                                                    session-id
                                                    local-eval-hook
                                                    top-level-eval-hook
                                                    fx<
                                                    fx=
                                                    fx-
                                                    fx+
                                                    set-lambda-meta!
                                                    lambda-meta
                                                    lambda?
                                                    make-dynlet
                                                    make-letrec
                                                    make-let
                                                    make-lambda-case
                                                    make-lambda
                                                    make-sequence
                                                    make-application
                                                    make-conditional
                                                    make-toplevel-define
                                                    make-toplevel-set
                                                    make-toplevel-ref
                                                    make-module-set
                                                    make-module-ref
                                                    make-lexical-set
                                                    make-lexical-ref
                                                    make-primitive-ref
                                                    make-const
                                                    make-void)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("l-*-476"
                                                   "l-*-474"
                                                   "l-*-472"
                                                   "l-*-470"
                                                   "l-*-468"
                                                   "l-*-466"
                                                   "l-*-464"
                                                   "l-*-462"
                                                   "l-*-460"
                                                   "l-*-458"
                                                   "l-*-456"
                                                   "l-*-454"
                                                   "l-*-452"
                                                   "l-*-450"
                                                   "l-*-448"
                                                   "l-*-446"
                                                   "l-*-444"
                                                   "l-*-442"
                                                   "l-*-440"
                                                   "l-*-438"
                                                   "l-*-436"
                                                   "l-*-434"
                                                   "l-*-432"
                                                   "l-*-430"
                                                   "l-*-428"
                                                   "l-*-426"
                                                   "l-*-424"
                                                   "l-*-422"
                                                   "l-*-420"
                                                   "l-*-418"
                                                   "l-*-416"
                                                   "l-*-414"
                                                   "l-*-412"
                                                   "l-*-410"
                                                   "l-*-408"
                                                   "l-*-406"
                                                   "l-*-404"
                                                   "l-*-402"
                                                   "l-*-400"
                                                   "l-*-399"
                                                   "l-*-397"
                                                   "l-*-394"
                                                   "l-*-393"
                                                   "l-*-392"
                                                   "l-*-390"
                                                   "l-*-389"
                                                   "l-*-387"
                                                   "l-*-385"
                                                   "l-*-383"
                                                   "l-*-381"
                                                   "l-*-379"
                                                   "l-*-377"
                                                   "l-*-375"
                                                   "l-*-373"
                                                   "l-*-370"
                                                   "l-*-368"
                                                   "l-*-367"
                                                   "l-*-365"
                                                   "l-*-363"
                                                   "l-*-361"
                                                   "l-*-359"
                                                   "l-*-358"
                                                   "l-*-357"
                                                   "l-*-356"
                                                   "l-*-354"
                                                   "l-*-353"
                                                   "l-*-350"
                                                   "l-*-348"
                                                   "l-*-346"
                                                   "l-*-344"
                                                   "l-*-342"
                                                   "l-*-340"
                                                   "l-*-338"
                                                   "l-*-337"
                                                   "l-*-336"
                                                   "l-*-334"
                                                   "l-*-332"
                                                   "l-*-331"
                                                   "l-*-328"
                                                   "l-*-327"
                                                   "l-*-325"
                                                   "l-*-323"
                                                   "l-*-321"
                                                   "l-*-319"
                                                   "l-*-317"
                                                   "l-*-315"
                                                   "l-*-313"
                                                   "l-*-311"
                                                   "l-*-309"
                                                   "l-*-306"
                                                   "l-*-304"
                                                   "l-*-302"
                                                   "l-*-300"
                                                   "l-*-298"
                                                   "l-*-296"
                                                   "l-*-294"
                                                   "l-*-292"
                                                   "l-*-290"
                                                   "l-*-288"
                                                   "l-*-286"
                                                   "l-*-284"
                                                   "l-*-282"
                                                   "l-*-280"
                                                   "l-*-278"
                                                   "l-*-276"
                                                   "l-*-274"
                                                   "l-*-272"
                                                   "l-*-270"
                                                   "l-*-268"
                                                   "l-*-266"
                                                   "l-*-264"
                                                   "l-*-262"
                                                   "l-*-260"
                                                   "l-*-258"
                                                   "l-*-256"
                                                   "l-*-255"
                                                   "l-*-254"
                                                   "l-*-253"
                                                   "l-*-252"
                                                   "l-*-250"
                                                   "l-*-248"
                                                   "l-*-246"
                                                   "l-*-243"
                                                   "l-*-241"
                                                   "l-*-239"
                                                   "l-*-237"
                                                   "l-*-235"
                                                   "l-*-233"
                                                   "l-*-231"
                                                   "l-*-229"
                                                   "l-*-227"
                                                   "l-*-225"
                                                   "l-*-223"
                                                   "l-*-221"
                                                   "l-*-219"
                                                   "l-*-217"
                                                   "l-*-215"
                                                   "l-*-213"
                                                   "l-*-211"
                                                   "l-*-209"))
                                                #(ribcage
                                                  (define-structure
                                                    define-expansion-accessors
                                                    define-expansion-constructors)
                                                  ((top) (top) (top))
                                                  ("l-*-47"
                                                   "l-*-46"
                                                   "l-*-45")))
                                               (hygiene guile))))
                                   (eq? (id-var-name-4313
                                          '#(syntax-object
                                             pad
                                             ((top)
                                              #(ribcage
                                                #(pat exp)
                                                #((top) (top))
                                                #("l-*-3890" "l-*-3891"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(x keys clauses r mod)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("l-*-3879"
                                                  "l-*-3880"
                                                  "l-*-3881"
                                                  "l-*-3882"
                                                  "l-*-3883"))
                                              #(ribcage
                                                (gen-syntax-case
                                                  gen-clause
                                                  build-dispatch-call
                                                  convert-pattern)
                                                ((top) (top) (top) (top))
                                                ("l-*-3697"
                                                 "l-*-3695"
                                                 "l-*-3693"
                                                 "l-*-3691"))
                                              #(ribcage
                                                (lambda-var-list
                                                  gen-var
                                                  strip
                                                  expand-lambda-case
                                                  lambda*-formals
                                                  expand-simple-lambda
                                                  lambda-formals
                                                  ellipsis?
                                                  expand-void
                                                  eval-local-transformer
                                                  expand-local-syntax
                                                  expand-body
                                                  expand-macro
                                                  expand-application
                                                  expand-expr
                                                  expand
                                                  syntax-type
                                                  parse-when-list
                                                  expand-install-global
                                                  expand-top-sequence
                                                  expand-sequence
                                                  source-wrap
                                                  wrap
                                                  bound-id-member?
                                                  distinct-bound-ids?
                                                  valid-bound-ids?
                                                  bound-id=?
                                                  free-id=?
                                                  with-transformer-environment
                                                  transformer-environment
                                                  resolve-identifier
                                                  locally-bound-identifiers
                                                  id-var-name
                                                  same-marks?
                                                  join-marks
                                                  join-wraps
                                                  smart-append
                                                  make-binding-wrap
                                                  extend-ribcage!
                                                  make-empty-ribcage
                                                  new-mark
                                                  anti-mark
                                                  the-anti-mark
                                                  top-marked?
                                                  top-wrap
                                                  empty-wrap
                                                  set-ribcage-labels!
                                                  set-ribcage-marks!
                                                  set-ribcage-symnames!
                                                  ribcage-labels
                                                  ribcage-marks
                                                  ribcage-symnames
                                                  ribcage?
                                                  make-ribcage
                                                  gen-labels
                                                  gen-label
                                                  make-rename
                                                  rename-marks
                                                  rename-new
                                                  rename-old
                                                  subst-rename?
                                                  wrap-subst
                                                  wrap-marks
                                                  make-wrap
                                                  id-sym-name&marks
                                                  id-sym-name
                                                  id?
                                                  nonsymbol-id?
                                                  global-extend
                                                  lookup
                                                  macros-only-env
                                                  extend-var-env
                                                  extend-env
                                                  null-env
                                                  binding-value
                                                  binding-type
                                                  make-binding
                                                  arg-check
                                                  source-annotation
                                                  no-source
                                                  set-syntax-object-module!
                                                  set-syntax-object-wrap!
                                                  set-syntax-object-expression!
                                                  syntax-object-module
                                                  syntax-object-wrap
                                                  syntax-object-expression
                                                  syntax-object?
                                                  make-syntax-object
                                                  build-lexical-var
                                                  build-letrec
                                                  build-named-let
                                                  build-let
                                                  build-sequence
                                                  build-data
                                                  build-primref
                                                  build-lambda-case
                                                  build-case-lambda
                                                  build-simple-lambda
                                                  build-global-definition
                                                  build-global-assignment
                                                  build-global-reference
                                                  analyze-variable
                                                  build-lexical-assignment
                                                  build-lexical-reference
                                                  build-dynlet
                                                  build-conditional
                                                  build-application
                                                  build-void
                                                  maybe-name-value!
                                                  decorate-source
                                                  get-global-definition-hook
                                                  put-global-definition-hook
                                                  session-id
                                                  local-eval-hook
                                                  top-level-eval-hook
                                                  fx<
                                                  fx=
                                                  fx-
                                                  fx+
                                                  set-lambda-meta!
                                                  lambda-meta
                                                  lambda?
                                                  make-dynlet
                                                  make-letrec
                                                  make-let
                                                  make-lambda-case
                                                  make-lambda
                                                  make-sequence
                                                  make-application
                                                  make-conditional
                                                  make-toplevel-define
                                                  make-toplevel-set
                                                  make-toplevel-ref
                                                  make-module-set
                                                  make-module-ref
                                                  make-lexical-set
                                                  make-lexical-ref
                                                  make-primitive-ref
                                                  make-const
                                                  make-void)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("l-*-476"
                                                 "l-*-474"
                                                 "l-*-472"
                                                 "l-*-470"
                                                 "l-*-468"
                                                 "l-*-466"
                                                 "l-*-464"
                                                 "l-*-462"
                                                 "l-*-460"
                                                 "l-*-458"
                                                 "l-*-456"
                                                 "l-*-454"
                                                 "l-*-452"
                                                 "l-*-450"
                                                 "l-*-448"
                                                 "l-*-446"
                                                 "l-*-444"
                                                 "l-*-442"
                                                 "l-*-440"
                                                 "l-*-438"
                                                 "l-*-436"
                                                 "l-*-434"
                                                 "l-*-432"
                                                 "l-*-430"
                                                 "l-*-428"
                                                 "l-*-426"
                                                 "l-*-424"
                                                 "l-*-422"
                                                 "l-*-420"
                                                 "l-*-418"
                                                 "l-*-416"
                                                 "l-*-414"
                                                 "l-*-412"
                                                 "l-*-410"
                                                 "l-*-408"
                                                 "l-*-406"
                                                 "l-*-404"
                                                 "l-*-402"
                                                 "l-*-400"
                                                 "l-*-399"
                                                 "l-*-397"
                                                 "l-*-394"
                                                 "l-*-393"
                                                 "l-*-392"
                                                 "l-*-390"
                                                 "l-*-389"
                                                 "l-*-387"
                                                 "l-*-385"
                                                 "l-*-383"
                                                 "l-*-381"
                                                 "l-*-379"
                                                 "l-*-377"
                                                 "l-*-375"
                                                 "l-*-373"
                                                 "l-*-370"
                                                 "l-*-368"
                                                 "l-*-367"
                                                 "l-*-365"
                                                 "l-*-363"
                                                 "l-*-361"
                                                 "l-*-359"
                                                 "l-*-358"
                                                 "l-*-357"
                                                 "l-*-356"
                                                 "l-*-354"
                                                 "l-*-353"
                                                 "l-*-350"
                                                 "l-*-348"
                                                 "l-*-346"
                                                 "l-*-344"
                                                 "l-*-342"
                                                 "l-*-340"
                                                 "l-*-338"
                                                 "l-*-337"
                                                 "l-*-336"
                                                 "l-*-334"
                                                 "l-*-332"
                                                 "l-*-331"
                                                 "l-*-328"
                                                 "l-*-327"
                                                 "l-*-325"
                                                 "l-*-323"
                                                 "l-*-321"
                                                 "l-*-319"
                                                 "l-*-317"
                                                 "l-*-315"
                                                 "l-*-313"
                                                 "l-*-311"
                                                 "l-*-309"
                                                 "l-*-306"
                                                 "l-*-304"
                                                 "l-*-302"
                                                 "l-*-300"
                                                 "l-*-298"
                                                 "l-*-296"
                                                 "l-*-294"
                                                 "l-*-292"
                                                 "l-*-290"
                                                 "l-*-288"
                                                 "l-*-286"
                                                 "l-*-284"
                                                 "l-*-282"
                                                 "l-*-280"
                                                 "l-*-278"
                                                 "l-*-276"
                                                 "l-*-274"
                                                 "l-*-272"
                                                 "l-*-270"
                                                 "l-*-268"
                                                 "l-*-266"
                                                 "l-*-264"
                                                 "l-*-262"
                                                 "l-*-260"
                                                 "l-*-258"
                                                 "l-*-256"
                                                 "l-*-255"
                                                 "l-*-254"
                                                 "l-*-253"
                                                 "l-*-252"
                                                 "l-*-250"
                                                 "l-*-248"
                                                 "l-*-246"
                                                 "l-*-243"
                                                 "l-*-241"
                                                 "l-*-239"
                                                 "l-*-237"
                                                 "l-*-235"
                                                 "l-*-233"
                                                 "l-*-231"
                                                 "l-*-229"
                                                 "l-*-227"
                                                 "l-*-225"
                                                 "l-*-223"
                                                 "l-*-221"
                                                 "l-*-219"
                                                 "l-*-217"
                                                 "l-*-215"
                                                 "l-*-213"
                                                 "l-*-211"
                                                 "l-*-209"))
                                              #(ribcage
                                                (define-structure
                                                  define-expansion-accessors
                                                  define-expansion-constructors)
                                                ((top) (top) (top))
                                                ("l-*-47" "l-*-46" "l-*-45")))
                                             (hygiene guile))
                                          '(()))
                                        (id-var-name-4313
                                          '#(syntax-object
                                             _
                                             ((top)
                                              #(ribcage
                                                #(pat exp)
                                                #((top) (top))
                                                #("l-*-3890" "l-*-3891"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(x keys clauses r mod)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("l-*-3879"
                                                  "l-*-3880"
                                                  "l-*-3881"
                                                  "l-*-3882"
                                                  "l-*-3883"))
                                              #(ribcage
                                                (gen-syntax-case
                                                  gen-clause
                                                  build-dispatch-call
                                                  convert-pattern)
                                                ((top) (top) (top) (top))
                                                ("l-*-3697"
                                                 "l-*-3695"
                                                 "l-*-3693"
                                                 "l-*-3691"))
                                              #(ribcage
                                                (lambda-var-list
                                                  gen-var
                                                  strip
                                                  expand-lambda-case
                                                  lambda*-formals
                                                  expand-simple-lambda
                                                  lambda-formals
                                                  ellipsis?
                                                  expand-void
                                                  eval-local-transformer
                                                  expand-local-syntax
                                                  expand-body
                                                  expand-macro
                                                  expand-application
                                                  expand-expr
                                                  expand
                                                  syntax-type
                                                  parse-when-list
                                                  expand-install-global
                                                  expand-top-sequence
                                                  expand-sequence
                                                  source-wrap
                                                  wrap
                                                  bound-id-member?
                                                  distinct-bound-ids?
                                                  valid-bound-ids?
                                                  bound-id=?
                                                  free-id=?
                                                  with-transformer-environment
                                                  transformer-environment
                                                  resolve-identifier
                                                  locally-bound-identifiers
                                                  id-var-name
                                                  same-marks?
                                                  join-marks
                                                  join-wraps
                                                  smart-append
                                                  make-binding-wrap
                                                  extend-ribcage!
                                                  make-empty-ribcage
                                                  new-mark
                                                  anti-mark
                                                  the-anti-mark
                                                  top-marked?
                                                  top-wrap
                                                  empty-wrap
                                                  set-ribcage-labels!
                                                  set-ribcage-marks!
                                                  set-ribcage-symnames!
                                                  ribcage-labels
                                                  ribcage-marks
                                                  ribcage-symnames
                                                  ribcage?
                                                  make-ribcage
                                                  gen-labels
                                                  gen-label
                                                  make-rename
                                                  rename-marks
                                                  rename-new
                                                  rename-old
                                                  subst-rename?
                                                  wrap-subst
                                                  wrap-marks
                                                  make-wrap
                                                  id-sym-name&marks
                                                  id-sym-name
                                                  id?
                                                  nonsymbol-id?
                                                  global-extend
                                                  lookup
                                                  macros-only-env
                                                  extend-var-env
                                                  extend-env
                                                  null-env
                                                  binding-value
                                                  binding-type
                                                  make-binding
                                                  arg-check
                                                  source-annotation
                                                  no-source
                                                  set-syntax-object-module!
                                                  set-syntax-object-wrap!
                                                  set-syntax-object-expression!
                                                  syntax-object-module
                                                  syntax-object-wrap
                                                  syntax-object-expression
                                                  syntax-object?
                                                  make-syntax-object
                                                  build-lexical-var
                                                  build-letrec
                                                  build-named-let
                                                  build-let
                                                  build-sequence
                                                  build-data
                                                  build-primref
                                                  build-lambda-case
                                                  build-case-lambda
                                                  build-simple-lambda
                                                  build-global-definition
                                                  build-global-assignment
                                                  build-global-reference
                                                  analyze-variable
                                                  build-lexical-assignment
                                                  build-lexical-reference
                                                  build-dynlet
                                                  build-conditional
                                                  build-application
                                                  build-void
                                                  maybe-name-value!
                                                  decorate-source
                                                  get-global-definition-hook
                                                  put-global-definition-hook
                                                  session-id
                                                  local-eval-hook
                                                  top-level-eval-hook
                                                  fx<
                                                  fx=
                                                  fx-
                                                  fx+
                                                  set-lambda-meta!
                                                  lambda-meta
                                                  lambda?
                                                  make-dynlet
                                                  make-letrec
                                                  make-let
                                                  make-lambda-case
                                                  make-lambda
                                                  make-sequence
                                                  make-application
                                                  make-conditional
                                                  make-toplevel-define
                                                  make-toplevel-set
                                                  make-toplevel-ref
                                                  make-module-set
                                                  make-module-ref
                                                  make-lexical-set
                                                  make-lexical-ref
                                                  make-primitive-ref
                                                  make-const
                                                  make-void)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("l-*-476"
                                                 "l-*-474"
                                                 "l-*-472"
                                                 "l-*-470"
                                                 "l-*-468"
                                                 "l-*-466"
                                                 "l-*-464"
                                                 "l-*-462"
                                                 "l-*-460"
                                                 "l-*-458"
                                                 "l-*-456"
                                                 "l-*-454"
                                                 "l-*-452"
                                                 "l-*-450"
                                                 "l-*-448"
                                                 "l-*-446"
                                                 "l-*-444"
                                                 "l-*-442"
                                                 "l-*-440"
                                                 "l-*-438"
                                                 "l-*-436"
                                                 "l-*-434"
                                                 "l-*-432"
                                                 "l-*-430"
                                                 "l-*-428"
                                                 "l-*-426"
                                                 "l-*-424"
                                                 "l-*-422"
                                                 "l-*-420"
                                                 "l-*-418"
                                                 "l-*-416"
                                                 "l-*-414"
                                                 "l-*-412"
                                                 "l-*-410"
                                                 "l-*-408"
                                                 "l-*-406"
                                                 "l-*-404"
                                                 "l-*-402"
                                                 "l-*-400"
                                                 "l-*-399"
                                                 "l-*-397"
                                                 "l-*-394"
                                                 "l-*-393"
                                                 "l-*-392"
                                                 "l-*-390"
                                                 "l-*-389"
                                                 "l-*-387"
                                                 "l-*-385"
                                                 "l-*-383"
                                                 "l-*-381"
                                                 "l-*-379"
                                                 "l-*-377"
                                                 "l-*-375"
                                                 "l-*-373"
                                                 "l-*-370"
                                                 "l-*-368"
                                                 "l-*-367"
                                                 "l-*-365"
                                                 "l-*-363"
                                                 "l-*-361"
                                                 "l-*-359"
                                                 "l-*-358"
                                                 "l-*-357"
                                                 "l-*-356"
                                                 "l-*-354"
                                                 "l-*-353"
                                                 "l-*-350"
                                                 "l-*-348"
                                                 "l-*-346"
                                                 "l-*-344"
                                                 "l-*-342"
                                                 "l-*-340"
                                                 "l-*-338"
                                                 "l-*-337"
                                                 "l-*-336"
                                                 "l-*-334"
                                                 "l-*-332"
                                                 "l-*-331"
                                                 "l-*-328"
                                                 "l-*-327"
                                                 "l-*-325"
                                                 "l-*-323"
                                                 "l-*-321"
                                                 "l-*-319"
                                                 "l-*-317"
                                                 "l-*-315"
                                                 "l-*-313"
                                                 "l-*-311"
                                                 "l-*-309"
                                                 "l-*-306"
                                                 "l-*-304"
                                                 "l-*-302"
                                                 "l-*-300"
                                                 "l-*-298"
                                                 "l-*-296"
                                                 "l-*-294"
                                                 "l-*-292"
                                                 "l-*-290"
                                                 "l-*-288"
                                                 "l-*-286"
                                                 "l-*-284"
                                                 "l-*-282"
                                                 "l-*-280"
                                                 "l-*-278"
                                                 "l-*-276"
                                                 "l-*-274"
                                                 "l-*-272"
                                                 "l-*-270"
                                                 "l-*-268"
                                                 "l-*-266"
                                                 "l-*-264"
                                                 "l-*-262"
                                                 "l-*-260"
                                                 "l-*-258"
                                                 "l-*-256"
                                                 "l-*-255"
                                                 "l-*-254"
                                                 "l-*-253"
                                                 "l-*-252"
                                                 "l-*-250"
                                                 "l-*-248"
                                                 "l-*-246"
                                                 "l-*-243"
                                                 "l-*-241"
                                                 "l-*-239"
                                                 "l-*-237"
                                                 "l-*-235"
                                                 "l-*-233"
                                                 "l-*-231"
                                                 "l-*-229"
                                                 "l-*-227"
                                                 "l-*-225"
                                                 "l-*-223"
                                                 "l-*-221"
                                                 "l-*-219"
                                                 "l-*-217"
                                                 "l-*-215"
                                                 "l-*-213"
                                                 "l-*-211"
                                                 "l-*-209"))
                                              #(ribcage
                                                (define-structure
                                                  define-expansion-accessors
                                                  define-expansion-constructors)
                                                ((top) (top) (top))
                                                ("l-*-47" "l-*-46" "l-*-45")))
                                             (hygiene guile))
                                          '(())))
                                   #f)
                               (expand-4330 exp-11422 r-11378 '(()) mod-11379)
                               (let ((labels-11625
                                       (list (string-append
                                               "l-"
                                               (session-id-4255)
                                               (symbol->string (gensym "-")))))
                                     (var-11626
                                       (let ((id-11664
                                               (if (if (vector? pat-11421)
                                                     (if (= (vector-length
                                                              pat-11421)
                                                            4)
                                                       (eq? (vector-ref
                                                              pat-11421
                                                              0)
                                                            'syntax-object)
                                                       #f)
                                                     #f)
                                                 (vector-ref pat-11421 1)
                                                 pat-11421)))
                                         (gensym
                                           (string-append
                                             (symbol->string id-11664)
                                             "-")))))
                                 (build-application-4261
                                   #f
                                   (build-simple-lambda-4270
                                     #f
                                     (list (syntax->datum pat-11421))
                                     #f
                                     (list var-11626)
                                     '()
                                     (expand-4330
                                       exp-11422
                                       (extend-env-4288
                                         labels-11625
                                         (list (cons 'syntax
                                                     (cons var-11626 0)))
                                         r-11378)
                                       (make-binding-wrap-4308
                                         (list pat-11421)
                                         labels-11625
                                         '(()))
                                       mod-11379))
                                   (list x-11375))))
                             (gen-clause-10975
                               x-11375
                               keys-11376
                               (cdr clauses-11377)
                               r-11378
                               pat-11421
                               #t
                               exp-11422
                               mod-11379)))
                         tmp-11419)
                       (let ((tmp-11934
                               ($sc-dispatch tmp-11418 '(any any any))))
                         (if tmp-11934
                           (@apply
                             (lambda (pat-11936 fender-11937 exp-11938)
                               (gen-clause-10975
                                 x-11375
                                 keys-11376
                                 (cdr clauses-11377)
                                 r-11378
                                 pat-11936
                                 fender-11937
                                 exp-11938
                                 mod-11379))
                             tmp-11934)
                           (syntax-violation
                             'syntax-case
                             "invalid clause"
                             (car clauses-11377)))))))))))
          (lambda (e-10977 r-10978 w-10979 s-10980 mod-10981)
            (let ((e-10982
                    (wrap-4323
                      (begin
                        (if (if (pair? e-10977) s-10980 #f)
                          (set-source-properties! e-10977 s-10980))
                        e-10977)
                      w-10979
                      mod-10981)))
              (let ((tmp-10984
                      ($sc-dispatch
                        e-10982
                        '(_ any each-any . each-any))))
                (if tmp-10984
                  (@apply
                    (lambda (val-11009 key-11010 m-11011)
                      (if (and-map
                            (lambda (x-11012)
                              (if (if (symbol? x-11012)
                                    #t
                                    (if (if (vector? x-11012)
                                          (if (= (vector-length x-11012) 4)
                                            (eq? (vector-ref x-11012 0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (symbol? (vector-ref x-11012 1))
                                      #f))
                                (not (if (if (if (vector? x-11012)
                                               (if (= (vector-length x-11012)
                                                      4)
                                                 (eq? (vector-ref x-11012 0)
                                                      'syntax-object)
                                                 #f)
                                               #f)
                                           (symbol? (vector-ref x-11012 1))
                                           #f)
                                       (if (eq? (if (if (vector? x-11012)
                                                      (if (= (vector-length
                                                               x-11012)
                                                             4)
                                                        (eq? (vector-ref
                                                               x-11012
                                                               0)
                                                             'syntax-object)
                                                        #f)
                                                      #f)
                                                  (vector-ref x-11012 1)
                                                  x-11012)
                                                (if (if (= (vector-length
                                                             '#(syntax-object
                                                                ...
                                                                ((top)
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("l-*-2266"))
                                                                 #(ribcage
                                                                   (lambda-var-list
                                                                     gen-var
                                                                     strip
                                                                     expand-lambda-case
                                                                     lambda*-formals
                                                                     expand-simple-lambda
                                                                     lambda-formals
                                                                     ellipsis?
                                                                     expand-void
                                                                     eval-local-transformer
                                                                     expand-local-syntax
                                                                     expand-body
                                                                     expand-macro
                                                                     expand-application
                                                                     expand-expr
                                                                     expand
                                                                     syntax-type
                                                                     parse-when-list
                                                                     expand-install-global
                                                                     expand-top-sequence
                                                                     expand-sequence
                                                                     source-wrap
                                                                     wrap
                                                                     bound-id-member?
                                                                     distinct-bound-ids?
                                                                     valid-bound-ids?
                                                                     bound-id=?
                                                                     free-id=?
                                                                     with-transformer-environment
                                                                     transformer-environment
                                                                     resolve-identifier
                                                                     locally-bound-identifiers
                                                                     id-var-name
                                                                     same-marks?
                                                                     join-marks
                                                                     join-wraps
                                                                     smart-append
                                                                     make-binding-wrap
                                                                     extend-ribcage!
                                                                     make-empty-ribcage
                                                                     new-mark
                                                                     anti-mark
                                                                     the-anti-mark
                                                                     top-marked?
                                                                     top-wrap
                                                                     empty-wrap
                                                                     set-ribcage-labels!
                                                                     set-ribcage-marks!
                                                                     set-ribcage-symnames!
                                                                     ribcage-labels
                                                                     ribcage-marks
                                                                     ribcage-symnames
                                                                     ribcage?
                                                                     make-ribcage
                                                                     gen-labels
                                                                     gen-label
                                                                     make-rename
                                                                     rename-marks
                                                                     rename-new
                                                                     rename-old
                                                                     subst-rename?
                                                                     wrap-subst
                                                                     wrap-marks
                                                                     make-wrap
                                                                     id-sym-name&marks
                                                                     id-sym-name
                                                                     id?
                                                                     nonsymbol-id?
                                                                     global-extend
                                                                     lookup
                                                                     macros-only-env
                                                                     extend-var-env
                                                                     extend-env
                                                                     null-env
                                                                     binding-value
                                                                     binding-type
                                                                     make-binding
                                                                     arg-check
                                                                     source-annotation
                                                                     no-source
                                                                     set-syntax-object-module!
                                                                     set-syntax-object-wrap!
                                                                     set-syntax-object-expression!
                                                                     syntax-object-module
                                                                     syntax-object-wrap
                                                                     syntax-object-expression
                                                                     syntax-object?
                                                                     make-syntax-object
                                                                     build-lexical-var
                                                                     build-letrec
                                                                     build-named-let
                                                                     build-let
                                                                     build-sequence
                                                                     build-data
                                                                     build-primref
                                                                     build-lambda-case
                                                                     build-case-lambda
                                                                     build-simple-lambda
                                                                     build-global-definition
                                                                     build-global-assignment
                                                                     build-global-reference
                                                                     analyze-variable
                                                                     build-lexical-assignment
                                                                     build-lexical-reference
                                                                     build-dynlet
                                                                     build-conditional
                                                                     build-application
                                                                     build-void
                                                                     maybe-name-value!
                                                                     decorate-source
                                                                     get-global-definition-hook
                                                                     put-global-definition-hook
                                                                     session-id
                                                                     local-eval-hook
                                                                     top-level-eval-hook
                                                                     fx<
                                                                     fx=
                                                                     fx-
                                                                     fx+
                                                                     set-lambda-meta!
                                                                     lambda-meta
                                                                     lambda?
                                                                     make-dynlet
                                                                     make-letrec
                                                                     make-let
                                                                     make-lambda-case
                                                                     make-lambda
                                                                     make-sequence
                                                                     make-application
                                                                     make-conditional
                                                                     make-toplevel-define
                                                                     make-toplevel-set
                                                                     make-toplevel-ref
                                                                     make-module-set
                                                                     make-module-ref
                                                                     make-lexical-set
                                                                     make-lexical-ref
                                                                     make-primitive-ref
                                                                     make-const
                                                                     make-void)
                                                                   ((top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top))
                                                                   ("l-*-476"
                                                                    "l-*-474"
                                                                    "l-*-472"
                                                                    "l-*-470"
                                                                    "l-*-468"
                                                                    "l-*-466"
                                                                    "l-*-464"
                                                                    "l-*-462"
                                                                    "l-*-460"
                                                                    "l-*-458"
                                                                    "l-*-456"
                                                                    "l-*-454"
                                                                    "l-*-452"
                                                                    "l-*-450"
                                                                    "l-*-448"
                                                                    "l-*-446"
                                                                    "l-*-444"
                                                                    "l-*-442"
                                                                    "l-*-440"
                                                                    "l-*-438"
                                                                    "l-*-436"
                                                                    "l-*-434"
                                                                    "l-*-432"
                                                                    "l-*-430"
                                                                    "l-*-428"
                                                                    "l-*-426"
                                                                    "l-*-424"
                                                                    "l-*-422"
                                                                    "l-*-420"
                                                                    "l-*-418"
                                                                    "l-*-416"
                                                                    "l-*-414"
                                                                    "l-*-412"
                                                                    "l-*-410"
                                                                    "l-*-408"
                                                                    "l-*-406"
                                                                    "l-*-404"
                                                                    "l-*-402"
                                                                    "l-*-400"
                                                                    "l-*-399"
                                                                    "l-*-397"
                                                                    "l-*-394"
                                                                    "l-*-393"
                                                                    "l-*-392"
                                                                    "l-*-390"
                                                                    "l-*-389"
                                                                    "l-*-387"
                                                                    "l-*-385"
                                                                    "l-*-383"
                                                                    "l-*-381"
                                                                    "l-*-379"
                                                                    "l-*-377"
                                                                    "l-*-375"
                                                                    "l-*-373"
                                                                    "l-*-370"
                                                                    "l-*-368"
                                                                    "l-*-367"
                                                                    "l-*-365"
                                                                    "l-*-363"
                                                                    "l-*-361"
                                                                    "l-*-359"
                                                                    "l-*-358"
                                                                    "l-*-357"
                                                                    "l-*-356"
                                                                    "l-*-354"
                                                                    "l-*-353"
                                                                    "l-*-350"
                                                                    "l-*-348"
                                                                    "l-*-346"
                                                                    "l-*-344"
                                                                    "l-*-342"
                                                                    "l-*-340"
                                                                    "l-*-338"
                                                                    "l-*-337"
                                                                    "l-*-336"
                                                                    "l-*-334"
                                                                    "l-*-332"
                                                                    "l-*-331"
                                                                    "l-*-328"
                                                                    "l-*-327"
                                                                    "l-*-325"
                                                                    "l-*-323"
                                                                    "l-*-321"
                                                                    "l-*-319"
                                                                    "l-*-317"
                                                                    "l-*-315"
                                                                    "l-*-313"
                                                                    "l-*-311"
                                                                    "l-*-309"
                                                                    "l-*-306"
                                                                    "l-*-304"
                                                                    "l-*-302"
                                                                    "l-*-300"
                                                                    "l-*-298"
                                                                    "l-*-296"
                                                                    "l-*-294"
                                                                    "l-*-292"
                                                                    "l-*-290"
                                                                    "l-*-288"
                                                                    "l-*-286"
                                                                    "l-*-284"
                                                                    "l-*-282"
                                                                    "l-*-280"
                                                                    "l-*-278"
                                                                    "l-*-276"
                                                                    "l-*-274"
                                                                    "l-*-272"
                                                                    "l-*-270"
                                                                    "l-*-268"
                                                                    "l-*-266"
                                                                    "l-*-264"
                                                                    "l-*-262"
                                                                    "l-*-260"
                                                                    "l-*-258"
                                                                    "l-*-256"
                                                                    "l-*-255"
                                                                    "l-*-254"
                                                                    "l-*-253"
                                                                    "l-*-252"
                                                                    "l-*-250"
                                                                    "l-*-248"
                                                                    "l-*-246"
                                                                    "l-*-243"
                                                                    "l-*-241"
                                                                    "l-*-239"
                                                                    "l-*-237"
                                                                    "l-*-235"
                                                                    "l-*-233"
                                                                    "l-*-231"
                                                                    "l-*-229"
                                                                    "l-*-227"
                                                                    "l-*-225"
                                                                    "l-*-223"
                                                                    "l-*-221"
                                                                    "l-*-219"
                                                                    "l-*-217"
                                                                    "l-*-215"
                                                                    "l-*-213"
                                                                    "l-*-211"
                                                                    "l-*-209"))
                                                                 #(ribcage
                                                                   (define-structure
                                                                     define-expansion-accessors
                                                                     define-expansion-constructors)
                                                                   ((top)
                                                                    (top)
                                                                    (top))
                                                                   ("l-*-47"
                                                                    "l-*-46"
                                                                    "l-*-45")))
                                                                (hygiene
                                                                  guile)))
                                                           4)
                                                      #t
                                                      #f)
                                                  '...
                                                  '#(syntax-object
                                                     ...
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(x)
                                                        #((top))
                                                        #("l-*-2266"))
                                                      #(ribcage
                                                        (lambda-var-list
                                                          gen-var
                                                          strip
                                                          expand-lambda-case
                                                          lambda*-formals
                                                          expand-simple-lambda
                                                          lambda-formals
                                                          ellipsis?
                                                          expand-void
                                                          eval-local-transformer
                                                          expand-local-syntax
                                                          expand-body
                                                          expand-macro
                                                          expand-application
                                                          expand-expr
                                                          expand
                                                          syntax-type
                                                          parse-when-list
                                                          expand-install-global
                                                          expand-top-sequence
                                                          expand-sequence
                                                          source-wrap
                                                          wrap
                                                          bound-id-member?
                                                          distinct-bound-ids?
                                                          valid-bound-ids?
                                                          bound-id=?
                                                          free-id=?
                                                          with-transformer-environment
                                                          transformer-environment
                                                          resolve-identifier
                                                          locally-bound-identifiers
                                                          id-var-name
                                                          same-marks?
                                                          join-marks
                                                          join-wraps
                                                          smart-append
                                                          make-binding-wrap
                                                          extend-ribcage!
                                                          make-empty-ribcage
                                                          new-mark
                                                          anti-mark
                                                          the-anti-mark
                                                          top-marked?
                                                          top-wrap
                                                          empty-wrap
                                                          set-ribcage-labels!
                                                          set-ribcage-marks!
                                                          set-ribcage-symnames!
                                                          ribcage-labels
                                                          ribcage-marks
                                                          ribcage-symnames
                                                          ribcage?
                                                          make-ribcage
                                                          gen-labels
                                                          gen-label
                                                          make-rename
                                                          rename-marks
                                                          rename-new
                                                          rename-old
                                                          subst-rename?
                                                          wrap-subst
                                                          wrap-marks
                                                          make-wrap
                                                          id-sym-name&marks
                                                          id-sym-name
                                                          id?
                                                          nonsymbol-id?
                                                          global-extend
                                                          lookup
                                                          macros-only-env
                                                          extend-var-env
                                                          extend-env
                                                          null-env
                                                          binding-value
                                                          binding-type
                                                          make-binding
                                                          arg-check
                                                          source-annotation
                                                          no-source
                                                          set-syntax-object-module!
                                                          set-syntax-object-wrap!
                                                          set-syntax-object-expression!
                                                          syntax-object-module
                                                          syntax-object-wrap
                                                          syntax-object-expression
                                                          syntax-object?
                                                          make-syntax-object
                                                          build-lexical-var
                                                          build-letrec
                                                          build-named-let
                                                          build-let
                                                          build-sequence
                                                          build-data
                                                          build-primref
                                                          build-lambda-case
                                                          build-case-lambda
                                                          build-simple-lambda
                                                          build-global-definition
                                                          build-global-assignment
                                                          build-global-reference
                                                          analyze-variable
                                                          build-lexical-assignment
                                                          build-lexical-reference
                                                          build-dynlet
                                                          build-conditional
                                                          build-application
                                                          build-void
                                                          maybe-name-value!
                                                          decorate-source
                                                          get-global-definition-hook
                                                          put-global-definition-hook
                                                          session-id
                                                          local-eval-hook
                                                          top-level-eval-hook
                                                          fx<
                                                          fx=
                                                          fx-
                                                          fx+
                                                          set-lambda-meta!
                                                          lambda-meta
                                                          lambda?
                                                          make-dynlet
                                                          make-letrec
                                                          make-let
                                                          make-lambda-case
                                                          make-lambda
                                                          make-sequence
                                                          make-application
                                                          make-conditional
                                                          make-toplevel-define
                                                          make-toplevel-set
                                                          make-toplevel-ref
                                                          make-module-set
                                                          make-module-ref
                                                          make-lexical-set
                                                          make-lexical-ref
                                                          make-primitive-ref
                                                          make-const
                                                          make-void)
                                                        ((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                        ("l-*-476"
                                                         "l-*-474"
                                                         "l-*-472"
                                                         "l-*-470"
                                                         "l-*-468"
                                                         "l-*-466"
                                                         "l-*-464"
                                                         "l-*-462"
                                                         "l-*-460"
                                                         "l-*-458"
                                                         "l-*-456"
                                                         "l-*-454"
                                                         "l-*-452"
                                                         "l-*-450"
                                                         "l-*-448"
                                                         "l-*-446"
                                                         "l-*-444"
                                                         "l-*-442"
                                                         "l-*-440"
                                                         "l-*-438"
                                                         "l-*-436"
                                                         "l-*-434"
                                                         "l-*-432"
                                                         "l-*-430"
                                                         "l-*-428"
                                                         "l-*-426"
                                                         "l-*-424"
                                                         "l-*-422"
                                                         "l-*-420"
                                                         "l-*-418"
                                                         "l-*-416"
                                                         "l-*-414"
                                                         "l-*-412"
                                                         "l-*-410"
                                                         "l-*-408"
                                                         "l-*-406"
                                                         "l-*-404"
                                                         "l-*-402"
                                                         "l-*-400"
                                                         "l-*-399"
                                                         "l-*-397"
                                                         "l-*-394"
                                                         "l-*-393"
                                                         "l-*-392"
                                                         "l-*-390"
                                                         "l-*-389"
                                                         "l-*-387"
                                                         "l-*-385"
                                                         "l-*-383"
                                                         "l-*-381"
                                                         "l-*-379"
                                                         "l-*-377"
                                                         "l-*-375"
                                                         "l-*-373"
                                                         "l-*-370"
                                                         "l-*-368"
                                                         "l-*-367"
                                                         "l-*-365"
                                                         "l-*-363"
                                                         "l-*-361"
                                                         "l-*-359"
                                                         "l-*-358"
                                                         "l-*-357"
                                                         "l-*-356"
                                                         "l-*-354"
                                                         "l-*-353"
                                                         "l-*-350"
                                                         "l-*-348"
                                                         "l-*-346"
                                                         "l-*-344"
                                                         "l-*-342"
                                                         "l-*-340"
                                                         "l-*-338"
                                                         "l-*-337"
                                                         "l-*-336"
                                                         "l-*-334"
                                                         "l-*-332"
                                                         "l-*-331"
                                                         "l-*-328"
                                                         "l-*-327"
                                                         "l-*-325"
                                                         "l-*-323"
                                                         "l-*-321"
                                                         "l-*-319"
                                                         "l-*-317"
                                                         "l-*-315"
                                                         "l-*-313"
                                                         "l-*-311"
                                                         "l-*-309"
                                                         "l-*-306"
                                                         "l-*-304"
                                                         "l-*-302"
                                                         "l-*-300"
                                                         "l-*-298"
                                                         "l-*-296"
                                                         "l-*-294"
                                                         "l-*-292"
                                                         "l-*-290"
                                                         "l-*-288"
                                                         "l-*-286"
                                                         "l-*-284"
                                                         "l-*-282"
                                                         "l-*-280"
                                                         "l-*-278"
                                                         "l-*-276"
                                                         "l-*-274"
                                                         "l-*-272"
                                                         "l-*-270"
                                                         "l-*-268"
                                                         "l-*-266"
                                                         "l-*-264"
                                                         "l-*-262"
                                                         "l-*-260"
                                                         "l-*-258"
                                                         "l-*-256"
                                                         "l-*-255"
                                                         "l-*-254"
                                                         "l-*-253"
                                                         "l-*-252"
                                                         "l-*-250"
                                                         "l-*-248"
                                                         "l-*-246"
                                                         "l-*-243"
                                                         "l-*-241"
                                                         "l-*-239"
                                                         "l-*-237"
                                                         "l-*-235"
                                                         "l-*-233"
                                                         "l-*-231"
                                                         "l-*-229"
                                                         "l-*-227"
                                                         "l-*-225"
                                                         "l-*-223"
                                                         "l-*-221"
                                                         "l-*-219"
                                                         "l-*-217"
                                                         "l-*-215"
                                                         "l-*-213"
                                                         "l-*-211"
                                                         "l-*-209"))
                                                      #(ribcage
                                                        (define-structure
                                                          define-expansion-accessors
                                                          define-expansion-constructors)
                                                        ((top) (top) (top))
                                                        ("l-*-47"
                                                         "l-*-46"
                                                         "l-*-45")))
                                                     (hygiene guile))))
                                         (eq? (id-var-name-4313 x-11012 '(()))
                                              (id-var-name-4313
                                                '#(syntax-object
                                                   ...
                                                   ((top)
                                                    #(ribcage () () ())
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("l-*-2266"))
                                                    #(ribcage
                                                      (lambda-var-list
                                                        gen-var
                                                        strip
                                                        expand-lambda-case
                                                        lambda*-formals
                                                        expand-simple-lambda
                                                        lambda-formals
                                                        ellipsis?
                                                        expand-void
                                                        eval-local-transformer
                                                        expand-local-syntax
                                                        expand-body
                                                        expand-macro
                                                        expand-application
                                                        expand-expr
                                                        expand
                                                        syntax-type
                                                        parse-when-list
                                                        expand-install-global
                                                        expand-top-sequence
                                                        expand-sequence
                                                        source-wrap
                                                        wrap
                                                        bound-id-member?
                                                        distinct-bound-ids?
                                                        valid-bound-ids?
                                                        bound-id=?
                                                        free-id=?
                                                        with-transformer-environment
                                                        transformer-environment
                                                        resolve-identifier
                                                        locally-bound-identifiers
                                                        id-var-name
                                                        same-marks?
                                                        join-marks
                                                        join-wraps
                                                        smart-append
                                                        make-binding-wrap
                                                        extend-ribcage!
                                                        make-empty-ribcage
                                                        new-mark
                                                        anti-mark
                                                        the-anti-mark
                                                        top-marked?
                                                        top-wrap
                                                        empty-wrap
                                                        set-ribcage-labels!
                                                        set-ribcage-marks!
                                                        set-ribcage-symnames!
                                                        ribcage-labels
                                                        ribcage-marks
                                                        ribcage-symnames
                                                        ribcage?
                                                        make-ribcage
                                                        gen-labels
                                                        gen-label
                                                        make-rename
                                                        rename-marks
                                                        rename-new
                                                        rename-old
                                                        subst-rename?
                                                        wrap-subst
                                                        wrap-marks
                                                        make-wrap
                                                        id-sym-name&marks
                                                        id-sym-name
                                                        id?
                                                        nonsymbol-id?
                                                        global-extend
                                                        lookup
                                                        macros-only-env
                                                        extend-var-env
                                                        extend-env
                                                        null-env
                                                        binding-value
                                                        binding-type
                                                        make-binding
                                                        arg-check
                                                        source-annotation
                                                        no-source
                                                        set-syntax-object-module!
                                                        set-syntax-object-wrap!
                                                        set-syntax-object-expression!
                                                        syntax-object-module
                                                        syntax-object-wrap
                                                        syntax-object-expression
                                                        syntax-object?
                                                        make-syntax-object
                                                        build-lexical-var
                                                        build-letrec
                                                        build-named-let
                                                        build-let
                                                        build-sequence
                                                        build-data
                                                        build-primref
                                                        build-lambda-case
                                                        build-case-lambda
                                                        build-simple-lambda
                                                        build-global-definition
                                                        build-global-assignment
                                                        build-global-reference
                                                        analyze-variable
                                                        build-lexical-assignment
                                                        build-lexical-reference
                                                        build-dynlet
                                                        build-conditional
                                                        build-application
                                                        build-void
                                                        maybe-name-value!
                                                        decorate-source
                                                        get-global-definition-hook
                                                        put-global-definition-hook
                                                        session-id
                                                        local-eval-hook
                                                        top-level-eval-hook
                                                        fx<
                                                        fx=
                                                        fx-
                                                        fx+
                                                        set-lambda-meta!
                                                        lambda-meta
                                                        lambda?
                                                        make-dynlet
                                                        make-letrec
                                                        make-let
                                                        make-lambda-case
                                                        make-lambda
                                                        make-sequence
                                                        make-application
                                                        make-conditional
                                                        make-toplevel-define
                                                        make-toplevel-set
                                                        make-toplevel-ref
                                                        make-module-set
                                                        make-module-ref
                                                        make-lexical-set
                                                        make-lexical-ref
                                                        make-primitive-ref
                                                        make-const
                                                        make-void)
                                                      ((top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top))
                                                      ("l-*-476"
                                                       "l-*-474"
                                                       "l-*-472"
                                                       "l-*-470"
                                                       "l-*-468"
                                                       "l-*-466"
                                                       "l-*-464"
                                                       "l-*-462"
                                                       "l-*-460"
                                                       "l-*-458"
                                                       "l-*-456"
                                                       "l-*-454"
                                                       "l-*-452"
                                                       "l-*-450"
                                                       "l-*-448"
                                                       "l-*-446"
                                                       "l-*-444"
                                                       "l-*-442"
                                                       "l-*-440"
                                                       "l-*-438"
                                                       "l-*-436"
                                                       "l-*-434"
                                                       "l-*-432"
                                                       "l-*-430"
                                                       "l-*-428"
                                                       "l-*-426"
                                                       "l-*-424"
                                                       "l-*-422"
                                                       "l-*-420"
                                                       "l-*-418"
                                                       "l-*-416"
                                                       "l-*-414"
                                                       "l-*-412"
                                                       "l-*-410"
                                                       "l-*-408"
                                                       "l-*-406"
                                                       "l-*-404"
                                                       "l-*-402"
                                                       "l-*-400"
                                                       "l-*-399"
                                                       "l-*-397"
                                                       "l-*-394"
                                                       "l-*-393"
                                                       "l-*-392"
                                                       "l-*-390"
                                                       "l-*-389"
                                                       "l-*-387"
                                                       "l-*-385"
                                                       "l-*-383"
                                                       "l-*-381"
                                                       "l-*-379"
                                                       "l-*-377"
                                                       "l-*-375"
                                                       "l-*-373"
                                                       "l-*-370"
                                                       "l-*-368"
                                                       "l-*-367"
                                                       "l-*-365"
                                                       "l-*-363"
                                                       "l-*-361"
                                                       "l-*-359"
                                                       "l-*-358"
                                                       "l-*-357"
                                                       "l-*-356"
                                                       "l-*-354"
                                                       "l-*-353"
                                                       "l-*-350"
                                                       "l-*-348"
                                                       "l-*-346"
                                                       "l-*-344"
                                                       "l-*-342"
                                                       "l-*-340"
                                                       "l-*-338"
                                                       "l-*-337"
                                                       "l-*-336"
                                                       "l-*-334"
                                                       "l-*-332"
                                                       "l-*-331"
                                                       "l-*-328"
                                                       "l-*-327"
                                                       "l-*-325"
                                                       "l-*-323"
                                                       "l-*-321"
                                                       "l-*-319"
                                                       "l-*-317"
                                                       "l-*-315"
                                                       "l-*-313"
                                                       "l-*-311"
                                                       "l-*-309"
                                                       "l-*-306"
                                                       "l-*-304"
                                                       "l-*-302"
                                                       "l-*-300"
                                                       "l-*-298"
                                                       "l-*-296"
                                                       "l-*-294"
                                                       "l-*-292"
                                                       "l-*-290"
                                                       "l-*-288"
                                                       "l-*-286"
                                                       "l-*-284"
                                                       "l-*-282"
                                                       "l-*-280"
                                                       "l-*-278"
                                                       "l-*-276"
                                                       "l-*-274"
                                                       "l-*-272"
                                                       "l-*-270"
                                                       "l-*-268"
                                                       "l-*-266"
                                                       "l-*-264"
                                                       "l-*-262"
                                                       "l-*-260"
                                                       "l-*-258"
                                                       "l-*-256"
                                                       "l-*-255"
                                                       "l-*-254"
                                                       "l-*-253"
                                                       "l-*-252"
                                                       "l-*-250"
                                                       "l-*-248"
                                                       "l-*-246"
                                                       "l-*-243"
                                                       "l-*-241"
                                                       "l-*-239"
                                                       "l-*-237"
                                                       "l-*-235"
                                                       "l-*-233"
                                                       "l-*-231"
                                                       "l-*-229"
                                                       "l-*-227"
                                                       "l-*-225"
                                                       "l-*-223"
                                                       "l-*-221"
                                                       "l-*-219"
                                                       "l-*-217"
                                                       "l-*-215"
                                                       "l-*-213"
                                                       "l-*-211"
                                                       "l-*-209"))
                                                    #(ribcage
                                                      (define-structure
                                                        define-expansion-accessors
                                                        define-expansion-constructors)
                                                      ((top) (top) (top))
                                                      ("l-*-47"
                                                       "l-*-46"
                                                       "l-*-45")))
                                                   (hygiene guile))
                                                '(())))
                                         #f)
                                       #f))
                                #f))
                            key-11010)
                        (let ((x-11138
                                (gensym
                                  (string-append (symbol->string 'tmp) "-"))))
                          (build-application-4261
                            s-10980
                            (let ((req-11268 (list 'tmp))
                                  (vars-11270 (list x-11138))
                                  (exp-11272
                                    (gen-syntax-case-10976
                                      (make-struct/no-tail
                                        (vector-ref %expanded-vtables 3)
                                        #f
                                        'tmp
                                        x-11138)
                                      key-11010
                                      m-11011
                                      r-10978
                                      mod-10981)))
                              (let ((body-11277
                                      (make-struct/no-tail
                                        (vector-ref %expanded-vtables 14)
                                        #f
                                        req-11268
                                        #f
                                        #f
                                        #f
                                        '()
                                        vars-11270
                                        exp-11272
                                        #f)))
                                (make-struct/no-tail
                                  (vector-ref %expanded-vtables 13)
                                  #f
                                  '()
                                  body-11277)))
                            (list (expand-4330
                                    val-11009
                                    r-10978
                                    '(())
                                    mod-10981))))
                        (syntax-violation
                          'syntax-case
                          "invalid literals list"
                          e-10982)))
                    tmp-10984)
                  (syntax-violation
                    #f
                    "source expression failed to match any pattern"
                    e-10982)))))))
      (set! macroexpand
        (lambda*
          (x-13695
            #:optional
            (m-13696 'e)
            (esew-13697 '(eval)))
          (expand-top-sequence-4326
            (list x-13695)
            '()
            '((top))
            #f
            m-13696
            esew-13697
            (cons 'hygiene (module-name (current-module))))))
      (set! identifier?
        (lambda (x-13700)
          (if (if (vector? x-13700)
                (if (= (vector-length x-13700) 4)
                  (eq? (vector-ref x-13700 0) 'syntax-object)
                  #f)
                #f)
            (symbol? (vector-ref x-13700 1))
            #f)))
      (set! datum->syntax
        (lambda (id-13725 datum-13726)
          (let ((wrap-13731 (vector-ref id-13725 2))
                (module-13732 (vector-ref id-13725 3)))
            (vector
              'syntax-object
              datum-13726
              wrap-13731
              module-13732))))
      (set! syntax->datum
        (lambda (x-13739) (strip-4343 x-13739 '(()))))
      (set! syntax-source
        (lambda (x-13742)
          (source-annotation-4287 x-13742)))
      (set! generate-temporaries
        (lambda (ls-13895)
          (begin
            (if (not (list? ls-13895))
              (syntax-violation
                'generate-temporaries
                "invalid argument"
                ls-13895))
            (let ((mod-13903
                    (cons 'hygiene (module-name (current-module)))))
              (map (lambda (x-13904)
                     (wrap-4323 (gensym "t-") '((top)) mod-13903))
                   ls-13895)))))
      (set! free-identifier=?
        (lambda (x-13908 y-13909)
          (begin
            (if (not (if (if (vector? x-13908)
                           (if (= (vector-length x-13908) 4)
                             (eq? (vector-ref x-13908 0) 'syntax-object)
                             #f)
                           #f)
                       (symbol? (vector-ref x-13908 1))
                       #f))
              (syntax-violation
                'free-identifier=?
                "invalid argument"
                x-13908))
            (if (not (if (if (vector? y-13909)
                           (if (= (vector-length y-13909) 4)
                             (eq? (vector-ref y-13909 0) 'syntax-object)
                             #f)
                           #f)
                       (symbol? (vector-ref y-13909 1))
                       #f))
              (syntax-violation
                'free-identifier=?
                "invalid argument"
                y-13909))
            (if (eq? (if (if (vector? x-13908)
                           (if (= (vector-length x-13908) 4)
                             (eq? (vector-ref x-13908 0) 'syntax-object)
                             #f)
                           #f)
                       (vector-ref x-13908 1)
                       x-13908)
                     (if (if (vector? y-13909)
                           (if (= (vector-length y-13909) 4)
                             (eq? (vector-ref y-13909 0) 'syntax-object)
                             #f)
                           #f)
                       (vector-ref y-13909 1)
                       y-13909))
              (eq? (id-var-name-4313 x-13908 '(()))
                   (id-var-name-4313 y-13909 '(())))
              #f))))
      (set! bound-identifier=?
        (lambda (x-14059 y-14060)
          (begin
            (if (not (if (if (vector? x-14059)
                           (if (= (vector-length x-14059) 4)
                             (eq? (vector-ref x-14059 0) 'syntax-object)
                             #f)
                           #f)
                       (symbol? (vector-ref x-14059 1))
                       #f))
              (syntax-violation
                'bound-identifier=?
                "invalid argument"
                x-14059))
            (if (not (if (if (vector? y-14060)
                           (if (= (vector-length y-14060) 4)
                             (eq? (vector-ref y-14060 0) 'syntax-object)
                             #f)
                           #f)
                       (symbol? (vector-ref y-14060 1))
                       #f))
              (syntax-violation
                'bound-identifier=?
                "invalid argument"
                y-14060))
            (if (if (if (vector? x-14059)
                      (if (= (vector-length x-14059) 4)
                        (eq? (vector-ref x-14059 0) 'syntax-object)
                        #f)
                      #f)
                  (if (vector? y-14060)
                    (if (= (vector-length y-14060) 4)
                      (eq? (vector-ref y-14060 0) 'syntax-object)
                      #f)
                    #f)
                  #f)
              (if (eq? (vector-ref x-14059 1)
                       (vector-ref y-14060 1))
                (same-marks?-4312
                  (car (vector-ref x-14059 2))
                  (car (vector-ref y-14060 2)))
                #f)
              (eq? x-14059 y-14060)))))
      (set! syntax-violation
        (lambda*
          (who-14193
            message-14194
            form-14195
            #:optional
            (subform-14196 #f))
          (begin
            (if (not (if (not who-14193)
                       (not who-14193)
                       (let ((t-14214 (string? who-14193)))
                         (if t-14214 t-14214 (symbol? who-14193)))))
              (syntax-violation
                'syntax-violation
                "invalid argument"
                who-14193))
            (if (not (string? message-14194))
              (syntax-violation
                'syntax-violation
                "invalid argument"
                message-14194))
            (throw 'syntax-error
                   who-14193
                   message-14194
                   (let ((t-14245 (source-annotation-4287 subform-14196)))
                     (if t-14245
                       t-14245
                       (source-annotation-4287 form-14195)))
                   (strip-4343 form-14195 '(()))
                   (if subform-14196
                     (strip-4343 subform-14196 '(()))
                     #f)))))
      (letrec*
        ((syntax-local-binding-14637
           (lambda (id-14770)
             (begin
               (if (not (if (if (vector? id-14770)
                              (if (= (vector-length id-14770) 4)
                                (eq? (vector-ref id-14770 0) 'syntax-object)
                                #f)
                              #f)
                          (symbol? (vector-ref id-14770 1))
                          #f))
                 (syntax-violation
                   'syntax-local-binding
                   "invalid argument"
                   id-14770))
               ((fluid-ref transformer-environment-4316)
                (lambda (e-14810
                         r-14811
                         w-14812
                         s-14813
                         rib-14814
                         mod-14815)
                  (call-with-values
                    (lambda ()
                      (let ((id-14818 (vector-ref id-14770 1))
                            (w-14819
                              (let ((w-14830 (vector-ref id-14770 2)))
                                (let ((ms-14831 (car w-14830))
                                      (s-14832 (cdr w-14830)))
                                  (if (if (pair? ms-14831)
                                        (eq? (car ms-14831) #f)
                                        #f)
                                    (cons (cdr ms-14831)
                                          (if rib-14814
                                            (cons rib-14814 (cdr s-14832))
                                            (cdr s-14832)))
                                    (cons ms-14831
                                          (if rib-14814
                                            (cons rib-14814 s-14832)
                                            s-14832))))))
                            (mod-14821 (vector-ref id-14770 3)))
                        (let ((n-14824 (id-var-name-4313 id-14818 w-14819)))
                          (if (symbol? n-14824)
                            (let ((mod-14838
                                    (if (if (vector? id-14818)
                                          (if (= (vector-length id-14818) 4)
                                            (eq? (vector-ref id-14818 0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (vector-ref id-14818 3)
                                      mod-14821)))
                              (let ((b-14839
                                      (let ((t-14840
                                              (get-global-definition-hook-4257
                                                n-14824
                                                mod-14838)))
                                        (if t-14840 t-14840 '(global)))))
                                (if (eq? (car b-14839) 'global)
                                  (values 'global n-14824 mod-14838)
                                  (values
                                    (car b-14839)
                                    (cdr b-14839)
                                    mod-14838))))
                            (if (string? n-14824)
                              (let ((mod-14866
                                      (if (if (vector? id-14818)
                                            (if (= (vector-length id-14818) 4)
                                              (eq? (vector-ref id-14818 0)
                                                   'syntax-object)
                                              #f)
                                            #f)
                                        (vector-ref id-14818 3)
                                        mod-14821)))
                                (let ((b-14867
                                        (let ((t-14868
                                                (assq-ref r-14811 n-14824)))
                                          (if t-14868
                                            t-14868
                                            '(displaced-lexical)))))
                                  (values
                                    (car b-14867)
                                    (cdr b-14867)
                                    mod-14866)))
                              (error "unexpected id-var-name"
                                     id-14818
                                     w-14819
                                     n-14824))))))
                    (lambda (type-14881 value-14882 mod-14883)
                      (if (eqv? type-14881 'lexical)
                        (values 'lexical value-14882)
                        (if (eqv? type-14881 'macro)
                          (values 'macro value-14882)
                          (if (eqv? type-14881 'syntax)
                            (values 'pattern-variable value-14882)
                            (if (eqv? type-14881 'displaced-lexical)
                              (values 'displaced-lexical #f)
                              (if (eqv? type-14881 'global)
                                (values
                                  'global
                                  (cons value-14882 (cdr mod-14883)))
                                (values 'other #f)))))))))))))
         (syntax-locally-bound-identifiers-14638
           (lambda (id-14905)
             (begin
               (if (not (if (if (vector? id-14905)
                              (if (= (vector-length id-14905) 4)
                                (eq? (vector-ref id-14905 0) 'syntax-object)
                                #f)
                              #f)
                          (symbol? (vector-ref id-14905 1))
                          #f))
                 (syntax-violation
                   'syntax-locally-bound-identifiers
                   "invalid argument"
                   id-14905))
               (locally-bound-identifiers-4314
                 (vector-ref id-14905 2)
                 (vector-ref id-14905 3))))))
        (begin
          (define!
            'syntax-module
            (lambda (id-14640)
              (begin
                (if (not (if (if (vector? id-14640)
                               (if (= (vector-length id-14640) 4)
                                 (eq? (vector-ref id-14640 0) 'syntax-object)
                                 #f)
                               #f)
                           (symbol? (vector-ref id-14640 1))
                           #f))
                  (syntax-violation
                    'syntax-module
                    "invalid argument"
                    id-14640))
                (cdr (vector-ref id-14640 3)))))
          (define!
            'syntax-local-binding
            syntax-local-binding-14637)
          (define!
            'syntax-locally-bound-identifiers
            syntax-locally-bound-identifiers-14638)))
      (letrec*
        ((match-each-15012
           (lambda (e-15599 p-15600 w-15601 mod-15602)
             (if (pair? e-15599)
               (let ((first-15603
                       (match-15018
                         (car e-15599)
                         p-15600
                         w-15601
                         '()
                         mod-15602)))
                 (if first-15603
                   (let ((rest-15606
                           (match-each-15012
                             (cdr e-15599)
                             p-15600
                             w-15601
                             mod-15602)))
                     (if rest-15606 (cons first-15603 rest-15606) #f))
                   #f))
               (if (null? e-15599)
                 '()
                 (if (if (vector? e-15599)
                       (if (= (vector-length e-15599) 4)
                         (eq? (vector-ref e-15599 0) 'syntax-object)
                         #f)
                       #f)
                   (match-each-15012
                     (vector-ref e-15599 1)
                     p-15600
                     (join-wraps-4310 w-15601 (vector-ref e-15599 2))
                     (vector-ref e-15599 3))
                   #f)))))
         (match-each-any-15014
           (lambda (e-15634 w-15635 mod-15636)
             (if (pair? e-15634)
               (let ((l-15637
                       (match-each-any-15014
                         (cdr e-15634)
                         w-15635
                         mod-15636)))
                 (if l-15637
                   (cons (wrap-4323 (car e-15634) w-15635 mod-15636)
                         l-15637)
                   #f))
               (if (null? e-15634)
                 '()
                 (if (if (vector? e-15634)
                       (if (= (vector-length e-15634) 4)
                         (eq? (vector-ref e-15634 0) 'syntax-object)
                         #f)
                       #f)
                   (match-each-any-15014
                     (vector-ref e-15634 1)
                     (join-wraps-4310 w-15635 (vector-ref e-15634 2))
                     mod-15636)
                   #f)))))
         (match-empty-15015
           (lambda (p-15661 r-15662)
             (if (null? p-15661)
               r-15662
               (if (eq? p-15661 '_)
                 r-15662
                 (if (eq? p-15661 'any)
                   (cons '() r-15662)
                   (if (pair? p-15661)
                     (match-empty-15015
                       (car p-15661)
                       (match-empty-15015 (cdr p-15661) r-15662))
                     (if (eq? p-15661 'each-any)
                       (cons '() r-15662)
                       (let ((key-15663 (vector-ref p-15661 0)))
                         (if (eqv? key-15663 'each)
                           (match-empty-15015
                             (vector-ref p-15661 1)
                             r-15662)
                           (if (eqv? key-15663 'each+)
                             (match-empty-15015
                               (vector-ref p-15661 1)
                               (match-empty-15015
                                 (reverse (vector-ref p-15661 2))
                                 (match-empty-15015
                                   (vector-ref p-15661 3)
                                   r-15662)))
                             (if (if (eqv? key-15663 'free-id)
                                   #t
                                   (eqv? key-15663 'atom))
                               r-15662
                               (if (eqv? key-15663 'vector)
                                 (match-empty-15015
                                   (vector-ref p-15661 1)
                                   r-15662)))))))))))))
         (combine-15016
           (lambda (r*-15682 r-15683)
             (if (null? (car r*-15682))
               r-15683
               (cons (map car r*-15682)
                     (combine-15016 (map cdr r*-15682) r-15683)))))
         (match*-15017
           (lambda (e-15047 p-15048 w-15049 r-15050 mod-15051)
             (if (null? p-15048)
               (if (null? e-15047) r-15050 #f)
               (if (pair? p-15048)
                 (if (pair? e-15047)
                   (match-15018
                     (car e-15047)
                     (car p-15048)
                     w-15049
                     (match-15018
                       (cdr e-15047)
                       (cdr p-15048)
                       w-15049
                       r-15050
                       mod-15051)
                     mod-15051)
                   #f)
                 (if (eq? p-15048 'each-any)
                   (let ((l-15056
                           (match-each-any-15014 e-15047 w-15049 mod-15051)))
                     (if l-15056 (cons l-15056 r-15050) #f))
                   (let ((key-15061 (vector-ref p-15048 0)))
                     (if (eqv? key-15061 'each)
                       (if (null? e-15047)
                         (match-empty-15015
                           (vector-ref p-15048 1)
                           r-15050)
                         (let ((l-15068
                                 (match-each-15012
                                   e-15047
                                   (vector-ref p-15048 1)
                                   w-15049
                                   mod-15051)))
                           (if l-15068
                             (letrec*
                               ((collect-15071
                                  (lambda (l-15122)
                                    (if (null? (car l-15122))
                                      r-15050
                                      (cons (map car l-15122)
                                            (collect-15071
                                              (map cdr l-15122)))))))
                               (collect-15071 l-15068))
                             #f)))
                       (if (eqv? key-15061 'each+)
                         (call-with-values
                           (lambda ()
                             (let ((x-pat-15131 (vector-ref p-15048 1))
                                   (y-pat-15132 (vector-ref p-15048 2))
                                   (z-pat-15133 (vector-ref p-15048 3)))
                               (letrec*
                                 ((f-15137
                                    (lambda (e-15139 w-15140)
                                      (if (pair? e-15139)
                                        (call-with-values
                                          (lambda ()
                                            (f-15137 (cdr e-15139) w-15140))
                                          (lambda (xr*-15141
                                                   y-pat-15142
                                                   r-15143)
                                            (if r-15143
                                              (if (null? y-pat-15142)
                                                (let ((xr-15144
                                                        (match-15018
                                                          (car e-15139)
                                                          x-pat-15131
                                                          w-15140
                                                          '()
                                                          mod-15051)))
                                                  (if xr-15144
                                                    (values
                                                      (cons xr-15144 xr*-15141)
                                                      y-pat-15142
                                                      r-15143)
                                                    (values #f #f #f)))
                                                (values
                                                  '()
                                                  (cdr y-pat-15142)
                                                  (match-15018
                                                    (car e-15139)
                                                    (car y-pat-15142)
                                                    w-15140
                                                    r-15143
                                                    mod-15051)))
                                              (values #f #f #f))))
                                        (if (if (vector? e-15139)
                                              (if (= (vector-length e-15139) 4)
                                                (eq? (vector-ref e-15139 0)
                                                     'syntax-object)
                                                #f)
                                              #f)
                                          (f-15137
                                            (vector-ref e-15139 1)
                                            (join-wraps-4310 w-15140 e-15139))
                                          (values
                                            '()
                                            y-pat-15132
                                            (match-15018
                                              e-15139
                                              z-pat-15133
                                              w-15140
                                              r-15050
                                              mod-15051)))))))
                                 (f-15137 e-15047 w-15049))))
                           (lambda (xr*-15170 y-pat-15171 r-15172)
                             (if r-15172
                               (if (null? y-pat-15171)
                                 (if (null? xr*-15170)
                                   (match-empty-15015
                                     (vector-ref p-15048 1)
                                     r-15172)
                                   (combine-15016 xr*-15170 r-15172))
                                 #f)
                               #f)))
                         (if (eqv? key-15061 'free-id)
                           (if (if (symbol? e-15047)
                                 #t
                                 (if (if (vector? e-15047)
                                       (if (= (vector-length e-15047) 4)
                                         (eq? (vector-ref e-15047 0)
                                              'syntax-object)
                                         #f)
                                       #f)
                                   (symbol? (vector-ref e-15047 1))
                                   #f))
                             (if (let ((i-15503
                                         (wrap-4323 e-15047 w-15049 mod-15051))
                                       (j-15504 (vector-ref p-15048 1)))
                                   (if (eq? (if (if (vector? i-15503)
                                                  (if (= (vector-length
                                                           i-15503)
                                                         4)
                                                    (eq? (vector-ref i-15503 0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (vector-ref i-15503 1)
                                              i-15503)
                                            (if (if (vector? j-15504)
                                                  (if (= (vector-length
                                                           j-15504)
                                                         4)
                                                    (eq? (vector-ref j-15504 0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (vector-ref j-15504 1)
                                              j-15504))
                                     (eq? (id-var-name-4313 i-15503 '(()))
                                          (id-var-name-4313 j-15504 '(())))
                                     #f))
                               r-15050
                               #f)
                             #f)
                           (if (eqv? key-15061 'atom)
                             (if (equal?
                                   (vector-ref p-15048 1)
                                   (strip-4343 e-15047 w-15049))
                               r-15050
                               #f)
                             (if (eqv? key-15061 'vector)
                               (if (vector? e-15047)
                                 (match-15018
                                   (vector->list e-15047)
                                   (vector-ref p-15048 1)
                                   w-15049
                                   r-15050
                                   mod-15051)
                                 #f))))))))))))
         (match-15018
           (lambda (e-15564 p-15565 w-15566 r-15567 mod-15568)
             (if (not r-15567)
               #f
               (if (eq? p-15565 '_)
                 r-15567
                 (if (eq? p-15565 'any)
                   (cons (wrap-4323 e-15564 w-15566 mod-15568)
                         r-15567)
                   (if (if (vector? e-15564)
                         (if (= (vector-length e-15564) 4)
                           (eq? (vector-ref e-15564 0) 'syntax-object)
                           #f)
                         #f)
                     (match*-15017
                       (vector-ref e-15564 1)
                       p-15565
                       (join-wraps-4310 w-15566 (vector-ref e-15564 2))
                       r-15567
                       (vector-ref e-15564 3))
                     (match*-15017
                       e-15564
                       p-15565
                       w-15566
                       r-15567
                       mod-15568))))))))
        (set! $sc-dispatch
          (lambda (e-15019 p-15020)
            (if (eq? p-15020 'any)
              (list e-15019)
              (if (eq? p-15020 '_)
                '()
                (if (if (vector? e-15019)
                      (if (= (vector-length e-15019) 4)
                        (eq? (vector-ref e-15019 0) 'syntax-object)
                        #f)
                      #f)
                  (match*-15017
                    (vector-ref e-15019 1)
                    p-15020
                    (vector-ref e-15019 2)
                    '()
                    (vector-ref e-15019 3))
                  (match*-15017 e-15019 p-15020 '(()) '() #f))))))))))

(define with-syntax
  (make-syntax-transformer
    'with-syntax
    'macro
    (lambda (x-28006)
      (let ((tmp-28008
              ($sc-dispatch x-28006 '(_ () any . each-any))))
        (if tmp-28008
          (@apply
            (lambda (e1-28012 e2-28013)
              (cons '#(syntax-object
                       let
                       ((top)
                        #(ribcage
                          #(e1 e2)
                          #((top) (top))
                          #("l-*-27979" "l-*-27980"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("l-*-27976")))
                       (hygiene guile))
                    (cons '() (cons e1-28012 e2-28013))))
            tmp-28008)
          (let ((tmp-28014
                  ($sc-dispatch
                    x-28006
                    '(_ ((any any)) any . each-any))))
            (if tmp-28014
              (@apply
                (lambda (out-28018 in-28019 e1-28020 e2-28021)
                  (list '#(syntax-object
                           syntax-case
                           ((top)
                            #(ribcage
                              #(out in e1 e2)
                              #((top) (top) (top) (top))
                              #("l-*-27985"
                                "l-*-27986"
                                "l-*-27987"
                                "l-*-27988"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("l-*-27976")))
                           (hygiene guile))
                        in-28019
                        '()
                        (list out-28018
                              (cons '#(syntax-object
                                       let
                                       ((top)
                                        #(ribcage
                                          #(out in e1 e2)
                                          #((top) (top) (top) (top))
                                          #("l-*-27985"
                                            "l-*-27986"
                                            "l-*-27987"
                                            "l-*-27988"))
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(x)
                                          #((top))
                                          #("l-*-27976")))
                                       (hygiene guile))
                                    (cons '() (cons e1-28020 e2-28021))))))
                tmp-28014)
              (let ((tmp-28022
                      ($sc-dispatch
                        x-28006
                        '(_ #(each (any any)) any . each-any))))
                (if tmp-28022
                  (@apply
                    (lambda (out-28026 in-28027 e1-28028 e2-28029)
                      (list '#(syntax-object
                               syntax-case
                               ((top)
                                #(ribcage
                                  #(out in e1 e2)
                                  #((top) (top) (top) (top))
                                  #("l-*-27995"
                                    "l-*-27996"
                                    "l-*-27997"
                                    "l-*-27998"))
                                #(ribcage () () ())
                                #(ribcage #(x) #((top)) #("l-*-27976")))
                               (hygiene guile))
                            (cons '#(syntax-object
                                     list
                                     ((top)
                                      #(ribcage
                                        #(out in e1 e2)
                                        #((top) (top) (top) (top))
                                        #("l-*-27995"
                                          "l-*-27996"
                                          "l-*-27997"
                                          "l-*-27998"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("l-*-27976")))
                                     (hygiene guile))
                                  in-28027)
                            '()
                            (list out-28026
                                  (cons '#(syntax-object
                                           let
                                           ((top)
                                            #(ribcage
                                              #(out in e1 e2)
                                              #((top) (top) (top) (top))
                                              #("l-*-27995"
                                                "l-*-27996"
                                                "l-*-27997"
                                                "l-*-27998"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(x)
                                              #((top))
                                              #("l-*-27976")))
                                           (hygiene guile))
                                        (cons '() (cons e1-28028 e2-28029))))))
                    tmp-28022)
                  (syntax-violation
                    #f
                    "source expression failed to match any pattern"
                    x-28006))))))))))

(define syntax-rules
  (make-syntax-transformer
    'syntax-rules
    'macro
    (lambda (x-28083)
      (let ((tmp-28085
              ($sc-dispatch
                x-28083
                '(_ each-any . #(each ((any . any) any))))))
        (if tmp-28085
          (@apply
            (lambda (k-28089
                     keyword-28090
                     pattern-28091
                     template-28092)
              (list '#(syntax-object
                       lambda
                       ((top)
                        #(ribcage
                          #(k keyword pattern template)
                          #((top) (top) (top) (top))
                          #("l-*-28046"
                            "l-*-28047"
                            "l-*-28048"
                            "l-*-28049"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("l-*-28043")))
                       (hygiene guile))
                    '(#(syntax-object
                        x
                        ((top)
                         #(ribcage
                           #(k keyword pattern template)
                           #((top) (top) (top) (top))
                           #("l-*-28046"
                             "l-*-28047"
                             "l-*-28048"
                             "l-*-28049"))
                         #(ribcage () () ())
                         #(ribcage #(x) #((top)) #("l-*-28043")))
                        (hygiene guile)))
                    (vector
                      '(#(syntax-object
                          macro-type
                          ((top)
                           #(ribcage
                             #(k keyword pattern template)
                             #((top) (top) (top) (top))
                             #("l-*-28046"
                               "l-*-28047"
                               "l-*-28048"
                               "l-*-28049"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("l-*-28043")))
                          (hygiene guile))
                        .
                        #(syntax-object
                          syntax-rules
                          ((top)
                           #(ribcage
                             #(k keyword pattern template)
                             #((top) (top) (top) (top))
                             #("l-*-28046"
                               "l-*-28047"
                               "l-*-28048"
                               "l-*-28049"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("l-*-28043")))
                          (hygiene guile)))
                      (cons '#(syntax-object
                               patterns
                               ((top)
                                #(ribcage
                                  #(k keyword pattern template)
                                  #((top) (top) (top) (top))
                                  #("l-*-28046"
                                    "l-*-28047"
                                    "l-*-28048"
                                    "l-*-28049"))
                                #(ribcage () () ())
                                #(ribcage #(x) #((top)) #("l-*-28043")))
                               (hygiene guile))
                            pattern-28091))
                    (cons '#(syntax-object
                             syntax-case
                             ((top)
                              #(ribcage
                                #(k keyword pattern template)
                                #((top) (top) (top) (top))
                                #("l-*-28046"
                                  "l-*-28047"
                                  "l-*-28048"
                                  "l-*-28049"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("l-*-28043")))
                             (hygiene guile))
                          (cons '#(syntax-object
                                   x
                                   ((top)
                                    #(ribcage
                                      #(k keyword pattern template)
                                      #((top) (top) (top) (top))
                                      #("l-*-28046"
                                        "l-*-28047"
                                        "l-*-28048"
                                        "l-*-28049"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("l-*-28043")))
                                   (hygiene guile))
                                (cons k-28089
                                      (map (lambda (tmp-28057-28093
                                                    tmp-28056-28094)
                                             (list (cons '#(syntax-object
                                                            dummy
                                                            ((top)
                                                             #(ribcage
                                                               #(k
                                                                 keyword
                                                                 pattern
                                                                 template)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("l-*-28046"
                                                                 "l-*-28047"
                                                                 "l-*-28048"
                                                                 "l-*-28049"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("l-*-28043")))
                                                            (hygiene guile))
                                                         tmp-28056-28094)
                                                   (list '#(syntax-object
                                                            syntax
                                                            ((top)
                                                             #(ribcage
                                                               #(k
                                                                 keyword
                                                                 pattern
                                                                 template)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("l-*-28046"
                                                                 "l-*-28047"
                                                                 "l-*-28048"
                                                                 "l-*-28049"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("l-*-28043")))
                                                            (hygiene guile))
                                                         tmp-28057-28093)))
                                           template-28092
                                           pattern-28091))))))
            tmp-28085)
          (let ((tmp-28095
                  ($sc-dispatch
                    x-28083
                    '(_ each-any any . #(each ((any . any) any))))))
            (if (if tmp-28095
                  (@apply
                    (lambda (k-28099
                             docstring-28100
                             keyword-28101
                             pattern-28102
                             template-28103)
                      (string? (syntax->datum docstring-28100)))
                    tmp-28095)
                  #f)
              (@apply
                (lambda (k-28104
                         docstring-28105
                         keyword-28106
                         pattern-28107
                         template-28108)
                  (list '#(syntax-object
                           lambda
                           ((top)
                            #(ribcage
                              #(k docstring keyword pattern template)
                              #((top) (top) (top) (top) (top))
                              #("l-*-28069"
                                "l-*-28070"
                                "l-*-28071"
                                "l-*-28072"
                                "l-*-28073"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("l-*-28043")))
                           (hygiene guile))
                        '(#(syntax-object
                            x
                            ((top)
                             #(ribcage
                               #(k docstring keyword pattern template)
                               #((top) (top) (top) (top) (top))
                               #("l-*-28069"
                                 "l-*-28070"
                                 "l-*-28071"
                                 "l-*-28072"
                                 "l-*-28073"))
                             #(ribcage () () ())
                             #(ribcage #(x) #((top)) #("l-*-28043")))
                            (hygiene guile)))
                        docstring-28105
                        (vector
                          '(#(syntax-object
                              macro-type
                              ((top)
                               #(ribcage
                                 #(k docstring keyword pattern template)
                                 #((top) (top) (top) (top) (top))
                                 #("l-*-28069"
                                   "l-*-28070"
                                   "l-*-28071"
                                   "l-*-28072"
                                   "l-*-28073"))
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("l-*-28043")))
                              (hygiene guile))
                            .
                            #(syntax-object
                              syntax-rules
                              ((top)
                               #(ribcage
                                 #(k docstring keyword pattern template)
                                 #((top) (top) (top) (top) (top))
                                 #("l-*-28069"
                                   "l-*-28070"
                                   "l-*-28071"
                                   "l-*-28072"
                                   "l-*-28073"))
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("l-*-28043")))
                              (hygiene guile)))
                          (cons '#(syntax-object
                                   patterns
                                   ((top)
                                    #(ribcage
                                      #(k docstring keyword pattern template)
                                      #((top) (top) (top) (top) (top))
                                      #("l-*-28069"
                                        "l-*-28070"
                                        "l-*-28071"
                                        "l-*-28072"
                                        "l-*-28073"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("l-*-28043")))
                                   (hygiene guile))
                                pattern-28107))
                        (cons '#(syntax-object
                                 syntax-case
                                 ((top)
                                  #(ribcage
                                    #(k docstring keyword pattern template)
                                    #((top) (top) (top) (top) (top))
                                    #("l-*-28069"
                                      "l-*-28070"
                                      "l-*-28071"
                                      "l-*-28072"
                                      "l-*-28073"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("l-*-28043")))
                                 (hygiene guile))
                              (cons '#(syntax-object
                                       x
                                       ((top)
                                        #(ribcage
                                          #(k
                                            docstring
                                            keyword
                                            pattern
                                            template)
                                          #((top) (top) (top) (top) (top))
                                          #("l-*-28069"
                                            "l-*-28070"
                                            "l-*-28071"
                                            "l-*-28072"
                                            "l-*-28073"))
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(x)
                                          #((top))
                                          #("l-*-28043")))
                                       (hygiene guile))
                                    (cons k-28104
                                          (map (lambda (tmp-28082-28109
                                                        tmp-28081-28110)
                                                 (list (cons '#(syntax-object
                                                                dummy
                                                                ((top)
                                                                 #(ribcage
                                                                   #(k
                                                                     docstring
                                                                     keyword
                                                                     pattern
                                                                     template)
                                                                   #((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                   #("l-*-28069"
                                                                     "l-*-28070"
                                                                     "l-*-28071"
                                                                     "l-*-28072"
                                                                     "l-*-28073"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("l-*-28043")))
                                                                (hygiene
                                                                  guile))
                                                             tmp-28081-28110)
                                                       (list '#(syntax-object
                                                                syntax
                                                                ((top)
                                                                 #(ribcage
                                                                   #(k
                                                                     docstring
                                                                     keyword
                                                                     pattern
                                                                     template)
                                                                   #((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                   #("l-*-28069"
                                                                     "l-*-28070"
                                                                     "l-*-28071"
                                                                     "l-*-28072"
                                                                     "l-*-28073"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("l-*-28043")))
                                                                (hygiene
                                                                  guile))
                                                             tmp-28082-28109)))
                                               template-28108
                                               pattern-28107))))))
                tmp-28095)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                x-28083))))))))

(define define-syntax-rule
  (make-syntax-transformer
    'define-syntax-rule
    'macro
    (lambda (x-28147)
      (let ((tmp-28149
              ($sc-dispatch x-28147 '(_ (any . any) any))))
        (if tmp-28149
          (@apply
            (lambda (name-28153 pattern-28154 template-28155)
              (list '#(syntax-object
                       define-syntax
                       ((top)
                        #(ribcage
                          #(name pattern template)
                          #((top) (top) (top))
                          #("l-*-28124" "l-*-28125" "l-*-28126"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("l-*-28121")))
                       (hygiene guile))
                    name-28153
                    (list '#(syntax-object
                             syntax-rules
                             ((top)
                              #(ribcage
                                #(name pattern template)
                                #((top) (top) (top))
                                #("l-*-28124" "l-*-28125" "l-*-28126"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("l-*-28121")))
                             (hygiene guile))
                          '()
                          (list (cons '#(syntax-object
                                         _
                                         ((top)
                                          #(ribcage
                                            #(name pattern template)
                                            #((top) (top) (top))
                                            #("l-*-28124"
                                              "l-*-28125"
                                              "l-*-28126"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(x)
                                            #((top))
                                            #("l-*-28121")))
                                         (hygiene guile))
                                      pattern-28154)
                                template-28155))))
            tmp-28149)
          (let ((tmp-28156
                  ($sc-dispatch x-28147 '(_ (any . any) any any))))
            (if (if tmp-28156
                  (@apply
                    (lambda (name-28160
                             pattern-28161
                             docstring-28162
                             template-28163)
                      (string? (syntax->datum docstring-28162)))
                    tmp-28156)
                  #f)
              (@apply
                (lambda (name-28164
                         pattern-28165
                         docstring-28166
                         template-28167)
                  (list '#(syntax-object
                           define-syntax
                           ((top)
                            #(ribcage
                              #(name pattern docstring template)
                              #((top) (top) (top) (top))
                              #("l-*-28139"
                                "l-*-28140"
                                "l-*-28141"
                                "l-*-28142"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("l-*-28121")))
                           (hygiene guile))
                        name-28164
                        (list '#(syntax-object
                                 syntax-rules
                                 ((top)
                                  #(ribcage
                                    #(name pattern docstring template)
                                    #((top) (top) (top) (top))
                                    #("l-*-28139"
                                      "l-*-28140"
                                      "l-*-28141"
                                      "l-*-28142"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("l-*-28121")))
                                 (hygiene guile))
                              '()
                              docstring-28166
                              (list (cons '#(syntax-object
                                             _
                                             ((top)
                                              #(ribcage
                                                #(name
                                                  pattern
                                                  docstring
                                                  template)
                                                #((top) (top) (top) (top))
                                                #("l-*-28139"
                                                  "l-*-28140"
                                                  "l-*-28141"
                                                  "l-*-28142"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(x)
                                                #((top))
                                                #("l-*-28121")))
                                             (hygiene guile))
                                          pattern-28165)
                                    template-28167))))
                tmp-28156)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                x-28147))))))))

(define let*
  (make-syntax-transformer
    'let*
    'macro
    (lambda (x-28216)
      (let ((tmp-28218
              ($sc-dispatch
                x-28216
                '(any #(each (any any)) any . each-any))))
        (if (if tmp-28218
              (@apply
                (lambda (let*-28222 x-28223 v-28224 e1-28225 e2-28226)
                  (and-map identifier? x-28223))
                tmp-28218)
              #f)
          (@apply
            (lambda (let*-28227 x-28228 v-28229 e1-28230 e2-28231)
              (letrec*
                ((f-28232
                   (lambda (bindings-28235)
                     (if (null? bindings-28235)
                       (cons '#(syntax-object
                                let
                                ((top)
                                 #(ribcage () () ())
                                 #(ribcage
                                   #(f bindings)
                                   #((top) (top))
                                   #("l-*-28202" "l-*-28203"))
                                 #(ribcage
                                   #(let* x v e1 e2)
                                   #((top) (top) (top) (top) (top))
                                   #("l-*-28192"
                                     "l-*-28193"
                                     "l-*-28194"
                                     "l-*-28195"
                                     "l-*-28196"))
                                 #(ribcage () () ())
                                 #(ribcage #(x) #((top)) #("l-*-28178")))
                                (hygiene guile))
                             (cons '() (cons e1-28230 e2-28231)))
                       (let ((tmp-28236
                               (list (f-28232 (cdr bindings-28235))
                                     (car bindings-28235))))
                         (let ((tmp-28237 ($sc-dispatch tmp-28236 '(any any))))
                           (if tmp-28237
                             (@apply
                               (lambda (body-28239 binding-28240)
                                 (list '#(syntax-object
                                          let
                                          ((top)
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(body binding)
                                             #((top) (top))
                                             #("l-*-28212" "l-*-28213"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(f bindings)
                                             #((top) (top))
                                             #("l-*-28202" "l-*-28203"))
                                           #(ribcage
                                             #(let* x v e1 e2)
                                             #((top) (top) (top) (top) (top))
                                             #("l-*-28192"
                                               "l-*-28193"
                                               "l-*-28194"
                                               "l-*-28195"
                                               "l-*-28196"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x)
                                             #((top))
                                             #("l-*-28178")))
                                          (hygiene guile))
                                       (list binding-28240)
                                       body-28239))
                               tmp-28237)
                             (syntax-violation
                               #f
                               "source expression failed to match any pattern"
                               tmp-28236))))))))
                (f-28232 (map list x-28228 v-28229))))
            tmp-28218)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            x-28216))))))

(define do
  (make-syntax-transformer
    'do
    'macro
    (lambda (orig-x-28298)
      (let ((tmp-28300
              ($sc-dispatch
                orig-x-28298
                '(_ #(each (any any . any))
                    (any . each-any)
                    .
                    each-any))))
        (if tmp-28300
          (@apply
            (lambda (var-28304
                     init-28305
                     step-28306
                     e0-28307
                     e1-28308
                     c-28309)
              (let ((tmp-28310
                      (map (lambda (v-28313 s-28314)
                             (let ((tmp-28316 ($sc-dispatch s-28314 '())))
                               (if tmp-28316
                                 (@apply (lambda () v-28313) tmp-28316)
                                 (let ((tmp-28319
                                         ($sc-dispatch s-28314 '(any))))
                                   (if tmp-28319
                                     (@apply
                                       (lambda (e-28322) e-28322)
                                       tmp-28319)
                                     (syntax-violation
                                       'do
                                       "bad step expression"
                                       orig-x-28298
                                       s-28314))))))
                           var-28304
                           step-28306)))
                (let ((tmp-28311 ($sc-dispatch tmp-28310 'each-any)))
                  (if tmp-28311
                    (@apply
                      (lambda (step-28328)
                        (let ((tmp-28330 ($sc-dispatch e1-28308 '())))
                          (if tmp-28330
                            (@apply
                              (lambda ()
                                (list '#(syntax-object
                                         let
                                         ((top)
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(step)
                                            #((top))
                                            #("l-*-28266"))
                                          #(ribcage
                                            #(var init step e0 e1 c)
                                            #((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                            #("l-*-28251"
                                              "l-*-28252"
                                              "l-*-28253"
                                              "l-*-28254"
                                              "l-*-28255"
                                              "l-*-28256"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(orig-x)
                                            #((top))
                                            #("l-*-28248")))
                                         (hygiene guile))
                                      '#(syntax-object
                                         doloop
                                         ((top)
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(step)
                                            #((top))
                                            #("l-*-28266"))
                                          #(ribcage
                                            #(var init step e0 e1 c)
                                            #((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                            #("l-*-28251"
                                              "l-*-28252"
                                              "l-*-28253"
                                              "l-*-28254"
                                              "l-*-28255"
                                              "l-*-28256"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(orig-x)
                                            #((top))
                                            #("l-*-28248")))
                                         (hygiene guile))
                                      (map list var-28304 init-28305)
                                      (list '#(syntax-object
                                               if
                                               ((top)
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(step)
                                                  #((top))
                                                  #("l-*-28266"))
                                                #(ribcage
                                                  #(var init step e0 e1 c)
                                                  #((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                  #("l-*-28251"
                                                    "l-*-28252"
                                                    "l-*-28253"
                                                    "l-*-28254"
                                                    "l-*-28255"
                                                    "l-*-28256"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(orig-x)
                                                  #((top))
                                                  #("l-*-28248")))
                                               (hygiene guile))
                                            (list '#(syntax-object
                                                     not
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(step)
                                                        #((top))
                                                        #("l-*-28266"))
                                                      #(ribcage
                                                        #(var
                                                          init
                                                          step
                                                          e0
                                                          e1
                                                          c)
                                                        #((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                        #("l-*-28251"
                                                          "l-*-28252"
                                                          "l-*-28253"
                                                          "l-*-28254"
                                                          "l-*-28255"
                                                          "l-*-28256"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(orig-x)
                                                        #((top))
                                                        #("l-*-28248")))
                                                     (hygiene guile))
                                                  e0-28307)
                                            (cons '#(syntax-object
                                                     begin
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(step)
                                                        #((top))
                                                        #("l-*-28266"))
                                                      #(ribcage
                                                        #(var
                                                          init
                                                          step
                                                          e0
                                                          e1
                                                          c)
                                                        #((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                        #("l-*-28251"
                                                          "l-*-28252"
                                                          "l-*-28253"
                                                          "l-*-28254"
                                                          "l-*-28255"
                                                          "l-*-28256"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(orig-x)
                                                        #((top))
                                                        #("l-*-28248")))
                                                     (hygiene guile))
                                                  (append
                                                    c-28309
                                                    (list (cons '#(syntax-object
                                                                   doloop
                                                                   ((top)
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(step)
                                                                      #((top))
                                                                      #("l-*-28266"))
                                                                    #(ribcage
                                                                      #(var
                                                                        init
                                                                        step
                                                                        e0
                                                                        e1
                                                                        c)
                                                                      #((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                      #("l-*-28251"
                                                                        "l-*-28252"
                                                                        "l-*-28253"
                                                                        "l-*-28254"
                                                                        "l-*-28255"
                                                                        "l-*-28256"))
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(orig-x)
                                                                      #((top))
                                                                      #("l-*-28248")))
                                                                   (hygiene
                                                                     guile))
                                                                step-28328)))))))
                              tmp-28330)
                            (let ((tmp-28334
                                    ($sc-dispatch e1-28308 '(any . each-any))))
                              (if tmp-28334
                                (@apply
                                  (lambda (e1-28338 e2-28339)
                                    (list '#(syntax-object
                                             let
                                             ((top)
                                              #(ribcage
                                                #(e1 e2)
                                                #((top) (top))
                                                #("l-*-28275" "l-*-28276"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(step)
                                                #((top))
                                                #("l-*-28266"))
                                              #(ribcage
                                                #(var init step e0 e1 c)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("l-*-28251"
                                                  "l-*-28252"
                                                  "l-*-28253"
                                                  "l-*-28254"
                                                  "l-*-28255"
                                                  "l-*-28256"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(orig-x)
                                                #((top))
                                                #("l-*-28248")))
                                             (hygiene guile))
                                          '#(syntax-object
                                             doloop
                                             ((top)
                                              #(ribcage
                                                #(e1 e2)
                                                #((top) (top))
                                                #("l-*-28275" "l-*-28276"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(step)
                                                #((top))
                                                #("l-*-28266"))
                                              #(ribcage
                                                #(var init step e0 e1 c)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("l-*-28251"
                                                  "l-*-28252"
                                                  "l-*-28253"
                                                  "l-*-28254"
                                                  "l-*-28255"
                                                  "l-*-28256"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(orig-x)
                                                #((top))
                                                #("l-*-28248")))
                                             (hygiene guile))
                                          (map list var-28304 init-28305)
                                          (list '#(syntax-object
                                                   if
                                                   ((top)
                                                    #(ribcage
                                                      #(e1 e2)
                                                      #((top) (top))
                                                      #("l-*-28275"
                                                        "l-*-28276"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(step)
                                                      #((top))
                                                      #("l-*-28266"))
                                                    #(ribcage
                                                      #(var init step e0 e1 c)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("l-*-28251"
                                                        "l-*-28252"
                                                        "l-*-28253"
                                                        "l-*-28254"
                                                        "l-*-28255"
                                                        "l-*-28256"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(orig-x)
                                                      #((top))
                                                      #("l-*-28248")))
                                                   (hygiene guile))
                                                e0-28307
                                                (cons '#(syntax-object
                                                         begin
                                                         ((top)
                                                          #(ribcage
                                                            #(e1 e2)
                                                            #((top) (top))
                                                            #("l-*-28275"
                                                              "l-*-28276"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(step)
                                                            #((top))
                                                            #("l-*-28266"))
                                                          #(ribcage
                                                            #(var
                                                              init
                                                              step
                                                              e0
                                                              e1
                                                              c)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("l-*-28251"
                                                              "l-*-28252"
                                                              "l-*-28253"
                                                              "l-*-28254"
                                                              "l-*-28255"
                                                              "l-*-28256"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(orig-x)
                                                            #((top))
                                                            #("l-*-28248")))
                                                         (hygiene guile))
                                                      (cons e1-28338 e2-28339))
                                                (cons '#(syntax-object
                                                         begin
                                                         ((top)
                                                          #(ribcage
                                                            #(e1 e2)
                                                            #((top) (top))
                                                            #("l-*-28275"
                                                              "l-*-28276"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(step)
                                                            #((top))
                                                            #("l-*-28266"))
                                                          #(ribcage
                                                            #(var
                                                              init
                                                              step
                                                              e0
                                                              e1
                                                              c)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("l-*-28251"
                                                              "l-*-28252"
                                                              "l-*-28253"
                                                              "l-*-28254"
                                                              "l-*-28255"
                                                              "l-*-28256"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(orig-x)
                                                            #((top))
                                                            #("l-*-28248")))
                                                         (hygiene guile))
                                                      (append
                                                        c-28309
                                                        (list (cons '#(syntax-object
                                                                       doloop
                                                                       ((top)
                                                                        #(ribcage
                                                                          #(e1
                                                                            e2)
                                                                          #((top)
                                                                            (top))
                                                                          #("l-*-28275"
                                                                            "l-*-28276"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(step)
                                                                          #((top))
                                                                          #("l-*-28266"))
                                                                        #(ribcage
                                                                          #(var
                                                                            init
                                                                            step
                                                                            e0
                                                                            e1
                                                                            c)
                                                                          #((top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top))
                                                                          #("l-*-28251"
                                                                            "l-*-28252"
                                                                            "l-*-28253"
                                                                            "l-*-28254"
                                                                            "l-*-28255"
                                                                            "l-*-28256"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(orig-x)
                                                                          #((top))
                                                                          #("l-*-28248")))
                                                                       (hygiene
                                                                         guile))
                                                                    step-28328)))))))
                                  tmp-28334)
                                (syntax-violation
                                  #f
                                  "source expression failed to match any pattern"
                                  e1-28308))))))
                      tmp-28311)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      tmp-28310)))))
            tmp-28300)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            orig-x-28298))))))

(define quasiquote
  (make-syntax-transformer
    'quasiquote
    'macro
    (letrec*
      ((quasi-28619
         (lambda (p-28643 lev-28644)
           (let ((tmp-28646
                   ($sc-dispatch
                     p-28643
                     '(#(free-id
                         #(syntax-object
                           unquote
                           ((top)
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("l-*-28371" "l-*-28372"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("l-*-28367"
                               "l-*-28365"
                               "l-*-28363"
                               "l-*-28361"
                               "l-*-28359"
                               "l-*-28357"
                               "l-*-28355")))
                           (hygiene guile)))
                       any))))
             (if tmp-28646
               (@apply
                 (lambda (p-28650)
                   (if (= lev-28644 0)
                     (list '#(syntax-object
                              "value"
                              ((top)
                               #(ribcage #(p) #((top)) #("l-*-28375"))
                               #(ribcage () () ())
                               #(ribcage
                                 #(p lev)
                                 #((top) (top))
                                 #("l-*-28371" "l-*-28372"))
                               #(ribcage
                                 (emit quasivector
                                       quasilist*
                                       quasiappend
                                       quasicons
                                       vquasi
                                       quasi)
                                 ((top) (top) (top) (top) (top) (top) (top))
                                 ("l-*-28367"
                                  "l-*-28365"
                                  "l-*-28363"
                                  "l-*-28361"
                                  "l-*-28359"
                                  "l-*-28357"
                                  "l-*-28355")))
                              (hygiene guile))
                           p-28650)
                     (quasicons-28621
                       '(#(syntax-object
                           "quote"
                           ((top)
                            #(ribcage #(p) #((top)) #("l-*-28375"))
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("l-*-28371" "l-*-28372"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("l-*-28367"
                               "l-*-28365"
                               "l-*-28363"
                               "l-*-28361"
                               "l-*-28359"
                               "l-*-28357"
                               "l-*-28355")))
                           (hygiene guile))
                         #(syntax-object
                           unquote
                           ((top)
                            #(ribcage #(p) #((top)) #("l-*-28375"))
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("l-*-28371" "l-*-28372"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("l-*-28367"
                               "l-*-28365"
                               "l-*-28363"
                               "l-*-28361"
                               "l-*-28359"
                               "l-*-28357"
                               "l-*-28355")))
                           (hygiene guile)))
                       (quasi-28619 (list p-28650) (#{1-}# lev-28644)))))
                 tmp-28646)
               (let ((tmp-28653
                       ($sc-dispatch
                         p-28643
                         '(#(free-id
                             #(syntax-object
                               quasiquote
                               ((top)
                                #(ribcage () () ())
                                #(ribcage
                                  #(p lev)
                                  #((top) (top))
                                  #("l-*-28371" "l-*-28372"))
                                #(ribcage
                                  (emit quasivector
                                        quasilist*
                                        quasiappend
                                        quasicons
                                        vquasi
                                        quasi)
                                  ((top) (top) (top) (top) (top) (top) (top))
                                  ("l-*-28367"
                                   "l-*-28365"
                                   "l-*-28363"
                                   "l-*-28361"
                                   "l-*-28359"
                                   "l-*-28357"
                                   "l-*-28355")))
                               (hygiene guile)))
                           any))))
                 (if tmp-28653
                   (@apply
                     (lambda (p-28657)
                       (quasicons-28621
                         '(#(syntax-object
                             "quote"
                             ((top)
                              #(ribcage #(p) #((top)) #("l-*-28378"))
                              #(ribcage () () ())
                              #(ribcage
                                #(p lev)
                                #((top) (top))
                                #("l-*-28371" "l-*-28372"))
                              #(ribcage
                                (emit quasivector
                                      quasilist*
                                      quasiappend
                                      quasicons
                                      vquasi
                                      quasi)
                                ((top) (top) (top) (top) (top) (top) (top))
                                ("l-*-28367"
                                 "l-*-28365"
                                 "l-*-28363"
                                 "l-*-28361"
                                 "l-*-28359"
                                 "l-*-28357"
                                 "l-*-28355")))
                             (hygiene guile))
                           #(syntax-object
                             quasiquote
                             ((top)
                              #(ribcage #(p) #((top)) #("l-*-28378"))
                              #(ribcage () () ())
                              #(ribcage
                                #(p lev)
                                #((top) (top))
                                #("l-*-28371" "l-*-28372"))
                              #(ribcage
                                (emit quasivector
                                      quasilist*
                                      quasiappend
                                      quasicons
                                      vquasi
                                      quasi)
                                ((top) (top) (top) (top) (top) (top) (top))
                                ("l-*-28367"
                                 "l-*-28365"
                                 "l-*-28363"
                                 "l-*-28361"
                                 "l-*-28359"
                                 "l-*-28357"
                                 "l-*-28355")))
                             (hygiene guile)))
                         (quasi-28619 (list p-28657) (#{1+}# lev-28644))))
                     tmp-28653)
                   (let ((tmp-28660 ($sc-dispatch p-28643 '(any . any))))
                     (if tmp-28660
                       (@apply
                         (lambda (p-28664 q-28665)
                           (let ((tmp-28667
                                   ($sc-dispatch
                                     p-28664
                                     '(#(free-id
                                         #(syntax-object
                                           unquote
                                           ((top)
                                            #(ribcage
                                              #(p q)
                                              #((top) (top))
                                              #("l-*-28381" "l-*-28382"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(p lev)
                                              #((top) (top))
                                              #("l-*-28371" "l-*-28372"))
                                            #(ribcage
                                              (emit quasivector
                                                    quasilist*
                                                    quasiappend
                                                    quasicons
                                                    vquasi
                                                    quasi)
                                              ((top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top))
                                              ("l-*-28367"
                                               "l-*-28365"
                                               "l-*-28363"
                                               "l-*-28361"
                                               "l-*-28359"
                                               "l-*-28357"
                                               "l-*-28355")))
                                           (hygiene guile)))
                                       .
                                       each-any))))
                             (if tmp-28667
                               (@apply
                                 (lambda (p-28671)
                                   (if (= lev-28644 0)
                                     (quasilist*-28623
                                       (map (lambda (tmp-28389-28707)
                                              (list '#(syntax-object
                                                       "value"
                                                       ((top)
                                                        #(ribcage
                                                          #(p)
                                                          #((top))
                                                          #("l-*-28387"))
                                                        #(ribcage
                                                          #(p q)
                                                          #((top) (top))
                                                          #("l-*-28381"
                                                            "l-*-28382"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(p lev)
                                                          #((top) (top))
                                                          #("l-*-28371"
                                                            "l-*-28372"))
                                                        #(ribcage
                                                          (emit quasivector
                                                                quasilist*
                                                                quasiappend
                                                                quasicons
                                                                vquasi
                                                                quasi)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("l-*-28367"
                                                           "l-*-28365"
                                                           "l-*-28363"
                                                           "l-*-28361"
                                                           "l-*-28359"
                                                           "l-*-28357"
                                                           "l-*-28355")))
                                                       (hygiene guile))
                                                    tmp-28389-28707))
                                            p-28671)
                                       (quasi-28619 q-28665 lev-28644))
                                     (quasicons-28621
                                       (quasicons-28621
                                         '(#(syntax-object
                                             "quote"
                                             ((top)
                                              #(ribcage
                                                #(p)
                                                #((top))
                                                #("l-*-28387"))
                                              #(ribcage
                                                #(p q)
                                                #((top) (top))
                                                #("l-*-28381" "l-*-28382"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(p lev)
                                                #((top) (top))
                                                #("l-*-28371" "l-*-28372"))
                                              #(ribcage
                                                (emit quasivector
                                                      quasilist*
                                                      quasiappend
                                                      quasicons
                                                      vquasi
                                                      quasi)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("l-*-28367"
                                                 "l-*-28365"
                                                 "l-*-28363"
                                                 "l-*-28361"
                                                 "l-*-28359"
                                                 "l-*-28357"
                                                 "l-*-28355")))
                                             (hygiene guile))
                                           #(syntax-object
                                             unquote
                                             ((top)
                                              #(ribcage
                                                #(p)
                                                #((top))
                                                #("l-*-28387"))
                                              #(ribcage
                                                #(p q)
                                                #((top) (top))
                                                #("l-*-28381" "l-*-28382"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(p lev)
                                                #((top) (top))
                                                #("l-*-28371" "l-*-28372"))
                                              #(ribcage
                                                (emit quasivector
                                                      quasilist*
                                                      quasiappend
                                                      quasicons
                                                      vquasi
                                                      quasi)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("l-*-28367"
                                                 "l-*-28365"
                                                 "l-*-28363"
                                                 "l-*-28361"
                                                 "l-*-28359"
                                                 "l-*-28357"
                                                 "l-*-28355")))
                                             (hygiene guile)))
                                         (quasi-28619
                                           p-28671
                                           (#{1-}# lev-28644)))
                                       (quasi-28619 q-28665 lev-28644))))
                                 tmp-28667)
                               (let ((tmp-28712
                                       ($sc-dispatch
                                         p-28664
                                         '(#(free-id
                                             #(syntax-object
                                               unquote-splicing
                                               ((top)
                                                #(ribcage
                                                  #(p q)
                                                  #((top) (top))
                                                  #("l-*-28381" "l-*-28382"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(p lev)
                                                  #((top) (top))
                                                  #("l-*-28371" "l-*-28372"))
                                                #(ribcage
                                                  (emit quasivector
                                                        quasilist*
                                                        quasiappend
                                                        quasicons
                                                        vquasi
                                                        quasi)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("l-*-28367"
                                                   "l-*-28365"
                                                   "l-*-28363"
                                                   "l-*-28361"
                                                   "l-*-28359"
                                                   "l-*-28357"
                                                   "l-*-28355")))
                                               (hygiene guile)))
                                           .
                                           each-any))))
                                 (if tmp-28712
                                   (@apply
                                     (lambda (p-28716)
                                       (if (= lev-28644 0)
                                         (quasiappend-28622
                                           (map (lambda (tmp-28394-28719)
                                                  (list '#(syntax-object
                                                           "value"
                                                           ((top)
                                                            #(ribcage
                                                              #(p)
                                                              #((top))
                                                              #("l-*-28392"))
                                                            #(ribcage
                                                              #(p q)
                                                              #((top) (top))
                                                              #("l-*-28381"
                                                                "l-*-28382"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(p lev)
                                                              #((top) (top))
                                                              #("l-*-28371"
                                                                "l-*-28372"))
                                                            #(ribcage
                                                              (emit quasivector
                                                                    quasilist*
                                                                    quasiappend
                                                                    quasicons
                                                                    vquasi
                                                                    quasi)
                                                              ((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                              ("l-*-28367"
                                                               "l-*-28365"
                                                               "l-*-28363"
                                                               "l-*-28361"
                                                               "l-*-28359"
                                                               "l-*-28357"
                                                               "l-*-28355")))
                                                           (hygiene guile))
                                                        tmp-28394-28719))
                                                p-28716)
                                           (quasi-28619 q-28665 lev-28644))
                                         (quasicons-28621
                                           (quasicons-28621
                                             '(#(syntax-object
                                                 "quote"
                                                 ((top)
                                                  #(ribcage
                                                    #(p)
                                                    #((top))
                                                    #("l-*-28392"))
                                                  #(ribcage
                                                    #(p q)
                                                    #((top) (top))
                                                    #("l-*-28381" "l-*-28382"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(p lev)
                                                    #((top) (top))
                                                    #("l-*-28371" "l-*-28372"))
                                                  #(ribcage
                                                    (emit quasivector
                                                          quasilist*
                                                          quasiappend
                                                          quasicons
                                                          vquasi
                                                          quasi)
                                                    ((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                    ("l-*-28367"
                                                     "l-*-28365"
                                                     "l-*-28363"
                                                     "l-*-28361"
                                                     "l-*-28359"
                                                     "l-*-28357"
                                                     "l-*-28355")))
                                                 (hygiene guile))
                                               #(syntax-object
                                                 unquote-splicing
                                                 ((top)
                                                  #(ribcage
                                                    #(p)
                                                    #((top))
                                                    #("l-*-28392"))
                                                  #(ribcage
                                                    #(p q)
                                                    #((top) (top))
                                                    #("l-*-28381" "l-*-28382"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(p lev)
                                                    #((top) (top))
                                                    #("l-*-28371" "l-*-28372"))
                                                  #(ribcage
                                                    (emit quasivector
                                                          quasilist*
                                                          quasiappend
                                                          quasicons
                                                          vquasi
                                                          quasi)
                                                    ((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                    ("l-*-28367"
                                                     "l-*-28365"
                                                     "l-*-28363"
                                                     "l-*-28361"
                                                     "l-*-28359"
                                                     "l-*-28357"
                                                     "l-*-28355")))
                                                 (hygiene guile)))
                                             (quasi-28619
                                               p-28716
                                               (#{1-}# lev-28644)))
                                           (quasi-28619 q-28665 lev-28644))))
                                     tmp-28712)
                                   (quasicons-28621
                                     (quasi-28619 p-28664 lev-28644)
                                     (quasi-28619 q-28665 lev-28644)))))))
                         tmp-28660)
                       (let ((tmp-28733
                               ($sc-dispatch p-28643 '#(vector each-any))))
                         (if tmp-28733
                           (@apply
                             (lambda (x-28737)
                               (let ((x-28740
                                       (vquasi-28620 x-28737 lev-28644)))
                                 (let ((tmp-28742
                                         ($sc-dispatch
                                           x-28740
                                           '(#(atom "quote") each-any))))
                                   (if tmp-28742
                                     (@apply
                                       (lambda (x-28746)
                                         (list '#(syntax-object
                                                  "quote"
                                                  ((top)
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("l-*-28493"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("l-*-28490"))
                                                   #(ribcage
                                                     (emit quasivector
                                                           quasilist*
                                                           quasiappend
                                                           quasicons
                                                           vquasi
                                                           quasi)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("l-*-28367"
                                                      "l-*-28365"
                                                      "l-*-28363"
                                                      "l-*-28361"
                                                      "l-*-28359"
                                                      "l-*-28357"
                                                      "l-*-28355")))
                                                  (hygiene guile))
                                               (list->vector x-28746)))
                                       tmp-28742)
                                     (letrec*
                                       ((f-28748
                                          (lambda (y-28760 k-28761)
                                            (let ((tmp-28763
                                                    ($sc-dispatch
                                                      y-28760
                                                      '(#(atom "quote")
                                                        each-any))))
                                              (if tmp-28763
                                                (@apply
                                                  (lambda (y-28766)
                                                    (k-28761
                                                      (map (lambda (tmp-28518-28767)
                                                             (list '#(syntax-object
                                                                      "quote"
                                                                      ((top)
                                                                       #(ribcage
                                                                         #(y)
                                                                         #((top))
                                                                         #("l-*-28516"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(f
                                                                           y
                                                                           k)
                                                                         #((top)
                                                                           (top)
                                                                           (top))
                                                                         #("l-*-28498"
                                                                           "l-*-28499"
                                                                           "l-*-28500"))
                                                                       #(ribcage
                                                                         #(_)
                                                                         #((top))
                                                                         #("l-*-28496"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(x)
                                                                         #((top))
                                                                         #("l-*-28490"))
                                                                       #(ribcage
                                                                         (emit quasivector
                                                                               quasilist*
                                                                               quasiappend
                                                                               quasicons
                                                                               vquasi
                                                                               quasi)
                                                                         ((top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top))
                                                                         ("l-*-28367"
                                                                          "l-*-28365"
                                                                          "l-*-28363"
                                                                          "l-*-28361"
                                                                          "l-*-28359"
                                                                          "l-*-28357"
                                                                          "l-*-28355")))
                                                                      (hygiene
                                                                        guile))
                                                                   tmp-28518-28767))
                                                           y-28766)))
                                                  tmp-28763)
                                                (let ((tmp-28768
                                                        ($sc-dispatch
                                                          y-28760
                                                          '(#(atom "list")
                                                            .
                                                            each-any))))
                                                  (if tmp-28768
                                                    (@apply
                                                      (lambda (y-28771)
                                                        (k-28761 y-28771))
                                                      tmp-28768)
                                                    (let ((tmp-28772
                                                            ($sc-dispatch
                                                              y-28760
                                                              '(#(atom "list*")
                                                                .
                                                                #(each+
                                                                  any
                                                                  (any)
                                                                  ())))))
                                                      (if tmp-28772
                                                        (@apply
                                                          (lambda (y-28775
                                                                   z-28776)
                                                            (f-28748
                                                              z-28776
                                                              (lambda (ls-28777)
                                                                (k-28761
                                                                  (append
                                                                    y-28775
                                                                    ls-28777)))))
                                                          tmp-28772)
                                                        (list '#(syntax-object
                                                                 "list->vector"
                                                                 ((top)
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(t-28533)
                                                                    #((m-*-28534
                                                                        top))
                                                                    #("l-*-28537"))
                                                                  #(ribcage
                                                                    #(else)
                                                                    #((top))
                                                                    #("l-*-28531"))
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(f y k)
                                                                    #((top)
                                                                      (top)
                                                                      (top))
                                                                    #("l-*-28498"
                                                                      "l-*-28499"
                                                                      "l-*-28500"))
                                                                  #(ribcage
                                                                    #(_)
                                                                    #((top))
                                                                    #("l-*-28496"))
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(x)
                                                                    #((top))
                                                                    #("l-*-28490"))
                                                                  #(ribcage
                                                                    (emit quasivector
                                                                          quasilist*
                                                                          quasiappend
                                                                          quasicons
                                                                          vquasi
                                                                          quasi)
                                                                    ((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                    ("l-*-28367"
                                                                     "l-*-28365"
                                                                     "l-*-28363"
                                                                     "l-*-28361"
                                                                     "l-*-28359"
                                                                     "l-*-28357"
                                                                     "l-*-28355")))
                                                                 (hygiene
                                                                   guile))
                                                              x-28740))))))))))
                                       (f-28748
                                         x-28740
                                         (lambda (ls-28750)
                                           (let ((tmp-28752
                                                   ($sc-dispatch
                                                     ls-28750
                                                     'each-any)))
                                             (if tmp-28752
                                               (@apply
                                                 (lambda (t-28506-28755)
                                                   (cons '#(syntax-object
                                                            "vector"
                                                            ((top)
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(t-28506)
                                                               #((m-*-28507
                                                                   top))
                                                               #("l-*-28511"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(ls)
                                                               #((top))
                                                               #("l-*-28505"))
                                                             #(ribcage
                                                               #(_)
                                                               #((top))
                                                               #("l-*-28496"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("l-*-28490"))
                                                             #(ribcage
                                                               (emit quasivector
                                                                     quasilist*
                                                                     quasiappend
                                                                     quasicons
                                                                     vquasi
                                                                     quasi)
                                                               ((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                               ("l-*-28367"
                                                                "l-*-28365"
                                                                "l-*-28363"
                                                                "l-*-28361"
                                                                "l-*-28359"
                                                                "l-*-28357"
                                                                "l-*-28355")))
                                                            (hygiene guile))
                                                         t-28506-28755))
                                                 tmp-28752)
                                               (syntax-violation
                                                 #f
                                                 "source expression failed to match any pattern"
                                                 ls-28750))))))))))
                             tmp-28733)
                           (list '#(syntax-object
                                    "quote"
                                    ((top)
                                     #(ribcage #(p) #((top)) #("l-*-28402"))
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(p lev)
                                       #((top) (top))
                                       #("l-*-28371" "l-*-28372"))
                                     #(ribcage
                                       (emit quasivector
                                             quasilist*
                                             quasiappend
                                             quasicons
                                             vquasi
                                             quasi)
                                       ((top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top))
                                       ("l-*-28367"
                                        "l-*-28365"
                                        "l-*-28363"
                                        "l-*-28361"
                                        "l-*-28359"
                                        "l-*-28357"
                                        "l-*-28355")))
                                    (hygiene guile))
                                 p-28643)))))))))))
       (vquasi-28620
         (lambda (p-28805 lev-28806)
           (let ((tmp-28808 ($sc-dispatch p-28805 '(any . any))))
             (if tmp-28808
               (@apply
                 (lambda (p-28812 q-28813)
                   (let ((tmp-28815
                           ($sc-dispatch
                             p-28812
                             '(#(free-id
                                 #(syntax-object
                                   unquote
                                   ((top)
                                    #(ribcage
                                      #(p q)
                                      #((top) (top))
                                      #("l-*-28410" "l-*-28411"))
                                    #(ribcage () () ())
                                    #(ribcage
                                      #(p lev)
                                      #((top) (top))
                                      #("l-*-28406" "l-*-28407"))
                                    #(ribcage
                                      (emit quasivector
                                            quasilist*
                                            quasiappend
                                            quasicons
                                            vquasi
                                            quasi)
                                      ((top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top))
                                      ("l-*-28367"
                                       "l-*-28365"
                                       "l-*-28363"
                                       "l-*-28361"
                                       "l-*-28359"
                                       "l-*-28357"
                                       "l-*-28355")))
                                   (hygiene guile)))
                               .
                               each-any))))
                     (if tmp-28815
                       (@apply
                         (lambda (p-28819)
                           (if (= lev-28806 0)
                             (quasilist*-28623
                               (map (lambda (tmp-28418-28855)
                                      (list '#(syntax-object
                                               "value"
                                               ((top)
                                                #(ribcage
                                                  #(p)
                                                  #((top))
                                                  #("l-*-28416"))
                                                #(ribcage
                                                  #(p q)
                                                  #((top) (top))
                                                  #("l-*-28410" "l-*-28411"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(p lev)
                                                  #((top) (top))
                                                  #("l-*-28406" "l-*-28407"))
                                                #(ribcage
                                                  (emit quasivector
                                                        quasilist*
                                                        quasiappend
                                                        quasicons
                                                        vquasi
                                                        quasi)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("l-*-28367"
                                                   "l-*-28365"
                                                   "l-*-28363"
                                                   "l-*-28361"
                                                   "l-*-28359"
                                                   "l-*-28357"
                                                   "l-*-28355")))
                                               (hygiene guile))
                                            tmp-28418-28855))
                                    p-28819)
                               (vquasi-28620 q-28813 lev-28806))
                             (quasicons-28621
                               (quasicons-28621
                                 '(#(syntax-object
                                     "quote"
                                     ((top)
                                      #(ribcage #(p) #((top)) #("l-*-28416"))
                                      #(ribcage
                                        #(p q)
                                        #((top) (top))
                                        #("l-*-28410" "l-*-28411"))
                                      #(ribcage () () ())
                                      #(ribcage
                                        #(p lev)
                                        #((top) (top))
                                        #("l-*-28406" "l-*-28407"))
                                      #(ribcage
                                        (emit quasivector
                                              quasilist*
                                              quasiappend
                                              quasicons
                                              vquasi
                                              quasi)
                                        ((top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top))
                                        ("l-*-28367"
                                         "l-*-28365"
                                         "l-*-28363"
                                         "l-*-28361"
                                         "l-*-28359"
                                         "l-*-28357"
                                         "l-*-28355")))
                                     (hygiene guile))
                                   #(syntax-object
                                     unquote
                                     ((top)
                                      #(ribcage #(p) #((top)) #("l-*-28416"))
                                      #(ribcage
                                        #(p q)
                                        #((top) (top))
                                        #("l-*-28410" "l-*-28411"))
                                      #(ribcage () () ())
                                      #(ribcage
                                        #(p lev)
                                        #((top) (top))
                                        #("l-*-28406" "l-*-28407"))
                                      #(ribcage
                                        (emit quasivector
                                              quasilist*
                                              quasiappend
                                              quasicons
                                              vquasi
                                              quasi)
                                        ((top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top))
                                        ("l-*-28367"
                                         "l-*-28365"
                                         "l-*-28363"
                                         "l-*-28361"
                                         "l-*-28359"
                                         "l-*-28357"
                                         "l-*-28355")))
                                     (hygiene guile)))
                                 (quasi-28619 p-28819 (#{1-}# lev-28806)))
                               (vquasi-28620 q-28813 lev-28806))))
                         tmp-28815)
                       (let ((tmp-28862
                               ($sc-dispatch
                                 p-28812
                                 '(#(free-id
                                     #(syntax-object
                                       unquote-splicing
                                       ((top)
                                        #(ribcage
                                          #(p q)
                                          #((top) (top))
                                          #("l-*-28410" "l-*-28411"))
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(p lev)
                                          #((top) (top))
                                          #("l-*-28406" "l-*-28407"))
                                        #(ribcage
                                          (emit quasivector
                                                quasilist*
                                                quasiappend
                                                quasicons
                                                vquasi
                                                quasi)
                                          ((top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top))
                                          ("l-*-28367"
                                           "l-*-28365"
                                           "l-*-28363"
                                           "l-*-28361"
                                           "l-*-28359"
                                           "l-*-28357"
                                           "l-*-28355")))
                                       (hygiene guile)))
                                   .
                                   each-any))))
                         (if tmp-28862
                           (@apply
                             (lambda (p-28866)
                               (if (= lev-28806 0)
                                 (quasiappend-28622
                                   (map (lambda (tmp-28423-28869)
                                          (list '#(syntax-object
                                                   "value"
                                                   ((top)
                                                    #(ribcage
                                                      #(p)
                                                      #((top))
                                                      #("l-*-28421"))
                                                    #(ribcage
                                                      #(p q)
                                                      #((top) (top))
                                                      #("l-*-28410"
                                                        "l-*-28411"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(p lev)
                                                      #((top) (top))
                                                      #("l-*-28406"
                                                        "l-*-28407"))
                                                    #(ribcage
                                                      (emit quasivector
                                                            quasilist*
                                                            quasiappend
                                                            quasicons
                                                            vquasi
                                                            quasi)
                                                      ((top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top))
                                                      ("l-*-28367"
                                                       "l-*-28365"
                                                       "l-*-28363"
                                                       "l-*-28361"
                                                       "l-*-28359"
                                                       "l-*-28357"
                                                       "l-*-28355")))
                                                   (hygiene guile))
                                                tmp-28423-28869))
                                        p-28866)
                                   (vquasi-28620 q-28813 lev-28806))
                                 (quasicons-28621
                                   (quasicons-28621
                                     '(#(syntax-object
                                         "quote"
                                         ((top)
                                          #(ribcage
                                            #(p)
                                            #((top))
                                            #("l-*-28421"))
                                          #(ribcage
                                            #(p q)
                                            #((top) (top))
                                            #("l-*-28410" "l-*-28411"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(p lev)
                                            #((top) (top))
                                            #("l-*-28406" "l-*-28407"))
                                          #(ribcage
                                            (emit quasivector
                                                  quasilist*
                                                  quasiappend
                                                  quasicons
                                                  vquasi
                                                  quasi)
                                            ((top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top))
                                            ("l-*-28367"
                                             "l-*-28365"
                                             "l-*-28363"
                                             "l-*-28361"
                                             "l-*-28359"
                                             "l-*-28357"
                                             "l-*-28355")))
                                         (hygiene guile))
                                       #(syntax-object
                                         unquote-splicing
                                         ((top)
                                          #(ribcage
                                            #(p)
                                            #((top))
                                            #("l-*-28421"))
                                          #(ribcage
                                            #(p q)
                                            #((top) (top))
                                            #("l-*-28410" "l-*-28411"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(p lev)
                                            #((top) (top))
                                            #("l-*-28406" "l-*-28407"))
                                          #(ribcage
                                            (emit quasivector
                                                  quasilist*
                                                  quasiappend
                                                  quasicons
                                                  vquasi
                                                  quasi)
                                            ((top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top))
                                            ("l-*-28367"
                                             "l-*-28365"
                                             "l-*-28363"
                                             "l-*-28361"
                                             "l-*-28359"
                                             "l-*-28357"
                                             "l-*-28355")))
                                         (hygiene guile)))
                                     (quasi-28619 p-28866 (#{1-}# lev-28806)))
                                   (vquasi-28620 q-28813 lev-28806))))
                             tmp-28862)
                           (quasicons-28621
                             (quasi-28619 p-28812 lev-28806)
                             (vquasi-28620 q-28813 lev-28806)))))))
                 tmp-28808)
               (let ((tmp-28887 ($sc-dispatch p-28805 '())))
                 (if tmp-28887
                   (@apply
                     (lambda ()
                       '(#(syntax-object
                           "quote"
                           ((top)
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("l-*-28406" "l-*-28407"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("l-*-28367"
                               "l-*-28365"
                               "l-*-28363"
                               "l-*-28361"
                               "l-*-28359"
                               "l-*-28357"
                               "l-*-28355")))
                           (hygiene guile))
                         ()))
                     tmp-28887)
                   (syntax-violation
                     #f
                     "source expression failed to match any pattern"
                     p-28805)))))))
       (quasicons-28621
         (lambda (x-28900 y-28901)
           (let ((tmp-28902 (list x-28900 y-28901)))
             (let ((tmp-28903 ($sc-dispatch tmp-28902 '(any any))))
               (if tmp-28903
                 (@apply
                   (lambda (x-28905 y-28906)
                     (let ((tmp-28908
                             ($sc-dispatch y-28906 '(#(atom "quote") any))))
                       (if tmp-28908
                         (@apply
                           (lambda (dy-28912)
                             (let ((tmp-28914
                                     ($sc-dispatch
                                       x-28905
                                       '(#(atom "quote") any))))
                               (if tmp-28914
                                 (@apply
                                   (lambda (dx-28918)
                                     (list '#(syntax-object
                                              "quote"
                                              ((top)
                                               #(ribcage
                                                 #(dx)
                                                 #((top))
                                                 #("l-*-28445"))
                                               #(ribcage
                                                 #(dy)
                                                 #((top))
                                                 #("l-*-28441"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("l-*-28435" "l-*-28436"))
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("l-*-28430" "l-*-28431"))
                                               #(ribcage
                                                 (emit quasivector
                                                       quasilist*
                                                       quasiappend
                                                       quasicons
                                                       vquasi
                                                       quasi)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("l-*-28367"
                                                  "l-*-28365"
                                                  "l-*-28363"
                                                  "l-*-28361"
                                                  "l-*-28359"
                                                  "l-*-28357"
                                                  "l-*-28355")))
                                              (hygiene guile))
                                           (cons dx-28918 dy-28912)))
                                   tmp-28914)
                                 (if (null? dy-28912)
                                   (list '#(syntax-object
                                            "list"
                                            ((top)
                                             #(ribcage
                                               #(_)
                                               #((top))
                                               #("l-*-28447"))
                                             #(ribcage
                                               #(dy)
                                               #((top))
                                               #("l-*-28441"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("l-*-28435" "l-*-28436"))
                                             #(ribcage () () ())
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("l-*-28430" "l-*-28431"))
                                             #(ribcage
                                               (emit quasivector
                                                     quasilist*
                                                     quasiappend
                                                     quasicons
                                                     vquasi
                                                     quasi)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("l-*-28367"
                                                "l-*-28365"
                                                "l-*-28363"
                                                "l-*-28361"
                                                "l-*-28359"
                                                "l-*-28357"
                                                "l-*-28355")))
                                            (hygiene guile))
                                         x-28905)
                                   (list '#(syntax-object
                                            "list*"
                                            ((top)
                                             #(ribcage
                                               #(_)
                                               #((top))
                                               #("l-*-28447"))
                                             #(ribcage
                                               #(dy)
                                               #((top))
                                               #("l-*-28441"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("l-*-28435" "l-*-28436"))
                                             #(ribcage () () ())
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("l-*-28430" "l-*-28431"))
                                             #(ribcage
                                               (emit quasivector
                                                     quasilist*
                                                     quasiappend
                                                     quasicons
                                                     vquasi
                                                     quasi)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("l-*-28367"
                                                "l-*-28365"
                                                "l-*-28363"
                                                "l-*-28361"
                                                "l-*-28359"
                                                "l-*-28357"
                                                "l-*-28355")))
                                            (hygiene guile))
                                         x-28905
                                         y-28906)))))
                           tmp-28908)
                         (let ((tmp-28923
                                 ($sc-dispatch
                                   y-28906
                                   '(#(atom "list") . any))))
                           (if tmp-28923
                             (@apply
                               (lambda (stuff-28927)
                                 (cons '#(syntax-object
                                          "list"
                                          ((top)
                                           #(ribcage
                                             #(stuff)
                                             #((top))
                                             #("l-*-28450"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("l-*-28435" "l-*-28436"))
                                           #(ribcage () () ())
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("l-*-28430" "l-*-28431"))
                                           #(ribcage
                                             (emit quasivector
                                                   quasilist*
                                                   quasiappend
                                                   quasicons
                                                   vquasi
                                                   quasi)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("l-*-28367"
                                              "l-*-28365"
                                              "l-*-28363"
                                              "l-*-28361"
                                              "l-*-28359"
                                              "l-*-28357"
                                              "l-*-28355")))
                                          (hygiene guile))
                                       (cons x-28905 stuff-28927)))
                               tmp-28923)
                             (let ((tmp-28928
                                     ($sc-dispatch
                                       y-28906
                                       '(#(atom "list*") . any))))
                               (if tmp-28928
                                 (@apply
                                   (lambda (stuff-28932)
                                     (cons '#(syntax-object
                                              "list*"
                                              ((top)
                                               #(ribcage
                                                 #(stuff)
                                                 #((top))
                                                 #("l-*-28453"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("l-*-28435" "l-*-28436"))
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("l-*-28430" "l-*-28431"))
                                               #(ribcage
                                                 (emit quasivector
                                                       quasilist*
                                                       quasiappend
                                                       quasicons
                                                       vquasi
                                                       quasi)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("l-*-28367"
                                                  "l-*-28365"
                                                  "l-*-28363"
                                                  "l-*-28361"
                                                  "l-*-28359"
                                                  "l-*-28357"
                                                  "l-*-28355")))
                                              (hygiene guile))
                                           (cons x-28905 stuff-28932)))
                                   tmp-28928)
                                 (list '#(syntax-object
                                          "list*"
                                          ((top)
                                           #(ribcage
                                             #(_)
                                             #((top))
                                             #("l-*-28455"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("l-*-28435" "l-*-28436"))
                                           #(ribcage () () ())
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("l-*-28430" "l-*-28431"))
                                           #(ribcage
                                             (emit quasivector
                                                   quasilist*
                                                   quasiappend
                                                   quasicons
                                                   vquasi
                                                   quasi)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("l-*-28367"
                                              "l-*-28365"
                                              "l-*-28363"
                                              "l-*-28361"
                                              "l-*-28359"
                                              "l-*-28357"
                                              "l-*-28355")))
                                          (hygiene guile))
                                       x-28905
                                       y-28906))))))))
                   tmp-28903)
                 (syntax-violation
                   #f
                   "source expression failed to match any pattern"
                   tmp-28902))))))
       (quasiappend-28622
         (lambda (x-28943 y-28944)
           (let ((tmp-28946
                   ($sc-dispatch y-28944 '(#(atom "quote") ()))))
             (if tmp-28946
               (@apply
                 (lambda ()
                   (if (null? x-28943)
                     '(#(syntax-object
                         "quote"
                         ((top)
                          #(ribcage () () ())
                          #(ribcage
                            #(x y)
                            #((top) (top))
                            #("l-*-28459" "l-*-28460"))
                          #(ribcage
                            (emit quasivector
                                  quasilist*
                                  quasiappend
                                  quasicons
                                  vquasi
                                  quasi)
                            ((top) (top) (top) (top) (top) (top) (top))
                            ("l-*-28367"
                             "l-*-28365"
                             "l-*-28363"
                             "l-*-28361"
                             "l-*-28359"
                             "l-*-28357"
                             "l-*-28355")))
                         (hygiene guile))
                       ())
                     (if (null? (cdr x-28943))
                       (car x-28943)
                       (let ((tmp-28951 ($sc-dispatch x-28943 'each-any)))
                         (if tmp-28951
                           (@apply
                             (lambda (p-28955)
                               (cons '#(syntax-object
                                        "append"
                                        ((top)
                                         #(ribcage () () ())
                                         #(ribcage
                                           #(p)
                                           #((top))
                                           #("l-*-28467"))
                                         #(ribcage () () ())
                                         #(ribcage
                                           #(x y)
                                           #((top) (top))
                                           #("l-*-28459" "l-*-28460"))
                                         #(ribcage
                                           (emit quasivector
                                                 quasilist*
                                                 quasiappend
                                                 quasicons
                                                 vquasi
                                                 quasi)
                                           ((top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top))
                                           ("l-*-28367"
                                            "l-*-28365"
                                            "l-*-28363"
                                            "l-*-28361"
                                            "l-*-28359"
                                            "l-*-28357"
                                            "l-*-28355")))
                                        (hygiene guile))
                                     p-28955))
                             tmp-28951)
                           (syntax-violation
                             #f
                             "source expression failed to match any pattern"
                             x-28943))))))
                 tmp-28946)
               (if (null? x-28943)
                 y-28944
                 (let ((tmp-28963 (list x-28943 y-28944)))
                   (let ((tmp-28964
                           ($sc-dispatch tmp-28963 '(each-any any))))
                     (if tmp-28964
                       (@apply
                         (lambda (p-28966 y-28967)
                           (cons '#(syntax-object
                                    "append"
                                    ((top)
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(p y)
                                       #((top) (top))
                                       #("l-*-28476" "l-*-28477"))
                                     #(ribcage #(_) #((top)) #("l-*-28470"))
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(x y)
                                       #((top) (top))
                                       #("l-*-28459" "l-*-28460"))
                                     #(ribcage
                                       (emit quasivector
                                             quasilist*
                                             quasiappend
                                             quasicons
                                             vquasi
                                             quasi)
                                       ((top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top))
                                       ("l-*-28367"
                                        "l-*-28365"
                                        "l-*-28363"
                                        "l-*-28361"
                                        "l-*-28359"
                                        "l-*-28357"
                                        "l-*-28355")))
                                    (hygiene guile))
                                 (append p-28966 (list y-28967))))
                         tmp-28964)
                       (syntax-violation
                         #f
                         "source expression failed to match any pattern"
                         tmp-28963)))))))))
       (quasilist*-28623
         (lambda (x-28971 y-28972)
           (letrec*
             ((f-28973
                (lambda (x-29062)
                  (if (null? x-29062)
                    y-28972
                    (quasicons-28621
                      (car x-29062)
                      (f-28973 (cdr x-29062)))))))
             (f-28973 x-28971))))
       (emit-28625
         (lambda (x-29065)
           (let ((tmp-29067
                   ($sc-dispatch x-29065 '(#(atom "quote") any))))
             (if tmp-29067
               (@apply
                 (lambda (x-29071)
                   (list '#(syntax-object
                            quote
                            ((top)
                             #(ribcage #(x) #((top)) #("l-*-28543"))
                             #(ribcage () () ())
                             #(ribcage #(x) #((top)) #("l-*-28540"))
                             #(ribcage
                               (emit quasivector
                                     quasilist*
                                     quasiappend
                                     quasicons
                                     vquasi
                                     quasi)
                               ((top) (top) (top) (top) (top) (top) (top))
                               ("l-*-28367"
                                "l-*-28365"
                                "l-*-28363"
                                "l-*-28361"
                                "l-*-28359"
                                "l-*-28357"
                                "l-*-28355")))
                            (hygiene guile))
                         x-29071))
                 tmp-29067)
               (let ((tmp-29072
                       ($sc-dispatch
                         x-29065
                         '(#(atom "list") . each-any))))
                 (if tmp-29072
                   (@apply
                     (lambda (x-29076)
                       (let ((tmp-29077 (map emit-28625 x-29076)))
                         (let ((tmp-29078 ($sc-dispatch tmp-29077 'each-any)))
                           (if tmp-29078
                             (@apply
                               (lambda (t-28548-29080)
                                 (cons '#(syntax-object
                                          list
                                          ((top)
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(t-28548)
                                             #((m-*-28549 top))
                                             #("l-*-28553"))
                                           #(ribcage
                                             #(x)
                                             #((top))
                                             #("l-*-28546"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x)
                                             #((top))
                                             #("l-*-28540"))
                                           #(ribcage
                                             (emit quasivector
                                                   quasilist*
                                                   quasiappend
                                                   quasicons
                                                   vquasi
                                                   quasi)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("l-*-28367"
                                              "l-*-28365"
                                              "l-*-28363"
                                              "l-*-28361"
                                              "l-*-28359"
                                              "l-*-28357"
                                              "l-*-28355")))
                                          (hygiene guile))
                                       t-28548-29080))
                               tmp-29078)
                             (syntax-violation
                               #f
                               "source expression failed to match any pattern"
                               tmp-29077)))))
                     tmp-29072)
                   (let ((tmp-29081
                           ($sc-dispatch
                             x-29065
                             '(#(atom "list*") . #(each+ any (any) ())))))
                     (if tmp-29081
                       (@apply
                         (lambda (x-29085 y-29086)
                           (letrec*
                             ((f-29087
                                (lambda (x*-29090)
                                  (if (null? x*-29090)
                                    (emit-28625 y-29086)
                                    (let ((tmp-29091
                                            (list (emit-28625 (car x*-29090))
                                                  (f-29087 (cdr x*-29090)))))
                                      (let ((tmp-29092
                                              ($sc-dispatch
                                                tmp-29091
                                                '(any any))))
                                        (if tmp-29092
                                          (@apply
                                            (lambda (t-28568-29094
                                                     t-28567-29095)
                                              (list '#(syntax-object
                                                       cons
                                                       ((top)
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(t-28568 t-28567)
                                                          #((m-*-28569 top)
                                                            (m-*-28569 top))
                                                          #("l-*-28573"
                                                            "l-*-28574"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(f x*)
                                                          #((top) (top))
                                                          #("l-*-28562"
                                                            "l-*-28563"))
                                                        #(ribcage
                                                          #(x y)
                                                          #((top) (top))
                                                          #("l-*-28558"
                                                            "l-*-28559"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(x)
                                                          #((top))
                                                          #("l-*-28540"))
                                                        #(ribcage
                                                          (emit quasivector
                                                                quasilist*
                                                                quasiappend
                                                                quasicons
                                                                vquasi
                                                                quasi)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("l-*-28367"
                                                           "l-*-28365"
                                                           "l-*-28363"
                                                           "l-*-28361"
                                                           "l-*-28359"
                                                           "l-*-28357"
                                                           "l-*-28355")))
                                                       (hygiene guile))
                                                    t-28568-29094
                                                    t-28567-29095))
                                            tmp-29092)
                                          (syntax-violation
                                            #f
                                            "source expression failed to match any pattern"
                                            tmp-29091))))))))
                             (f-29087 x-29085)))
                         tmp-29081)
                       (let ((tmp-29096
                               ($sc-dispatch
                                 x-29065
                                 '(#(atom "append") . each-any))))
                         (if tmp-29096
                           (@apply
                             (lambda (x-29100)
                               (let ((tmp-29101 (map emit-28625 x-29100)))
                                 (let ((tmp-29102
                                         ($sc-dispatch tmp-29101 'each-any)))
                                   (if tmp-29102
                                     (@apply
                                       (lambda (t-28580-29104)
                                         (cons '#(syntax-object
                                                  append
                                                  ((top)
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(t-28580)
                                                     #((m-*-28581 top))
                                                     #("l-*-28585"))
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("l-*-28578"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("l-*-28540"))
                                                   #(ribcage
                                                     (emit quasivector
                                                           quasilist*
                                                           quasiappend
                                                           quasicons
                                                           vquasi
                                                           quasi)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("l-*-28367"
                                                      "l-*-28365"
                                                      "l-*-28363"
                                                      "l-*-28361"
                                                      "l-*-28359"
                                                      "l-*-28357"
                                                      "l-*-28355")))
                                                  (hygiene guile))
                                               t-28580-29104))
                                       tmp-29102)
                                     (syntax-violation
                                       #f
                                       "source expression failed to match any pattern"
                                       tmp-29101)))))
                             tmp-29096)
                           (let ((tmp-29105
                                   ($sc-dispatch
                                     x-29065
                                     '(#(atom "vector") . each-any))))
                             (if tmp-29105
                               (@apply
                                 (lambda (x-29109)
                                   (let ((tmp-29110 (map emit-28625 x-29109)))
                                     (let ((tmp-29111
                                             ($sc-dispatch
                                               tmp-29110
                                               'each-any)))
                                       (if tmp-29111
                                         (@apply
                                           (lambda (t-28592-29113)
                                             (cons '#(syntax-object
                                                      vector
                                                      ((top)
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(t-28592)
                                                         #((m-*-28593 top))
                                                         #("l-*-28597"))
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("l-*-28590"))
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("l-*-28540"))
                                                       #(ribcage
                                                         (emit quasivector
                                                               quasilist*
                                                               quasiappend
                                                               quasicons
                                                               vquasi
                                                               quasi)
                                                         ((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                         ("l-*-28367"
                                                          "l-*-28365"
                                                          "l-*-28363"
                                                          "l-*-28361"
                                                          "l-*-28359"
                                                          "l-*-28357"
                                                          "l-*-28355")))
                                                      (hygiene guile))
                                                   t-28592-29113))
                                           tmp-29111)
                                         (syntax-violation
                                           #f
                                           "source expression failed to match any pattern"
                                           tmp-29110)))))
                                 tmp-29105)
                               (let ((tmp-29114
                                       ($sc-dispatch
                                         x-29065
                                         '(#(atom "list->vector") any))))
                                 (if tmp-29114
                                   (@apply
                                     (lambda (x-29118)
                                       (let ((tmp-29119 (emit-28625 x-29118)))
                                         (list '#(syntax-object
                                                  list->vector
                                                  ((top)
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(t-28604)
                                                     #((m-*-28605 top))
                                                     #("l-*-28608"))
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("l-*-28602"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("l-*-28540"))
                                                   #(ribcage
                                                     (emit quasivector
                                                           quasilist*
                                                           quasiappend
                                                           quasicons
                                                           vquasi
                                                           quasi)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("l-*-28367"
                                                      "l-*-28365"
                                                      "l-*-28363"
                                                      "l-*-28361"
                                                      "l-*-28359"
                                                      "l-*-28357"
                                                      "l-*-28355")))
                                                  (hygiene guile))
                                               tmp-29119)))
                                     tmp-29114)
                                   (let ((tmp-29122
                                           ($sc-dispatch
                                             x-29065
                                             '(#(atom "value") any))))
                                     (if tmp-29122
                                       (@apply
                                         (lambda (x-29126) x-29126)
                                         tmp-29122)
                                       (syntax-violation
                                         #f
                                         "source expression failed to match any pattern"
                                         x-29065))))))))))))))))))
      (lambda (x-28626)
        (let ((tmp-28628 ($sc-dispatch x-28626 '(_ any))))
          (if tmp-28628
            (@apply
              (lambda (e-28632)
                (emit-28625 (quasi-28619 e-28632 0)))
              tmp-28628)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              x-28626)))))))

(define include
  (make-syntax-transformer
    'include
    'macro
    (lambda (x-29181)
      (letrec*
        ((read-file-29182
           (lambda (fn-29291 k-29292)
             (let ((p-29293 (open-input-file fn-29291)))
               (letrec*
                 ((f-29294
                    (lambda (x-29348 result-29349)
                      (if (eof-object? x-29348)
                        (begin
                          (close-input-port p-29293)
                          (reverse result-29349))
                        (f-29294
                          (read p-29293)
                          (cons (datum->syntax k-29292 x-29348)
                                result-29349))))))
                 (f-29294 (read p-29293) '()))))))
        (let ((tmp-29184 ($sc-dispatch x-29181 '(any any))))
          (if tmp-29184
            (@apply
              (lambda (k-29188 filename-29189)
                (let ((fn-29190 (syntax->datum filename-29189)))
                  (let ((tmp-29191
                          (read-file-29182 fn-29190 filename-29189)))
                    (let ((tmp-29192 ($sc-dispatch tmp-29191 'each-any)))
                      (if tmp-29192
                        (@apply
                          (lambda (exp-29210)
                            (cons '#(syntax-object
                                     begin
                                     ((top)
                                      #(ribcage () () ())
                                      #(ribcage #(exp) #((top)) #("l-*-29178"))
                                      #(ribcage () () ())
                                      #(ribcage () () ())
                                      #(ribcage #(fn) #((top)) #("l-*-29173"))
                                      #(ribcage
                                        #(k filename)
                                        #((top) (top))
                                        #("l-*-29169" "l-*-29170"))
                                      #(ribcage
                                        (read-file)
                                        ((top))
                                        ("l-*-29153"))
                                      #(ribcage #(x) #((top)) #("l-*-29152")))
                                     (hygiene guile))
                                  exp-29210))
                          tmp-29192)
                        (syntax-violation
                          #f
                          "source expression failed to match any pattern"
                          tmp-29191))))))
              tmp-29184)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              x-29181)))))))

(define include-from-path
  (make-syntax-transformer
    'include-from-path
    'macro
    (lambda (x-29368)
      (let ((tmp-29370 ($sc-dispatch x-29368 '(any any))))
        (if tmp-29370
          (@apply
            (lambda (k-29374 filename-29375)
              (let ((fn-29376 (syntax->datum filename-29375)))
                (let ((tmp-29377
                        (datum->syntax
                          filename-29375
                          (let ((t-29380 (%search-load-path fn-29376)))
                            (if t-29380
                              t-29380
                              (syntax-violation
                                'include-from-path
                                "file not found in path"
                                x-29368
                                filename-29375))))))
                  (list '#(syntax-object
                           include
                           ((top)
                            #(ribcage () () ())
                            #(ribcage #(fn) #((top)) #("l-*-29362"))
                            #(ribcage () () ())
                            #(ribcage () () ())
                            #(ribcage #(fn) #((top)) #("l-*-29358"))
                            #(ribcage
                              #(k filename)
                              #((top) (top))
                              #("l-*-29354" "l-*-29355"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("l-*-29351")))
                           (hygiene guile))
                        tmp-29377))))
            tmp-29370)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            x-29368))))))

(define unquote
  (make-syntax-transformer
    'unquote
    'macro
    (lambda (x-29389)
      (syntax-violation
        'unquote
        "expression not valid outside of quasiquote"
        x-29389))))

(define unquote-splicing
  (make-syntax-transformer
    'unquote-splicing
    'macro
    (lambda (x-29392)
      (syntax-violation
        'unquote-splicing
        "expression not valid outside of quasiquote"
        x-29392))))

(define case
  (make-syntax-transformer
    'case
    'macro
    (lambda (x-29448)
      (let ((tmp-29450
              ($sc-dispatch x-29448 '(_ any any . each-any))))
        (if tmp-29450
          (@apply
            (lambda (e-29454 m1-29455 m2-29456)
              (let ((tmp-29457
                      (letrec*
                        ((f-29499
                           (lambda (clause-29502 clauses-29503)
                             (if (null? clauses-29503)
                               (let ((tmp-29505
                                       ($sc-dispatch
                                         clause-29502
                                         '(#(free-id
                                             #(syntax-object
                                               else
                                               ((top)
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(f clause clauses)
                                                  #((top) (top) (top))
                                                  #("l-*-29407"
                                                    "l-*-29408"
                                                    "l-*-29409"))
                                                #(ribcage
                                                  #(e m1 m2)
                                                  #((top) (top) (top))
                                                  #("l-*-29397"
                                                    "l-*-29398"
                                                    "l-*-29399"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(x)
                                                  #((top))
                                                  #("l-*-29394")))
                                               (hygiene guile)))
                                           any
                                           .
                                           each-any))))
                                 (if tmp-29505
                                   (@apply
                                     (lambda (e1-29509 e2-29510)
                                       (cons '#(syntax-object
                                                begin
                                                ((top)
                                                 #(ribcage
                                                   #(e1 e2)
                                                   #((top) (top))
                                                   #("l-*-29416" "l-*-29417"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(f clause clauses)
                                                   #((top) (top) (top))
                                                   #("l-*-29407"
                                                     "l-*-29408"
                                                     "l-*-29409"))
                                                 #(ribcage
                                                   #(e m1 m2)
                                                   #((top) (top) (top))
                                                   #("l-*-29397"
                                                     "l-*-29398"
                                                     "l-*-29399"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("l-*-29394")))
                                                (hygiene guile))
                                             (cons e1-29509 e2-29510)))
                                     tmp-29505)
                                   (let ((tmp-29511
                                           ($sc-dispatch
                                             clause-29502
                                             '(each-any any . each-any))))
                                     (if tmp-29511
                                       (@apply
                                         (lambda (k-29515 e1-29516 e2-29517)
                                           (list '#(syntax-object
                                                    if
                                                    ((top)
                                                     #(ribcage
                                                       #(k e1 e2)
                                                       #((top) (top) (top))
                                                       #("l-*-29422"
                                                         "l-*-29423"
                                                         "l-*-29424"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(f clause clauses)
                                                       #((top) (top) (top))
                                                       #("l-*-29407"
                                                         "l-*-29408"
                                                         "l-*-29409"))
                                                     #(ribcage
                                                       #(e m1 m2)
                                                       #((top) (top) (top))
                                                       #("l-*-29397"
                                                         "l-*-29398"
                                                         "l-*-29399"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("l-*-29394")))
                                                    (hygiene guile))
                                                 (list '#(syntax-object
                                                          memv
                                                          ((top)
                                                           #(ribcage
                                                             #(k e1 e2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("l-*-29422"
                                                               "l-*-29423"
                                                               "l-*-29424"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(f
                                                               clause
                                                               clauses)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("l-*-29407"
                                                               "l-*-29408"
                                                               "l-*-29409"))
                                                           #(ribcage
                                                             #(e m1 m2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("l-*-29397"
                                                               "l-*-29398"
                                                               "l-*-29399"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("l-*-29394")))
                                                          (hygiene guile))
                                                       '#(syntax-object
                                                          t
                                                          ((top)
                                                           #(ribcage
                                                             #(k e1 e2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("l-*-29422"
                                                               "l-*-29423"
                                                               "l-*-29424"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(f
                                                               clause
                                                               clauses)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("l-*-29407"
                                                               "l-*-29408"
                                                               "l-*-29409"))
                                                           #(ribcage
                                                             #(e m1 m2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("l-*-29397"
                                                               "l-*-29398"
                                                               "l-*-29399"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("l-*-29394")))
                                                          (hygiene guile))
                                                       (list '#(syntax-object
                                                                quote
                                                                ((top)
                                                                 #(ribcage
                                                                   #(k e1 e2)
                                                                   #((top)
                                                                     (top)
                                                                     (top))
                                                                   #("l-*-29422"
                                                                     "l-*-29423"
                                                                     "l-*-29424"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(f
                                                                     clause
                                                                     clauses)
                                                                   #((top)
                                                                     (top)
                                                                     (top))
                                                                   #("l-*-29407"
                                                                     "l-*-29408"
                                                                     "l-*-29409"))
                                                                 #(ribcage
                                                                   #(e m1 m2)
                                                                   #((top)
                                                                     (top)
                                                                     (top))
                                                                   #("l-*-29397"
                                                                     "l-*-29398"
                                                                     "l-*-29399"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("l-*-29394")))
                                                                (hygiene
                                                                  guile))
                                                             k-29515))
                                                 (cons '#(syntax-object
                                                          begin
                                                          ((top)
                                                           #(ribcage
                                                             #(k e1 e2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("l-*-29422"
                                                               "l-*-29423"
                                                               "l-*-29424"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(f
                                                               clause
                                                               clauses)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("l-*-29407"
                                                               "l-*-29408"
                                                               "l-*-29409"))
                                                           #(ribcage
                                                             #(e m1 m2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("l-*-29397"
                                                               "l-*-29398"
                                                               "l-*-29399"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("l-*-29394")))
                                                          (hygiene guile))
                                                       (cons e1-29516
                                                             e2-29517))))
                                         tmp-29511)
                                       (syntax-violation
                                         'case
                                         "bad clause"
                                         x-29448
                                         clause-29502)))))
                               (let ((tmp-29525
                                       (f-29499
                                         (car clauses-29503)
                                         (cdr clauses-29503))))
                                 (let ((tmp-29528
                                         ($sc-dispatch
                                           clause-29502
                                           '(each-any any . each-any))))
                                   (if tmp-29528
                                     (@apply
                                       (lambda (k-29532 e1-29533 e2-29534)
                                         (list '#(syntax-object
                                                  if
                                                  ((top)
                                                   #(ribcage
                                                     #(k e1 e2)
                                                     #((top) (top) (top))
                                                     #("l-*-29438"
                                                       "l-*-29439"
                                                       "l-*-29440"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(rest)
                                                     #((top))
                                                     #("l-*-29434"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(f clause clauses)
                                                     #((top) (top) (top))
                                                     #("l-*-29407"
                                                       "l-*-29408"
                                                       "l-*-29409"))
                                                   #(ribcage
                                                     #(e m1 m2)
                                                     #((top) (top) (top))
                                                     #("l-*-29397"
                                                       "l-*-29398"
                                                       "l-*-29399"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("l-*-29394")))
                                                  (hygiene guile))
                                               (list '#(syntax-object
                                                        memv
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("l-*-29438"
                                                             "l-*-29439"
                                                             "l-*-29440"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(rest)
                                                           #((top))
                                                           #("l-*-29434"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("l-*-29407"
                                                             "l-*-29408"
                                                             "l-*-29409"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("l-*-29397"
                                                             "l-*-29398"
                                                             "l-*-29399"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("l-*-29394")))
                                                        (hygiene guile))
                                                     '#(syntax-object
                                                        t
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("l-*-29438"
                                                             "l-*-29439"
                                                             "l-*-29440"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(rest)
                                                           #((top))
                                                           #("l-*-29434"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("l-*-29407"
                                                             "l-*-29408"
                                                             "l-*-29409"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("l-*-29397"
                                                             "l-*-29398"
                                                             "l-*-29399"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("l-*-29394")))
                                                        (hygiene guile))
                                                     (list '#(syntax-object
                                                              quote
                                                              ((top)
                                                               #(ribcage
                                                                 #(k e1 e2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("l-*-29438"
                                                                   "l-*-29439"
                                                                   "l-*-29440"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(rest)
                                                                 #((top))
                                                                 #("l-*-29434"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(f
                                                                   clause
                                                                   clauses)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("l-*-29407"
                                                                   "l-*-29408"
                                                                   "l-*-29409"))
                                                               #(ribcage
                                                                 #(e m1 m2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("l-*-29397"
                                                                   "l-*-29398"
                                                                   "l-*-29399"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(x)
                                                                 #((top))
                                                                 #("l-*-29394")))
                                                              (hygiene guile))
                                                           k-29532))
                                               (cons '#(syntax-object
                                                        begin
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("l-*-29438"
                                                             "l-*-29439"
                                                             "l-*-29440"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(rest)
                                                           #((top))
                                                           #("l-*-29434"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("l-*-29407"
                                                             "l-*-29408"
                                                             "l-*-29409"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("l-*-29397"
                                                             "l-*-29398"
                                                             "l-*-29399"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("l-*-29394")))
                                                        (hygiene guile))
                                                     (cons e1-29533 e2-29534))
                                               tmp-29525))
                                       tmp-29528)
                                     (syntax-violation
                                       'case
                                       "bad clause"
                                       x-29448
                                       clause-29502))))))))
                        (f-29499 m1-29455 m2-29456))))
                (let ((body-29458 tmp-29457))
                  (list '#(syntax-object
                           let
                           ((top)
                            #(ribcage () () ())
                            #(ribcage #(body) #((top)) #("l-*-29405"))
                            #(ribcage
                              #(e m1 m2)
                              #((top) (top) (top))
                              #("l-*-29397" "l-*-29398" "l-*-29399"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("l-*-29394")))
                           (hygiene guile))
                        (list (list '#(syntax-object
                                       t
                                       ((top)
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(body)
                                          #((top))
                                          #("l-*-29405"))
                                        #(ribcage
                                          #(e m1 m2)
                                          #((top) (top) (top))
                                          #("l-*-29397"
                                            "l-*-29398"
                                            "l-*-29399"))
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(x)
                                          #((top))
                                          #("l-*-29394")))
                                       (hygiene guile))
                                    e-29454))
                        body-29458))))
            tmp-29450)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            x-29448))))))

(define make-variable-transformer
  (lambda (proc-29552)
    (if (procedure? proc-29552)
      (letrec*
        ((trans-29553
           (lambda (x-29559) (proc-29552 x-29559))))
        (begin
          (set-procedure-property!
            trans-29553
            'variable-transformer
            #t)
          trans-29553))
      (error "variable transformer not a procedure"
             proc-29552))))

(define identifier-syntax
  (make-syntax-transformer
    'identifier-syntax
    'macro
    (lambda (x-29591)
      (let ((tmp-29593 ($sc-dispatch x-29591 '(_ any))))
        (if tmp-29593
          (@apply
            (lambda (e-29597)
              (list '#(syntax-object
                       lambda
                       ((top)
                        #(ribcage #(e) #((top)) #("l-*-29566"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("l-*-29563")))
                       (hygiene guile))
                    '(#(syntax-object
                        x
                        ((top)
                         #(ribcage #(e) #((top)) #("l-*-29566"))
                         #(ribcage () () ())
                         #(ribcage #(x) #((top)) #("l-*-29563")))
                        (hygiene guile)))
                    '#((#(syntax-object
                          macro-type
                          ((top)
                           #(ribcage #(e) #((top)) #("l-*-29566"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("l-*-29563")))
                          (hygiene guile))
                        .
                        #(syntax-object
                          identifier-syntax
                          ((top)
                           #(ribcage #(e) #((top)) #("l-*-29566"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("l-*-29563")))
                          (hygiene guile))))
                    (list '#(syntax-object
                             syntax-case
                             ((top)
                              #(ribcage #(e) #((top)) #("l-*-29566"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("l-*-29563")))
                             (hygiene guile))
                          '#(syntax-object
                             x
                             ((top)
                              #(ribcage #(e) #((top)) #("l-*-29566"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("l-*-29563")))
                             (hygiene guile))
                          '()
                          (list '#(syntax-object
                                   id
                                   ((top)
                                    #(ribcage #(e) #((top)) #("l-*-29566"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("l-*-29563")))
                                   (hygiene guile))
                                '(#(syntax-object
                                    identifier?
                                    ((top)
                                     #(ribcage #(e) #((top)) #("l-*-29566"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("l-*-29563")))
                                    (hygiene guile))
                                  (#(syntax-object
                                     syntax
                                     ((top)
                                      #(ribcage #(e) #((top)) #("l-*-29566"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("l-*-29563")))
                                     (hygiene guile))
                                   #(syntax-object
                                     id
                                     ((top)
                                      #(ribcage #(e) #((top)) #("l-*-29566"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("l-*-29563")))
                                     (hygiene guile))))
                                (list '#(syntax-object
                                         syntax
                                         ((top)
                                          #(ribcage
                                            #(e)
                                            #((top))
                                            #("l-*-29566"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(x)
                                            #((top))
                                            #("l-*-29563")))
                                         (hygiene guile))
                                      e-29597))
                          (list '(#(syntax-object
                                    _
                                    ((top)
                                     #(ribcage #(e) #((top)) #("l-*-29566"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("l-*-29563")))
                                    (hygiene guile))
                                  #(syntax-object
                                    x
                                    ((top)
                                     #(ribcage #(e) #((top)) #("l-*-29566"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("l-*-29563")))
                                    (hygiene guile))
                                  #(syntax-object
                                    ...
                                    ((top)
                                     #(ribcage #(e) #((top)) #("l-*-29566"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("l-*-29563")))
                                    (hygiene guile)))
                                (list '#(syntax-object
                                         syntax
                                         ((top)
                                          #(ribcage
                                            #(e)
                                            #((top))
                                            #("l-*-29566"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(x)
                                            #((top))
                                            #("l-*-29563")))
                                         (hygiene guile))
                                      (cons e-29597
                                            '(#(syntax-object
                                                x
                                                ((top)
                                                 #(ribcage
                                                   #(e)
                                                   #((top))
                                                   #("l-*-29566"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("l-*-29563")))
                                                (hygiene guile))
                                              #(syntax-object
                                                ...
                                                ((top)
                                                 #(ribcage
                                                   #(e)
                                                   #((top))
                                                   #("l-*-29566"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("l-*-29563")))
                                                (hygiene guile)))))))))
            tmp-29593)
          (let ((tmp-29598
                  ($sc-dispatch
                    x-29591
                    '(_ (any any)
                        ((#(free-id
                            #(syntax-object
                              set!
                              ((top)
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("l-*-29563")))
                              (hygiene guile)))
                          any
                          any)
                         any)))))
            (if (if tmp-29598
                  (@apply
                    (lambda (id-29602
                             exp1-29603
                             var-29604
                             val-29605
                             exp2-29606)
                      (if (identifier? id-29602)
                        (identifier? var-29604)
                        #f))
                    tmp-29598)
                  #f)
              (@apply
                (lambda (id-29607
                         exp1-29608
                         var-29609
                         val-29610
                         exp2-29611)
                  (list '#(syntax-object
                           make-variable-transformer
                           ((top)
                            #(ribcage
                              #(id exp1 var val exp2)
                              #((top) (top) (top) (top) (top))
                              #("l-*-29581"
                                "l-*-29582"
                                "l-*-29583"
                                "l-*-29584"
                                "l-*-29585"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("l-*-29563")))
                           (hygiene guile))
                        (list '#(syntax-object
                                 lambda
                                 ((top)
                                  #(ribcage
                                    #(id exp1 var val exp2)
                                    #((top) (top) (top) (top) (top))
                                    #("l-*-29581"
                                      "l-*-29582"
                                      "l-*-29583"
                                      "l-*-29584"
                                      "l-*-29585"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("l-*-29563")))
                                 (hygiene guile))
                              '(#(syntax-object
                                  x
                                  ((top)
                                   #(ribcage
                                     #(id exp1 var val exp2)
                                     #((top) (top) (top) (top) (top))
                                     #("l-*-29581"
                                       "l-*-29582"
                                       "l-*-29583"
                                       "l-*-29584"
                                       "l-*-29585"))
                                   #(ribcage () () ())
                                   #(ribcage #(x) #((top)) #("l-*-29563")))
                                  (hygiene guile)))
                              '#((#(syntax-object
                                    macro-type
                                    ((top)
                                     #(ribcage
                                       #(id exp1 var val exp2)
                                       #((top) (top) (top) (top) (top))
                                       #("l-*-29581"
                                         "l-*-29582"
                                         "l-*-29583"
                                         "l-*-29584"
                                         "l-*-29585"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("l-*-29563")))
                                    (hygiene guile))
                                  .
                                  #(syntax-object
                                    variable-transformer
                                    ((top)
                                     #(ribcage
                                       #(id exp1 var val exp2)
                                       #((top) (top) (top) (top) (top))
                                       #("l-*-29581"
                                         "l-*-29582"
                                         "l-*-29583"
                                         "l-*-29584"
                                         "l-*-29585"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("l-*-29563")))
                                    (hygiene guile))))
                              (list '#(syntax-object
                                       syntax-case
                                       ((top)
                                        #(ribcage
                                          #(id exp1 var val exp2)
                                          #((top) (top) (top) (top) (top))
                                          #("l-*-29581"
                                            "l-*-29582"
                                            "l-*-29583"
                                            "l-*-29584"
                                            "l-*-29585"))
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(x)
                                          #((top))
                                          #("l-*-29563")))
                                       (hygiene guile))
                                    '#(syntax-object
                                       x
                                       ((top)
                                        #(ribcage
                                          #(id exp1 var val exp2)
                                          #((top) (top) (top) (top) (top))
                                          #("l-*-29581"
                                            "l-*-29582"
                                            "l-*-29583"
                                            "l-*-29584"
                                            "l-*-29585"))
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(x)
                                          #((top))
                                          #("l-*-29563")))
                                       (hygiene guile))
                                    '(#(syntax-object
                                        set!
                                        ((top)
                                         #(ribcage
                                           #(id exp1 var val exp2)
                                           #((top) (top) (top) (top) (top))
                                           #("l-*-29581"
                                             "l-*-29582"
                                             "l-*-29583"
                                             "l-*-29584"
                                             "l-*-29585"))
                                         #(ribcage () () ())
                                         #(ribcage
                                           #(x)
                                           #((top))
                                           #("l-*-29563")))
                                        (hygiene guile)))
                                    (list (list '#(syntax-object
                                                   set!
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("l-*-29581"
                                                        "l-*-29582"
                                                        "l-*-29583"
                                                        "l-*-29584"
                                                        "l-*-29585"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("l-*-29563")))
                                                   (hygiene guile))
                                                var-29609
                                                val-29610)
                                          (list '#(syntax-object
                                                   syntax
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("l-*-29581"
                                                        "l-*-29582"
                                                        "l-*-29583"
                                                        "l-*-29584"
                                                        "l-*-29585"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("l-*-29563")))
                                                   (hygiene guile))
                                                exp2-29611))
                                    (list (cons id-29607
                                                '(#(syntax-object
                                                    x
                                                    ((top)
                                                     #(ribcage
                                                       #(id exp1 var val exp2)
                                                       #((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                       #("l-*-29581"
                                                         "l-*-29582"
                                                         "l-*-29583"
                                                         "l-*-29584"
                                                         "l-*-29585"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("l-*-29563")))
                                                    (hygiene guile))
                                                  #(syntax-object
                                                    ...
                                                    ((top)
                                                     #(ribcage
                                                       #(id exp1 var val exp2)
                                                       #((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                       #("l-*-29581"
                                                         "l-*-29582"
                                                         "l-*-29583"
                                                         "l-*-29584"
                                                         "l-*-29585"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("l-*-29563")))
                                                    (hygiene guile))))
                                          (list '#(syntax-object
                                                   syntax
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("l-*-29581"
                                                        "l-*-29582"
                                                        "l-*-29583"
                                                        "l-*-29584"
                                                        "l-*-29585"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("l-*-29563")))
                                                   (hygiene guile))
                                                (cons exp1-29608
                                                      '(#(syntax-object
                                                          x
                                                          ((top)
                                                           #(ribcage
                                                             #(id
                                                               exp1
                                                               var
                                                               val
                                                               exp2)
                                                             #((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                             #("l-*-29581"
                                                               "l-*-29582"
                                                               "l-*-29583"
                                                               "l-*-29584"
                                                               "l-*-29585"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("l-*-29563")))
                                                          (hygiene guile))
                                                        #(syntax-object
                                                          ...
                                                          ((top)
                                                           #(ribcage
                                                             #(id
                                                               exp1
                                                               var
                                                               val
                                                               exp2)
                                                             #((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                             #("l-*-29581"
                                                               "l-*-29582"
                                                               "l-*-29583"
                                                               "l-*-29584"
                                                               "l-*-29585"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("l-*-29563")))
                                                          (hygiene guile))))))
                                    (list id-29607
                                          (list '#(syntax-object
                                                   identifier?
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("l-*-29581"
                                                        "l-*-29582"
                                                        "l-*-29583"
                                                        "l-*-29584"
                                                        "l-*-29585"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("l-*-29563")))
                                                   (hygiene guile))
                                                (list '#(syntax-object
                                                         syntax
                                                         ((top)
                                                          #(ribcage
                                                            #(id
                                                              exp1
                                                              var
                                                              val
                                                              exp2)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("l-*-29581"
                                                              "l-*-29582"
                                                              "l-*-29583"
                                                              "l-*-29584"
                                                              "l-*-29585"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(x)
                                                            #((top))
                                                            #("l-*-29563")))
                                                         (hygiene guile))
                                                      id-29607))
                                          (list '#(syntax-object
                                                   syntax
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("l-*-29581"
                                                        "l-*-29582"
                                                        "l-*-29583"
                                                        "l-*-29584"
                                                        "l-*-29585"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("l-*-29563")))
                                                   (hygiene guile))
                                                exp1-29608))))))
                tmp-29598)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                x-29591))))))))

(define define*
  (make-syntax-transformer
    'define*
    'macro
    (lambda (x-29643)
      (let ((tmp-29645
              ($sc-dispatch
                x-29643
                '(_ (any . any) any . each-any))))
        (if tmp-29645
          (@apply
            (lambda (id-29649 args-29650 b0-29651 b1-29652)
              (list '#(syntax-object
                       define
                       ((top)
                        #(ribcage
                          #(id args b0 b1)
                          #((top) (top) (top) (top))
                          #("l-*-29625"
                            "l-*-29626"
                            "l-*-29627"
                            "l-*-29628"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("l-*-29622")))
                       (hygiene guile))
                    id-29649
                    (cons '#(syntax-object
                             lambda*
                             ((top)
                              #(ribcage
                                #(id args b0 b1)
                                #((top) (top) (top) (top))
                                #("l-*-29625"
                                  "l-*-29626"
                                  "l-*-29627"
                                  "l-*-29628"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("l-*-29622")))
                             (hygiene guile))
                          (cons args-29650 (cons b0-29651 b1-29652)))))
            tmp-29645)
          (let ((tmp-29653 ($sc-dispatch x-29643 '(_ any any))))
            (if (if tmp-29653
                  (@apply
                    (lambda (id-29657 val-29658)
                      (identifier?
                        '#(syntax-object
                           x
                           ((top)
                            #(ribcage
                              #(id val)
                              #((top) (top))
                              #("l-*-29635" "l-*-29636"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("l-*-29622")))
                           (hygiene guile))))
                    tmp-29653)
                  #f)
              (@apply
                (lambda (id-29659 val-29660)
                  (list '#(syntax-object
                           define
                           ((top)
                            #(ribcage
                              #(id val)
                              #((top) (top))
                              #("l-*-29639" "l-*-29640"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("l-*-29622")))
                           (hygiene guile))
                        id-29659
                        val-29660))
                tmp-29653)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                x-29643))))))))

