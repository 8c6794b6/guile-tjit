(eval-when (compile) (set-current-module (resolve-module (quote (guile)))))
(if #f #f)

(letrec*
  ((#{make-void 208}#
     (lambda (#{src 783}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 0)
         #{src 783}#)))
   (#{make-const 210}#
     (lambda (#{src 785}# #{exp 786}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 1)
         #{src 785}#
         #{exp 786}#)))
   (#{make-lexical-ref 214}#
     (lambda (#{src 793}# #{name 794}# #{gensym 795}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 3)
         #{src 793}#
         #{name 794}#
         #{gensym 795}#)))
   (#{make-lexical-set 216}#
     (lambda (#{src 799}#
              #{name 800}#
              #{gensym 801}#
              #{exp 802}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 4)
         #{src 799}#
         #{name 800}#
         #{gensym 801}#
         #{exp 802}#)))
   (#{make-module-ref 218}#
     (lambda (#{src 807}#
              #{mod 808}#
              #{name 809}#
              #{public? 810}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 5)
         #{src 807}#
         #{mod 808}#
         #{name 809}#
         #{public? 810}#)))
   (#{make-module-set 220}#
     (lambda (#{src 815}#
              #{mod 816}#
              #{name 817}#
              #{public? 818}#
              #{exp 819}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 6)
         #{src 815}#
         #{mod 816}#
         #{name 817}#
         #{public? 818}#
         #{exp 819}#)))
   (#{make-toplevel-ref 222}#
     (lambda (#{src 825}# #{name 826}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 7)
         #{src 825}#
         #{name 826}#)))
   (#{make-toplevel-set 224}#
     (lambda (#{src 829}# #{name 830}# #{exp 831}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 8)
         #{src 829}#
         #{name 830}#
         #{exp 831}#)))
   (#{make-toplevel-define 226}#
     (lambda (#{src 835}# #{name 836}# #{exp 837}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 9)
         #{src 835}#
         #{name 836}#
         #{exp 837}#)))
   (#{make-conditional 228}#
     (lambda (#{src 841}#
              #{test 842}#
              #{consequent 843}#
              #{alternate 844}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 10)
         #{src 841}#
         #{test 842}#
         #{consequent 843}#
         #{alternate 844}#)))
   (#{make-call 230}#
     (lambda (#{src 849}# #{proc 850}# #{args 851}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 11)
         #{src 849}#
         #{proc 850}#
         #{args 851}#)))
   (#{make-primcall 232}#
     (lambda (#{src 855}# #{name 856}# #{args 857}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 12)
         #{src 855}#
         #{name 856}#
         #{args 857}#)))
   (#{make-seq 234}#
     (lambda (#{src 861}# #{head 862}# #{tail 863}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 13)
         #{src 861}#
         #{head 862}#
         #{tail 863}#)))
   (#{make-lambda 236}#
     (lambda (#{src 867}# #{meta 868}# #{body 869}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 14)
         #{src 867}#
         #{meta 868}#
         #{body 869}#)))
   (#{make-lambda-case 238}#
     (lambda (#{src 873}#
              #{req 874}#
              #{opt 875}#
              #{rest 876}#
              #{kw 877}#
              #{inits 878}#
              #{gensyms 879}#
              #{body 880}#
              #{alternate 881}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 15)
         #{src 873}#
         #{req 874}#
         #{opt 875}#
         #{rest 876}#
         #{kw 877}#
         #{inits 878}#
         #{gensyms 879}#
         #{body 880}#
         #{alternate 881}#)))
   (#{make-let 240}#
     (lambda (#{src 891}#
              #{names 892}#
              #{gensyms 893}#
              #{vals 894}#
              #{body 895}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 16)
         #{src 891}#
         #{names 892}#
         #{gensyms 893}#
         #{vals 894}#
         #{body 895}#)))
   (#{make-letrec 242}#
     (lambda (#{src 901}#
              #{in-order? 902}#
              #{names 903}#
              #{gensyms 904}#
              #{vals 905}#
              #{body 906}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 17)
         #{src 901}#
         #{in-order? 902}#
         #{names 903}#
         #{gensyms 904}#
         #{vals 905}#
         #{body 906}#)))
   (#{make-dynlet 244}#
     (lambda (#{src 913}#
              #{fluids 914}#
              #{vals 915}#
              #{body 916}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 18)
         #{src 913}#
         #{fluids 914}#
         #{vals 915}#
         #{body 916}#)))
   (#{lambda? 247}#
     (lambda (#{x 921}#)
       (if (struct? #{x 921}#)
         (eq? (struct-vtable #{x 921}#)
              (vector-ref %expanded-vtables 14))
         #f)))
   (#{lambda-meta 249}#
     (lambda (#{x 925}#) (struct-ref #{x 925}# 1)))
   (#{set-lambda-meta! 251}#
     (lambda (#{x 927}# #{v 928}#)
       (struct-set! #{x 927}# 1 #{v 928}#)))
   (#{top-level-eval-hook 257}#
     (lambda (#{x 931}# #{mod 932}#)
       (primitive-eval #{x 931}#)))
   (#{local-eval-hook 259}#
     (lambda (#{x 935}# #{mod 936}#)
       (primitive-eval #{x 935}#)))
   (#{put-global-definition-hook 263}#
     (lambda (#{symbol 939}# #{type 940}# #{val 941}#)
       (module-define!
         (current-module)
         #{symbol 939}#
         (make-syntax-transformer
           #{symbol 939}#
           #{type 940}#
           #{val 941}#))))
   (#{get-global-definition-hook 265}#
     (lambda (#{symbol 945}# #{module 946}#)
       (begin
         (if (if (not #{module 946}#) (current-module) #f)
           (warn "module system is booted, we should have a module"
                 #{symbol 945}#))
         (let ((#{v 952}# (module-variable
                            (if #{module 946}#
                              (resolve-module (cdr #{module 946}#))
                              (current-module))
                            #{symbol 945}#)))
           (if #{v 952}#
             (if (variable-bound? #{v 952}#)
               (let ((#{val 957}# (variable-ref #{v 952}#)))
                 (if (macro? #{val 957}#)
                   (if (macro-type #{val 957}#)
                     (cons (macro-type #{val 957}#)
                           (macro-binding #{val 957}#))
                     #f)
                   #f))
               #f)
             #f)))))
   (#{decorate-source 267}#
     (lambda (#{e 961}# #{s 962}#)
       (begin
         (if (if (pair? #{e 961}#) #{s 962}# #f)
           (set-source-properties! #{e 961}# #{s 962}#))
         #{e 961}#)))
   (#{maybe-name-value! 269}#
     (lambda (#{name 967}# #{val 968}#)
       (if (#{lambda? 247}# #{val 968}#)
         (let ((#{meta 972}# (#{lambda-meta 249}# #{val 968}#)))
           (if (not (assq 'name #{meta 972}#))
             (#{set-lambda-meta! 251}#
               #{val 968}#
               (cons (cons 'name #{name 967}#) #{meta 972}#)))))))
   (#{build-void 271}#
     (lambda (#{source 973}#)
       (#{make-void 208}# #{source 973}#)))
   (#{build-call 273}#
     (lambda (#{source 975}# #{fun-exp 976}# #{arg-exps 977}#)
       (#{make-call 230}#
         #{source 975}#
         #{fun-exp 976}#
         #{arg-exps 977}#)))
   (#{build-conditional 275}#
     (lambda (#{source 981}#
              #{test-exp 982}#
              #{then-exp 983}#
              #{else-exp 984}#)
       (#{make-conditional 228}#
         #{source 981}#
         #{test-exp 982}#
         #{then-exp 983}#
         #{else-exp 984}#)))
   (#{build-lexical-reference 279}#
     (lambda (#{type 997}#
              #{source 998}#
              #{name 999}#
              #{var 1000}#)
       (#{make-lexical-ref 214}#
         #{source 998}#
         #{name 999}#
         #{var 1000}#)))
   (#{analyze-variable 283}#
     (lambda (#{mod 1013}#
              #{var 1014}#
              #{modref-cont 1015}#
              #{bare-cont 1016}#)
       (if (not #{mod 1013}#)
         (#{bare-cont 1016}# #{var 1014}#)
         (let ((#{kind 1023}# (car #{mod 1013}#))
               (#{mod 1024}# (cdr #{mod 1013}#)))
           (if (memv #{kind 1023}# '(public))
             (#{modref-cont 1015}#
               #{mod 1024}#
               #{var 1014}#
               #t)
             (if (memv #{kind 1023}# '(private))
               (if (not (equal?
                          #{mod 1024}#
                          (module-name (current-module))))
                 (#{modref-cont 1015}#
                   #{mod 1024}#
                   #{var 1014}#
                   #f)
                 (#{bare-cont 1016}# #{var 1014}#))
               (if (memv #{kind 1023}# '(bare))
                 (#{bare-cont 1016}# #{var 1014}#)
                 (if (memv #{kind 1023}# '(hygiene))
                   (if (if (not (equal?
                                  #{mod 1024}#
                                  (module-name (current-module))))
                         (module-variable
                           (resolve-module #{mod 1024}#)
                           #{var 1014}#)
                         #f)
                     (#{modref-cont 1015}#
                       #{mod 1024}#
                       #{var 1014}#
                       #f)
                     (#{bare-cont 1016}# #{var 1014}#))
                   (syntax-violation
                     #f
                     "bad module kind"
                     #{var 1014}#
                     #{mod 1024}#)))))))))
   (#{build-global-reference 285}#
     (lambda (#{source 1032}# #{var 1033}# #{mod 1034}#)
       (#{analyze-variable 283}#
         #{mod 1034}#
         #{var 1033}#
         (lambda (#{mod 1038}# #{var 1039}# #{public? 1040}#)
           (#{make-module-ref 218}#
             #{source 1032}#
             #{mod 1038}#
             #{var 1039}#
             #{public? 1040}#))
         (lambda (#{var 1044}#)
           (#{make-toplevel-ref 222}#
             #{source 1032}#
             #{var 1044}#)))))
   (#{build-global-assignment 287}#
     (lambda (#{source 1046}#
              #{var 1047}#
              #{exp 1048}#
              #{mod 1049}#)
       (begin
         (#{maybe-name-value! 269}#
           #{var 1047}#
           #{exp 1048}#)
         (#{analyze-variable 283}#
           #{mod 1049}#
           #{var 1047}#
           (lambda (#{mod 1054}# #{var 1055}# #{public? 1056}#)
             (#{make-module-set 220}#
               #{source 1046}#
               #{mod 1054}#
               #{var 1055}#
               #{public? 1056}#
               #{exp 1048}#))
           (lambda (#{var 1060}#)
             (#{make-toplevel-set 224}#
               #{source 1046}#
               #{var 1060}#
               #{exp 1048}#))))))
   (#{build-global-definition 289}#
     (lambda (#{source 1062}# #{var 1063}# #{exp 1064}#)
       (begin
         (#{maybe-name-value! 269}#
           #{var 1063}#
           #{exp 1064}#)
         (#{make-toplevel-define 226}#
           #{source 1062}#
           #{var 1063}#
           #{exp 1064}#))))
   (#{build-simple-lambda 291}#
     (lambda (#{src 1068}#
              #{req 1069}#
              #{rest 1070}#
              #{vars 1071}#
              #{meta 1072}#
              #{exp 1073}#)
       (#{make-lambda 236}#
         #{src 1068}#
         #{meta 1072}#
         (#{make-lambda-case 238}#
           #{src 1068}#
           #{req 1069}#
           #f
           #{rest 1070}#
           #f
           '()
           #{vars 1071}#
           #{exp 1073}#
           #f))))
   (#{build-lambda-case 295}#
     (lambda (#{src 1086}#
              #{req 1087}#
              #{opt 1088}#
              #{rest 1089}#
              #{kw 1090}#
              #{inits 1091}#
              #{vars 1092}#
              #{body 1093}#
              #{else-case 1094}#)
       (#{make-lambda-case 238}#
         #{src 1086}#
         #{req 1087}#
         #{opt 1088}#
         #{rest 1089}#
         #{kw 1090}#
         #{inits 1091}#
         #{vars 1092}#
         #{body 1093}#
         #{else-case 1094}#)))
   (#{build-primcall 297}#
     (lambda (#{src 1104}# #{name 1105}# #{args 1106}#)
       (#{make-primcall 232}#
         #{src 1104}#
         #{name 1105}#
         #{args 1106}#)))
   (#{build-data 301}#
     (lambda (#{src 1114}# #{exp 1115}#)
       (#{make-const 210}# #{src 1114}# #{exp 1115}#)))
   (#{build-sequence 303}#
     (lambda (#{src 1118}# #{exps 1119}#)
       (if (null? (cdr #{exps 1119}#))
         (car #{exps 1119}#)
         (#{make-seq 234}#
           #{src 1118}#
           (car #{exps 1119}#)
           (#{build-sequence 303}# #f (cdr #{exps 1119}#))))))
   (#{build-letrec 309}#
     (lambda (#{src 1152}#
              #{in-order? 1153}#
              #{ids 1154}#
              #{vars 1155}#
              #{val-exps 1156}#
              #{body-exp 1157}#)
       (if (null? #{vars 1155}#)
         #{body-exp 1157}#
         (begin
           (for-each
             #{maybe-name-value! 269}#
             #{ids 1154}#
             #{val-exps 1156}#)
           (#{make-letrec 242}#
             #{src 1152}#
             #{in-order? 1153}#
             #{ids 1154}#
             #{vars 1155}#
             #{val-exps 1156}#
             #{body-exp 1157}#)))))
   (#{make-syntax-object 314}#
     (lambda (#{expression 1164}#
              #{wrap 1165}#
              #{module 1166}#)
       (vector
         'syntax-object
         #{expression 1164}#
         #{wrap 1165}#
         #{module 1166}#)))
   (#{syntax-object? 316}#
     (lambda (#{x 1170}#)
       (if (vector? #{x 1170}#)
         (if (= (vector-length #{x 1170}#) 4)
           (eq? (vector-ref #{x 1170}# 0) 'syntax-object)
           #f)
         #f)))
   (#{syntax-object-expression 318}#
     (lambda (#{x 1175}#) (vector-ref #{x 1175}# 1)))
   (#{syntax-object-wrap 320}#
     (lambda (#{x 1177}#) (vector-ref #{x 1177}# 2)))
   (#{syntax-object-module 322}#
     (lambda (#{x 1179}#) (vector-ref #{x 1179}# 3)))
   (#{source-annotation 331}#
     (lambda (#{x 1193}#)
       (if (#{syntax-object? 316}# #{x 1193}#)
         (#{source-annotation 331}#
           (#{syntax-object-expression 318}# #{x 1193}#))
         (if (pair? #{x 1193}#)
           (let ((#{props 1200}# (source-properties #{x 1193}#)))
             (if (pair? #{props 1200}#) #{props 1200}# #f))
           #f))))
   (#{extend-env 341}#
     (lambda (#{labels 1202}# #{bindings 1203}# #{r 1204}#)
       (if (null? #{labels 1202}#)
         #{r 1204}#
         (#{extend-env 341}#
           (cdr #{labels 1202}#)
           (cdr #{bindings 1203}#)
           (cons (cons (car #{labels 1202}#)
                       (car #{bindings 1203}#))
                 #{r 1204}#)))))
   (#{extend-var-env 343}#
     (lambda (#{labels 1208}# #{vars 1209}# #{r 1210}#)
       (if (null? #{labels 1208}#)
         #{r 1210}#
         (#{extend-var-env 343}#
           (cdr #{labels 1208}#)
           (cdr #{vars 1209}#)
           (cons (cons (car #{labels 1208}#)
                       (cons 'lexical (car #{vars 1209}#)))
                 #{r 1210}#)))))
   (#{macros-only-env 345}#
     (lambda (#{r 1215}#)
       (if (null? #{r 1215}#)
         '()
         (let ((#{a 1218}# (car #{r 1215}#)))
           (if (eq? (car (cdr #{a 1218}#)) 'macro)
             (cons #{a 1218}#
                   (#{macros-only-env 345}# (cdr #{r 1215}#)))
             (#{macros-only-env 345}# (cdr #{r 1215}#)))))))
   (#{lookup 347}#
     (lambda (#{x 1219}# #{r 1220}# #{mod 1221}#)
       (let ((#{t 1227}# (assq #{x 1219}# #{r 1220}#)))
         (if #{t 1227}#
           (cdr #{t 1227}#)
           (if (symbol? #{x 1219}#)
             (let ((#{t 1233}#
                     (#{get-global-definition-hook 265}#
                       #{x 1219}#
                       #{mod 1221}#)))
               (if #{t 1233}# #{t 1233}# '(global)))
             '(displaced-lexical))))))
   (#{global-extend 349}#
     (lambda (#{type 1238}# #{sym 1239}# #{val 1240}#)
       (#{put-global-definition-hook 263}#
         #{sym 1239}#
         #{type 1238}#
         #{val 1240}#)))
   (#{nonsymbol-id? 351}#
     (lambda (#{x 1244}#)
       (if (#{syntax-object? 316}# #{x 1244}#)
         (symbol?
           (#{syntax-object-expression 318}# #{x 1244}#))
         #f)))
   (#{id? 353}#
     (lambda (#{x 1248}#)
       (if (symbol? #{x 1248}#)
         #t
         (if (#{syntax-object? 316}# #{x 1248}#)
           (symbol?
             (#{syntax-object-expression 318}# #{x 1248}#))
           #f))))
   (#{id-sym-name&marks 357}#
     (lambda (#{x 1255}# #{w 1256}#)
       (if (#{syntax-object? 316}# #{x 1255}#)
         (values
           (#{syntax-object-expression 318}# #{x 1255}#)
           (#{join-marks 411}#
             (car #{w 1256}#)
             (car (#{syntax-object-wrap 320}# #{x 1255}#))))
         (values #{x 1255}# (car #{w 1256}#)))))
   (#{gen-label 371}#
     (lambda () (symbol->string (gensym "i"))))
   (#{gen-labels 373}#
     (lambda (#{ls 1262}#)
       (if (null? #{ls 1262}#)
         '()
         (cons (#{gen-label 371}#)
               (#{gen-labels 373}# (cdr #{ls 1262}#))))))
   (#{make-ribcage 376}#
     (lambda (#{symnames 1264}#
              #{marks 1265}#
              #{labels 1266}#)
       (vector
         'ribcage
         #{symnames 1264}#
         #{marks 1265}#
         #{labels 1266}#)))
   (#{ribcage-symnames 380}#
     (lambda (#{x 1275}#) (vector-ref #{x 1275}# 1)))
   (#{ribcage-marks 382}#
     (lambda (#{x 1277}#) (vector-ref #{x 1277}# 2)))
   (#{ribcage-labels 384}#
     (lambda (#{x 1279}#) (vector-ref #{x 1279}# 3)))
   (#{set-ribcage-symnames! 386}#
     (lambda (#{x 1281}# #{update 1282}#)
       (vector-set! #{x 1281}# 1 #{update 1282}#)))
   (#{set-ribcage-marks! 388}#
     (lambda (#{x 1285}# #{update 1286}#)
       (vector-set! #{x 1285}# 2 #{update 1286}#)))
   (#{set-ribcage-labels! 390}#
     (lambda (#{x 1289}# #{update 1290}#)
       (vector-set! #{x 1289}# 3 #{update 1290}#)))
   (#{anti-mark 397}#
     (lambda (#{w 1293}#)
       (cons (cons #f (car #{w 1293}#))
             (cons 'shift (cdr #{w 1293}#)))))
   (#{extend-ribcage! 403}#
     (lambda (#{ribcage 1299}# #{id 1300}# #{label 1301}#)
       (begin
         (#{set-ribcage-symnames! 386}#
           #{ribcage 1299}#
           (cons (#{syntax-object-expression 318}# #{id 1300}#)
                 (#{ribcage-symnames 380}# #{ribcage 1299}#)))
         (#{set-ribcage-marks! 388}#
           #{ribcage 1299}#
           (cons (car (#{syntax-object-wrap 320}# #{id 1300}#))
                 (#{ribcage-marks 382}# #{ribcage 1299}#)))
         (#{set-ribcage-labels! 390}#
           #{ribcage 1299}#
           (cons #{label 1301}#
                 (#{ribcage-labels 384}# #{ribcage 1299}#))))))
   (#{make-binding-wrap 405}#
     (lambda (#{ids 1306}# #{labels 1307}# #{w 1308}#)
       (if (null? #{ids 1306}#)
         #{w 1308}#
         (cons (car #{w 1308}#)
               (cons (let ((#{labelvec 1315}#
                             (list->vector #{labels 1307}#)))
                       (let ((#{n 1317}# (vector-length #{labelvec 1315}#)))
                         (let ((#{symnamevec 1320}# (make-vector #{n 1317}#))
                               (#{marksvec 1321}# (make-vector #{n 1317}#)))
                           (begin
                             (letrec*
                               ((#{f 1325}#
                                  (lambda (#{ids 1326}# #{i 1327}#)
                                    (if (not (null? #{ids 1326}#))
                                      (call-with-values
                                        (lambda ()
                                          (#{id-sym-name&marks 357}#
                                            (car #{ids 1326}#)
                                            #{w 1308}#))
                                        (lambda (#{symname 1328}#
                                                 #{marks 1329}#)
                                          (begin
                                            (vector-set!
                                              #{symnamevec 1320}#
                                              #{i 1327}#
                                              #{symname 1328}#)
                                            (vector-set!
                                              #{marksvec 1321}#
                                              #{i 1327}#
                                              #{marks 1329}#)
                                            (#{f 1325}#
                                              (cdr #{ids 1326}#)
                                              (#{1+}# #{i 1327}#)))))))))
                               (#{f 1325}# #{ids 1306}# 0))
                             (#{make-ribcage 376}#
                               #{symnamevec 1320}#
                               #{marksvec 1321}#
                               #{labelvec 1315}#)))))
                     (cdr #{w 1308}#))))))
   (#{smart-append 407}#
     (lambda (#{m1 1334}# #{m2 1335}#)
       (if (null? #{m2 1335}#)
         #{m1 1334}#
         (append #{m1 1334}# #{m2 1335}#))))
   (#{join-wraps 409}#
     (lambda (#{w1 1338}# #{w2 1339}#)
       (let ((#{m1 1344}# (car #{w1 1338}#))
             (#{s1 1345}# (cdr #{w1 1338}#)))
         (if (null? #{m1 1344}#)
           (if (null? #{s1 1345}#)
             #{w2 1339}#
             (cons (car #{w2 1339}#)
                   (#{smart-append 407}#
                     #{s1 1345}#
                     (cdr #{w2 1339}#))))
           (cons (#{smart-append 407}#
                   #{m1 1344}#
                   (car #{w2 1339}#))
                 (#{smart-append 407}#
                   #{s1 1345}#
                   (cdr #{w2 1339}#)))))))
   (#{join-marks 411}#
     (lambda (#{m1 1354}# #{m2 1355}#)
       (#{smart-append 407}# #{m1 1354}# #{m2 1355}#)))
   (#{same-marks? 413}#
     (lambda (#{x 1358}# #{y 1359}#)
       (if (eq? #{x 1358}# #{y 1359}#)
         (eq? #{x 1358}# #{y 1359}#)
         (if (not (null? #{x 1358}#))
           (if (not (null? #{y 1359}#))
             (if (eq? (car #{x 1358}#) (car #{y 1359}#))
               (#{same-marks? 413}#
                 (cdr #{x 1358}#)
                 (cdr #{y 1359}#))
               #f)
             #f)
           #f))))
   (#{id-var-name 415}#
     (lambda (#{id 1370}# #{w 1371}#)
       (letrec*
         ((#{search 1377}#
            (lambda (#{sym 1393}# #{subst 1394}# #{marks 1395}#)
              (if (null? #{subst 1394}#)
                (values #f #{marks 1395}#)
                (let ((#{fst 1400}# (car #{subst 1394}#)))
                  (if (eq? #{fst 1400}# 'shift)
                    (#{search 1377}#
                      #{sym 1393}#
                      (cdr #{subst 1394}#)
                      (cdr #{marks 1395}#))
                    (let ((#{symnames 1402}#
                            (#{ribcage-symnames 380}# #{fst 1400}#)))
                      (if (vector? #{symnames 1402}#)
                        (#{search-vector-rib 1381}#
                          #{sym 1393}#
                          #{subst 1394}#
                          #{marks 1395}#
                          #{symnames 1402}#
                          #{fst 1400}#)
                        (#{search-list-rib 1379}#
                          #{sym 1393}#
                          #{subst 1394}#
                          #{marks 1395}#
                          #{symnames 1402}#
                          #{fst 1400}#))))))))
          (#{search-list-rib 1379}#
            (lambda (#{sym 1403}#
                     #{subst 1404}#
                     #{marks 1405}#
                     #{symnames 1406}#
                     #{ribcage 1407}#)
              (letrec*
                ((#{f 1416}#
                   (lambda (#{symnames 1417}# #{i 1418}#)
                     (if (null? #{symnames 1417}#)
                       (#{search 1377}#
                         #{sym 1403}#
                         (cdr #{subst 1404}#)
                         #{marks 1405}#)
                       (if (if (eq? (car #{symnames 1417}#) #{sym 1403}#)
                             (#{same-marks? 413}#
                               #{marks 1405}#
                               (list-ref
                                 (#{ribcage-marks 382}# #{ribcage 1407}#)
                                 #{i 1418}#))
                             #f)
                         (values
                           (list-ref
                             (#{ribcage-labels 384}# #{ribcage 1407}#)
                             #{i 1418}#)
                           #{marks 1405}#)
                         (#{f 1416}#
                           (cdr #{symnames 1417}#)
                           (#{1+}# #{i 1418}#)))))))
                (#{f 1416}# #{symnames 1406}# 0))))
          (#{search-vector-rib 1381}#
            (lambda (#{sym 1427}#
                     #{subst 1428}#
                     #{marks 1429}#
                     #{symnames 1430}#
                     #{ribcage 1431}#)
              (let ((#{n 1438}# (vector-length #{symnames 1430}#)))
                (letrec*
                  ((#{f 1441}#
                     (lambda (#{i 1442}#)
                       (if (= #{i 1442}# #{n 1438}#)
                         (#{search 1377}#
                           #{sym 1427}#
                           (cdr #{subst 1428}#)
                           #{marks 1429}#)
                         (if (if (eq? (vector-ref #{symnames 1430}# #{i 1442}#)
                                      #{sym 1427}#)
                               (#{same-marks? 413}#
                                 #{marks 1429}#
                                 (vector-ref
                                   (#{ribcage-marks 382}# #{ribcage 1431}#)
                                   #{i 1442}#))
                               #f)
                           (values
                             (vector-ref
                               (#{ribcage-labels 384}# #{ribcage 1431}#)
                               #{i 1442}#)
                             #{marks 1429}#)
                           (#{f 1441}# (#{1+}# #{i 1442}#)))))))
                  (#{f 1441}# 0))))))
         (if (symbol? #{id 1370}#)
           (let ((#{t 1454}#
                   (#{search 1377}#
                     #{id 1370}#
                     (cdr #{w 1371}#)
                     (car #{w 1371}#))))
             (if #{t 1454}# #{t 1454}# #{id 1370}#))
           (if (#{syntax-object? 316}# #{id 1370}#)
             (let ((#{id 1463}#
                     (#{syntax-object-expression 318}# #{id 1370}#))
                   (#{w1 1464}#
                     (#{syntax-object-wrap 320}# #{id 1370}#)))
               (let ((#{marks 1466}#
                       (#{join-marks 411}#
                         (car #{w 1371}#)
                         (car #{w1 1464}#))))
                 (call-with-values
                   (lambda ()
                     (#{search 1377}#
                       #{id 1463}#
                       (cdr #{w 1371}#)
                       #{marks 1466}#))
                   (lambda (#{new-id 1470}# #{marks 1471}#)
                     (if #{new-id 1470}#
                       #{new-id 1470}#
                       (let ((#{t 1479}#
                               (#{search 1377}#
                                 #{id 1463}#
                                 (cdr #{w1 1464}#)
                                 #{marks 1471}#)))
                         (if #{t 1479}# #{t 1479}# #{id 1463}#)))))))
             (syntax-violation
               'id-var-name
               "invalid id"
               #{id 1370}#))))))
   (#{free-id=? 417}#
     (lambda (#{i 1484}# #{j 1485}#)
       (let ((#{ni 1490}#
               (#{id-var-name 415}# #{i 1484}# '(())))
             (#{nj 1491}#
               (#{id-var-name 415}# #{j 1485}# '(()))))
         (if (eq? #{ni 1490}#
                  (if (#{syntax-object? 316}# #{i 1484}#)
                    (#{syntax-object-expression 318}# #{i 1484}#)
                    #{i 1484}#))
           (if (eq? #{nj 1491}#
                    (if (#{syntax-object? 316}# #{j 1485}#)
                      (#{syntax-object-expression 318}# #{j 1485}#)
                      #{j 1485}#))
             (if (let ((#{bi 1514}#
                         (let ((#{mod 4428}#
                                 (if (#{syntax-object? 316}# #{i 1484}#)
                                   (#{syntax-object-module 322}# #{i 1484}#)
                                   #f)))
                           (module-variable
                             (if #{mod 4428}#
                               (resolve-module (cdr #{mod 4428}#))
                               (current-module))
                             (if (#{syntax-object? 316}# #{i 1484}#)
                               (#{syntax-object-expression 318}# #{i 1484}#)
                               #{i 1484}#)))))
                   (if #{bi 1514}#
                     (eq? #{bi 1514}#
                          (let ((#{mod 4432}#
                                  (if (#{syntax-object? 316}# #{j 1485}#)
                                    (#{syntax-object-module 322}# #{j 1485}#)
                                    #f)))
                            (module-variable
                              (if #{mod 4432}#
                                (resolve-module (cdr #{mod 4432}#))
                                (current-module))
                              (if (#{syntax-object? 316}# #{j 1485}#)
                                (#{syntax-object-expression 318}# #{j 1485}#)
                                #{j 1485}#))))
                     (if (not (let ((#{mod 4436}#
                                      (if (#{syntax-object? 316}# #{j 1485}#)
                                        (#{syntax-object-module 322}#
                                          #{j 1485}#)
                                        #f)))
                                (module-variable
                                  (if #{mod 4436}#
                                    (resolve-module (cdr #{mod 4436}#))
                                    (current-module))
                                  (if (#{syntax-object? 316}# #{j 1485}#)
                                    (#{syntax-object-expression 318}#
                                      #{j 1485}#)
                                    #{j 1485}#))))
                       (eq? #{ni 1490}# #{nj 1491}#)
                       #f)))
               (eq? (let ((#{mod 4440}#
                            (if (#{syntax-object? 316}# #{i 1484}#)
                              (#{syntax-object-module 322}# #{i 1484}#)
                              #f)))
                      (module-variable
                        (if #{mod 4440}#
                          (resolve-module (cdr #{mod 4440}#))
                          (current-module))
                        (if (#{syntax-object? 316}# #{i 1484}#)
                          (#{syntax-object-expression 318}# #{i 1484}#)
                          #{i 1484}#)))
                    (let ((#{mod 4444}#
                            (if (#{syntax-object? 316}# #{j 1485}#)
                              (#{syntax-object-module 322}# #{j 1485}#)
                              #f)))
                      (module-variable
                        (if #{mod 4444}#
                          (resolve-module (cdr #{mod 4444}#))
                          (current-module))
                        (if (#{syntax-object? 316}# #{j 1485}#)
                          (#{syntax-object-expression 318}# #{j 1485}#)
                          #{j 1485}#))))
               #f)
             #f)
           (if (eq? #{ni 1490}# #{nj 1491}#)
             (not (eq? #{nj 1491}#
                       (if (#{syntax-object? 316}# #{j 1485}#)
                         (#{syntax-object-expression 318}# #{j 1485}#)
                         #{j 1485}#)))
             #f)))))
   (#{bound-id=? 419}#
     (lambda (#{i 1523}# #{j 1524}#)
       (if (if (#{syntax-object? 316}# #{i 1523}#)
             (#{syntax-object? 316}# #{j 1524}#)
             #f)
         (if (eq? (#{syntax-object-expression 318}# #{i 1523}#)
                  (#{syntax-object-expression 318}# #{j 1524}#))
           (#{same-marks? 413}#
             (car (#{syntax-object-wrap 320}# #{i 1523}#))
             (car (#{syntax-object-wrap 320}# #{j 1524}#)))
           #f)
         (eq? #{i 1523}# #{j 1524}#))))
   (#{valid-bound-ids? 421}#
     (lambda (#{ids 1533}#)
       (if (letrec*
             ((#{all-ids? 1538}#
                (lambda (#{ids 1539}#)
                  (if (null? #{ids 1539}#)
                    (null? #{ids 1539}#)
                    (if (#{id? 353}# (car #{ids 1539}#))
                      (#{all-ids? 1538}# (cdr #{ids 1539}#))
                      #f)))))
             (#{all-ids? 1538}# #{ids 1533}#))
         (#{distinct-bound-ids? 423}# #{ids 1533}#)
         #f)))
   (#{distinct-bound-ids? 423}#
     (lambda (#{ids 1547}#)
       (letrec*
         ((#{distinct? 1551}#
            (lambda (#{ids 1552}#)
              (if (null? #{ids 1552}#)
                (null? #{ids 1552}#)
                (if (not (#{bound-id-member? 425}#
                           (car #{ids 1552}#)
                           (cdr #{ids 1552}#)))
                  (#{distinct? 1551}# (cdr #{ids 1552}#))
                  #f)))))
         (#{distinct? 1551}# #{ids 1547}#))))
   (#{bound-id-member? 425}#
     (lambda (#{x 1559}# #{list 1560}#)
       (if (not (null? #{list 1560}#))
         (let ((#{t 1567}#
                 (#{bound-id=? 419}#
                   #{x 1559}#
                   (car #{list 1560}#))))
           (if #{t 1567}#
             #{t 1567}#
             (#{bound-id-member? 425}#
               #{x 1559}#
               (cdr #{list 1560}#))))
         #f)))
   (#{wrap 427}#
     (lambda (#{x 1569}# #{w 1570}# #{defmod 1571}#)
       (if (if (null? (car #{w 1570}#))
             (null? (cdr #{w 1570}#))
             #f)
         #{x 1569}#
         (if (#{syntax-object? 316}# #{x 1569}#)
           (#{make-syntax-object 314}#
             (#{syntax-object-expression 318}# #{x 1569}#)
             (#{join-wraps 409}#
               #{w 1570}#
               (#{syntax-object-wrap 320}# #{x 1569}#))
             (#{syntax-object-module 322}# #{x 1569}#))
           (if (null? #{x 1569}#)
             #{x 1569}#
             (#{make-syntax-object 314}#
               #{x 1569}#
               #{w 1570}#
               #{defmod 1571}#))))))
   (#{source-wrap 429}#
     (lambda (#{x 1586}#
              #{w 1587}#
              #{s 1588}#
              #{defmod 1589}#)
       (#{wrap 427}#
         (#{decorate-source 267}# #{x 1586}# #{s 1588}#)
         #{w 1587}#
         #{defmod 1589}#)))
   (#{chi-sequence 431}#
     (lambda (#{body 1594}#
              #{r 1595}#
              #{w 1596}#
              #{s 1597}#
              #{mod 1598}#)
       (#{build-sequence 303}#
         #{s 1597}#
         (letrec*
           ((#{dobody 1609}#
              (lambda (#{body 1610}#
                       #{r 1611}#
                       #{w 1612}#
                       #{mod 1613}#)
                (if (null? #{body 1610}#)
                  '()
                  (let ((#{first 1615}#
                          (#{chi 441}#
                            (car #{body 1610}#)
                            #{r 1611}#
                            #{w 1612}#
                            #{mod 1613}#)))
                    (cons #{first 1615}#
                          (#{dobody 1609}#
                            (cdr #{body 1610}#)
                            #{r 1611}#
                            #{w 1612}#
                            #{mod 1613}#)))))))
           (#{dobody 1609}#
             #{body 1594}#
             #{r 1595}#
             #{w 1596}#
             #{mod 1598}#)))))
   (#{chi-top-sequence 433}#
     (lambda (#{body 1616}#
              #{r 1617}#
              #{w 1618}#
              #{s 1619}#
              #{m 1620}#
              #{esew 1621}#
              #{mod 1622}#)
       (letrec*
         ((#{scan 1631}#
            (lambda (#{body 1632}#
                     #{r 1633}#
                     #{w 1634}#
                     #{s 1635}#
                     #{m 1636}#
                     #{esew 1637}#
                     #{mod 1638}#
                     #{exps 1639}#)
              (if (null? #{body 1632}#)
                #{exps 1639}#
                (call-with-values
                  (lambda ()
                    (call-with-values
                      (lambda ()
                        (let ((#{e 1652}# (car #{body 1632}#)))
                          (#{syntax-type 439}#
                            #{e 1652}#
                            #{r 1633}#
                            #{w 1634}#
                            (let ((#{t 1655}#
                                    (#{source-annotation 331}# #{e 1652}#)))
                              (if #{t 1655}# #{t 1655}# #{s 1635}#))
                            #f
                            #{mod 1638}#
                            #f)))
                      (lambda (#{type 1657}#
                               #{value 1658}#
                               #{e 1659}#
                               #{w 1660}#
                               #{s 1661}#
                               #{mod 1662}#)
                        (if (memv #{type 1657}# '(begin-form))
                          (let ((#{tmp 1671}# ($sc-dispatch #{e 1659}# '(_))))
                            (if #{tmp 1671}#
                              (@apply (lambda () #{exps 1639}#) #{tmp 1671}#)
                              (let ((#{tmp 1672}#
                                      ($sc-dispatch
                                        #{e 1659}#
                                        '(_ any . each-any))))
                                (if #{tmp 1672}#
                                  (@apply
                                    (lambda (#{e1 1675}# #{e2 1676}#)
                                      (#{scan 1631}#
                                        (cons #{e1 1675}# #{e2 1676}#)
                                        #{r 1633}#
                                        #{w 1660}#
                                        #{s 1661}#
                                        #{m 1636}#
                                        #{esew 1637}#
                                        #{mod 1662}#
                                        #{exps 1639}#))
                                    #{tmp 1672}#)
                                  (syntax-violation
                                    #f
                                    "source expression failed to match any pattern"
                                    #{e 1659}#)))))
                          (if (memv #{type 1657}# '(local-syntax-form))
                            (#{chi-local-syntax 451}#
                              #{value 1658}#
                              #{e 1659}#
                              #{r 1633}#
                              #{w 1660}#
                              #{s 1661}#
                              #{mod 1662}#
                              (lambda (#{body 1679}#
                                       #{r 1680}#
                                       #{w 1681}#
                                       #{s 1682}#
                                       #{mod 1683}#)
                                (#{scan 1631}#
                                  #{body 1679}#
                                  #{r 1680}#
                                  #{w 1681}#
                                  #{s 1682}#
                                  #{m 1636}#
                                  #{esew 1637}#
                                  #{mod 1683}#
                                  #{exps 1639}#)))
                            (if (memv #{type 1657}# '(eval-when-form))
                              (let ((#{tmp 1691}#
                                      ($sc-dispatch
                                        #{e 1659}#
                                        '(_ each-any any . each-any))))
                                (if #{tmp 1691}#
                                  (@apply
                                    (lambda (#{x 1695}#
                                             #{e1 1696}#
                                             #{e2 1697}#)
                                      (let ((#{when-list 1700}#
                                              (#{chi-when-list 437}#
                                                #{e 1659}#
                                                #{x 1695}#
                                                #{w 1660}#))
                                            (#{body 1701}#
                                              (cons #{e1 1696}# #{e2 1697}#)))
                                        (if (eq? #{m 1636}# 'e)
                                          (if (memq 'eval #{when-list 1700}#)
                                            (#{scan 1631}#
                                              #{body 1701}#
                                              #{r 1633}#
                                              #{w 1660}#
                                              #{s 1661}#
                                              (if (memq 'expand
                                                        #{when-list 1700}#)
                                                'c&e
                                                'e)
                                              '(eval)
                                              #{mod 1662}#
                                              #{exps 1639}#)
                                            (begin
                                              (if (memq 'expand
                                                        #{when-list 1700}#)
                                                (#{top-level-eval-hook 257}#
                                                  (#{chi-top-sequence 433}#
                                                    #{body 1701}#
                                                    #{r 1633}#
                                                    #{w 1660}#
                                                    #{s 1661}#
                                                    'e
                                                    '(eval)
                                                    #{mod 1662}#)
                                                  #{mod 1662}#))
                                              (values #{exps 1639}#)))
                                          (if (memq 'load #{when-list 1700}#)
                                            (if (let ((#{t 1710}#
                                                        (memq 'compile
                                                              #{when-list 1700}#)))
                                                  (if #{t 1710}#
                                                    #{t 1710}#
                                                    (let ((#{t 1713}#
                                                            (memq 'expand
                                                                  #{when-list 1700}#)))
                                                      (if #{t 1713}#
                                                        #{t 1713}#
                                                        (if (eq? #{m 1636}#
                                                                 'c&e)
                                                          (memq 'eval
                                                                #{when-list 1700}#)
                                                          #f)))))
                                              (#{scan 1631}#
                                                #{body 1701}#
                                                #{r 1633}#
                                                #{w 1660}#
                                                #{s 1661}#
                                                'c&e
                                                '(compile load)
                                                #{mod 1662}#
                                                #{exps 1639}#)
                                              (if (memq #{m 1636}# '(c c&e))
                                                (#{scan 1631}#
                                                  #{body 1701}#
                                                  #{r 1633}#
                                                  #{w 1660}#
                                                  #{s 1661}#
                                                  'c
                                                  '(load)
                                                  #{mod 1662}#
                                                  #{exps 1639}#)
                                                (values #{exps 1639}#)))
                                            (if (let ((#{t 1721}#
                                                        (memq 'compile
                                                              #{when-list 1700}#)))
                                                  (if #{t 1721}#
                                                    #{t 1721}#
                                                    (let ((#{t 1724}#
                                                            (memq 'expand
                                                                  #{when-list 1700}#)))
                                                      (if #{t 1724}#
                                                        #{t 1724}#
                                                        (if (eq? #{m 1636}#
                                                                 'c&e)
                                                          (memq 'eval
                                                                #{when-list 1700}#)
                                                          #f)))))
                                              (begin
                                                (#{top-level-eval-hook 257}#
                                                  (#{chi-top-sequence 433}#
                                                    #{body 1701}#
                                                    #{r 1633}#
                                                    #{w 1660}#
                                                    #{s 1661}#
                                                    'e
                                                    '(eval)
                                                    #{mod 1662}#)
                                                  #{mod 1662}#)
                                                (values #{exps 1639}#))
                                              (values #{exps 1639}#))))))
                                    #{tmp 1691}#)
                                  (syntax-violation
                                    #f
                                    "source expression failed to match any pattern"
                                    #{e 1659}#)))
                              (if (memv #{type 1657}# '(define-syntax-form))
                                (let ((#{n 1732}#
                                        (#{id-var-name 415}#
                                          #{value 1658}#
                                          #{w 1660}#))
                                      (#{r 1733}#
                                        (#{macros-only-env 345}# #{r 1633}#)))
                                  (if (memv #{m 1636}# '(c))
                                    (if (memq 'compile #{esew 1637}#)
                                      (let ((#{e 1736}#
                                              (#{chi-install-global 435}#
                                                #{n 1732}#
                                                (#{chi 441}#
                                                  #{e 1659}#
                                                  #{r 1733}#
                                                  #{w 1660}#
                                                  #{mod 1662}#))))
                                        (begin
                                          (#{top-level-eval-hook 257}#
                                            #{e 1736}#
                                            #{mod 1662}#)
                                          (if (memq 'load #{esew 1637}#)
                                            (values
                                              (cons #{e 1736}# #{exps 1639}#))
                                            (values #{exps 1639}#))))
                                      (if (memq 'load #{esew 1637}#)
                                        (values
                                          (cons (#{chi-install-global 435}#
                                                  #{n 1732}#
                                                  (#{chi 441}#
                                                    #{e 1659}#
                                                    #{r 1733}#
                                                    #{w 1660}#
                                                    #{mod 1662}#))
                                                #{exps 1639}#))
                                        (values #{exps 1639}#)))
                                    (if (memv #{m 1636}# '(c&e))
                                      (let ((#{e 1739}#
                                              (#{chi-install-global 435}#
                                                #{n 1732}#
                                                (#{chi 441}#
                                                  #{e 1659}#
                                                  #{r 1733}#
                                                  #{w 1660}#
                                                  #{mod 1662}#))))
                                        (begin
                                          (#{top-level-eval-hook 257}#
                                            #{e 1739}#
                                            #{mod 1662}#)
                                          (values
                                            (cons #{e 1739}# #{exps 1639}#))))
                                      (begin
                                        (if (memq 'eval #{esew 1637}#)
                                          (#{top-level-eval-hook 257}#
                                            (#{chi-install-global 435}#
                                              #{n 1732}#
                                              (#{chi 441}#
                                                #{e 1659}#
                                                #{r 1733}#
                                                #{w 1660}#
                                                #{mod 1662}#))
                                            #{mod 1662}#))
                                        (values #{exps 1639}#)))))
                                (if (memv #{type 1657}# '(define-form))
                                  (let ((#{n 1744}#
                                          (#{id-var-name 415}#
                                            #{value 1658}#
                                            #{w 1660}#)))
                                    (let ((#{type 1746}#
                                            (car (#{lookup 347}#
                                                   #{n 1744}#
                                                   #{r 1633}#
                                                   #{mod 1662}#))))
                                      (if (memv #{type 1746}#
                                                '(global
                                                   core
                                                   macro
                                                   module-ref))
                                        (begin
                                          (if (if (memq #{m 1636}# '(c c&e))
                                                (if (not (module-local-variable
                                                           (current-module)
                                                           #{n 1744}#))
                                                  (current-module)
                                                  #f)
                                                #f)
                                            (let ((#{old 1753}#
                                                    (module-variable
                                                      (current-module)
                                                      #{n 1744}#)))
                                              (if (if (variable? #{old 1753}#)
                                                    (variable-bound?
                                                      #{old 1753}#)
                                                    #f)
                                                (module-define!
                                                  (current-module)
                                                  #{n 1744}#
                                                  (variable-ref #{old 1753}#))
                                                (module-add!
                                                  (current-module)
                                                  #{n 1744}#
                                                  (make-undefined-variable)))))
                                          (values
                                            (cons (if (eq? #{m 1636}# 'c&e)
                                                    (let ((#{x 1757}#
                                                            (#{build-global-definition 289}#
                                                              #{s 1661}#
                                                              #{n 1744}#
                                                              (#{chi 441}#
                                                                #{e 1659}#
                                                                #{r 1633}#
                                                                #{w 1660}#
                                                                #{mod 1662}#))))
                                                      (begin
                                                        (#{top-level-eval-hook 257}#
                                                          #{x 1757}#
                                                          #{mod 1662}#)
                                                        #{x 1757}#))
                                                    (lambda ()
                                                      (#{build-global-definition 289}#
                                                        #{s 1661}#
                                                        #{n 1744}#
                                                        (#{chi 441}#
                                                          #{e 1659}#
                                                          #{r 1633}#
                                                          #{w 1660}#
                                                          #{mod 1662}#))))
                                                  #{exps 1639}#)))
                                        (if (memv #{type 1746}#
                                                  '(displaced-lexical))
                                          (syntax-violation
                                            #f
                                            "identifier out of context"
                                            #{e 1659}#
                                            (#{wrap 427}#
                                              #{value 1658}#
                                              #{w 1660}#
                                              #{mod 1662}#))
                                          (syntax-violation
                                            #f
                                            "cannot define keyword at top level"
                                            #{e 1659}#
                                            (#{wrap 427}#
                                              #{value 1658}#
                                              #{w 1660}#
                                              #{mod 1662}#))))))
                                  (values
                                    (cons (if (eq? #{m 1636}# 'c&e)
                                            (let ((#{x 1762}#
                                                    (#{chi-expr 443}#
                                                      #{type 1657}#
                                                      #{value 1658}#
                                                      #{e 1659}#
                                                      #{r 1633}#
                                                      #{w 1660}#
                                                      #{s 1661}#
                                                      #{mod 1662}#)))
                                              (begin
                                                (#{top-level-eval-hook 257}#
                                                  #{x 1762}#
                                                  #{mod 1662}#)
                                                #{x 1762}#))
                                            (lambda ()
                                              (#{chi-expr 443}#
                                                #{type 1657}#
                                                #{value 1658}#
                                                #{e 1659}#
                                                #{r 1633}#
                                                #{w 1660}#
                                                #{s 1661}#
                                                #{mod 1662}#)))
                                          #{exps 1639}#))))))))))
                  (lambda (#{exps 1763}#)
                    (#{scan 1631}#
                      (cdr #{body 1632}#)
                      #{r 1633}#
                      #{w 1634}#
                      #{s 1635}#
                      #{m 1636}#
                      #{esew 1637}#
                      #{mod 1638}#
                      #{exps 1763}#)))))))
         (call-with-values
           (lambda ()
             (#{scan 1631}#
               #{body 1616}#
               #{r 1617}#
               #{w 1618}#
               #{s 1619}#
               #{m 1620}#
               #{esew 1621}#
               #{mod 1622}#
               '()))
           (lambda (#{exps 1765}#)
             (if (null? #{exps 1765}#)
               (#{build-void 271}# #{s 1619}#)
               (#{build-sequence 303}#
                 #{s 1619}#
                 (letrec*
                   ((#{lp 1770}#
                      (lambda (#{in 1771}# #{out 1772}#)
                        (if (null? #{in 1771}#)
                          #{out 1772}#
                          (let ((#{e 1774}# (car #{in 1771}#)))
                            (#{lp 1770}#
                              (cdr #{in 1771}#)
                              (cons (if (procedure? #{e 1774}#)
                                      (#{e 1774}#)
                                      #{e 1774}#)
                                    #{out 1772}#)))))))
                   (#{lp 1770}# #{exps 1765}# '())))))))))
   (#{chi-install-global 435}#
     (lambda (#{name 1775}# #{e 1776}#)
       (#{build-global-definition 289}#
         #f
         #{name 1775}#
         (#{build-primcall 297}#
           #f
           'make-syntax-transformer
           (list (#{build-data 301}# #f #{name 1775}#)
                 (#{build-data 301}# #f 'macro)
                 #{e 1776}#)))))
   (#{chi-when-list 437}#
     (lambda (#{e 1783}# #{when-list 1784}# #{w 1785}#)
       (letrec*
         ((#{f 1792}#
            (lambda (#{when-list 1793}# #{situations 1794}#)
              (if (null? #{when-list 1793}#)
                #{situations 1794}#
                (#{f 1792}#
                  (cdr #{when-list 1793}#)
                  (cons (let ((#{x 1796}#
                                (syntax->datum (car #{when-list 1793}#))))
                          (if (memq #{x 1796}# '(compile load eval expand))
                            #{x 1796}#
                            (syntax-violation
                              'eval-when
                              "invalid situation"
                              #{e 1783}#
                              (#{wrap 427}#
                                (car #{when-list 1793}#)
                                #{w 1785}#
                                #f))))
                        #{situations 1794}#))))))
         (#{f 1792}# #{when-list 1784}# '()))))
   (#{syntax-type 439}#
     (lambda (#{e 1797}#
              #{r 1798}#
              #{w 1799}#
              #{s 1800}#
              #{rib 1801}#
              #{mod 1802}#
              #{for-car? 1803}#)
       (if (symbol? #{e 1797}#)
         (let ((#{n 1815}#
                 (#{id-var-name 415}# #{e 1797}# #{w 1799}#)))
           (let ((#{b 1817}#
                   (#{lookup 347}#
                     #{n 1815}#
                     #{r 1798}#
                     #{mod 1802}#)))
             (let ((#{type 1819}# (car #{b 1817}#)))
               (if (memv #{type 1819}# '(lexical))
                 (values
                   #{type 1819}#
                   (cdr #{b 1817}#)
                   #{e 1797}#
                   #{w 1799}#
                   #{s 1800}#
                   #{mod 1802}#)
                 (if (memv #{type 1819}# '(global))
                   (values
                     #{type 1819}#
                     #{n 1815}#
                     #{e 1797}#
                     #{w 1799}#
                     #{s 1800}#
                     #{mod 1802}#)
                   (if (memv #{type 1819}# '(macro))
                     (if #{for-car? 1803}#
                       (values
                         #{type 1819}#
                         (cdr #{b 1817}#)
                         #{e 1797}#
                         #{w 1799}#
                         #{s 1800}#
                         #{mod 1802}#)
                       (#{syntax-type 439}#
                         (#{chi-macro 447}#
                           (cdr #{b 1817}#)
                           #{e 1797}#
                           #{r 1798}#
                           #{w 1799}#
                           #{s 1800}#
                           #{rib 1801}#
                           #{mod 1802}#)
                         #{r 1798}#
                         '(())
                         #{s 1800}#
                         #{rib 1801}#
                         #{mod 1802}#
                         #f))
                     (values
                       #{type 1819}#
                       (cdr #{b 1817}#)
                       #{e 1797}#
                       #{w 1799}#
                       #{s 1800}#
                       #{mod 1802}#)))))))
         (if (pair? #{e 1797}#)
           (let ((#{first 1833}# (car #{e 1797}#)))
             (call-with-values
               (lambda ()
                 (#{syntax-type 439}#
                   #{first 1833}#
                   #{r 1798}#
                   #{w 1799}#
                   #{s 1800}#
                   #{rib 1801}#
                   #{mod 1802}#
                   #t))
               (lambda (#{ftype 1834}#
                        #{fval 1835}#
                        #{fe 1836}#
                        #{fw 1837}#
                        #{fs 1838}#
                        #{fmod 1839}#)
                 (if (memv #{ftype 1834}# '(lexical))
                   (values
                     'lexical-call
                     #{fval 1835}#
                     #{e 1797}#
                     #{w 1799}#
                     #{s 1800}#
                     #{mod 1802}#)
                   (if (memv #{ftype 1834}# '(global))
                     (values
                       'global-call
                       (#{make-syntax-object 314}#
                         #{fval 1835}#
                         #{w 1799}#
                         #{fmod 1839}#)
                       #{e 1797}#
                       #{w 1799}#
                       #{s 1800}#
                       #{mod 1802}#)
                     (if (memv #{ftype 1834}# '(macro))
                       (#{syntax-type 439}#
                         (#{chi-macro 447}#
                           #{fval 1835}#
                           #{e 1797}#
                           #{r 1798}#
                           #{w 1799}#
                           #{s 1800}#
                           #{rib 1801}#
                           #{mod 1802}#)
                         #{r 1798}#
                         '(())
                         #{s 1800}#
                         #{rib 1801}#
                         #{mod 1802}#
                         #{for-car? 1803}#)
                       (if (memv #{ftype 1834}# '(module-ref))
                         (call-with-values
                           (lambda ()
                             (#{fval 1835}# #{e 1797}# #{r 1798}# #{w 1799}#))
                           (lambda (#{e 1851}#
                                    #{r 1852}#
                                    #{w 1853}#
                                    #{s 1854}#
                                    #{mod 1855}#)
                             (#{syntax-type 439}#
                               #{e 1851}#
                               #{r 1852}#
                               #{w 1853}#
                               #{s 1854}#
                               #{rib 1801}#
                               #{mod 1855}#
                               #{for-car? 1803}#)))
                         (if (memv #{ftype 1834}# '(core))
                           (values
                             'core-form
                             #{fval 1835}#
                             #{e 1797}#
                             #{w 1799}#
                             #{s 1800}#
                             #{mod 1802}#)
                           (if (memv #{ftype 1834}# '(local-syntax))
                             (values
                               'local-syntax-form
                               #{fval 1835}#
                               #{e 1797}#
                               #{w 1799}#
                               #{s 1800}#
                               #{mod 1802}#)
                             (if (memv #{ftype 1834}# '(begin))
                               (values
                                 'begin-form
                                 #f
                                 #{e 1797}#
                                 #{w 1799}#
                                 #{s 1800}#
                                 #{mod 1802}#)
                               (if (memv #{ftype 1834}# '(eval-when))
                                 (values
                                   'eval-when-form
                                   #f
                                   #{e 1797}#
                                   #{w 1799}#
                                   #{s 1800}#
                                   #{mod 1802}#)
                                 (if (memv #{ftype 1834}# '(define))
                                   (let ((#{tmp 1867}#
                                           ($sc-dispatch
                                             #{e 1797}#
                                             '(_ any any))))
                                     (if (if #{tmp 1867}#
                                           (@apply
                                             (lambda (#{name 1870}#
                                                      #{val 1871}#)
                                               (#{id? 353}# #{name 1870}#))
                                             #{tmp 1867}#)
                                           #f)
                                       (@apply
                                         (lambda (#{name 1874}# #{val 1875}#)
                                           (values
                                             'define-form
                                             #{name 1874}#
                                             #{val 1875}#
                                             #{w 1799}#
                                             #{s 1800}#
                                             #{mod 1802}#))
                                         #{tmp 1867}#)
                                       (let ((#{tmp 1876}#
                                               ($sc-dispatch
                                                 #{e 1797}#
                                                 '(_ (any . any)
                                                     any
                                                     .
                                                     each-any))))
                                         (if (if #{tmp 1876}#
                                               (@apply
                                                 (lambda (#{name 1881}#
                                                          #{args 1882}#
                                                          #{e1 1883}#
                                                          #{e2 1884}#)
                                                   (if (#{id? 353}#
                                                         #{name 1881}#)
                                                     (#{valid-bound-ids? 421}#
                                                       (#{lambda-var-list 471}#
                                                         #{args 1882}#))
                                                     #f))
                                                 #{tmp 1876}#)
                                               #f)
                                           (@apply
                                             (lambda (#{name 1891}#
                                                      #{args 1892}#
                                                      #{e1 1893}#
                                                      #{e2 1894}#)
                                               (values
                                                 'define-form
                                                 (#{wrap 427}#
                                                   #{name 1891}#
                                                   #{w 1799}#
                                                   #{mod 1802}#)
                                                 (#{decorate-source 267}#
                                                   (cons '#(syntax-object
                                                            lambda
                                                            ((top)
                                                             #(ribcage
                                                               #(name
                                                                 args
                                                                 e1
                                                                 e2)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i1887"
                                                                 "i1888"
                                                                 "i1889"
                                                                 "i1890"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(ftype
                                                                 fval
                                                                 fe
                                                                 fw
                                                                 fs
                                                                 fmod)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i1840"
                                                                 "i1841"
                                                                 "i1842"
                                                                 "i1843"
                                                                 "i1844"
                                                                 "i1845"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(first)
                                                               #((top))
                                                               #("i1832"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(e
                                                                 r
                                                                 w
                                                                 s
                                                                 rib
                                                                 mod
                                                                 for-car?)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i1804"
                                                                 "i1805"
                                                                 "i1806"
                                                                 "i1807"
                                                                 "i1808"
                                                                 "i1809"
                                                                 "i1810"))
                                                             #(ribcage
                                                               (lambda-var-list
                                                                 gen-var
                                                                 strip
                                                                 chi-lambda-case
                                                                 lambda*-formals
                                                                 chi-simple-lambda
                                                                 lambda-formals
                                                                 ellipsis?
                                                                 chi-void
                                                                 eval-local-transformer
                                                                 chi-local-syntax
                                                                 chi-body
                                                                 chi-macro
                                                                 chi-call
                                                                 chi-expr
                                                                 chi
                                                                 syntax-type
                                                                 chi-when-list
                                                                 chi-install-global
                                                                 chi-top-sequence
                                                                 chi-sequence
                                                                 source-wrap
                                                                 wrap
                                                                 bound-id-member?
                                                                 distinct-bound-ids?
                                                                 valid-bound-ids?
                                                                 bound-id=?
                                                                 free-id=?
                                                                 id-var-name
                                                                 same-marks?
                                                                 join-marks
                                                                 join-wraps
                                                                 smart-append
                                                                 make-binding-wrap
                                                                 extend-ribcage!
                                                                 make-empty-ribcage
                                                                 new-mark
                                                                 anti-mark
                                                                 the-anti-mark
                                                                 top-marked?
                                                                 top-wrap
                                                                 empty-wrap
                                                                 set-ribcage-labels!
                                                                 set-ribcage-marks!
                                                                 set-ribcage-symnames!
                                                                 ribcage-labels
                                                                 ribcage-marks
                                                                 ribcage-symnames
                                                                 ribcage?
                                                                 make-ribcage
                                                                 gen-labels
                                                                 gen-label
                                                                 make-rename
                                                                 rename-marks
                                                                 rename-new
                                                                 rename-old
                                                                 subst-rename?
                                                                 wrap-subst
                                                                 wrap-marks
                                                                 make-wrap
                                                                 id-sym-name&marks
                                                                 id-sym-name
                                                                 id?
                                                                 nonsymbol-id?
                                                                 global-extend
                                                                 lookup
                                                                 macros-only-env
                                                                 extend-var-env
                                                                 extend-env
                                                                 null-env
                                                                 binding-value
                                                                 binding-type
                                                                 make-binding
                                                                 arg-check
                                                                 source-annotation
                                                                 no-source
                                                                 set-syntax-object-module!
                                                                 set-syntax-object-wrap!
                                                                 set-syntax-object-expression!
                                                                 syntax-object-module
                                                                 syntax-object-wrap
                                                                 syntax-object-expression
                                                                 syntax-object?
                                                                 make-syntax-object
                                                                 build-lexical-var
                                                                 build-letrec
                                                                 build-named-let
                                                                 build-let
                                                                 build-sequence
                                                                 build-data
                                                                 build-primref
                                                                 build-primcall
                                                                 build-lambda-case
                                                                 build-case-lambda
                                                                 build-simple-lambda
                                                                 build-global-definition
                                                                 build-global-assignment
                                                                 build-global-reference
                                                                 analyze-variable
                                                                 build-lexical-assignment
                                                                 build-lexical-reference
                                                                 build-dynlet
                                                                 build-conditional
                                                                 build-call
                                                                 build-void
                                                                 maybe-name-value!
                                                                 decorate-source
                                                                 get-global-definition-hook
                                                                 put-global-definition-hook
                                                                 gensym-hook
                                                                 local-eval-hook
                                                                 top-level-eval-hook
                                                                 fx<
                                                                 fx=
                                                                 fx-
                                                                 fx+
                                                                 set-lambda-meta!
                                                                 lambda-meta
                                                                 lambda?
                                                                 make-dynlet
                                                                 make-letrec
                                                                 make-let
                                                                 make-lambda-case
                                                                 make-lambda
                                                                 make-seq
                                                                 make-primcall
                                                                 make-call
                                                                 make-conditional
                                                                 make-toplevel-define
                                                                 make-toplevel-set
                                                                 make-toplevel-ref
                                                                 make-module-set
                                                                 make-module-ref
                                                                 make-lexical-set
                                                                 make-lexical-ref
                                                                 make-primitive-ref
                                                                 make-const
                                                                 make-void)
                                                               ((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                               ("i470"
                                                                "i468"
                                                                "i466"
                                                                "i464"
                                                                "i462"
                                                                "i460"
                                                                "i458"
                                                                "i456"
                                                                "i454"
                                                                "i452"
                                                                "i450"
                                                                "i448"
                                                                "i446"
                                                                "i444"
                                                                "i442"
                                                                "i440"
                                                                "i438"
                                                                "i436"
                                                                "i434"
                                                                "i432"
                                                                "i430"
                                                                "i428"
                                                                "i426"
                                                                "i424"
                                                                "i422"
                                                                "i420"
                                                                "i418"
                                                                "i416"
                                                                "i414"
                                                                "i412"
                                                                "i410"
                                                                "i408"
                                                                "i406"
                                                                "i404"
                                                                "i402"
                                                                "i401"
                                                                "i399"
                                                                "i396"
                                                                "i395"
                                                                "i394"
                                                                "i392"
                                                                "i391"
                                                                "i389"
                                                                "i387"
                                                                "i385"
                                                                "i383"
                                                                "i381"
                                                                "i379"
                                                                "i377"
                                                                "i375"
                                                                "i372"
                                                                "i370"
                                                                "i369"
                                                                "i367"
                                                                "i365"
                                                                "i363"
                                                                "i361"
                                                                "i360"
                                                                "i359"
                                                                "i358"
                                                                "i356"
                                                                "i355"
                                                                "i352"
                                                                "i350"
                                                                "i348"
                                                                "i346"
                                                                "i344"
                                                                "i342"
                                                                "i340"
                                                                "i339"
                                                                "i338"
                                                                "i336"
                                                                "i334"
                                                                "i333"
                                                                "i330"
                                                                "i329"
                                                                "i327"
                                                                "i325"
                                                                "i323"
                                                                "i321"
                                                                "i319"
                                                                "i317"
                                                                "i315"
                                                                "i313"
                                                                "i311"
                                                                "i308"
                                                                "i306"
                                                                "i304"
                                                                "i302"
                                                                "i300"
                                                                "i298"
                                                                "i296"
                                                                "i294"
                                                                "i292"
                                                                "i290"
                                                                "i288"
                                                                "i286"
                                                                "i284"
                                                                "i282"
                                                                "i280"
                                                                "i278"
                                                                "i276"
                                                                "i274"
                                                                "i272"
                                                                "i270"
                                                                "i268"
                                                                "i266"
                                                                "i264"
                                                                "i262"
                                                                "i261"
                                                                "i258"
                                                                "i256"
                                                                "i255"
                                                                "i254"
                                                                "i253"
                                                                "i252"
                                                                "i250"
                                                                "i248"
                                                                "i246"
                                                                "i243"
                                                                "i241"
                                                                "i239"
                                                                "i237"
                                                                "i235"
                                                                "i233"
                                                                "i231"
                                                                "i229"
                                                                "i227"
                                                                "i225"
                                                                "i223"
                                                                "i221"
                                                                "i219"
                                                                "i217"
                                                                "i215"
                                                                "i213"
                                                                "i211"
                                                                "i209"
                                                                "i207"))
                                                             #(ribcage
                                                               (define-structure
                                                                 define-expansion-accessors
                                                                 define-expansion-constructors)
                                                               ((top)
                                                                (top)
                                                                (top))
                                                               ("i45"
                                                                "i44"
                                                                "i43")))
                                                            (hygiene guile))
                                                         (#{wrap 427}#
                                                           (cons #{args 1892}#
                                                                 (cons #{e1 1893}#
                                                                       #{e2 1894}#))
                                                           #{w 1799}#
                                                           #{mod 1802}#))
                                                   #{s 1800}#)
                                                 '(())
                                                 #{s 1800}#
                                                 #{mod 1802}#))
                                             #{tmp 1876}#)
                                           (let ((#{tmp 1897}#
                                                   ($sc-dispatch
                                                     #{e 1797}#
                                                     '(_ any))))
                                             (if (if #{tmp 1897}#
                                                   (@apply
                                                     (lambda (#{name 1899}#)
                                                       (#{id? 353}#
                                                         #{name 1899}#))
                                                     #{tmp 1897}#)
                                                   #f)
                                               (@apply
                                                 (lambda (#{name 1901}#)
                                                   (values
                                                     'define-form
                                                     (#{wrap 427}#
                                                       #{name 1901}#
                                                       #{w 1799}#
                                                       #{mod 1802}#)
                                                     '(#(syntax-object
                                                         if
                                                         ((top)
                                                          #(ribcage
                                                            #(name)
                                                            #((top))
                                                            #("i1900"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(ftype
                                                              fval
                                                              fe
                                                              fw
                                                              fs
                                                              fmod)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i1840"
                                                              "i1841"
                                                              "i1842"
                                                              "i1843"
                                                              "i1844"
                                                              "i1845"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(first)
                                                            #((top))
                                                            #("i1832"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(e
                                                              r
                                                              w
                                                              s
                                                              rib
                                                              mod
                                                              for-car?)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i1804"
                                                              "i1805"
                                                              "i1806"
                                                              "i1807"
                                                              "i1808"
                                                              "i1809"
                                                              "i1810"))
                                                          #(ribcage
                                                            (lambda-var-list
                                                              gen-var
                                                              strip
                                                              chi-lambda-case
                                                              lambda*-formals
                                                              chi-simple-lambda
                                                              lambda-formals
                                                              ellipsis?
                                                              chi-void
                                                              eval-local-transformer
                                                              chi-local-syntax
                                                              chi-body
                                                              chi-macro
                                                              chi-call
                                                              chi-expr
                                                              chi
                                                              syntax-type
                                                              chi-when-list
                                                              chi-install-global
                                                              chi-top-sequence
                                                              chi-sequence
                                                              source-wrap
                                                              wrap
                                                              bound-id-member?
                                                              distinct-bound-ids?
                                                              valid-bound-ids?
                                                              bound-id=?
                                                              free-id=?
                                                              id-var-name
                                                              same-marks?
                                                              join-marks
                                                              join-wraps
                                                              smart-append
                                                              make-binding-wrap
                                                              extend-ribcage!
                                                              make-empty-ribcage
                                                              new-mark
                                                              anti-mark
                                                              the-anti-mark
                                                              top-marked?
                                                              top-wrap
                                                              empty-wrap
                                                              set-ribcage-labels!
                                                              set-ribcage-marks!
                                                              set-ribcage-symnames!
                                                              ribcage-labels
                                                              ribcage-marks
                                                              ribcage-symnames
                                                              ribcage?
                                                              make-ribcage
                                                              gen-labels
                                                              gen-label
                                                              make-rename
                                                              rename-marks
                                                              rename-new
                                                              rename-old
                                                              subst-rename?
                                                              wrap-subst
                                                              wrap-marks
                                                              make-wrap
                                                              id-sym-name&marks
                                                              id-sym-name
                                                              id?
                                                              nonsymbol-id?
                                                              global-extend
                                                              lookup
                                                              macros-only-env
                                                              extend-var-env
                                                              extend-env
                                                              null-env
                                                              binding-value
                                                              binding-type
                                                              make-binding
                                                              arg-check
                                                              source-annotation
                                                              no-source
                                                              set-syntax-object-module!
                                                              set-syntax-object-wrap!
                                                              set-syntax-object-expression!
                                                              syntax-object-module
                                                              syntax-object-wrap
                                                              syntax-object-expression
                                                              syntax-object?
                                                              make-syntax-object
                                                              build-lexical-var
                                                              build-letrec
                                                              build-named-let
                                                              build-let
                                                              build-sequence
                                                              build-data
                                                              build-primref
                                                              build-primcall
                                                              build-lambda-case
                                                              build-case-lambda
                                                              build-simple-lambda
                                                              build-global-definition
                                                              build-global-assignment
                                                              build-global-reference
                                                              analyze-variable
                                                              build-lexical-assignment
                                                              build-lexical-reference
                                                              build-dynlet
                                                              build-conditional
                                                              build-call
                                                              build-void
                                                              maybe-name-value!
                                                              decorate-source
                                                              get-global-definition-hook
                                                              put-global-definition-hook
                                                              gensym-hook
                                                              local-eval-hook
                                                              top-level-eval-hook
                                                              fx<
                                                              fx=
                                                              fx-
                                                              fx+
                                                              set-lambda-meta!
                                                              lambda-meta
                                                              lambda?
                                                              make-dynlet
                                                              make-letrec
                                                              make-let
                                                              make-lambda-case
                                                              make-lambda
                                                              make-seq
                                                              make-primcall
                                                              make-call
                                                              make-conditional
                                                              make-toplevel-define
                                                              make-toplevel-set
                                                              make-toplevel-ref
                                                              make-module-set
                                                              make-module-ref
                                                              make-lexical-set
                                                              make-lexical-ref
                                                              make-primitive-ref
                                                              make-const
                                                              make-void)
                                                            ((top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                            ("i470"
                                                             "i468"
                                                             "i466"
                                                             "i464"
                                                             "i462"
                                                             "i460"
                                                             "i458"
                                                             "i456"
                                                             "i454"
                                                             "i452"
                                                             "i450"
                                                             "i448"
                                                             "i446"
                                                             "i444"
                                                             "i442"
                                                             "i440"
                                                             "i438"
                                                             "i436"
                                                             "i434"
                                                             "i432"
                                                             "i430"
                                                             "i428"
                                                             "i426"
                                                             "i424"
                                                             "i422"
                                                             "i420"
                                                             "i418"
                                                             "i416"
                                                             "i414"
                                                             "i412"
                                                             "i410"
                                                             "i408"
                                                             "i406"
                                                             "i404"
                                                             "i402"
                                                             "i401"
                                                             "i399"
                                                             "i396"
                                                             "i395"
                                                             "i394"
                                                             "i392"
                                                             "i391"
                                                             "i389"
                                                             "i387"
                                                             "i385"
                                                             "i383"
                                                             "i381"
                                                             "i379"
                                                             "i377"
                                                             "i375"
                                                             "i372"
                                                             "i370"
                                                             "i369"
                                                             "i367"
                                                             "i365"
                                                             "i363"
                                                             "i361"
                                                             "i360"
                                                             "i359"
                                                             "i358"
                                                             "i356"
                                                             "i355"
                                                             "i352"
                                                             "i350"
                                                             "i348"
                                                             "i346"
                                                             "i344"
                                                             "i342"
                                                             "i340"
                                                             "i339"
                                                             "i338"
                                                             "i336"
                                                             "i334"
                                                             "i333"
                                                             "i330"
                                                             "i329"
                                                             "i327"
                                                             "i325"
                                                             "i323"
                                                             "i321"
                                                             "i319"
                                                             "i317"
                                                             "i315"
                                                             "i313"
                                                             "i311"
                                                             "i308"
                                                             "i306"
                                                             "i304"
                                                             "i302"
                                                             "i300"
                                                             "i298"
                                                             "i296"
                                                             "i294"
                                                             "i292"
                                                             "i290"
                                                             "i288"
                                                             "i286"
                                                             "i284"
                                                             "i282"
                                                             "i280"
                                                             "i278"
                                                             "i276"
                                                             "i274"
                                                             "i272"
                                                             "i270"
                                                             "i268"
                                                             "i266"
                                                             "i264"
                                                             "i262"
                                                             "i261"
                                                             "i258"
                                                             "i256"
                                                             "i255"
                                                             "i254"
                                                             "i253"
                                                             "i252"
                                                             "i250"
                                                             "i248"
                                                             "i246"
                                                             "i243"
                                                             "i241"
                                                             "i239"
                                                             "i237"
                                                             "i235"
                                                             "i233"
                                                             "i231"
                                                             "i229"
                                                             "i227"
                                                             "i225"
                                                             "i223"
                                                             "i221"
                                                             "i219"
                                                             "i217"
                                                             "i215"
                                                             "i213"
                                                             "i211"
                                                             "i209"
                                                             "i207"))
                                                          #(ribcage
                                                            (define-structure
                                                              define-expansion-accessors
                                                              define-expansion-constructors)
                                                            ((top) (top) (top))
                                                            ("i45"
                                                             "i44"
                                                             "i43")))
                                                         (hygiene guile))
                                                       #(syntax-object
                                                         #f
                                                         ((top)
                                                          #(ribcage
                                                            #(name)
                                                            #((top))
                                                            #("i1900"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(ftype
                                                              fval
                                                              fe
                                                              fw
                                                              fs
                                                              fmod)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i1840"
                                                              "i1841"
                                                              "i1842"
                                                              "i1843"
                                                              "i1844"
                                                              "i1845"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(first)
                                                            #((top))
                                                            #("i1832"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(e
                                                              r
                                                              w
                                                              s
                                                              rib
                                                              mod
                                                              for-car?)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i1804"
                                                              "i1805"
                                                              "i1806"
                                                              "i1807"
                                                              "i1808"
                                                              "i1809"
                                                              "i1810"))
                                                          #(ribcage
                                                            (lambda-var-list
                                                              gen-var
                                                              strip
                                                              chi-lambda-case
                                                              lambda*-formals
                                                              chi-simple-lambda
                                                              lambda-formals
                                                              ellipsis?
                                                              chi-void
                                                              eval-local-transformer
                                                              chi-local-syntax
                                                              chi-body
                                                              chi-macro
                                                              chi-call
                                                              chi-expr
                                                              chi
                                                              syntax-type
                                                              chi-when-list
                                                              chi-install-global
                                                              chi-top-sequence
                                                              chi-sequence
                                                              source-wrap
                                                              wrap
                                                              bound-id-member?
                                                              distinct-bound-ids?
                                                              valid-bound-ids?
                                                              bound-id=?
                                                              free-id=?
                                                              id-var-name
                                                              same-marks?
                                                              join-marks
                                                              join-wraps
                                                              smart-append
                                                              make-binding-wrap
                                                              extend-ribcage!
                                                              make-empty-ribcage
                                                              new-mark
                                                              anti-mark
                                                              the-anti-mark
                                                              top-marked?
                                                              top-wrap
                                                              empty-wrap
                                                              set-ribcage-labels!
                                                              set-ribcage-marks!
                                                              set-ribcage-symnames!
                                                              ribcage-labels
                                                              ribcage-marks
                                                              ribcage-symnames
                                                              ribcage?
                                                              make-ribcage
                                                              gen-labels
                                                              gen-label
                                                              make-rename
                                                              rename-marks
                                                              rename-new
                                                              rename-old
                                                              subst-rename?
                                                              wrap-subst
                                                              wrap-marks
                                                              make-wrap
                                                              id-sym-name&marks
                                                              id-sym-name
                                                              id?
                                                              nonsymbol-id?
                                                              global-extend
                                                              lookup
                                                              macros-only-env
                                                              extend-var-env
                                                              extend-env
                                                              null-env
                                                              binding-value
                                                              binding-type
                                                              make-binding
                                                              arg-check
                                                              source-annotation
                                                              no-source
                                                              set-syntax-object-module!
                                                              set-syntax-object-wrap!
                                                              set-syntax-object-expression!
                                                              syntax-object-module
                                                              syntax-object-wrap
                                                              syntax-object-expression
                                                              syntax-object?
                                                              make-syntax-object
                                                              build-lexical-var
                                                              build-letrec
                                                              build-named-let
                                                              build-let
                                                              build-sequence
                                                              build-data
                                                              build-primref
                                                              build-primcall
                                                              build-lambda-case
                                                              build-case-lambda
                                                              build-simple-lambda
                                                              build-global-definition
                                                              build-global-assignment
                                                              build-global-reference
                                                              analyze-variable
                                                              build-lexical-assignment
                                                              build-lexical-reference
                                                              build-dynlet
                                                              build-conditional
                                                              build-call
                                                              build-void
                                                              maybe-name-value!
                                                              decorate-source
                                                              get-global-definition-hook
                                                              put-global-definition-hook
                                                              gensym-hook
                                                              local-eval-hook
                                                              top-level-eval-hook
                                                              fx<
                                                              fx=
                                                              fx-
                                                              fx+
                                                              set-lambda-meta!
                                                              lambda-meta
                                                              lambda?
                                                              make-dynlet
                                                              make-letrec
                                                              make-let
                                                              make-lambda-case
                                                              make-lambda
                                                              make-seq
                                                              make-primcall
                                                              make-call
                                                              make-conditional
                                                              make-toplevel-define
                                                              make-toplevel-set
                                                              make-toplevel-ref
                                                              make-module-set
                                                              make-module-ref
                                                              make-lexical-set
                                                              make-lexical-ref
                                                              make-primitive-ref
                                                              make-const
                                                              make-void)
                                                            ((top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                            ("i470"
                                                             "i468"
                                                             "i466"
                                                             "i464"
                                                             "i462"
                                                             "i460"
                                                             "i458"
                                                             "i456"
                                                             "i454"
                                                             "i452"
                                                             "i450"
                                                             "i448"
                                                             "i446"
                                                             "i444"
                                                             "i442"
                                                             "i440"
                                                             "i438"
                                                             "i436"
                                                             "i434"
                                                             "i432"
                                                             "i430"
                                                             "i428"
                                                             "i426"
                                                             "i424"
                                                             "i422"
                                                             "i420"
                                                             "i418"
                                                             "i416"
                                                             "i414"
                                                             "i412"
                                                             "i410"
                                                             "i408"
                                                             "i406"
                                                             "i404"
                                                             "i402"
                                                             "i401"
                                                             "i399"
                                                             "i396"
                                                             "i395"
                                                             "i394"
                                                             "i392"
                                                             "i391"
                                                             "i389"
                                                             "i387"
                                                             "i385"
                                                             "i383"
                                                             "i381"
                                                             "i379"
                                                             "i377"
                                                             "i375"
                                                             "i372"
                                                             "i370"
                                                             "i369"
                                                             "i367"
                                                             "i365"
                                                             "i363"
                                                             "i361"
                                                             "i360"
                                                             "i359"
                                                             "i358"
                                                             "i356"
                                                             "i355"
                                                             "i352"
                                                             "i350"
                                                             "i348"
                                                             "i346"
                                                             "i344"
                                                             "i342"
                                                             "i340"
                                                             "i339"
                                                             "i338"
                                                             "i336"
                                                             "i334"
                                                             "i333"
                                                             "i330"
                                                             "i329"
                                                             "i327"
                                                             "i325"
                                                             "i323"
                                                             "i321"
                                                             "i319"
                                                             "i317"
                                                             "i315"
                                                             "i313"
                                                             "i311"
                                                             "i308"
                                                             "i306"
                                                             "i304"
                                                             "i302"
                                                             "i300"
                                                             "i298"
                                                             "i296"
                                                             "i294"
                                                             "i292"
                                                             "i290"
                                                             "i288"
                                                             "i286"
                                                             "i284"
                                                             "i282"
                                                             "i280"
                                                             "i278"
                                                             "i276"
                                                             "i274"
                                                             "i272"
                                                             "i270"
                                                             "i268"
                                                             "i266"
                                                             "i264"
                                                             "i262"
                                                             "i261"
                                                             "i258"
                                                             "i256"
                                                             "i255"
                                                             "i254"
                                                             "i253"
                                                             "i252"
                                                             "i250"
                                                             "i248"
                                                             "i246"
                                                             "i243"
                                                             "i241"
                                                             "i239"
                                                             "i237"
                                                             "i235"
                                                             "i233"
                                                             "i231"
                                                             "i229"
                                                             "i227"
                                                             "i225"
                                                             "i223"
                                                             "i221"
                                                             "i219"
                                                             "i217"
                                                             "i215"
                                                             "i213"
                                                             "i211"
                                                             "i209"
                                                             "i207"))
                                                          #(ribcage
                                                            (define-structure
                                                              define-expansion-accessors
                                                              define-expansion-constructors)
                                                            ((top) (top) (top))
                                                            ("i45"
                                                             "i44"
                                                             "i43")))
                                                         (hygiene guile))
                                                       #(syntax-object
                                                         #f
                                                         ((top)
                                                          #(ribcage
                                                            #(name)
                                                            #((top))
                                                            #("i1900"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(ftype
                                                              fval
                                                              fe
                                                              fw
                                                              fs
                                                              fmod)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i1840"
                                                              "i1841"
                                                              "i1842"
                                                              "i1843"
                                                              "i1844"
                                                              "i1845"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(first)
                                                            #((top))
                                                            #("i1832"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(e
                                                              r
                                                              w
                                                              s
                                                              rib
                                                              mod
                                                              for-car?)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i1804"
                                                              "i1805"
                                                              "i1806"
                                                              "i1807"
                                                              "i1808"
                                                              "i1809"
                                                              "i1810"))
                                                          #(ribcage
                                                            (lambda-var-list
                                                              gen-var
                                                              strip
                                                              chi-lambda-case
                                                              lambda*-formals
                                                              chi-simple-lambda
                                                              lambda-formals
                                                              ellipsis?
                                                              chi-void
                                                              eval-local-transformer
                                                              chi-local-syntax
                                                              chi-body
                                                              chi-macro
                                                              chi-call
                                                              chi-expr
                                                              chi
                                                              syntax-type
                                                              chi-when-list
                                                              chi-install-global
                                                              chi-top-sequence
                                                              chi-sequence
                                                              source-wrap
                                                              wrap
                                                              bound-id-member?
                                                              distinct-bound-ids?
                                                              valid-bound-ids?
                                                              bound-id=?
                                                              free-id=?
                                                              id-var-name
                                                              same-marks?
                                                              join-marks
                                                              join-wraps
                                                              smart-append
                                                              make-binding-wrap
                                                              extend-ribcage!
                                                              make-empty-ribcage
                                                              new-mark
                                                              anti-mark
                                                              the-anti-mark
                                                              top-marked?
                                                              top-wrap
                                                              empty-wrap
                                                              set-ribcage-labels!
                                                              set-ribcage-marks!
                                                              set-ribcage-symnames!
                                                              ribcage-labels
                                                              ribcage-marks
                                                              ribcage-symnames
                                                              ribcage?
                                                              make-ribcage
                                                              gen-labels
                                                              gen-label
                                                              make-rename
                                                              rename-marks
                                                              rename-new
                                                              rename-old
                                                              subst-rename?
                                                              wrap-subst
                                                              wrap-marks
                                                              make-wrap
                                                              id-sym-name&marks
                                                              id-sym-name
                                                              id?
                                                              nonsymbol-id?
                                                              global-extend
                                                              lookup
                                                              macros-only-env
                                                              extend-var-env
                                                              extend-env
                                                              null-env
                                                              binding-value
                                                              binding-type
                                                              make-binding
                                                              arg-check
                                                              source-annotation
                                                              no-source
                                                              set-syntax-object-module!
                                                              set-syntax-object-wrap!
                                                              set-syntax-object-expression!
                                                              syntax-object-module
                                                              syntax-object-wrap
                                                              syntax-object-expression
                                                              syntax-object?
                                                              make-syntax-object
                                                              build-lexical-var
                                                              build-letrec
                                                              build-named-let
                                                              build-let
                                                              build-sequence
                                                              build-data
                                                              build-primref
                                                              build-primcall
                                                              build-lambda-case
                                                              build-case-lambda
                                                              build-simple-lambda
                                                              build-global-definition
                                                              build-global-assignment
                                                              build-global-reference
                                                              analyze-variable
                                                              build-lexical-assignment
                                                              build-lexical-reference
                                                              build-dynlet
                                                              build-conditional
                                                              build-call
                                                              build-void
                                                              maybe-name-value!
                                                              decorate-source
                                                              get-global-definition-hook
                                                              put-global-definition-hook
                                                              gensym-hook
                                                              local-eval-hook
                                                              top-level-eval-hook
                                                              fx<
                                                              fx=
                                                              fx-
                                                              fx+
                                                              set-lambda-meta!
                                                              lambda-meta
                                                              lambda?
                                                              make-dynlet
                                                              make-letrec
                                                              make-let
                                                              make-lambda-case
                                                              make-lambda
                                                              make-seq
                                                              make-primcall
                                                              make-call
                                                              make-conditional
                                                              make-toplevel-define
                                                              make-toplevel-set
                                                              make-toplevel-ref
                                                              make-module-set
                                                              make-module-ref
                                                              make-lexical-set
                                                              make-lexical-ref
                                                              make-primitive-ref
                                                              make-const
                                                              make-void)
                                                            ((top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                            ("i470"
                                                             "i468"
                                                             "i466"
                                                             "i464"
                                                             "i462"
                                                             "i460"
                                                             "i458"
                                                             "i456"
                                                             "i454"
                                                             "i452"
                                                             "i450"
                                                             "i448"
                                                             "i446"
                                                             "i444"
                                                             "i442"
                                                             "i440"
                                                             "i438"
                                                             "i436"
                                                             "i434"
                                                             "i432"
                                                             "i430"
                                                             "i428"
                                                             "i426"
                                                             "i424"
                                                             "i422"
                                                             "i420"
                                                             "i418"
                                                             "i416"
                                                             "i414"
                                                             "i412"
                                                             "i410"
                                                             "i408"
                                                             "i406"
                                                             "i404"
                                                             "i402"
                                                             "i401"
                                                             "i399"
                                                             "i396"
                                                             "i395"
                                                             "i394"
                                                             "i392"
                                                             "i391"
                                                             "i389"
                                                             "i387"
                                                             "i385"
                                                             "i383"
                                                             "i381"
                                                             "i379"
                                                             "i377"
                                                             "i375"
                                                             "i372"
                                                             "i370"
                                                             "i369"
                                                             "i367"
                                                             "i365"
                                                             "i363"
                                                             "i361"
                                                             "i360"
                                                             "i359"
                                                             "i358"
                                                             "i356"
                                                             "i355"
                                                             "i352"
                                                             "i350"
                                                             "i348"
                                                             "i346"
                                                             "i344"
                                                             "i342"
                                                             "i340"
                                                             "i339"
                                                             "i338"
                                                             "i336"
                                                             "i334"
                                                             "i333"
                                                             "i330"
                                                             "i329"
                                                             "i327"
                                                             "i325"
                                                             "i323"
                                                             "i321"
                                                             "i319"
                                                             "i317"
                                                             "i315"
                                                             "i313"
                                                             "i311"
                                                             "i308"
                                                             "i306"
                                                             "i304"
                                                             "i302"
                                                             "i300"
                                                             "i298"
                                                             "i296"
                                                             "i294"
                                                             "i292"
                                                             "i290"
                                                             "i288"
                                                             "i286"
                                                             "i284"
                                                             "i282"
                                                             "i280"
                                                             "i278"
                                                             "i276"
                                                             "i274"
                                                             "i272"
                                                             "i270"
                                                             "i268"
                                                             "i266"
                                                             "i264"
                                                             "i262"
                                                             "i261"
                                                             "i258"
                                                             "i256"
                                                             "i255"
                                                             "i254"
                                                             "i253"
                                                             "i252"
                                                             "i250"
                                                             "i248"
                                                             "i246"
                                                             "i243"
                                                             "i241"
                                                             "i239"
                                                             "i237"
                                                             "i235"
                                                             "i233"
                                                             "i231"
                                                             "i229"
                                                             "i227"
                                                             "i225"
                                                             "i223"
                                                             "i221"
                                                             "i219"
                                                             "i217"
                                                             "i215"
                                                             "i213"
                                                             "i211"
                                                             "i209"
                                                             "i207"))
                                                          #(ribcage
                                                            (define-structure
                                                              define-expansion-accessors
                                                              define-expansion-constructors)
                                                            ((top) (top) (top))
                                                            ("i45"
                                                             "i44"
                                                             "i43")))
                                                         (hygiene guile)))
                                                     '(())
                                                     #{s 1800}#
                                                     #{mod 1802}#))
                                                 #{tmp 1897}#)
                                               (syntax-violation
                                                 #f
                                                 "source expression failed to match any pattern"
                                                 #{e 1797}#)))))))
                                   (if (memv #{ftype 1834}# '(define-syntax))
                                     (let ((#{tmp 1905}#
                                             ($sc-dispatch
                                               #{e 1797}#
                                               '(_ any any))))
                                       (if (if #{tmp 1905}#
                                             (@apply
                                               (lambda (#{name 1908}#
                                                        #{val 1909}#)
                                                 (#{id? 353}# #{name 1908}#))
                                               #{tmp 1905}#)
                                             #f)
                                         (@apply
                                           (lambda (#{name 1912}# #{val 1913}#)
                                             (values
                                               'define-syntax-form
                                               #{name 1912}#
                                               #{val 1913}#
                                               #{w 1799}#
                                               #{s 1800}#
                                               #{mod 1802}#))
                                           #{tmp 1905}#)
                                         (syntax-violation
                                           #f
                                           "source expression failed to match any pattern"
                                           #{e 1797}#)))
                                     (values
                                       'call
                                       #f
                                       #{e 1797}#
                                       #{w 1799}#
                                       #{s 1800}#
                                       #{mod 1802}#))))))))))))))
           (if (#{syntax-object? 316}# #{e 1797}#)
             (#{syntax-type 439}#
               (#{syntax-object-expression 318}# #{e 1797}#)
               #{r 1798}#
               (#{join-wraps 409}#
                 #{w 1799}#
                 (#{syntax-object-wrap 320}# #{e 1797}#))
               (let ((#{t 1919}#
                       (#{source-annotation 331}# #{e 1797}#)))
                 (if #{t 1919}# #{t 1919}# #{s 1800}#))
               #{rib 1801}#
               (let ((#{t 1923}#
                       (#{syntax-object-module 322}# #{e 1797}#)))
                 (if #{t 1923}# #{t 1923}# #{mod 1802}#))
               #{for-car? 1803}#)
             (if (self-evaluating? #{e 1797}#)
               (values
                 'constant
                 #f
                 #{e 1797}#
                 #{w 1799}#
                 #{s 1800}#
                 #{mod 1802}#)
               (values
                 'other
                 #f
                 #{e 1797}#
                 #{w 1799}#
                 #{s 1800}#
                 #{mod 1802}#)))))))
   (#{chi 441}#
     (lambda (#{e 1928}# #{r 1929}# #{w 1930}# #{mod 1931}#)
       (call-with-values
         (lambda ()
           (#{syntax-type 439}#
             #{e 1928}#
             #{r 1929}#
             #{w 1930}#
             (#{source-annotation 331}# #{e 1928}#)
             #f
             #{mod 1931}#
             #f))
         (lambda (#{type 1936}#
                  #{value 1937}#
                  #{e 1938}#
                  #{w 1939}#
                  #{s 1940}#
                  #{mod 1941}#)
           (#{chi-expr 443}#
             #{type 1936}#
             #{value 1937}#
             #{e 1938}#
             #{r 1929}#
             #{w 1939}#
             #{s 1940}#
             #{mod 1941}#)))))
   (#{chi-expr 443}#
     (lambda (#{type 1948}#
              #{value 1949}#
              #{e 1950}#
              #{r 1951}#
              #{w 1952}#
              #{s 1953}#
              #{mod 1954}#)
       (if (memv #{type 1948}# '(lexical))
         (#{build-lexical-reference 279}#
           'value
           #{s 1953}#
           #{e 1950}#
           #{value 1949}#)
         (if (memv #{type 1948}# '(core core-form))
           (#{value 1949}#
             #{e 1950}#
             #{r 1951}#
             #{w 1952}#
             #{s 1953}#
             #{mod 1954}#)
           (if (memv #{type 1948}# '(module-ref))
             (call-with-values
               (lambda ()
                 (#{value 1949}# #{e 1950}# #{r 1951}# #{w 1952}#))
               (lambda (#{e 1965}#
                        #{r 1966}#
                        #{w 1967}#
                        #{s 1968}#
                        #{mod 1969}#)
                 (#{chi 441}#
                   #{e 1965}#
                   #{r 1966}#
                   #{w 1967}#
                   #{mod 1969}#)))
             (if (memv #{type 1948}# '(lexical-call))
               (#{chi-call 445}#
                 (let ((#{id 1977}# (car #{e 1950}#)))
                   (#{build-lexical-reference 279}#
                     'fun
                     (#{source-annotation 331}# #{id 1977}#)
                     (if (#{syntax-object? 316}# #{id 1977}#)
                       (syntax->datum #{id 1977}#)
                       #{id 1977}#)
                     #{value 1949}#))
                 #{e 1950}#
                 #{r 1951}#
                 #{w 1952}#
                 #{s 1953}#
                 #{mod 1954}#)
               (if (memv #{type 1948}# '(global-call))
                 (#{chi-call 445}#
                   (#{build-global-reference 285}#
                     (#{source-annotation 331}# (car #{e 1950}#))
                     (if (#{syntax-object? 316}# #{value 1949}#)
                       (#{syntax-object-expression 318}# #{value 1949}#)
                       #{value 1949}#)
                     (if (#{syntax-object? 316}# #{value 1949}#)
                       (#{syntax-object-module 322}# #{value 1949}#)
                       #{mod 1954}#))
                   #{e 1950}#
                   #{r 1951}#
                   #{w 1952}#
                   #{s 1953}#
                   #{mod 1954}#)
                 (if (memv #{type 1948}# '(constant))
                   (#{build-data 301}#
                     #{s 1953}#
                     (#{strip 467}#
                       (#{source-wrap 429}#
                         #{e 1950}#
                         #{w 1952}#
                         #{s 1953}#
                         #{mod 1954}#)
                       '(())))
                   (if (memv #{type 1948}# '(global))
                     (#{build-global-reference 285}#
                       #{s 1953}#
                       #{value 1949}#
                       #{mod 1954}#)
                     (if (memv #{type 1948}# '(call))
                       (#{chi-call 445}#
                         (#{chi 441}#
                           (car #{e 1950}#)
                           #{r 1951}#
                           #{w 1952}#
                           #{mod 1954}#)
                         #{e 1950}#
                         #{r 1951}#
                         #{w 1952}#
                         #{s 1953}#
                         #{mod 1954}#)
                       (if (memv #{type 1948}# '(begin-form))
                         (let ((#{tmp 1985}#
                                 ($sc-dispatch
                                   #{e 1950}#
                                   '(_ any . each-any))))
                           (if #{tmp 1985}#
                             (@apply
                               (lambda (#{e1 1988}# #{e2 1989}#)
                                 (#{chi-sequence 431}#
                                   (cons #{e1 1988}# #{e2 1989}#)
                                   #{r 1951}#
                                   #{w 1952}#
                                   #{s 1953}#
                                   #{mod 1954}#))
                               #{tmp 1985}#)
                             (syntax-violation
                               #f
                               "source expression failed to match any pattern"
                               #{e 1950}#)))
                         (if (memv #{type 1948}# '(local-syntax-form))
                           (#{chi-local-syntax 451}#
                             #{value 1949}#
                             #{e 1950}#
                             #{r 1951}#
                             #{w 1952}#
                             #{s 1953}#
                             #{mod 1954}#
                             #{chi-sequence 431}#)
                           (if (memv #{type 1948}# '(eval-when-form))
                             (let ((#{tmp 1994}#
                                     ($sc-dispatch
                                       #{e 1950}#
                                       '(_ each-any any . each-any))))
                               (if #{tmp 1994}#
                                 (@apply
                                   (lambda (#{x 1998}# #{e1 1999}# #{e2 2000}#)
                                     (let ((#{when-list 2002}#
                                             (#{chi-when-list 437}#
                                               #{e 1950}#
                                               #{x 1998}#
                                               #{w 1952}#)))
                                       (if (memq 'eval #{when-list 2002}#)
                                         (#{chi-sequence 431}#
                                           (cons #{e1 1999}# #{e2 2000}#)
                                           #{r 1951}#
                                           #{w 1952}#
                                           #{s 1953}#
                                           #{mod 1954}#)
                                         (#{chi-void 455}#))))
                                   #{tmp 1994}#)
                                 (syntax-violation
                                   #f
                                   "source expression failed to match any pattern"
                                   #{e 1950}#)))
                             (if (memv #{type 1948}#
                                       '(define-form define-syntax-form))
                               (syntax-violation
                                 #f
                                 "definition in expression context"
                                 #{e 1950}#
                                 (#{wrap 427}#
                                   #{value 1949}#
                                   #{w 1952}#
                                   #{mod 1954}#))
                               (if (memv #{type 1948}# '(syntax))
                                 (syntax-violation
                                   #f
                                   "reference to pattern variable outside syntax form"
                                   (#{source-wrap 429}#
                                     #{e 1950}#
                                     #{w 1952}#
                                     #{s 1953}#
                                     #{mod 1954}#))
                                 (if (memv #{type 1948}# '(displaced-lexical))
                                   (syntax-violation
                                     #f
                                     "reference to identifier outside its scope"
                                     (#{source-wrap 429}#
                                       #{e 1950}#
                                       #{w 1952}#
                                       #{s 1953}#
                                       #{mod 1954}#))
                                   (syntax-violation
                                     #f
                                     "unexpected syntax"
                                     (#{source-wrap 429}#
                                       #{e 1950}#
                                       #{w 1952}#
                                       #{s 1953}#
                                       #{mod 1954}#))))))))))))))))))
   (#{chi-call 445}#
     (lambda (#{x 2009}#
              #{e 2010}#
              #{r 2011}#
              #{w 2012}#
              #{s 2013}#
              #{mod 2014}#)
       (let ((#{tmp 2022}#
               ($sc-dispatch #{e 2010}# '(any . each-any))))
         (if #{tmp 2022}#
           (@apply
             (lambda (#{e0 2025}# #{e1 2026}#)
               (#{build-call 273}#
                 #{s 2013}#
                 #{x 2009}#
                 (map (lambda (#{e 2027}#)
                        (#{chi 441}#
                          #{e 2027}#
                          #{r 2011}#
                          #{w 2012}#
                          #{mod 2014}#))
                      #{e1 2026}#)))
             #{tmp 2022}#)
           (syntax-violation
             #f
             "source expression failed to match any pattern"
             #{e 2010}#)))))
   (#{chi-macro 447}#
     (lambda (#{p 2030}#
              #{e 2031}#
              #{r 2032}#
              #{w 2033}#
              #{s 2034}#
              #{rib 2035}#
              #{mod 2036}#)
       (letrec*
         ((#{rebuild-macro-output 2045}#
            (lambda (#{x 2046}# #{m 2047}#)
              (if (pair? #{x 2046}#)
                (#{decorate-source 267}#
                  (cons (#{rebuild-macro-output 2045}#
                          (car #{x 2046}#)
                          #{m 2047}#)
                        (#{rebuild-macro-output 2045}#
                          (cdr #{x 2046}#)
                          #{m 2047}#))
                  #{s 2034}#)
                (if (#{syntax-object? 316}# #{x 2046}#)
                  (let ((#{w 2055}#
                          (#{syntax-object-wrap 320}# #{x 2046}#)))
                    (let ((#{ms 2058}# (car #{w 2055}#))
                          (#{s 2059}# (cdr #{w 2055}#)))
                      (if (if (pair? #{ms 2058}#)
                            (eq? (car #{ms 2058}#) #f)
                            #f)
                        (#{make-syntax-object 314}#
                          (#{syntax-object-expression 318}# #{x 2046}#)
                          (cons (cdr #{ms 2058}#)
                                (if #{rib 2035}#
                                  (cons #{rib 2035}# (cdr #{s 2059}#))
                                  (cdr #{s 2059}#)))
                          (#{syntax-object-module 322}# #{x 2046}#))
                        (#{make-syntax-object 314}#
                          (#{decorate-source 267}#
                            (#{syntax-object-expression 318}# #{x 2046}#)
                            #{s 2059}#)
                          (cons (cons #{m 2047}# #{ms 2058}#)
                                (if #{rib 2035}#
                                  (cons #{rib 2035}# (cons 'shift #{s 2059}#))
                                  (cons 'shift #{s 2059}#)))
                          (#{syntax-object-module 322}# #{x 2046}#)))))
                  (if (vector? #{x 2046}#)
                    (let ((#{n 2071}# (vector-length #{x 2046}#)))
                      (let ((#{v 2073}#
                              (#{decorate-source 267}#
                                (make-vector #{n 2071}#)
                                #{x 2046}#)))
                        (letrec*
                          ((#{loop 2076}#
                             (lambda (#{i 2077}#)
                               (if (= #{i 2077}# #{n 2071}#)
                                 #{v 2073}#
                                 (begin
                                   (vector-set!
                                     #{v 2073}#
                                     #{i 2077}#
                                     (#{rebuild-macro-output 2045}#
                                       (vector-ref #{x 2046}# #{i 2077}#)
                                       #{m 2047}#))
                                   (#{loop 2076}# (#{1+}# #{i 2077}#)))))))
                          (#{loop 2076}# 0))))
                    (if (symbol? #{x 2046}#)
                      (syntax-violation
                        #f
                        "encountered raw symbol in macro output"
                        (#{source-wrap 429}#
                          #{e 2031}#
                          #{w 2033}#
                          (cdr #{w 2033}#)
                          #{mod 2036}#)
                        #{x 2046}#)
                      (#{decorate-source 267}# #{x 2046}# #{s 2034}#))))))))
         (#{rebuild-macro-output 2045}#
           (#{p 2030}#
             (#{source-wrap 429}#
               #{e 2031}#
               (#{anti-mark 397}# #{w 2033}#)
               #{s 2034}#
               #{mod 2036}#))
           (gensym "m")))))
   (#{chi-body 449}#
     (lambda (#{body 2087}#
              #{outer-form 2088}#
              #{r 2089}#
              #{w 2090}#
              #{mod 2091}#)
       (let ((#{r 2099}#
               (cons '("placeholder" placeholder) #{r 2089}#)))
         (let ((#{ribcage 2101}#
                 (#{make-ribcage 376}# '() '() '())))
           (let ((#{w 2104}#
                   (cons (car #{w 2090}#)
                         (cons #{ribcage 2101}# (cdr #{w 2090}#)))))
             (letrec*
               ((#{parse 2116}#
                  (lambda (#{body 2117}#
                           #{ids 2118}#
                           #{labels 2119}#
                           #{var-ids 2120}#
                           #{vars 2121}#
                           #{vals 2122}#
                           #{bindings 2123}#)
                    (if (null? #{body 2117}#)
                      (syntax-violation
                        #f
                        "no expressions in body"
                        #{outer-form 2088}#)
                      (let ((#{e 2128}# (cdr (car #{body 2117}#)))
                            (#{er 2129}# (car (car #{body 2117}#))))
                        (call-with-values
                          (lambda ()
                            (#{syntax-type 439}#
                              #{e 2128}#
                              #{er 2129}#
                              '(())
                              (#{source-annotation 331}# #{er 2129}#)
                              #{ribcage 2101}#
                              #{mod 2091}#
                              #f))
                          (lambda (#{type 2131}#
                                   #{value 2132}#
                                   #{e 2133}#
                                   #{w 2134}#
                                   #{s 2135}#
                                   #{mod 2136}#)
                            (if (memv #{type 2131}# '(define-form))
                              (let ((#{id 2146}#
                                      (#{wrap 427}#
                                        #{value 2132}#
                                        #{w 2134}#
                                        #{mod 2136}#))
                                    (#{label 2147}# (#{gen-label 371}#)))
                                (let ((#{var 2149}#
                                        (#{gen-var 469}# #{id 2146}#)))
                                  (begin
                                    (#{extend-ribcage! 403}#
                                      #{ribcage 2101}#
                                      #{id 2146}#
                                      #{label 2147}#)
                                    (#{parse 2116}#
                                      (cdr #{body 2117}#)
                                      (cons #{id 2146}# #{ids 2118}#)
                                      (cons #{label 2147}# #{labels 2119}#)
                                      (cons #{id 2146}# #{var-ids 2120}#)
                                      (cons #{var 2149}# #{vars 2121}#)
                                      (cons (cons #{er 2129}#
                                                  (#{wrap 427}#
                                                    #{e 2133}#
                                                    #{w 2134}#
                                                    #{mod 2136}#))
                                            #{vals 2122}#)
                                      (cons (cons 'lexical #{var 2149}#)
                                            #{bindings 2123}#)))))
                              (if (memv #{type 2131}# '(define-syntax-form))
                                (let ((#{id 2154}#
                                        (#{wrap 427}#
                                          #{value 2132}#
                                          #{w 2134}#
                                          #{mod 2136}#))
                                      (#{label 2155}# (#{gen-label 371}#)))
                                  (begin
                                    (#{extend-ribcage! 403}#
                                      #{ribcage 2101}#
                                      #{id 2154}#
                                      #{label 2155}#)
                                    (#{parse 2116}#
                                      (cdr #{body 2117}#)
                                      (cons #{id 2154}# #{ids 2118}#)
                                      (cons #{label 2155}# #{labels 2119}#)
                                      #{var-ids 2120}#
                                      #{vars 2121}#
                                      #{vals 2122}#
                                      (cons (cons 'macro
                                                  (cons #{er 2129}#
                                                        (#{wrap 427}#
                                                          #{e 2133}#
                                                          #{w 2134}#
                                                          #{mod 2136}#)))
                                            #{bindings 2123}#))))
                                (if (memv #{type 2131}# '(begin-form))
                                  (let ((#{tmp 2159}#
                                          ($sc-dispatch
                                            #{e 2133}#
                                            '(_ . each-any))))
                                    (if #{tmp 2159}#
                                      (@apply
                                        (lambda (#{e1 2161}#)
                                          (#{parse 2116}#
                                            (letrec*
                                              ((#{f 2164}#
                                                 (lambda (#{forms 2165}#)
                                                   (if (null? #{forms 2165}#)
                                                     (cdr #{body 2117}#)
                                                     (cons (cons #{er 2129}#
                                                                 (#{wrap 427}#
                                                                   (car #{forms 2165}#)
                                                                   #{w 2134}#
                                                                   #{mod 2136}#))
                                                           (#{f 2164}#
                                                             (cdr #{forms 2165}#)))))))
                                              (#{f 2164}# #{e1 2161}#))
                                            #{ids 2118}#
                                            #{labels 2119}#
                                            #{var-ids 2120}#
                                            #{vars 2121}#
                                            #{vals 2122}#
                                            #{bindings 2123}#))
                                        #{tmp 2159}#)
                                      (syntax-violation
                                        #f
                                        "source expression failed to match any pattern"
                                        #{e 2133}#)))
                                  (if (memv #{type 2131}# '(local-syntax-form))
                                    (#{chi-local-syntax 451}#
                                      #{value 2132}#
                                      #{e 2133}#
                                      #{er 2129}#
                                      #{w 2134}#
                                      #{s 2135}#
                                      #{mod 2136}#
                                      (lambda (#{forms 2168}#
                                               #{er 2169}#
                                               #{w 2170}#
                                               #{s 2171}#
                                               #{mod 2172}#)
                                        (#{parse 2116}#
                                          (letrec*
                                            ((#{f 2180}#
                                               (lambda (#{forms 2181}#)
                                                 (if (null? #{forms 2181}#)
                                                   (cdr #{body 2117}#)
                                                   (cons (cons #{er 2169}#
                                                               (#{wrap 427}#
                                                                 (car #{forms 2181}#)
                                                                 #{w 2170}#
                                                                 #{mod 2172}#))
                                                         (#{f 2180}#
                                                           (cdr #{forms 2181}#)))))))
                                            (#{f 2180}# #{forms 2168}#))
                                          #{ids 2118}#
                                          #{labels 2119}#
                                          #{var-ids 2120}#
                                          #{vars 2121}#
                                          #{vals 2122}#
                                          #{bindings 2123}#)))
                                    (if (null? #{ids 2118}#)
                                      (#{build-sequence 303}#
                                        #f
                                        (map (lambda (#{x 2184}#)
                                               (#{chi 441}#
                                                 (cdr #{x 2184}#)
                                                 (car #{x 2184}#)
                                                 '(())
                                                 #{mod 2136}#))
                                             (cons (cons #{er 2129}#
                                                         (#{source-wrap 429}#
                                                           #{e 2133}#
                                                           #{w 2134}#
                                                           #{s 2135}#
                                                           #{mod 2136}#))
                                                   (cdr #{body 2117}#))))
                                      (begin
                                        (if (not (#{valid-bound-ids? 421}#
                                                   #{ids 2118}#))
                                          (syntax-violation
                                            #f
                                            "invalid or duplicate identifier in definition"
                                            #{outer-form 2088}#))
                                        (letrec*
                                          ((#{loop 2191}#
                                             (lambda (#{bs 2192}#
                                                      #{er-cache 2193}#
                                                      #{r-cache 2194}#)
                                               (if (not (null? #{bs 2192}#))
                                                 (let ((#{b 2197}#
                                                         (car #{bs 2192}#)))
                                                   (if (eq? (car #{b 2197}#)
                                                            'macro)
                                                     (let ((#{er 2200}#
                                                             (car (cdr #{b 2197}#))))
                                                       (let ((#{r-cache 2202}#
                                                               (if (eq? #{er 2200}#
                                                                        #{er-cache 2193}#)
                                                                 #{r-cache 2194}#
                                                                 (#{macros-only-env 345}#
                                                                   #{er 2200}#))))
                                                         (begin
                                                           (set-cdr!
                                                             #{b 2197}#
                                                             (#{eval-local-transformer 453}#
                                                               (#{chi 441}#
                                                                 (cdr (cdr #{b 2197}#))
                                                                 #{r-cache 2202}#
                                                                 '(())
                                                                 #{mod 2136}#)
                                                               #{mod 2136}#))
                                                           (#{loop 2191}#
                                                             (cdr #{bs 2192}#)
                                                             #{er 2200}#
                                                             #{r-cache 2202}#))))
                                                     (#{loop 2191}#
                                                       (cdr #{bs 2192}#)
                                                       #{er-cache 2193}#
                                                       #{r-cache 2194}#)))))))
                                          (#{loop 2191}#
                                            #{bindings 2123}#
                                            #f
                                            #f))
                                        (set-cdr!
                                          #{r 2099}#
                                          (#{extend-env 341}#
                                            #{labels 2119}#
                                            #{bindings 2123}#
                                            (cdr #{r 2099}#)))
                                        (#{build-letrec 309}#
                                          #f
                                          #t
                                          (reverse
                                            (map syntax->datum
                                                 #{var-ids 2120}#))
                                          (reverse #{vars 2121}#)
                                          (map (lambda (#{x 2205}#)
                                                 (#{chi 441}#
                                                   (cdr #{x 2205}#)
                                                   (car #{x 2205}#)
                                                   '(())
                                                   #{mod 2136}#))
                                               (reverse #{vals 2122}#))
                                          (#{build-sequence 303}#
                                            #f
                                            (map (lambda (#{x 2209}#)
                                                   (#{chi 441}#
                                                     (cdr #{x 2209}#)
                                                     (car #{x 2209}#)
                                                     '(())
                                                     #{mod 2136}#))
                                                 (cons (cons #{er 2129}#
                                                             (#{source-wrap 429}#
                                                               #{e 2133}#
                                                               #{w 2134}#
                                                               #{s 2135}#
                                                               #{mod 2136}#))
                                                       (cdr #{body 2117}#))))))))))))))))))
               (#{parse 2116}#
                 (map (lambda (#{x 2124}#)
                        (cons #{r 2099}#
                              (#{wrap 427}#
                                #{x 2124}#
                                #{w 2104}#
                                #{mod 2091}#)))
                      #{body 2087}#)
                 '()
                 '()
                 '()
                 '()
                 '()
                 '())))))))
   (#{chi-local-syntax 451}#
     (lambda (#{rec? 2212}#
              #{e 2213}#
              #{r 2214}#
              #{w 2215}#
              #{s 2216}#
              #{mod 2217}#
              #{k 2218}#)
       (let ((#{tmp 2227}#
               ($sc-dispatch
                 #{e 2213}#
                 '(_ #(each (any any)) any . each-any))))
         (if #{tmp 2227}#
           (@apply
             (lambda (#{id 2232}#
                      #{val 2233}#
                      #{e1 2234}#
                      #{e2 2235}#)
               (if (not (#{valid-bound-ids? 421}# #{id 2232}#))
                 (syntax-violation
                   #f
                   "duplicate bound keyword"
                   #{e 2213}#)
                 (let ((#{labels 2240}#
                         (#{gen-labels 373}# #{id 2232}#)))
                   (let ((#{new-w 2242}#
                           (#{make-binding-wrap 405}#
                             #{id 2232}#
                             #{labels 2240}#
                             #{w 2215}#)))
                     (#{k 2218}#
                       (cons #{e1 2234}# #{e2 2235}#)
                       (#{extend-env 341}#
                         #{labels 2240}#
                         (let ((#{trans-r 2247}#
                                 (#{macros-only-env 345}# #{r 2214}#)))
                           (begin
                             (if #{rec? 2212}# (if #f #f))
                             (map (lambda (#{x 2248}#)
                                    (cons 'macro
                                          (#{eval-local-transformer 453}#
                                            (#{chi 441}#
                                              #{x 2248}#
                                              #{trans-r 2247}#
                                              (if #{rec? 2212}#
                                                #{new-w 2242}#
                                                #{w 2215}#)
                                              #{mod 2217}#)
                                            #{mod 2217}#)))
                                  #{val 2233}#)))
                         #{r 2214}#)
                       #{new-w 2242}#
                       #{s 2216}#
                       #{mod 2217}#)))))
             #{tmp 2227}#)
           (syntax-violation
             #f
             "bad local syntax definition"
             (#{source-wrap 429}#
               #{e 2213}#
               #{w 2215}#
               #{s 2216}#
               #{mod 2217}#))))))
   (#{eval-local-transformer 453}#
     (lambda (#{expanded 2254}# #{mod 2255}#)
       (let ((#{p 2259}#
               (#{local-eval-hook 259}#
                 #{expanded 2254}#
                 #{mod 2255}#)))
         (if (procedure? #{p 2259}#)
           #{p 2259}#
           (syntax-violation
             #f
             "nonprocedure transformer"
             #{p 2259}#)))))
   (#{chi-void 455}#
     (lambda () (#{build-void 271}# #f)))
   (#{ellipsis? 457}#
     (lambda (#{x 2261}#)
       (if (#{nonsymbol-id? 351}# #{x 2261}#)
         (#{free-id=? 417}#
           #{x 2261}#
           '#(syntax-object
              ...
              ((top)
               #(ribcage () () ())
               #(ribcage () () ())
               #(ribcage #(x) #((top)) #("i2262"))
               #(ribcage
                 (lambda-var-list
                   gen-var
                   strip
                   chi-lambda-case
                   lambda*-formals
                   chi-simple-lambda
                   lambda-formals
                   ellipsis?
                   chi-void
                   eval-local-transformer
                   chi-local-syntax
                   chi-body
                   chi-macro
                   chi-call
                   chi-expr
                   chi
                   syntax-type
                   chi-when-list
                   chi-install-global
                   chi-top-sequence
                   chi-sequence
                   source-wrap
                   wrap
                   bound-id-member?
                   distinct-bound-ids?
                   valid-bound-ids?
                   bound-id=?
                   free-id=?
                   id-var-name
                   same-marks?
                   join-marks
                   join-wraps
                   smart-append
                   make-binding-wrap
                   extend-ribcage!
                   make-empty-ribcage
                   new-mark
                   anti-mark
                   the-anti-mark
                   top-marked?
                   top-wrap
                   empty-wrap
                   set-ribcage-labels!
                   set-ribcage-marks!
                   set-ribcage-symnames!
                   ribcage-labels
                   ribcage-marks
                   ribcage-symnames
                   ribcage?
                   make-ribcage
                   gen-labels
                   gen-label
                   make-rename
                   rename-marks
                   rename-new
                   rename-old
                   subst-rename?
                   wrap-subst
                   wrap-marks
                   make-wrap
                   id-sym-name&marks
                   id-sym-name
                   id?
                   nonsymbol-id?
                   global-extend
                   lookup
                   macros-only-env
                   extend-var-env
                   extend-env
                   null-env
                   binding-value
                   binding-type
                   make-binding
                   arg-check
                   source-annotation
                   no-source
                   set-syntax-object-module!
                   set-syntax-object-wrap!
                   set-syntax-object-expression!
                   syntax-object-module
                   syntax-object-wrap
                   syntax-object-expression
                   syntax-object?
                   make-syntax-object
                   build-lexical-var
                   build-letrec
                   build-named-let
                   build-let
                   build-sequence
                   build-data
                   build-primref
                   build-primcall
                   build-lambda-case
                   build-case-lambda
                   build-simple-lambda
                   build-global-definition
                   build-global-assignment
                   build-global-reference
                   analyze-variable
                   build-lexical-assignment
                   build-lexical-reference
                   build-dynlet
                   build-conditional
                   build-call
                   build-void
                   maybe-name-value!
                   decorate-source
                   get-global-definition-hook
                   put-global-definition-hook
                   gensym-hook
                   local-eval-hook
                   top-level-eval-hook
                   fx<
                   fx=
                   fx-
                   fx+
                   set-lambda-meta!
                   lambda-meta
                   lambda?
                   make-dynlet
                   make-letrec
                   make-let
                   make-lambda-case
                   make-lambda
                   make-seq
                   make-primcall
                   make-call
                   make-conditional
                   make-toplevel-define
                   make-toplevel-set
                   make-toplevel-ref
                   make-module-set
                   make-module-ref
                   make-lexical-set
                   make-lexical-ref
                   make-primitive-ref
                   make-const
                   make-void)
                 ((top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top)
                  (top))
                 ("i470"
                  "i468"
                  "i466"
                  "i464"
                  "i462"
                  "i460"
                  "i458"
                  "i456"
                  "i454"
                  "i452"
                  "i450"
                  "i448"
                  "i446"
                  "i444"
                  "i442"
                  "i440"
                  "i438"
                  "i436"
                  "i434"
                  "i432"
                  "i430"
                  "i428"
                  "i426"
                  "i424"
                  "i422"
                  "i420"
                  "i418"
                  "i416"
                  "i414"
                  "i412"
                  "i410"
                  "i408"
                  "i406"
                  "i404"
                  "i402"
                  "i401"
                  "i399"
                  "i396"
                  "i395"
                  "i394"
                  "i392"
                  "i391"
                  "i389"
                  "i387"
                  "i385"
                  "i383"
                  "i381"
                  "i379"
                  "i377"
                  "i375"
                  "i372"
                  "i370"
                  "i369"
                  "i367"
                  "i365"
                  "i363"
                  "i361"
                  "i360"
                  "i359"
                  "i358"
                  "i356"
                  "i355"
                  "i352"
                  "i350"
                  "i348"
                  "i346"
                  "i344"
                  "i342"
                  "i340"
                  "i339"
                  "i338"
                  "i336"
                  "i334"
                  "i333"
                  "i330"
                  "i329"
                  "i327"
                  "i325"
                  "i323"
                  "i321"
                  "i319"
                  "i317"
                  "i315"
                  "i313"
                  "i311"
                  "i308"
                  "i306"
                  "i304"
                  "i302"
                  "i300"
                  "i298"
                  "i296"
                  "i294"
                  "i292"
                  "i290"
                  "i288"
                  "i286"
                  "i284"
                  "i282"
                  "i280"
                  "i278"
                  "i276"
                  "i274"
                  "i272"
                  "i270"
                  "i268"
                  "i266"
                  "i264"
                  "i262"
                  "i261"
                  "i258"
                  "i256"
                  "i255"
                  "i254"
                  "i253"
                  "i252"
                  "i250"
                  "i248"
                  "i246"
                  "i243"
                  "i241"
                  "i239"
                  "i237"
                  "i235"
                  "i233"
                  "i231"
                  "i229"
                  "i227"
                  "i225"
                  "i223"
                  "i221"
                  "i219"
                  "i217"
                  "i215"
                  "i213"
                  "i211"
                  "i209"
                  "i207"))
               #(ribcage
                 (define-structure
                   define-expansion-accessors
                   define-expansion-constructors)
                 ((top) (top) (top))
                 ("i45" "i44" "i43")))
              (hygiene guile)))
         #f)))
   (#{lambda-formals 459}#
     (lambda (#{orig-args 2265}#)
       (letrec*
         ((#{req 2268}#
            (lambda (#{args 2271}# #{rreq 2272}#)
              (let ((#{tmp 2276}# ($sc-dispatch #{args 2271}# '())))
                (if #{tmp 2276}#
                  (@apply
                    (lambda ()
                      (#{check 2270}# (reverse #{rreq 2272}#) #f))
                    #{tmp 2276}#)
                  (let ((#{tmp 2277}#
                          ($sc-dispatch #{args 2271}# '(any . any))))
                    (if (if #{tmp 2277}#
                          (@apply
                            (lambda (#{a 2280}# #{b 2281}#)
                              (#{id? 353}# #{a 2280}#))
                            #{tmp 2277}#)
                          #f)
                      (@apply
                        (lambda (#{a 2284}# #{b 2285}#)
                          (#{req 2268}#
                            #{b 2285}#
                            (cons #{a 2284}# #{rreq 2272}#)))
                        #{tmp 2277}#)
                      (let ((#{tmp 2286}# (list #{args 2271}#)))
                        (if (if #{tmp 2286}#
                              (@apply
                                (lambda (#{r 2288}#) (#{id? 353}# #{r 2288}#))
                                #{tmp 2286}#)
                              #f)
                          (@apply
                            (lambda (#{r 2290}#)
                              (#{check 2270}#
                                (reverse #{rreq 2272}#)
                                #{r 2290}#))
                            #{tmp 2286}#)
                          (syntax-violation
                            'lambda
                            "invalid argument list"
                            #{orig-args 2265}#
                            #{args 2271}#)))))))))
          (#{check 2270}#
            (lambda (#{req 2293}# #{rest 2294}#)
              (if (#{distinct-bound-ids? 423}#
                    (if #{rest 2294}#
                      (cons #{rest 2294}# #{req 2293}#)
                      #{req 2293}#))
                (values #{req 2293}# #f #{rest 2294}# #f)
                (syntax-violation
                  'lambda
                  "duplicate identifier in argument list"
                  #{orig-args 2265}#)))))
         (#{req 2268}# #{orig-args 2265}# '()))))
   (#{lambda*-formals 463}#
     (lambda (#{orig-args 2327}#)
       (letrec*
         ((#{req 2330}#
            (lambda (#{args 2339}# #{rreq 2340}#)
              (let ((#{tmp 2344}# ($sc-dispatch #{args 2339}# '())))
                (if #{tmp 2344}#
                  (@apply
                    (lambda ()
                      (#{check 2338}#
                        (reverse #{rreq 2340}#)
                        '()
                        #f
                        '()))
                    #{tmp 2344}#)
                  (let ((#{tmp 2345}#
                          ($sc-dispatch #{args 2339}# '(any . any))))
                    (if (if #{tmp 2345}#
                          (@apply
                            (lambda (#{a 2348}# #{b 2349}#)
                              (#{id? 353}# #{a 2348}#))
                            #{tmp 2345}#)
                          #f)
                      (@apply
                        (lambda (#{a 2352}# #{b 2353}#)
                          (#{req 2330}#
                            #{b 2353}#
                            (cons #{a 2352}# #{rreq 2340}#)))
                        #{tmp 2345}#)
                      (let ((#{tmp 2354}#
                              ($sc-dispatch #{args 2339}# '(any . any))))
                        (if (if #{tmp 2354}#
                              (@apply
                                (lambda (#{a 2357}# #{b 2358}#)
                                  (eq? (syntax->datum #{a 2357}#) #:optional))
                                #{tmp 2354}#)
                              #f)
                          (@apply
                            (lambda (#{a 2361}# #{b 2362}#)
                              (#{opt 2332}#
                                #{b 2362}#
                                (reverse #{rreq 2340}#)
                                '()))
                            #{tmp 2354}#)
                          (let ((#{tmp 2363}#
                                  ($sc-dispatch #{args 2339}# '(any . any))))
                            (if (if #{tmp 2363}#
                                  (@apply
                                    (lambda (#{a 2366}# #{b 2367}#)
                                      (eq? (syntax->datum #{a 2366}#) #:key))
                                    #{tmp 2363}#)
                                  #f)
                              (@apply
                                (lambda (#{a 2370}# #{b 2371}#)
                                  (#{key 2334}#
                                    #{b 2371}#
                                    (reverse #{rreq 2340}#)
                                    '()
                                    '()))
                                #{tmp 2363}#)
                              (let ((#{tmp 2372}#
                                      ($sc-dispatch #{args 2339}# '(any any))))
                                (if (if #{tmp 2372}#
                                      (@apply
                                        (lambda (#{a 2375}# #{b 2376}#)
                                          (eq? (syntax->datum #{a 2375}#)
                                               #:rest))
                                        #{tmp 2372}#)
                                      #f)
                                  (@apply
                                    (lambda (#{a 2379}# #{b 2380}#)
                                      (#{rest 2336}#
                                        #{b 2380}#
                                        (reverse #{rreq 2340}#)
                                        '()
                                        '()))
                                    #{tmp 2372}#)
                                  (let ((#{tmp 2381}# (list #{args 2339}#)))
                                    (if (if #{tmp 2381}#
                                          (@apply
                                            (lambda (#{r 2383}#)
                                              (#{id? 353}# #{r 2383}#))
                                            #{tmp 2381}#)
                                          #f)
                                      (@apply
                                        (lambda (#{r 2385}#)
                                          (#{rest 2336}#
                                            #{r 2385}#
                                            (reverse #{rreq 2340}#)
                                            '()
                                            '()))
                                        #{tmp 2381}#)
                                      (syntax-violation
                                        'lambda*
                                        "invalid argument list"
                                        #{orig-args 2327}#
                                        #{args 2339}#)))))))))))))))
          (#{opt 2332}#
            (lambda (#{args 2388}# #{req 2389}# #{ropt 2390}#)
              (let ((#{tmp 2395}# ($sc-dispatch #{args 2388}# '())))
                (if #{tmp 2395}#
                  (@apply
                    (lambda ()
                      (#{check 2338}#
                        #{req 2389}#
                        (reverse #{ropt 2390}#)
                        #f
                        '()))
                    #{tmp 2395}#)
                  (let ((#{tmp 2396}#
                          ($sc-dispatch #{args 2388}# '(any . any))))
                    (if (if #{tmp 2396}#
                          (@apply
                            (lambda (#{a 2399}# #{b 2400}#)
                              (#{id? 353}# #{a 2399}#))
                            #{tmp 2396}#)
                          #f)
                      (@apply
                        (lambda (#{a 2403}# #{b 2404}#)
                          (#{opt 2332}#
                            #{b 2404}#
                            #{req 2389}#
                            (cons (cons #{a 2403}#
                                        '(#(syntax-object
                                            #f
                                            ((top)
                                             #(ribcage
                                               #(a b)
                                               #((top) (top))
                                               #("i2401" "i2402"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(args req ropt)
                                               #((top) (top) (top))
                                               #("i2391" "i2392" "i2393"))
                                             #(ribcage
                                               (check rest key opt req)
                                               ((top) (top) (top) (top) (top))
                                               ("i2337"
                                                "i2335"
                                                "i2333"
                                                "i2331"
                                                "i2329"))
                                             #(ribcage
                                               #(orig-args)
                                               #((top))
                                               #("i2328"))
                                             #(ribcage
                                               (lambda-var-list
                                                 gen-var
                                                 strip
                                                 chi-lambda-case
                                                 lambda*-formals
                                                 chi-simple-lambda
                                                 lambda-formals
                                                 ellipsis?
                                                 chi-void
                                                 eval-local-transformer
                                                 chi-local-syntax
                                                 chi-body
                                                 chi-macro
                                                 chi-call
                                                 chi-expr
                                                 chi
                                                 syntax-type
                                                 chi-when-list
                                                 chi-install-global
                                                 chi-top-sequence
                                                 chi-sequence
                                                 source-wrap
                                                 wrap
                                                 bound-id-member?
                                                 distinct-bound-ids?
                                                 valid-bound-ids?
                                                 bound-id=?
                                                 free-id=?
                                                 id-var-name
                                                 same-marks?
                                                 join-marks
                                                 join-wraps
                                                 smart-append
                                                 make-binding-wrap
                                                 extend-ribcage!
                                                 make-empty-ribcage
                                                 new-mark
                                                 anti-mark
                                                 the-anti-mark
                                                 top-marked?
                                                 top-wrap
                                                 empty-wrap
                                                 set-ribcage-labels!
                                                 set-ribcage-marks!
                                                 set-ribcage-symnames!
                                                 ribcage-labels
                                                 ribcage-marks
                                                 ribcage-symnames
                                                 ribcage?
                                                 make-ribcage
                                                 gen-labels
                                                 gen-label
                                                 make-rename
                                                 rename-marks
                                                 rename-new
                                                 rename-old
                                                 subst-rename?
                                                 wrap-subst
                                                 wrap-marks
                                                 make-wrap
                                                 id-sym-name&marks
                                                 id-sym-name
                                                 id?
                                                 nonsymbol-id?
                                                 global-extend
                                                 lookup
                                                 macros-only-env
                                                 extend-var-env
                                                 extend-env
                                                 null-env
                                                 binding-value
                                                 binding-type
                                                 make-binding
                                                 arg-check
                                                 source-annotation
                                                 no-source
                                                 set-syntax-object-module!
                                                 set-syntax-object-wrap!
                                                 set-syntax-object-expression!
                                                 syntax-object-module
                                                 syntax-object-wrap
                                                 syntax-object-expression
                                                 syntax-object?
                                                 make-syntax-object
                                                 build-lexical-var
                                                 build-letrec
                                                 build-named-let
                                                 build-let
                                                 build-sequence
                                                 build-data
                                                 build-primref
                                                 build-primcall
                                                 build-lambda-case
                                                 build-case-lambda
                                                 build-simple-lambda
                                                 build-global-definition
                                                 build-global-assignment
                                                 build-global-reference
                                                 analyze-variable
                                                 build-lexical-assignment
                                                 build-lexical-reference
                                                 build-dynlet
                                                 build-conditional
                                                 build-call
                                                 build-void
                                                 maybe-name-value!
                                                 decorate-source
                                                 get-global-definition-hook
                                                 put-global-definition-hook
                                                 gensym-hook
                                                 local-eval-hook
                                                 top-level-eval-hook
                                                 fx<
                                                 fx=
                                                 fx-
                                                 fx+
                                                 set-lambda-meta!
                                                 lambda-meta
                                                 lambda?
                                                 make-dynlet
                                                 make-letrec
                                                 make-let
                                                 make-lambda-case
                                                 make-lambda
                                                 make-seq
                                                 make-primcall
                                                 make-call
                                                 make-conditional
                                                 make-toplevel-define
                                                 make-toplevel-set
                                                 make-toplevel-ref
                                                 make-module-set
                                                 make-module-ref
                                                 make-lexical-set
                                                 make-lexical-ref
                                                 make-primitive-ref
                                                 make-const
                                                 make-void)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("i470"
                                                "i468"
                                                "i466"
                                                "i464"
                                                "i462"
                                                "i460"
                                                "i458"
                                                "i456"
                                                "i454"
                                                "i452"
                                                "i450"
                                                "i448"
                                                "i446"
                                                "i444"
                                                "i442"
                                                "i440"
                                                "i438"
                                                "i436"
                                                "i434"
                                                "i432"
                                                "i430"
                                                "i428"
                                                "i426"
                                                "i424"
                                                "i422"
                                                "i420"
                                                "i418"
                                                "i416"
                                                "i414"
                                                "i412"
                                                "i410"
                                                "i408"
                                                "i406"
                                                "i404"
                                                "i402"
                                                "i401"
                                                "i399"
                                                "i396"
                                                "i395"
                                                "i394"
                                                "i392"
                                                "i391"
                                                "i389"
                                                "i387"
                                                "i385"
                                                "i383"
                                                "i381"
                                                "i379"
                                                "i377"
                                                "i375"
                                                "i372"
                                                "i370"
                                                "i369"
                                                "i367"
                                                "i365"
                                                "i363"
                                                "i361"
                                                "i360"
                                                "i359"
                                                "i358"
                                                "i356"
                                                "i355"
                                                "i352"
                                                "i350"
                                                "i348"
                                                "i346"
                                                "i344"
                                                "i342"
                                                "i340"
                                                "i339"
                                                "i338"
                                                "i336"
                                                "i334"
                                                "i333"
                                                "i330"
                                                "i329"
                                                "i327"
                                                "i325"
                                                "i323"
                                                "i321"
                                                "i319"
                                                "i317"
                                                "i315"
                                                "i313"
                                                "i311"
                                                "i308"
                                                "i306"
                                                "i304"
                                                "i302"
                                                "i300"
                                                "i298"
                                                "i296"
                                                "i294"
                                                "i292"
                                                "i290"
                                                "i288"
                                                "i286"
                                                "i284"
                                                "i282"
                                                "i280"
                                                "i278"
                                                "i276"
                                                "i274"
                                                "i272"
                                                "i270"
                                                "i268"
                                                "i266"
                                                "i264"
                                                "i262"
                                                "i261"
                                                "i258"
                                                "i256"
                                                "i255"
                                                "i254"
                                                "i253"
                                                "i252"
                                                "i250"
                                                "i248"
                                                "i246"
                                                "i243"
                                                "i241"
                                                "i239"
                                                "i237"
                                                "i235"
                                                "i233"
                                                "i231"
                                                "i229"
                                                "i227"
                                                "i225"
                                                "i223"
                                                "i221"
                                                "i219"
                                                "i217"
                                                "i215"
                                                "i213"
                                                "i211"
                                                "i209"
                                                "i207"))
                                             #(ribcage
                                               (define-structure
                                                 define-expansion-accessors
                                                 define-expansion-constructors)
                                               ((top) (top) (top))
                                               ("i45" "i44" "i43")))
                                            (hygiene guile))))
                                  #{ropt 2390}#)))
                        #{tmp 2396}#)
                      (let ((#{tmp 2405}#
                              ($sc-dispatch #{args 2388}# '((any any) . any))))
                        (if (if #{tmp 2405}#
                              (@apply
                                (lambda (#{a 2409}# #{init 2410}# #{b 2411}#)
                                  (#{id? 353}# #{a 2409}#))
                                #{tmp 2405}#)
                              #f)
                          (@apply
                            (lambda (#{a 2415}# #{init 2416}# #{b 2417}#)
                              (#{opt 2332}#
                                #{b 2417}#
                                #{req 2389}#
                                (cons (list #{a 2415}# #{init 2416}#)
                                      #{ropt 2390}#)))
                            #{tmp 2405}#)
                          (let ((#{tmp 2418}#
                                  ($sc-dispatch #{args 2388}# '(any . any))))
                            (if (if #{tmp 2418}#
                                  (@apply
                                    (lambda (#{a 2421}# #{b 2422}#)
                                      (eq? (syntax->datum #{a 2421}#) #:key))
                                    #{tmp 2418}#)
                                  #f)
                              (@apply
                                (lambda (#{a 2425}# #{b 2426}#)
                                  (#{key 2334}#
                                    #{b 2426}#
                                    #{req 2389}#
                                    (reverse #{ropt 2390}#)
                                    '()))
                                #{tmp 2418}#)
                              (let ((#{tmp 2427}#
                                      ($sc-dispatch #{args 2388}# '(any any))))
                                (if (if #{tmp 2427}#
                                      (@apply
                                        (lambda (#{a 2430}# #{b 2431}#)
                                          (eq? (syntax->datum #{a 2430}#)
                                               #:rest))
                                        #{tmp 2427}#)
                                      #f)
                                  (@apply
                                    (lambda (#{a 2434}# #{b 2435}#)
                                      (#{rest 2336}#
                                        #{b 2435}#
                                        #{req 2389}#
                                        (reverse #{ropt 2390}#)
                                        '()))
                                    #{tmp 2427}#)
                                  (let ((#{tmp 2436}# (list #{args 2388}#)))
                                    (if (if #{tmp 2436}#
                                          (@apply
                                            (lambda (#{r 2438}#)
                                              (#{id? 353}# #{r 2438}#))
                                            #{tmp 2436}#)
                                          #f)
                                      (@apply
                                        (lambda (#{r 2440}#)
                                          (#{rest 2336}#
                                            #{r 2440}#
                                            #{req 2389}#
                                            (reverse #{ropt 2390}#)
                                            '()))
                                        #{tmp 2436}#)
                                      (syntax-violation
                                        'lambda*
                                        "invalid optional argument list"
                                        #{orig-args 2327}#
                                        #{args 2388}#)))))))))))))))
          (#{key 2334}#
            (lambda (#{args 2443}#
                     #{req 2444}#
                     #{opt 2445}#
                     #{rkey 2446}#)
              (let ((#{tmp 2452}# ($sc-dispatch #{args 2443}# '())))
                (if #{tmp 2452}#
                  (@apply
                    (lambda ()
                      (#{check 2338}#
                        #{req 2444}#
                        #{opt 2445}#
                        #f
                        (cons #f (reverse #{rkey 2446}#))))
                    #{tmp 2452}#)
                  (let ((#{tmp 2453}#
                          ($sc-dispatch #{args 2443}# '(any . any))))
                    (if (if #{tmp 2453}#
                          (@apply
                            (lambda (#{a 2456}# #{b 2457}#)
                              (#{id? 353}# #{a 2456}#))
                            #{tmp 2453}#)
                          #f)
                      (@apply
                        (lambda (#{a 2460}# #{b 2461}#)
                          (let ((#{tmp 2463}#
                                  (symbol->keyword
                                    (syntax->datum #{a 2460}#))))
                            (#{key 2334}#
                              #{b 2461}#
                              #{req 2444}#
                              #{opt 2445}#
                              (cons (cons #{tmp 2463}#
                                          (cons #{a 2460}#
                                                '(#(syntax-object
                                                    #f
                                                    ((top)
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(k)
                                                       #((top))
                                                       #("i2464"))
                                                     #(ribcage
                                                       #(a b)
                                                       #((top) (top))
                                                       #("i2458" "i2459"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(args req opt rkey)
                                                       #((top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                       #("i2447"
                                                         "i2448"
                                                         "i2449"
                                                         "i2450"))
                                                     #(ribcage
                                                       (check rest key opt req)
                                                       ((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                       ("i2337"
                                                        "i2335"
                                                        "i2333"
                                                        "i2331"
                                                        "i2329"))
                                                     #(ribcage
                                                       #(orig-args)
                                                       #((top))
                                                       #("i2328"))
                                                     #(ribcage
                                                       (lambda-var-list
                                                         gen-var
                                                         strip
                                                         chi-lambda-case
                                                         lambda*-formals
                                                         chi-simple-lambda
                                                         lambda-formals
                                                         ellipsis?
                                                         chi-void
                                                         eval-local-transformer
                                                         chi-local-syntax
                                                         chi-body
                                                         chi-macro
                                                         chi-call
                                                         chi-expr
                                                         chi
                                                         syntax-type
                                                         chi-when-list
                                                         chi-install-global
                                                         chi-top-sequence
                                                         chi-sequence
                                                         source-wrap
                                                         wrap
                                                         bound-id-member?
                                                         distinct-bound-ids?
                                                         valid-bound-ids?
                                                         bound-id=?
                                                         free-id=?
                                                         id-var-name
                                                         same-marks?
                                                         join-marks
                                                         join-wraps
                                                         smart-append
                                                         make-binding-wrap
                                                         extend-ribcage!
                                                         make-empty-ribcage
                                                         new-mark
                                                         anti-mark
                                                         the-anti-mark
                                                         top-marked?
                                                         top-wrap
                                                         empty-wrap
                                                         set-ribcage-labels!
                                                         set-ribcage-marks!
                                                         set-ribcage-symnames!
                                                         ribcage-labels
                                                         ribcage-marks
                                                         ribcage-symnames
                                                         ribcage?
                                                         make-ribcage
                                                         gen-labels
                                                         gen-label
                                                         make-rename
                                                         rename-marks
                                                         rename-new
                                                         rename-old
                                                         subst-rename?
                                                         wrap-subst
                                                         wrap-marks
                                                         make-wrap
                                                         id-sym-name&marks
                                                         id-sym-name
                                                         id?
                                                         nonsymbol-id?
                                                         global-extend
                                                         lookup
                                                         macros-only-env
                                                         extend-var-env
                                                         extend-env
                                                         null-env
                                                         binding-value
                                                         binding-type
                                                         make-binding
                                                         arg-check
                                                         source-annotation
                                                         no-source
                                                         set-syntax-object-module!
                                                         set-syntax-object-wrap!
                                                         set-syntax-object-expression!
                                                         syntax-object-module
                                                         syntax-object-wrap
                                                         syntax-object-expression
                                                         syntax-object?
                                                         make-syntax-object
                                                         build-lexical-var
                                                         build-letrec
                                                         build-named-let
                                                         build-let
                                                         build-sequence
                                                         build-data
                                                         build-primref
                                                         build-primcall
                                                         build-lambda-case
                                                         build-case-lambda
                                                         build-simple-lambda
                                                         build-global-definition
                                                         build-global-assignment
                                                         build-global-reference
                                                         analyze-variable
                                                         build-lexical-assignment
                                                         build-lexical-reference
                                                         build-dynlet
                                                         build-conditional
                                                         build-call
                                                         build-void
                                                         maybe-name-value!
                                                         decorate-source
                                                         get-global-definition-hook
                                                         put-global-definition-hook
                                                         gensym-hook
                                                         local-eval-hook
                                                         top-level-eval-hook
                                                         fx<
                                                         fx=
                                                         fx-
                                                         fx+
                                                         set-lambda-meta!
                                                         lambda-meta
                                                         lambda?
                                                         make-dynlet
                                                         make-letrec
                                                         make-let
                                                         make-lambda-case
                                                         make-lambda
                                                         make-seq
                                                         make-primcall
                                                         make-call
                                                         make-conditional
                                                         make-toplevel-define
                                                         make-toplevel-set
                                                         make-toplevel-ref
                                                         make-module-set
                                                         make-module-ref
                                                         make-lexical-set
                                                         make-lexical-ref
                                                         make-primitive-ref
                                                         make-const
                                                         make-void)
                                                       ((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                       ("i470"
                                                        "i468"
                                                        "i466"
                                                        "i464"
                                                        "i462"
                                                        "i460"
                                                        "i458"
                                                        "i456"
                                                        "i454"
                                                        "i452"
                                                        "i450"
                                                        "i448"
                                                        "i446"
                                                        "i444"
                                                        "i442"
                                                        "i440"
                                                        "i438"
                                                        "i436"
                                                        "i434"
                                                        "i432"
                                                        "i430"
                                                        "i428"
                                                        "i426"
                                                        "i424"
                                                        "i422"
                                                        "i420"
                                                        "i418"
                                                        "i416"
                                                        "i414"
                                                        "i412"
                                                        "i410"
                                                        "i408"
                                                        "i406"
                                                        "i404"
                                                        "i402"
                                                        "i401"
                                                        "i399"
                                                        "i396"
                                                        "i395"
                                                        "i394"
                                                        "i392"
                                                        "i391"
                                                        "i389"
                                                        "i387"
                                                        "i385"
                                                        "i383"
                                                        "i381"
                                                        "i379"
                                                        "i377"
                                                        "i375"
                                                        "i372"
                                                        "i370"
                                                        "i369"
                                                        "i367"
                                                        "i365"
                                                        "i363"
                                                        "i361"
                                                        "i360"
                                                        "i359"
                                                        "i358"
                                                        "i356"
                                                        "i355"
                                                        "i352"
                                                        "i350"
                                                        "i348"
                                                        "i346"
                                                        "i344"
                                                        "i342"
                                                        "i340"
                                                        "i339"
                                                        "i338"
                                                        "i336"
                                                        "i334"
                                                        "i333"
                                                        "i330"
                                                        "i329"
                                                        "i327"
                                                        "i325"
                                                        "i323"
                                                        "i321"
                                                        "i319"
                                                        "i317"
                                                        "i315"
                                                        "i313"
                                                        "i311"
                                                        "i308"
                                                        "i306"
                                                        "i304"
                                                        "i302"
                                                        "i300"
                                                        "i298"
                                                        "i296"
                                                        "i294"
                                                        "i292"
                                                        "i290"
                                                        "i288"
                                                        "i286"
                                                        "i284"
                                                        "i282"
                                                        "i280"
                                                        "i278"
                                                        "i276"
                                                        "i274"
                                                        "i272"
                                                        "i270"
                                                        "i268"
                                                        "i266"
                                                        "i264"
                                                        "i262"
                                                        "i261"
                                                        "i258"
                                                        "i256"
                                                        "i255"
                                                        "i254"
                                                        "i253"
                                                        "i252"
                                                        "i250"
                                                        "i248"
                                                        "i246"
                                                        "i243"
                                                        "i241"
                                                        "i239"
                                                        "i237"
                                                        "i235"
                                                        "i233"
                                                        "i231"
                                                        "i229"
                                                        "i227"
                                                        "i225"
                                                        "i223"
                                                        "i221"
                                                        "i219"
                                                        "i217"
                                                        "i215"
                                                        "i213"
                                                        "i211"
                                                        "i209"
                                                        "i207"))
                                                     #(ribcage
                                                       (define-structure
                                                         define-expansion-accessors
                                                         define-expansion-constructors)
                                                       ((top) (top) (top))
                                                       ("i45" "i44" "i43")))
                                                    (hygiene guile)))))
                                    #{rkey 2446}#))))
                        #{tmp 2453}#)
                      (let ((#{tmp 2466}#
                              ($sc-dispatch #{args 2443}# '((any any) . any))))
                        (if (if #{tmp 2466}#
                              (@apply
                                (lambda (#{a 2470}# #{init 2471}# #{b 2472}#)
                                  (#{id? 353}# #{a 2470}#))
                                #{tmp 2466}#)
                              #f)
                          (@apply
                            (lambda (#{a 2476}# #{init 2477}# #{b 2478}#)
                              (let ((#{tmp 2480}#
                                      (symbol->keyword
                                        (syntax->datum #{a 2476}#))))
                                (#{key 2334}#
                                  #{b 2478}#
                                  #{req 2444}#
                                  #{opt 2445}#
                                  (cons (list #{tmp 2480}#
                                              #{a 2476}#
                                              #{init 2477}#)
                                        #{rkey 2446}#))))
                            #{tmp 2466}#)
                          (let ((#{tmp 2483}#
                                  ($sc-dispatch
                                    #{args 2443}#
                                    '((any any any) . any))))
                            (if (if #{tmp 2483}#
                                  (@apply
                                    (lambda (#{a 2488}#
                                             #{init 2489}#
                                             #{k 2490}#
                                             #{b 2491}#)
                                      (if (#{id? 353}# #{a 2488}#)
                                        (keyword? (syntax->datum #{k 2490}#))
                                        #f))
                                    #{tmp 2483}#)
                                  #f)
                              (@apply
                                (lambda (#{a 2498}#
                                         #{init 2499}#
                                         #{k 2500}#
                                         #{b 2501}#)
                                  (#{key 2334}#
                                    #{b 2501}#
                                    #{req 2444}#
                                    #{opt 2445}#
                                    (cons (list #{k 2500}#
                                                #{a 2498}#
                                                #{init 2499}#)
                                          #{rkey 2446}#)))
                                #{tmp 2483}#)
                              (let ((#{tmp 2502}#
                                      ($sc-dispatch #{args 2443}# '(any))))
                                (if (if #{tmp 2502}#
                                      (@apply
                                        (lambda (#{aok 2504}#)
                                          (eq? (syntax->datum #{aok 2504}#)
                                               #:allow-other-keys))
                                        #{tmp 2502}#)
                                      #f)
                                  (@apply
                                    (lambda (#{aok 2506}#)
                                      (#{check 2338}#
                                        #{req 2444}#
                                        #{opt 2445}#
                                        #f
                                        (cons #t (reverse #{rkey 2446}#))))
                                    #{tmp 2502}#)
                                  (let ((#{tmp 2507}#
                                          ($sc-dispatch
                                            #{args 2443}#
                                            '(any any any))))
                                    (if (if #{tmp 2507}#
                                          (@apply
                                            (lambda (#{aok 2511}#
                                                     #{a 2512}#
                                                     #{b 2513}#)
                                              (if (eq? (syntax->datum
                                                         #{aok 2511}#)
                                                       #:allow-other-keys)
                                                (eq? (syntax->datum #{a 2512}#)
                                                     #:rest)
                                                #f))
                                            #{tmp 2507}#)
                                          #f)
                                      (@apply
                                        (lambda (#{aok 2519}#
                                                 #{a 2520}#
                                                 #{b 2521}#)
                                          (#{rest 2336}#
                                            #{b 2521}#
                                            #{req 2444}#
                                            #{opt 2445}#
                                            (cons #t (reverse #{rkey 2446}#))))
                                        #{tmp 2507}#)
                                      (let ((#{tmp 2522}#
                                              ($sc-dispatch
                                                #{args 2443}#
                                                '(any . any))))
                                        (if (if #{tmp 2522}#
                                              (@apply
                                                (lambda (#{aok 2525}#
                                                         #{r 2526}#)
                                                  (if (eq? (syntax->datum
                                                             #{aok 2525}#)
                                                           #:allow-other-keys)
                                                    (#{id? 353}# #{r 2526}#)
                                                    #f))
                                                #{tmp 2522}#)
                                              #f)
                                          (@apply
                                            (lambda (#{aok 2531}# #{r 2532}#)
                                              (#{rest 2336}#
                                                #{r 2532}#
                                                #{req 2444}#
                                                #{opt 2445}#
                                                (cons #t
                                                      (reverse
                                                        #{rkey 2446}#))))
                                            #{tmp 2522}#)
                                          (let ((#{tmp 2533}#
                                                  ($sc-dispatch
                                                    #{args 2443}#
                                                    '(any any))))
                                            (if (if #{tmp 2533}#
                                                  (@apply
                                                    (lambda (#{a 2536}#
                                                             #{b 2537}#)
                                                      (eq? (syntax->datum
                                                             #{a 2536}#)
                                                           #:rest))
                                                    #{tmp 2533}#)
                                                  #f)
                                              (@apply
                                                (lambda (#{a 2540}# #{b 2541}#)
                                                  (#{rest 2336}#
                                                    #{b 2541}#
                                                    #{req 2444}#
                                                    #{opt 2445}#
                                                    (cons #f
                                                          (reverse
                                                            #{rkey 2446}#))))
                                                #{tmp 2533}#)
                                              (let ((#{tmp 2542}#
                                                      (list #{args 2443}#)))
                                                (if (if #{tmp 2542}#
                                                      (@apply
                                                        (lambda (#{r 2544}#)
                                                          (#{id? 353}#
                                                            #{r 2544}#))
                                                        #{tmp 2542}#)
                                                      #f)
                                                  (@apply
                                                    (lambda (#{r 2546}#)
                                                      (#{rest 2336}#
                                                        #{r 2546}#
                                                        #{req 2444}#
                                                        #{opt 2445}#
                                                        (cons #f
                                                              (reverse
                                                                #{rkey 2446}#))))
                                                    #{tmp 2542}#)
                                                  (syntax-violation
                                                    'lambda*
                                                    "invalid keyword argument list"
                                                    #{orig-args 2327}#
                                                    #{args 2443}#)))))))))))))))))))))
          (#{rest 2336}#
            (lambda (#{args 2549}#
                     #{req 2550}#
                     #{opt 2551}#
                     #{kw 2552}#)
              (let ((#{tmp 2558}# (list #{args 2549}#)))
                (if (if #{tmp 2558}#
                      (@apply
                        (lambda (#{r 2560}#) (#{id? 353}# #{r 2560}#))
                        #{tmp 2558}#)
                      #f)
                  (@apply
                    (lambda (#{r 2562}#)
                      (#{check 2338}#
                        #{req 2550}#
                        #{opt 2551}#
                        #{r 2562}#
                        #{kw 2552}#))
                    #{tmp 2558}#)
                  (syntax-violation
                    'lambda*
                    "invalid rest argument"
                    #{orig-args 2327}#
                    #{args 2549}#)))))
          (#{check 2338}#
            (lambda (#{req 2565}#
                     #{opt 2566}#
                     #{rest 2567}#
                     #{kw 2568}#)
              (if (#{distinct-bound-ids? 423}#
                    (append
                      #{req 2565}#
                      (map car #{opt 2566}#)
                      (if #{rest 2567}# (list #{rest 2567}#) '())
                      (if (pair? #{kw 2568}#)
                        (map cadr (cdr #{kw 2568}#))
                        '())))
                (values
                  #{req 2565}#
                  #{opt 2566}#
                  #{rest 2567}#
                  #{kw 2568}#)
                (syntax-violation
                  'lambda*
                  "duplicate identifier in argument list"
                  #{orig-args 2327}#)))))
         (#{req 2330}# #{orig-args 2327}# '()))))
   (#{chi-lambda-case 465}#
     (lambda (#{e 2576}#
              #{r 2577}#
              #{w 2578}#
              #{s 2579}#
              #{mod 2580}#
              #{get-formals 2581}#
              #{clauses 2582}#)
       (letrec*
         ((#{expand-opt 2593}#
            (lambda (#{req 2616}#
                     #{opt 2617}#
                     #{rest 2618}#
                     #{kw 2619}#
                     #{body 2620}#
                     #{vars 2621}#
                     #{r* 2622}#
                     #{w* 2623}#
                     #{out 2624}#
                     #{inits 2625}#)
              (if (pair? #{opt 2617}#)
                (let ((#{tmp 2638}# (car #{opt 2617}#)))
                  (let ((#{tmp 2639}#
                          ($sc-dispatch #{tmp 2638}# '(any any))))
                    (if #{tmp 2639}#
                      (@apply
                        (lambda (#{id 2642}# #{i 2643}#)
                          (let ((#{v 2646}# (#{gen-var 469}# #{id 2642}#)))
                            (let ((#{l 2648}#
                                    (#{gen-labels 373}# (list #{v 2646}#))))
                              (let ((#{r** 2650}#
                                      (#{extend-var-env 343}#
                                        #{l 2648}#
                                        (list #{v 2646}#)
                                        #{r* 2622}#)))
                                (let ((#{w** 2652}#
                                        (#{make-binding-wrap 405}#
                                          (list #{id 2642}#)
                                          #{l 2648}#
                                          #{w* 2623}#)))
                                  (#{expand-opt 2593}#
                                    #{req 2616}#
                                    (cdr #{opt 2617}#)
                                    #{rest 2618}#
                                    #{kw 2619}#
                                    #{body 2620}#
                                    (cons #{v 2646}# #{vars 2621}#)
                                    #{r** 2650}#
                                    #{w** 2652}#
                                    (cons (syntax->datum #{id 2642}#)
                                          #{out 2624}#)
                                    (cons (#{chi 441}#
                                            #{i 2643}#
                                            #{r* 2622}#
                                            #{w* 2623}#
                                            #{mod 2580}#)
                                          #{inits 2625}#)))))))
                        #{tmp 2639}#)
                      (syntax-violation
                        #f
                        "source expression failed to match any pattern"
                        #{tmp 2638}#))))
                (if #{rest 2618}#
                  (let ((#{v 2657}# (#{gen-var 469}# #{rest 2618}#)))
                    (let ((#{l 2659}#
                            (#{gen-labels 373}# (list #{v 2657}#))))
                      (let ((#{r* 2661}#
                              (#{extend-var-env 343}#
                                #{l 2659}#
                                (list #{v 2657}#)
                                #{r* 2622}#)))
                        (let ((#{w* 2663}#
                                (#{make-binding-wrap 405}#
                                  (list #{rest 2618}#)
                                  #{l 2659}#
                                  #{w* 2623}#)))
                          (#{expand-kw 2595}#
                            #{req 2616}#
                            (if (pair? #{out 2624}#)
                              (reverse #{out 2624}#)
                              #f)
                            (syntax->datum #{rest 2618}#)
                            (if (pair? #{kw 2619}#)
                              (cdr #{kw 2619}#)
                              #{kw 2619}#)
                            #{body 2620}#
                            (cons #{v 2657}# #{vars 2621}#)
                            #{r* 2661}#
                            #{w* 2663}#
                            (if (pair? #{kw 2619}#) (car #{kw 2619}#) #f)
                            '()
                            #{inits 2625}#)))))
                  (#{expand-kw 2595}#
                    #{req 2616}#
                    (if (pair? #{out 2624}#)
                      (reverse #{out 2624}#)
                      #f)
                    #f
                    (if (pair? #{kw 2619}#)
                      (cdr #{kw 2619}#)
                      #{kw 2619}#)
                    #{body 2620}#
                    #{vars 2621}#
                    #{r* 2622}#
                    #{w* 2623}#
                    (if (pair? #{kw 2619}#) (car #{kw 2619}#) #f)
                    '()
                    #{inits 2625}#)))))
          (#{expand-kw 2595}#
            (lambda (#{req 2665}#
                     #{opt 2666}#
                     #{rest 2667}#
                     #{kw 2668}#
                     #{body 2669}#
                     #{vars 2670}#
                     #{r* 2671}#
                     #{w* 2672}#
                     #{aok 2673}#
                     #{out 2674}#
                     #{inits 2675}#)
              (if (pair? #{kw 2668}#)
                (let ((#{tmp 2689}# (car #{kw 2668}#)))
                  (let ((#{tmp 2690}#
                          ($sc-dispatch #{tmp 2689}# '(any any any))))
                    (if #{tmp 2690}#
                      (@apply
                        (lambda (#{k 2694}# #{id 2695}# #{i 2696}#)
                          (let ((#{v 2699}# (#{gen-var 469}# #{id 2695}#)))
                            (let ((#{l 2701}#
                                    (#{gen-labels 373}# (list #{v 2699}#))))
                              (let ((#{r** 2703}#
                                      (#{extend-var-env 343}#
                                        #{l 2701}#
                                        (list #{v 2699}#)
                                        #{r* 2671}#)))
                                (let ((#{w** 2705}#
                                        (#{make-binding-wrap 405}#
                                          (list #{id 2695}#)
                                          #{l 2701}#
                                          #{w* 2672}#)))
                                  (#{expand-kw 2595}#
                                    #{req 2665}#
                                    #{opt 2666}#
                                    #{rest 2667}#
                                    (cdr #{kw 2668}#)
                                    #{body 2669}#
                                    (cons #{v 2699}# #{vars 2670}#)
                                    #{r** 2703}#
                                    #{w** 2705}#
                                    #{aok 2673}#
                                    (cons (list (syntax->datum #{k 2694}#)
                                                (syntax->datum #{id 2695}#)
                                                #{v 2699}#)
                                          #{out 2674}#)
                                    (cons (#{chi 441}#
                                            #{i 2696}#
                                            #{r* 2671}#
                                            #{w* 2672}#
                                            #{mod 2580}#)
                                          #{inits 2675}#)))))))
                        #{tmp 2690}#)
                      (syntax-violation
                        #f
                        "source expression failed to match any pattern"
                        #{tmp 2689}#))))
                (#{expand-body 2597}#
                  #{req 2665}#
                  #{opt 2666}#
                  #{rest 2667}#
                  (if (if #{aok 2673}#
                        #{aok 2673}#
                        (pair? #{out 2674}#))
                    (cons #{aok 2673}# (reverse #{out 2674}#))
                    #f)
                  #{body 2669}#
                  (reverse #{vars 2670}#)
                  #{r* 2671}#
                  #{w* 2672}#
                  (reverse #{inits 2675}#)
                  '()))))
          (#{expand-body 2597}#
            (lambda (#{req 2711}#
                     #{opt 2712}#
                     #{rest 2713}#
                     #{kw 2714}#
                     #{body 2715}#
                     #{vars 2716}#
                     #{r* 2717}#
                     #{w* 2718}#
                     #{inits 2719}#
                     #{meta 2720}#)
              (let ((#{tmp 2732}#
                      ($sc-dispatch
                        #{body 2715}#
                        '(any any . each-any))))
                (if (if #{tmp 2732}#
                      (@apply
                        (lambda (#{docstring 2736}# #{e1 2737}# #{e2 2738}#)
                          (string? (syntax->datum #{docstring 2736}#)))
                        #{tmp 2732}#)
                      #f)
                  (@apply
                    (lambda (#{docstring 2742}# #{e1 2743}# #{e2 2744}#)
                      (#{expand-body 2597}#
                        #{req 2711}#
                        #{opt 2712}#
                        #{rest 2713}#
                        #{kw 2714}#
                        (cons #{e1 2743}# #{e2 2744}#)
                        #{vars 2716}#
                        #{r* 2717}#
                        #{w* 2718}#
                        #{inits 2719}#
                        (append
                          #{meta 2720}#
                          (list (cons 'documentation
                                      (syntax->datum #{docstring 2742}#))))))
                    #{tmp 2732}#)
                  (let ((#{tmp 2747}#
                          ($sc-dispatch
                            #{body 2715}#
                            '(#(vector #(each (any . any))) any . each-any))))
                    (if #{tmp 2747}#
                      (@apply
                        (lambda (#{k 2752}# #{v 2753}# #{e1 2754}# #{e2 2755}#)
                          (#{expand-body 2597}#
                            #{req 2711}#
                            #{opt 2712}#
                            #{rest 2713}#
                            #{kw 2714}#
                            (cons #{e1 2754}# #{e2 2755}#)
                            #{vars 2716}#
                            #{r* 2717}#
                            #{w* 2718}#
                            #{inits 2719}#
                            (append
                              #{meta 2720}#
                              (syntax->datum
                                (map cons #{k 2752}# #{v 2753}#)))))
                        #{tmp 2747}#)
                      (let ((#{tmp 2759}#
                              ($sc-dispatch #{body 2715}# '(any . each-any))))
                        (if #{tmp 2759}#
                          (@apply
                            (lambda (#{e1 2762}# #{e2 2763}#)
                              (values
                                #{meta 2720}#
                                #{req 2711}#
                                #{opt 2712}#
                                #{rest 2713}#
                                #{kw 2714}#
                                #{inits 2719}#
                                #{vars 2716}#
                                (#{chi-body 449}#
                                  (cons #{e1 2762}# #{e2 2763}#)
                                  (#{source-wrap 429}#
                                    #{e 2576}#
                                    #{w 2578}#
                                    #{s 2579}#
                                    #{mod 2580}#)
                                  #{r* 2717}#
                                  #{w* 2718}#
                                  #{mod 2580}#)))
                            #{tmp 2759}#)
                          (syntax-violation
                            #f
                            "source expression failed to match any pattern"
                            #{body 2715}#))))))))))
         (let ((#{tmp 2766}#
                 ($sc-dispatch #{clauses 2582}# '())))
           (if #{tmp 2766}#
             (@apply (lambda () (values '() #f)) #{tmp 2766}#)
             (let ((#{tmp 2767}#
                     ($sc-dispatch
                       #{clauses 2582}#
                       '((any any . each-any)
                         .
                         #(each (any any . each-any))))))
               (if #{tmp 2767}#
                 (@apply
                   (lambda (#{args 2774}#
                            #{e1 2775}#
                            #{e2 2776}#
                            #{args* 2777}#
                            #{e1* 2778}#
                            #{e2* 2779}#)
                     (call-with-values
                       (lambda () (#{get-formals 2581}# #{args 2774}#))
                       (lambda (#{req 2780}#
                                #{opt 2781}#
                                #{rest 2782}#
                                #{kw 2783}#)
                         (call-with-values
                           (lambda ()
                             (let ((#{body 5051}#
                                     (cons #{e1 2775}# #{e2 2776}#)))
                               (let ((#{vars 5052}#
                                       (map #{gen-var 469}# #{req 2780}#))
                                     (#{labels 5053}#
                                       (#{gen-labels 373}# #{req 2780}#)))
                                 (let ((#{r* 5054}#
                                         (#{extend-var-env 343}#
                                           #{labels 5053}#
                                           #{vars 5052}#
                                           #{r 2577}#))
                                       (#{w* 5055}#
                                         (#{make-binding-wrap 405}#
                                           #{req 2780}#
                                           #{labels 5053}#
                                           #{w 2578}#)))
                                   (#{expand-opt 2593}#
                                     (map syntax->datum #{req 2780}#)
                                     #{opt 2781}#
                                     #{rest 2782}#
                                     #{kw 2783}#
                                     #{body 5051}#
                                     (reverse #{vars 5052}#)
                                     #{r* 5054}#
                                     #{w* 5055}#
                                     '()
                                     '())))))
                           (lambda (#{meta 2789}#
                                    #{req 2790}#
                                    #{opt 2791}#
                                    #{rest 2792}#
                                    #{kw 2793}#
                                    #{inits 2794}#
                                    #{vars 2795}#
                                    #{body 2796}#)
                             (call-with-values
                               (lambda ()
                                 (#{chi-lambda-case 465}#
                                   #{e 2576}#
                                   #{r 2577}#
                                   #{w 2578}#
                                   #{s 2579}#
                                   #{mod 2580}#
                                   #{get-formals 2581}#
                                   (map (lambda (#{tmp 2807}#
                                                 #{tmp 2806}#
                                                 #{tmp 2805}#)
                                          (cons #{tmp 2805}#
                                                (cons #{tmp 2806}#
                                                      #{tmp 2807}#)))
                                        #{e2* 2779}#
                                        #{e1* 2778}#
                                        #{args* 2777}#)))
                               (lambda (#{meta* 2809}# #{else* 2810}#)
                                 (values
                                   (append #{meta 2789}# #{meta* 2809}#)
                                   (#{build-lambda-case 295}#
                                     #{s 2579}#
                                     #{req 2790}#
                                     #{opt 2791}#
                                     #{rest 2792}#
                                     #{kw 2793}#
                                     #{inits 2794}#
                                     #{vars 2795}#
                                     #{body 2796}#
                                     #{else* 2810}#)))))))))
                   #{tmp 2767}#)
                 (syntax-violation
                   #f
                   "source expression failed to match any pattern"
                   #{clauses 2582}#))))))))
   (#{strip 467}#
     (lambda (#{x 2813}# #{w 2814}#)
       (if (memq 'top (car #{w 2814}#))
         #{x 2813}#
         (letrec*
           ((#{f 2821}#
              (lambda (#{x 2822}#)
                (if (#{syntax-object? 316}# #{x 2822}#)
                  (#{strip 467}#
                    (#{syntax-object-expression 318}# #{x 2822}#)
                    (#{syntax-object-wrap 320}# #{x 2822}#))
                  (if (pair? #{x 2822}#)
                    (let ((#{a 2829}# (#{f 2821}# (car #{x 2822}#)))
                          (#{d 2830}# (#{f 2821}# (cdr #{x 2822}#))))
                      (if (if (eq? #{a 2829}# (car #{x 2822}#))
                            (eq? #{d 2830}# (cdr #{x 2822}#))
                            #f)
                        #{x 2822}#
                        (cons #{a 2829}# #{d 2830}#)))
                    (if (vector? #{x 2822}#)
                      (let ((#{old 2836}# (vector->list #{x 2822}#)))
                        (let ((#{new 2838}# (map #{f 2821}# #{old 2836}#)))
                          (letrec*
                            ((#{lp 2842}#
                               (lambda (#{l1 2843}# #{l2 2844}#)
                                 (if (null? #{l1 2843}#)
                                   #{x 2822}#
                                   (if (eq? (car #{l1 2843}#)
                                            (car #{l2 2844}#))
                                     (#{lp 2842}#
                                       (cdr #{l1 2843}#)
                                       (cdr #{l2 2844}#))
                                     (list->vector #{new 2838}#))))))
                            (#{lp 2842}# #{old 2836}# #{new 2838}#))))
                      #{x 2822}#))))))
           (#{f 2821}# #{x 2813}#)))))
   (#{gen-var 469}#
     (lambda (#{id 2846}#)
       (let ((#{id 2849}#
               (if (#{syntax-object? 316}# #{id 2846}#)
                 (#{syntax-object-expression 318}# #{id 2846}#)
                 #{id 2846}#)))
         (gensym
           (string-append (symbol->string #{id 2849}#) " ")))))
   (#{lambda-var-list 471}#
     (lambda (#{vars 2851}#)
       (letrec*
         ((#{lvl 2857}#
            (lambda (#{vars 2858}# #{ls 2859}# #{w 2860}#)
              (if (pair? #{vars 2858}#)
                (#{lvl 2857}#
                  (cdr #{vars 2858}#)
                  (cons (#{wrap 427}# (car #{vars 2858}#) #{w 2860}# #f)
                        #{ls 2859}#)
                  #{w 2860}#)
                (if (#{id? 353}# #{vars 2858}#)
                  (cons (#{wrap 427}# #{vars 2858}# #{w 2860}# #f)
                        #{ls 2859}#)
                  (if (null? #{vars 2858}#)
                    #{ls 2859}#
                    (if (#{syntax-object? 316}# #{vars 2858}#)
                      (#{lvl 2857}#
                        (#{syntax-object-expression 318}# #{vars 2858}#)
                        #{ls 2859}#
                        (#{join-wraps 409}#
                          #{w 2860}#
                          (#{syntax-object-wrap 320}# #{vars 2858}#)))
                      (cons #{vars 2858}# #{ls 2859}#))))))))
         (#{lvl 2857}# #{vars 2851}# '() '(()))))))
  (begin
    (lambda (#{src 789}# #{name 790}#)
      (make-struct/no-tail
        (vector-ref %expanded-vtables 2)
        #{src 789}#
        #{name 790}#))
    (module-define!
      (current-module)
      'letrec-syntax
      (make-syntax-transformer
        'letrec-syntax
        'local-syntax
        #t))
    (module-define!
      (current-module)
      'let-syntax
      (make-syntax-transformer
        'let-syntax
        'local-syntax
        #f))
    (#{global-extend 349}#
      'core
      'fluid-let-syntax
      (lambda (#{e 2871}#
               #{r 2872}#
               #{w 2873}#
               #{s 2874}#
               #{mod 2875}#)
        (let ((#{tmp 2882}#
                ($sc-dispatch
                  #{e 2871}#
                  '(_ #(each (any any)) any . each-any))))
          (if (if #{tmp 2882}#
                (@apply
                  (lambda (#{var 2887}#
                           #{val 2888}#
                           #{e1 2889}#
                           #{e2 2890}#)
                    (#{valid-bound-ids? 421}# #{var 2887}#))
                  #{tmp 2882}#)
                #f)
            (@apply
              (lambda (#{var 2896}#
                       #{val 2897}#
                       #{e1 2898}#
                       #{e2 2899}#)
                (let ((#{names 2901}#
                        (map (lambda (#{x 2902}#)
                               (#{id-var-name 415}# #{x 2902}# #{w 2873}#))
                             #{var 2896}#)))
                  (begin
                    (for-each
                      (lambda (#{id 2905}# #{n 2906}#)
                        (let ((#{atom-key 2911}#
                                (car (let ((#{t 5313}#
                                             (assq #{n 2906}# #{r 2872}#)))
                                       (if #{t 5313}#
                                         (cdr #{t 5313}#)
                                         (if (symbol? #{n 2906}#)
                                           (let ((#{t 5314}#
                                                   (#{get-global-definition-hook 265}#
                                                     #{n 2906}#
                                                     #{mod 2875}#)))
                                             (if #{t 5314}#
                                               #{t 5314}#
                                               '(global)))
                                           '(displaced-lexical)))))))
                          (if (memv #{atom-key 2911}# '(displaced-lexical))
                            (syntax-violation
                              'fluid-let-syntax
                              "identifier out of context"
                              #{e 2871}#
                              (let ((#{x 5324}#
                                      (begin
                                        (if (if (pair? #{id 2905}#)
                                              #{s 2874}#
                                              #f)
                                          (set-source-properties!
                                            #{id 2905}#
                                            #{s 2874}#))
                                        #{id 2905}#)))
                                (if (if (null? (car #{w 2873}#))
                                      (null? (cdr #{w 2873}#))
                                      #f)
                                  #{x 5324}#
                                  (if (if (vector? #{x 5324}#)
                                        (if (= (vector-length #{x 5324}#) 4)
                                          (eq? (vector-ref #{x 5324}# 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (let ((#{expression 5336}#
                                            (vector-ref #{x 5324}# 1))
                                          (#{wrap 5337}#
                                            (let ((#{w2 5345}#
                                                    (vector-ref #{x 5324}# 2)))
                                              (let ((#{m1 5346}#
                                                      (car #{w 2873}#))
                                                    (#{s1 5347}#
                                                      (cdr #{w 2873}#)))
                                                (if (null? #{m1 5346}#)
                                                  (if (null? #{s1 5347}#)
                                                    #{w2 5345}#
                                                    (cons (car #{w2 5345}#)
                                                          (let ((#{m2 5354}#
                                                                  (cdr #{w2 5345}#)))
                                                            (if (null? #{m2 5354}#)
                                                              #{s1 5347}#
                                                              (append
                                                                #{s1 5347}#
                                                                #{m2 5354}#)))))
                                                  (cons (let ((#{m2 5358}#
                                                                (car #{w2 5345}#)))
                                                          (if (null? #{m2 5358}#)
                                                            #{m1 5346}#
                                                            (append
                                                              #{m1 5346}#
                                                              #{m2 5358}#)))
                                                        (let ((#{m2 5362}#
                                                                (cdr #{w2 5345}#)))
                                                          (if (null? #{m2 5362}#)
                                                            #{s1 5347}#
                                                            (append
                                                              #{s1 5347}#
                                                              #{m2 5362}#))))))))
                                          (#{module 5338}#
                                            (vector-ref #{x 5324}# 3)))
                                      (vector
                                        'syntax-object
                                        #{expression 5336}#
                                        #{wrap 5337}#
                                        #{module 5338}#))
                                    (if (null? #{x 5324}#)
                                      #{x 5324}#
                                      (vector
                                        'syntax-object
                                        #{x 5324}#
                                        #{w 2873}#
                                        #{mod 2875}#)))))))))
                      #{var 2896}#
                      #{names 2901}#)
                    (#{chi-body 449}#
                      (cons #{e1 2898}# #{e2 2899}#)
                      (let ((#{x 5380}#
                              (begin
                                (if (if (pair? #{e 2871}#) #{s 2874}# #f)
                                  (set-source-properties!
                                    #{e 2871}#
                                    #{s 2874}#))
                                #{e 2871}#)))
                        (if (if (null? (car #{w 2873}#))
                              (null? (cdr #{w 2873}#))
                              #f)
                          #{x 5380}#
                          (if (if (vector? #{x 5380}#)
                                (if (= (vector-length #{x 5380}#) 4)
                                  (eq? (vector-ref #{x 5380}# 0)
                                       'syntax-object)
                                  #f)
                                #f)
                            (let ((#{expression 5392}#
                                    (vector-ref #{x 5380}# 1))
                                  (#{wrap 5393}#
                                    (let ((#{w2 5401}#
                                            (vector-ref #{x 5380}# 2)))
                                      (let ((#{m1 5402}# (car #{w 2873}#))
                                            (#{s1 5403}# (cdr #{w 2873}#)))
                                        (if (null? #{m1 5402}#)
                                          (if (null? #{s1 5403}#)
                                            #{w2 5401}#
                                            (cons (car #{w2 5401}#)
                                                  (let ((#{m2 5410}#
                                                          (cdr #{w2 5401}#)))
                                                    (if (null? #{m2 5410}#)
                                                      #{s1 5403}#
                                                      (append
                                                        #{s1 5403}#
                                                        #{m2 5410}#)))))
                                          (cons (let ((#{m2 5414}#
                                                        (car #{w2 5401}#)))
                                                  (if (null? #{m2 5414}#)
                                                    #{m1 5402}#
                                                    (append
                                                      #{m1 5402}#
                                                      #{m2 5414}#)))
                                                (let ((#{m2 5418}#
                                                        (cdr #{w2 5401}#)))
                                                  (if (null? #{m2 5418}#)
                                                    #{s1 5403}#
                                                    (append
                                                      #{s1 5403}#
                                                      #{m2 5418}#))))))))
                                  (#{module 5394}# (vector-ref #{x 5380}# 3)))
                              (vector
                                'syntax-object
                                #{expression 5392}#
                                #{wrap 5393}#
                                #{module 5394}#))
                            (if (null? #{x 5380}#)
                              #{x 5380}#
                              (vector
                                'syntax-object
                                #{x 5380}#
                                #{w 2873}#
                                #{mod 2875}#)))))
                      (#{extend-env 341}#
                        #{names 2901}#
                        (let ((#{trans-r 2917}#
                                (#{macros-only-env 345}# #{r 2872}#)))
                          (map (lambda (#{x 2918}#)
                                 (cons 'macro
                                       (#{eval-local-transformer 453}#
                                         (#{chi 441}#
                                           #{x 2918}#
                                           #{trans-r 2917}#
                                           #{w 2873}#
                                           #{mod 2875}#)
                                         #{mod 2875}#)))
                               #{val 2897}#))
                        #{r 2872}#)
                      #{w 2873}#
                      #{mod 2875}#))))
              #{tmp 2882}#)
            (syntax-violation
              'fluid-let-syntax
              "bad syntax"
              (let ((#{x 5641}#
                      (begin
                        (if (if (pair? #{e 2871}#) #{s 2874}# #f)
                          (set-source-properties! #{e 2871}# #{s 2874}#))
                        #{e 2871}#)))
                (if (if (null? (car #{w 2873}#))
                      (null? (cdr #{w 2873}#))
                      #f)
                  #{x 5641}#
                  (if (if (vector? #{x 5641}#)
                        (if (= (vector-length #{x 5641}#) 4)
                          (eq? (vector-ref #{x 5641}# 0) 'syntax-object)
                          #f)
                        #f)
                    (let ((#{expression 5653}# (vector-ref #{x 5641}# 1))
                          (#{wrap 5654}#
                            (let ((#{w2 5662}# (vector-ref #{x 5641}# 2)))
                              (let ((#{m1 5663}# (car #{w 2873}#))
                                    (#{s1 5664}# (cdr #{w 2873}#)))
                                (if (null? #{m1 5663}#)
                                  (if (null? #{s1 5664}#)
                                    #{w2 5662}#
                                    (cons (car #{w2 5662}#)
                                          (let ((#{m2 5671}#
                                                  (cdr #{w2 5662}#)))
                                            (if (null? #{m2 5671}#)
                                              #{s1 5664}#
                                              (append
                                                #{s1 5664}#
                                                #{m2 5671}#)))))
                                  (cons (let ((#{m2 5675}# (car #{w2 5662}#)))
                                          (if (null? #{m2 5675}#)
                                            #{m1 5663}#
                                            (append #{m1 5663}# #{m2 5675}#)))
                                        (let ((#{m2 5679}# (cdr #{w2 5662}#)))
                                          (if (null? #{m2 5679}#)
                                            #{s1 5664}#
                                            (append
                                              #{s1 5664}#
                                              #{m2 5679}#))))))))
                          (#{module 5655}# (vector-ref #{x 5641}# 3)))
                      (vector
                        'syntax-object
                        #{expression 5653}#
                        #{wrap 5654}#
                        #{module 5655}#))
                    (if (null? #{x 5641}#)
                      #{x 5641}#
                      (vector
                        'syntax-object
                        #{x 5641}#
                        #{w 2873}#
                        #{mod 2875}#))))))))))
    (module-define!
      (current-module)
      'quote
      (make-syntax-transformer
        'quote
        'core
        (lambda (#{e 2924}#
                 #{r 2925}#
                 #{w 2926}#
                 #{s 2927}#
                 #{mod 2928}#)
          (let ((#{tmp 2935}# ($sc-dispatch #{e 2924}# '(_ any))))
            (if #{tmp 2935}#
              (@apply
                (lambda (#{e 2937}#)
                  (let ((#{exp 5696}#
                          (#{strip 467}# #{e 2937}# #{w 2926}#)))
                    (make-struct/no-tail
                      (vector-ref %expanded-vtables 1)
                      #{s 2927}#
                      #{exp 5696}#)))
                #{tmp 2935}#)
              (syntax-violation
                'quote
                "bad syntax"
                (let ((#{x 5710}#
                        (begin
                          (if (if (pair? #{e 2924}#) #{s 2927}# #f)
                            (set-source-properties! #{e 2924}# #{s 2927}#))
                          #{e 2924}#)))
                  (if (if (null? (car #{w 2926}#))
                        (null? (cdr #{w 2926}#))
                        #f)
                    #{x 5710}#
                    (if (if (vector? #{x 5710}#)
                          (if (= (vector-length #{x 5710}#) 4)
                            (eq? (vector-ref #{x 5710}# 0) 'syntax-object)
                            #f)
                          #f)
                      (let ((#{expression 5722}# (vector-ref #{x 5710}# 1))
                            (#{wrap 5723}#
                              (let ((#{w2 5731}# (vector-ref #{x 5710}# 2)))
                                (let ((#{m1 5732}# (car #{w 2926}#))
                                      (#{s1 5733}# (cdr #{w 2926}#)))
                                  (if (null? #{m1 5732}#)
                                    (if (null? #{s1 5733}#)
                                      #{w2 5731}#
                                      (cons (car #{w2 5731}#)
                                            (let ((#{m2 5740}#
                                                    (cdr #{w2 5731}#)))
                                              (if (null? #{m2 5740}#)
                                                #{s1 5733}#
                                                (append
                                                  #{s1 5733}#
                                                  #{m2 5740}#)))))
                                    (cons (let ((#{m2 5744}#
                                                  (car #{w2 5731}#)))
                                            (if (null? #{m2 5744}#)
                                              #{m1 5732}#
                                              (append
                                                #{m1 5732}#
                                                #{m2 5744}#)))
                                          (let ((#{m2 5748}#
                                                  (cdr #{w2 5731}#)))
                                            (if (null? #{m2 5748}#)
                                              #{s1 5733}#
                                              (append
                                                #{s1 5733}#
                                                #{m2 5748}#))))))))
                            (#{module 5724}# (vector-ref #{x 5710}# 3)))
                        (vector
                          'syntax-object
                          #{expression 5722}#
                          #{wrap 5723}#
                          #{module 5724}#))
                      (if (null? #{x 5710}#)
                        #{x 5710}#
                        (vector
                          'syntax-object
                          #{x 5710}#
                          #{w 2926}#
                          #{mod 2928}#)))))))))))
    (#{global-extend 349}#
      'core
      'syntax
      (letrec*
        ((#{gen-syntax 2941}#
           (lambda (#{src 2956}#
                    #{e 2957}#
                    #{r 2958}#
                    #{maps 2959}#
                    #{ellipsis? 2960}#
                    #{mod 2961}#)
             (if (if (symbol? #{e 2957}#)
                   #t
                   (if (if (vector? #{e 2957}#)
                         (if (= (vector-length #{e 2957}#) 4)
                           (eq? (vector-ref #{e 2957}# 0) 'syntax-object)
                           #f)
                         #f)
                     (symbol? (vector-ref #{e 2957}# 1))
                     #f))
               (let ((#{label 2969}#
                       (#{id-var-name 415}# #{e 2957}# '(()))))
                 (let ((#{b 2972}#
                         (let ((#{t 5811}# (assq #{label 2969}# #{r 2958}#)))
                           (if #{t 5811}#
                             (cdr #{t 5811}#)
                             (if (symbol? #{label 2969}#)
                               (let ((#{t 5812}#
                                       (#{get-global-definition-hook 265}#
                                         #{label 2969}#
                                         #{mod 2961}#)))
                                 (if #{t 5812}# #{t 5812}# '(global)))
                               '(displaced-lexical))))))
                   (if (eq? (car #{b 2972}#) 'syntax)
                     (call-with-values
                       (lambda ()
                         (let ((#{var.lev 2975}# (cdr #{b 2972}#)))
                           (#{gen-ref 2943}#
                             #{src 2956}#
                             (car #{var.lev 2975}#)
                             (cdr #{var.lev 2975}#)
                             #{maps 2959}#)))
                       (lambda (#{var 2977}# #{maps 2978}#)
                         (values (list 'ref #{var 2977}#) #{maps 2978}#)))
                     (if (#{ellipsis? 2960}# #{e 2957}#)
                       (syntax-violation
                         'syntax
                         "misplaced ellipsis"
                         #{src 2956}#)
                       (values (list 'quote #{e 2957}#) #{maps 2959}#)))))
               (let ((#{tmp 2984}#
                       ($sc-dispatch #{e 2957}# '(any any))))
                 (if (if #{tmp 2984}#
                       (@apply
                         (lambda (#{dots 2987}# #{e 2988}#)
                           (#{ellipsis? 2960}# #{dots 2987}#))
                         #{tmp 2984}#)
                       #f)
                   (@apply
                     (lambda (#{dots 2991}# #{e 2992}#)
                       (#{gen-syntax 2941}#
                         #{src 2956}#
                         #{e 2992}#
                         #{r 2958}#
                         #{maps 2959}#
                         (lambda (#{x 2993}#) #f)
                         #{mod 2961}#))
                     #{tmp 2984}#)
                   (let ((#{tmp 2995}#
                           ($sc-dispatch #{e 2957}# '(any any . any))))
                     (if (if #{tmp 2995}#
                           (@apply
                             (lambda (#{x 2999}# #{dots 3000}# #{y 3001}#)
                               (#{ellipsis? 2960}# #{dots 3000}#))
                             #{tmp 2995}#)
                           #f)
                       (@apply
                         (lambda (#{x 3005}# #{dots 3006}# #{y 3007}#)
                           (letrec*
                             ((#{f 3011}#
                                (lambda (#{y 3012}# #{k 3013}#)
                                  (let ((#{tmp 3021}#
                                          ($sc-dispatch
                                            #{y 3012}#
                                            '(any . any))))
                                    (if (if #{tmp 3021}#
                                          (@apply
                                            (lambda (#{dots 3024}# #{y 3025}#)
                                              (#{ellipsis? 2960}#
                                                #{dots 3024}#))
                                            #{tmp 3021}#)
                                          #f)
                                      (@apply
                                        (lambda (#{dots 3028}# #{y 3029}#)
                                          (#{f 3011}#
                                            #{y 3029}#
                                            (lambda (#{maps 3030}#)
                                              (call-with-values
                                                (lambda ()
                                                  (#{k 3013}#
                                                    (cons '() #{maps 3030}#)))
                                                (lambda (#{x 3032}#
                                                         #{maps 3033}#)
                                                  (if (null? (car #{maps 3033}#))
                                                    (syntax-violation
                                                      'syntax
                                                      "extra ellipsis"
                                                      #{src 2956}#)
                                                    (values
                                                      (#{gen-mappend 2945}#
                                                        #{x 3032}#
                                                        (car #{maps 3033}#))
                                                      (cdr #{maps 3033}#))))))))
                                        #{tmp 3021}#)
                                      (call-with-values
                                        (lambda ()
                                          (#{gen-syntax 2941}#
                                            #{src 2956}#
                                            #{y 3012}#
                                            #{r 2958}#
                                            #{maps 2959}#
                                            #{ellipsis? 2960}#
                                            #{mod 2961}#))
                                        (lambda (#{y 3038}# #{maps 3039}#)
                                          (call-with-values
                                            (lambda ()
                                              (#{k 3013}# #{maps 3039}#))
                                            (lambda (#{x 3042}# #{maps 3043}#)
                                              (values
                                                (#{gen-append 2951}#
                                                  #{x 3042}#
                                                  #{y 3038}#)
                                                #{maps 3043}#))))))))))
                             (#{f 3011}#
                               #{y 3007}#
                               (lambda (#{maps 3014}#)
                                 (call-with-values
                                   (lambda ()
                                     (#{gen-syntax 2941}#
                                       #{src 2956}#
                                       #{x 3005}#
                                       #{r 2958}#
                                       (cons '() #{maps 3014}#)
                                       #{ellipsis? 2960}#
                                       #{mod 2961}#))
                                   (lambda (#{x 3016}# #{maps 3017}#)
                                     (if (null? (car #{maps 3017}#))
                                       (syntax-violation
                                         'syntax
                                         "extra ellipsis"
                                         #{src 2956}#)
                                       (values
                                         (#{gen-map 2947}#
                                           #{x 3016}#
                                           (car #{maps 3017}#))
                                         (cdr #{maps 3017}#)))))))))
                         #{tmp 2995}#)
                       (let ((#{tmp 3046}#
                               ($sc-dispatch #{e 2957}# '(any . any))))
                         (if #{tmp 3046}#
                           (@apply
                             (lambda (#{x 3049}# #{y 3050}#)
                               (call-with-values
                                 (lambda ()
                                   (#{gen-syntax 2941}#
                                     #{src 2956}#
                                     #{x 3049}#
                                     #{r 2958}#
                                     #{maps 2959}#
                                     #{ellipsis? 2960}#
                                     #{mod 2961}#))
                                 (lambda (#{x 3051}# #{maps 3052}#)
                                   (call-with-values
                                     (lambda ()
                                       (#{gen-syntax 2941}#
                                         #{src 2956}#
                                         #{y 3050}#
                                         #{r 2958}#
                                         #{maps 3052}#
                                         #{ellipsis? 2960}#
                                         #{mod 2961}#))
                                     (lambda (#{y 3055}# #{maps 3056}#)
                                       (values
                                         (#{gen-cons 2949}#
                                           #{x 3051}#
                                           #{y 3055}#)
                                         #{maps 3056}#))))))
                             #{tmp 3046}#)
                           (let ((#{tmp 3059}#
                                   ($sc-dispatch
                                     #{e 2957}#
                                     '#(vector (any . each-any)))))
                             (if #{tmp 3059}#
                               (@apply
                                 (lambda (#{e1 3062}# #{e2 3063}#)
                                   (call-with-values
                                     (lambda ()
                                       (#{gen-syntax 2941}#
                                         #{src 2956}#
                                         (cons #{e1 3062}# #{e2 3063}#)
                                         #{r 2958}#
                                         #{maps 2959}#
                                         #{ellipsis? 2960}#
                                         #{mod 2961}#))
                                     (lambda (#{e 3065}# #{maps 3066}#)
                                       (values
                                         (#{gen-vector 2953}# #{e 3065}#)
                                         #{maps 3066}#))))
                                 #{tmp 3059}#)
                               (values
                                 (list 'quote #{e 2957}#)
                                 #{maps 2959}#))))))))))))
         (#{gen-ref 2943}#
           (lambda (#{src 3072}#
                    #{var 3073}#
                    #{level 3074}#
                    #{maps 3075}#)
             (if (= #{level 3074}# 0)
               (values #{var 3073}# #{maps 3075}#)
               (if (null? #{maps 3075}#)
                 (syntax-violation
                   'syntax
                   "missing ellipsis"
                   #{src 3072}#)
                 (call-with-values
                   (lambda ()
                     (#{gen-ref 2943}#
                       #{src 3072}#
                       #{var 3073}#
                       (#{1-}# #{level 3074}#)
                       (cdr #{maps 3075}#)))
                   (lambda (#{outer-var 3082}# #{outer-maps 3083}#)
                     (let ((#{b 3087}#
                             (assq #{outer-var 3082}# (car #{maps 3075}#))))
                       (if #{b 3087}#
                         (values (cdr #{b 3087}#) #{maps 3075}#)
                         (let ((#{inner-var 3089}#
                                 (gensym
                                   (string-append (symbol->string 'tmp) " "))))
                           (values
                             #{inner-var 3089}#
                             (cons (cons (cons #{outer-var 3082}#
                                               #{inner-var 3089}#)
                                         (car #{maps 3075}#))
                                   #{outer-maps 3083}#)))))))))))
         (#{gen-mappend 2945}#
           (lambda (#{e 3090}# #{map-env 3091}#)
             (list 'apply
                   '(primitive append)
                   (#{gen-map 2947}# #{e 3090}# #{map-env 3091}#))))
         (#{gen-map 2947}#
           (lambda (#{e 3095}# #{map-env 3096}#)
             (let ((#{formals 3101}# (map cdr #{map-env 3096}#))
                   (#{actuals 3102}#
                     (map (lambda (#{x 3103}#)
                            (list 'ref (car #{x 3103}#)))
                          #{map-env 3096}#)))
               (if (eq? (car #{e 3095}#) 'ref)
                 (car #{actuals 3102}#)
                 (if (and-map
                       (lambda (#{x 3110}#)
                         (if (eq? (car #{x 3110}#) 'ref)
                           (memq (car (cdr #{x 3110}#)) #{formals 3101}#)
                           #f))
                       (cdr #{e 3095}#))
                   (cons 'map
                         (cons (list 'primitive (car #{e 3095}#))
                               (map (let ((#{r 3116}#
                                            (map cons
                                                 #{formals 3101}#
                                                 #{actuals 3102}#)))
                                      (lambda (#{x 3117}#)
                                        (cdr (assq (car (cdr #{x 3117}#))
                                                   #{r 3116}#))))
                                    (cdr #{e 3095}#))))
                   (cons 'map
                         (cons (list 'lambda #{formals 3101}# #{e 3095}#)
                               #{actuals 3102}#)))))))
         (#{gen-cons 2949}#
           (lambda (#{x 3121}# #{y 3122}#)
             (let ((#{atom-key 3127}# (car #{y 3122}#)))
               (if (memv #{atom-key 3127}# '(quote))
                 (if (eq? (car #{x 3121}#) 'quote)
                   (list 'quote
                         (cons (car (cdr #{x 3121}#))
                               (car (cdr #{y 3122}#))))
                   (if (eq? (car (cdr #{y 3122}#)) '())
                     (list 'list #{x 3121}#)
                     (list 'cons #{x 3121}# #{y 3122}#)))
                 (if (memv #{atom-key 3127}# '(list))
                   (cons 'list (cons #{x 3121}# (cdr #{y 3122}#)))
                   (list 'cons #{x 3121}# #{y 3122}#))))))
         (#{gen-append 2951}#
           (lambda (#{x 3136}# #{y 3137}#)
             (if (equal? #{y 3137}# ''())
               #{x 3136}#
               (list 'append #{x 3136}# #{y 3137}#))))
         (#{gen-vector 2953}#
           (lambda (#{x 3141}#)
             (if (eq? (car #{x 3141}#) 'list)
               (cons 'vector (cdr #{x 3141}#))
               (if (eq? (car #{x 3141}#) 'quote)
                 (list 'quote
                       (list->vector (car (cdr #{x 3141}#))))
                 (list 'list->vector #{x 3141}#)))))
         (#{regen 2955}#
           (lambda (#{x 3151}#)
             (let ((#{atom-key 3155}# (car #{x 3151}#)))
               (if (memv #{atom-key 3155}# '(ref))
                 (let ((#{name 5827}# (car (cdr #{x 3151}#)))
                       (#{var 5828}# (car (cdr #{x 3151}#))))
                   (make-struct/no-tail
                     (vector-ref %expanded-vtables 3)
                     #f
                     #{name 5827}#
                     #{var 5828}#))
                 (if (memv #{atom-key 3155}# '(primitive))
                   (let ((#{name 5836}# (car (cdr #{x 3151}#))))
                     (make-struct/no-tail
                       (vector-ref %expanded-vtables 2)
                       #f
                       #{name 5836}#))
                   (if (memv #{atom-key 3155}# '(quote))
                     (let ((#{exp 5844}# (car (cdr #{x 3151}#))))
                       (make-struct/no-tail
                         (vector-ref %expanded-vtables 1)
                         #f
                         #{exp 5844}#))
                     (if (memv #{atom-key 3155}# '(lambda))
                       (if (list? (car (cdr #{x 3151}#)))
                         (let ((#{req 5852}# (car (cdr #{x 3151}#)))
                               (#{vars 5854}# (car (cdr #{x 3151}#)))
                               (#{exp 5856}#
                                 (#{regen 2955}#
                                   (car (cdr (cdr #{x 3151}#))))))
                           (let ((#{body 5861}#
                                   (make-struct/no-tail
                                     (vector-ref %expanded-vtables 15)
                                     #f
                                     #{req 5852}#
                                     #f
                                     #f
                                     #f
                                     '()
                                     #{vars 5854}#
                                     #{exp 5856}#
                                     #f)))
                             (make-struct/no-tail
                               (vector-ref %expanded-vtables 14)
                               #f
                               '()
                               #{body 5861}#)))
                         (error "how did we get here" #{x 3151}#))
                       (let ((#{name 5876}# (car #{x 3151}#))
                             (#{args 5877}#
                               (map #{regen 2955}# (cdr #{x 3151}#))))
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 12)
                           #f
                           #{name 5876}#
                           #{args 5877}#))))))))))
        (lambda (#{e 3166}#
                 #{r 3167}#
                 #{w 3168}#
                 #{s 3169}#
                 #{mod 3170}#)
          (let ((#{e 3177}#
                  (let ((#{x 5891}#
                          (begin
                            (if (if (pair? #{e 3166}#) #{s 3169}# #f)
                              (set-source-properties! #{e 3166}# #{s 3169}#))
                            #{e 3166}#)))
                    (if (if (null? (car #{w 3168}#))
                          (null? (cdr #{w 3168}#))
                          #f)
                      #{x 5891}#
                      (if (if (vector? #{x 5891}#)
                            (if (= (vector-length #{x 5891}#) 4)
                              (eq? (vector-ref #{x 5891}# 0) 'syntax-object)
                              #f)
                            #f)
                        (let ((#{expression 5903}# (vector-ref #{x 5891}# 1))
                              (#{wrap 5904}#
                                (let ((#{w2 5912}# (vector-ref #{x 5891}# 2)))
                                  (let ((#{m1 5913}# (car #{w 3168}#))
                                        (#{s1 5914}# (cdr #{w 3168}#)))
                                    (if (null? #{m1 5913}#)
                                      (if (null? #{s1 5914}#)
                                        #{w2 5912}#
                                        (cons (car #{w2 5912}#)
                                              (let ((#{m2 5921}#
                                                      (cdr #{w2 5912}#)))
                                                (if (null? #{m2 5921}#)
                                                  #{s1 5914}#
                                                  (append
                                                    #{s1 5914}#
                                                    #{m2 5921}#)))))
                                      (cons (let ((#{m2 5925}#
                                                    (car #{w2 5912}#)))
                                              (if (null? #{m2 5925}#)
                                                #{m1 5913}#
                                                (append
                                                  #{m1 5913}#
                                                  #{m2 5925}#)))
                                            (let ((#{m2 5929}#
                                                    (cdr #{w2 5912}#)))
                                              (if (null? #{m2 5929}#)
                                                #{s1 5914}#
                                                (append
                                                  #{s1 5914}#
                                                  #{m2 5929}#))))))))
                              (#{module 5905}# (vector-ref #{x 5891}# 3)))
                          (vector
                            'syntax-object
                            #{expression 5903}#
                            #{wrap 5904}#
                            #{module 5905}#))
                        (if (null? #{x 5891}#)
                          #{x 5891}#
                          (vector
                            'syntax-object
                            #{x 5891}#
                            #{w 3168}#
                            #{mod 3170}#)))))))
            (let ((#{tmp 3179}# ($sc-dispatch #{e 3177}# '(_ any))))
              (if #{tmp 3179}#
                (@apply
                  (lambda (#{x 3181}#)
                    (call-with-values
                      (lambda ()
                        (#{gen-syntax 2941}#
                          #{e 3177}#
                          #{x 3181}#
                          #{r 3167}#
                          '()
                          #{ellipsis? 457}#
                          #{mod 3170}#))
                      (lambda (#{e 3182}# #{maps 3183}#)
                        (#{regen 2955}# #{e 3182}#))))
                  #{tmp 3179}#)
                (syntax-violation
                  'syntax
                  "bad `syntax' form"
                  #{e 3177}#)))))))
    (#{global-extend 349}#
      'core
      'lambda
      (lambda (#{e 3188}#
               #{r 3189}#
               #{w 3190}#
               #{s 3191}#
               #{mod 3192}#)
        (let ((#{tmp 3199}#
                ($sc-dispatch #{e 3188}# '(_ any any . each-any))))
          (if #{tmp 3199}#
            (@apply
              (lambda (#{args 3203}# #{e1 3204}# #{e2 3205}#)
                (call-with-values
                  (lambda ()
                    (#{lambda-formals 459}# #{args 3203}#))
                  (lambda (#{req 3206}#
                           #{opt 3207}#
                           #{rest 3208}#
                           #{kw 3209}#)
                    (letrec*
                      ((#{lp 3217}#
                         (lambda (#{body 3218}# #{meta 3219}#)
                           (let ((#{tmp 3222}#
                                   ($sc-dispatch
                                     #{body 3218}#
                                     '(any any . each-any))))
                             (if (if #{tmp 3222}#
                                   (@apply
                                     (lambda (#{docstring 3226}#
                                              #{e1 3227}#
                                              #{e2 3228}#)
                                       (string?
                                         (syntax->datum #{docstring 3226}#)))
                                     #{tmp 3222}#)
                                   #f)
                               (@apply
                                 (lambda (#{docstring 3232}#
                                          #{e1 3233}#
                                          #{e2 3234}#)
                                   (#{lp 3217}#
                                     (cons #{e1 3233}# #{e2 3234}#)
                                     (append
                                       #{meta 3219}#
                                       (list (cons 'documentation
                                                   (syntax->datum
                                                     #{docstring 3232}#))))))
                                 #{tmp 3222}#)
                               (let ((#{tmp 3237}#
                                       ($sc-dispatch
                                         #{body 3218}#
                                         '(#(vector #(each (any . any)))
                                           any
                                           .
                                           each-any))))
                                 (if #{tmp 3237}#
                                   (@apply
                                     (lambda (#{k 3242}#
                                              #{v 3243}#
                                              #{e1 3244}#
                                              #{e2 3245}#)
                                       (#{lp 3217}#
                                         (cons #{e1 3244}# #{e2 3245}#)
                                         (append
                                           #{meta 3219}#
                                           (syntax->datum
                                             (map cons
                                                  #{k 3242}#
                                                  #{v 3243}#)))))
                                     #{tmp 3237}#)
                                   ((lambda (#{e 2300}#
                                             #{r 2301}#
                                             #{w 2302}#
                                             #{s 2303}#
                                             #{mod 2304}#
                                             #{req 2305}#
                                             #{rest 2306}#
                                             #{meta 2307}#
                                             #{body 2308}#)
                                      (let ((#{ids 2320}#
                                              (if #{rest 2306}#
                                                (append
                                                  #{req 2305}#
                                                  (list #{rest 2306}#))
                                                #{req 2305}#)))
                                        (let ((#{vars 2322}#
                                                (map #{gen-var 469}#
                                                     #{ids 2320}#)))
                                          (let ((#{labels 2324}#
                                                  (#{gen-labels 373}#
                                                    #{ids 2320}#)))
                                            (#{build-simple-lambda 291}#
                                              #{s 2303}#
                                              (map syntax->datum #{req 2305}#)
                                              (if #{rest 2306}#
                                                (syntax->datum #{rest 2306}#)
                                                #f)
                                              #{vars 2322}#
                                              #{meta 2307}#
                                              (#{chi-body 449}#
                                                #{body 2308}#
                                                (#{source-wrap 429}#
                                                  #{e 2300}#
                                                  #{w 2302}#
                                                  #{s 2303}#
                                                  #{mod 2304}#)
                                                (#{extend-var-env 343}#
                                                  #{labels 2324}#
                                                  #{vars 2322}#
                                                  #{r 2301}#)
                                                (#{make-binding-wrap 405}#
                                                  #{ids 2320}#
                                                  #{labels 2324}#
                                                  #{w 2302}#)
                                                #{mod 2304}#))))))
                                    #{e 3188}#
                                    #{r 3189}#
                                    #{w 3190}#
                                    #{s 3191}#
                                    #{mod 3192}#
                                    #{req 3206}#
                                    #{rest 3208}#
                                    #{meta 3219}#
                                    #{body 3218}#))))))))
                      (#{lp 3217}# (cons #{e1 3204}# #{e2 3205}#) '())))))
              #{tmp 3199}#)
            (syntax-violation
              'lambda
              "bad lambda"
              #{e 3188}#)))))
    (module-define!
      (current-module)
      'lambda*
      (make-syntax-transformer
        'lambda*
        'core
        (lambda (#{e 3253}#
                 #{r 3254}#
                 #{w 3255}#
                 #{s 3256}#
                 #{mod 3257}#)
          (let ((#{tmp 3264}#
                  ($sc-dispatch #{e 3253}# '(_ any any . each-any))))
            (if #{tmp 3264}#
              (@apply
                (lambda (#{args 3268}# #{e1 3269}# #{e2 3270}#)
                  (call-with-values
                    (lambda ()
                      (#{chi-lambda-case 465}#
                        #{e 3253}#
                        #{r 3254}#
                        #{w 3255}#
                        #{s 3256}#
                        #{mod 3257}#
                        #{lambda*-formals 463}#
                        (list (cons #{args 3268}#
                                    (cons #{e1 3269}# #{e2 3270}#)))))
                    (lambda (#{meta 3272}# #{lcase 3273}#)
                      (make-struct/no-tail
                        (vector-ref %expanded-vtables 14)
                        #{s 3256}#
                        #{meta 3272}#
                        #{lcase 3273}#))))
                #{tmp 3264}#)
              (syntax-violation
                'lambda
                "bad lambda*"
                #{e 3253}#))))))
    (module-define!
      (current-module)
      'case-lambda
      (make-syntax-transformer
        'case-lambda
        'core
        (lambda (#{e 3278}#
                 #{r 3279}#
                 #{w 3280}#
                 #{s 3281}#
                 #{mod 3282}#)
          (let ((#{tmp 3289}#
                  ($sc-dispatch
                    #{e 3278}#
                    '(_ (any any . each-any)
                        .
                        #(each (any any . each-any))))))
            (if #{tmp 3289}#
              (@apply
                (lambda (#{args 3296}#
                         #{e1 3297}#
                         #{e2 3298}#
                         #{args* 3299}#
                         #{e1* 3300}#
                         #{e2* 3301}#)
                  (call-with-values
                    (lambda ()
                      (#{chi-lambda-case 465}#
                        #{e 3278}#
                        #{r 3279}#
                        #{w 3280}#
                        #{s 3281}#
                        #{mod 3282}#
                        #{lambda-formals 459}#
                        (cons (cons #{args 3296}#
                                    (cons #{e1 3297}# #{e2 3298}#))
                              (map (lambda (#{tmp 3305}#
                                            #{tmp 3304}#
                                            #{tmp 3303}#)
                                     (cons #{tmp 3303}#
                                           (cons #{tmp 3304}# #{tmp 3305}#)))
                                   #{e2* 3301}#
                                   #{e1* 3300}#
                                   #{args* 3299}#))))
                    (lambda (#{meta 3307}# #{lcase 3308}#)
                      (make-struct/no-tail
                        (vector-ref %expanded-vtables 14)
                        #{s 3281}#
                        #{meta 3307}#
                        #{lcase 3308}#))))
                #{tmp 3289}#)
              (syntax-violation
                'case-lambda
                "bad case-lambda"
                #{e 3278}#))))))
    (module-define!
      (current-module)
      'case-lambda*
      (make-syntax-transformer
        'case-lambda*
        'core
        (lambda (#{e 3313}#
                 #{r 3314}#
                 #{w 3315}#
                 #{s 3316}#
                 #{mod 3317}#)
          (let ((#{tmp 3324}#
                  ($sc-dispatch
                    #{e 3313}#
                    '(_ (any any . each-any)
                        .
                        #(each (any any . each-any))))))
            (if #{tmp 3324}#
              (@apply
                (lambda (#{args 3331}#
                         #{e1 3332}#
                         #{e2 3333}#
                         #{args* 3334}#
                         #{e1* 3335}#
                         #{e2* 3336}#)
                  (call-with-values
                    (lambda ()
                      (#{chi-lambda-case 465}#
                        #{e 3313}#
                        #{r 3314}#
                        #{w 3315}#
                        #{s 3316}#
                        #{mod 3317}#
                        #{lambda*-formals 463}#
                        (cons (cons #{args 3331}#
                                    (cons #{e1 3332}# #{e2 3333}#))
                              (map (lambda (#{tmp 3340}#
                                            #{tmp 3339}#
                                            #{tmp 3338}#)
                                     (cons #{tmp 3338}#
                                           (cons #{tmp 3339}# #{tmp 3340}#)))
                                   #{e2* 3336}#
                                   #{e1* 3335}#
                                   #{args* 3334}#))))
                    (lambda (#{meta 3342}# #{lcase 3343}#)
                      (make-struct/no-tail
                        (vector-ref %expanded-vtables 14)
                        #{s 3316}#
                        #{meta 3342}#
                        #{lcase 3343}#))))
                #{tmp 3324}#)
              (syntax-violation
                'case-lambda
                "bad case-lambda*"
                #{e 3313}#))))))
    (#{global-extend 349}#
      'core
      'let
      (letrec*
        ((#{chi-let 3349}#
           (lambda (#{e 3350}#
                    #{r 3351}#
                    #{w 3352}#
                    #{s 3353}#
                    #{mod 3354}#
                    #{constructor 3355}#
                    #{ids 3356}#
                    #{vals 3357}#
                    #{exps 3358}#)
             (if (not (#{valid-bound-ids? 421}# #{ids 3356}#))
               (syntax-violation
                 'let
                 "duplicate bound variable"
                 #{e 3350}#)
               (let ((#{labels 3370}#
                       (#{gen-labels 373}# #{ids 3356}#))
                     (#{new-vars 3371}#
                       (map #{gen-var 469}# #{ids 3356}#)))
                 (let ((#{nw 3374}#
                         (#{make-binding-wrap 405}#
                           #{ids 3356}#
                           #{labels 3370}#
                           #{w 3352}#))
                       (#{nr 3375}#
                         (#{extend-var-env 343}#
                           #{labels 3370}#
                           #{new-vars 3371}#
                           #{r 3351}#)))
                   (#{constructor 3355}#
                     #{s 3353}#
                     (map syntax->datum #{ids 3356}#)
                     #{new-vars 3371}#
                     (map (lambda (#{x 3376}#)
                            (#{chi 441}#
                              #{x 3376}#
                              #{r 3351}#
                              #{w 3352}#
                              #{mod 3354}#))
                          #{vals 3357}#)
                     (#{chi-body 449}#
                       #{exps 3358}#
                       (let ((#{x 6517}#
                               (begin
                                 (if (if (pair? #{e 3350}#) #{s 3353}# #f)
                                   (set-source-properties!
                                     #{e 3350}#
                                     #{s 3353}#))
                                 #{e 3350}#)))
                         (if (if (null? (car #{nw 3374}#))
                               (null? (cdr #{nw 3374}#))
                               #f)
                           #{x 6517}#
                           (if (if (vector? #{x 6517}#)
                                 (if (= (vector-length #{x 6517}#) 4)
                                   (eq? (vector-ref #{x 6517}# 0)
                                        'syntax-object)
                                   #f)
                                 #f)
                             (let ((#{expression 6529}#
                                     (vector-ref #{x 6517}# 1))
                                   (#{wrap 6530}#
                                     (let ((#{w2 6538}#
                                             (vector-ref #{x 6517}# 2)))
                                       (let ((#{m1 6539}# (car #{nw 3374}#))
                                             (#{s1 6540}# (cdr #{nw 3374}#)))
                                         (if (null? #{m1 6539}#)
                                           (if (null? #{s1 6540}#)
                                             #{w2 6538}#
                                             (cons (car #{w2 6538}#)
                                                   (let ((#{m2 6547}#
                                                           (cdr #{w2 6538}#)))
                                                     (if (null? #{m2 6547}#)
                                                       #{s1 6540}#
                                                       (append
                                                         #{s1 6540}#
                                                         #{m2 6547}#)))))
                                           (cons (let ((#{m2 6551}#
                                                         (car #{w2 6538}#)))
                                                   (if (null? #{m2 6551}#)
                                                     #{m1 6539}#
                                                     (append
                                                       #{m1 6539}#
                                                       #{m2 6551}#)))
                                                 (let ((#{m2 6555}#
                                                         (cdr #{w2 6538}#)))
                                                   (if (null? #{m2 6555}#)
                                                     #{s1 6540}#
                                                     (append
                                                       #{s1 6540}#
                                                       #{m2 6555}#))))))))
                                   (#{module 6531}# (vector-ref #{x 6517}# 3)))
                               (vector
                                 'syntax-object
                                 #{expression 6529}#
                                 #{wrap 6530}#
                                 #{module 6531}#))
                             (if (null? #{x 6517}#)
                               #{x 6517}#
                               (vector
                                 'syntax-object
                                 #{x 6517}#
                                 #{nw 3374}#
                                 #{mod 3354}#)))))
                       #{nr 3375}#
                       #{nw 3374}#
                       #{mod 3354}#))))))))
        (lambda (#{e 3378}#
                 #{r 3379}#
                 #{w 3380}#
                 #{s 3381}#
                 #{mod 3382}#)
          (let ((#{tmp 3389}#
                  ($sc-dispatch
                    #{e 3378}#
                    '(_ #(each (any any)) any . each-any))))
            (if (if #{tmp 3389}#
                  (@apply
                    (lambda (#{id 3394}#
                             #{val 3395}#
                             #{e1 3396}#
                             #{e2 3397}#)
                      (and-map #{id? 353}# #{id 3394}#))
                    #{tmp 3389}#)
                  #f)
              (@apply
                (lambda (#{id 3403}#
                         #{val 3404}#
                         #{e1 3405}#
                         #{e2 3406}#)
                  (#{chi-let 3349}#
                    #{e 3378}#
                    #{r 3379}#
                    #{w 3380}#
                    #{s 3381}#
                    #{mod 3382}#
                    (lambda (#{src 1122}#
                             #{ids 1123}#
                             #{vars 1124}#
                             #{val-exps 1125}#
                             #{body-exp 1126}#)
                      (begin
                        (for-each
                          #{maybe-name-value! 269}#
                          #{ids 1123}#
                          #{val-exps 1125}#)
                        (if (null? #{vars 1124}#)
                          #{body-exp 1126}#
                          (#{make-let 240}#
                            #{src 1122}#
                            #{ids 1123}#
                            #{vars 1124}#
                            #{val-exps 1125}#
                            #{body-exp 1126}#))))
                    #{id 3403}#
                    #{val 3404}#
                    (cons #{e1 3405}# #{e2 3406}#)))
                #{tmp 3389}#)
              (let ((#{tmp 3410}#
                      ($sc-dispatch
                        #{e 3378}#
                        '(_ any #(each (any any)) any . each-any))))
                (if (if #{tmp 3410}#
                      (@apply
                        (lambda (#{f 3416}#
                                 #{id 3417}#
                                 #{val 3418}#
                                 #{e1 3419}#
                                 #{e2 3420}#)
                          (if (if (symbol? #{f 3416}#)
                                #t
                                (if (if (vector? #{f 3416}#)
                                      (if (= (vector-length #{f 3416}#) 4)
                                        (eq? (vector-ref #{f 3416}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (symbol? (vector-ref #{f 3416}# 1))
                                  #f))
                            (and-map #{id? 353}# #{id 3417}#)
                            #f))
                        #{tmp 3410}#)
                      #f)
                  (@apply
                    (lambda (#{f 3429}#
                             #{id 3430}#
                             #{val 3431}#
                             #{e1 3432}#
                             #{e2 3433}#)
                      (#{chi-let 3349}#
                        #{e 3378}#
                        #{r 3379}#
                        #{w 3380}#
                        #{s 3381}#
                        #{mod 3382}#
                        (lambda (#{src 1132}#
                                 #{ids 1133}#
                                 #{vars 1134}#
                                 #{val-exps 1135}#
                                 #{body-exp 1136}#)
                          (let ((#{f 1146}# (car #{vars 1134}#))
                                (#{f-name 1147}# (car #{ids 1133}#))
                                (#{vars 1148}# (cdr #{vars 1134}#))
                                (#{ids 1149}# (cdr #{ids 1133}#)))
                            (let ((#{proc 1151}#
                                    (#{build-simple-lambda 291}#
                                      #{src 1132}#
                                      #{ids 1149}#
                                      #f
                                      #{vars 1148}#
                                      '()
                                      #{body-exp 1136}#)))
                              (begin
                                (#{maybe-name-value! 269}#
                                  #{f-name 1147}#
                                  #{proc 1151}#)
                                (for-each
                                  #{maybe-name-value! 269}#
                                  #{ids 1149}#
                                  #{val-exps 1135}#)
                                (#{make-letrec 242}#
                                  #{src 1132}#
                                  #f
                                  (list #{f-name 1147}#)
                                  (list #{f 1146}#)
                                  (list #{proc 1151}#)
                                  (#{build-call 273}#
                                    #{src 1132}#
                                    (#{build-lexical-reference 279}#
                                      'fun
                                      #{src 1132}#
                                      #{f-name 1147}#
                                      #{f 1146}#)
                                    #{val-exps 1135}#))))))
                        (cons #{f 3429}# #{id 3430}#)
                        #{val 3431}#
                        (cons #{e1 3432}# #{e2 3433}#)))
                    #{tmp 3410}#)
                  (syntax-violation
                    'let
                    "bad let"
                    (let ((#{x 6585}#
                            (begin
                              (if (if (pair? #{e 3378}#) #{s 3381}# #f)
                                (set-source-properties! #{e 3378}# #{s 3381}#))
                              #{e 3378}#)))
                      (if (if (null? (car #{w 3380}#))
                            (null? (cdr #{w 3380}#))
                            #f)
                        #{x 6585}#
                        (if (if (vector? #{x 6585}#)
                              (if (= (vector-length #{x 6585}#) 4)
                                (eq? (vector-ref #{x 6585}# 0) 'syntax-object)
                                #f)
                              #f)
                          (let ((#{expression 6597}# (vector-ref #{x 6585}# 1))
                                (#{wrap 6598}#
                                  (let ((#{w2 6606}#
                                          (vector-ref #{x 6585}# 2)))
                                    (let ((#{m1 6607}# (car #{w 3380}#))
                                          (#{s1 6608}# (cdr #{w 3380}#)))
                                      (if (null? #{m1 6607}#)
                                        (if (null? #{s1 6608}#)
                                          #{w2 6606}#
                                          (cons (car #{w2 6606}#)
                                                (let ((#{m2 6615}#
                                                        (cdr #{w2 6606}#)))
                                                  (if (null? #{m2 6615}#)
                                                    #{s1 6608}#
                                                    (append
                                                      #{s1 6608}#
                                                      #{m2 6615}#)))))
                                        (cons (let ((#{m2 6619}#
                                                      (car #{w2 6606}#)))
                                                (if (null? #{m2 6619}#)
                                                  #{m1 6607}#
                                                  (append
                                                    #{m1 6607}#
                                                    #{m2 6619}#)))
                                              (let ((#{m2 6623}#
                                                      (cdr #{w2 6606}#)))
                                                (if (null? #{m2 6623}#)
                                                  #{s1 6608}#
                                                  (append
                                                    #{s1 6608}#
                                                    #{m2 6623}#))))))))
                                (#{module 6599}# (vector-ref #{x 6585}# 3)))
                            (vector
                              'syntax-object
                              #{expression 6597}#
                              #{wrap 6598}#
                              #{module 6599}#))
                          (if (null? #{x 6585}#)
                            #{x 6585}#
                            (vector
                              'syntax-object
                              #{x 6585}#
                              #{w 3380}#
                              #{mod 3382}#)))))))))))))
    (#{global-extend 349}#
      'core
      'letrec
      (lambda (#{e 3439}#
               #{r 3440}#
               #{w 3441}#
               #{s 3442}#
               #{mod 3443}#)
        (let ((#{tmp 3450}#
                ($sc-dispatch
                  #{e 3439}#
                  '(_ #(each (any any)) any . each-any))))
          (if (if #{tmp 3450}#
                (@apply
                  (lambda (#{id 3455}#
                           #{val 3456}#
                           #{e1 3457}#
                           #{e2 3458}#)
                    (and-map #{id? 353}# #{id 3455}#))
                  #{tmp 3450}#)
                #f)
            (@apply
              (lambda (#{id 3464}#
                       #{val 3465}#
                       #{e1 3466}#
                       #{e2 3467}#)
                (if (not (#{valid-bound-ids? 421}# #{id 3464}#))
                  (syntax-violation
                    'letrec
                    "duplicate bound variable"
                    #{e 3439}#)
                  (let ((#{labels 3473}#
                          (#{gen-labels 373}# #{id 3464}#))
                        (#{new-vars 3474}#
                          (map #{gen-var 469}# #{id 3464}#)))
                    (let ((#{w 3477}#
                            (#{make-binding-wrap 405}#
                              #{id 3464}#
                              #{labels 3473}#
                              #{w 3441}#))
                          (#{r 3478}#
                            (#{extend-var-env 343}#
                              #{labels 3473}#
                              #{new-vars 3474}#
                              #{r 3440}#)))
                      (#{build-letrec 309}#
                        #{s 3442}#
                        #f
                        (map syntax->datum #{id 3464}#)
                        #{new-vars 3474}#
                        (map (lambda (#{x 3479}#)
                               (#{chi 441}#
                                 #{x 3479}#
                                 #{r 3478}#
                                 #{w 3477}#
                                 #{mod 3443}#))
                             #{val 3465}#)
                        (#{chi-body 449}#
                          (cons #{e1 3466}# #{e2 3467}#)
                          (let ((#{x 7107}#
                                  (begin
                                    (if (if (pair? #{e 3439}#) #{s 3442}# #f)
                                      (set-source-properties!
                                        #{e 3439}#
                                        #{s 3442}#))
                                    #{e 3439}#)))
                            (if (if (null? (car #{w 3477}#))
                                  (null? (cdr #{w 3477}#))
                                  #f)
                              #{x 7107}#
                              (if (if (vector? #{x 7107}#)
                                    (if (= (vector-length #{x 7107}#) 4)
                                      (eq? (vector-ref #{x 7107}# 0)
                                           'syntax-object)
                                      #f)
                                    #f)
                                (let ((#{expression 7119}#
                                        (vector-ref #{x 7107}# 1))
                                      (#{wrap 7120}#
                                        (let ((#{w2 7128}#
                                                (vector-ref #{x 7107}# 2)))
                                          (let ((#{m1 7129}# (car #{w 3477}#))
                                                (#{s1 7130}# (cdr #{w 3477}#)))
                                            (if (null? #{m1 7129}#)
                                              (if (null? #{s1 7130}#)
                                                #{w2 7128}#
                                                (cons (car #{w2 7128}#)
                                                      (let ((#{m2 7137}#
                                                              (cdr #{w2 7128}#)))
                                                        (if (null? #{m2 7137}#)
                                                          #{s1 7130}#
                                                          (append
                                                            #{s1 7130}#
                                                            #{m2 7137}#)))))
                                              (cons (let ((#{m2 7141}#
                                                            (car #{w2 7128}#)))
                                                      (if (null? #{m2 7141}#)
                                                        #{m1 7129}#
                                                        (append
                                                          #{m1 7129}#
                                                          #{m2 7141}#)))
                                                    (let ((#{m2 7145}#
                                                            (cdr #{w2 7128}#)))
                                                      (if (null? #{m2 7145}#)
                                                        #{s1 7130}#
                                                        (append
                                                          #{s1 7130}#
                                                          #{m2 7145}#))))))))
                                      (#{module 7121}#
                                        (vector-ref #{x 7107}# 3)))
                                  (vector
                                    'syntax-object
                                    #{expression 7119}#
                                    #{wrap 7120}#
                                    #{module 7121}#))
                                (if (null? #{x 7107}#)
                                  #{x 7107}#
                                  (vector
                                    'syntax-object
                                    #{x 7107}#
                                    #{w 3477}#
                                    #{mod 3443}#)))))
                          #{r 3478}#
                          #{w 3477}#
                          #{mod 3443}#))))))
              #{tmp 3450}#)
            (syntax-violation
              'letrec
              "bad letrec"
              (let ((#{x 7162}#
                      (begin
                        (if (if (pair? #{e 3439}#) #{s 3442}# #f)
                          (set-source-properties! #{e 3439}# #{s 3442}#))
                        #{e 3439}#)))
                (if (if (null? (car #{w 3441}#))
                      (null? (cdr #{w 3441}#))
                      #f)
                  #{x 7162}#
                  (if (if (vector? #{x 7162}#)
                        (if (= (vector-length #{x 7162}#) 4)
                          (eq? (vector-ref #{x 7162}# 0) 'syntax-object)
                          #f)
                        #f)
                    (let ((#{expression 7174}# (vector-ref #{x 7162}# 1))
                          (#{wrap 7175}#
                            (let ((#{w2 7183}# (vector-ref #{x 7162}# 2)))
                              (let ((#{m1 7184}# (car #{w 3441}#))
                                    (#{s1 7185}# (cdr #{w 3441}#)))
                                (if (null? #{m1 7184}#)
                                  (if (null? #{s1 7185}#)
                                    #{w2 7183}#
                                    (cons (car #{w2 7183}#)
                                          (let ((#{m2 7192}#
                                                  (cdr #{w2 7183}#)))
                                            (if (null? #{m2 7192}#)
                                              #{s1 7185}#
                                              (append
                                                #{s1 7185}#
                                                #{m2 7192}#)))))
                                  (cons (let ((#{m2 7196}# (car #{w2 7183}#)))
                                          (if (null? #{m2 7196}#)
                                            #{m1 7184}#
                                            (append #{m1 7184}# #{m2 7196}#)))
                                        (let ((#{m2 7200}# (cdr #{w2 7183}#)))
                                          (if (null? #{m2 7200}#)
                                            #{s1 7185}#
                                            (append
                                              #{s1 7185}#
                                              #{m2 7200}#))))))))
                          (#{module 7176}# (vector-ref #{x 7162}# 3)))
                      (vector
                        'syntax-object
                        #{expression 7174}#
                        #{wrap 7175}#
                        #{module 7176}#))
                    (if (null? #{x 7162}#)
                      #{x 7162}#
                      (vector
                        'syntax-object
                        #{x 7162}#
                        #{w 3441}#
                        #{mod 3443}#))))))))))
    (#{global-extend 349}#
      'core
      'letrec*
      (lambda (#{e 3485}#
               #{r 3486}#
               #{w 3487}#
               #{s 3488}#
               #{mod 3489}#)
        (let ((#{tmp 3496}#
                ($sc-dispatch
                  #{e 3485}#
                  '(_ #(each (any any)) any . each-any))))
          (if (if #{tmp 3496}#
                (@apply
                  (lambda (#{id 3501}#
                           #{val 3502}#
                           #{e1 3503}#
                           #{e2 3504}#)
                    (and-map #{id? 353}# #{id 3501}#))
                  #{tmp 3496}#)
                #f)
            (@apply
              (lambda (#{id 3510}#
                       #{val 3511}#
                       #{e1 3512}#
                       #{e2 3513}#)
                (if (not (#{valid-bound-ids? 421}# #{id 3510}#))
                  (syntax-violation
                    'letrec*
                    "duplicate bound variable"
                    #{e 3485}#)
                  (let ((#{labels 3519}#
                          (#{gen-labels 373}# #{id 3510}#))
                        (#{new-vars 3520}#
                          (map #{gen-var 469}# #{id 3510}#)))
                    (let ((#{w 3523}#
                            (#{make-binding-wrap 405}#
                              #{id 3510}#
                              #{labels 3519}#
                              #{w 3487}#))
                          (#{r 3524}#
                            (#{extend-var-env 343}#
                              #{labels 3519}#
                              #{new-vars 3520}#
                              #{r 3486}#)))
                      (#{build-letrec 309}#
                        #{s 3488}#
                        #t
                        (map syntax->datum #{id 3510}#)
                        #{new-vars 3520}#
                        (map (lambda (#{x 3525}#)
                               (#{chi 441}#
                                 #{x 3525}#
                                 #{r 3524}#
                                 #{w 3523}#
                                 #{mod 3489}#))
                             #{val 3511}#)
                        (#{chi-body 449}#
                          (cons #{e1 3512}# #{e2 3513}#)
                          (let ((#{x 7684}#
                                  (begin
                                    (if (if (pair? #{e 3485}#) #{s 3488}# #f)
                                      (set-source-properties!
                                        #{e 3485}#
                                        #{s 3488}#))
                                    #{e 3485}#)))
                            (if (if (null? (car #{w 3523}#))
                                  (null? (cdr #{w 3523}#))
                                  #f)
                              #{x 7684}#
                              (if (if (vector? #{x 7684}#)
                                    (if (= (vector-length #{x 7684}#) 4)
                                      (eq? (vector-ref #{x 7684}# 0)
                                           'syntax-object)
                                      #f)
                                    #f)
                                (let ((#{expression 7696}#
                                        (vector-ref #{x 7684}# 1))
                                      (#{wrap 7697}#
                                        (let ((#{w2 7705}#
                                                (vector-ref #{x 7684}# 2)))
                                          (let ((#{m1 7706}# (car #{w 3523}#))
                                                (#{s1 7707}# (cdr #{w 3523}#)))
                                            (if (null? #{m1 7706}#)
                                              (if (null? #{s1 7707}#)
                                                #{w2 7705}#
                                                (cons (car #{w2 7705}#)
                                                      (let ((#{m2 7714}#
                                                              (cdr #{w2 7705}#)))
                                                        (if (null? #{m2 7714}#)
                                                          #{s1 7707}#
                                                          (append
                                                            #{s1 7707}#
                                                            #{m2 7714}#)))))
                                              (cons (let ((#{m2 7718}#
                                                            (car #{w2 7705}#)))
                                                      (if (null? #{m2 7718}#)
                                                        #{m1 7706}#
                                                        (append
                                                          #{m1 7706}#
                                                          #{m2 7718}#)))
                                                    (let ((#{m2 7722}#
                                                            (cdr #{w2 7705}#)))
                                                      (if (null? #{m2 7722}#)
                                                        #{s1 7707}#
                                                        (append
                                                          #{s1 7707}#
                                                          #{m2 7722}#))))))))
                                      (#{module 7698}#
                                        (vector-ref #{x 7684}# 3)))
                                  (vector
                                    'syntax-object
                                    #{expression 7696}#
                                    #{wrap 7697}#
                                    #{module 7698}#))
                                (if (null? #{x 7684}#)
                                  #{x 7684}#
                                  (vector
                                    'syntax-object
                                    #{x 7684}#
                                    #{w 3523}#
                                    #{mod 3489}#)))))
                          #{r 3524}#
                          #{w 3523}#
                          #{mod 3489}#))))))
              #{tmp 3496}#)
            (syntax-violation
              'letrec*
              "bad letrec*"
              (let ((#{x 7739}#
                      (begin
                        (if (if (pair? #{e 3485}#) #{s 3488}# #f)
                          (set-source-properties! #{e 3485}# #{s 3488}#))
                        #{e 3485}#)))
                (if (if (null? (car #{w 3487}#))
                      (null? (cdr #{w 3487}#))
                      #f)
                  #{x 7739}#
                  (if (if (vector? #{x 7739}#)
                        (if (= (vector-length #{x 7739}#) 4)
                          (eq? (vector-ref #{x 7739}# 0) 'syntax-object)
                          #f)
                        #f)
                    (let ((#{expression 7751}# (vector-ref #{x 7739}# 1))
                          (#{wrap 7752}#
                            (let ((#{w2 7760}# (vector-ref #{x 7739}# 2)))
                              (let ((#{m1 7761}# (car #{w 3487}#))
                                    (#{s1 7762}# (cdr #{w 3487}#)))
                                (if (null? #{m1 7761}#)
                                  (if (null? #{s1 7762}#)
                                    #{w2 7760}#
                                    (cons (car #{w2 7760}#)
                                          (let ((#{m2 7769}#
                                                  (cdr #{w2 7760}#)))
                                            (if (null? #{m2 7769}#)
                                              #{s1 7762}#
                                              (append
                                                #{s1 7762}#
                                                #{m2 7769}#)))))
                                  (cons (let ((#{m2 7773}# (car #{w2 7760}#)))
                                          (if (null? #{m2 7773}#)
                                            #{m1 7761}#
                                            (append #{m1 7761}# #{m2 7773}#)))
                                        (let ((#{m2 7777}# (cdr #{w2 7760}#)))
                                          (if (null? #{m2 7777}#)
                                            #{s1 7762}#
                                            (append
                                              #{s1 7762}#
                                              #{m2 7777}#))))))))
                          (#{module 7753}# (vector-ref #{x 7739}# 3)))
                      (vector
                        'syntax-object
                        #{expression 7751}#
                        #{wrap 7752}#
                        #{module 7753}#))
                    (if (null? #{x 7739}#)
                      #{x 7739}#
                      (vector
                        'syntax-object
                        #{x 7739}#
                        #{w 3487}#
                        #{mod 3489}#))))))))))
    (#{global-extend 349}#
      'core
      'set!
      (lambda (#{e 3531}#
               #{r 3532}#
               #{w 3533}#
               #{s 3534}#
               #{mod 3535}#)
        (let ((#{tmp 3542}#
                ($sc-dispatch #{e 3531}# '(_ any any))))
          (if (if #{tmp 3542}#
                (@apply
                  (lambda (#{id 3545}# #{val 3546}#)
                    (if (symbol? #{id 3545}#)
                      #t
                      (if (if (vector? #{id 3545}#)
                            (if (= (vector-length #{id 3545}#) 4)
                              (eq? (vector-ref #{id 3545}# 0) 'syntax-object)
                              #f)
                            #f)
                        (symbol? (vector-ref #{id 3545}# 1))
                        #f)))
                  #{tmp 3542}#)
                #f)
            (@apply
              (lambda (#{id 3549}# #{val 3550}#)
                (let ((#{n 3553}#
                        (#{id-var-name 415}# #{id 3549}# #{w 3533}#))
                      (#{id-mod 3554}#
                        (if (if (vector? #{id 3549}#)
                              (if (= (vector-length #{id 3549}#) 4)
                                (eq? (vector-ref #{id 3549}# 0) 'syntax-object)
                                #f)
                              #f)
                          (vector-ref #{id 3549}# 3)
                          #{mod 3535}#)))
                  (let ((#{b 3556}#
                          (let ((#{t 7891}# (assq #{n 3553}# #{r 3532}#)))
                            (if #{t 7891}#
                              (cdr #{t 7891}#)
                              (if (symbol? #{n 3553}#)
                                (let ((#{t 7892}#
                                        (#{get-global-definition-hook 265}#
                                          #{n 3553}#
                                          #{id-mod 3554}#)))
                                  (if #{t 7892}# #{t 7892}# '(global)))
                                '(displaced-lexical))))))
                    (let ((#{atom-key 3559}# (car #{b 3556}#)))
                      (if (memv #{atom-key 3559}# '(lexical))
                        ((lambda (#{source 1005}#
                                  #{name 1006}#
                                  #{var 1007}#
                                  #{exp 1008}#)
                           (begin
                             (#{maybe-name-value! 269}#
                               #{name 1006}#
                               #{exp 1008}#)
                             (#{make-lexical-set 216}#
                               #{source 1005}#
                               #{name 1006}#
                               #{var 1007}#
                               #{exp 1008}#)))
                         #{s 3534}#
                         (syntax->datum #{id 3549}#)
                         (cdr #{b 3556}#)
                         (#{chi 441}#
                           #{val 3550}#
                           #{r 3532}#
                           #{w 3533}#
                           #{mod 3535}#))
                        (if (memv #{atom-key 3559}# '(global))
                          (#{build-global-assignment 287}#
                            #{s 3534}#
                            #{n 3553}#
                            (#{chi 441}#
                              #{val 3550}#
                              #{r 3532}#
                              #{w 3533}#
                              #{mod 3535}#)
                            #{id-mod 3554}#)
                          (if (memv #{atom-key 3559}# '(macro))
                            (let ((#{p 3566}# (cdr #{b 3556}#)))
                              (if (procedure-property
                                    #{p 3566}#
                                    'variable-transformer)
                                (#{chi 441}#
                                  (#{chi-macro 447}#
                                    #{p 3566}#
                                    #{e 3531}#
                                    #{r 3532}#
                                    #{w 3533}#
                                    #{s 3534}#
                                    #f
                                    #{mod 3535}#)
                                  #{r 3532}#
                                  '(())
                                  #{mod 3535}#)
                                (syntax-violation
                                  'set!
                                  "not a variable transformer"
                                  (if (if (null? (car #{w 3533}#))
                                        (null? (cdr #{w 3533}#))
                                        #f)
                                    #{e 3531}#
                                    (if (if (vector? #{e 3531}#)
                                          (if (= (vector-length #{e 3531}#) 4)
                                            (eq? (vector-ref #{e 3531}# 0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (let ((#{expression 8165}#
                                              (vector-ref #{e 3531}# 1))
                                            (#{wrap 8166}#
                                              (let ((#{w2 8174}#
                                                      (vector-ref
                                                        #{e 3531}#
                                                        2)))
                                                (let ((#{m1 8175}#
                                                        (car #{w 3533}#))
                                                      (#{s1 8176}#
                                                        (cdr #{w 3533}#)))
                                                  (if (null? #{m1 8175}#)
                                                    (if (null? #{s1 8176}#)
                                                      #{w2 8174}#
                                                      (cons (car #{w2 8174}#)
                                                            (let ((#{m2 8183}#
                                                                    (cdr #{w2 8174}#)))
                                                              (if (null? #{m2 8183}#)
                                                                #{s1 8176}#
                                                                (append
                                                                  #{s1 8176}#
                                                                  #{m2 8183}#)))))
                                                    (cons (let ((#{m2 8187}#
                                                                  (car #{w2 8174}#)))
                                                            (if (null? #{m2 8187}#)
                                                              #{m1 8175}#
                                                              (append
                                                                #{m1 8175}#
                                                                #{m2 8187}#)))
                                                          (let ((#{m2 8191}#
                                                                  (cdr #{w2 8174}#)))
                                                            (if (null? #{m2 8191}#)
                                                              #{s1 8176}#
                                                              (append
                                                                #{s1 8176}#
                                                                #{m2 8191}#))))))))
                                            (#{module 8167}#
                                              (vector-ref #{e 3531}# 3)))
                                        (vector
                                          'syntax-object
                                          #{expression 8165}#
                                          #{wrap 8166}#
                                          #{module 8167}#))
                                      (if (null? #{e 3531}#)
                                        #{e 3531}#
                                        (vector
                                          'syntax-object
                                          #{e 3531}#
                                          #{w 3533}#
                                          #{mod 3535}#))))
                                  (if (if (null? (car #{w 3533}#))
                                        (null? (cdr #{w 3533}#))
                                        #f)
                                    #{id 3549}#
                                    (if (if (vector? #{id 3549}#)
                                          (if (= (vector-length #{id 3549}#) 4)
                                            (eq? (vector-ref #{id 3549}# 0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (let ((#{expression 8210}#
                                              (vector-ref #{id 3549}# 1))
                                            (#{wrap 8211}#
                                              (let ((#{w2 8219}#
                                                      (vector-ref
                                                        #{id 3549}#
                                                        2)))
                                                (let ((#{m1 8220}#
                                                        (car #{w 3533}#))
                                                      (#{s1 8221}#
                                                        (cdr #{w 3533}#)))
                                                  (if (null? #{m1 8220}#)
                                                    (if (null? #{s1 8221}#)
                                                      #{w2 8219}#
                                                      (cons (car #{w2 8219}#)
                                                            (let ((#{m2 8228}#
                                                                    (cdr #{w2 8219}#)))
                                                              (if (null? #{m2 8228}#)
                                                                #{s1 8221}#
                                                                (append
                                                                  #{s1 8221}#
                                                                  #{m2 8228}#)))))
                                                    (cons (let ((#{m2 8232}#
                                                                  (car #{w2 8219}#)))
                                                            (if (null? #{m2 8232}#)
                                                              #{m1 8220}#
                                                              (append
                                                                #{m1 8220}#
                                                                #{m2 8232}#)))
                                                          (let ((#{m2 8236}#
                                                                  (cdr #{w2 8219}#)))
                                                            (if (null? #{m2 8236}#)
                                                              #{s1 8221}#
                                                              (append
                                                                #{s1 8221}#
                                                                #{m2 8236}#))))))))
                                            (#{module 8212}#
                                              (vector-ref #{id 3549}# 3)))
                                        (vector
                                          'syntax-object
                                          #{expression 8210}#
                                          #{wrap 8211}#
                                          #{module 8212}#))
                                      (if (null? #{id 3549}#)
                                        #{id 3549}#
                                        (vector
                                          'syntax-object
                                          #{id 3549}#
                                          #{w 3533}#
                                          #{id-mod 3554}#)))))))
                            (if (memv #{atom-key 3559}# '(displaced-lexical))
                              (syntax-violation
                                'set!
                                "identifier out of context"
                                (if (if (null? (car #{w 3533}#))
                                      (null? (cdr #{w 3533}#))
                                      #f)
                                  #{id 3549}#
                                  (if (if (vector? #{id 3549}#)
                                        (if (= (vector-length #{id 3549}#) 4)
                                          (eq? (vector-ref #{id 3549}# 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (let ((#{expression 8255}#
                                            (vector-ref #{id 3549}# 1))
                                          (#{wrap 8256}#
                                            (let ((#{w2 8264}#
                                                    (vector-ref
                                                      #{id 3549}#
                                                      2)))
                                              (let ((#{m1 8265}#
                                                      (car #{w 3533}#))
                                                    (#{s1 8266}#
                                                      (cdr #{w 3533}#)))
                                                (if (null? #{m1 8265}#)
                                                  (if (null? #{s1 8266}#)
                                                    #{w2 8264}#
                                                    (cons (car #{w2 8264}#)
                                                          (let ((#{m2 8273}#
                                                                  (cdr #{w2 8264}#)))
                                                            (if (null? #{m2 8273}#)
                                                              #{s1 8266}#
                                                              (append
                                                                #{s1 8266}#
                                                                #{m2 8273}#)))))
                                                  (cons (let ((#{m2 8277}#
                                                                (car #{w2 8264}#)))
                                                          (if (null? #{m2 8277}#)
                                                            #{m1 8265}#
                                                            (append
                                                              #{m1 8265}#
                                                              #{m2 8277}#)))
                                                        (let ((#{m2 8281}#
                                                                (cdr #{w2 8264}#)))
                                                          (if (null? #{m2 8281}#)
                                                            #{s1 8266}#
                                                            (append
                                                              #{s1 8266}#
                                                              #{m2 8281}#))))))))
                                          (#{module 8257}#
                                            (vector-ref #{id 3549}# 3)))
                                      (vector
                                        'syntax-object
                                        #{expression 8255}#
                                        #{wrap 8256}#
                                        #{module 8257}#))
                                    (if (null? #{id 3549}#)
                                      #{id 3549}#
                                      (vector
                                        'syntax-object
                                        #{id 3549}#
                                        #{w 3533}#
                                        #{mod 3535}#)))))
                              (syntax-violation
                                'set!
                                "bad set!"
                                (let ((#{x 8298}#
                                        (begin
                                          (if (if (pair? #{e 3531}#)
                                                #{s 3534}#
                                                #f)
                                            (set-source-properties!
                                              #{e 3531}#
                                              #{s 3534}#))
                                          #{e 3531}#)))
                                  (if (if (null? (car #{w 3533}#))
                                        (null? (cdr #{w 3533}#))
                                        #f)
                                    #{x 8298}#
                                    (if (if (vector? #{x 8298}#)
                                          (if (= (vector-length #{x 8298}#) 4)
                                            (eq? (vector-ref #{x 8298}# 0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (let ((#{expression 8310}#
                                              (vector-ref #{x 8298}# 1))
                                            (#{wrap 8311}#
                                              (let ((#{w2 8319}#
                                                      (vector-ref
                                                        #{x 8298}#
                                                        2)))
                                                (let ((#{m1 8320}#
                                                        (car #{w 3533}#))
                                                      (#{s1 8321}#
                                                        (cdr #{w 3533}#)))
                                                  (if (null? #{m1 8320}#)
                                                    (if (null? #{s1 8321}#)
                                                      #{w2 8319}#
                                                      (cons (car #{w2 8319}#)
                                                            (let ((#{m2 8328}#
                                                                    (cdr #{w2 8319}#)))
                                                              (if (null? #{m2 8328}#)
                                                                #{s1 8321}#
                                                                (append
                                                                  #{s1 8321}#
                                                                  #{m2 8328}#)))))
                                                    (cons (let ((#{m2 8332}#
                                                                  (car #{w2 8319}#)))
                                                            (if (null? #{m2 8332}#)
                                                              #{m1 8320}#
                                                              (append
                                                                #{m1 8320}#
                                                                #{m2 8332}#)))
                                                          (let ((#{m2 8336}#
                                                                  (cdr #{w2 8319}#)))
                                                            (if (null? #{m2 8336}#)
                                                              #{s1 8321}#
                                                              (append
                                                                #{s1 8321}#
                                                                #{m2 8336}#))))))))
                                            (#{module 8312}#
                                              (vector-ref #{x 8298}# 3)))
                                        (vector
                                          'syntax-object
                                          #{expression 8310}#
                                          #{wrap 8311}#
                                          #{module 8312}#))
                                      (if (null? #{x 8298}#)
                                        #{x 8298}#
                                        (vector
                                          'syntax-object
                                          #{x 8298}#
                                          #{w 3533}#
                                          #{mod 3535}#))))))))))))))
              #{tmp 3542}#)
            (let ((#{tmp 3571}#
                    ($sc-dispatch
                      #{e 3531}#
                      '(_ (any . each-any) any))))
              (if #{tmp 3571}#
                (@apply
                  (lambda (#{head 3575}# #{tail 3576}# #{val 3577}#)
                    (call-with-values
                      (lambda ()
                        (#{syntax-type 439}#
                          #{head 3575}#
                          #{r 3532}#
                          '(())
                          #f
                          #f
                          #{mod 3535}#
                          #t))
                      (lambda (#{type 3580}#
                               #{value 3581}#
                               #{ee 3582}#
                               #{ww 3583}#
                               #{ss 3584}#
                               #{modmod 3585}#)
                        (if (memv #{type 3580}# '(module-ref))
                          (let ((#{val 3594}#
                                  (#{chi 441}#
                                    #{val 3577}#
                                    #{r 3532}#
                                    #{w 3533}#
                                    #{mod 3535}#)))
                            (call-with-values
                              (lambda ()
                                (#{value 3581}#
                                  (cons #{head 3575}# #{tail 3576}#)
                                  #{r 3532}#
                                  #{w 3533}#))
                              (lambda (#{e 3596}#
                                       #{r 3597}#
                                       #{w 3598}#
                                       #{s* 3599}#
                                       #{mod 3600}#)
                                (let ((#{tmp 3607}# (list #{e 3596}#)))
                                  (if (if #{tmp 3607}#
                                        (@apply
                                          (lambda (#{e 3609}#)
                                            (if (symbol? #{e 3609}#)
                                              #t
                                              (if (if (vector? #{e 3609}#)
                                                    (if (= (vector-length
                                                             #{e 3609}#)
                                                           4)
                                                      (eq? (vector-ref
                                                             #{e 3609}#
                                                             0)
                                                           'syntax-object)
                                                      #f)
                                                    #f)
                                                (symbol?
                                                  (vector-ref #{e 3609}# 1))
                                                #f)))
                                          #{tmp 3607}#)
                                        #f)
                                    (@apply
                                      (lambda (#{e 3611}#)
                                        (let ((#{var 8407}#
                                                (syntax->datum #{e 3611}#)))
                                          (begin
                                            (if (if (struct? #{val 3594}#)
                                                  (eq? (struct-vtable
                                                         #{val 3594}#)
                                                       (vector-ref
                                                         %expanded-vtables
                                                         14))
                                                  #f)
                                              (let ((#{meta 8418}#
                                                      (struct-ref
                                                        #{val 3594}#
                                                        1)))
                                                (if (not (assq 'name
                                                               #{meta 8418}#))
                                                  (let ((#{v 8428}#
                                                          (cons (cons 'name
                                                                      #{var 8407}#)
                                                                #{meta 8418}#)))
                                                    (struct-set!
                                                      #{val 3594}#
                                                      1
                                                      #{v 8428}#)))))
                                            (#{analyze-variable 283}#
                                              #{mod 3600}#
                                              #{var 8407}#
                                              (lambda (#{mod 8410}#
                                                       #{var 8411}#
                                                       #{public? 8412}#)
                                                (make-struct/no-tail
                                                  (vector-ref
                                                    %expanded-vtables
                                                    6)
                                                  #{s 3534}#
                                                  #{mod 8410}#
                                                  #{var 8411}#
                                                  #{public? 8412}#
                                                  #{val 3594}#))
                                              (lambda (#{var 8413}#)
                                                (make-struct/no-tail
                                                  (vector-ref
                                                    %expanded-vtables
                                                    8)
                                                  #{s 3534}#
                                                  #{var 8413}#
                                                  #{val 3594}#))))))
                                      #{tmp 3607}#)
                                    (syntax-violation
                                      #f
                                      "source expression failed to match any pattern"
                                      #{e 3596}#))))))
                          (#{build-call 273}#
                            #{s 3534}#
                            (#{chi 441}#
                              (list '#(syntax-object
                                       setter
                                       ((top)
                                        #(ribcage () () ())
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(type value ee ww ss modmod)
                                          #((top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top))
                                          #("i3586"
                                            "i3587"
                                            "i3588"
                                            "i3589"
                                            "i3590"
                                            "i3591"))
                                        #(ribcage
                                          #(head tail val)
                                          #((top) (top) (top))
                                          #("i3572" "i3573" "i3574"))
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(e r w s mod)
                                          #((top) (top) (top) (top) (top))
                                          #("i3536"
                                            "i3537"
                                            "i3538"
                                            "i3539"
                                            "i3540"))
                                        #(ribcage
                                          (lambda-var-list
                                            gen-var
                                            strip
                                            chi-lambda-case
                                            lambda*-formals
                                            chi-simple-lambda
                                            lambda-formals
                                            ellipsis?
                                            chi-void
                                            eval-local-transformer
                                            chi-local-syntax
                                            chi-body
                                            chi-macro
                                            chi-call
                                            chi-expr
                                            chi
                                            syntax-type
                                            chi-when-list
                                            chi-install-global
                                            chi-top-sequence
                                            chi-sequence
                                            source-wrap
                                            wrap
                                            bound-id-member?
                                            distinct-bound-ids?
                                            valid-bound-ids?
                                            bound-id=?
                                            free-id=?
                                            id-var-name
                                            same-marks?
                                            join-marks
                                            join-wraps
                                            smart-append
                                            make-binding-wrap
                                            extend-ribcage!
                                            make-empty-ribcage
                                            new-mark
                                            anti-mark
                                            the-anti-mark
                                            top-marked?
                                            top-wrap
                                            empty-wrap
                                            set-ribcage-labels!
                                            set-ribcage-marks!
                                            set-ribcage-symnames!
                                            ribcage-labels
                                            ribcage-marks
                                            ribcage-symnames
                                            ribcage?
                                            make-ribcage
                                            gen-labels
                                            gen-label
                                            make-rename
                                            rename-marks
                                            rename-new
                                            rename-old
                                            subst-rename?
                                            wrap-subst
                                            wrap-marks
                                            make-wrap
                                            id-sym-name&marks
                                            id-sym-name
                                            id?
                                            nonsymbol-id?
                                            global-extend
                                            lookup
                                            macros-only-env
                                            extend-var-env
                                            extend-env
                                            null-env
                                            binding-value
                                            binding-type
                                            make-binding
                                            arg-check
                                            source-annotation
                                            no-source
                                            set-syntax-object-module!
                                            set-syntax-object-wrap!
                                            set-syntax-object-expression!
                                            syntax-object-module
                                            syntax-object-wrap
                                            syntax-object-expression
                                            syntax-object?
                                            make-syntax-object
                                            build-lexical-var
                                            build-letrec
                                            build-named-let
                                            build-let
                                            build-sequence
                                            build-data
                                            build-primref
                                            build-primcall
                                            build-lambda-case
                                            build-case-lambda
                                            build-simple-lambda
                                            build-global-definition
                                            build-global-assignment
                                            build-global-reference
                                            analyze-variable
                                            build-lexical-assignment
                                            build-lexical-reference
                                            build-dynlet
                                            build-conditional
                                            build-call
                                            build-void
                                            maybe-name-value!
                                            decorate-source
                                            get-global-definition-hook
                                            put-global-definition-hook
                                            gensym-hook
                                            local-eval-hook
                                            top-level-eval-hook
                                            fx<
                                            fx=
                                            fx-
                                            fx+
                                            set-lambda-meta!
                                            lambda-meta
                                            lambda?
                                            make-dynlet
                                            make-letrec
                                            make-let
                                            make-lambda-case
                                            make-lambda
                                            make-seq
                                            make-primcall
                                            make-call
                                            make-conditional
                                            make-toplevel-define
                                            make-toplevel-set
                                            make-toplevel-ref
                                            make-module-set
                                            make-module-ref
                                            make-lexical-set
                                            make-lexical-ref
                                            make-primitive-ref
                                            make-const
                                            make-void)
                                          ((top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top))
                                          ("i470"
                                           "i468"
                                           "i466"
                                           "i464"
                                           "i462"
                                           "i460"
                                           "i458"
                                           "i456"
                                           "i454"
                                           "i452"
                                           "i450"
                                           "i448"
                                           "i446"
                                           "i444"
                                           "i442"
                                           "i440"
                                           "i438"
                                           "i436"
                                           "i434"
                                           "i432"
                                           "i430"
                                           "i428"
                                           "i426"
                                           "i424"
                                           "i422"
                                           "i420"
                                           "i418"
                                           "i416"
                                           "i414"
                                           "i412"
                                           "i410"
                                           "i408"
                                           "i406"
                                           "i404"
                                           "i402"
                                           "i401"
                                           "i399"
                                           "i396"
                                           "i395"
                                           "i394"
                                           "i392"
                                           "i391"
                                           "i389"
                                           "i387"
                                           "i385"
                                           "i383"
                                           "i381"
                                           "i379"
                                           "i377"
                                           "i375"
                                           "i372"
                                           "i370"
                                           "i369"
                                           "i367"
                                           "i365"
                                           "i363"
                                           "i361"
                                           "i360"
                                           "i359"
                                           "i358"
                                           "i356"
                                           "i355"
                                           "i352"
                                           "i350"
                                           "i348"
                                           "i346"
                                           "i344"
                                           "i342"
                                           "i340"
                                           "i339"
                                           "i338"
                                           "i336"
                                           "i334"
                                           "i333"
                                           "i330"
                                           "i329"
                                           "i327"
                                           "i325"
                                           "i323"
                                           "i321"
                                           "i319"
                                           "i317"
                                           "i315"
                                           "i313"
                                           "i311"
                                           "i308"
                                           "i306"
                                           "i304"
                                           "i302"
                                           "i300"
                                           "i298"
                                           "i296"
                                           "i294"
                                           "i292"
                                           "i290"
                                           "i288"
                                           "i286"
                                           "i284"
                                           "i282"
                                           "i280"
                                           "i278"
                                           "i276"
                                           "i274"
                                           "i272"
                                           "i270"
                                           "i268"
                                           "i266"
                                           "i264"
                                           "i262"
                                           "i261"
                                           "i258"
                                           "i256"
                                           "i255"
                                           "i254"
                                           "i253"
                                           "i252"
                                           "i250"
                                           "i248"
                                           "i246"
                                           "i243"
                                           "i241"
                                           "i239"
                                           "i237"
                                           "i235"
                                           "i233"
                                           "i231"
                                           "i229"
                                           "i227"
                                           "i225"
                                           "i223"
                                           "i221"
                                           "i219"
                                           "i217"
                                           "i215"
                                           "i213"
                                           "i211"
                                           "i209"
                                           "i207"))
                                        #(ribcage
                                          (define-structure
                                            define-expansion-accessors
                                            define-expansion-constructors)
                                          ((top) (top) (top))
                                          ("i45" "i44" "i43")))
                                       (hygiene guile))
                                    #{head 3575}#)
                              #{r 3532}#
                              #{w 3533}#
                              #{mod 3535}#)
                            (map (lambda (#{e 3613}#)
                                   (#{chi 441}#
                                     #{e 3613}#
                                     #{r 3532}#
                                     #{w 3533}#
                                     #{mod 3535}#))
                                 (append
                                   #{tail 3576}#
                                   (list #{val 3577}#))))))))
                  #{tmp 3571}#)
                (syntax-violation
                  'set!
                  "bad set!"
                  (let ((#{x 8603}#
                          (begin
                            (if (if (pair? #{e 3531}#) #{s 3534}# #f)
                              (set-source-properties! #{e 3531}# #{s 3534}#))
                            #{e 3531}#)))
                    (if (if (null? (car #{w 3533}#))
                          (null? (cdr #{w 3533}#))
                          #f)
                      #{x 8603}#
                      (if (if (vector? #{x 8603}#)
                            (if (= (vector-length #{x 8603}#) 4)
                              (eq? (vector-ref #{x 8603}# 0) 'syntax-object)
                              #f)
                            #f)
                        (let ((#{expression 8615}# (vector-ref #{x 8603}# 1))
                              (#{wrap 8616}#
                                (let ((#{w2 8624}# (vector-ref #{x 8603}# 2)))
                                  (let ((#{m1 8625}# (car #{w 3533}#))
                                        (#{s1 8626}# (cdr #{w 3533}#)))
                                    (if (null? #{m1 8625}#)
                                      (if (null? #{s1 8626}#)
                                        #{w2 8624}#
                                        (cons (car #{w2 8624}#)
                                              (let ((#{m2 8633}#
                                                      (cdr #{w2 8624}#)))
                                                (if (null? #{m2 8633}#)
                                                  #{s1 8626}#
                                                  (append
                                                    #{s1 8626}#
                                                    #{m2 8633}#)))))
                                      (cons (let ((#{m2 8637}#
                                                    (car #{w2 8624}#)))
                                              (if (null? #{m2 8637}#)
                                                #{m1 8625}#
                                                (append
                                                  #{m1 8625}#
                                                  #{m2 8637}#)))
                                            (let ((#{m2 8641}#
                                                    (cdr #{w2 8624}#)))
                                              (if (null? #{m2 8641}#)
                                                #{s1 8626}#
                                                (append
                                                  #{s1 8626}#
                                                  #{m2 8641}#))))))))
                              (#{module 8617}# (vector-ref #{x 8603}# 3)))
                          (vector
                            'syntax-object
                            #{expression 8615}#
                            #{wrap 8616}#
                            #{module 8617}#))
                        (if (null? #{x 8603}#)
                          #{x 8603}#
                          (vector
                            'syntax-object
                            #{x 8603}#
                            #{w 3533}#
                            #{mod 3535}#))))))))))))
    (module-define!
      (current-module)
      '@
      (make-syntax-transformer
        '@
        'module-ref
        (lambda (#{e 3618}# #{r 3619}# #{w 3620}#)
          (let ((#{tmp 3625}#
                  ($sc-dispatch #{e 3618}# '(_ each-any any))))
            (if (if #{tmp 3625}#
                  (@apply
                    (lambda (#{mod 3628}# #{id 3629}#)
                      (if (and-map #{id? 353}# #{mod 3628}#)
                        (if (symbol? #{id 3629}#)
                          #t
                          (if (if (vector? #{id 3629}#)
                                (if (= (vector-length #{id 3629}#) 4)
                                  (eq? (vector-ref #{id 3629}# 0)
                                       'syntax-object)
                                  #f)
                                #f)
                            (symbol? (vector-ref #{id 3629}# 1))
                            #f))
                        #f))
                    #{tmp 3625}#)
                  #f)
              (@apply
                (lambda (#{mod 3635}# #{id 3636}#)
                  (values
                    (syntax->datum #{id 3636}#)
                    #{r 3619}#
                    #{w 3620}#
                    #f
                    (syntax->datum
                      (cons '#(syntax-object
                               public
                               ((top)
                                #(ribcage
                                  #(mod id)
                                  #((top) (top))
                                  #("i3633" "i3634"))
                                #(ribcage () () ())
                                #(ribcage
                                  #(e r w)
                                  #((top) (top) (top))
                                  #("i3621" "i3622" "i3623"))
                                #(ribcage
                                  (lambda-var-list
                                    gen-var
                                    strip
                                    chi-lambda-case
                                    lambda*-formals
                                    chi-simple-lambda
                                    lambda-formals
                                    ellipsis?
                                    chi-void
                                    eval-local-transformer
                                    chi-local-syntax
                                    chi-body
                                    chi-macro
                                    chi-call
                                    chi-expr
                                    chi
                                    syntax-type
                                    chi-when-list
                                    chi-install-global
                                    chi-top-sequence
                                    chi-sequence
                                    source-wrap
                                    wrap
                                    bound-id-member?
                                    distinct-bound-ids?
                                    valid-bound-ids?
                                    bound-id=?
                                    free-id=?
                                    id-var-name
                                    same-marks?
                                    join-marks
                                    join-wraps
                                    smart-append
                                    make-binding-wrap
                                    extend-ribcage!
                                    make-empty-ribcage
                                    new-mark
                                    anti-mark
                                    the-anti-mark
                                    top-marked?
                                    top-wrap
                                    empty-wrap
                                    set-ribcage-labels!
                                    set-ribcage-marks!
                                    set-ribcage-symnames!
                                    ribcage-labels
                                    ribcage-marks
                                    ribcage-symnames
                                    ribcage?
                                    make-ribcage
                                    gen-labels
                                    gen-label
                                    make-rename
                                    rename-marks
                                    rename-new
                                    rename-old
                                    subst-rename?
                                    wrap-subst
                                    wrap-marks
                                    make-wrap
                                    id-sym-name&marks
                                    id-sym-name
                                    id?
                                    nonsymbol-id?
                                    global-extend
                                    lookup
                                    macros-only-env
                                    extend-var-env
                                    extend-env
                                    null-env
                                    binding-value
                                    binding-type
                                    make-binding
                                    arg-check
                                    source-annotation
                                    no-source
                                    set-syntax-object-module!
                                    set-syntax-object-wrap!
                                    set-syntax-object-expression!
                                    syntax-object-module
                                    syntax-object-wrap
                                    syntax-object-expression
                                    syntax-object?
                                    make-syntax-object
                                    build-lexical-var
                                    build-letrec
                                    build-named-let
                                    build-let
                                    build-sequence
                                    build-data
                                    build-primref
                                    build-primcall
                                    build-lambda-case
                                    build-case-lambda
                                    build-simple-lambda
                                    build-global-definition
                                    build-global-assignment
                                    build-global-reference
                                    analyze-variable
                                    build-lexical-assignment
                                    build-lexical-reference
                                    build-dynlet
                                    build-conditional
                                    build-call
                                    build-void
                                    maybe-name-value!
                                    decorate-source
                                    get-global-definition-hook
                                    put-global-definition-hook
                                    gensym-hook
                                    local-eval-hook
                                    top-level-eval-hook
                                    fx<
                                    fx=
                                    fx-
                                    fx+
                                    set-lambda-meta!
                                    lambda-meta
                                    lambda?
                                    make-dynlet
                                    make-letrec
                                    make-let
                                    make-lambda-case
                                    make-lambda
                                    make-seq
                                    make-primcall
                                    make-call
                                    make-conditional
                                    make-toplevel-define
                                    make-toplevel-set
                                    make-toplevel-ref
                                    make-module-set
                                    make-module-ref
                                    make-lexical-set
                                    make-lexical-ref
                                    make-primitive-ref
                                    make-const
                                    make-void)
                                  ((top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top))
                                  ("i470"
                                   "i468"
                                   "i466"
                                   "i464"
                                   "i462"
                                   "i460"
                                   "i458"
                                   "i456"
                                   "i454"
                                   "i452"
                                   "i450"
                                   "i448"
                                   "i446"
                                   "i444"
                                   "i442"
                                   "i440"
                                   "i438"
                                   "i436"
                                   "i434"
                                   "i432"
                                   "i430"
                                   "i428"
                                   "i426"
                                   "i424"
                                   "i422"
                                   "i420"
                                   "i418"
                                   "i416"
                                   "i414"
                                   "i412"
                                   "i410"
                                   "i408"
                                   "i406"
                                   "i404"
                                   "i402"
                                   "i401"
                                   "i399"
                                   "i396"
                                   "i395"
                                   "i394"
                                   "i392"
                                   "i391"
                                   "i389"
                                   "i387"
                                   "i385"
                                   "i383"
                                   "i381"
                                   "i379"
                                   "i377"
                                   "i375"
                                   "i372"
                                   "i370"
                                   "i369"
                                   "i367"
                                   "i365"
                                   "i363"
                                   "i361"
                                   "i360"
                                   "i359"
                                   "i358"
                                   "i356"
                                   "i355"
                                   "i352"
                                   "i350"
                                   "i348"
                                   "i346"
                                   "i344"
                                   "i342"
                                   "i340"
                                   "i339"
                                   "i338"
                                   "i336"
                                   "i334"
                                   "i333"
                                   "i330"
                                   "i329"
                                   "i327"
                                   "i325"
                                   "i323"
                                   "i321"
                                   "i319"
                                   "i317"
                                   "i315"
                                   "i313"
                                   "i311"
                                   "i308"
                                   "i306"
                                   "i304"
                                   "i302"
                                   "i300"
                                   "i298"
                                   "i296"
                                   "i294"
                                   "i292"
                                   "i290"
                                   "i288"
                                   "i286"
                                   "i284"
                                   "i282"
                                   "i280"
                                   "i278"
                                   "i276"
                                   "i274"
                                   "i272"
                                   "i270"
                                   "i268"
                                   "i266"
                                   "i264"
                                   "i262"
                                   "i261"
                                   "i258"
                                   "i256"
                                   "i255"
                                   "i254"
                                   "i253"
                                   "i252"
                                   "i250"
                                   "i248"
                                   "i246"
                                   "i243"
                                   "i241"
                                   "i239"
                                   "i237"
                                   "i235"
                                   "i233"
                                   "i231"
                                   "i229"
                                   "i227"
                                   "i225"
                                   "i223"
                                   "i221"
                                   "i219"
                                   "i217"
                                   "i215"
                                   "i213"
                                   "i211"
                                   "i209"
                                   "i207"))
                                #(ribcage
                                  (define-structure
                                    define-expansion-accessors
                                    define-expansion-constructors)
                                  ((top) (top) (top))
                                  ("i45" "i44" "i43")))
                               (hygiene guile))
                            #{mod 3635}#))))
                #{tmp 3625}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{e 3618}#))))))
    (#{global-extend 349}#
      'module-ref
      '@@
      (lambda (#{e 3638}# #{r 3639}# #{w 3640}#)
        (letrec*
          ((#{remodulate 3645}#
             (lambda (#{x 3646}# #{mod 3647}#)
               (if (pair? #{x 3646}#)
                 (cons (#{remodulate 3645}#
                         (car #{x 3646}#)
                         #{mod 3647}#)
                       (#{remodulate 3645}#
                         (cdr #{x 3646}#)
                         #{mod 3647}#))
                 (if (if (vector? #{x 3646}#)
                       (if (= (vector-length #{x 3646}#) 4)
                         (eq? (vector-ref #{x 3646}# 0) 'syntax-object)
                         #f)
                       #f)
                   (let ((#{expression 8715}#
                           (#{remodulate 3645}#
                             (vector-ref #{x 3646}# 1)
                             #{mod 3647}#))
                         (#{wrap 8716}# (vector-ref #{x 3646}# 2)))
                     (vector
                       'syntax-object
                       #{expression 8715}#
                       #{wrap 8716}#
                       #{mod 3647}#))
                   (if (vector? #{x 3646}#)
                     (let ((#{n 3658}# (vector-length #{x 3646}#)))
                       (let ((#{v 3660}# (make-vector #{n 3658}#)))
                         (letrec*
                           ((#{loop 3663}#
                              (lambda (#{i 3664}#)
                                (if (= #{i 3664}# #{n 3658}#)
                                  #{v 3660}#
                                  (begin
                                    (vector-set!
                                      #{v 3660}#
                                      #{i 3664}#
                                      (#{remodulate 3645}#
                                        (vector-ref #{x 3646}# #{i 3664}#)
                                        #{mod 3647}#))
                                    (#{loop 3663}# (#{1+}# #{i 3664}#)))))))
                           (#{loop 3663}# 0))))
                     #{x 3646}#))))))
          (let ((#{tmp 3671}#
                  ($sc-dispatch #{e 3638}# '(_ each-any any))))
            (if (if #{tmp 3671}#
                  (@apply
                    (lambda (#{mod 3674}# #{exp 3675}#)
                      (and-map #{id? 353}# #{mod 3674}#))
                    #{tmp 3671}#)
                  #f)
              (@apply
                (lambda (#{mod 3679}# #{exp 3680}#)
                  (let ((#{mod 3682}#
                          (syntax->datum
                            (cons '#(syntax-object
                                     private
                                     ((top)
                                      #(ribcage
                                        #(mod exp)
                                        #((top) (top))
                                        #("i3677" "i3678"))
                                      #(ribcage (remodulate) ((top)) ("i3644"))
                                      #(ribcage
                                        #(e r w)
                                        #((top) (top) (top))
                                        #("i3641" "i3642" "i3643"))
                                      #(ribcage
                                        (lambda-var-list
                                          gen-var
                                          strip
                                          chi-lambda-case
                                          lambda*-formals
                                          chi-simple-lambda
                                          lambda-formals
                                          ellipsis?
                                          chi-void
                                          eval-local-transformer
                                          chi-local-syntax
                                          chi-body
                                          chi-macro
                                          chi-call
                                          chi-expr
                                          chi
                                          syntax-type
                                          chi-when-list
                                          chi-install-global
                                          chi-top-sequence
                                          chi-sequence
                                          source-wrap
                                          wrap
                                          bound-id-member?
                                          distinct-bound-ids?
                                          valid-bound-ids?
                                          bound-id=?
                                          free-id=?
                                          id-var-name
                                          same-marks?
                                          join-marks
                                          join-wraps
                                          smart-append
                                          make-binding-wrap
                                          extend-ribcage!
                                          make-empty-ribcage
                                          new-mark
                                          anti-mark
                                          the-anti-mark
                                          top-marked?
                                          top-wrap
                                          empty-wrap
                                          set-ribcage-labels!
                                          set-ribcage-marks!
                                          set-ribcage-symnames!
                                          ribcage-labels
                                          ribcage-marks
                                          ribcage-symnames
                                          ribcage?
                                          make-ribcage
                                          gen-labels
                                          gen-label
                                          make-rename
                                          rename-marks
                                          rename-new
                                          rename-old
                                          subst-rename?
                                          wrap-subst
                                          wrap-marks
                                          make-wrap
                                          id-sym-name&marks
                                          id-sym-name
                                          id?
                                          nonsymbol-id?
                                          global-extend
                                          lookup
                                          macros-only-env
                                          extend-var-env
                                          extend-env
                                          null-env
                                          binding-value
                                          binding-type
                                          make-binding
                                          arg-check
                                          source-annotation
                                          no-source
                                          set-syntax-object-module!
                                          set-syntax-object-wrap!
                                          set-syntax-object-expression!
                                          syntax-object-module
                                          syntax-object-wrap
                                          syntax-object-expression
                                          syntax-object?
                                          make-syntax-object
                                          build-lexical-var
                                          build-letrec
                                          build-named-let
                                          build-let
                                          build-sequence
                                          build-data
                                          build-primref
                                          build-primcall
                                          build-lambda-case
                                          build-case-lambda
                                          build-simple-lambda
                                          build-global-definition
                                          build-global-assignment
                                          build-global-reference
                                          analyze-variable
                                          build-lexical-assignment
                                          build-lexical-reference
                                          build-dynlet
                                          build-conditional
                                          build-call
                                          build-void
                                          maybe-name-value!
                                          decorate-source
                                          get-global-definition-hook
                                          put-global-definition-hook
                                          gensym-hook
                                          local-eval-hook
                                          top-level-eval-hook
                                          fx<
                                          fx=
                                          fx-
                                          fx+
                                          set-lambda-meta!
                                          lambda-meta
                                          lambda?
                                          make-dynlet
                                          make-letrec
                                          make-let
                                          make-lambda-case
                                          make-lambda
                                          make-seq
                                          make-primcall
                                          make-call
                                          make-conditional
                                          make-toplevel-define
                                          make-toplevel-set
                                          make-toplevel-ref
                                          make-module-set
                                          make-module-ref
                                          make-lexical-set
                                          make-lexical-ref
                                          make-primitive-ref
                                          make-const
                                          make-void)
                                        ((top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top))
                                        ("i470"
                                         "i468"
                                         "i466"
                                         "i464"
                                         "i462"
                                         "i460"
                                         "i458"
                                         "i456"
                                         "i454"
                                         "i452"
                                         "i450"
                                         "i448"
                                         "i446"
                                         "i444"
                                         "i442"
                                         "i440"
                                         "i438"
                                         "i436"
                                         "i434"
                                         "i432"
                                         "i430"
                                         "i428"
                                         "i426"
                                         "i424"
                                         "i422"
                                         "i420"
                                         "i418"
                                         "i416"
                                         "i414"
                                         "i412"
                                         "i410"
                                         "i408"
                                         "i406"
                                         "i404"
                                         "i402"
                                         "i401"
                                         "i399"
                                         "i396"
                                         "i395"
                                         "i394"
                                         "i392"
                                         "i391"
                                         "i389"
                                         "i387"
                                         "i385"
                                         "i383"
                                         "i381"
                                         "i379"
                                         "i377"
                                         "i375"
                                         "i372"
                                         "i370"
                                         "i369"
                                         "i367"
                                         "i365"
                                         "i363"
                                         "i361"
                                         "i360"
                                         "i359"
                                         "i358"
                                         "i356"
                                         "i355"
                                         "i352"
                                         "i350"
                                         "i348"
                                         "i346"
                                         "i344"
                                         "i342"
                                         "i340"
                                         "i339"
                                         "i338"
                                         "i336"
                                         "i334"
                                         "i333"
                                         "i330"
                                         "i329"
                                         "i327"
                                         "i325"
                                         "i323"
                                         "i321"
                                         "i319"
                                         "i317"
                                         "i315"
                                         "i313"
                                         "i311"
                                         "i308"
                                         "i306"
                                         "i304"
                                         "i302"
                                         "i300"
                                         "i298"
                                         "i296"
                                         "i294"
                                         "i292"
                                         "i290"
                                         "i288"
                                         "i286"
                                         "i284"
                                         "i282"
                                         "i280"
                                         "i278"
                                         "i276"
                                         "i274"
                                         "i272"
                                         "i270"
                                         "i268"
                                         "i266"
                                         "i264"
                                         "i262"
                                         "i261"
                                         "i258"
                                         "i256"
                                         "i255"
                                         "i254"
                                         "i253"
                                         "i252"
                                         "i250"
                                         "i248"
                                         "i246"
                                         "i243"
                                         "i241"
                                         "i239"
                                         "i237"
                                         "i235"
                                         "i233"
                                         "i231"
                                         "i229"
                                         "i227"
                                         "i225"
                                         "i223"
                                         "i221"
                                         "i219"
                                         "i217"
                                         "i215"
                                         "i213"
                                         "i211"
                                         "i209"
                                         "i207"))
                                      #(ribcage
                                        (define-structure
                                          define-expansion-accessors
                                          define-expansion-constructors)
                                        ((top) (top) (top))
                                        ("i45" "i44" "i43")))
                                     (hygiene guile))
                                  #{mod 3679}#))))
                    (values
                      (#{remodulate 3645}# #{exp 3680}# #{mod 3682}#)
                      #{r 3639}#
                      #{w 3640}#
                      (#{source-annotation 331}# #{exp 3680}#)
                      #{mod 3682}#)))
                #{tmp 3671}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{e 3638}#))))))
    (#{global-extend 349}#
      'core
      'if
      (lambda (#{e 3684}#
               #{r 3685}#
               #{w 3686}#
               #{s 3687}#
               #{mod 3688}#)
        (let ((#{tmp 3695}#
                ($sc-dispatch #{e 3684}# '(_ any any))))
          (if #{tmp 3695}#
            (@apply
              (lambda (#{test 3698}# #{then 3699}#)
                (#{build-conditional 275}#
                  #{s 3687}#
                  (#{chi 441}#
                    #{test 3698}#
                    #{r 3685}#
                    #{w 3686}#
                    #{mod 3688}#)
                  (#{chi 441}#
                    #{then 3699}#
                    #{r 3685}#
                    #{w 3686}#
                    #{mod 3688}#)
                  (make-struct/no-tail
                    (vector-ref %expanded-vtables 0)
                    #f)))
              #{tmp 3695}#)
            (let ((#{tmp 3701}#
                    ($sc-dispatch #{e 3684}# '(_ any any any))))
              (if #{tmp 3701}#
                (@apply
                  (lambda (#{test 3705}# #{then 3706}# #{else 3707}#)
                    (#{build-conditional 275}#
                      #{s 3687}#
                      (#{chi 441}#
                        #{test 3705}#
                        #{r 3685}#
                        #{w 3686}#
                        #{mod 3688}#)
                      (#{chi 441}#
                        #{then 3706}#
                        #{r 3685}#
                        #{w 3686}#
                        #{mod 3688}#)
                      (#{chi 441}#
                        #{else 3707}#
                        #{r 3685}#
                        #{w 3686}#
                        #{mod 3688}#)))
                  #{tmp 3701}#)
                (syntax-violation
                  #f
                  "source expression failed to match any pattern"
                  #{e 3684}#)))))))
    (#{global-extend 349}#
      'core
      'with-fluids
      (lambda (#{e 3708}#
               #{r 3709}#
               #{w 3710}#
               #{s 3711}#
               #{mod 3712}#)
        (let ((#{tmp 3719}#
                ($sc-dispatch
                  #{e 3708}#
                  '(_ #(each (any any)) any . each-any))))
          (if #{tmp 3719}#
            (@apply
              (lambda (#{fluid 3724}#
                       #{val 3725}#
                       #{b 3726}#
                       #{b* 3727}#)
                ((lambda (#{source 989}#
                          #{fluids 990}#
                          #{vals 991}#
                          #{body 992}#)
                   (#{make-dynlet 244}#
                     #{source 989}#
                     #{fluids 990}#
                     #{vals 991}#
                     #{body 992}#))
                 #{s 3711}#
                 (map (lambda (#{x 3728}#)
                        (#{chi 441}#
                          #{x 3728}#
                          #{r 3709}#
                          #{w 3710}#
                          #{mod 3712}#))
                      #{fluid 3724}#)
                 (map (lambda (#{x 3731}#)
                        (#{chi 441}#
                          #{x 3731}#
                          #{r 3709}#
                          #{w 3710}#
                          #{mod 3712}#))
                      #{val 3725}#)
                 (#{chi-body 449}#
                   (cons #{b 3726}# #{b* 3727}#)
                   (let ((#{x 9559}#
                           (begin
                             (if (if (pair? #{e 3708}#) #{s 3711}# #f)
                               (set-source-properties! #{e 3708}# #{s 3711}#))
                             #{e 3708}#)))
                     (if (if (null? (car #{w 3710}#))
                           (null? (cdr #{w 3710}#))
                           #f)
                       #{x 9559}#
                       (if (if (vector? #{x 9559}#)
                             (if (= (vector-length #{x 9559}#) 4)
                               (eq? (vector-ref #{x 9559}# 0) 'syntax-object)
                               #f)
                             #f)
                         (let ((#{expression 9571}# (vector-ref #{x 9559}# 1))
                               (#{wrap 9572}#
                                 (let ((#{w2 9580}# (vector-ref #{x 9559}# 2)))
                                   (let ((#{m1 9581}# (car #{w 3710}#))
                                         (#{s1 9582}# (cdr #{w 3710}#)))
                                     (if (null? #{m1 9581}#)
                                       (if (null? #{s1 9582}#)
                                         #{w2 9580}#
                                         (cons (car #{w2 9580}#)
                                               (let ((#{m2 9589}#
                                                       (cdr #{w2 9580}#)))
                                                 (if (null? #{m2 9589}#)
                                                   #{s1 9582}#
                                                   (append
                                                     #{s1 9582}#
                                                     #{m2 9589}#)))))
                                       (cons (let ((#{m2 9593}#
                                                     (car #{w2 9580}#)))
                                               (if (null? #{m2 9593}#)
                                                 #{m1 9581}#
                                                 (append
                                                   #{m1 9581}#
                                                   #{m2 9593}#)))
                                             (let ((#{m2 9597}#
                                                     (cdr #{w2 9580}#)))
                                               (if (null? #{m2 9597}#)
                                                 #{s1 9582}#
                                                 (append
                                                   #{s1 9582}#
                                                   #{m2 9597}#))))))))
                               (#{module 9573}# (vector-ref #{x 9559}# 3)))
                           (vector
                             'syntax-object
                             #{expression 9571}#
                             #{wrap 9572}#
                             #{module 9573}#))
                         (if (null? #{x 9559}#)
                           #{x 9559}#
                           (vector
                             'syntax-object
                             #{x 9559}#
                             #{w 3710}#
                             #{mod 3712}#)))))
                   #{r 3709}#
                   #{w 3710}#
                   #{mod 3712}#)))
              #{tmp 3719}#)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              #{e 3708}#)))))
    (module-define!
      (current-module)
      'begin
      (make-syntax-transformer 'begin 'begin '()))
    (module-define!
      (current-module)
      'define
      (make-syntax-transformer 'define 'define '()))
    (module-define!
      (current-module)
      'define-syntax
      (make-syntax-transformer
        'define-syntax
        'define-syntax
        '()))
    (module-define!
      (current-module)
      'eval-when
      (make-syntax-transformer
        'eval-when
        'eval-when
        '()))
    (#{global-extend 349}#
      'core
      'syntax-case
      (letrec*
        ((#{convert-pattern 3736}#
           (lambda (#{pattern 3743}# #{keys 3744}#)
             (letrec*
               ((#{cvt* 3748}#
                  (lambda (#{p* 3753}# #{n 3754}# #{ids 3755}#)
                    (if (not (pair? #{p* 3753}#))
                      (#{cvt 3752}#
                        #{p* 3753}#
                        #{n 3754}#
                        #{ids 3755}#)
                      (call-with-values
                        (lambda ()
                          (#{cvt* 3748}#
                            (cdr #{p* 3753}#)
                            #{n 3754}#
                            #{ids 3755}#))
                        (lambda (#{y 3759}# #{ids 3760}#)
                          (call-with-values
                            (lambda ()
                              (#{cvt 3752}#
                                (car #{p* 3753}#)
                                #{n 3754}#
                                #{ids 3760}#))
                            (lambda (#{x 3763}# #{ids 3764}#)
                              (values
                                (cons #{x 3763}# #{y 3759}#)
                                #{ids 3764}#))))))))
                (#{v-reverse 3750}#
                  (lambda (#{x 3767}#)
                    (letrec*
                      ((#{loop 3772}#
                         (lambda (#{r 3773}# #{x 3774}#)
                           (if (not (pair? #{x 3774}#))
                             (values #{r 3773}# #{x 3774}#)
                             (#{loop 3772}#
                               (cons (car #{x 3774}#) #{r 3773}#)
                               (cdr #{x 3774}#))))))
                      (#{loop 3772}# '() #{x 3767}#))))
                (#{cvt 3752}#
                  (lambda (#{p 3775}# #{n 3776}# #{ids 3777}#)
                    (if (if (symbol? #{p 3775}#)
                          #t
                          (if (if (vector? #{p 3775}#)
                                (if (= (vector-length #{p 3775}#) 4)
                                  (eq? (vector-ref #{p 3775}# 0)
                                       'syntax-object)
                                  #f)
                                #f)
                            (symbol? (vector-ref #{p 3775}# 1))
                            #f))
                      (if (#{bound-id-member? 425}#
                            #{p 3775}#
                            #{keys 3744}#)
                        (values
                          (vector 'free-id #{p 3775}#)
                          #{ids 3777}#)
                        (if (#{free-id=? 417}#
                              #{p 3775}#
                              '#(syntax-object
                                 _
                                 ((top)
                                  #(ribcage () () ())
                                  #(ribcage
                                    #(p n ids)
                                    #((top) (top) (top))
                                    #("i3778" "i3779" "i3780"))
                                  #(ribcage
                                    (cvt v-reverse cvt*)
                                    ((top) (top) (top))
                                    ("i3751" "i3749" "i3747"))
                                  #(ribcage
                                    #(pattern keys)
                                    #((top) (top))
                                    #("i3745" "i3746"))
                                  #(ribcage
                                    (gen-syntax-case
                                      gen-clause
                                      build-dispatch-call
                                      convert-pattern)
                                    ((top) (top) (top) (top))
                                    ("i3741" "i3739" "i3737" "i3735"))
                                  #(ribcage
                                    (lambda-var-list
                                      gen-var
                                      strip
                                      chi-lambda-case
                                      lambda*-formals
                                      chi-simple-lambda
                                      lambda-formals
                                      ellipsis?
                                      chi-void
                                      eval-local-transformer
                                      chi-local-syntax
                                      chi-body
                                      chi-macro
                                      chi-call
                                      chi-expr
                                      chi
                                      syntax-type
                                      chi-when-list
                                      chi-install-global
                                      chi-top-sequence
                                      chi-sequence
                                      source-wrap
                                      wrap
                                      bound-id-member?
                                      distinct-bound-ids?
                                      valid-bound-ids?
                                      bound-id=?
                                      free-id=?
                                      id-var-name
                                      same-marks?
                                      join-marks
                                      join-wraps
                                      smart-append
                                      make-binding-wrap
                                      extend-ribcage!
                                      make-empty-ribcage
                                      new-mark
                                      anti-mark
                                      the-anti-mark
                                      top-marked?
                                      top-wrap
                                      empty-wrap
                                      set-ribcage-labels!
                                      set-ribcage-marks!
                                      set-ribcage-symnames!
                                      ribcage-labels
                                      ribcage-marks
                                      ribcage-symnames
                                      ribcage?
                                      make-ribcage
                                      gen-labels
                                      gen-label
                                      make-rename
                                      rename-marks
                                      rename-new
                                      rename-old
                                      subst-rename?
                                      wrap-subst
                                      wrap-marks
                                      make-wrap
                                      id-sym-name&marks
                                      id-sym-name
                                      id?
                                      nonsymbol-id?
                                      global-extend
                                      lookup
                                      macros-only-env
                                      extend-var-env
                                      extend-env
                                      null-env
                                      binding-value
                                      binding-type
                                      make-binding
                                      arg-check
                                      source-annotation
                                      no-source
                                      set-syntax-object-module!
                                      set-syntax-object-wrap!
                                      set-syntax-object-expression!
                                      syntax-object-module
                                      syntax-object-wrap
                                      syntax-object-expression
                                      syntax-object?
                                      make-syntax-object
                                      build-lexical-var
                                      build-letrec
                                      build-named-let
                                      build-let
                                      build-sequence
                                      build-data
                                      build-primref
                                      build-primcall
                                      build-lambda-case
                                      build-case-lambda
                                      build-simple-lambda
                                      build-global-definition
                                      build-global-assignment
                                      build-global-reference
                                      analyze-variable
                                      build-lexical-assignment
                                      build-lexical-reference
                                      build-dynlet
                                      build-conditional
                                      build-call
                                      build-void
                                      maybe-name-value!
                                      decorate-source
                                      get-global-definition-hook
                                      put-global-definition-hook
                                      gensym-hook
                                      local-eval-hook
                                      top-level-eval-hook
                                      fx<
                                      fx=
                                      fx-
                                      fx+
                                      set-lambda-meta!
                                      lambda-meta
                                      lambda?
                                      make-dynlet
                                      make-letrec
                                      make-let
                                      make-lambda-case
                                      make-lambda
                                      make-seq
                                      make-primcall
                                      make-call
                                      make-conditional
                                      make-toplevel-define
                                      make-toplevel-set
                                      make-toplevel-ref
                                      make-module-set
                                      make-module-ref
                                      make-lexical-set
                                      make-lexical-ref
                                      make-primitive-ref
                                      make-const
                                      make-void)
                                    ((top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top))
                                    ("i470"
                                     "i468"
                                     "i466"
                                     "i464"
                                     "i462"
                                     "i460"
                                     "i458"
                                     "i456"
                                     "i454"
                                     "i452"
                                     "i450"
                                     "i448"
                                     "i446"
                                     "i444"
                                     "i442"
                                     "i440"
                                     "i438"
                                     "i436"
                                     "i434"
                                     "i432"
                                     "i430"
                                     "i428"
                                     "i426"
                                     "i424"
                                     "i422"
                                     "i420"
                                     "i418"
                                     "i416"
                                     "i414"
                                     "i412"
                                     "i410"
                                     "i408"
                                     "i406"
                                     "i404"
                                     "i402"
                                     "i401"
                                     "i399"
                                     "i396"
                                     "i395"
                                     "i394"
                                     "i392"
                                     "i391"
                                     "i389"
                                     "i387"
                                     "i385"
                                     "i383"
                                     "i381"
                                     "i379"
                                     "i377"
                                     "i375"
                                     "i372"
                                     "i370"
                                     "i369"
                                     "i367"
                                     "i365"
                                     "i363"
                                     "i361"
                                     "i360"
                                     "i359"
                                     "i358"
                                     "i356"
                                     "i355"
                                     "i352"
                                     "i350"
                                     "i348"
                                     "i346"
                                     "i344"
                                     "i342"
                                     "i340"
                                     "i339"
                                     "i338"
                                     "i336"
                                     "i334"
                                     "i333"
                                     "i330"
                                     "i329"
                                     "i327"
                                     "i325"
                                     "i323"
                                     "i321"
                                     "i319"
                                     "i317"
                                     "i315"
                                     "i313"
                                     "i311"
                                     "i308"
                                     "i306"
                                     "i304"
                                     "i302"
                                     "i300"
                                     "i298"
                                     "i296"
                                     "i294"
                                     "i292"
                                     "i290"
                                     "i288"
                                     "i286"
                                     "i284"
                                     "i282"
                                     "i280"
                                     "i278"
                                     "i276"
                                     "i274"
                                     "i272"
                                     "i270"
                                     "i268"
                                     "i266"
                                     "i264"
                                     "i262"
                                     "i261"
                                     "i258"
                                     "i256"
                                     "i255"
                                     "i254"
                                     "i253"
                                     "i252"
                                     "i250"
                                     "i248"
                                     "i246"
                                     "i243"
                                     "i241"
                                     "i239"
                                     "i237"
                                     "i235"
                                     "i233"
                                     "i231"
                                     "i229"
                                     "i227"
                                     "i225"
                                     "i223"
                                     "i221"
                                     "i219"
                                     "i217"
                                     "i215"
                                     "i213"
                                     "i211"
                                     "i209"
                                     "i207"))
                                  #(ribcage
                                    (define-structure
                                      define-expansion-accessors
                                      define-expansion-constructors)
                                    ((top) (top) (top))
                                    ("i45" "i44" "i43")))
                                 (hygiene guile)))
                          (values '_ #{ids 3777}#)
                          (values
                            'any
                            (cons (cons #{p 3775}# #{n 3776}#) #{ids 3777}#))))
                      (let ((#{tmp 3787}#
                              ($sc-dispatch #{p 3775}# '(any any))))
                        (if (if #{tmp 3787}#
                              (@apply
                                (lambda (#{x 3790}# #{dots 3791}#)
                                  (if (if (if (vector? #{dots 3791}#)
                                            (if (= (vector-length
                                                     #{dots 3791}#)
                                                   4)
                                              (eq? (vector-ref #{dots 3791}# 0)
                                                   'syntax-object)
                                              #f)
                                            #f)
                                        (symbol? (vector-ref #{dots 3791}# 1))
                                        #f)
                                    (#{free-id=? 417}#
                                      #{dots 3791}#
                                      '#(syntax-object
                                         ...
                                         ((top)
                                          #(ribcage () () ())
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i2262"))
                                          #(ribcage
                                            (lambda-var-list
                                              gen-var
                                              strip
                                              chi-lambda-case
                                              lambda*-formals
                                              chi-simple-lambda
                                              lambda-formals
                                              ellipsis?
                                              chi-void
                                              eval-local-transformer
                                              chi-local-syntax
                                              chi-body
                                              chi-macro
                                              chi-call
                                              chi-expr
                                              chi
                                              syntax-type
                                              chi-when-list
                                              chi-install-global
                                              chi-top-sequence
                                              chi-sequence
                                              source-wrap
                                              wrap
                                              bound-id-member?
                                              distinct-bound-ids?
                                              valid-bound-ids?
                                              bound-id=?
                                              free-id=?
                                              id-var-name
                                              same-marks?
                                              join-marks
                                              join-wraps
                                              smart-append
                                              make-binding-wrap
                                              extend-ribcage!
                                              make-empty-ribcage
                                              new-mark
                                              anti-mark
                                              the-anti-mark
                                              top-marked?
                                              top-wrap
                                              empty-wrap
                                              set-ribcage-labels!
                                              set-ribcage-marks!
                                              set-ribcage-symnames!
                                              ribcage-labels
                                              ribcage-marks
                                              ribcage-symnames
                                              ribcage?
                                              make-ribcage
                                              gen-labels
                                              gen-label
                                              make-rename
                                              rename-marks
                                              rename-new
                                              rename-old
                                              subst-rename?
                                              wrap-subst
                                              wrap-marks
                                              make-wrap
                                              id-sym-name&marks
                                              id-sym-name
                                              id?
                                              nonsymbol-id?
                                              global-extend
                                              lookup
                                              macros-only-env
                                              extend-var-env
                                              extend-env
                                              null-env
                                              binding-value
                                              binding-type
                                              make-binding
                                              arg-check
                                              source-annotation
                                              no-source
                                              set-syntax-object-module!
                                              set-syntax-object-wrap!
                                              set-syntax-object-expression!
                                              syntax-object-module
                                              syntax-object-wrap
                                              syntax-object-expression
                                              syntax-object?
                                              make-syntax-object
                                              build-lexical-var
                                              build-letrec
                                              build-named-let
                                              build-let
                                              build-sequence
                                              build-data
                                              build-primref
                                              build-primcall
                                              build-lambda-case
                                              build-case-lambda
                                              build-simple-lambda
                                              build-global-definition
                                              build-global-assignment
                                              build-global-reference
                                              analyze-variable
                                              build-lexical-assignment
                                              build-lexical-reference
                                              build-dynlet
                                              build-conditional
                                              build-call
                                              build-void
                                              maybe-name-value!
                                              decorate-source
                                              get-global-definition-hook
                                              put-global-definition-hook
                                              gensym-hook
                                              local-eval-hook
                                              top-level-eval-hook
                                              fx<
                                              fx=
                                              fx-
                                              fx+
                                              set-lambda-meta!
                                              lambda-meta
                                              lambda?
                                              make-dynlet
                                              make-letrec
                                              make-let
                                              make-lambda-case
                                              make-lambda
                                              make-seq
                                              make-primcall
                                              make-call
                                              make-conditional
                                              make-toplevel-define
                                              make-toplevel-set
                                              make-toplevel-ref
                                              make-module-set
                                              make-module-ref
                                              make-lexical-set
                                              make-lexical-ref
                                              make-primitive-ref
                                              make-const
                                              make-void)
                                            ((top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top))
                                            ("i470"
                                             "i468"
                                             "i466"
                                             "i464"
                                             "i462"
                                             "i460"
                                             "i458"
                                             "i456"
                                             "i454"
                                             "i452"
                                             "i450"
                                             "i448"
                                             "i446"
                                             "i444"
                                             "i442"
                                             "i440"
                                             "i438"
                                             "i436"
                                             "i434"
                                             "i432"
                                             "i430"
                                             "i428"
                                             "i426"
                                             "i424"
                                             "i422"
                                             "i420"
                                             "i418"
                                             "i416"
                                             "i414"
                                             "i412"
                                             "i410"
                                             "i408"
                                             "i406"
                                             "i404"
                                             "i402"
                                             "i401"
                                             "i399"
                                             "i396"
                                             "i395"
                                             "i394"
                                             "i392"
                                             "i391"
                                             "i389"
                                             "i387"
                                             "i385"
                                             "i383"
                                             "i381"
                                             "i379"
                                             "i377"
                                             "i375"
                                             "i372"
                                             "i370"
                                             "i369"
                                             "i367"
                                             "i365"
                                             "i363"
                                             "i361"
                                             "i360"
                                             "i359"
                                             "i358"
                                             "i356"
                                             "i355"
                                             "i352"
                                             "i350"
                                             "i348"
                                             "i346"
                                             "i344"
                                             "i342"
                                             "i340"
                                             "i339"
                                             "i338"
                                             "i336"
                                             "i334"
                                             "i333"
                                             "i330"
                                             "i329"
                                             "i327"
                                             "i325"
                                             "i323"
                                             "i321"
                                             "i319"
                                             "i317"
                                             "i315"
                                             "i313"
                                             "i311"
                                             "i308"
                                             "i306"
                                             "i304"
                                             "i302"
                                             "i300"
                                             "i298"
                                             "i296"
                                             "i294"
                                             "i292"
                                             "i290"
                                             "i288"
                                             "i286"
                                             "i284"
                                             "i282"
                                             "i280"
                                             "i278"
                                             "i276"
                                             "i274"
                                             "i272"
                                             "i270"
                                             "i268"
                                             "i266"
                                             "i264"
                                             "i262"
                                             "i261"
                                             "i258"
                                             "i256"
                                             "i255"
                                             "i254"
                                             "i253"
                                             "i252"
                                             "i250"
                                             "i248"
                                             "i246"
                                             "i243"
                                             "i241"
                                             "i239"
                                             "i237"
                                             "i235"
                                             "i233"
                                             "i231"
                                             "i229"
                                             "i227"
                                             "i225"
                                             "i223"
                                             "i221"
                                             "i219"
                                             "i217"
                                             "i215"
                                             "i213"
                                             "i211"
                                             "i209"
                                             "i207"))
                                          #(ribcage
                                            (define-structure
                                              define-expansion-accessors
                                              define-expansion-constructors)
                                            ((top) (top) (top))
                                            ("i45" "i44" "i43")))
                                         (hygiene guile)))
                                    #f))
                                #{tmp 3787}#)
                              #f)
                          (@apply
                            (lambda (#{x 3794}# #{dots 3795}#)
                              (call-with-values
                                (lambda ()
                                  (#{cvt 3752}#
                                    #{x 3794}#
                                    (#{1+}# #{n 3776}#)
                                    #{ids 3777}#))
                                (lambda (#{p 3797}# #{ids 3798}#)
                                  (values
                                    (if (eq? #{p 3797}# 'any)
                                      'each-any
                                      (vector 'each #{p 3797}#))
                                    #{ids 3798}#))))
                            #{tmp 3787}#)
                          (let ((#{tmp 3801}#
                                  ($sc-dispatch #{p 3775}# '(any any . any))))
                            (if (if #{tmp 3801}#
                                  (@apply
                                    (lambda (#{x 3805}#
                                             #{dots 3806}#
                                             #{ys 3807}#)
                                      (if (if (if (vector? #{dots 3806}#)
                                                (if (= (vector-length
                                                         #{dots 3806}#)
                                                       4)
                                                  (eq? (vector-ref
                                                         #{dots 3806}#
                                                         0)
                                                       'syntax-object)
                                                  #f)
                                                #f)
                                            (symbol?
                                              (vector-ref #{dots 3806}# 1))
                                            #f)
                                        (#{free-id=? 417}#
                                          #{dots 3806}#
                                          '#(syntax-object
                                             ...
                                             ((top)
                                              #(ribcage () () ())
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(x)
                                                #((top))
                                                #("i2262"))
                                              #(ribcage
                                                (lambda-var-list
                                                  gen-var
                                                  strip
                                                  chi-lambda-case
                                                  lambda*-formals
                                                  chi-simple-lambda
                                                  lambda-formals
                                                  ellipsis?
                                                  chi-void
                                                  eval-local-transformer
                                                  chi-local-syntax
                                                  chi-body
                                                  chi-macro
                                                  chi-call
                                                  chi-expr
                                                  chi
                                                  syntax-type
                                                  chi-when-list
                                                  chi-install-global
                                                  chi-top-sequence
                                                  chi-sequence
                                                  source-wrap
                                                  wrap
                                                  bound-id-member?
                                                  distinct-bound-ids?
                                                  valid-bound-ids?
                                                  bound-id=?
                                                  free-id=?
                                                  id-var-name
                                                  same-marks?
                                                  join-marks
                                                  join-wraps
                                                  smart-append
                                                  make-binding-wrap
                                                  extend-ribcage!
                                                  make-empty-ribcage
                                                  new-mark
                                                  anti-mark
                                                  the-anti-mark
                                                  top-marked?
                                                  top-wrap
                                                  empty-wrap
                                                  set-ribcage-labels!
                                                  set-ribcage-marks!
                                                  set-ribcage-symnames!
                                                  ribcage-labels
                                                  ribcage-marks
                                                  ribcage-symnames
                                                  ribcage?
                                                  make-ribcage
                                                  gen-labels
                                                  gen-label
                                                  make-rename
                                                  rename-marks
                                                  rename-new
                                                  rename-old
                                                  subst-rename?
                                                  wrap-subst
                                                  wrap-marks
                                                  make-wrap
                                                  id-sym-name&marks
                                                  id-sym-name
                                                  id?
                                                  nonsymbol-id?
                                                  global-extend
                                                  lookup
                                                  macros-only-env
                                                  extend-var-env
                                                  extend-env
                                                  null-env
                                                  binding-value
                                                  binding-type
                                                  make-binding
                                                  arg-check
                                                  source-annotation
                                                  no-source
                                                  set-syntax-object-module!
                                                  set-syntax-object-wrap!
                                                  set-syntax-object-expression!
                                                  syntax-object-module
                                                  syntax-object-wrap
                                                  syntax-object-expression
                                                  syntax-object?
                                                  make-syntax-object
                                                  build-lexical-var
                                                  build-letrec
                                                  build-named-let
                                                  build-let
                                                  build-sequence
                                                  build-data
                                                  build-primref
                                                  build-primcall
                                                  build-lambda-case
                                                  build-case-lambda
                                                  build-simple-lambda
                                                  build-global-definition
                                                  build-global-assignment
                                                  build-global-reference
                                                  analyze-variable
                                                  build-lexical-assignment
                                                  build-lexical-reference
                                                  build-dynlet
                                                  build-conditional
                                                  build-call
                                                  build-void
                                                  maybe-name-value!
                                                  decorate-source
                                                  get-global-definition-hook
                                                  put-global-definition-hook
                                                  gensym-hook
                                                  local-eval-hook
                                                  top-level-eval-hook
                                                  fx<
                                                  fx=
                                                  fx-
                                                  fx+
                                                  set-lambda-meta!
                                                  lambda-meta
                                                  lambda?
                                                  make-dynlet
                                                  make-letrec
                                                  make-let
                                                  make-lambda-case
                                                  make-lambda
                                                  make-seq
                                                  make-primcall
                                                  make-call
                                                  make-conditional
                                                  make-toplevel-define
                                                  make-toplevel-set
                                                  make-toplevel-ref
                                                  make-module-set
                                                  make-module-ref
                                                  make-lexical-set
                                                  make-lexical-ref
                                                  make-primitive-ref
                                                  make-const
                                                  make-void)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("i470"
                                                 "i468"
                                                 "i466"
                                                 "i464"
                                                 "i462"
                                                 "i460"
                                                 "i458"
                                                 "i456"
                                                 "i454"
                                                 "i452"
                                                 "i450"
                                                 "i448"
                                                 "i446"
                                                 "i444"
                                                 "i442"
                                                 "i440"
                                                 "i438"
                                                 "i436"
                                                 "i434"
                                                 "i432"
                                                 "i430"
                                                 "i428"
                                                 "i426"
                                                 "i424"
                                                 "i422"
                                                 "i420"
                                                 "i418"
                                                 "i416"
                                                 "i414"
                                                 "i412"
                                                 "i410"
                                                 "i408"
                                                 "i406"
                                                 "i404"
                                                 "i402"
                                                 "i401"
                                                 "i399"
                                                 "i396"
                                                 "i395"
                                                 "i394"
                                                 "i392"
                                                 "i391"
                                                 "i389"
                                                 "i387"
                                                 "i385"
                                                 "i383"
                                                 "i381"
                                                 "i379"
                                                 "i377"
                                                 "i375"
                                                 "i372"
                                                 "i370"
                                                 "i369"
                                                 "i367"
                                                 "i365"
                                                 "i363"
                                                 "i361"
                                                 "i360"
                                                 "i359"
                                                 "i358"
                                                 "i356"
                                                 "i355"
                                                 "i352"
                                                 "i350"
                                                 "i348"
                                                 "i346"
                                                 "i344"
                                                 "i342"
                                                 "i340"
                                                 "i339"
                                                 "i338"
                                                 "i336"
                                                 "i334"
                                                 "i333"
                                                 "i330"
                                                 "i329"
                                                 "i327"
                                                 "i325"
                                                 "i323"
                                                 "i321"
                                                 "i319"
                                                 "i317"
                                                 "i315"
                                                 "i313"
                                                 "i311"
                                                 "i308"
                                                 "i306"
                                                 "i304"
                                                 "i302"
                                                 "i300"
                                                 "i298"
                                                 "i296"
                                                 "i294"
                                                 "i292"
                                                 "i290"
                                                 "i288"
                                                 "i286"
                                                 "i284"
                                                 "i282"
                                                 "i280"
                                                 "i278"
                                                 "i276"
                                                 "i274"
                                                 "i272"
                                                 "i270"
                                                 "i268"
                                                 "i266"
                                                 "i264"
                                                 "i262"
                                                 "i261"
                                                 "i258"
                                                 "i256"
                                                 "i255"
                                                 "i254"
                                                 "i253"
                                                 "i252"
                                                 "i250"
                                                 "i248"
                                                 "i246"
                                                 "i243"
                                                 "i241"
                                                 "i239"
                                                 "i237"
                                                 "i235"
                                                 "i233"
                                                 "i231"
                                                 "i229"
                                                 "i227"
                                                 "i225"
                                                 "i223"
                                                 "i221"
                                                 "i219"
                                                 "i217"
                                                 "i215"
                                                 "i213"
                                                 "i211"
                                                 "i209"
                                                 "i207"))
                                              #(ribcage
                                                (define-structure
                                                  define-expansion-accessors
                                                  define-expansion-constructors)
                                                ((top) (top) (top))
                                                ("i45" "i44" "i43")))
                                             (hygiene guile)))
                                        #f))
                                    #{tmp 3801}#)
                                  #f)
                              (@apply
                                (lambda (#{x 3811}# #{dots 3812}# #{ys 3813}#)
                                  (call-with-values
                                    (lambda ()
                                      (#{cvt* 3748}#
                                        #{ys 3813}#
                                        #{n 3776}#
                                        #{ids 3777}#))
                                    (lambda (#{ys 3814}# #{ids 3815}#)
                                      (call-with-values
                                        (lambda ()
                                          (#{cvt 3752}#
                                            #{x 3811}#
                                            (#{1+}# #{n 3776}#)
                                            #{ids 3815}#))
                                        (lambda (#{x 3818}# #{ids 3819}#)
                                          (call-with-values
                                            (lambda ()
                                              (#{v-reverse 3750}# #{ys 3814}#))
                                            (lambda (#{ys 3822}# #{e 3823}#)
                                              (values
                                                (vector
                                                  'each+
                                                  #{x 3818}#
                                                  #{ys 3822}#
                                                  #{e 3823}#)
                                                #{ids 3819}#))))))))
                                #{tmp 3801}#)
                              (let ((#{tmp 3827}#
                                      ($sc-dispatch #{p 3775}# '(any . any))))
                                (if #{tmp 3827}#
                                  (@apply
                                    (lambda (#{x 3830}# #{y 3831}#)
                                      (call-with-values
                                        (lambda ()
                                          (#{cvt 3752}#
                                            #{y 3831}#
                                            #{n 3776}#
                                            #{ids 3777}#))
                                        (lambda (#{y 3832}# #{ids 3833}#)
                                          (call-with-values
                                            (lambda ()
                                              (#{cvt 3752}#
                                                #{x 3830}#
                                                #{n 3776}#
                                                #{ids 3833}#))
                                            (lambda (#{x 3836}# #{ids 3837}#)
                                              (values
                                                (cons #{x 3836}# #{y 3832}#)
                                                #{ids 3837}#))))))
                                    #{tmp 3827}#)
                                  (let ((#{tmp 3840}#
                                          ($sc-dispatch #{p 3775}# '())))
                                    (if #{tmp 3840}#
                                      (@apply
                                        (lambda () (values '() #{ids 3777}#))
                                        #{tmp 3840}#)
                                      (let ((#{tmp 3841}#
                                              ($sc-dispatch
                                                #{p 3775}#
                                                '#(vector each-any))))
                                        (if #{tmp 3841}#
                                          (@apply
                                            (lambda (#{x 3843}#)
                                              (call-with-values
                                                (lambda ()
                                                  (#{cvt 3752}#
                                                    #{x 3843}#
                                                    #{n 3776}#
                                                    #{ids 3777}#))
                                                (lambda (#{p 3845}#
                                                         #{ids 3846}#)
                                                  (values
                                                    (vector 'vector #{p 3845}#)
                                                    #{ids 3846}#))))
                                            #{tmp 3841}#)
                                          (values
                                            (vector
                                              'atom
                                              (#{strip 467}# #{p 3775}# '(())))
                                            #{ids 3777}#)))))))))))))))
               (#{cvt 3752}# #{pattern 3743}# 0 '()))))
         (#{build-dispatch-call 3738}#
           (lambda (#{pvars 3852}#
                    #{exp 3853}#
                    #{y 3854}#
                    #{r 3855}#
                    #{mod 3856}#)
             (let ((#{ids 3864}# (map car #{pvars 3852}#)))
               (begin
                 (map cdr #{pvars 3852}#)
                 (let ((#{labels 3868}#
                         (#{gen-labels 373}# #{ids 3864}#))
                       (#{new-vars 3869}#
                         (map #{gen-var 469}# #{ids 3864}#)))
                   (#{build-primcall 297}#
                     #f
                     'apply
                     (list (#{build-simple-lambda 291}#
                             #f
                             (map syntax->datum #{ids 3864}#)
                             #f
                             #{new-vars 3869}#
                             '()
                             (#{chi 441}#
                               #{exp 3853}#
                               (#{extend-env 341}#
                                 #{labels 3868}#
                                 (map (lambda (#{var 3872}# #{level 3873}#)
                                        (cons 'syntax
                                              (cons #{var 3872}#
                                                    #{level 3873}#)))
                                      #{new-vars 3869}#
                                      (map cdr #{pvars 3852}#))
                                 #{r 3855}#)
                               (#{make-binding-wrap 405}#
                                 #{ids 3864}#
                                 #{labels 3868}#
                                 '(()))
                               #{mod 3856}#))
                           #{y 3854}#)))))))
         (#{gen-clause 3740}#
           (lambda (#{x 3879}#
                    #{keys 3880}#
                    #{clauses 3881}#
                    #{r 3882}#
                    #{pat 3883}#
                    #{fender 3884}#
                    #{exp 3885}#
                    #{mod 3886}#)
             (call-with-values
               (lambda ()
                 (#{convert-pattern 3736}#
                   #{pat 3883}#
                   #{keys 3880}#))
               (lambda (#{p 3895}# #{pvars 3896}#)
                 (if (not (#{distinct-bound-ids? 423}#
                            (map car #{pvars 3896}#)))
                   (syntax-violation
                     'syntax-case
                     "duplicate pattern variable"
                     #{pat 3883}#)
                   (if (not (and-map
                              (lambda (#{x 3903}#)
                                (not (let ((#{x 10293}# (car #{x 3903}#)))
                                       (if (if (if (vector? #{x 10293}#)
                                                 (if (= (vector-length
                                                          #{x 10293}#)
                                                        4)
                                                   (eq? (vector-ref
                                                          #{x 10293}#
                                                          0)
                                                        'syntax-object)
                                                   #f)
                                                 #f)
                                             (symbol?
                                               (vector-ref #{x 10293}# 1))
                                             #f)
                                         (#{free-id=? 417}#
                                           #{x 10293}#
                                           '#(syntax-object
                                              ...
                                              ((top)
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x)
                                                 #((top))
                                                 #("i2262"))
                                               #(ribcage
                                                 (lambda-var-list
                                                   gen-var
                                                   strip
                                                   chi-lambda-case
                                                   lambda*-formals
                                                   chi-simple-lambda
                                                   lambda-formals
                                                   ellipsis?
                                                   chi-void
                                                   eval-local-transformer
                                                   chi-local-syntax
                                                   chi-body
                                                   chi-macro
                                                   chi-call
                                                   chi-expr
                                                   chi
                                                   syntax-type
                                                   chi-when-list
                                                   chi-install-global
                                                   chi-top-sequence
                                                   chi-sequence
                                                   source-wrap
                                                   wrap
                                                   bound-id-member?
                                                   distinct-bound-ids?
                                                   valid-bound-ids?
                                                   bound-id=?
                                                   free-id=?
                                                   id-var-name
                                                   same-marks?
                                                   join-marks
                                                   join-wraps
                                                   smart-append
                                                   make-binding-wrap
                                                   extend-ribcage!
                                                   make-empty-ribcage
                                                   new-mark
                                                   anti-mark
                                                   the-anti-mark
                                                   top-marked?
                                                   top-wrap
                                                   empty-wrap
                                                   set-ribcage-labels!
                                                   set-ribcage-marks!
                                                   set-ribcage-symnames!
                                                   ribcage-labels
                                                   ribcage-marks
                                                   ribcage-symnames
                                                   ribcage?
                                                   make-ribcage
                                                   gen-labels
                                                   gen-label
                                                   make-rename
                                                   rename-marks
                                                   rename-new
                                                   rename-old
                                                   subst-rename?
                                                   wrap-subst
                                                   wrap-marks
                                                   make-wrap
                                                   id-sym-name&marks
                                                   id-sym-name
                                                   id?
                                                   nonsymbol-id?
                                                   global-extend
                                                   lookup
                                                   macros-only-env
                                                   extend-var-env
                                                   extend-env
                                                   null-env
                                                   binding-value
                                                   binding-type
                                                   make-binding
                                                   arg-check
                                                   source-annotation
                                                   no-source
                                                   set-syntax-object-module!
                                                   set-syntax-object-wrap!
                                                   set-syntax-object-expression!
                                                   syntax-object-module
                                                   syntax-object-wrap
                                                   syntax-object-expression
                                                   syntax-object?
                                                   make-syntax-object
                                                   build-lexical-var
                                                   build-letrec
                                                   build-named-let
                                                   build-let
                                                   build-sequence
                                                   build-data
                                                   build-primref
                                                   build-primcall
                                                   build-lambda-case
                                                   build-case-lambda
                                                   build-simple-lambda
                                                   build-global-definition
                                                   build-global-assignment
                                                   build-global-reference
                                                   analyze-variable
                                                   build-lexical-assignment
                                                   build-lexical-reference
                                                   build-dynlet
                                                   build-conditional
                                                   build-call
                                                   build-void
                                                   maybe-name-value!
                                                   decorate-source
                                                   get-global-definition-hook
                                                   put-global-definition-hook
                                                   gensym-hook
                                                   local-eval-hook
                                                   top-level-eval-hook
                                                   fx<
                                                   fx=
                                                   fx-
                                                   fx+
                                                   set-lambda-meta!
                                                   lambda-meta
                                                   lambda?
                                                   make-dynlet
                                                   make-letrec
                                                   make-let
                                                   make-lambda-case
                                                   make-lambda
                                                   make-seq
                                                   make-primcall
                                                   make-call
                                                   make-conditional
                                                   make-toplevel-define
                                                   make-toplevel-set
                                                   make-toplevel-ref
                                                   make-module-set
                                                   make-module-ref
                                                   make-lexical-set
                                                   make-lexical-ref
                                                   make-primitive-ref
                                                   make-const
                                                   make-void)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("i470"
                                                  "i468"
                                                  "i466"
                                                  "i464"
                                                  "i462"
                                                  "i460"
                                                  "i458"
                                                  "i456"
                                                  "i454"
                                                  "i452"
                                                  "i450"
                                                  "i448"
                                                  "i446"
                                                  "i444"
                                                  "i442"
                                                  "i440"
                                                  "i438"
                                                  "i436"
                                                  "i434"
                                                  "i432"
                                                  "i430"
                                                  "i428"
                                                  "i426"
                                                  "i424"
                                                  "i422"
                                                  "i420"
                                                  "i418"
                                                  "i416"
                                                  "i414"
                                                  "i412"
                                                  "i410"
                                                  "i408"
                                                  "i406"
                                                  "i404"
                                                  "i402"
                                                  "i401"
                                                  "i399"
                                                  "i396"
                                                  "i395"
                                                  "i394"
                                                  "i392"
                                                  "i391"
                                                  "i389"
                                                  "i387"
                                                  "i385"
                                                  "i383"
                                                  "i381"
                                                  "i379"
                                                  "i377"
                                                  "i375"
                                                  "i372"
                                                  "i370"
                                                  "i369"
                                                  "i367"
                                                  "i365"
                                                  "i363"
                                                  "i361"
                                                  "i360"
                                                  "i359"
                                                  "i358"
                                                  "i356"
                                                  "i355"
                                                  "i352"
                                                  "i350"
                                                  "i348"
                                                  "i346"
                                                  "i344"
                                                  "i342"
                                                  "i340"
                                                  "i339"
                                                  "i338"
                                                  "i336"
                                                  "i334"
                                                  "i333"
                                                  "i330"
                                                  "i329"
                                                  "i327"
                                                  "i325"
                                                  "i323"
                                                  "i321"
                                                  "i319"
                                                  "i317"
                                                  "i315"
                                                  "i313"
                                                  "i311"
                                                  "i308"
                                                  "i306"
                                                  "i304"
                                                  "i302"
                                                  "i300"
                                                  "i298"
                                                  "i296"
                                                  "i294"
                                                  "i292"
                                                  "i290"
                                                  "i288"
                                                  "i286"
                                                  "i284"
                                                  "i282"
                                                  "i280"
                                                  "i278"
                                                  "i276"
                                                  "i274"
                                                  "i272"
                                                  "i270"
                                                  "i268"
                                                  "i266"
                                                  "i264"
                                                  "i262"
                                                  "i261"
                                                  "i258"
                                                  "i256"
                                                  "i255"
                                                  "i254"
                                                  "i253"
                                                  "i252"
                                                  "i250"
                                                  "i248"
                                                  "i246"
                                                  "i243"
                                                  "i241"
                                                  "i239"
                                                  "i237"
                                                  "i235"
                                                  "i233"
                                                  "i231"
                                                  "i229"
                                                  "i227"
                                                  "i225"
                                                  "i223"
                                                  "i221"
                                                  "i219"
                                                  "i217"
                                                  "i215"
                                                  "i213"
                                                  "i211"
                                                  "i209"
                                                  "i207"))
                                               #(ribcage
                                                 (define-structure
                                                   define-expansion-accessors
                                                   define-expansion-constructors)
                                                 ((top) (top) (top))
                                                 ("i45" "i44" "i43")))
                                              (hygiene guile)))
                                         #f))))
                              #{pvars 3896}#))
                     (syntax-violation
                       'syntax-case
                       "misplaced ellipsis"
                       #{pat 3883}#)
                     (let ((#{y 3907}#
                             (gensym
                               (string-append (symbol->string 'tmp) " "))))
                       (let ((#{fun-exp 10315}#
                               (let ((#{req 10320}# (list 'tmp))
                                     (#{vars 10322}# (list #{y 3907}#))
                                     (#{exp 10324}#
                                       (let ((#{y 3911}#
                                               (make-struct/no-tail
                                                 (vector-ref
                                                   %expanded-vtables
                                                   3)
                                                 #f
                                                 'tmp
                                                 #{y 3907}#)))
                                         (let ((#{test-exp 10339}#
                                                 (let ((#{tmp 3915}#
                                                         ($sc-dispatch
                                                           #{fender 3884}#
                                                           '#(atom #t))))
                                                   (if #{tmp 3915}#
                                                     (@apply
                                                       (lambda () #{y 3911}#)
                                                       #{tmp 3915}#)
                                                     (let ((#{then-exp 10346}#
                                                             (#{build-dispatch-call 3738}#
                                                               #{pvars 3896}#
                                                               #{fender 3884}#
                                                               #{y 3911}#
                                                               #{r 3882}#
                                                               #{mod 3886}#))
                                                           (#{else-exp 10347}#
                                                             (make-struct/no-tail
                                                               (vector-ref
                                                                 %expanded-vtables
                                                                 1)
                                                               #f
                                                               #f)))
                                                       (make-struct/no-tail
                                                         (vector-ref
                                                           %expanded-vtables
                                                           10)
                                                         #f
                                                         #{y 3911}#
                                                         #{then-exp 10346}#
                                                         #{else-exp 10347}#)))))
                                               (#{then-exp 10340}#
                                                 (#{build-dispatch-call 3738}#
                                                   #{pvars 3896}#
                                                   #{exp 3885}#
                                                   #{y 3911}#
                                                   #{r 3882}#
                                                   #{mod 3886}#))
                                               (#{else-exp 10341}#
                                                 (#{gen-syntax-case 3742}#
                                                   #{x 3879}#
                                                   #{keys 3880}#
                                                   #{clauses 3881}#
                                                   #{r 3882}#
                                                   #{mod 3886}#)))
                                           (make-struct/no-tail
                                             (vector-ref %expanded-vtables 10)
                                             #f
                                             #{test-exp 10339}#
                                             #{then-exp 10340}#
                                             #{else-exp 10341}#)))))
                                 (let ((#{body 10372}#
                                         (make-struct/no-tail
                                           (vector-ref %expanded-vtables 15)
                                           #f
                                           #{req 10320}#
                                           #f
                                           #f
                                           #f
                                           '()
                                           #{vars 10322}#
                                           #{exp 10324}#
                                           #f)))
                                   (make-struct/no-tail
                                     (vector-ref %expanded-vtables 14)
                                     #f
                                     '()
                                     #{body 10372}#))))
                             (#{arg-exps 10316}#
                               (list (if (eq? #{p 3895}# 'any)
                                       (let ((#{args 10388}#
                                               (list #{x 3879}#)))
                                         (make-struct/no-tail
                                           (vector-ref %expanded-vtables 12)
                                           #f
                                           'list
                                           #{args 10388}#))
                                       (let ((#{args 10398}#
                                               (list #{x 3879}#
                                                     (make-struct/no-tail
                                                       (vector-ref
                                                         %expanded-vtables
                                                         1)
                                                       #f
                                                       #{p 3895}#))))
                                         (make-struct/no-tail
                                           (vector-ref %expanded-vtables 12)
                                           #f
                                           '$sc-dispatch
                                           #{args 10398}#))))))
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 11)
                           #f
                           #{fun-exp 10315}#
                           #{arg-exps 10316}#)))))))))
         (#{gen-syntax-case 3742}#
           (lambda (#{x 3923}#
                    #{keys 3924}#
                    #{clauses 3925}#
                    #{r 3926}#
                    #{mod 3927}#)
             (if (null? #{clauses 3925}#)
               (let ((#{args 10421}#
                       (list (make-struct/no-tail
                               (vector-ref %expanded-vtables 1)
                               #f
                               #f)
                             (make-struct/no-tail
                               (vector-ref %expanded-vtables 1)
                               #f
                               "source expression failed to match any pattern")
                             #{x 3923}#)))
                 (make-struct/no-tail
                   (vector-ref %expanded-vtables 12)
                   #f
                   'syntax-violation
                   #{args 10421}#))
               (let ((#{tmp 3936}# (car #{clauses 3925}#)))
                 (let ((#{tmp 3937}#
                         ($sc-dispatch #{tmp 3936}# '(any any))))
                   (if #{tmp 3937}#
                     (@apply
                       (lambda (#{pat 3940}# #{exp 3941}#)
                         (if (if (if (symbol? #{pat 3940}#)
                                   #t
                                   (if (if (vector? #{pat 3940}#)
                                         (if (= (vector-length #{pat 3940}#) 4)
                                           (eq? (vector-ref #{pat 3940}# 0)
                                                'syntax-object)
                                           #f)
                                         #f)
                                     (symbol? (vector-ref #{pat 3940}# 1))
                                     #f))
                               (and-map
                                 (lambda (#{x 3944}#)
                                   (not (#{free-id=? 417}#
                                          #{pat 3940}#
                                          #{x 3944}#)))
                                 (cons '#(syntax-object
                                          ...
                                          ((top)
                                           #(ribcage
                                             #(pat exp)
                                             #((top) (top))
                                             #("i3938" "i3939"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x keys clauses r mod)
                                             #((top) (top) (top) (top) (top))
                                             #("i3928"
                                               "i3929"
                                               "i3930"
                                               "i3931"
                                               "i3932"))
                                           #(ribcage
                                             (gen-syntax-case
                                               gen-clause
                                               build-dispatch-call
                                               convert-pattern)
                                             ((top) (top) (top) (top))
                                             ("i3741" "i3739" "i3737" "i3735"))
                                           #(ribcage
                                             (lambda-var-list
                                               gen-var
                                               strip
                                               chi-lambda-case
                                               lambda*-formals
                                               chi-simple-lambda
                                               lambda-formals
                                               ellipsis?
                                               chi-void
                                               eval-local-transformer
                                               chi-local-syntax
                                               chi-body
                                               chi-macro
                                               chi-call
                                               chi-expr
                                               chi
                                               syntax-type
                                               chi-when-list
                                               chi-install-global
                                               chi-top-sequence
                                               chi-sequence
                                               source-wrap
                                               wrap
                                               bound-id-member?
                                               distinct-bound-ids?
                                               valid-bound-ids?
                                               bound-id=?
                                               free-id=?
                                               id-var-name
                                               same-marks?
                                               join-marks
                                               join-wraps
                                               smart-append
                                               make-binding-wrap
                                               extend-ribcage!
                                               make-empty-ribcage
                                               new-mark
                                               anti-mark
                                               the-anti-mark
                                               top-marked?
                                               top-wrap
                                               empty-wrap
                                               set-ribcage-labels!
                                               set-ribcage-marks!
                                               set-ribcage-symnames!
                                               ribcage-labels
                                               ribcage-marks
                                               ribcage-symnames
                                               ribcage?
                                               make-ribcage
                                               gen-labels
                                               gen-label
                                               make-rename
                                               rename-marks
                                               rename-new
                                               rename-old
                                               subst-rename?
                                               wrap-subst
                                               wrap-marks
                                               make-wrap
                                               id-sym-name&marks
                                               id-sym-name
                                               id?
                                               nonsymbol-id?
                                               global-extend
                                               lookup
                                               macros-only-env
                                               extend-var-env
                                               extend-env
                                               null-env
                                               binding-value
                                               binding-type
                                               make-binding
                                               arg-check
                                               source-annotation
                                               no-source
                                               set-syntax-object-module!
                                               set-syntax-object-wrap!
                                               set-syntax-object-expression!
                                               syntax-object-module
                                               syntax-object-wrap
                                               syntax-object-expression
                                               syntax-object?
                                               make-syntax-object
                                               build-lexical-var
                                               build-letrec
                                               build-named-let
                                               build-let
                                               build-sequence
                                               build-data
                                               build-primref
                                               build-primcall
                                               build-lambda-case
                                               build-case-lambda
                                               build-simple-lambda
                                               build-global-definition
                                               build-global-assignment
                                               build-global-reference
                                               analyze-variable
                                               build-lexical-assignment
                                               build-lexical-reference
                                               build-dynlet
                                               build-conditional
                                               build-call
                                               build-void
                                               maybe-name-value!
                                               decorate-source
                                               get-global-definition-hook
                                               put-global-definition-hook
                                               gensym-hook
                                               local-eval-hook
                                               top-level-eval-hook
                                               fx<
                                               fx=
                                               fx-
                                               fx+
                                               set-lambda-meta!
                                               lambda-meta
                                               lambda?
                                               make-dynlet
                                               make-letrec
                                               make-let
                                               make-lambda-case
                                               make-lambda
                                               make-seq
                                               make-primcall
                                               make-call
                                               make-conditional
                                               make-toplevel-define
                                               make-toplevel-set
                                               make-toplevel-ref
                                               make-module-set
                                               make-module-ref
                                               make-lexical-set
                                               make-lexical-ref
                                               make-primitive-ref
                                               make-const
                                               make-void)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("i470"
                                              "i468"
                                              "i466"
                                              "i464"
                                              "i462"
                                              "i460"
                                              "i458"
                                              "i456"
                                              "i454"
                                              "i452"
                                              "i450"
                                              "i448"
                                              "i446"
                                              "i444"
                                              "i442"
                                              "i440"
                                              "i438"
                                              "i436"
                                              "i434"
                                              "i432"
                                              "i430"
                                              "i428"
                                              "i426"
                                              "i424"
                                              "i422"
                                              "i420"
                                              "i418"
                                              "i416"
                                              "i414"
                                              "i412"
                                              "i410"
                                              "i408"
                                              "i406"
                                              "i404"
                                              "i402"
                                              "i401"
                                              "i399"
                                              "i396"
                                              "i395"
                                              "i394"
                                              "i392"
                                              "i391"
                                              "i389"
                                              "i387"
                                              "i385"
                                              "i383"
                                              "i381"
                                              "i379"
                                              "i377"
                                              "i375"
                                              "i372"
                                              "i370"
                                              "i369"
                                              "i367"
                                              "i365"
                                              "i363"
                                              "i361"
                                              "i360"
                                              "i359"
                                              "i358"
                                              "i356"
                                              "i355"
                                              "i352"
                                              "i350"
                                              "i348"
                                              "i346"
                                              "i344"
                                              "i342"
                                              "i340"
                                              "i339"
                                              "i338"
                                              "i336"
                                              "i334"
                                              "i333"
                                              "i330"
                                              "i329"
                                              "i327"
                                              "i325"
                                              "i323"
                                              "i321"
                                              "i319"
                                              "i317"
                                              "i315"
                                              "i313"
                                              "i311"
                                              "i308"
                                              "i306"
                                              "i304"
                                              "i302"
                                              "i300"
                                              "i298"
                                              "i296"
                                              "i294"
                                              "i292"
                                              "i290"
                                              "i288"
                                              "i286"
                                              "i284"
                                              "i282"
                                              "i280"
                                              "i278"
                                              "i276"
                                              "i274"
                                              "i272"
                                              "i270"
                                              "i268"
                                              "i266"
                                              "i264"
                                              "i262"
                                              "i261"
                                              "i258"
                                              "i256"
                                              "i255"
                                              "i254"
                                              "i253"
                                              "i252"
                                              "i250"
                                              "i248"
                                              "i246"
                                              "i243"
                                              "i241"
                                              "i239"
                                              "i237"
                                              "i235"
                                              "i233"
                                              "i231"
                                              "i229"
                                              "i227"
                                              "i225"
                                              "i223"
                                              "i221"
                                              "i219"
                                              "i217"
                                              "i215"
                                              "i213"
                                              "i211"
                                              "i209"
                                              "i207"))
                                           #(ribcage
                                             (define-structure
                                               define-expansion-accessors
                                               define-expansion-constructors)
                                             ((top) (top) (top))
                                             ("i45" "i44" "i43")))
                                          (hygiene guile))
                                       #{keys 3924}#))
                               #f)
                           (if (#{free-id=? 417}#
                                 '#(syntax-object
                                    pad
                                    ((top)
                                     #(ribcage
                                       #(pat exp)
                                       #((top) (top))
                                       #("i3938" "i3939"))
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(x keys clauses r mod)
                                       #((top) (top) (top) (top) (top))
                                       #("i3928"
                                         "i3929"
                                         "i3930"
                                         "i3931"
                                         "i3932"))
                                     #(ribcage
                                       (gen-syntax-case
                                         gen-clause
                                         build-dispatch-call
                                         convert-pattern)
                                       ((top) (top) (top) (top))
                                       ("i3741" "i3739" "i3737" "i3735"))
                                     #(ribcage
                                       (lambda-var-list
                                         gen-var
                                         strip
                                         chi-lambda-case
                                         lambda*-formals
                                         chi-simple-lambda
                                         lambda-formals
                                         ellipsis?
                                         chi-void
                                         eval-local-transformer
                                         chi-local-syntax
                                         chi-body
                                         chi-macro
                                         chi-call
                                         chi-expr
                                         chi
                                         syntax-type
                                         chi-when-list
                                         chi-install-global
                                         chi-top-sequence
                                         chi-sequence
                                         source-wrap
                                         wrap
                                         bound-id-member?
                                         distinct-bound-ids?
                                         valid-bound-ids?
                                         bound-id=?
                                         free-id=?
                                         id-var-name
                                         same-marks?
                                         join-marks
                                         join-wraps
                                         smart-append
                                         make-binding-wrap
                                         extend-ribcage!
                                         make-empty-ribcage
                                         new-mark
                                         anti-mark
                                         the-anti-mark
                                         top-marked?
                                         top-wrap
                                         empty-wrap
                                         set-ribcage-labels!
                                         set-ribcage-marks!
                                         set-ribcage-symnames!
                                         ribcage-labels
                                         ribcage-marks
                                         ribcage-symnames
                                         ribcage?
                                         make-ribcage
                                         gen-labels
                                         gen-label
                                         make-rename
                                         rename-marks
                                         rename-new
                                         rename-old
                                         subst-rename?
                                         wrap-subst
                                         wrap-marks
                                         make-wrap
                                         id-sym-name&marks
                                         id-sym-name
                                         id?
                                         nonsymbol-id?
                                         global-extend
                                         lookup
                                         macros-only-env
                                         extend-var-env
                                         extend-env
                                         null-env
                                         binding-value
                                         binding-type
                                         make-binding
                                         arg-check
                                         source-annotation
                                         no-source
                                         set-syntax-object-module!
                                         set-syntax-object-wrap!
                                         set-syntax-object-expression!
                                         syntax-object-module
                                         syntax-object-wrap
                                         syntax-object-expression
                                         syntax-object?
                                         make-syntax-object
                                         build-lexical-var
                                         build-letrec
                                         build-named-let
                                         build-let
                                         build-sequence
                                         build-data
                                         build-primref
                                         build-primcall
                                         build-lambda-case
                                         build-case-lambda
                                         build-simple-lambda
                                         build-global-definition
                                         build-global-assignment
                                         build-global-reference
                                         analyze-variable
                                         build-lexical-assignment
                                         build-lexical-reference
                                         build-dynlet
                                         build-conditional
                                         build-call
                                         build-void
                                         maybe-name-value!
                                         decorate-source
                                         get-global-definition-hook
                                         put-global-definition-hook
                                         gensym-hook
                                         local-eval-hook
                                         top-level-eval-hook
                                         fx<
                                         fx=
                                         fx-
                                         fx+
                                         set-lambda-meta!
                                         lambda-meta
                                         lambda?
                                         make-dynlet
                                         make-letrec
                                         make-let
                                         make-lambda-case
                                         make-lambda
                                         make-seq
                                         make-primcall
                                         make-call
                                         make-conditional
                                         make-toplevel-define
                                         make-toplevel-set
                                         make-toplevel-ref
                                         make-module-set
                                         make-module-ref
                                         make-lexical-set
                                         make-lexical-ref
                                         make-primitive-ref
                                         make-const
                                         make-void)
                                       ((top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top))
                                       ("i470"
                                        "i468"
                                        "i466"
                                        "i464"
                                        "i462"
                                        "i460"
                                        "i458"
                                        "i456"
                                        "i454"
                                        "i452"
                                        "i450"
                                        "i448"
                                        "i446"
                                        "i444"
                                        "i442"
                                        "i440"
                                        "i438"
                                        "i436"
                                        "i434"
                                        "i432"
                                        "i430"
                                        "i428"
                                        "i426"
                                        "i424"
                                        "i422"
                                        "i420"
                                        "i418"
                                        "i416"
                                        "i414"
                                        "i412"
                                        "i410"
                                        "i408"
                                        "i406"
                                        "i404"
                                        "i402"
                                        "i401"
                                        "i399"
                                        "i396"
                                        "i395"
                                        "i394"
                                        "i392"
                                        "i391"
                                        "i389"
                                        "i387"
                                        "i385"
                                        "i383"
                                        "i381"
                                        "i379"
                                        "i377"
                                        "i375"
                                        "i372"
                                        "i370"
                                        "i369"
                                        "i367"
                                        "i365"
                                        "i363"
                                        "i361"
                                        "i360"
                                        "i359"
                                        "i358"
                                        "i356"
                                        "i355"
                                        "i352"
                                        "i350"
                                        "i348"
                                        "i346"
                                        "i344"
                                        "i342"
                                        "i340"
                                        "i339"
                                        "i338"
                                        "i336"
                                        "i334"
                                        "i333"
                                        "i330"
                                        "i329"
                                        "i327"
                                        "i325"
                                        "i323"
                                        "i321"
                                        "i319"
                                        "i317"
                                        "i315"
                                        "i313"
                                        "i311"
                                        "i308"
                                        "i306"
                                        "i304"
                                        "i302"
                                        "i300"
                                        "i298"
                                        "i296"
                                        "i294"
                                        "i292"
                                        "i290"
                                        "i288"
                                        "i286"
                                        "i284"
                                        "i282"
                                        "i280"
                                        "i278"
                                        "i276"
                                        "i274"
                                        "i272"
                                        "i270"
                                        "i268"
                                        "i266"
                                        "i264"
                                        "i262"
                                        "i261"
                                        "i258"
                                        "i256"
                                        "i255"
                                        "i254"
                                        "i253"
                                        "i252"
                                        "i250"
                                        "i248"
                                        "i246"
                                        "i243"
                                        "i241"
                                        "i239"
                                        "i237"
                                        "i235"
                                        "i233"
                                        "i231"
                                        "i229"
                                        "i227"
                                        "i225"
                                        "i223"
                                        "i221"
                                        "i219"
                                        "i217"
                                        "i215"
                                        "i213"
                                        "i211"
                                        "i209"
                                        "i207"))
                                     #(ribcage
                                       (define-structure
                                         define-expansion-accessors
                                         define-expansion-constructors)
                                       ((top) (top) (top))
                                       ("i45" "i44" "i43")))
                                    (hygiene guile))
                                 '#(syntax-object
                                    _
                                    ((top)
                                     #(ribcage
                                       #(pat exp)
                                       #((top) (top))
                                       #("i3938" "i3939"))
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(x keys clauses r mod)
                                       #((top) (top) (top) (top) (top))
                                       #("i3928"
                                         "i3929"
                                         "i3930"
                                         "i3931"
                                         "i3932"))
                                     #(ribcage
                                       (gen-syntax-case
                                         gen-clause
                                         build-dispatch-call
                                         convert-pattern)
                                       ((top) (top) (top) (top))
                                       ("i3741" "i3739" "i3737" "i3735"))
                                     #(ribcage
                                       (lambda-var-list
                                         gen-var
                                         strip
                                         chi-lambda-case
                                         lambda*-formals
                                         chi-simple-lambda
                                         lambda-formals
                                         ellipsis?
                                         chi-void
                                         eval-local-transformer
                                         chi-local-syntax
                                         chi-body
                                         chi-macro
                                         chi-call
                                         chi-expr
                                         chi
                                         syntax-type
                                         chi-when-list
                                         chi-install-global
                                         chi-top-sequence
                                         chi-sequence
                                         source-wrap
                                         wrap
                                         bound-id-member?
                                         distinct-bound-ids?
                                         valid-bound-ids?
                                         bound-id=?
                                         free-id=?
                                         id-var-name
                                         same-marks?
                                         join-marks
                                         join-wraps
                                         smart-append
                                         make-binding-wrap
                                         extend-ribcage!
                                         make-empty-ribcage
                                         new-mark
                                         anti-mark
                                         the-anti-mark
                                         top-marked?
                                         top-wrap
                                         empty-wrap
                                         set-ribcage-labels!
                                         set-ribcage-marks!
                                         set-ribcage-symnames!
                                         ribcage-labels
                                         ribcage-marks
                                         ribcage-symnames
                                         ribcage?
                                         make-ribcage
                                         gen-labels
                                         gen-label
                                         make-rename
                                         rename-marks
                                         rename-new
                                         rename-old
                                         subst-rename?
                                         wrap-subst
                                         wrap-marks
                                         make-wrap
                                         id-sym-name&marks
                                         id-sym-name
                                         id?
                                         nonsymbol-id?
                                         global-extend
                                         lookup
                                         macros-only-env
                                         extend-var-env
                                         extend-env
                                         null-env
                                         binding-value
                                         binding-type
                                         make-binding
                                         arg-check
                                         source-annotation
                                         no-source
                                         set-syntax-object-module!
                                         set-syntax-object-wrap!
                                         set-syntax-object-expression!
                                         syntax-object-module
                                         syntax-object-wrap
                                         syntax-object-expression
                                         syntax-object?
                                         make-syntax-object
                                         build-lexical-var
                                         build-letrec
                                         build-named-let
                                         build-let
                                         build-sequence
                                         build-data
                                         build-primref
                                         build-primcall
                                         build-lambda-case
                                         build-case-lambda
                                         build-simple-lambda
                                         build-global-definition
                                         build-global-assignment
                                         build-global-reference
                                         analyze-variable
                                         build-lexical-assignment
                                         build-lexical-reference
                                         build-dynlet
                                         build-conditional
                                         build-call
                                         build-void
                                         maybe-name-value!
                                         decorate-source
                                         get-global-definition-hook
                                         put-global-definition-hook
                                         gensym-hook
                                         local-eval-hook
                                         top-level-eval-hook
                                         fx<
                                         fx=
                                         fx-
                                         fx+
                                         set-lambda-meta!
                                         lambda-meta
                                         lambda?
                                         make-dynlet
                                         make-letrec
                                         make-let
                                         make-lambda-case
                                         make-lambda
                                         make-seq
                                         make-primcall
                                         make-call
                                         make-conditional
                                         make-toplevel-define
                                         make-toplevel-set
                                         make-toplevel-ref
                                         make-module-set
                                         make-module-ref
                                         make-lexical-set
                                         make-lexical-ref
                                         make-primitive-ref
                                         make-const
                                         make-void)
                                       ((top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top))
                                       ("i470"
                                        "i468"
                                        "i466"
                                        "i464"
                                        "i462"
                                        "i460"
                                        "i458"
                                        "i456"
                                        "i454"
                                        "i452"
                                        "i450"
                                        "i448"
                                        "i446"
                                        "i444"
                                        "i442"
                                        "i440"
                                        "i438"
                                        "i436"
                                        "i434"
                                        "i432"
                                        "i430"
                                        "i428"
                                        "i426"
                                        "i424"
                                        "i422"
                                        "i420"
                                        "i418"
                                        "i416"
                                        "i414"
                                        "i412"
                                        "i410"
                                        "i408"
                                        "i406"
                                        "i404"
                                        "i402"
                                        "i401"
                                        "i399"
                                        "i396"
                                        "i395"
                                        "i394"
                                        "i392"
                                        "i391"
                                        "i389"
                                        "i387"
                                        "i385"
                                        "i383"
                                        "i381"
                                        "i379"
                                        "i377"
                                        "i375"
                                        "i372"
                                        "i370"
                                        "i369"
                                        "i367"
                                        "i365"
                                        "i363"
                                        "i361"
                                        "i360"
                                        "i359"
                                        "i358"
                                        "i356"
                                        "i355"
                                        "i352"
                                        "i350"
                                        "i348"
                                        "i346"
                                        "i344"
                                        "i342"
                                        "i340"
                                        "i339"
                                        "i338"
                                        "i336"
                                        "i334"
                                        "i333"
                                        "i330"
                                        "i329"
                                        "i327"
                                        "i325"
                                        "i323"
                                        "i321"
                                        "i319"
                                        "i317"
                                        "i315"
                                        "i313"
                                        "i311"
                                        "i308"
                                        "i306"
                                        "i304"
                                        "i302"
                                        "i300"
                                        "i298"
                                        "i296"
                                        "i294"
                                        "i292"
                                        "i290"
                                        "i288"
                                        "i286"
                                        "i284"
                                        "i282"
                                        "i280"
                                        "i278"
                                        "i276"
                                        "i274"
                                        "i272"
                                        "i270"
                                        "i268"
                                        "i266"
                                        "i264"
                                        "i262"
                                        "i261"
                                        "i258"
                                        "i256"
                                        "i255"
                                        "i254"
                                        "i253"
                                        "i252"
                                        "i250"
                                        "i248"
                                        "i246"
                                        "i243"
                                        "i241"
                                        "i239"
                                        "i237"
                                        "i235"
                                        "i233"
                                        "i231"
                                        "i229"
                                        "i227"
                                        "i225"
                                        "i223"
                                        "i221"
                                        "i219"
                                        "i217"
                                        "i215"
                                        "i213"
                                        "i211"
                                        "i209"
                                        "i207"))
                                     #(ribcage
                                       (define-structure
                                         define-expansion-accessors
                                         define-expansion-constructors)
                                       ((top) (top) (top))
                                       ("i45" "i44" "i43")))
                                    (hygiene guile)))
                             (#{chi 441}#
                               #{exp 3941}#
                               #{r 3926}#
                               '(())
                               #{mod 3927}#)
                             (let ((#{labels 3949}#
                                     (list (symbol->string (gensym "i"))))
                                   (#{var 3950}#
                                     (let ((#{id 10508}#
                                             (if (if (vector? #{pat 3940}#)
                                                   (if (= (vector-length
                                                            #{pat 3940}#)
                                                          4)
                                                     (eq? (vector-ref
                                                            #{pat 3940}#
                                                            0)
                                                          'syntax-object)
                                                     #f)
                                                   #f)
                                               (vector-ref #{pat 3940}# 1)
                                               #{pat 3940}#)))
                                       (gensym
                                         (string-append
                                           (symbol->string #{id 10508}#)
                                           " ")))))
                               (#{build-call 273}#
                                 #f
                                 (#{build-simple-lambda 291}#
                                   #f
                                   (list (syntax->datum #{pat 3940}#))
                                   #f
                                   (list #{var 3950}#)
                                   '()
                                   (#{chi 441}#
                                     #{exp 3941}#
                                     (#{extend-env 341}#
                                       #{labels 3949}#
                                       (list (cons 'syntax
                                                   (cons #{var 3950}# 0)))
                                       #{r 3926}#)
                                     (#{make-binding-wrap 405}#
                                       (list #{pat 3940}#)
                                       #{labels 3949}#
                                       '(()))
                                     #{mod 3927}#))
                                 (list #{x 3923}#))))
                           (#{gen-clause 3740}#
                             #{x 3923}#
                             #{keys 3924}#
                             (cdr #{clauses 3925}#)
                             #{r 3926}#
                             #{pat 3940}#
                             #t
                             #{exp 3941}#
                             #{mod 3927}#)))
                       #{tmp 3937}#)
                     (let ((#{tmp 3956}#
                             ($sc-dispatch #{tmp 3936}# '(any any any))))
                       (if #{tmp 3956}#
                         (@apply
                           (lambda (#{pat 3960}# #{fender 3961}# #{exp 3962}#)
                             (#{gen-clause 3740}#
                               #{x 3923}#
                               #{keys 3924}#
                               (cdr #{clauses 3925}#)
                               #{r 3926}#
                               #{pat 3960}#
                               #{fender 3961}#
                               #{exp 3962}#
                               #{mod 3927}#))
                           #{tmp 3956}#)
                         (syntax-violation
                           'syntax-case
                           "invalid clause"
                           (car #{clauses 3925}#)))))))))))
        (lambda (#{e 3965}#
                 #{r 3966}#
                 #{w 3967}#
                 #{s 3968}#
                 #{mod 3969}#)
          (let ((#{e 3976}#
                  (let ((#{x 10789}#
                          (begin
                            (if (if (pair? #{e 3965}#) #{s 3968}# #f)
                              (set-source-properties! #{e 3965}# #{s 3968}#))
                            #{e 3965}#)))
                    (if (if (null? (car #{w 3967}#))
                          (null? (cdr #{w 3967}#))
                          #f)
                      #{x 10789}#
                      (if (if (vector? #{x 10789}#)
                            (if (= (vector-length #{x 10789}#) 4)
                              (eq? (vector-ref #{x 10789}# 0) 'syntax-object)
                              #f)
                            #f)
                        (let ((#{expression 10801}# (vector-ref #{x 10789}# 1))
                              (#{wrap 10802}#
                                (let ((#{w2 10810}#
                                        (vector-ref #{x 10789}# 2)))
                                  (let ((#{m1 10811}# (car #{w 3967}#))
                                        (#{s1 10812}# (cdr #{w 3967}#)))
                                    (if (null? #{m1 10811}#)
                                      (if (null? #{s1 10812}#)
                                        #{w2 10810}#
                                        (cons (car #{w2 10810}#)
                                              (let ((#{m2 10819}#
                                                      (cdr #{w2 10810}#)))
                                                (if (null? #{m2 10819}#)
                                                  #{s1 10812}#
                                                  (append
                                                    #{s1 10812}#
                                                    #{m2 10819}#)))))
                                      (cons (let ((#{m2 10823}#
                                                    (car #{w2 10810}#)))
                                              (if (null? #{m2 10823}#)
                                                #{m1 10811}#
                                                (append
                                                  #{m1 10811}#
                                                  #{m2 10823}#)))
                                            (let ((#{m2 10827}#
                                                    (cdr #{w2 10810}#)))
                                              (if (null? #{m2 10827}#)
                                                #{s1 10812}#
                                                (append
                                                  #{s1 10812}#
                                                  #{m2 10827}#))))))))
                              (#{module 10803}# (vector-ref #{x 10789}# 3)))
                          (vector
                            'syntax-object
                            #{expression 10801}#
                            #{wrap 10802}#
                            #{module 10803}#))
                        (if (null? #{x 10789}#)
                          #{x 10789}#
                          (vector
                            'syntax-object
                            #{x 10789}#
                            #{w 3967}#
                            #{mod 3969}#)))))))
            (let ((#{tmp 3978}#
                    ($sc-dispatch
                      #{e 3976}#
                      '(_ any each-any . each-any))))
              (if #{tmp 3978}#
                (@apply
                  (lambda (#{val 3982}# #{key 3983}# #{m 3984}#)
                    (if (and-map
                          (lambda (#{x 3985}#)
                            (if (if (symbol? #{x 3985}#)
                                  #t
                                  (if (if (vector? #{x 3985}#)
                                        (if (= (vector-length #{x 3985}#) 4)
                                          (eq? (vector-ref #{x 3985}# 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (symbol? (vector-ref #{x 3985}# 1))
                                    #f))
                              (not (if (if (if (vector? #{x 3985}#)
                                             (if (= (vector-length #{x 3985}#)
                                                    4)
                                               (eq? (vector-ref #{x 3985}# 0)
                                                    'syntax-object)
                                               #f)
                                             #f)
                                         (symbol? (vector-ref #{x 3985}# 1))
                                         #f)
                                     (#{free-id=? 417}#
                                       #{x 3985}#
                                       '#(syntax-object
                                          ...
                                          ((top)
                                           #(ribcage () () ())
                                           #(ribcage () () ())
                                           #(ribcage #(x) #((top)) #("i2262"))
                                           #(ribcage
                                             (lambda-var-list
                                               gen-var
                                               strip
                                               chi-lambda-case
                                               lambda*-formals
                                               chi-simple-lambda
                                               lambda-formals
                                               ellipsis?
                                               chi-void
                                               eval-local-transformer
                                               chi-local-syntax
                                               chi-body
                                               chi-macro
                                               chi-call
                                               chi-expr
                                               chi
                                               syntax-type
                                               chi-when-list
                                               chi-install-global
                                               chi-top-sequence
                                               chi-sequence
                                               source-wrap
                                               wrap
                                               bound-id-member?
                                               distinct-bound-ids?
                                               valid-bound-ids?
                                               bound-id=?
                                               free-id=?
                                               id-var-name
                                               same-marks?
                                               join-marks
                                               join-wraps
                                               smart-append
                                               make-binding-wrap
                                               extend-ribcage!
                                               make-empty-ribcage
                                               new-mark
                                               anti-mark
                                               the-anti-mark
                                               top-marked?
                                               top-wrap
                                               empty-wrap
                                               set-ribcage-labels!
                                               set-ribcage-marks!
                                               set-ribcage-symnames!
                                               ribcage-labels
                                               ribcage-marks
                                               ribcage-symnames
                                               ribcage?
                                               make-ribcage
                                               gen-labels
                                               gen-label
                                               make-rename
                                               rename-marks
                                               rename-new
                                               rename-old
                                               subst-rename?
                                               wrap-subst
                                               wrap-marks
                                               make-wrap
                                               id-sym-name&marks
                                               id-sym-name
                                               id?
                                               nonsymbol-id?
                                               global-extend
                                               lookup
                                               macros-only-env
                                               extend-var-env
                                               extend-env
                                               null-env
                                               binding-value
                                               binding-type
                                               make-binding
                                               arg-check
                                               source-annotation
                                               no-source
                                               set-syntax-object-module!
                                               set-syntax-object-wrap!
                                               set-syntax-object-expression!
                                               syntax-object-module
                                               syntax-object-wrap
                                               syntax-object-expression
                                               syntax-object?
                                               make-syntax-object
                                               build-lexical-var
                                               build-letrec
                                               build-named-let
                                               build-let
                                               build-sequence
                                               build-data
                                               build-primref
                                               build-primcall
                                               build-lambda-case
                                               build-case-lambda
                                               build-simple-lambda
                                               build-global-definition
                                               build-global-assignment
                                               build-global-reference
                                               analyze-variable
                                               build-lexical-assignment
                                               build-lexical-reference
                                               build-dynlet
                                               build-conditional
                                               build-call
                                               build-void
                                               maybe-name-value!
                                               decorate-source
                                               get-global-definition-hook
                                               put-global-definition-hook
                                               gensym-hook
                                               local-eval-hook
                                               top-level-eval-hook
                                               fx<
                                               fx=
                                               fx-
                                               fx+
                                               set-lambda-meta!
                                               lambda-meta
                                               lambda?
                                               make-dynlet
                                               make-letrec
                                               make-let
                                               make-lambda-case
                                               make-lambda
                                               make-seq
                                               make-primcall
                                               make-call
                                               make-conditional
                                               make-toplevel-define
                                               make-toplevel-set
                                               make-toplevel-ref
                                               make-module-set
                                               make-module-ref
                                               make-lexical-set
                                               make-lexical-ref
                                               make-primitive-ref
                                               make-const
                                               make-void)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("i470"
                                              "i468"
                                              "i466"
                                              "i464"
                                              "i462"
                                              "i460"
                                              "i458"
                                              "i456"
                                              "i454"
                                              "i452"
                                              "i450"
                                              "i448"
                                              "i446"
                                              "i444"
                                              "i442"
                                              "i440"
                                              "i438"
                                              "i436"
                                              "i434"
                                              "i432"
                                              "i430"
                                              "i428"
                                              "i426"
                                              "i424"
                                              "i422"
                                              "i420"
                                              "i418"
                                              "i416"
                                              "i414"
                                              "i412"
                                              "i410"
                                              "i408"
                                              "i406"
                                              "i404"
                                              "i402"
                                              "i401"
                                              "i399"
                                              "i396"
                                              "i395"
                                              "i394"
                                              "i392"
                                              "i391"
                                              "i389"
                                              "i387"
                                              "i385"
                                              "i383"
                                              "i381"
                                              "i379"
                                              "i377"
                                              "i375"
                                              "i372"
                                              "i370"
                                              "i369"
                                              "i367"
                                              "i365"
                                              "i363"
                                              "i361"
                                              "i360"
                                              "i359"
                                              "i358"
                                              "i356"
                                              "i355"
                                              "i352"
                                              "i350"
                                              "i348"
                                              "i346"
                                              "i344"
                                              "i342"
                                              "i340"
                                              "i339"
                                              "i338"
                                              "i336"
                                              "i334"
                                              "i333"
                                              "i330"
                                              "i329"
                                              "i327"
                                              "i325"
                                              "i323"
                                              "i321"
                                              "i319"
                                              "i317"
                                              "i315"
                                              "i313"
                                              "i311"
                                              "i308"
                                              "i306"
                                              "i304"
                                              "i302"
                                              "i300"
                                              "i298"
                                              "i296"
                                              "i294"
                                              "i292"
                                              "i290"
                                              "i288"
                                              "i286"
                                              "i284"
                                              "i282"
                                              "i280"
                                              "i278"
                                              "i276"
                                              "i274"
                                              "i272"
                                              "i270"
                                              "i268"
                                              "i266"
                                              "i264"
                                              "i262"
                                              "i261"
                                              "i258"
                                              "i256"
                                              "i255"
                                              "i254"
                                              "i253"
                                              "i252"
                                              "i250"
                                              "i248"
                                              "i246"
                                              "i243"
                                              "i241"
                                              "i239"
                                              "i237"
                                              "i235"
                                              "i233"
                                              "i231"
                                              "i229"
                                              "i227"
                                              "i225"
                                              "i223"
                                              "i221"
                                              "i219"
                                              "i217"
                                              "i215"
                                              "i213"
                                              "i211"
                                              "i209"
                                              "i207"))
                                           #(ribcage
                                             (define-structure
                                               define-expansion-accessors
                                               define-expansion-constructors)
                                             ((top) (top) (top))
                                             ("i45" "i44" "i43")))
                                          (hygiene guile)))
                                     #f))
                              #f))
                          #{key 3983}#)
                      (let ((#{x 3991}#
                              (gensym
                                (string-append (symbol->string 'tmp) " "))))
                        (#{build-call 273}#
                          #{s 3968}#
                          (let ((#{req 10960}# (list 'tmp))
                                (#{vars 10962}# (list #{x 3991}#))
                                (#{exp 10964}#
                                  (#{gen-syntax-case 3742}#
                                    (make-struct/no-tail
                                      (vector-ref %expanded-vtables 3)
                                      #f
                                      'tmp
                                      #{x 3991}#)
                                    #{key 3983}#
                                    #{m 3984}#
                                    #{r 3966}#
                                    #{mod 3969}#)))
                            (let ((#{body 10981}#
                                    (make-struct/no-tail
                                      (vector-ref %expanded-vtables 15)
                                      #f
                                      #{req 10960}#
                                      #f
                                      #f
                                      #f
                                      '()
                                      #{vars 10962}#
                                      #{exp 10964}#
                                      #f)))
                              (make-struct/no-tail
                                (vector-ref %expanded-vtables 14)
                                #f
                                '()
                                #{body 10981}#)))
                          (list (#{chi 441}#
                                  #{val 3982}#
                                  #{r 3966}#
                                  '(())
                                  #{mod 3969}#))))
                      (syntax-violation
                        'syntax-case
                        "invalid literals list"
                        #{e 3976}#)))
                  #{tmp 3978}#)
                (syntax-violation
                  #f
                  "source expression failed to match any pattern"
                  #{e 3976}#)))))))
    (set! macroexpand
      (lambda*
        (#{x 3997}#
          #:optional
          (#{m 3999}# 'e)
          (#{esew 4001}# '(eval)))
        (#{chi-top-sequence 433}#
          (list #{x 3997}#)
          '()
          '((top))
          #f
          #{m 3999}#
          #{esew 4001}#
          (cons 'hygiene (module-name (current-module))))))
    (set! identifier?
      (lambda (#{x 4005}#)
        (if (if (vector? #{x 4005}#)
              (if (= (vector-length #{x 4005}#) 4)
                (eq? (vector-ref #{x 4005}# 0) 'syntax-object)
                #f)
              #f)
          (symbol? (vector-ref #{x 4005}# 1))
          #f)))
    (set! datum->syntax
      (lambda (#{id 4007}# #{datum 4008}#)
        (let ((#{wrap 11055}# (vector-ref #{id 4007}# 2))
              (#{module 11056}# (vector-ref #{id 4007}# 3)))
          (vector
            'syntax-object
            #{datum 4008}#
            #{wrap 11055}#
            #{module 11056}#))))
    (set! syntax->datum
      (lambda (#{x 4011}#)
        (#{strip 467}# #{x 4011}# '(()))))
    (set! syntax-source
      (lambda (#{x 4014}#)
        (#{source-annotation 331}# #{x 4014}#)))
    (set! generate-temporaries
      (lambda (#{ls 4016}#)
        (begin
          (if (not (list? #{ls 4016}#))
            (syntax-violation
              'generate-temporaries
              "invalid argument"
              #{ls 4016}#))
          (let ((#{mod 4022}#
                  (cons 'hygiene (module-name (current-module)))))
            (map (lambda (#{x 4023}#)
                   (let ((#{x 11191}# (gensym)))
                     (if (if (vector? #{x 11191}#)
                           (if (= (vector-length #{x 11191}#) 4)
                             (eq? (vector-ref #{x 11191}# 0) 'syntax-object)
                             #f)
                           #f)
                       (let ((#{expression 11200}# (vector-ref #{x 11191}# 1))
                             (#{wrap 11201}#
                               (let ((#{w2 11209}# (vector-ref #{x 11191}# 2)))
                                 (cons (let ((#{m2 11219}# (car #{w2 11209}#)))
                                         (if (null? #{m2 11219}#)
                                           '(top)
                                           (append '(top) #{m2 11219}#)))
                                       (let ((#{m2 11223}# (cdr #{w2 11209}#)))
                                         (if (null? #{m2 11223}#)
                                           '()
                                           (append '() #{m2 11223}#))))))
                             (#{module 11202}# (vector-ref #{x 11191}# 3)))
                         (vector
                           'syntax-object
                           #{expression 11200}#
                           #{wrap 11201}#
                           #{module 11202}#))
                       (if (null? #{x 11191}#)
                         #{x 11191}#
                         (vector
                           'syntax-object
                           #{x 11191}#
                           '((top))
                           #{mod 4022}#)))))
                 #{ls 4016}#)))))
    (set! free-identifier=?
      (lambda (#{x 4027}# #{y 4028}#)
        (begin
          (if (not (if (if (vector? #{x 4027}#)
                         (if (= (vector-length #{x 4027}#) 4)
                           (eq? (vector-ref #{x 4027}# 0) 'syntax-object)
                           #f)
                         #f)
                     (symbol? (vector-ref #{x 4027}# 1))
                     #f))
            (syntax-violation
              'free-identifier=?
              "invalid argument"
              #{x 4027}#))
          (if (not (if (if (vector? #{y 4028}#)
                         (if (= (vector-length #{y 4028}#) 4)
                           (eq? (vector-ref #{y 4028}# 0) 'syntax-object)
                           #f)
                         #f)
                     (symbol? (vector-ref #{y 4028}# 1))
                     #f))
            (syntax-violation
              'free-identifier=?
              "invalid argument"
              #{y 4028}#))
          (#{free-id=? 417}# #{x 4027}# #{y 4028}#))))
    (set! bound-identifier=?
      (lambda (#{x 4037}# #{y 4038}#)
        (begin
          (if (not (if (if (vector? #{x 4037}#)
                         (if (= (vector-length #{x 4037}#) 4)
                           (eq? (vector-ref #{x 4037}# 0) 'syntax-object)
                           #f)
                         #f)
                     (symbol? (vector-ref #{x 4037}# 1))
                     #f))
            (syntax-violation
              'bound-identifier=?
              "invalid argument"
              #{x 4037}#))
          (if (not (if (if (vector? #{y 4038}#)
                         (if (= (vector-length #{y 4038}#) 4)
                           (eq? (vector-ref #{y 4038}# 0) 'syntax-object)
                           #f)
                         #f)
                     (symbol? (vector-ref #{y 4038}# 1))
                     #f))
            (syntax-violation
              'bound-identifier=?
              "invalid argument"
              #{y 4038}#))
          (#{bound-id=? 419}# #{x 4037}# #{y 4038}#))))
    (set! syntax-violation
      (lambda*
        (#{who 4047}#
          #{message 4048}#
          #{form 4049}#
          #:optional
          (#{subform 4053}# #f))
        (begin
          (if (not (if (not #{who 4047}#)
                     (not #{who 4047}#)
                     (let ((#{t 4065}# (string? #{who 4047}#)))
                       (if #{t 4065}# #{t 4065}# (symbol? #{who 4047}#)))))
            (syntax-violation
              'syntax-violation
              "invalid argument"
              #{who 4047}#))
          (if (not (string? #{message 4048}#))
            (syntax-violation
              'syntax-violation
              "invalid argument"
              #{message 4048}#))
          (throw 'syntax-error
                 #{who 4047}#
                 #{message 4048}#
                 (#{source-annotation 331}#
                   (if #{form 4049}# #{form 4049}# #{subform 4053}#))
                 (#{strip 467}# #{form 4049}# '(()))
                 (if #{subform 4053}#
                   (#{strip 467}# #{subform 4053}# '(()))
                   #f)))))
    (letrec*
      ((#{match-each 4079}#
         (lambda (#{e 4092}# #{p 4093}# #{w 4094}# #{mod 4095}#)
           (if (pair? #{e 4092}#)
             (let ((#{first 4103}#
                     (#{match 4091}#
                       (car #{e 4092}#)
                       #{p 4093}#
                       #{w 4094}#
                       '()
                       #{mod 4095}#)))
               (if #{first 4103}#
                 (let ((#{rest 4107}#
                         (#{match-each 4079}#
                           (cdr #{e 4092}#)
                           #{p 4093}#
                           #{w 4094}#
                           #{mod 4095}#)))
                   (if #{rest 4107}#
                     (cons #{first 4103}# #{rest 4107}#)
                     #f))
                 #f))
             (if (null? #{e 4092}#)
               '()
               (if (if (vector? #{e 4092}#)
                     (if (= (vector-length #{e 4092}#) 4)
                       (eq? (vector-ref #{e 4092}# 0) 'syntax-object)
                       #f)
                     #f)
                 (#{match-each 4079}#
                   (vector-ref #{e 4092}# 1)
                   #{p 4093}#
                   (let ((#{w2 11457}# (vector-ref #{e 4092}# 2)))
                     (let ((#{m1 11458}# (car #{w 4094}#))
                           (#{s1 11459}# (cdr #{w 4094}#)))
                       (if (null? #{m1 11458}#)
                         (if (null? #{s1 11459}#)
                           #{w2 11457}#
                           (cons (car #{w2 11457}#)
                                 (let ((#{m2 11466}# (cdr #{w2 11457}#)))
                                   (if (null? #{m2 11466}#)
                                     #{s1 11459}#
                                     (append #{s1 11459}# #{m2 11466}#)))))
                         (cons (let ((#{m2 11470}# (car #{w2 11457}#)))
                                 (if (null? #{m2 11470}#)
                                   #{m1 11458}#
                                   (append #{m1 11458}# #{m2 11470}#)))
                               (let ((#{m2 11474}# (cdr #{w2 11457}#)))
                                 (if (null? #{m2 11474}#)
                                   #{s1 11459}#
                                   (append #{s1 11459}# #{m2 11474}#)))))))
                   (vector-ref #{e 4092}# 3))
                 #f)))))
       (#{match-each+ 4081}#
         (lambda (#{e 4115}#
                  #{x-pat 4116}#
                  #{y-pat 4117}#
                  #{z-pat 4118}#
                  #{w 4119}#
                  #{r 4120}#
                  #{mod 4121}#)
           (letrec*
             ((#{f 4132}#
                (lambda (#{e 4133}# #{w 4134}#)
                  (if (pair? #{e 4133}#)
                    (call-with-values
                      (lambda ()
                        (#{f 4132}# (cdr #{e 4133}#) #{w 4134}#))
                      (lambda (#{xr* 4137}# #{y-pat 4138}# #{r 4139}#)
                        (if #{r 4139}#
                          (if (null? #{y-pat 4138}#)
                            (let ((#{xr 4144}#
                                    (#{match 4091}#
                                      (car #{e 4133}#)
                                      #{x-pat 4116}#
                                      #{w 4134}#
                                      '()
                                      #{mod 4121}#)))
                              (if #{xr 4144}#
                                (values
                                  (cons #{xr 4144}# #{xr* 4137}#)
                                  #{y-pat 4138}#
                                  #{r 4139}#)
                                (values #f #f #f)))
                            (values
                              '()
                              (cdr #{y-pat 4138}#)
                              (#{match 4091}#
                                (car #{e 4133}#)
                                (car #{y-pat 4138}#)
                                #{w 4134}#
                                #{r 4139}#
                                #{mod 4121}#)))
                          (values #f #f #f))))
                    (if (if (vector? #{e 4133}#)
                          (if (= (vector-length #{e 4133}#) 4)
                            (eq? (vector-ref #{e 4133}# 0) 'syntax-object)
                            #f)
                          #f)
                      (#{f 4132}#
                        (vector-ref #{e 4133}# 1)
                        (let ((#{m1 11490}# (car #{w 4134}#))
                              (#{s1 11491}# (cdr #{w 4134}#)))
                          (if (null? #{m1 11490}#)
                            (if (null? #{s1 11491}#)
                              #{e 4133}#
                              (cons (car #{e 4133}#)
                                    (let ((#{m2 11495}# (cdr #{e 4133}#)))
                                      (if (null? #{m2 11495}#)
                                        #{s1 11491}#
                                        (append #{s1 11491}# #{m2 11495}#)))))
                            (cons (let ((#{m2 11499}# (car #{e 4133}#)))
                                    (if (null? #{m2 11499}#)
                                      #{m1 11490}#
                                      (append #{m1 11490}# #{m2 11499}#)))
                                  (let ((#{m2 11503}# (cdr #{e 4133}#)))
                                    (if (null? #{m2 11503}#)
                                      #{s1 11491}#
                                      (append #{s1 11491}# #{m2 11503}#)))))))
                      (values
                        '()
                        #{y-pat 4117}#
                        (#{match 4091}#
                          #{e 4133}#
                          #{z-pat 4118}#
                          #{w 4134}#
                          #{r 4120}#
                          #{mod 4121}#)))))))
             (#{f 4132}# #{e 4115}# #{w 4119}#))))
       (#{match-each-any 4083}#
         (lambda (#{e 4148}# #{w 4149}# #{mod 4150}#)
           (if (pair? #{e 4148}#)
             (let ((#{l 4157}#
                     (#{match-each-any 4083}#
                       (cdr #{e 4148}#)
                       #{w 4149}#
                       #{mod 4150}#)))
               (if #{l 4157}#
                 (cons (let ((#{x 11507}# (car #{e 4148}#)))
                         (if (if (null? (car #{w 4149}#))
                               (null? (cdr #{w 4149}#))
                               #f)
                           #{x 11507}#
                           (if (if (vector? #{x 11507}#)
                                 (if (= (vector-length #{x 11507}#) 4)
                                   (eq? (vector-ref #{x 11507}# 0)
                                        'syntax-object)
                                   #f)
                                 #f)
                             (let ((#{expression 11515}#
                                     (vector-ref #{x 11507}# 1))
                                   (#{wrap 11516}#
                                     (let ((#{w2 11524}#
                                             (vector-ref #{x 11507}# 2)))
                                       (let ((#{m1 11525}# (car #{w 4149}#))
                                             (#{s1 11526}# (cdr #{w 4149}#)))
                                         (if (null? #{m1 11525}#)
                                           (if (null? #{s1 11526}#)
                                             #{w2 11524}#
                                             (cons (car #{w2 11524}#)
                                                   (let ((#{m2 11533}#
                                                           (cdr #{w2 11524}#)))
                                                     (if (null? #{m2 11533}#)
                                                       #{s1 11526}#
                                                       (append
                                                         #{s1 11526}#
                                                         #{m2 11533}#)))))
                                           (cons (let ((#{m2 11537}#
                                                         (car #{w2 11524}#)))
                                                   (if (null? #{m2 11537}#)
                                                     #{m1 11525}#
                                                     (append
                                                       #{m1 11525}#
                                                       #{m2 11537}#)))
                                                 (let ((#{m2 11541}#
                                                         (cdr #{w2 11524}#)))
                                                   (if (null? #{m2 11541}#)
                                                     #{s1 11526}#
                                                     (append
                                                       #{s1 11526}#
                                                       #{m2 11541}#))))))))
                                   (#{module 11517}#
                                     (vector-ref #{x 11507}# 3)))
                               (vector
                                 'syntax-object
                                 #{expression 11515}#
                                 #{wrap 11516}#
                                 #{module 11517}#))
                             (if (null? #{x 11507}#)
                               #{x 11507}#
                               (vector
                                 'syntax-object
                                 #{x 11507}#
                                 #{w 4149}#
                                 #{mod 4150}#)))))
                       #{l 4157}#)
                 #f))
             (if (null? #{e 4148}#)
               '()
               (if (if (vector? #{e 4148}#)
                     (if (= (vector-length #{e 4148}#) 4)
                       (eq? (vector-ref #{e 4148}# 0) 'syntax-object)
                       #f)
                     #f)
                 (#{match-each-any 4083}#
                   (vector-ref #{e 4148}# 1)
                   (let ((#{w2 11559}# (vector-ref #{e 4148}# 2)))
                     (let ((#{m1 11560}# (car #{w 4149}#))
                           (#{s1 11561}# (cdr #{w 4149}#)))
                       (if (null? #{m1 11560}#)
                         (if (null? #{s1 11561}#)
                           #{w2 11559}#
                           (cons (car #{w2 11559}#)
                                 (let ((#{m2 11568}# (cdr #{w2 11559}#)))
                                   (if (null? #{m2 11568}#)
                                     #{s1 11561}#
                                     (append #{s1 11561}# #{m2 11568}#)))))
                         (cons (let ((#{m2 11572}# (car #{w2 11559}#)))
                                 (if (null? #{m2 11572}#)
                                   #{m1 11560}#
                                   (append #{m1 11560}# #{m2 11572}#)))
                               (let ((#{m2 11576}# (cdr #{w2 11559}#)))
                                 (if (null? #{m2 11576}#)
                                   #{s1 11561}#
                                   (append #{s1 11561}# #{m2 11576}#)))))))
                   #{mod 4150}#)
                 #f)))))
       (#{match-empty 4085}#
         (lambda (#{p 4165}# #{r 4166}#)
           (if (null? #{p 4165}#)
             #{r 4166}#
             (if (eq? #{p 4165}# '_)
               #{r 4166}#
               (if (eq? #{p 4165}# 'any)
                 (cons '() #{r 4166}#)
                 (if (pair? #{p 4165}#)
                   (#{match-empty 4085}#
                     (car #{p 4165}#)
                     (#{match-empty 4085}#
                       (cdr #{p 4165}#)
                       #{r 4166}#))
                   (if (eq? #{p 4165}# 'each-any)
                     (cons '() #{r 4166}#)
                     (let ((#{atom-key 4182}# (vector-ref #{p 4165}# 0)))
                       (if (memv #{atom-key 4182}# '(each))
                         (#{match-empty 4085}#
                           (vector-ref #{p 4165}# 1)
                           #{r 4166}#)
                         (if (memv #{atom-key 4182}# '(each+))
                           (#{match-empty 4085}#
                             (vector-ref #{p 4165}# 1)
                             (#{match-empty 4085}#
                               (reverse (vector-ref #{p 4165}# 2))
                               (#{match-empty 4085}#
                                 (vector-ref #{p 4165}# 3)
                                 #{r 4166}#)))
                           (if (memv #{atom-key 4182}# '(free-id atom))
                             #{r 4166}#
                             (if (memv #{atom-key 4182}# '(vector))
                               (#{match-empty 4085}#
                                 (vector-ref #{p 4165}# 1)
                                 #{r 4166}#)))))))))))))
       (#{combine 4087}#
         (lambda (#{r* 4187}# #{r 4188}#)
           (if (null? (car #{r* 4187}#))
             #{r 4188}#
             (cons (map car #{r* 4187}#)
                   (#{combine 4087}#
                     (map cdr #{r* 4187}#)
                     #{r 4188}#)))))
       (#{match* 4089}#
         (lambda (#{e 4191}#
                  #{p 4192}#
                  #{w 4193}#
                  #{r 4194}#
                  #{mod 4195}#)
           (if (null? #{p 4192}#)
             (if (null? #{e 4191}#) #{r 4194}# #f)
             (if (pair? #{p 4192}#)
               (if (pair? #{e 4191}#)
                 (#{match 4091}#
                   (car #{e 4191}#)
                   (car #{p 4192}#)
                   #{w 4193}#
                   (#{match 4091}#
                     (cdr #{e 4191}#)
                     (cdr #{p 4192}#)
                     #{w 4193}#
                     #{r 4194}#
                     #{mod 4195}#)
                   #{mod 4195}#)
                 #f)
               (if (eq? #{p 4192}# 'each-any)
                 (let ((#{l 4212}#
                         (#{match-each-any 4083}#
                           #{e 4191}#
                           #{w 4193}#
                           #{mod 4195}#)))
                   (if #{l 4212}# (cons #{l 4212}# #{r 4194}#) #f))
                 (let ((#{atom-key 4218}# (vector-ref #{p 4192}# 0)))
                   (if (memv #{atom-key 4218}# '(each))
                     (if (null? #{e 4191}#)
                       (#{match-empty 4085}#
                         (vector-ref #{p 4192}# 1)
                         #{r 4194}#)
                       (let ((#{l 4221}#
                               (#{match-each 4079}#
                                 #{e 4191}#
                                 (vector-ref #{p 4192}# 1)
                                 #{w 4193}#
                                 #{mod 4195}#)))
                         (if #{l 4221}#
                           (letrec*
                             ((#{collect 4226}#
                                (lambda (#{l 4227}#)
                                  (if (null? (car #{l 4227}#))
                                    #{r 4194}#
                                    (cons (map car #{l 4227}#)
                                          (#{collect 4226}#
                                            (map cdr #{l 4227}#)))))))
                             (#{collect 4226}# #{l 4221}#))
                           #f)))
                     (if (memv #{atom-key 4218}# '(each+))
                       (call-with-values
                         (lambda ()
                           (#{match-each+ 4081}#
                             #{e 4191}#
                             (vector-ref #{p 4192}# 1)
                             (vector-ref #{p 4192}# 2)
                             (vector-ref #{p 4192}# 3)
                             #{w 4193}#
                             #{r 4194}#
                             #{mod 4195}#))
                         (lambda (#{xr* 4229}# #{y-pat 4230}# #{r 4231}#)
                           (if #{r 4231}#
                             (if (null? #{y-pat 4230}#)
                               (if (null? #{xr* 4229}#)
                                 (#{match-empty 4085}#
                                   (vector-ref #{p 4192}# 1)
                                   #{r 4231}#)
                                 (#{combine 4087}# #{xr* 4229}# #{r 4231}#))
                               #f)
                             #f)))
                       (if (memv #{atom-key 4218}# '(free-id))
                         (if (if (symbol? #{e 4191}#)
                               #t
                               (if (if (vector? #{e 4191}#)
                                     (if (= (vector-length #{e 4191}#) 4)
                                       (eq? (vector-ref #{e 4191}# 0)
                                            'syntax-object)
                                       #f)
                                     #f)
                                 (symbol? (vector-ref #{e 4191}# 1))
                                 #f))
                           (if (#{free-id=? 417}#
                                 (if (if (null? (car #{w 4193}#))
                                       (null? (cdr #{w 4193}#))
                                       #f)
                                   #{e 4191}#
                                   (if (if (vector? #{e 4191}#)
                                         (if (= (vector-length #{e 4191}#) 4)
                                           (eq? (vector-ref #{e 4191}# 0)
                                                'syntax-object)
                                           #f)
                                         #f)
                                     (let ((#{expression 11659}#
                                             (vector-ref #{e 4191}# 1))
                                           (#{wrap 11660}#
                                             (let ((#{w2 11668}#
                                                     (vector-ref
                                                       #{e 4191}#
                                                       2)))
                                               (let ((#{m1 11669}#
                                                       (car #{w 4193}#))
                                                     (#{s1 11670}#
                                                       (cdr #{w 4193}#)))
                                                 (if (null? #{m1 11669}#)
                                                   (if (null? #{s1 11670}#)
                                                     #{w2 11668}#
                                                     (cons (car #{w2 11668}#)
                                                           (let ((#{m2 11677}#
                                                                   (cdr #{w2 11668}#)))
                                                             (if (null? #{m2 11677}#)
                                                               #{s1 11670}#
                                                               (append
                                                                 #{s1 11670}#
                                                                 #{m2 11677}#)))))
                                                   (cons (let ((#{m2 11681}#
                                                                 (car #{w2 11668}#)))
                                                           (if (null? #{m2 11681}#)
                                                             #{m1 11669}#
                                                             (append
                                                               #{m1 11669}#
                                                               #{m2 11681}#)))
                                                         (let ((#{m2 11685}#
                                                                 (cdr #{w2 11668}#)))
                                                           (if (null? #{m2 11685}#)
                                                             #{s1 11670}#
                                                             (append
                                                               #{s1 11670}#
                                                               #{m2 11685}#))))))))
                                           (#{module 11661}#
                                             (vector-ref #{e 4191}# 3)))
                                       (vector
                                         'syntax-object
                                         #{expression 11659}#
                                         #{wrap 11660}#
                                         #{module 11661}#))
                                     (if (null? #{e 4191}#)
                                       #{e 4191}#
                                       (vector
                                         'syntax-object
                                         #{e 4191}#
                                         #{w 4193}#
                                         #{mod 4195}#))))
                                 (vector-ref #{p 4192}# 1))
                             #{r 4194}#
                             #f)
                           #f)
                         (if (memv #{atom-key 4218}# '(atom))
                           (if (equal?
                                 (vector-ref #{p 4192}# 1)
                                 (#{strip 467}# #{e 4191}# #{w 4193}#))
                             #{r 4194}#
                             #f)
                           (if (memv #{atom-key 4218}# '(vector))
                             (if (vector? #{e 4191}#)
                               (#{match 4091}#
                                 (vector->list #{e 4191}#)
                                 (vector-ref #{p 4192}# 1)
                                 #{w 4193}#
                                 #{r 4194}#
                                 #{mod 4195}#)
                               #f))))))))))))
       (#{match 4091}#
         (lambda (#{e 4248}#
                  #{p 4249}#
                  #{w 4250}#
                  #{r 4251}#
                  #{mod 4252}#)
           (if (not #{r 4251}#)
             #f
             (if (eq? #{p 4249}# '_)
               #{r 4251}#
               (if (eq? #{p 4249}# 'any)
                 (cons (if (if (null? (car #{w 4250}#))
                             (null? (cdr #{w 4250}#))
                             #f)
                         #{e 4248}#
                         (if (if (vector? #{e 4248}#)
                               (if (= (vector-length #{e 4248}#) 4)
                                 (eq? (vector-ref #{e 4248}# 0) 'syntax-object)
                                 #f)
                               #f)
                           (let ((#{expression 11705}#
                                   (vector-ref #{e 4248}# 1))
                                 (#{wrap 11706}#
                                   (let ((#{w2 11714}#
                                           (vector-ref #{e 4248}# 2)))
                                     (let ((#{m1 11715}# (car #{w 4250}#))
                                           (#{s1 11716}# (cdr #{w 4250}#)))
                                       (if (null? #{m1 11715}#)
                                         (if (null? #{s1 11716}#)
                                           #{w2 11714}#
                                           (cons (car #{w2 11714}#)
                                                 (let ((#{m2 11723}#
                                                         (cdr #{w2 11714}#)))
                                                   (if (null? #{m2 11723}#)
                                                     #{s1 11716}#
                                                     (append
                                                       #{s1 11716}#
                                                       #{m2 11723}#)))))
                                         (cons (let ((#{m2 11727}#
                                                       (car #{w2 11714}#)))
                                                 (if (null? #{m2 11727}#)
                                                   #{m1 11715}#
                                                   (append
                                                     #{m1 11715}#
                                                     #{m2 11727}#)))
                                               (let ((#{m2 11731}#
                                                       (cdr #{w2 11714}#)))
                                                 (if (null? #{m2 11731}#)
                                                   #{s1 11716}#
                                                   (append
                                                     #{s1 11716}#
                                                     #{m2 11731}#))))))))
                                 (#{module 11707}# (vector-ref #{e 4248}# 3)))
                             (vector
                               'syntax-object
                               #{expression 11705}#
                               #{wrap 11706}#
                               #{module 11707}#))
                           (if (null? #{e 4248}#)
                             #{e 4248}#
                             (vector
                               'syntax-object
                               #{e 4248}#
                               #{w 4250}#
                               #{mod 4252}#))))
                       #{r 4251}#)
                 (if (if (vector? #{e 4248}#)
                       (if (= (vector-length #{e 4248}#) 4)
                         (eq? (vector-ref #{e 4248}# 0) 'syntax-object)
                         #f)
                       #f)
                   (#{match* 4089}#
                     (vector-ref #{e 4248}# 1)
                     #{p 4249}#
                     (let ((#{w2 11749}# (vector-ref #{e 4248}# 2)))
                       (let ((#{m1 11750}# (car #{w 4250}#))
                             (#{s1 11751}# (cdr #{w 4250}#)))
                         (if (null? #{m1 11750}#)
                           (if (null? #{s1 11751}#)
                             #{w2 11749}#
                             (cons (car #{w2 11749}#)
                                   (let ((#{m2 11758}# (cdr #{w2 11749}#)))
                                     (if (null? #{m2 11758}#)
                                       #{s1 11751}#
                                       (append #{s1 11751}# #{m2 11758}#)))))
                           (cons (let ((#{m2 11762}# (car #{w2 11749}#)))
                                   (if (null? #{m2 11762}#)
                                     #{m1 11750}#
                                     (append #{m1 11750}# #{m2 11762}#)))
                                 (let ((#{m2 11766}# (cdr #{w2 11749}#)))
                                   (if (null? #{m2 11766}#)
                                     #{s1 11751}#
                                     (append #{s1 11751}# #{m2 11766}#)))))))
                     #{r 4251}#
                     (vector-ref #{e 4248}# 3))
                   (#{match* 4089}#
                     #{e 4248}#
                     #{p 4249}#
                     #{w 4250}#
                     #{r 4251}#
                     #{mod 4252}#))))))))
      (set! $sc-dispatch
        (lambda (#{e 4267}# #{p 4268}#)
          (if (eq? #{p 4268}# 'any)
            (list #{e 4267}#)
            (if (eq? #{p 4268}# '_)
              '()
              (if (if (vector? #{e 4267}#)
                    (if (= (vector-length #{e 4267}#) 4)
                      (eq? (vector-ref #{e 4267}# 0) 'syntax-object)
                      #f)
                    #f)
                (#{match* 4089}#
                  (vector-ref #{e 4267}# 1)
                  #{p 4268}#
                  (vector-ref #{e 4267}# 2)
                  '()
                  (vector-ref #{e 4267}# 3))
                (#{match* 4089}#
                  #{e 4267}#
                  #{p 4268}#
                  '(())
                  '()
                  #f)))))))))

(define with-syntax
  (make-syntax-transformer
    'with-syntax
    'macro
    (lambda (#{x 11785}#)
      (let ((#{tmp 11788}#
              ($sc-dispatch #{x 11785}# '(_ () any . each-any))))
        (if #{tmp 11788}#
          (@apply
            (lambda (#{e1 11791}# #{e2 11792}#)
              (cons '#(syntax-object
                       let
                       ((top)
                        #(ribcage
                          #(e1 e2)
                          #((top) (top))
                          #("i11789" "i11790"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i11786")))
                       (hygiene guile))
                    (cons '() (cons #{e1 11791}# #{e2 11792}#))))
            #{tmp 11788}#)
          (let ((#{tmp 11794}#
                  ($sc-dispatch
                    #{x 11785}#
                    '(_ ((any any)) any . each-any))))
            (if #{tmp 11794}#
              (@apply
                (lambda (#{out 11799}#
                         #{in 11800}#
                         #{e1 11801}#
                         #{e2 11802}#)
                  (list '#(syntax-object
                           syntax-case
                           ((top)
                            #(ribcage
                              #(out in e1 e2)
                              #((top) (top) (top) (top))
                              #("i11795" "i11796" "i11797" "i11798"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i11786")))
                           (hygiene guile))
                        #{in 11800}#
                        '()
                        (list #{out 11799}#
                              (cons '#(syntax-object
                                       let
                                       ((top)
                                        #(ribcage
                                          #(out in e1 e2)
                                          #((top) (top) (top) (top))
                                          #("i11795"
                                            "i11796"
                                            "i11797"
                                            "i11798"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i11786")))
                                       (hygiene guile))
                                    (cons '()
                                          (cons #{e1 11801}# #{e2 11802}#))))))
                #{tmp 11794}#)
              (let ((#{tmp 11804}#
                      ($sc-dispatch
                        #{x 11785}#
                        '(_ #(each (any any)) any . each-any))))
                (if #{tmp 11804}#
                  (@apply
                    (lambda (#{out 11809}#
                             #{in 11810}#
                             #{e1 11811}#
                             #{e2 11812}#)
                      (list '#(syntax-object
                               syntax-case
                               ((top)
                                #(ribcage
                                  #(out in e1 e2)
                                  #((top) (top) (top) (top))
                                  #("i11805" "i11806" "i11807" "i11808"))
                                #(ribcage () () ())
                                #(ribcage #(x) #((top)) #("i11786")))
                               (hygiene guile))
                            (cons '#(syntax-object
                                     list
                                     ((top)
                                      #(ribcage
                                        #(out in e1 e2)
                                        #((top) (top) (top) (top))
                                        #("i11805" "i11806" "i11807" "i11808"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("i11786")))
                                     (hygiene guile))
                                  #{in 11810}#)
                            '()
                            (list #{out 11809}#
                                  (cons '#(syntax-object
                                           let
                                           ((top)
                                            #(ribcage
                                              #(out in e1 e2)
                                              #((top) (top) (top) (top))
                                              #("i11805"
                                                "i11806"
                                                "i11807"
                                                "i11808"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(x)
                                              #((top))
                                              #("i11786")))
                                           (hygiene guile))
                                        (cons '()
                                              (cons #{e1 11811}#
                                                    #{e2 11812}#))))))
                    #{tmp 11804}#)
                  (syntax-violation
                    #f
                    "source expression failed to match any pattern"
                    #{x 11785}#))))))))))

(define syntax-rules
  (make-syntax-transformer
    'syntax-rules
    'macro
    (lambda (#{x 11816}#)
      (let ((#{tmp 11819}#
              ($sc-dispatch
                #{x 11816}#
                '(_ each-any . #(each ((any . any) any))))))
        (if #{tmp 11819}#
          (@apply
            (lambda (#{k 11824}#
                     #{keyword 11825}#
                     #{pattern 11826}#
                     #{template 11827}#)
              (list '#(syntax-object
                       lambda
                       ((top)
                        #(ribcage
                          #(k keyword pattern template)
                          #((top) (top) (top) (top))
                          #("i11820" "i11821" "i11822" "i11823"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i11817")))
                       (hygiene guile))
                    '(#(syntax-object
                        x
                        ((top)
                         #(ribcage
                           #(k keyword pattern template)
                           #((top) (top) (top) (top))
                           #("i11820" "i11821" "i11822" "i11823"))
                         #(ribcage () () ())
                         #(ribcage #(x) #((top)) #("i11817")))
                        (hygiene guile)))
                    (vector
                      '(#(syntax-object
                          macro-type
                          ((top)
                           #(ribcage
                             #(k keyword pattern template)
                             #((top) (top) (top) (top))
                             #("i11820" "i11821" "i11822" "i11823"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("i11817")))
                          (hygiene guile))
                        .
                        #(syntax-object
                          syntax-rules
                          ((top)
                           #(ribcage
                             #(k keyword pattern template)
                             #((top) (top) (top) (top))
                             #("i11820" "i11821" "i11822" "i11823"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("i11817")))
                          (hygiene guile)))
                      (cons '#(syntax-object
                               patterns
                               ((top)
                                #(ribcage
                                  #(k keyword pattern template)
                                  #((top) (top) (top) (top))
                                  #("i11820" "i11821" "i11822" "i11823"))
                                #(ribcage () () ())
                                #(ribcage #(x) #((top)) #("i11817")))
                               (hygiene guile))
                            #{pattern 11826}#))
                    (cons '#(syntax-object
                             syntax-case
                             ((top)
                              #(ribcage
                                #(k keyword pattern template)
                                #((top) (top) (top) (top))
                                #("i11820" "i11821" "i11822" "i11823"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i11817")))
                             (hygiene guile))
                          (cons '#(syntax-object
                                   x
                                   ((top)
                                    #(ribcage
                                      #(k keyword pattern template)
                                      #((top) (top) (top) (top))
                                      #("i11820" "i11821" "i11822" "i11823"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("i11817")))
                                   (hygiene guile))
                                (cons #{k 11824}#
                                      (map (lambda (#{tmp 11831}#
                                                    #{tmp 11830}#)
                                             (list (cons '#(syntax-object
                                                            dummy
                                                            ((top)
                                                             #(ribcage
                                                               #(k
                                                                 keyword
                                                                 pattern
                                                                 template)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i11820"
                                                                 "i11821"
                                                                 "i11822"
                                                                 "i11823"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("i11817")))
                                                            (hygiene guile))
                                                         #{tmp 11830}#)
                                                   (list '#(syntax-object
                                                            syntax
                                                            ((top)
                                                             #(ribcage
                                                               #(k
                                                                 keyword
                                                                 pattern
                                                                 template)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i11820"
                                                                 "i11821"
                                                                 "i11822"
                                                                 "i11823"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("i11817")))
                                                            (hygiene guile))
                                                         #{tmp 11831}#)))
                                           #{template 11827}#
                                           #{pattern 11826}#))))))
            #{tmp 11819}#)
          (let ((#{tmp 11832}#
                  ($sc-dispatch
                    #{x 11816}#
                    '(_ each-any any . #(each ((any . any) any))))))
            (if (if #{tmp 11832}#
                  (@apply
                    (lambda (#{k 11838}#
                             #{docstring 11839}#
                             #{keyword 11840}#
                             #{pattern 11841}#
                             #{template 11842}#)
                      (string? (syntax->datum #{docstring 11839}#)))
                    #{tmp 11832}#)
                  #f)
              (@apply
                (lambda (#{k 11848}#
                         #{docstring 11849}#
                         #{keyword 11850}#
                         #{pattern 11851}#
                         #{template 11852}#)
                  (list '#(syntax-object
                           lambda
                           ((top)
                            #(ribcage
                              #(k docstring keyword pattern template)
                              #((top) (top) (top) (top) (top))
                              #("i11843" "i11844" "i11845" "i11846" "i11847"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i11817")))
                           (hygiene guile))
                        '(#(syntax-object
                            x
                            ((top)
                             #(ribcage
                               #(k docstring keyword pattern template)
                               #((top) (top) (top) (top) (top))
                               #("i11843" "i11844" "i11845" "i11846" "i11847"))
                             #(ribcage () () ())
                             #(ribcage #(x) #((top)) #("i11817")))
                            (hygiene guile)))
                        #{docstring 11849}#
                        (vector
                          '(#(syntax-object
                              macro-type
                              ((top)
                               #(ribcage
                                 #(k docstring keyword pattern template)
                                 #((top) (top) (top) (top) (top))
                                 #("i11843"
                                   "i11844"
                                   "i11845"
                                   "i11846"
                                   "i11847"))
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("i11817")))
                              (hygiene guile))
                            .
                            #(syntax-object
                              syntax-rules
                              ((top)
                               #(ribcage
                                 #(k docstring keyword pattern template)
                                 #((top) (top) (top) (top) (top))
                                 #("i11843"
                                   "i11844"
                                   "i11845"
                                   "i11846"
                                   "i11847"))
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("i11817")))
                              (hygiene guile)))
                          (cons '#(syntax-object
                                   patterns
                                   ((top)
                                    #(ribcage
                                      #(k docstring keyword pattern template)
                                      #((top) (top) (top) (top) (top))
                                      #("i11843"
                                        "i11844"
                                        "i11845"
                                        "i11846"
                                        "i11847"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("i11817")))
                                   (hygiene guile))
                                #{pattern 11851}#))
                        (cons '#(syntax-object
                                 syntax-case
                                 ((top)
                                  #(ribcage
                                    #(k docstring keyword pattern template)
                                    #((top) (top) (top) (top) (top))
                                    #("i11843"
                                      "i11844"
                                      "i11845"
                                      "i11846"
                                      "i11847"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("i11817")))
                                 (hygiene guile))
                              (cons '#(syntax-object
                                       x
                                       ((top)
                                        #(ribcage
                                          #(k
                                            docstring
                                            keyword
                                            pattern
                                            template)
                                          #((top) (top) (top) (top) (top))
                                          #("i11843"
                                            "i11844"
                                            "i11845"
                                            "i11846"
                                            "i11847"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i11817")))
                                       (hygiene guile))
                                    (cons #{k 11848}#
                                          (map (lambda (#{tmp 11856}#
                                                        #{tmp 11855}#)
                                                 (list (cons '#(syntax-object
                                                                dummy
                                                                ((top)
                                                                 #(ribcage
                                                                   #(k
                                                                     docstring
                                                                     keyword
                                                                     pattern
                                                                     template)
                                                                   #((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                   #("i11843"
                                                                     "i11844"
                                                                     "i11845"
                                                                     "i11846"
                                                                     "i11847"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("i11817")))
                                                                (hygiene
                                                                  guile))
                                                             #{tmp 11855}#)
                                                       (list '#(syntax-object
                                                                syntax
                                                                ((top)
                                                                 #(ribcage
                                                                   #(k
                                                                     docstring
                                                                     keyword
                                                                     pattern
                                                                     template)
                                                                   #((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                   #("i11843"
                                                                     "i11844"
                                                                     "i11845"
                                                                     "i11846"
                                                                     "i11847"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("i11817")))
                                                                (hygiene
                                                                  guile))
                                                             #{tmp 11856}#)))
                                               #{template 11852}#
                                               #{pattern 11851}#))))))
                #{tmp 11832}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{x 11816}#))))))))

(define define-syntax-rule
  (make-syntax-transformer
    'define-syntax-rule
    'macro
    (lambda (#{x 11857}#)
      (let ((#{tmp 11860}#
              ($sc-dispatch #{x 11857}# '(_ (any . any) any))))
        (if #{tmp 11860}#
          (@apply
            (lambda (#{name 11864}#
                     #{pattern 11865}#
                     #{template 11866}#)
              (list '#(syntax-object
                       define-syntax
                       ((top)
                        #(ribcage
                          #(name pattern template)
                          #((top) (top) (top))
                          #("i11861" "i11862" "i11863"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i11858")))
                       (hygiene guile))
                    #{name 11864}#
                    (list '#(syntax-object
                             syntax-rules
                             ((top)
                              #(ribcage
                                #(name pattern template)
                                #((top) (top) (top))
                                #("i11861" "i11862" "i11863"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i11858")))
                             (hygiene guile))
                          '()
                          (list (cons '#(syntax-object
                                         _
                                         ((top)
                                          #(ribcage
                                            #(name pattern template)
                                            #((top) (top) (top))
                                            #("i11861" "i11862" "i11863"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i11858")))
                                         (hygiene guile))
                                      #{pattern 11865}#)
                                #{template 11866}#))))
            #{tmp 11860}#)
          (let ((#{tmp 11867}#
                  ($sc-dispatch
                    #{x 11857}#
                    '(_ (any . any) any any))))
            (if (if #{tmp 11867}#
                  (@apply
                    (lambda (#{name 11872}#
                             #{pattern 11873}#
                             #{docstring 11874}#
                             #{template 11875}#)
                      (string? (syntax->datum #{docstring 11874}#)))
                    #{tmp 11867}#)
                  #f)
              (@apply
                (lambda (#{name 11880}#
                         #{pattern 11881}#
                         #{docstring 11882}#
                         #{template 11883}#)
                  (list '#(syntax-object
                           define-syntax
                           ((top)
                            #(ribcage
                              #(name pattern docstring template)
                              #((top) (top) (top) (top))
                              #("i11876" "i11877" "i11878" "i11879"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i11858")))
                           (hygiene guile))
                        #{name 11880}#
                        (list '#(syntax-object
                                 syntax-rules
                                 ((top)
                                  #(ribcage
                                    #(name pattern docstring template)
                                    #((top) (top) (top) (top))
                                    #("i11876" "i11877" "i11878" "i11879"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("i11858")))
                                 (hygiene guile))
                              '()
                              #{docstring 11882}#
                              (list (cons '#(syntax-object
                                             _
                                             ((top)
                                              #(ribcage
                                                #(name
                                                  pattern
                                                  docstring
                                                  template)
                                                #((top) (top) (top) (top))
                                                #("i11876"
                                                  "i11877"
                                                  "i11878"
                                                  "i11879"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(x)
                                                #((top))
                                                #("i11858")))
                                             (hygiene guile))
                                          #{pattern 11881}#)
                                    #{template 11883}#))))
                #{tmp 11867}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{x 11857}#))))))))

(define let*
  (make-syntax-transformer
    'let*
    'macro
    (lambda (#{x 11884}#)
      (let ((#{tmp 11887}#
              ($sc-dispatch
                #{x 11884}#
                '(any #(each (any any)) any . each-any))))
        (if (if #{tmp 11887}#
              (@apply
                (lambda (#{let* 11893}#
                         #{x 11894}#
                         #{v 11895}#
                         #{e1 11896}#
                         #{e2 11897}#)
                  (and-map identifier? #{x 11894}#))
                #{tmp 11887}#)
              #f)
          (@apply
            (lambda (#{let* 11904}#
                     #{x 11905}#
                     #{v 11906}#
                     #{e1 11907}#
                     #{e2 11908}#)
              (letrec*
                ((#{f 11911}#
                   (lambda (#{bindings 11912}#)
                     (if (null? #{bindings 11912}#)
                       (cons '#(syntax-object
                                let
                                ((top)
                                 #(ribcage () () ())
                                 #(ribcage
                                   #(f bindings)
                                   #((top) (top))
                                   #("i11909" "i11910"))
                                 #(ribcage
                                   #(let* x v e1 e2)
                                   #((top) (top) (top) (top) (top))
                                   #("i11899"
                                     "i11900"
                                     "i11901"
                                     "i11902"
                                     "i11903"))
                                 #(ribcage () () ())
                                 #(ribcage #(x) #((top)) #("i11885")))
                                (hygiene guile))
                             (cons '() (cons #{e1 11907}# #{e2 11908}#)))
                       (let ((#{tmp 11917}#
                               (list (#{f 11911}# (cdr #{bindings 11912}#))
                                     (car #{bindings 11912}#))))
                         (let ((#{tmp 11918}#
                                 ($sc-dispatch #{tmp 11917}# '(any any))))
                           (if #{tmp 11918}#
                             (@apply
                               (lambda (#{body 11921}# #{binding 11922}#)
                                 (list '#(syntax-object
                                          let
                                          ((top)
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(body binding)
                                             #((top) (top))
                                             #("i11919" "i11920"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(f bindings)
                                             #((top) (top))
                                             #("i11909" "i11910"))
                                           #(ribcage
                                             #(let* x v e1 e2)
                                             #((top) (top) (top) (top) (top))
                                             #("i11899"
                                               "i11900"
                                               "i11901"
                                               "i11902"
                                               "i11903"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x)
                                             #((top))
                                             #("i11885")))
                                          (hygiene guile))
                                       (list #{binding 11922}#)
                                       #{body 11921}#))
                               #{tmp 11918}#)
                             (syntax-violation
                               #f
                               "source expression failed to match any pattern"
                               #{tmp 11917}#))))))))
                (#{f 11911}# (map list #{x 11905}# #{v 11906}#))))
            #{tmp 11887}#)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            #{x 11884}#))))))

(define do
  (make-syntax-transformer
    'do
    'macro
    (lambda (#{orig-x 12105}#)
      (let ((#{tmp 12108}#
              ($sc-dispatch
                #{orig-x 12105}#
                '(_ #(each (any any . any))
                    (any . each-any)
                    .
                    each-any))))
        (if #{tmp 12108}#
          (@apply
            (lambda (#{var 12115}#
                     #{init 12116}#
                     #{step 12117}#
                     #{e0 12118}#
                     #{e1 12119}#
                     #{c 12120}#)
              (let ((#{tmp 12122}#
                      (map (lambda (#{v 12143}# #{s 12144}#)
                             (let ((#{tmp 12148}#
                                     ($sc-dispatch #{s 12144}# '())))
                               (if #{tmp 12148}#
                                 (@apply (lambda () #{v 12143}#) #{tmp 12148}#)
                                 (let ((#{tmp 12149}#
                                         ($sc-dispatch #{s 12144}# '(any))))
                                   (if #{tmp 12149}#
                                     (@apply
                                       (lambda (#{e 12151}#) #{e 12151}#)
                                       #{tmp 12149}#)
                                     (syntax-violation
                                       'do
                                       "bad step expression"
                                       #{orig-x 12105}#
                                       #{s 12144}#))))))
                           #{var 12115}#
                           #{step 12117}#)))
                (let ((#{tmp 12123}#
                        ($sc-dispatch #{tmp 12122}# 'each-any)))
                  (if #{tmp 12123}#
                    (@apply
                      (lambda (#{step 12125}#)
                        (let ((#{tmp 12127}# ($sc-dispatch #{e1 12119}# '())))
                          (if #{tmp 12127}#
                            (@apply
                              (lambda ()
                                (list '#(syntax-object
                                         let
                                         ((top)
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(step)
                                            #((top))
                                            #("i12124"))
                                          #(ribcage
                                            #(var init step e0 e1 c)
                                            #((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                            #("i12109"
                                              "i12110"
                                              "i12111"
                                              "i12112"
                                              "i12113"
                                              "i12114"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(orig-x)
                                            #((top))
                                            #("i12106")))
                                         (hygiene guile))
                                      '#(syntax-object
                                         doloop
                                         ((top)
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(step)
                                            #((top))
                                            #("i12124"))
                                          #(ribcage
                                            #(var init step e0 e1 c)
                                            #((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                            #("i12109"
                                              "i12110"
                                              "i12111"
                                              "i12112"
                                              "i12113"
                                              "i12114"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(orig-x)
                                            #((top))
                                            #("i12106")))
                                         (hygiene guile))
                                      (map list #{var 12115}# #{init 12116}#)
                                      (list '#(syntax-object
                                               if
                                               ((top)
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(step)
                                                  #((top))
                                                  #("i12124"))
                                                #(ribcage
                                                  #(var init step e0 e1 c)
                                                  #((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                  #("i12109"
                                                    "i12110"
                                                    "i12111"
                                                    "i12112"
                                                    "i12113"
                                                    "i12114"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(orig-x)
                                                  #((top))
                                                  #("i12106")))
                                               (hygiene guile))
                                            (list '#(syntax-object
                                                     not
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(step)
                                                        #((top))
                                                        #("i12124"))
                                                      #(ribcage
                                                        #(var
                                                          init
                                                          step
                                                          e0
                                                          e1
                                                          c)
                                                        #((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                        #("i12109"
                                                          "i12110"
                                                          "i12111"
                                                          "i12112"
                                                          "i12113"
                                                          "i12114"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(orig-x)
                                                        #((top))
                                                        #("i12106")))
                                                     (hygiene guile))
                                                  #{e0 12118}#)
                                            (cons '#(syntax-object
                                                     begin
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(step)
                                                        #((top))
                                                        #("i12124"))
                                                      #(ribcage
                                                        #(var
                                                          init
                                                          step
                                                          e0
                                                          e1
                                                          c)
                                                        #((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                        #("i12109"
                                                          "i12110"
                                                          "i12111"
                                                          "i12112"
                                                          "i12113"
                                                          "i12114"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(orig-x)
                                                        #((top))
                                                        #("i12106")))
                                                     (hygiene guile))
                                                  (append
                                                    #{c 12120}#
                                                    (list (cons '#(syntax-object
                                                                   doloop
                                                                   ((top)
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(step)
                                                                      #((top))
                                                                      #("i12124"))
                                                                    #(ribcage
                                                                      #(var
                                                                        init
                                                                        step
                                                                        e0
                                                                        e1
                                                                        c)
                                                                      #((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                      #("i12109"
                                                                        "i12110"
                                                                        "i12111"
                                                                        "i12112"
                                                                        "i12113"
                                                                        "i12114"))
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(orig-x)
                                                                      #((top))
                                                                      #("i12106")))
                                                                   (hygiene
                                                                     guile))
                                                                #{step 12125}#)))))))
                              #{tmp 12127}#)
                            (let ((#{tmp 12132}#
                                    ($sc-dispatch
                                      #{e1 12119}#
                                      '(any . each-any))))
                              (if #{tmp 12132}#
                                (@apply
                                  (lambda (#{e1 12135}# #{e2 12136}#)
                                    (list '#(syntax-object
                                             let
                                             ((top)
                                              #(ribcage
                                                #(e1 e2)
                                                #((top) (top))
                                                #("i12133" "i12134"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(step)
                                                #((top))
                                                #("i12124"))
                                              #(ribcage
                                                #(var init step e0 e1 c)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("i12109"
                                                  "i12110"
                                                  "i12111"
                                                  "i12112"
                                                  "i12113"
                                                  "i12114"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(orig-x)
                                                #((top))
                                                #("i12106")))
                                             (hygiene guile))
                                          '#(syntax-object
                                             doloop
                                             ((top)
                                              #(ribcage
                                                #(e1 e2)
                                                #((top) (top))
                                                #("i12133" "i12134"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(step)
                                                #((top))
                                                #("i12124"))
                                              #(ribcage
                                                #(var init step e0 e1 c)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("i12109"
                                                  "i12110"
                                                  "i12111"
                                                  "i12112"
                                                  "i12113"
                                                  "i12114"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(orig-x)
                                                #((top))
                                                #("i12106")))
                                             (hygiene guile))
                                          (map list
                                               #{var 12115}#
                                               #{init 12116}#)
                                          (list '#(syntax-object
                                                   if
                                                   ((top)
                                                    #(ribcage
                                                      #(e1 e2)
                                                      #((top) (top))
                                                      #("i12133" "i12134"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(step)
                                                      #((top))
                                                      #("i12124"))
                                                    #(ribcage
                                                      #(var init step e0 e1 c)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i12109"
                                                        "i12110"
                                                        "i12111"
                                                        "i12112"
                                                        "i12113"
                                                        "i12114"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(orig-x)
                                                      #((top))
                                                      #("i12106")))
                                                   (hygiene guile))
                                                #{e0 12118}#
                                                (cons '#(syntax-object
                                                         begin
                                                         ((top)
                                                          #(ribcage
                                                            #(e1 e2)
                                                            #((top) (top))
                                                            #("i12133"
                                                              "i12134"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(step)
                                                            #((top))
                                                            #("i12124"))
                                                          #(ribcage
                                                            #(var
                                                              init
                                                              step
                                                              e0
                                                              e1
                                                              c)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i12109"
                                                              "i12110"
                                                              "i12111"
                                                              "i12112"
                                                              "i12113"
                                                              "i12114"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(orig-x)
                                                            #((top))
                                                            #("i12106")))
                                                         (hygiene guile))
                                                      (cons #{e1 12135}#
                                                            #{e2 12136}#))
                                                (cons '#(syntax-object
                                                         begin
                                                         ((top)
                                                          #(ribcage
                                                            #(e1 e2)
                                                            #((top) (top))
                                                            #("i12133"
                                                              "i12134"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(step)
                                                            #((top))
                                                            #("i12124"))
                                                          #(ribcage
                                                            #(var
                                                              init
                                                              step
                                                              e0
                                                              e1
                                                              c)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i12109"
                                                              "i12110"
                                                              "i12111"
                                                              "i12112"
                                                              "i12113"
                                                              "i12114"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(orig-x)
                                                            #((top))
                                                            #("i12106")))
                                                         (hygiene guile))
                                                      (append
                                                        #{c 12120}#
                                                        (list (cons '#(syntax-object
                                                                       doloop
                                                                       ((top)
                                                                        #(ribcage
                                                                          #(e1
                                                                            e2)
                                                                          #((top)
                                                                            (top))
                                                                          #("i12133"
                                                                            "i12134"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(step)
                                                                          #((top))
                                                                          #("i12124"))
                                                                        #(ribcage
                                                                          #(var
                                                                            init
                                                                            step
                                                                            e0
                                                                            e1
                                                                            c)
                                                                          #((top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top))
                                                                          #("i12109"
                                                                            "i12110"
                                                                            "i12111"
                                                                            "i12112"
                                                                            "i12113"
                                                                            "i12114"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(orig-x)
                                                                          #((top))
                                                                          #("i12106")))
                                                                       (hygiene
                                                                         guile))
                                                                    #{step 12125}#)))))))
                                  #{tmp 12132}#)
                                (syntax-violation
                                  #f
                                  "source expression failed to match any pattern"
                                  #{e1 12119}#))))))
                      #{tmp 12123}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp 12122}#)))))
            #{tmp 12108}#)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            #{orig-x 12105}#))))))

(define quasiquote
  (make-syntax-transformer
    'quasiquote
    'macro
    (letrec*
      ((#{quasi 12157}#
         (lambda (#{p 12170}# #{lev 12171}#)
           (let ((#{tmp 12175}#
                   ($sc-dispatch
                     #{p 12170}#
                     '(#(free-id
                         #(syntax-object
                           unquote
                           ((top)
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("i12172" "i12173"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("i12168"
                               "i12166"
                               "i12164"
                               "i12162"
                               "i12160"
                               "i12158"
                               "i12156")))
                           (hygiene guile)))
                       any))))
             (if #{tmp 12175}#
               (@apply
                 (lambda (#{p 12177}#)
                   (if (= #{lev 12171}# 0)
                     (list '#(syntax-object
                              "value"
                              ((top)
                               #(ribcage #(p) #((top)) #("i12176"))
                               #(ribcage () () ())
                               #(ribcage
                                 #(p lev)
                                 #((top) (top))
                                 #("i12172" "i12173"))
                               #(ribcage
                                 (emit quasivector
                                       quasilist*
                                       quasiappend
                                       quasicons
                                       vquasi
                                       quasi)
                                 ((top) (top) (top) (top) (top) (top) (top))
                                 ("i12168"
                                  "i12166"
                                  "i12164"
                                  "i12162"
                                  "i12160"
                                  "i12158"
                                  "i12156")))
                              (hygiene guile))
                           #{p 12177}#)
                     (#{quasicons 12161}#
                       '(#(syntax-object
                           "quote"
                           ((top)
                            #(ribcage #(p) #((top)) #("i12176"))
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("i12172" "i12173"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("i12168"
                               "i12166"
                               "i12164"
                               "i12162"
                               "i12160"
                               "i12158"
                               "i12156")))
                           (hygiene guile))
                         #(syntax-object
                           unquote
                           ((top)
                            #(ribcage #(p) #((top)) #("i12176"))
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("i12172" "i12173"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("i12168"
                               "i12166"
                               "i12164"
                               "i12162"
                               "i12160"
                               "i12158"
                               "i12156")))
                           (hygiene guile)))
                       (#{quasi 12157}#
                         (list #{p 12177}#)
                         (#{1-}# #{lev 12171}#)))))
                 #{tmp 12175}#)
               (let ((#{tmp 12178}#
                       ($sc-dispatch
                         #{p 12170}#
                         '(#(free-id
                             #(syntax-object
                               quasiquote
                               ((top)
                                #(ribcage () () ())
                                #(ribcage
                                  #(p lev)
                                  #((top) (top))
                                  #("i12172" "i12173"))
                                #(ribcage
                                  (emit quasivector
                                        quasilist*
                                        quasiappend
                                        quasicons
                                        vquasi
                                        quasi)
                                  ((top) (top) (top) (top) (top) (top) (top))
                                  ("i12168"
                                   "i12166"
                                   "i12164"
                                   "i12162"
                                   "i12160"
                                   "i12158"
                                   "i12156")))
                               (hygiene guile)))
                           any))))
                 (if #{tmp 12178}#
                   (@apply
                     (lambda (#{p 12180}#)
                       (#{quasicons 12161}#
                         '(#(syntax-object
                             "quote"
                             ((top)
                              #(ribcage #(p) #((top)) #("i12179"))
                              #(ribcage () () ())
                              #(ribcage
                                #(p lev)
                                #((top) (top))
                                #("i12172" "i12173"))
                              #(ribcage
                                (emit quasivector
                                      quasilist*
                                      quasiappend
                                      quasicons
                                      vquasi
                                      quasi)
                                ((top) (top) (top) (top) (top) (top) (top))
                                ("i12168"
                                 "i12166"
                                 "i12164"
                                 "i12162"
                                 "i12160"
                                 "i12158"
                                 "i12156")))
                             (hygiene guile))
                           #(syntax-object
                             quasiquote
                             ((top)
                              #(ribcage #(p) #((top)) #("i12179"))
                              #(ribcage () () ())
                              #(ribcage
                                #(p lev)
                                #((top) (top))
                                #("i12172" "i12173"))
                              #(ribcage
                                (emit quasivector
                                      quasilist*
                                      quasiappend
                                      quasicons
                                      vquasi
                                      quasi)
                                ((top) (top) (top) (top) (top) (top) (top))
                                ("i12168"
                                 "i12166"
                                 "i12164"
                                 "i12162"
                                 "i12160"
                                 "i12158"
                                 "i12156")))
                             (hygiene guile)))
                         (#{quasi 12157}#
                           (list #{p 12180}#)
                           (#{1+}# #{lev 12171}#))))
                     #{tmp 12178}#)
                   (let ((#{tmp 12181}#
                           ($sc-dispatch #{p 12170}# '(any . any))))
                     (if #{tmp 12181}#
                       (@apply
                         (lambda (#{p 12184}# #{q 12185}#)
                           (let ((#{tmp 12187}#
                                   ($sc-dispatch
                                     #{p 12184}#
                                     '(#(free-id
                                         #(syntax-object
                                           unquote
                                           ((top)
                                            #(ribcage
                                              #(p q)
                                              #((top) (top))
                                              #("i12182" "i12183"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(p lev)
                                              #((top) (top))
                                              #("i12172" "i12173"))
                                            #(ribcage
                                              (emit quasivector
                                                    quasilist*
                                                    quasiappend
                                                    quasicons
                                                    vquasi
                                                    quasi)
                                              ((top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top))
                                              ("i12168"
                                               "i12166"
                                               "i12164"
                                               "i12162"
                                               "i12160"
                                               "i12158"
                                               "i12156")))
                                           (hygiene guile)))
                                       .
                                       each-any))))
                             (if #{tmp 12187}#
                               (@apply
                                 (lambda (#{p 12189}#)
                                   (if (= #{lev 12171}# 0)
                                     (#{quasilist* 12165}#
                                       (map (lambda (#{tmp 12190}#)
                                              (list '#(syntax-object
                                                       "value"
                                                       ((top)
                                                        #(ribcage
                                                          #(p)
                                                          #((top))
                                                          #("i12188"))
                                                        #(ribcage
                                                          #(p q)
                                                          #((top) (top))
                                                          #("i12182" "i12183"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(p lev)
                                                          #((top) (top))
                                                          #("i12172" "i12173"))
                                                        #(ribcage
                                                          (emit quasivector
                                                                quasilist*
                                                                quasiappend
                                                                quasicons
                                                                vquasi
                                                                quasi)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("i12168"
                                                           "i12166"
                                                           "i12164"
                                                           "i12162"
                                                           "i12160"
                                                           "i12158"
                                                           "i12156")))
                                                       (hygiene guile))
                                                    #{tmp 12190}#))
                                            #{p 12189}#)
                                       (#{quasi 12157}#
                                         #{q 12185}#
                                         #{lev 12171}#))
                                     (#{quasicons 12161}#
                                       (#{quasicons 12161}#
                                         '(#(syntax-object
                                             "quote"
                                             ((top)
                                              #(ribcage
                                                #(p)
                                                #((top))
                                                #("i12188"))
                                              #(ribcage
                                                #(p q)
                                                #((top) (top))
                                                #("i12182" "i12183"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(p lev)
                                                #((top) (top))
                                                #("i12172" "i12173"))
                                              #(ribcage
                                                (emit quasivector
                                                      quasilist*
                                                      quasiappend
                                                      quasicons
                                                      vquasi
                                                      quasi)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("i12168"
                                                 "i12166"
                                                 "i12164"
                                                 "i12162"
                                                 "i12160"
                                                 "i12158"
                                                 "i12156")))
                                             (hygiene guile))
                                           #(syntax-object
                                             unquote
                                             ((top)
                                              #(ribcage
                                                #(p)
                                                #((top))
                                                #("i12188"))
                                              #(ribcage
                                                #(p q)
                                                #((top) (top))
                                                #("i12182" "i12183"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(p lev)
                                                #((top) (top))
                                                #("i12172" "i12173"))
                                              #(ribcage
                                                (emit quasivector
                                                      quasilist*
                                                      quasiappend
                                                      quasicons
                                                      vquasi
                                                      quasi)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("i12168"
                                                 "i12166"
                                                 "i12164"
                                                 "i12162"
                                                 "i12160"
                                                 "i12158"
                                                 "i12156")))
                                             (hygiene guile)))
                                         (#{quasi 12157}#
                                           #{p 12189}#
                                           (#{1-}# #{lev 12171}#)))
                                       (#{quasi 12157}#
                                         #{q 12185}#
                                         #{lev 12171}#))))
                                 #{tmp 12187}#)
                               (let ((#{tmp 12192}#
                                       ($sc-dispatch
                                         #{p 12184}#
                                         '(#(free-id
                                             #(syntax-object
                                               unquote-splicing
                                               ((top)
                                                #(ribcage
                                                  #(p q)
                                                  #((top) (top))
                                                  #("i12182" "i12183"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(p lev)
                                                  #((top) (top))
                                                  #("i12172" "i12173"))
                                                #(ribcage
                                                  (emit quasivector
                                                        quasilist*
                                                        quasiappend
                                                        quasicons
                                                        vquasi
                                                        quasi)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("i12168"
                                                   "i12166"
                                                   "i12164"
                                                   "i12162"
                                                   "i12160"
                                                   "i12158"
                                                   "i12156")))
                                               (hygiene guile)))
                                           .
                                           each-any))))
                                 (if #{tmp 12192}#
                                   (@apply
                                     (lambda (#{p 12194}#)
                                       (if (= #{lev 12171}# 0)
                                         (#{quasiappend 12163}#
                                           (map (lambda (#{tmp 12195}#)
                                                  (list '#(syntax-object
                                                           "value"
                                                           ((top)
                                                            #(ribcage
                                                              #(p)
                                                              #((top))
                                                              #("i12193"))
                                                            #(ribcage
                                                              #(p q)
                                                              #((top) (top))
                                                              #("i12182"
                                                                "i12183"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(p lev)
                                                              #((top) (top))
                                                              #("i12172"
                                                                "i12173"))
                                                            #(ribcage
                                                              (emit quasivector
                                                                    quasilist*
                                                                    quasiappend
                                                                    quasicons
                                                                    vquasi
                                                                    quasi)
                                                              ((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                              ("i12168"
                                                               "i12166"
                                                               "i12164"
                                                               "i12162"
                                                               "i12160"
                                                               "i12158"
                                                               "i12156")))
                                                           (hygiene guile))
                                                        #{tmp 12195}#))
                                                #{p 12194}#)
                                           (#{quasi 12157}#
                                             #{q 12185}#
                                             #{lev 12171}#))
                                         (#{quasicons 12161}#
                                           (#{quasicons 12161}#
                                             '(#(syntax-object
                                                 "quote"
                                                 ((top)
                                                  #(ribcage
                                                    #(p)
                                                    #((top))
                                                    #("i12193"))
                                                  #(ribcage
                                                    #(p q)
                                                    #((top) (top))
                                                    #("i12182" "i12183"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(p lev)
                                                    #((top) (top))
                                                    #("i12172" "i12173"))
                                                  #(ribcage
                                                    (emit quasivector
                                                          quasilist*
                                                          quasiappend
                                                          quasicons
                                                          vquasi
                                                          quasi)
                                                    ((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                    ("i12168"
                                                     "i12166"
                                                     "i12164"
                                                     "i12162"
                                                     "i12160"
                                                     "i12158"
                                                     "i12156")))
                                                 (hygiene guile))
                                               #(syntax-object
                                                 unquote-splicing
                                                 ((top)
                                                  #(ribcage
                                                    #(p)
                                                    #((top))
                                                    #("i12193"))
                                                  #(ribcage
                                                    #(p q)
                                                    #((top) (top))
                                                    #("i12182" "i12183"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(p lev)
                                                    #((top) (top))
                                                    #("i12172" "i12173"))
                                                  #(ribcage
                                                    (emit quasivector
                                                          quasilist*
                                                          quasiappend
                                                          quasicons
                                                          vquasi
                                                          quasi)
                                                    ((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                    ("i12168"
                                                     "i12166"
                                                     "i12164"
                                                     "i12162"
                                                     "i12160"
                                                     "i12158"
                                                     "i12156")))
                                                 (hygiene guile)))
                                             (#{quasi 12157}#
                                               #{p 12194}#
                                               (#{1-}# #{lev 12171}#)))
                                           (#{quasi 12157}#
                                             #{q 12185}#
                                             #{lev 12171}#))))
                                     #{tmp 12192}#)
                                   (#{quasicons 12161}#
                                     (#{quasi 12157}#
                                       #{p 12184}#
                                       #{lev 12171}#)
                                     (#{quasi 12157}#
                                       #{q 12185}#
                                       #{lev 12171}#)))))))
                         #{tmp 12181}#)
                       (let ((#{tmp 12199}#
                               ($sc-dispatch #{p 12170}# '#(vector each-any))))
                         (if #{tmp 12199}#
                           (@apply
                             (lambda (#{x 12201}#)
                               (#{quasivector 12167}#
                                 (#{vquasi 12159}# #{x 12201}# #{lev 12171}#)))
                             #{tmp 12199}#)
                           (list '#(syntax-object
                                    "quote"
                                    ((top)
                                     #(ribcage #(p) #((top)) #("i12203"))
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(p lev)
                                       #((top) (top))
                                       #("i12172" "i12173"))
                                     #(ribcage
                                       (emit quasivector
                                             quasilist*
                                             quasiappend
                                             quasicons
                                             vquasi
                                             quasi)
                                       ((top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top))
                                       ("i12168"
                                        "i12166"
                                        "i12164"
                                        "i12162"
                                        "i12160"
                                        "i12158"
                                        "i12156")))
                                    (hygiene guile))
                                 #{p 12170}#)))))))))))
       (#{vquasi 12159}#
         (lambda (#{p 12205}# #{lev 12206}#)
           (let ((#{tmp 12210}#
                   ($sc-dispatch #{p 12205}# '(any . any))))
             (if #{tmp 12210}#
               (@apply
                 (lambda (#{p 12213}# #{q 12214}#)
                   (let ((#{tmp 12216}#
                           ($sc-dispatch
                             #{p 12213}#
                             '(#(free-id
                                 #(syntax-object
                                   unquote
                                   ((top)
                                    #(ribcage
                                      #(p q)
                                      #((top) (top))
                                      #("i12211" "i12212"))
                                    #(ribcage () () ())
                                    #(ribcage
                                      #(p lev)
                                      #((top) (top))
                                      #("i12207" "i12208"))
                                    #(ribcage
                                      (emit quasivector
                                            quasilist*
                                            quasiappend
                                            quasicons
                                            vquasi
                                            quasi)
                                      ((top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top))
                                      ("i12168"
                                       "i12166"
                                       "i12164"
                                       "i12162"
                                       "i12160"
                                       "i12158"
                                       "i12156")))
                                   (hygiene guile)))
                               .
                               each-any))))
                     (if #{tmp 12216}#
                       (@apply
                         (lambda (#{p 12218}#)
                           (if (= #{lev 12206}# 0)
                             (#{quasilist* 12165}#
                               (map (lambda (#{tmp 12219}#)
                                      (list '#(syntax-object
                                               "value"
                                               ((top)
                                                #(ribcage
                                                  #(p)
                                                  #((top))
                                                  #("i12217"))
                                                #(ribcage
                                                  #(p q)
                                                  #((top) (top))
                                                  #("i12211" "i12212"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(p lev)
                                                  #((top) (top))
                                                  #("i12207" "i12208"))
                                                #(ribcage
                                                  (emit quasivector
                                                        quasilist*
                                                        quasiappend
                                                        quasicons
                                                        vquasi
                                                        quasi)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("i12168"
                                                   "i12166"
                                                   "i12164"
                                                   "i12162"
                                                   "i12160"
                                                   "i12158"
                                                   "i12156")))
                                               (hygiene guile))
                                            #{tmp 12219}#))
                                    #{p 12218}#)
                               (#{vquasi 12159}# #{q 12214}# #{lev 12206}#))
                             (#{quasicons 12161}#
                               (#{quasicons 12161}#
                                 '(#(syntax-object
                                     "quote"
                                     ((top)
                                      #(ribcage #(p) #((top)) #("i12217"))
                                      #(ribcage
                                        #(p q)
                                        #((top) (top))
                                        #("i12211" "i12212"))
                                      #(ribcage () () ())
                                      #(ribcage
                                        #(p lev)
                                        #((top) (top))
                                        #("i12207" "i12208"))
                                      #(ribcage
                                        (emit quasivector
                                              quasilist*
                                              quasiappend
                                              quasicons
                                              vquasi
                                              quasi)
                                        ((top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top))
                                        ("i12168"
                                         "i12166"
                                         "i12164"
                                         "i12162"
                                         "i12160"
                                         "i12158"
                                         "i12156")))
                                     (hygiene guile))
                                   #(syntax-object
                                     unquote
                                     ((top)
                                      #(ribcage #(p) #((top)) #("i12217"))
                                      #(ribcage
                                        #(p q)
                                        #((top) (top))
                                        #("i12211" "i12212"))
                                      #(ribcage () () ())
                                      #(ribcage
                                        #(p lev)
                                        #((top) (top))
                                        #("i12207" "i12208"))
                                      #(ribcage
                                        (emit quasivector
                                              quasilist*
                                              quasiappend
                                              quasicons
                                              vquasi
                                              quasi)
                                        ((top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top))
                                        ("i12168"
                                         "i12166"
                                         "i12164"
                                         "i12162"
                                         "i12160"
                                         "i12158"
                                         "i12156")))
                                     (hygiene guile)))
                                 (#{quasi 12157}#
                                   #{p 12218}#
                                   (#{1-}# #{lev 12206}#)))
                               (#{vquasi 12159}# #{q 12214}# #{lev 12206}#))))
                         #{tmp 12216}#)
                       (let ((#{tmp 12221}#
                               ($sc-dispatch
                                 #{p 12213}#
                                 '(#(free-id
                                     #(syntax-object
                                       unquote-splicing
                                       ((top)
                                        #(ribcage
                                          #(p q)
                                          #((top) (top))
                                          #("i12211" "i12212"))
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(p lev)
                                          #((top) (top))
                                          #("i12207" "i12208"))
                                        #(ribcage
                                          (emit quasivector
                                                quasilist*
                                                quasiappend
                                                quasicons
                                                vquasi
                                                quasi)
                                          ((top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top))
                                          ("i12168"
                                           "i12166"
                                           "i12164"
                                           "i12162"
                                           "i12160"
                                           "i12158"
                                           "i12156")))
                                       (hygiene guile)))
                                   .
                                   each-any))))
                         (if #{tmp 12221}#
                           (@apply
                             (lambda (#{p 12223}#)
                               (if (= #{lev 12206}# 0)
                                 (#{quasiappend 12163}#
                                   (map (lambda (#{tmp 12224}#)
                                          (list '#(syntax-object
                                                   "value"
                                                   ((top)
                                                    #(ribcage
                                                      #(p)
                                                      #((top))
                                                      #("i12222"))
                                                    #(ribcage
                                                      #(p q)
                                                      #((top) (top))
                                                      #("i12211" "i12212"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(p lev)
                                                      #((top) (top))
                                                      #("i12207" "i12208"))
                                                    #(ribcage
                                                      (emit quasivector
                                                            quasilist*
                                                            quasiappend
                                                            quasicons
                                                            vquasi
                                                            quasi)
                                                      ((top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top))
                                                      ("i12168"
                                                       "i12166"
                                                       "i12164"
                                                       "i12162"
                                                       "i12160"
                                                       "i12158"
                                                       "i12156")))
                                                   (hygiene guile))
                                                #{tmp 12224}#))
                                        #{p 12223}#)
                                   (#{vquasi 12159}#
                                     #{q 12214}#
                                     #{lev 12206}#))
                                 (#{quasicons 12161}#
                                   (#{quasicons 12161}#
                                     '(#(syntax-object
                                         "quote"
                                         ((top)
                                          #(ribcage #(p) #((top)) #("i12222"))
                                          #(ribcage
                                            #(p q)
                                            #((top) (top))
                                            #("i12211" "i12212"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(p lev)
                                            #((top) (top))
                                            #("i12207" "i12208"))
                                          #(ribcage
                                            (emit quasivector
                                                  quasilist*
                                                  quasiappend
                                                  quasicons
                                                  vquasi
                                                  quasi)
                                            ((top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top))
                                            ("i12168"
                                             "i12166"
                                             "i12164"
                                             "i12162"
                                             "i12160"
                                             "i12158"
                                             "i12156")))
                                         (hygiene guile))
                                       #(syntax-object
                                         unquote-splicing
                                         ((top)
                                          #(ribcage #(p) #((top)) #("i12222"))
                                          #(ribcage
                                            #(p q)
                                            #((top) (top))
                                            #("i12211" "i12212"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(p lev)
                                            #((top) (top))
                                            #("i12207" "i12208"))
                                          #(ribcage
                                            (emit quasivector
                                                  quasilist*
                                                  quasiappend
                                                  quasicons
                                                  vquasi
                                                  quasi)
                                            ((top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top))
                                            ("i12168"
                                             "i12166"
                                             "i12164"
                                             "i12162"
                                             "i12160"
                                             "i12158"
                                             "i12156")))
                                         (hygiene guile)))
                                     (#{quasi 12157}#
                                       #{p 12223}#
                                       (#{1-}# #{lev 12206}#)))
                                   (#{vquasi 12159}#
                                     #{q 12214}#
                                     #{lev 12206}#))))
                             #{tmp 12221}#)
                           (#{quasicons 12161}#
                             (#{quasi 12157}# #{p 12213}# #{lev 12206}#)
                             (#{vquasi 12159}# #{q 12214}# #{lev 12206}#)))))))
                 #{tmp 12210}#)
               (let ((#{tmp 12228}# ($sc-dispatch #{p 12205}# '())))
                 (if #{tmp 12228}#
                   (@apply
                     (lambda ()
                       '(#(syntax-object
                           "quote"
                           ((top)
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("i12207" "i12208"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("i12168"
                               "i12166"
                               "i12164"
                               "i12162"
                               "i12160"
                               "i12158"
                               "i12156")))
                           (hygiene guile))
                         ()))
                     #{tmp 12228}#)
                   (syntax-violation
                     #f
                     "source expression failed to match any pattern"
                     #{p 12205}#)))))))
       (#{quasicons 12161}#
         (lambda (#{x 12229}# #{y 12230}#)
           (let ((#{tmp 12234}# (list #{x 12229}# #{y 12230}#)))
             (let ((#{tmp 12235}#
                     ($sc-dispatch #{tmp 12234}# '(any any))))
               (if #{tmp 12235}#
                 (@apply
                   (lambda (#{x 12238}# #{y 12239}#)
                     (let ((#{tmp 12241}#
                             ($sc-dispatch
                               #{y 12239}#
                               '(#(atom "quote") any))))
                       (if #{tmp 12241}#
                         (@apply
                           (lambda (#{dy 12243}#)
                             (let ((#{tmp 12245}#
                                     ($sc-dispatch
                                       #{x 12238}#
                                       '(#(atom "quote") any))))
                               (if #{tmp 12245}#
                                 (@apply
                                   (lambda (#{dx 12247}#)
                                     (list '#(syntax-object
                                              "quote"
                                              ((top)
                                               #(ribcage
                                                 #(dx)
                                                 #((top))
                                                 #("i12246"))
                                               #(ribcage
                                                 #(dy)
                                                 #((top))
                                                 #("i12242"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("i12236" "i12237"))
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("i12231" "i12232"))
                                               #(ribcage
                                                 (emit quasivector
                                                       quasilist*
                                                       quasiappend
                                                       quasicons
                                                       vquasi
                                                       quasi)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("i12168"
                                                  "i12166"
                                                  "i12164"
                                                  "i12162"
                                                  "i12160"
                                                  "i12158"
                                                  "i12156")))
                                              (hygiene guile))
                                           (cons #{dx 12247}# #{dy 12243}#)))
                                   #{tmp 12245}#)
                                 (if (null? #{dy 12243}#)
                                   (list '#(syntax-object
                                            "list"
                                            ((top)
                                             #(ribcage
                                               #(_)
                                               #((top))
                                               #("i12248"))
                                             #(ribcage
                                               #(dy)
                                               #((top))
                                               #("i12242"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("i12236" "i12237"))
                                             #(ribcage () () ())
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("i12231" "i12232"))
                                             #(ribcage
                                               (emit quasivector
                                                     quasilist*
                                                     quasiappend
                                                     quasicons
                                                     vquasi
                                                     quasi)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("i12168"
                                                "i12166"
                                                "i12164"
                                                "i12162"
                                                "i12160"
                                                "i12158"
                                                "i12156")))
                                            (hygiene guile))
                                         #{x 12238}#)
                                   (list '#(syntax-object
                                            "list*"
                                            ((top)
                                             #(ribcage
                                               #(_)
                                               #((top))
                                               #("i12248"))
                                             #(ribcage
                                               #(dy)
                                               #((top))
                                               #("i12242"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("i12236" "i12237"))
                                             #(ribcage () () ())
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("i12231" "i12232"))
                                             #(ribcage
                                               (emit quasivector
                                                     quasilist*
                                                     quasiappend
                                                     quasicons
                                                     vquasi
                                                     quasi)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("i12168"
                                                "i12166"
                                                "i12164"
                                                "i12162"
                                                "i12160"
                                                "i12158"
                                                "i12156")))
                                            (hygiene guile))
                                         #{x 12238}#
                                         #{y 12239}#)))))
                           #{tmp 12241}#)
                         (let ((#{tmp 12250}#
                                 ($sc-dispatch
                                   #{y 12239}#
                                   '(#(atom "list") . any))))
                           (if #{tmp 12250}#
                             (@apply
                               (lambda (#{stuff 12252}#)
                                 (cons '#(syntax-object
                                          "list"
                                          ((top)
                                           #(ribcage
                                             #(stuff)
                                             #((top))
                                             #("i12251"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("i12236" "i12237"))
                                           #(ribcage () () ())
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("i12231" "i12232"))
                                           #(ribcage
                                             (emit quasivector
                                                   quasilist*
                                                   quasiappend
                                                   quasicons
                                                   vquasi
                                                   quasi)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("i12168"
                                              "i12166"
                                              "i12164"
                                              "i12162"
                                              "i12160"
                                              "i12158"
                                              "i12156")))
                                          (hygiene guile))
                                       (cons #{x 12238}# #{stuff 12252}#)))
                               #{tmp 12250}#)
                             (let ((#{tmp 12253}#
                                     ($sc-dispatch
                                       #{y 12239}#
                                       '(#(atom "list*") . any))))
                               (if #{tmp 12253}#
                                 (@apply
                                   (lambda (#{stuff 12255}#)
                                     (cons '#(syntax-object
                                              "list*"
                                              ((top)
                                               #(ribcage
                                                 #(stuff)
                                                 #((top))
                                                 #("i12254"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("i12236" "i12237"))
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("i12231" "i12232"))
                                               #(ribcage
                                                 (emit quasivector
                                                       quasilist*
                                                       quasiappend
                                                       quasicons
                                                       vquasi
                                                       quasi)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("i12168"
                                                  "i12166"
                                                  "i12164"
                                                  "i12162"
                                                  "i12160"
                                                  "i12158"
                                                  "i12156")))
                                              (hygiene guile))
                                           (cons #{x 12238}# #{stuff 12255}#)))
                                   #{tmp 12253}#)
                                 (list '#(syntax-object
                                          "list*"
                                          ((top)
                                           #(ribcage #(_) #((top)) #("i12256"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("i12236" "i12237"))
                                           #(ribcage () () ())
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("i12231" "i12232"))
                                           #(ribcage
                                             (emit quasivector
                                                   quasilist*
                                                   quasiappend
                                                   quasicons
                                                   vquasi
                                                   quasi)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("i12168"
                                              "i12166"
                                              "i12164"
                                              "i12162"
                                              "i12160"
                                              "i12158"
                                              "i12156")))
                                          (hygiene guile))
                                       #{x 12238}#
                                       #{y 12239}#))))))))
                   #{tmp 12235}#)
                 (syntax-violation
                   #f
                   "source expression failed to match any pattern"
                   #{tmp 12234}#))))))
       (#{quasiappend 12163}#
         (lambda (#{x 12258}# #{y 12259}#)
           (let ((#{tmp 12263}#
                   ($sc-dispatch #{y 12259}# '(#(atom "quote") ()))))
             (if #{tmp 12263}#
               (@apply
                 (lambda ()
                   (if (null? #{x 12258}#)
                     '(#(syntax-object
                         "quote"
                         ((top)
                          #(ribcage () () ())
                          #(ribcage
                            #(x y)
                            #((top) (top))
                            #("i12260" "i12261"))
                          #(ribcage
                            (emit quasivector
                                  quasilist*
                                  quasiappend
                                  quasicons
                                  vquasi
                                  quasi)
                            ((top) (top) (top) (top) (top) (top) (top))
                            ("i12168"
                             "i12166"
                             "i12164"
                             "i12162"
                             "i12160"
                             "i12158"
                             "i12156")))
                         (hygiene guile))
                       ())
                     (if (null? (cdr #{x 12258}#))
                       (car #{x 12258}#)
                       (let ((#{tmp 12271}#
                               ($sc-dispatch #{x 12258}# 'each-any)))
                         (if #{tmp 12271}#
                           (@apply
                             (lambda (#{p 12273}#)
                               (cons '#(syntax-object
                                        "append"
                                        ((top)
                                         #(ribcage () () ())
                                         #(ribcage #(p) #((top)) #("i12272"))
                                         #(ribcage () () ())
                                         #(ribcage
                                           #(x y)
                                           #((top) (top))
                                           #("i12260" "i12261"))
                                         #(ribcage
                                           (emit quasivector
                                                 quasilist*
                                                 quasiappend
                                                 quasicons
                                                 vquasi
                                                 quasi)
                                           ((top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top))
                                           ("i12168"
                                            "i12166"
                                            "i12164"
                                            "i12162"
                                            "i12160"
                                            "i12158"
                                            "i12156")))
                                        (hygiene guile))
                                     #{p 12273}#))
                             #{tmp 12271}#)
                           (syntax-violation
                             #f
                             "source expression failed to match any pattern"
                             #{x 12258}#))))))
                 #{tmp 12263}#)
               (if (null? #{x 12258}#)
                 #{y 12259}#
                 (let ((#{tmp 12281}# (list #{x 12258}# #{y 12259}#)))
                   (let ((#{tmp 12282}#
                           ($sc-dispatch #{tmp 12281}# '(each-any any))))
                     (if #{tmp 12282}#
                       (@apply
                         (lambda (#{p 12285}# #{y 12286}#)
                           (cons '#(syntax-object
                                    "append"
                                    ((top)
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(p y)
                                       #((top) (top))
                                       #("i12283" "i12284"))
                                     #(ribcage #(_) #((top)) #("i12275"))
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(x y)
                                       #((top) (top))
                                       #("i12260" "i12261"))
                                     #(ribcage
                                       (emit quasivector
                                             quasilist*
                                             quasiappend
                                             quasicons
                                             vquasi
                                             quasi)
                                       ((top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top))
                                       ("i12168"
                                        "i12166"
                                        "i12164"
                                        "i12162"
                                        "i12160"
                                        "i12158"
                                        "i12156")))
                                    (hygiene guile))
                                 (append #{p 12285}# (list #{y 12286}#))))
                         #{tmp 12282}#)
                       (syntax-violation
                         #f
                         "source expression failed to match any pattern"
                         #{tmp 12281}#)))))))))
       (#{quasilist* 12165}#
         (lambda (#{x 12288}# #{y 12289}#)
           (letrec*
             ((#{f 12294}#
                (lambda (#{x 12295}#)
                  (if (null? #{x 12295}#)
                    #{y 12289}#
                    (#{quasicons 12161}#
                      (car #{x 12295}#)
                      (#{f 12294}# (cdr #{x 12295}#)))))))
             (#{f 12294}# #{x 12288}#))))
       (#{quasivector 12167}#
         (lambda (#{x 12296}#)
           (let ((#{tmp 12299}#
                   ($sc-dispatch
                     #{x 12296}#
                     '(#(atom "quote") each-any))))
             (if #{tmp 12299}#
               (@apply
                 (lambda (#{x 12301}#)
                   (list '#(syntax-object
                            "quote"
                            ((top)
                             #(ribcage #(x) #((top)) #("i12300"))
                             #(ribcage () () ())
                             #(ribcage #(x) #((top)) #("i12297"))
                             #(ribcage
                               (emit quasivector
                                     quasilist*
                                     quasiappend
                                     quasicons
                                     vquasi
                                     quasi)
                               ((top) (top) (top) (top) (top) (top) (top))
                               ("i12168"
                                "i12166"
                                "i12164"
                                "i12162"
                                "i12160"
                                "i12158"
                                "i12156")))
                            (hygiene guile))
                         (list->vector #{x 12301}#)))
                 #{tmp 12299}#)
               (letrec*
                 ((#{f 12308}#
                    (lambda (#{y 12309}# #{k 12310}#)
                      (let ((#{tmp 12322}#
                              ($sc-dispatch
                                #{y 12309}#
                                '(#(atom "quote") each-any))))
                        (if #{tmp 12322}#
                          (@apply
                            (lambda (#{y 12324}#)
                              (#{k 12310}#
                                (map (lambda (#{tmp 12325}#)
                                       (list '#(syntax-object
                                                "quote"
                                                ((top)
                                                 #(ribcage
                                                   #(y)
                                                   #((top))
                                                   #("i12323"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(f y k)
                                                   #((top) (top) (top))
                                                   #("i12305"
                                                     "i12306"
                                                     "i12307"))
                                                 #(ribcage
                                                   #(_)
                                                   #((top))
                                                   #("i12303"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("i12297"))
                                                 #(ribcage
                                                   (emit quasivector
                                                         quasilist*
                                                         quasiappend
                                                         quasicons
                                                         vquasi
                                                         quasi)
                                                   ((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                   ("i12168"
                                                    "i12166"
                                                    "i12164"
                                                    "i12162"
                                                    "i12160"
                                                    "i12158"
                                                    "i12156")))
                                                (hygiene guile))
                                             #{tmp 12325}#))
                                     #{y 12324}#)))
                            #{tmp 12322}#)
                          (let ((#{tmp 12326}#
                                  ($sc-dispatch
                                    #{y 12309}#
                                    '(#(atom "list") . each-any))))
                            (if #{tmp 12326}#
                              (@apply
                                (lambda (#{y 12328}#)
                                  (#{k 12310}# #{y 12328}#))
                                #{tmp 12326}#)
                              (let ((#{tmp 12330}#
                                      ($sc-dispatch
                                        #{y 12309}#
                                        '(#(atom "list*")
                                          .
                                          #(each+ any (any) ())))))
                                (if #{tmp 12330}#
                                  (@apply
                                    (lambda (#{y 12333}# #{z 12334}#)
                                      (#{f 12308}#
                                        #{z 12334}#
                                        (lambda (#{ls 12335}#)
                                          (#{k 12310}#
                                            (append
                                              #{y 12333}#
                                              #{ls 12335}#)))))
                                    #{tmp 12330}#)
                                  (list '#(syntax-object
                                           "list->vector"
                                           ((top)
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(#{ g12340}#)
                                              #((m12341 top))
                                              #("i12344"))
                                            #(ribcage
                                              #(else)
                                              #((top))
                                              #("i12338"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(f y k)
                                              #((top) (top) (top))
                                              #("i12305" "i12306" "i12307"))
                                            #(ribcage
                                              #(_)
                                              #((top))
                                              #("i12303"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(x)
                                              #((top))
                                              #("i12297"))
                                            #(ribcage
                                              (emit quasivector
                                                    quasilist*
                                                    quasiappend
                                                    quasicons
                                                    vquasi
                                                    quasi)
                                              ((top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top))
                                              ("i12168"
                                               "i12166"
                                               "i12164"
                                               "i12162"
                                               "i12160"
                                               "i12158"
                                               "i12156")))
                                           (hygiene guile))
                                        #{x 12296}#))))))))))
                 (#{f 12308}#
                   #{x 12296}#
                   (lambda (#{ls 12311}#)
                     (let ((#{tmp 12317}#
                             ($sc-dispatch #{ls 12311}# 'each-any)))
                       (if #{tmp 12317}#
                         (@apply
                           (lambda (#{ g12313 12319}#)
                             (cons '#(syntax-object
                                      "vector"
                                      ((top)
                                       #(ribcage () () ())
                                       #(ribcage
                                         #(#{ g12313}#)
                                         #((m12314 top))
                                         #("i12318"))
                                       #(ribcage () () ())
                                       #(ribcage () () ())
                                       #(ribcage () () ())
                                       #(ribcage #(ls) #((top)) #("i12312"))
                                       #(ribcage #(_) #((top)) #("i12303"))
                                       #(ribcage () () ())
                                       #(ribcage #(x) #((top)) #("i12297"))
                                       #(ribcage
                                         (emit quasivector
                                               quasilist*
                                               quasiappend
                                               quasicons
                                               vquasi
                                               quasi)
                                         ((top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top)
                                          (top))
                                         ("i12168"
                                          "i12166"
                                          "i12164"
                                          "i12162"
                                          "i12160"
                                          "i12158"
                                          "i12156")))
                                      (hygiene guile))
                                   #{ g12313 12319}#))
                           #{tmp 12317}#)
                         (syntax-violation
                           #f
                           "source expression failed to match any pattern"
                           #{ls 12311}#))))))))))
       (#{emit 12169}#
         (lambda (#{x 12346}#)
           (let ((#{tmp 12349}#
                   ($sc-dispatch #{x 12346}# '(#(atom "quote") any))))
             (if #{tmp 12349}#
               (@apply
                 (lambda (#{x 12351}#)
                   (list '#(syntax-object
                            quote
                            ((top)
                             #(ribcage #(x) #((top)) #("i12350"))
                             #(ribcage () () ())
                             #(ribcage #(x) #((top)) #("i12347"))
                             #(ribcage
                               (emit quasivector
                                     quasilist*
                                     quasiappend
                                     quasicons
                                     vquasi
                                     quasi)
                               ((top) (top) (top) (top) (top) (top) (top))
                               ("i12168"
                                "i12166"
                                "i12164"
                                "i12162"
                                "i12160"
                                "i12158"
                                "i12156")))
                            (hygiene guile))
                         #{x 12351}#))
                 #{tmp 12349}#)
               (let ((#{tmp 12352}#
                       ($sc-dispatch
                         #{x 12346}#
                         '(#(atom "list") . each-any))))
                 (if #{tmp 12352}#
                   (@apply
                     (lambda (#{x 12354}#)
                       (let ((#{tmp 12358}# (map #{emit 12169}# #{x 12354}#)))
                         (let ((#{tmp 12359}#
                                 ($sc-dispatch #{tmp 12358}# 'each-any)))
                           (if #{tmp 12359}#
                             (@apply
                               (lambda (#{ g12355 12361}#)
                                 (cons '#(syntax-object
                                          list
                                          ((top)
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(#{ g12355}#)
                                             #((m12356 top))
                                             #("i12360"))
                                           #(ribcage #(x) #((top)) #("i12353"))
                                           #(ribcage () () ())
                                           #(ribcage #(x) #((top)) #("i12347"))
                                           #(ribcage
                                             (emit quasivector
                                                   quasilist*
                                                   quasiappend
                                                   quasicons
                                                   vquasi
                                                   quasi)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("i12168"
                                              "i12166"
                                              "i12164"
                                              "i12162"
                                              "i12160"
                                              "i12158"
                                              "i12156")))
                                          (hygiene guile))
                                       #{ g12355 12361}#))
                               #{tmp 12359}#)
                             (syntax-violation
                               #f
                               "source expression failed to match any pattern"
                               #{tmp 12358}#)))))
                     #{tmp 12352}#)
                   (let ((#{tmp 12364}#
                           ($sc-dispatch
                             #{x 12346}#
                             '(#(atom "list*") . #(each+ any (any) ())))))
                     (if #{tmp 12364}#
                       (@apply
                         (lambda (#{x 12367}# #{y 12368}#)
                           (letrec*
                             ((#{f 12371}#
                                (lambda (#{x* 12372}#)
                                  (if (null? #{x* 12372}#)
                                    (#{emit 12169}# #{y 12368}#)
                                    (let ((#{tmp 12378}#
                                            (list (#{emit 12169}#
                                                    (car #{x* 12372}#))
                                                  (#{f 12371}#
                                                    (cdr #{x* 12372}#)))))
                                      (let ((#{tmp 12379}#
                                              ($sc-dispatch
                                                #{tmp 12378}#
                                                '(any any))))
                                        (if #{tmp 12379}#
                                          (@apply
                                            (lambda (#{ g12375 12382}#
                                                     #{ g12374 12383}#)
                                              (list '#(syntax-object
                                                       cons
                                                       ((top)
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(#{ g12375}#
                                                            #{ g12374}#)
                                                          #((m12376 top)
                                                            (m12376 top))
                                                          #("i12380" "i12381"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(f x*)
                                                          #((top) (top))
                                                          #("i12369" "i12370"))
                                                        #(ribcage
                                                          #(x y)
                                                          #((top) (top))
                                                          #("i12365" "i12366"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(x)
                                                          #((top))
                                                          #("i12347"))
                                                        #(ribcage
                                                          (emit quasivector
                                                                quasilist*
                                                                quasiappend
                                                                quasicons
                                                                vquasi
                                                                quasi)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("i12168"
                                                           "i12166"
                                                           "i12164"
                                                           "i12162"
                                                           "i12160"
                                                           "i12158"
                                                           "i12156")))
                                                       (hygiene guile))
                                                    #{ g12375 12382}#
                                                    #{ g12374 12383}#))
                                            #{tmp 12379}#)
                                          (syntax-violation
                                            #f
                                            "source expression failed to match any pattern"
                                            #{tmp 12378}#))))))))
                             (#{f 12371}# #{x 12367}#)))
                         #{tmp 12364}#)
                       (let ((#{tmp 12384}#
                               ($sc-dispatch
                                 #{x 12346}#
                                 '(#(atom "append") . each-any))))
                         (if #{tmp 12384}#
                           (@apply
                             (lambda (#{x 12386}#)
                               (let ((#{tmp 12390}#
                                       (map #{emit 12169}# #{x 12386}#)))
                                 (let ((#{tmp 12391}#
                                         ($sc-dispatch
                                           #{tmp 12390}#
                                           'each-any)))
                                   (if #{tmp 12391}#
                                     (@apply
                                       (lambda (#{ g12387 12393}#)
                                         (cons '#(syntax-object
                                                  append
                                                  ((top)
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(#{ g12387}#)
                                                     #((m12388 top))
                                                     #("i12392"))
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i12385"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i12347"))
                                                   #(ribcage
                                                     (emit quasivector
                                                           quasilist*
                                                           quasiappend
                                                           quasicons
                                                           vquasi
                                                           quasi)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("i12168"
                                                      "i12166"
                                                      "i12164"
                                                      "i12162"
                                                      "i12160"
                                                      "i12158"
                                                      "i12156")))
                                                  (hygiene guile))
                                               #{ g12387 12393}#))
                                       #{tmp 12391}#)
                                     (syntax-violation
                                       #f
                                       "source expression failed to match any pattern"
                                       #{tmp 12390}#)))))
                             #{tmp 12384}#)
                           (let ((#{tmp 12396}#
                                   ($sc-dispatch
                                     #{x 12346}#
                                     '(#(atom "vector") . each-any))))
                             (if #{tmp 12396}#
                               (@apply
                                 (lambda (#{x 12398}#)
                                   (let ((#{tmp 12402}#
                                           (map #{emit 12169}# #{x 12398}#)))
                                     (let ((#{tmp 12403}#
                                             ($sc-dispatch
                                               #{tmp 12402}#
                                               'each-any)))
                                       (if #{tmp 12403}#
                                         (@apply
                                           (lambda (#{ g12399 12405}#)
                                             (cons '#(syntax-object
                                                      vector
                                                      ((top)
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(#{ g12399}#)
                                                         #((m12400 top))
                                                         #("i12404"))
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i12397"))
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i12347"))
                                                       #(ribcage
                                                         (emit quasivector
                                                               quasilist*
                                                               quasiappend
                                                               quasicons
                                                               vquasi
                                                               quasi)
                                                         ((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                         ("i12168"
                                                          "i12166"
                                                          "i12164"
                                                          "i12162"
                                                          "i12160"
                                                          "i12158"
                                                          "i12156")))
                                                      (hygiene guile))
                                                   #{ g12399 12405}#))
                                           #{tmp 12403}#)
                                         (syntax-violation
                                           #f
                                           "source expression failed to match any pattern"
                                           #{tmp 12402}#)))))
                                 #{tmp 12396}#)
                               (let ((#{tmp 12408}#
                                       ($sc-dispatch
                                         #{x 12346}#
                                         '(#(atom "list->vector") any))))
                                 (if #{tmp 12408}#
                                   (@apply
                                     (lambda (#{x 12410}#)
                                       (let ((#{tmp 12414}#
                                               (#{emit 12169}# #{x 12410}#)))
                                         (list '#(syntax-object
                                                  list->vector
                                                  ((top)
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(#{ g12411}#)
                                                     #((m12412 top))
                                                     #("i12415"))
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i12409"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i12347"))
                                                   #(ribcage
                                                     (emit quasivector
                                                           quasilist*
                                                           quasiappend
                                                           quasicons
                                                           vquasi
                                                           quasi)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("i12168"
                                                      "i12166"
                                                      "i12164"
                                                      "i12162"
                                                      "i12160"
                                                      "i12158"
                                                      "i12156")))
                                                  (hygiene guile))
                                               #{tmp 12414}#)))
                                     #{tmp 12408}#)
                                   (let ((#{tmp 12417}#
                                           ($sc-dispatch
                                             #{x 12346}#
                                             '(#(atom "value") any))))
                                     (if #{tmp 12417}#
                                       (@apply
                                         (lambda (#{x 12419}#) #{x 12419}#)
                                         #{tmp 12417}#)
                                       (syntax-violation
                                         #f
                                         "source expression failed to match any pattern"
                                         #{x 12346}#))))))))))))))))))
      (lambda (#{x 12420}#)
        (let ((#{tmp 12423}#
                ($sc-dispatch #{x 12420}# '(_ any))))
          (if #{tmp 12423}#
            (@apply
              (lambda (#{e 12425}#)
                (#{emit 12169}# (#{quasi 12157}# #{e 12425}# 0)))
              #{tmp 12423}#)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              #{x 12420}#)))))))

(define include
  (make-syntax-transformer
    'include
    'macro
    (lambda (#{x 12691}#)
      (let ((#{tmp 12708}#
              ($sc-dispatch #{x 12691}# '(any any))))
        (if #{tmp 12708}#
          (@apply
            (lambda (#{k 12711}# #{filename 12712}#)
              (let ((#{fn 12714}# (syntax->datum #{filename 12712}#)))
                (let ((#{tmp 12716}#
                        ((lambda (#{fn 12695}# #{k 12696}#)
                           (let ((#{p 12700}# (open-input-file #{fn 12695}#)))
                             (letrec*
                               ((#{f 12704}#
                                  (lambda (#{x 12705}# #{result 12706}#)
                                    (if (eof-object? #{x 12705}#)
                                      (begin
                                        (close-input-port #{p 12700}#)
                                        (reverse #{result 12706}#))
                                      (#{f 12704}#
                                        (read #{p 12700}#)
                                        (cons (datum->syntax
                                                #{k 12696}#
                                                #{x 12705}#)
                                              #{result 12706}#))))))
                               (#{f 12704}# (read #{p 12700}#) '()))))
                         #{fn 12714}#
                         #{filename 12712}#)))
                  (let ((#{tmp 12717}#
                          ($sc-dispatch #{tmp 12716}# 'each-any)))
                    (if #{tmp 12717}#
                      (@apply
                        (lambda (#{exp 12719}#)
                          (cons '#(syntax-object
                                   begin
                                   ((top)
                                    #(ribcage () () ())
                                    #(ribcage #(exp) #((top)) #("i12718"))
                                    #(ribcage () () ())
                                    #(ribcage () () ())
                                    #(ribcage #(fn) #((top)) #("i12713"))
                                    #(ribcage
                                      #(k filename)
                                      #((top) (top))
                                      #("i12709" "i12710"))
                                    #(ribcage (read-file) ((top)) ("i12693"))
                                    #(ribcage #(x) #((top)) #("i12692")))
                                   (hygiene guile))
                                #{exp 12719}#))
                        #{tmp 12717}#)
                      (syntax-violation
                        #f
                        "source expression failed to match any pattern"
                        #{tmp 12716}#))))))
            #{tmp 12708}#)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            #{x 12691}#))))))

(define include-from-path
  (make-syntax-transformer
    'include-from-path
    'macro
    (lambda (#{x 12816}#)
      (let ((#{tmp 12819}#
              ($sc-dispatch #{x 12816}# '(any any))))
        (if #{tmp 12819}#
          (@apply
            (lambda (#{k 12822}# #{filename 12823}#)
              (let ((#{fn 12825}# (syntax->datum #{filename 12823}#)))
                (let ((#{tmp 12827}#
                        (datum->syntax
                          #{filename 12823}#
                          (let ((#{t 12832}# (%search-load-path #{fn 12825}#)))
                            (if #{t 12832}#
                              #{t 12832}#
                              (syntax-violation
                                'include-from-path
                                "file not found in path"
                                #{x 12816}#
                                #{filename 12823}#))))))
                  (list '#(syntax-object
                           include
                           ((top)
                            #(ribcage () () ())
                            #(ribcage #(fn) #((top)) #("i12828"))
                            #(ribcage () () ())
                            #(ribcage () () ())
                            #(ribcage #(fn) #((top)) #("i12824"))
                            #(ribcage
                              #(k filename)
                              #((top) (top))
                              #("i12820" "i12821"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i12817")))
                           (hygiene guile))
                        #{tmp 12827}#))))
            #{tmp 12819}#)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            #{x 12816}#))))))

(define unquote
  (make-syntax-transformer
    'unquote
    'macro
    (lambda (#{x 12834}#)
      (syntax-violation
        'unquote
        "expression not valid outside of quasiquote"
        #{x 12834}#))))

(define unquote-splicing
  (make-syntax-transformer
    'unquote-splicing
    'macro
    (lambda (#{x 12836}#)
      (syntax-violation
        'unquote-splicing
        "expression not valid outside of quasiquote"
        #{x 12836}#))))

(define case
  (make-syntax-transformer
    'case
    'macro
    (lambda (#{x 12838}#)
      (let ((#{tmp 12841}#
              ($sc-dispatch
                #{x 12838}#
                '(_ any any . each-any))))
        (if #{tmp 12841}#
          (@apply
            (lambda (#{e 12845}# #{m1 12846}# #{m2 12847}#)
              (let ((#{tmp 12849}#
                      (letrec*
                        ((#{f 12855}#
                           (lambda (#{clause 12856}# #{clauses 12857}#)
                             (if (null? #{clauses 12857}#)
                               (let ((#{tmp 12860}#
                                       ($sc-dispatch
                                         #{clause 12856}#
                                         '(#(free-id
                                             #(syntax-object
                                               else
                                               ((top)
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(f clause clauses)
                                                  #((top) (top) (top))
                                                  #("i12852"
                                                    "i12853"
                                                    "i12854"))
                                                #(ribcage
                                                  #(e m1 m2)
                                                  #((top) (top) (top))
                                                  #("i12842"
                                                    "i12843"
                                                    "i12844"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(x)
                                                  #((top))
                                                  #("i12839")))
                                               (hygiene guile)))
                                           any
                                           .
                                           each-any))))
                                 (if #{tmp 12860}#
                                   (@apply
                                     (lambda (#{e1 12863}# #{e2 12864}#)
                                       (cons '#(syntax-object
                                                begin
                                                ((top)
                                                 #(ribcage
                                                   #(e1 e2)
                                                   #((top) (top))
                                                   #("i12861" "i12862"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(f clause clauses)
                                                   #((top) (top) (top))
                                                   #("i12852"
                                                     "i12853"
                                                     "i12854"))
                                                 #(ribcage
                                                   #(e m1 m2)
                                                   #((top) (top) (top))
                                                   #("i12842"
                                                     "i12843"
                                                     "i12844"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("i12839")))
                                                (hygiene guile))
                                             (cons #{e1 12863}# #{e2 12864}#)))
                                     #{tmp 12860}#)
                                   (let ((#{tmp 12866}#
                                           ($sc-dispatch
                                             #{clause 12856}#
                                             '(each-any any . each-any))))
                                     (if #{tmp 12866}#
                                       (@apply
                                         (lambda (#{k 12870}#
                                                  #{e1 12871}#
                                                  #{e2 12872}#)
                                           (list '#(syntax-object
                                                    if
                                                    ((top)
                                                     #(ribcage
                                                       #(k e1 e2)
                                                       #((top) (top) (top))
                                                       #("i12867"
                                                         "i12868"
                                                         "i12869"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(f clause clauses)
                                                       #((top) (top) (top))
                                                       #("i12852"
                                                         "i12853"
                                                         "i12854"))
                                                     #(ribcage
                                                       #(e m1 m2)
                                                       #((top) (top) (top))
                                                       #("i12842"
                                                         "i12843"
                                                         "i12844"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("i12839")))
                                                    (hygiene guile))
                                                 (list '#(syntax-object
                                                          memv
                                                          ((top)
                                                           #(ribcage
                                                             #(k e1 e2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i12867"
                                                               "i12868"
                                                               "i12869"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(f
                                                               clause
                                                               clauses)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i12852"
                                                               "i12853"
                                                               "i12854"))
                                                           #(ribcage
                                                             #(e m1 m2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i12842"
                                                               "i12843"
                                                               "i12844"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("i12839")))
                                                          (hygiene guile))
                                                       '#(syntax-object
                                                          t
                                                          ((top)
                                                           #(ribcage
                                                             #(k e1 e2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i12867"
                                                               "i12868"
                                                               "i12869"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(f
                                                               clause
                                                               clauses)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i12852"
                                                               "i12853"
                                                               "i12854"))
                                                           #(ribcage
                                                             #(e m1 m2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i12842"
                                                               "i12843"
                                                               "i12844"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("i12839")))
                                                          (hygiene guile))
                                                       (list '#(syntax-object
                                                                quote
                                                                ((top)
                                                                 #(ribcage
                                                                   #(k e1 e2)
                                                                   #((top)
                                                                     (top)
                                                                     (top))
                                                                   #("i12867"
                                                                     "i12868"
                                                                     "i12869"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(f
                                                                     clause
                                                                     clauses)
                                                                   #((top)
                                                                     (top)
                                                                     (top))
                                                                   #("i12852"
                                                                     "i12853"
                                                                     "i12854"))
                                                                 #(ribcage
                                                                   #(e m1 m2)
                                                                   #((top)
                                                                     (top)
                                                                     (top))
                                                                   #("i12842"
                                                                     "i12843"
                                                                     "i12844"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("i12839")))
                                                                (hygiene
                                                                  guile))
                                                             #{k 12870}#))
                                                 (cons '#(syntax-object
                                                          begin
                                                          ((top)
                                                           #(ribcage
                                                             #(k e1 e2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i12867"
                                                               "i12868"
                                                               "i12869"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(f
                                                               clause
                                                               clauses)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i12852"
                                                               "i12853"
                                                               "i12854"))
                                                           #(ribcage
                                                             #(e m1 m2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i12842"
                                                               "i12843"
                                                               "i12844"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("i12839")))
                                                          (hygiene guile))
                                                       (cons #{e1 12871}#
                                                             #{e2 12872}#))))
                                         #{tmp 12866}#)
                                       (syntax-violation
                                         'case
                                         "bad clause"
                                         #{x 12838}#
                                         #{clause 12856}#)))))
                               (let ((#{tmp 12878}#
                                       (#{f 12855}#
                                         (car #{clauses 12857}#)
                                         (cdr #{clauses 12857}#))))
                                 (let ((#{tmp 12882}#
                                         ($sc-dispatch
                                           #{clause 12856}#
                                           '(each-any any . each-any))))
                                   (if #{tmp 12882}#
                                     (@apply
                                       (lambda (#{k 12886}#
                                                #{e1 12887}#
                                                #{e2 12888}#)
                                         (list '#(syntax-object
                                                  if
                                                  ((top)
                                                   #(ribcage
                                                     #(k e1 e2)
                                                     #((top) (top) (top))
                                                     #("i12883"
                                                       "i12884"
                                                       "i12885"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(rest)
                                                     #((top))
                                                     #("i12879"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(f clause clauses)
                                                     #((top) (top) (top))
                                                     #("i12852"
                                                       "i12853"
                                                       "i12854"))
                                                   #(ribcage
                                                     #(e m1 m2)
                                                     #((top) (top) (top))
                                                     #("i12842"
                                                       "i12843"
                                                       "i12844"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i12839")))
                                                  (hygiene guile))
                                               (list '#(syntax-object
                                                        memv
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("i12883"
                                                             "i12884"
                                                             "i12885"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(rest)
                                                           #((top))
                                                           #("i12879"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("i12852"
                                                             "i12853"
                                                             "i12854"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("i12842"
                                                             "i12843"
                                                             "i12844"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("i12839")))
                                                        (hygiene guile))
                                                     '#(syntax-object
                                                        t
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("i12883"
                                                             "i12884"
                                                             "i12885"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(rest)
                                                           #((top))
                                                           #("i12879"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("i12852"
                                                             "i12853"
                                                             "i12854"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("i12842"
                                                             "i12843"
                                                             "i12844"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("i12839")))
                                                        (hygiene guile))
                                                     (list '#(syntax-object
                                                              quote
                                                              ((top)
                                                               #(ribcage
                                                                 #(k e1 e2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i12883"
                                                                   "i12884"
                                                                   "i12885"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(rest)
                                                                 #((top))
                                                                 #("i12879"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(f
                                                                   clause
                                                                   clauses)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i12852"
                                                                   "i12853"
                                                                   "i12854"))
                                                               #(ribcage
                                                                 #(e m1 m2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i12842"
                                                                   "i12843"
                                                                   "i12844"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(x)
                                                                 #((top))
                                                                 #("i12839")))
                                                              (hygiene guile))
                                                           #{k 12886}#))
                                               (cons '#(syntax-object
                                                        begin
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("i12883"
                                                             "i12884"
                                                             "i12885"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(rest)
                                                           #((top))
                                                           #("i12879"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("i12852"
                                                             "i12853"
                                                             "i12854"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("i12842"
                                                             "i12843"
                                                             "i12844"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("i12839")))
                                                        (hygiene guile))
                                                     (cons #{e1 12887}#
                                                           #{e2 12888}#))
                                               #{tmp 12878}#))
                                       #{tmp 12882}#)
                                     (syntax-violation
                                       'case
                                       "bad clause"
                                       #{x 12838}#
                                       #{clause 12856}#))))))))
                        (#{f 12855}# #{m1 12846}# #{m2 12847}#))))
                (list '#(syntax-object
                         let
                         ((top)
                          #(ribcage () () ())
                          #(ribcage #(body) #((top)) #("i12850"))
                          #(ribcage
                            #(e m1 m2)
                            #((top) (top) (top))
                            #("i12842" "i12843" "i12844"))
                          #(ribcage () () ())
                          #(ribcage #(x) #((top)) #("i12839")))
                         (hygiene guile))
                      (list (list '#(syntax-object
                                     t
                                     ((top)
                                      #(ribcage () () ())
                                      #(ribcage #(body) #((top)) #("i12850"))
                                      #(ribcage
                                        #(e m1 m2)
                                        #((top) (top) (top))
                                        #("i12842" "i12843" "i12844"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("i12839")))
                                     (hygiene guile))
                                  #{e 12845}#))
                      #{tmp 12849}#)))
            #{tmp 12841}#)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            #{x 12838}#))))))

(define make-variable-transformer
  (lambda (#{proc 12894}#)
    (if (procedure? #{proc 12894}#)
      (letrec*
        ((#{trans 12897}#
           (lambda (#{x 12898}#)
             (#{proc 12894}# #{x 12898}#))))
        (begin
          (set-procedure-property!
            #{trans 12897}#
            'variable-transformer
            #t)
          #{trans 12897}#))
      (error "variable transformer not a procedure"
             #{proc 12894}#))))

(define identifier-syntax
  (make-syntax-transformer
    'identifier-syntax
    'macro
    (lambda (#{x 12904}#)
      (let ((#{tmp 12907}#
              ($sc-dispatch #{x 12904}# '(_ any))))
        (if #{tmp 12907}#
          (@apply
            (lambda (#{e 12909}#)
              (list '#(syntax-object
                       lambda
                       ((top)
                        #(ribcage #(e) #((top)) #("i12908"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i12905")))
                       (hygiene guile))
                    '(#(syntax-object
                        x
                        ((top)
                         #(ribcage #(e) #((top)) #("i12908"))
                         #(ribcage () () ())
                         #(ribcage #(x) #((top)) #("i12905")))
                        (hygiene guile)))
                    '#((#(syntax-object
                          macro-type
                          ((top)
                           #(ribcage #(e) #((top)) #("i12908"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("i12905")))
                          (hygiene guile))
                        .
                        #(syntax-object
                          identifier-syntax
                          ((top)
                           #(ribcage #(e) #((top)) #("i12908"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("i12905")))
                          (hygiene guile))))
                    (list '#(syntax-object
                             syntax-case
                             ((top)
                              #(ribcage #(e) #((top)) #("i12908"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i12905")))
                             (hygiene guile))
                          '#(syntax-object
                             x
                             ((top)
                              #(ribcage #(e) #((top)) #("i12908"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i12905")))
                             (hygiene guile))
                          '()
                          (list '#(syntax-object
                                   id
                                   ((top)
                                    #(ribcage #(e) #((top)) #("i12908"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("i12905")))
                                   (hygiene guile))
                                '(#(syntax-object
                                    identifier?
                                    ((top)
                                     #(ribcage #(e) #((top)) #("i12908"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i12905")))
                                    (hygiene guile))
                                  (#(syntax-object
                                     syntax
                                     ((top)
                                      #(ribcage #(e) #((top)) #("i12908"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("i12905")))
                                     (hygiene guile))
                                   #(syntax-object
                                     id
                                     ((top)
                                      #(ribcage #(e) #((top)) #("i12908"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("i12905")))
                                     (hygiene guile))))
                                (list '#(syntax-object
                                         syntax
                                         ((top)
                                          #(ribcage #(e) #((top)) #("i12908"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i12905")))
                                         (hygiene guile))
                                      #{e 12909}#))
                          (list '(#(syntax-object
                                    _
                                    ((top)
                                     #(ribcage #(e) #((top)) #("i12908"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i12905")))
                                    (hygiene guile))
                                  #(syntax-object
                                    x
                                    ((top)
                                     #(ribcage #(e) #((top)) #("i12908"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i12905")))
                                    (hygiene guile))
                                  #(syntax-object
                                    ...
                                    ((top)
                                     #(ribcage #(e) #((top)) #("i12908"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i12905")))
                                    (hygiene guile)))
                                (list '#(syntax-object
                                         syntax
                                         ((top)
                                          #(ribcage #(e) #((top)) #("i12908"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i12905")))
                                         (hygiene guile))
                                      (cons #{e 12909}#
                                            '(#(syntax-object
                                                x
                                                ((top)
                                                 #(ribcage
                                                   #(e)
                                                   #((top))
                                                   #("i12908"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("i12905")))
                                                (hygiene guile))
                                              #(syntax-object
                                                ...
                                                ((top)
                                                 #(ribcage
                                                   #(e)
                                                   #((top))
                                                   #("i12908"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("i12905")))
                                                (hygiene guile)))))))))
            #{tmp 12907}#)
          (let ((#{tmp 12910}#
                  ($sc-dispatch
                    #{x 12904}#
                    '(_ (any any)
                        ((#(free-id
                            #(syntax-object
                              set!
                              ((top)
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("i12905")))
                              (hygiene guile)))
                          any
                          any)
                         any)))))
            (if (if #{tmp 12910}#
                  (@apply
                    (lambda (#{id 12916}#
                             #{exp1 12917}#
                             #{var 12918}#
                             #{val 12919}#
                             #{exp2 12920}#)
                      (if (identifier? #{id 12916}#)
                        (identifier? #{var 12918}#)
                        #f))
                    #{tmp 12910}#)
                  #f)
              (@apply
                (lambda (#{id 12928}#
                         #{exp1 12929}#
                         #{var 12930}#
                         #{val 12931}#
                         #{exp2 12932}#)
                  (list '#(syntax-object
                           make-variable-transformer
                           ((top)
                            #(ribcage
                              #(id exp1 var val exp2)
                              #((top) (top) (top) (top) (top))
                              #("i12923" "i12924" "i12925" "i12926" "i12927"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i12905")))
                           (hygiene guile))
                        (list '#(syntax-object
                                 lambda
                                 ((top)
                                  #(ribcage
                                    #(id exp1 var val exp2)
                                    #((top) (top) (top) (top) (top))
                                    #("i12923"
                                      "i12924"
                                      "i12925"
                                      "i12926"
                                      "i12927"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("i12905")))
                                 (hygiene guile))
                              '(#(syntax-object
                                  x
                                  ((top)
                                   #(ribcage
                                     #(id exp1 var val exp2)
                                     #((top) (top) (top) (top) (top))
                                     #("i12923"
                                       "i12924"
                                       "i12925"
                                       "i12926"
                                       "i12927"))
                                   #(ribcage () () ())
                                   #(ribcage #(x) #((top)) #("i12905")))
                                  (hygiene guile)))
                              '#((#(syntax-object
                                    macro-type
                                    ((top)
                                     #(ribcage
                                       #(id exp1 var val exp2)
                                       #((top) (top) (top) (top) (top))
                                       #("i12923"
                                         "i12924"
                                         "i12925"
                                         "i12926"
                                         "i12927"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i12905")))
                                    (hygiene guile))
                                  .
                                  #(syntax-object
                                    variable-transformer
                                    ((top)
                                     #(ribcage
                                       #(id exp1 var val exp2)
                                       #((top) (top) (top) (top) (top))
                                       #("i12923"
                                         "i12924"
                                         "i12925"
                                         "i12926"
                                         "i12927"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i12905")))
                                    (hygiene guile))))
                              (list '#(syntax-object
                                       syntax-case
                                       ((top)
                                        #(ribcage
                                          #(id exp1 var val exp2)
                                          #((top) (top) (top) (top) (top))
                                          #("i12923"
                                            "i12924"
                                            "i12925"
                                            "i12926"
                                            "i12927"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i12905")))
                                       (hygiene guile))
                                    '#(syntax-object
                                       x
                                       ((top)
                                        #(ribcage
                                          #(id exp1 var val exp2)
                                          #((top) (top) (top) (top) (top))
                                          #("i12923"
                                            "i12924"
                                            "i12925"
                                            "i12926"
                                            "i12927"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i12905")))
                                       (hygiene guile))
                                    '(#(syntax-object
                                        set!
                                        ((top)
                                         #(ribcage
                                           #(id exp1 var val exp2)
                                           #((top) (top) (top) (top) (top))
                                           #("i12923"
                                             "i12924"
                                             "i12925"
                                             "i12926"
                                             "i12927"))
                                         #(ribcage () () ())
                                         #(ribcage #(x) #((top)) #("i12905")))
                                        (hygiene guile)))
                                    (list (list '#(syntax-object
                                                   set!
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i12923"
                                                        "i12924"
                                                        "i12925"
                                                        "i12926"
                                                        "i12927"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i12905")))
                                                   (hygiene guile))
                                                #{var 12930}#
                                                #{val 12931}#)
                                          (list '#(syntax-object
                                                   syntax
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i12923"
                                                        "i12924"
                                                        "i12925"
                                                        "i12926"
                                                        "i12927"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i12905")))
                                                   (hygiene guile))
                                                #{exp2 12932}#))
                                    (list (cons #{id 12928}#
                                                '(#(syntax-object
                                                    x
                                                    ((top)
                                                     #(ribcage
                                                       #(id exp1 var val exp2)
                                                       #((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                       #("i12923"
                                                         "i12924"
                                                         "i12925"
                                                         "i12926"
                                                         "i12927"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("i12905")))
                                                    (hygiene guile))
                                                  #(syntax-object
                                                    ...
                                                    ((top)
                                                     #(ribcage
                                                       #(id exp1 var val exp2)
                                                       #((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                       #("i12923"
                                                         "i12924"
                                                         "i12925"
                                                         "i12926"
                                                         "i12927"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("i12905")))
                                                    (hygiene guile))))
                                          (list '#(syntax-object
                                                   syntax
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i12923"
                                                        "i12924"
                                                        "i12925"
                                                        "i12926"
                                                        "i12927"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i12905")))
                                                   (hygiene guile))
                                                (cons #{exp1 12929}#
                                                      '(#(syntax-object
                                                          x
                                                          ((top)
                                                           #(ribcage
                                                             #(id
                                                               exp1
                                                               var
                                                               val
                                                               exp2)
                                                             #((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                             #("i12923"
                                                               "i12924"
                                                               "i12925"
                                                               "i12926"
                                                               "i12927"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("i12905")))
                                                          (hygiene guile))
                                                        #(syntax-object
                                                          ...
                                                          ((top)
                                                           #(ribcage
                                                             #(id
                                                               exp1
                                                               var
                                                               val
                                                               exp2)
                                                             #((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                             #("i12923"
                                                               "i12924"
                                                               "i12925"
                                                               "i12926"
                                                               "i12927"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("i12905")))
                                                          (hygiene guile))))))
                                    (list #{id 12928}#
                                          (list '#(syntax-object
                                                   identifier?
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i12923"
                                                        "i12924"
                                                        "i12925"
                                                        "i12926"
                                                        "i12927"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i12905")))
                                                   (hygiene guile))
                                                (list '#(syntax-object
                                                         syntax
                                                         ((top)
                                                          #(ribcage
                                                            #(id
                                                              exp1
                                                              var
                                                              val
                                                              exp2)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i12923"
                                                              "i12924"
                                                              "i12925"
                                                              "i12926"
                                                              "i12927"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(x)
                                                            #((top))
                                                            #("i12905")))
                                                         (hygiene guile))
                                                      #{id 12928}#))
                                          (list '#(syntax-object
                                                   syntax
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i12923"
                                                        "i12924"
                                                        "i12925"
                                                        "i12926"
                                                        "i12927"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i12905")))
                                                   (hygiene guile))
                                                #{exp1 12929}#))))))
                #{tmp 12910}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{x 12904}#))))))))

(define define*
  (make-syntax-transformer
    'define*
    'macro
    (lambda (#{x 12933}#)
      (let ((#{tmp 12936}#
              ($sc-dispatch
                #{x 12933}#
                '(_ (any . any) any . each-any))))
        (if #{tmp 12936}#
          (@apply
            (lambda (#{id 12941}#
                     #{args 12942}#
                     #{b0 12943}#
                     #{b1 12944}#)
              (list '#(syntax-object
                       define
                       ((top)
                        #(ribcage
                          #(id args b0 b1)
                          #((top) (top) (top) (top))
                          #("i12937" "i12938" "i12939" "i12940"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i12934")))
                       (hygiene guile))
                    #{id 12941}#
                    (cons '#(syntax-object
                             lambda*
                             ((top)
                              #(ribcage
                                #(id args b0 b1)
                                #((top) (top) (top) (top))
                                #("i12937" "i12938" "i12939" "i12940"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i12934")))
                             (hygiene guile))
                          (cons #{args 12942}#
                                (cons #{b0 12943}# #{b1 12944}#)))))
            #{tmp 12936}#)
          (let ((#{tmp 12946}#
                  ($sc-dispatch #{x 12933}# '(_ any any))))
            (if (if #{tmp 12946}#
                  (@apply
                    (lambda (#{id 12949}# #{val 12950}#)
                      (identifier?
                        '#(syntax-object
                           x
                           ((top)
                            #(ribcage
                              #(id val)
                              #((top) (top))
                              #("i12947" "i12948"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i12934")))
                           (hygiene guile))))
                    #{tmp 12946}#)
                  #f)
              (@apply
                (lambda (#{id 12953}# #{val 12954}#)
                  (list '#(syntax-object
                           define
                           ((top)
                            #(ribcage
                              #(id val)
                              #((top) (top))
                              #("i12951" "i12952"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i12934")))
                           (hygiene guile))
                        #{id 12953}#
                        #{val 12954}#))
                #{tmp 12946}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{x 12933}#))))))))

